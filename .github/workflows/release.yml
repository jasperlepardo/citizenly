name: Deploy & Release

# Controlled deployment workflow
# - Push to develop: Automatic deployment to dev environment
# - Manual releases: Deploy to staging and production

on:
  push:
    branches:
      - develop     # Development (auto-deploy)
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  deploy:
    name: Deploy & Release
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'skip ci') }}
    
    # Use GitHub Environments for environment-specific secrets
    environment: 
      name: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'development' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Switch to target branch for manual deployments
        if: github.event_name == 'workflow_dispatch'
        run: |
          if [ "${{ inputs.environment }}" = "staging" ]; then
            git checkout staging || git checkout -b staging
            git merge develop --no-ff -m "Release to staging"
          elif [ "${{ inputs.environment }}" = "production" ]; then
            git checkout main || git checkout -b main  
            git merge staging --no-ff -m "Release to production"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security checks
        run: npm run security:check

      - name: Run tests
        run: npm run test:ci

      - name: Run type check
        run: npm run type-check

      - name: Run lint
        run: npm run lint
        continue-on-error: true

      - name: Build application
        run: npm run build
        env:
          # Use environment-specific variables from GitHub Environments
          # IDE warnings expected: Environment-specific secrets with fallbacks
          NEXT_PUBLIC_SUPABASE_URL: ${{ vars.SUPABASE_URL || 'https://placeholder.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY || 'placeholder-anon-key' }}
          CSRF_SECRET: ${{ secrets.CSRF_SECRET || 'placeholder-csrf-secret-32-characters-long' }}
          
          # Set environment for proper .env file loading
          NEXT_PUBLIC_APP_ENV: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'development' }}

      - name: Run SonarCloud quality gate
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # IDE warning expected: Optional integration secret with fallback
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN || '' }}
        continue-on-error: true
        with:
          args: >
            -Dsonar.qualitygate.wait=true

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # IDE warning expected: Optional integration secret with fallback
          NPM_TOKEN: ${{ secrets.NPM_TOKEN || '' }}
        run: npm run release
        continue-on-error: true

      - name: Push merged changes for manual deployments
        if: github.event_name == 'workflow_dispatch'
        run: |
          if [ "${{ inputs.environment }}" = "staging" ]; then
            git push origin staging
          elif [ "${{ inputs.environment }}" = "production" ]; then
            git push origin main
          fi