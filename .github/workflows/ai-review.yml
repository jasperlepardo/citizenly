name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  ai-review:
    name: AI Code Review
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            **/*.{js,jsx,ts,tsx}
          files_ignore: |
            **/*.test.{js,jsx,ts,tsx}
            **/*.spec.{js,jsx,ts,tsx}
            **/*.stories.{js,jsx,ts,tsx}

      - name: AI Code Review
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Get changed files
            const changedFiles = process.env.CHANGED_FILES.split(' ');
            
            let reviewComments = [];
            
            for (const file of changedFiles) {
              if (!fs.existsSync(file)) continue;
              
              const content = fs.readFileSync(file, 'utf8');
              const lines = content.split('\n');
              
              // Basic automated review checks
              lines.forEach((line, index) => {
                const lineNum = index + 1;
                
                // Check for console.log
                if (line.includes('console.log') && !line.includes('// eslint-disable')) {
                  reviewComments.push({
                    path: file,
                    line: lineNum,
                    body: 'üö® **Code Quality**: Consider using the secure logger instead of console.log for production code.\n\n```suggestion\nimport { secureLogger } from \'@/lib/secure-logger\';\nsecureLogger.info(/* your message */);\n```'
                  });
                }
                
                // Check for any type
                if (line.includes(': any') && !line.includes('// @ts-')) {
                  reviewComments.push({
                    path: file,
                    line: lineNum,
                    body: 'üîç **Type Safety**: Consider using a more specific type instead of `any` to improve type safety.'
                  });
                }
                
                // Check for TODO comments
                if (line.includes('TODO') || line.includes('FIXME')) {
                  reviewComments.push({
                    path: file,
                    line: lineNum,
                    body: 'üìù **Technical Debt**: TODO/FIXME comment found. Consider creating a GitHub issue to track this work.'
                  });
                }
                
                // Check for hardcoded strings that might need i18n
                if (line.match(/["']([A-Z][a-z\s]{10,})["']/)) {
                  reviewComments.push({
                    path: file,
                    line: lineNum,
                    body: 'üåê **Internationalization**: Consider if this user-facing text should be moved to a translation file.'
                  });
                }
                
                // Check for missing error handling
                if (line.includes('await ') && !content.includes('try') && !content.includes('catch')) {
                  reviewComments.push({
                    path: file,
                    line: lineNum,
                    body: '‚ö†Ô∏è **Error Handling**: Consider adding proper error handling for async operations.'
                  });
                }
              });
            }
            
            // Post review comments
            if (reviewComments.length > 0) {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                comments: reviewComments.slice(0, 10), // Limit to 10 comments
                event: 'COMMENT'
              });
            }
            
            // Post summary comment
            const summaryComment = `## ü§ñ AI Code Review Summary
            
**Files analyzed**: ${changedFiles.length}
**Issues found**: ${reviewComments.length}

### Quick Stats:
- Console.log statements: ${reviewComments.filter(c => c.body.includes('console.log')).length}
- Type safety issues: ${reviewComments.filter(c => c.body.includes('any')).length}
- TODO/FIXME items: ${reviewComments.filter(c => c.body.includes('TODO')).length}

${reviewComments.length === 0 ? '‚úÖ **Great job!** No automated issues detected.' : ''}
${reviewComments.length > 10 ? `\n‚ö†Ô∏è **Note**: Only showing first 10 issues. Total found: ${reviewComments.length}` : ''}

---
*Automated review by GitHub Actions*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summaryComment
            });
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}