name: Automated Code Review

# Note: VS Code may show warnings about "Context access might be invalid" for optional secrets.
# These are expected warnings for optional integrations (Codecov, Semgrep, SonarCloud, etc.).
# The workflows will work correctly with or without these secrets configured.

on:
  workflow_dispatch: # Temporarily disable automatic triggers
  # pull_request:
  #   branches: [main, develop]
  # push:
  #   branches: [develop, 'feature/**', 'release/**', 'hotfix/**']

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write
  security-events: write

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Advanced caching for faster builds
      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
            ${{ github.workspace }}/.eslintcache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-nextjs-

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint with reviewdog
        uses: reviewdog/action-eslint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          eslint_flags: 'src/'
          fail_level: error

      - name: Install reviewdog
        run: |
          curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b ./bin
          echo "./bin" >> $GITHUB_PATH

      - name: Run TypeScript check with reviewdog
        run: |
          npm run type-check 2>&1 | \
          ./bin/reviewdog -efm="%f(%l,%c): %t%n %m" \
            -name="TypeScript" \
            -reporter=github-pr-review \
            -fail-on-error=false || true
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          # Optional: Only runs if CODECOV_TOKEN is configured
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
        continue-on-error: true
        if: secrets.CODECOV_TOKEN != ''
        env:
          # IDE warning expected: Optional integration secret
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Security audit
        run: npm audit --audit-level=high --production

      - name: Check bundle size
        run: |
          npm run build
          npx bundlesize
        env:
          NODE_ENV: production
          CSRF_SECRET: 'dev-csrf-secret-for-build-only-32-chars-long'
          NEXT_PUBLIC_SUPABASE_URL: 'https://placeholder.supabase.co'
          NEXT_PUBLIC_SUPABASE_ANON_KEY: 'placeholder-key-for-build-testing'

  complexity-analysis:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Advanced caching for faster builds
      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
            ${{ github.workspace }}/.eslintcache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-nextjs-

      - name: Install dependencies
        run: npm ci

      - name: Analyze code complexity
        run: |
          npx jscpd src --reporters json --output ./jscpd-report.json || true
          echo '{"summary":{"average":{"complexity":"N/A","maintainability":"N/A"}}}' > complexity-report.json

      - name: Comment complexity report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## 📊 Code Quality Report\n\n';
            
            try {
              const complexity = JSON.parse(fs.readFileSync('complexity-report.json', 'utf8'));
              comment += `### Complexity Analysis\n`;
              comment += `- **Average Complexity**: ${complexity.summary?.average?.complexity || 'N/A'}\n`;
              comment += `- **Maintainability Index**: ${complexity.summary?.average?.maintainability || 'N/A'}\n\n`;
            } catch (e) {
              // Complexity report not available
            }
            
            try {
              const jscpd = JSON.parse(fs.readFileSync('jscpd-report.json', 'utf8'));
              const duplicatePercentage = jscpd.statistics?.total?.percentage || 0;
              comment += `### Code Duplication\n`;
              comment += `- **Duplication**: ${duplicatePercentage}%\n`;
              comment += duplicatePercentage > 10 ? '⚠️ High duplication detected\n' : '✅ Low duplication\n';
            } catch (e) {
              // Duplication report not available
            }
            
            comment += '\n---\n*Automated by GitHub Actions*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/react
            p/typescript
        env:
          # IDE warning expected: Optional integration secret
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true
        if: secrets.SEMGREP_APP_TOKEN != ''

      - name: Run our custom security checks
        run: |
          chmod +x ./scripts/security/check-security.sh
          ./scripts/security/check-security.sh

  performance-budget:
    name: Performance Budget
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Advanced caching for faster builds
      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
            ${{ github.workspace }}/.eslintcache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-nextjs-

      - name: Install dependencies
        run: npm ci

      - name: Build and analyze bundle
        run: |
          npm run build
          npx webpack-bundle-analyzer .next/static/chunks --report --mode static --report-filename bundle-report.html || true
        env:
          NODE_ENV: production
          CSRF_SECRET: 'dev-csrf-secret-for-build-only-32-chars-long'
          NEXT_PUBLIC_SUPABASE_URL: 'https://placeholder.supabase.co'
          NEXT_PUBLIC_SUPABASE_ANON_KEY: 'placeholder-key-for-build-testing'

      - name: Check performance budget
        run: |
          echo "## 📦 Bundle Analysis" > performance-report.md
          
          BUNDLE_SIZE=$(du -sh .next/static/chunks | cut -f1)
          echo "- **Total Bundle Size**: $BUNDLE_SIZE" >> performance-report.md
          
          npx bundlesize || echo "- ⚠️ Bundle size exceeded threshold" >> performance-report.md

      - name: Comment performance report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const report = fs.readFileSync('performance-report.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            } catch (e) {
              // Performance report not available
            }

  sonarcloud:
    name: SonarCloud Quality Gate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Advanced caching for faster builds
      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
            ${{ github.workspace }}/.eslintcache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-nextjs-

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          CI: true

      - name: Run ESLint for SonarCloud
        run: npm run lint -- --format json --output-file eslint-report.json || true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # IDE warning expected: Optional integration secret
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true
        if: secrets.SONAR_TOKEN != ''
        with:
          args: >
            -Dsonar.javascript.eslint.reportPaths=eslint-report.json
            -Dsonar.qualitygate.wait=true
            -Dsonar.pullrequest.key=${{ github.event.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}

      - name: Comment SonarCloud Results
        # IDE warning expected: ACT is a GitHub Actions environment variable
        if: github.event_name == 'pull_request' && !env.ACT
        uses: actions/github-script@v7
        with:
          script: |
            const sonarUrl = `https://sonarcloud.io/project/overview?id=jasperlepardo_citizenly`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📊 SonarCloud Analysis Complete
              
            View detailed code quality analysis: [SonarCloud Dashboard](${sonarUrl})
            
            - **Quality Gate**: Check the dashboard for pass/fail status
            - **Coverage**: Test coverage metrics and trends  
            - **Issues**: Code smells, bugs, and security hotspots
            - **Maintainability**: Technical debt and complexity analysis`
            });
        continue-on-error: true