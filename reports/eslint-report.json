[{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/scripts/generate-enums.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":289,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":289,"endColumn":16,"suggestions":[{"fix":{"range":[9415,9453],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":296,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":296,"endColumn":16,"suggestions":[{"fix":{"range":[9744,9781],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":300,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":300,"endColumn":16,"suggestions":[{"fix":{"range":[9872,9892],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":302,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":302,"endColumn":16,"suggestions":[{"fix":{"range":[9902,9948],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":303,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":303,"endColumn":16,"suggestions":[{"fix":{"range":[9953,9983],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":304,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":304,"endColumn":16,"suggestions":[{"fix":{"range":[9988,10050],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":305,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":305,"endColumn":16,"suggestions":[{"fix":{"range":[10055,10126],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":306,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":306,"endColumn":16,"suggestions":[{"fix":{"range":[10131,10186],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env tsx\n\n/**\n * Automated Enum Generator\n * Generates TypeScript enums from database schema and validation files\n * Ensures consistency between API validation, database, and frontend forms\n */\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\n\ninterface EnumOption {\n  value: string;\n  label: string;\n}\n\ninterface EnumDefinition {\n  name: string;\n  options: EnumOption[];\n  description?: string;\n}\n\n// Master enum definitions - single source of truth\nconst MASTER_ENUMS: Record<string, EnumDefinition> = {\n  SEX: {\n    name: 'SEX_OPTIONS',\n    description: 'Gender/sex options',\n    options: [\n      { value: 'male', label: 'Male' },\n      { value: 'female', label: 'Female' },\n    ],\n  },\n  \n  CIVIL_STATUS: {\n    name: 'CIVIL_STATUS_OPTIONS',\n    description: 'Marital status options',\n    options: [\n      { value: 'single', label: 'Single' },\n      { value: 'married', label: 'Married' },\n      { value: 'widowed', label: 'Widowed' },\n      { value: 'divorced', label: 'Divorced' },\n      { value: 'separated', label: 'Separated' },\n      { value: 'annulled', label: 'Annulled' },\n      { value: 'others', label: 'Others (specify)' },\n    ],\n  },\n  \n  EMPLOYMENT_STATUS: {\n    name: 'EMPLOYMENT_STATUS_OPTIONS',\n    description: 'Employment status options - synced with API validation',\n    options: [\n      { value: 'employed', label: 'Employed' },\n      { value: 'unemployed', label: 'Unemployed' },\n      { value: 'self_employed', label: 'Self Employed' },\n      { value: 'student', label: 'Student' },\n      { value: 'retired', label: 'Retired' },\n      { value: 'not_in_labor_force', label: 'Not in Labor Force' },\n      { value: 'ofw', label: 'Overseas Filipino Worker (OFW)' },\n    ],\n  },\n  \n  BLOOD_TYPE: {\n    name: 'BLOOD_TYPE_OPTIONS',\n    description: 'Blood type options',\n    options: [\n      { value: 'A+', label: 'A+' },\n      { value: 'A-', label: 'A-' },\n      { value: 'B+', label: 'B+' },\n      { value: 'B-', label: 'B-' },\n      { value: 'AB+', label: 'AB+' },\n      { value: 'AB-', label: 'AB-' },\n      { value: 'O+', label: 'O+' },\n      { value: 'O-', label: 'O-' },\n    ],\n  },\n  \n  CITIZENSHIP: {\n    name: 'CITIZENSHIP_OPTIONS',\n    description: 'Citizenship options',\n    options: [\n      { value: 'filipino', label: 'Filipino' },\n      { value: 'dual_citizen', label: 'Dual Citizen' },\n      { value: 'foreigner', label: 'Foreigner' },\n    ],\n  },\n  \n  RELIGION: {\n    name: 'RELIGION_OPTIONS',\n    description: 'Religious affiliation options',\n    options: [\n      { value: 'roman_catholic', label: 'Roman Catholic' },\n      { value: 'islam', label: 'Islam' },\n      { value: 'iglesia_ni_cristo', label: 'Iglesia ni Cristo' },\n      { value: 'christian', label: 'Christian' },\n      { value: 'aglipayan_church', label: 'Aglipayan Church' },\n      { value: 'seventh_day_adventist', label: 'Seventh Day Adventist' },\n      { value: 'bible_baptist_church', label: 'Bible Baptist Church' },\n      { value: 'jehovahs_witnesses', label: 'Jehovahs Witnesses' },\n      { value: 'church_of_jesus_christ_latter_day_saints', label: 'Church of Jesus Christ of Latter-day Saints' },\n      { value: 'united_church_of_christ_philippines', label: 'United Church of Christ Philippines' },\n      { value: 'others', label: 'Others (specify)' },\n    ],\n  },\n  \n  ETHNICITY: {\n    name: 'ETHNICITY_OPTIONS',\n    description: 'Ethnicity/tribal affiliation options',\n    options: [\n      // Major ethnic groups\n      { value: 'tagalog', label: 'Tagalog' },\n      { value: 'cebuano', label: 'Cebuano' },\n      { value: 'ilocano', label: 'Ilocano' },\n      { value: 'bisaya', label: 'Bisaya' },\n      { value: 'hiligaynon', label: 'Hiligaynon' },\n      { value: 'bikolano', label: 'Bikolano' },\n      { value: 'waray', label: 'Waray' },\n      { value: 'kapampangan', label: 'Kapampangan' },\n      { value: 'pangasinense', label: 'Pangasinense' },\n      // Muslim/Moro groups\n      { value: 'maranao', label: 'Maranao' },\n      { value: 'maguindanao', label: 'Maguindanao' },\n      { value: 'tausug', label: 'Tausug' },\n      { value: 'yakan', label: 'Yakan' },\n      { value: 'samal', label: 'Samal' },\n      { value: 'badjao', label: 'Badjao' },\n      // Indigenous Peoples\n      { value: 'aeta', label: 'Aeta' },\n      { value: 'agta', label: 'Agta' },\n      { value: 'ati', label: 'Ati' },\n      { value: 'batak', label: 'Batak' },\n      { value: 'bukidnon', label: 'Bukidnon' },\n      { value: 'gaddang', label: 'Gaddang' },\n      { value: 'higaonon', label: 'Higaonon' },\n      { value: 'ibaloi', label: 'Ibaloi' },\n      { value: 'ifugao', label: 'Ifugao' },\n      { value: 'igorot', label: 'Igorot' },\n      { value: 'ilongot', label: 'Ilongot' },\n      { value: 'isneg', label: 'Isneg' },\n      { value: 'ivatan', label: 'Ivatan' },\n      { value: 'kalinga', label: 'Kalinga' },\n      { value: 'kankanaey', label: 'Kankanaey' },\n      { value: 'mangyan', label: 'Mangyan' },\n      { value: 'mansaka', label: 'Mansaka' },\n      { value: 'palawan', label: 'Palawan' },\n      { value: 'subanen', label: 'Subanen' },\n      { value: 'tboli', label: 'Tboli' },\n      { value: 'teduray', label: 'Teduray' },\n      { value: 'tumandok', label: 'Tumandok' },\n      // Other groups\n      { value: 'chinese', label: 'Chinese' },\n      { value: 'others', label: 'Others' },\n    ],\n  },\n  \n  EDUCATION_LEVEL: {\n    name: 'EDUCATION_LEVEL_OPTIONS',\n    description: 'Education attainment levels - aligned with Supabase schema',\n    options: [\n      { value: 'elementary', label: 'Elementary' },\n      { value: 'high_school', label: 'High School' },\n      { value: 'college', label: 'College' },\n      { value: 'post_graduate', label: 'Post Graduate' },\n      { value: 'vocational', label: 'Vocational' },\n    ],\n  },\n  \n  INCOME_CLASS: {\n    name: 'INCOME_CLASS_OPTIONS',\n    description: 'Income Classifications (NEDA standards)',\n    options: [\n      { value: 'rich', label: 'Rich' },\n      { value: 'high_income', label: 'High Income' },\n      { value: 'upper_middle_income', label: 'Upper Middle Income' },\n      { value: 'middle_class', label: 'Middle Class' },\n      { value: 'lower_middle_class', label: 'Lower Middle Class' },\n      { value: 'low_income', label: 'Low Income' },\n      { value: 'poor', label: 'Poor' },\n      { value: 'not_determined', label: 'Not Determined' },\n    ],\n  },\n};\n\n/**\n * Generate TypeScript enum file content\n */\nfunction generateEnumFileContent(): string {\n  const timestamp = new Date().toISOString();\n  \n  let content = `/**\n * Generated Enums - Single Source of Truth\n * \n * This file is auto-generated. Do not edit manually.\n * Generated at: ${timestamp}\n * \n * To update enums, modify scripts/generate-enums.ts and run:\n * npm run generate:enums\n */\n\n`;\n\n  // Generate each enum\n  Object.values(MASTER_ENUMS).forEach(enumDef => {\n    content += `// ${enumDef.description || enumDef.name}\\n`;\n    content += `export const ${enumDef.name} = [\\n`;\n    \n    enumDef.options.forEach(option => {\n      content += `  { value: '${option.value}', label: '${option.label}' },\\n`;\n    });\n    \n    content += `] as const;\\n\\n`;\n  });\n\n  // Generate type helpers\n  content += `// Type helpers for strict typing\\n`;\n  Object.values(MASTER_ENUMS).forEach(enumDef => {\n    const typeName = enumDef.name.replace('_OPTIONS', '').split('_').map(\n      word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\n    ).join('') + 'Value';\n    \n    content += `export type ${typeName} = (typeof ${enumDef.name})[number]['value'];\\n`;\n  });\n\n  // Generate helper functions\n  content += `\n// Helper function to extract just the values\nexport const extractValues = (options: { value: string; label: string }[]) =>\n  options.map(option => option.value).filter(value => value !== '');\n\n// Helper function to get label by value\nexport const getLabelByValue = (options: { value: string; label: string }[], value: string) =>\n  options.find(option => option.value === value)?.label || value;\n\n// Helper function to validate enum value\nexport const isValidEnumValue = <T extends readonly { value: string; label: string }[]>(\n  options: T,\n  value: string\n): value is T[number]['value'] => {\n  return options.some(option => option.value === value);\n};\n`;\n\n  return content;\n}\n\n/**\n * Generate Zod validation schema content\n */\nfunction generateZodSchemaContent(): string {\n  const timestamp = new Date().toISOString();\n  \n  let content = `/**\n * Generated Zod Validation Schemas\n * \n * This file is auto-generated. Do not edit manually.\n * Generated at: ${timestamp}\n * \n * To update schemas, modify scripts/generate-enums.ts and run:\n * npm run generate:enums\n */\n\nimport { z } from 'zod';\n\n`;\n\n  // Generate Zod enums for each definition\n  Object.entries(MASTER_ENUMS).forEach(([key, enumDef]) => {\n    const schemaName = key.toLowerCase() + 'Schema';\n    const values = enumDef.options.map(opt => opt.value).filter(val => val !== '');\n    \n    if (values.length > 0) {\n      content += `export const ${schemaName} = z.enum([${values.map(v => `'${v}'`).join(', ')}]);\\n`;\n    }\n  });\n\n  return content;\n}\n\n/**\n * Main generator function\n */\nasync function generateEnums() {\n  try {\n    const srcDir = path.join(process.cwd(), 'src');\n    \n    // Generate main enum file\n    const enumContent = generateEnumFileContent();\n    const enumPath = path.join(srcDir, 'lib', 'constants', 'generated-enums.ts');\n    await fs.writeFile(enumPath, enumContent, 'utf-8');\n    console.log('✅ Generated:', enumPath);\n    \n    // Generate Zod schemas\n    const zodContent = generateZodSchemaContent();\n    const zodPath = path.join(srcDir, 'lib', 'validation', 'generated-schemas.ts');\n    await fs.mkdir(path.dirname(zodPath), { recursive: true });\n    await fs.writeFile(zodPath, zodContent, 'utf-8');\n    console.log('✅ Generated:', zodPath);\n    \n    // Generate validation report\n    const report = generateValidationReport();\n    console.log(report);\n    \n    console.log('\\n🎉 Enum generation complete!');\n    console.log('📝 Next steps:');\n    console.log('   1. Update imports to use generated-enums.ts');\n    console.log('   2. Update API validation to use generated-schemas.ts');\n    console.log('   3. Run tests to ensure compatibility');\n    \n  } catch (error) {\n    console.error('❌ Error generating enums:', error);\n    process.exit(1);\n  }\n}\n\n/**\n * Generate validation report showing enum consistency\n */\nfunction generateValidationReport(): string {\n  let report = '\\n📊 Enum Validation Report:\\n';\n  report += '=' .repeat(40) + '\\n';\n  \n  Object.values(MASTER_ENUMS).forEach(enumDef => {\n    report += `${enumDef.name}: ${enumDef.options.length} options\\n`;\n  });\n  \n  report += `\\nTotal enums managed: ${Object.keys(MASTER_ENUMS).length}\\n`;\n  return report;\n}\n\n// Run the generator if called directly\nif (require.main === module) {\n  generateEnums();\n}\n\nexport { generateEnums, MASTER_ENUMS };","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/scripts/validate-enums.ts","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":25,"fix":{"range":[187,187],"text":"\n"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":120,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":120,"endColumn":20,"suggestions":[{"fix":{"range":[3677,3735],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":172,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":172,"endColumn":16,"suggestions":[{"fix":{"range":[4977,5033],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":173,"column":31,"nodeType":"MemberExpression","messageId":"limited","endLine":173,"endColumn":42},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":187,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":187,"endColumn":14,"suggestions":[{"fix":{"range":[5299,5347],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":200,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":200,"endColumn":14,"suggestions":[{"fix":{"range":[5727,5767],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":201,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":201,"endColumn":14,"suggestions":[{"fix":{"range":[5770,5799],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":204,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":204,"endColumn":16,"suggestions":[{"fix":{"range":[5839,5885],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":206,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":206,"endColumn":16,"suggestions":[{"fix":{"range":[5901,5942],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":207,"column":32,"nodeType":"MemberExpression","messageId":"limited","endLine":207,"endColumn":43},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":211,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":211,"endColumn":16,"suggestions":[{"fix":{"range":[6048,6079],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":212,"column":36,"nodeType":"MemberExpression","messageId":"limited","endLine":212,"endColumn":47},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":216,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":216,"endColumn":14,"suggestions":[{"fix":{"range":[6178,6215],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":218,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":218,"endColumn":16,"suggestions":[{"fix":{"range":[6250,6314],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":219,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":219,"endColumn":16,"suggestions":[{"fix":{"range":[6319,6392],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":222,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":222,"endColumn":16,"suggestions":[{"fix":{"range":[6480,6548],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":223,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":223,"endColumn":16,"suggestions":[{"fix":{"range":[6553,6619],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":1,"source":"#!/usr/bin/env tsx\n\n/**\n * Enum Validation Script\n * Validates consistency between API validation schemas and form enums\n */\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { MASTER_ENUMS } from './generate-enums';\n\ninterface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\n/**\n * Extract enum values from API validation file\n */\nasync function extractApiValidationEnums(): Promise<Record<string, string[]>> {\n  try {\n    const apiValidationPath = path.join(process.cwd(), 'src/lib/api-validation.ts');\n    const content = await fs.readFile(apiValidationPath, 'utf-8');\n    \n    const enums: Record<string, string[]> = {};\n    \n    // Extract employment status enum\n    const employmentMatch = content.match(/employmentStatus:\\s*z\\s*\\.enum\\s*\\(\\s*\\[\\s*([\\s\\S]*?)\\s*\\]\\s*\\)/);\n    if (employmentMatch) {\n      const values = employmentMatch[1]\n        .split(',')\n        .map(v => v.trim().replace(/['\"]/g, ''))\n        .filter(v => v.length > 0);\n      enums.EMPLOYMENT_STATUS = values;\n    }\n    \n    // Extract sex enum\n    const sexMatch = content.match(/sex:\\s*z\\s*\\.enum\\s*\\(\\s*\\[\\s*([\\s\\S]*?)\\s*\\]\\s*\\)/);\n    if (sexMatch) {\n      const values = sexMatch[1]\n        .split(',')\n        .map(v => v.trim().replace(/['\"]/g, ''))\n        .filter(v => v.length > 0);\n      enums.SEX = values;\n    }\n    \n    // Extract civil status enum\n    const civilStatusMatch = content.match(/civilStatus:\\s*z\\s*\\.enum\\s*\\(\\s*\\[\\s*([\\s\\S]*?)\\s*\\]\\s*\\)/);\n    if (civilStatusMatch) {\n      const values = civilStatusMatch[1]\n        .split(',')\n        .map(v => v.trim().replace(/['\"]/g, ''))\n        .filter(v => v.length > 0);\n      enums.CIVIL_STATUS = values;\n    }\n    \n    // Extract blood type enum\n    const bloodTypeMatch = content.match(/bloodType:\\s*z\\s*\\.enum\\s*\\(\\s*\\[\\s*([\\s\\S]*?)\\s*\\]\\s*\\)/);\n    if (bloodTypeMatch) {\n      const values = bloodTypeMatch[1]\n        .split(',')\n        .map(v => v.trim().replace(/['\"]/g, ''))\n        .filter(v => v.length > 0);\n      enums.BLOOD_TYPE = values;\n    }\n    \n    return enums;\n  } catch (error) {\n    console.warn('⚠️  Could not extract API validation enums:', error);\n    return {};\n  }\n}\n\n/**\n * Validate enum consistency\n */\nasync function validateEnumConsistency(): Promise<ValidationResult> {\n  const result: ValidationResult = {\n    isValid: true,\n    errors: [],\n    warnings: [],\n  };\n  \n  try {\n    // Get API validation enums\n    const apiEnums = await extractApiValidationEnums();\n    \n    // Check each master enum against API validation\n    Object.entries(MASTER_ENUMS).forEach(([key, enumDef]) => {\n      const apiValues = apiEnums[key];\n      if (!apiValues) {\n        result.warnings.push(`No API validation found for ${key}`);\n        return;\n      }\n      \n      const masterValues = enumDef.options\n        .map(opt => opt.value)\n        .filter(val => val !== ''); // Remove empty values\n      \n      // Check for missing values in master enum\n      const missingInMaster = apiValues.filter(val => !masterValues.includes(val));\n      if (missingInMaster.length > 0) {\n        result.errors.push(\n          `${key}: Missing in master enum: ${missingInMaster.join(', ')}`\n        );\n        result.isValid = false;\n      }\n      \n      // Check for extra values in master enum\n      const extraInMaster = masterValues.filter(val => !apiValues.includes(val));\n      if (extraInMaster.length > 0) {\n        result.errors.push(\n          `${key}: Extra in master enum (not in API): ${extraInMaster.join(', ')}`\n        );\n        result.isValid = false;\n      }\n      \n      if (missingInMaster.length === 0 && extraInMaster.length === 0) {\n        console.log(`✅ ${key}: Enum values match API validation`);\n      }\n    });\n    \n  } catch (error) {\n    result.errors.push(`Validation error: ${error}`);\n    result.isValid = false;\n  }\n  \n  return result;\n}\n\n/**\n * Check for duplicate enum files\n */\nasync function checkDuplicateEnumFiles(): Promise<ValidationResult> {\n  const result: ValidationResult = {\n    isValid: true,\n    errors: [],\n    warnings: [],\n  };\n  \n  try {\n    const srcDir = path.join(process.cwd(), 'src');\n    \n    // Find all enum-related files\n    const enumFiles: string[] = [];\n    \n    // Check common locations\n    const commonPaths = [\n      'lib/constants/resident-enums.ts',\n      'lib/constants/generated-enums.ts',\n      'components/templates/ResidentFormWizard/constants/enums.ts',\n      'lib/enums.ts',\n      'constants/enums.ts',\n    ];\n    \n    for (const relativePath of commonPaths) {\n      const fullPath = path.join(srcDir, relativePath);\n      try {\n        await fs.access(fullPath);\n        enumFiles.push(relativePath);\n      } catch {\n        // File doesn't exist, skip\n      }\n    }\n    \n    if (enumFiles.length > 2) {\n      result.warnings.push(`Multiple enum files found: ${enumFiles.join(', ')}`);\n      result.warnings.push('Consider consolidating into a single source of truth');\n    }\n    \n    console.log(`📁 Found enum files: ${enumFiles.length}`);\n    enumFiles.forEach(file => console.log(`   - ${file}`));\n    \n  } catch (error) {\n    result.errors.push(`File check error: ${error}`);\n    result.isValid = false;\n  }\n  \n  return result;\n}\n\n/**\n * Main validation function\n */\nasync function validateEnums() {\n  console.log('🔍 Starting enum validation...\\n');\n  \n  // Run all validation checks\n  const [consistencyResult, duplicateResult] = await Promise.all([\n    validateEnumConsistency(),\n    checkDuplicateEnumFiles(),\n  ]);\n  \n  // Combine results\n  const allErrors = [...consistencyResult.errors, ...duplicateResult.errors];\n  const allWarnings = [...consistencyResult.warnings, ...duplicateResult.warnings];\n  \n  // Print results\n  console.log('\\n📊 Validation Results:');\n  console.log('=' .repeat(40));\n  \n  if (allErrors.length === 0) {\n    console.log('✅ All enum validations passed!');\n  } else {\n    console.log('❌ Enum validation failed:');\n    allErrors.forEach(error => console.log(`   - ${error}`));\n  }\n  \n  if (allWarnings.length > 0) {\n    console.log('\\n⚠️  Warnings:');\n    allWarnings.forEach(warning => console.log(`   - ${warning}`));\n  }\n  \n  // Recommendations\n  console.log('\\n💡 Recommendations:');\n  if (allErrors.length > 0) {\n    console.log('   1. Run `npm run generate:enums` to sync enums');\n    console.log('   2. Update API validation schemas to match master enums');\n  }\n  if (allWarnings.filter(w => w.includes('Multiple enum files')).length > 0) {\n    console.log('   3. Consolidate enum files into generated-enums.ts');\n    console.log('   4. Update imports to use single source of truth');\n  }\n  \n  // Exit with error code if validation failed\n  if (allErrors.length > 0) {\n    process.exit(1);\n  }\n}\n\n// Run validation if called directly\nif (require.main === module) {\n  validateEnums();\n}\n\nexport { validateEnums };","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/__tests__/accessibility.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/__tests__/setup.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/__tests__/setup.tsx","messages":[],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":23,"column":12,"nodeType":"JSXOpeningElement","endLine":23,"endColumn":50,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/__tests__/test-utils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/admin/create-user/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/admin/create-user/page.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadRoles'. Either include it or remove the dependency array.","line":106,"column":6,"nodeType":"ArrayExpression","endLine":106,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadRoles]","fix":{"range":[2992,2994],"text":"[loadRoles]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/admin/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/admin/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/admin/users/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/admin/users/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/dashboard/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/dashboard/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/dashboard/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/households/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/households/__tests__/layout.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1212,1215],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1212,1215],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @jest-environment jsdom\n */\n\n// import { render } from '@testing-library/react';\n// import { Metadata } from 'next';\n\n// Import the metadata export from the layout\nimport { metadata } from '../layout';\n\ndescribe('Households Layout', () => {\n  describe('Metadata', () => {\n    it('should have proper SEO metadata', () => {\n      expect(metadata).toBeDefined();\n      expect(metadata.title).toBe('Households Management | Citizenly');\n      expect(metadata.description).toContain('household registration');\n      expect(metadata.description).toContain('barangay administration');\n    });\n\n    it('should have proper keywords', () => {\n      const keywords = metadata.keywords as string[];\n      expect(keywords).toContain('households');\n      expect(keywords).toContain('families');\n      expect(keywords).toContain('household registration');\n      expect(keywords).toContain('barangay management');\n    });\n\n    it('should have OpenGraph metadata', () => {\n      expect(metadata.openGraph).toBeDefined();\n      expect(metadata.openGraph?.title).toBe('Households Management - Citizenly');\n      expect(metadata.openGraph?.description).toContain('household registration');\n      expect((metadata.openGraph as any)?.type).toBe('website');\n    });\n\n    it('should have all required metadata properties', () => {\n      expect(metadata.title).toBeTruthy();\n      expect(metadata.description).toBeTruthy();\n      expect(metadata.keywords).toBeTruthy();\n      expect(metadata.openGraph).toBeTruthy();\n    });\n\n    it('should have proper title format', () => {\n      expect(metadata.title).toMatch(/^.+ \\| Citizenly$/);\n    });\n\n    it('should have description within SEO limits', () => {\n      const description = metadata.description as string;\n      expect(description.length).toBeGreaterThan(50);\n      expect(description.length).toBeLessThan(160);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/households/create/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/households/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/households/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/households/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/households/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatFullName' is assigned a value but never used.","line":39,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":296,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11863,11866],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11863,11866],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":297,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":297,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11938,11941],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11938,11941],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport Link from 'next/link';\nimport React, { useState } from 'react';\n\nimport { Button } from '@/components';\nimport { useHouseholds } from '@/hooks/crud/useHouseholds';\nimport type { HouseholdWithMembersResult } from '@/types/households';\n\nfunction HouseholdsContent() {\n  const [localSearchTerm, setLocalSearchTerm] = useState('');\n  const [selectedAll, setSelectedAll] = useState(false);\n  const [selectedHouseholds, setSelectedHouseholds] = useState<Set<string>>(new Set());\n\n  const { households, total, isLoading } = useHouseholds({\n    searchTerm: localSearchTerm,\n  });\n\n  const handleSelectAll = () => {\n    if (selectedAll) {\n      setSelectedHouseholds(new Set());\n    } else {\n      setSelectedHouseholds(new Set(households.map(h => h.code)));\n    }\n    setSelectedAll(!selectedAll);\n  };\n\n  const handleSelectHousehold = (householdCode: string) => {\n    const newSelected = new Set(selectedHouseholds);\n    if (newSelected.has(householdCode)) {\n      newSelected.delete(householdCode);\n    } else {\n      newSelected.add(householdCode);\n    }\n    setSelectedHouseholds(newSelected);\n    setSelectedAll(newSelected.size === households.length && households.length > 0);\n  };\n\n  const formatFullName = (person?: {\n    first_name: string;\n    middle_name?: string;\n    last_name: string;\n  }) => {\n    if (!person) return 'No head assigned';\n    return [person.first_name, person.middle_name, person.last_name].filter(Boolean).join(' ');\n  };\n\n  const formatAddress = (household: HouseholdWithMembersResult) => {\n    const parts = [household.house_number, household.address].filter(Boolean);\n    return parts.length > 0 ? parts.join(', ') : 'No address';\n  };\n\n  const formatFullAddress = (household: HouseholdWithMembersResult) => {\n    const localAddress = formatAddress(household);\n    // Use available address field or construct basic address\n    return household.address || localAddress || 'Address not available';\n  };\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6 flex items-start justify-between\">\n        <div>\n          <h1 className=\"font-montserrat mb-0.5 text-xl font-semibold text-gray-600 dark:text-gray-400\">\n            Households\n          </h1>\n          <p className=\"font-montserrat text-sm font-normal text-gray-600 dark:text-gray-400\">\n            {total} total households\n          </p>\n        </div>\n        <div className=\"flex gap-3\">\n          <Link\n            href=\"/households/create\"\n            className=\"font-montserrat rounded-sm bg-green-600 px-4 py-2 text-base font-medium text-white hover:bg-green-700 focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:outline-hidden dark:text-black\"\n          >\n            Create Household\n          </Link>\n          <Link\n            href=\"/residents/create\"\n            className=\"font-montserrat rounded-sm bg-blue-600 px-4 py-2 text-base font-medium text-white hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-hidden dark:text-black\"\n          >\n            Add new resident\n          </Link>\n        </div>\n      </div>\n\n      <div className=\"overflow-hidden bg-white dark:bg-gray-800\">\n        <div className=\"flex items-center border-b border-gray-200 bg-white p-0 dark:border-gray-700 dark:bg-gray-800\">\n          <div className=\"flex items-center p-2\">\n            <div className=\"flex items-center gap-2\">\n              <Button\n                onClick={handleSelectAll}\n                variant=\"neutral-outline\"\n                size=\"sm\"\n                className=\"size-4 min-w-0 p-0\"\n              >\n                {selectedAll && <div className=\"size-2 rounded-xs bg-blue-600\"></div>}\n              </Button>\n              <span className=\"font-montserrat text-base font-normal text-gray-600 dark:text-gray-400\">\n                Select all\n              </span>\n            </div>\n          </div>\n\n          <div className=\"ml-4 flex items-center gap-1\">\n            <Button\n              variant=\"neutral-outline\"\n              size=\"sm\"\n              leftIcon={\n                <svg className=\"size-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M4 6h16M4 10h16M4 14h16M4 18h16\"\n                  />\n                </svg>\n              }\n            >\n              Properties\n            </Button>\n\n            <Button\n              variant=\"neutral-outline\"\n              size=\"sm\"\n              leftIcon={\n                <svg className=\"size-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4\"\n                  />\n                </svg>\n              }\n            >\n              Sort\n            </Button>\n\n            <Button\n              variant=\"neutral-outline\"\n              size=\"sm\"\n              leftIcon={\n                <svg className=\"size-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.414A1 1 0 013 6.707V4z\"\n                  />\n                </svg>\n              }\n            >\n              Filter\n            </Button>\n\n            <Button variant=\"neutral-outline\" size=\"sm\" iconOnly>\n              <svg className=\"size-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z\"\n                />\n              </svg>\n            </Button>\n          </div>\n\n          <div className=\"mr-0 ml-auto\">\n            <div className=\"flex w-60 items-center gap-2 rounded-sm border border-gray-200 bg-white p-2 dark:border-gray-700 dark:bg-gray-800\">\n              <div className=\"size-5 text-gray-600 dark:text-gray-400\">\n                <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                  />\n                </svg>\n              </div>\n              <input\n                type=\"text\"\n                placeholder=\"Search households\"\n                value={localSearchTerm}\n                onChange={e => setLocalSearchTerm(e.target.value)}\n                className=\"font-montserrat flex-1 bg-transparent text-base font-normal text-gray-600 outline-hidden placeholder:text-gray-500 dark:text-gray-400\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex items-center border-b border-gray-200 bg-gray-100 p-0 dark:border-gray-700 dark:bg-gray-700\">\n          <div className=\"w-12 p-2\"></div>\n\n          <div className=\"grid flex-1 grid-cols-5 gap-4 p-2\">\n            <div className=\"p-2\">\n              <span className=\"font-montserrat text-sm font-medium text-gray-600 dark:text-gray-400\">\n                Household #\n              </span>\n            </div>\n            <div className=\"p-2\">\n              <span className=\"font-montserrat text-sm font-medium text-gray-600 dark:text-gray-400\">\n                Head of Household\n              </span>\n            </div>\n            <div className=\"p-2\">\n              <span className=\"font-montserrat text-sm font-medium text-gray-600 dark:text-gray-400\">\n                Address\n              </span>\n            </div>\n            <div className=\"p-2\">\n              <span className=\"font-montserrat text-sm font-medium text-gray-600 dark:text-gray-400\">\n                Members\n              </span>\n            </div>\n            <div className=\"p-2\">\n              <span className=\"font-montserrat text-sm font-medium text-gray-600 dark:text-gray-400\">\n                Created\n              </span>\n            </div>\n          </div>\n\n          <div className=\"w-12 p-1\"></div>\n        </div>\n\n        <div className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n          {(() => {\n            if (isLoading) {\n              return (\n                <div className=\"p-8 text-center\">\n                  <div className=\"mx-auto size-8 animate-spin rounded-full border-b-2 border-blue-600\"></div>\n                  <p className=\"mt-2 text-gray-600 dark:text-gray-400\">Loading households...</p>\n                </div>\n              );\n            }\n\n            if (households.length === 0) {\n              const noResultsMessage = localSearchTerm\n                ? `No households found matching \"${localSearchTerm}\"`\n                : 'No households found';\n\n              return (\n                <div className=\"p-8 text-center\">\n                  <p className=\"text-gray-600 dark:text-gray-400\">{noResultsMessage}</p>\n                  <p className=\"mt-2 text-sm text-gray-500 dark:text-gray-400\">\n                    Households are created automatically when you add residents.\n                  </p>\n                </div>\n              );\n            }\n\n            return households.map(household => (\n              <div\n                key={household.code}\n                className=\"flex items-center bg-white p-0 transition-colors hover:bg-gray-50 dark:bg-gray-800\"\n              >\n                <div className=\"p-2\">\n                  <Button\n                    onClick={() => handleSelectHousehold(household.code)}\n                    variant=\"neutral-outline\"\n                    size=\"sm\"\n                    className=\"size-4 min-w-0 p-0\"\n                  >\n                    {selectedHouseholds.has(household.code) && (\n                      <div className=\"size-2 rounded-xs bg-blue-600\"></div>\n                    )}\n                  </Button>\n                </div>\n\n                <div className=\"grid flex-1 grid-cols-5 gap-4 p-2\">\n                  <div className=\"p-2\">\n                    <Link\n                      href={`/households/${household.code}`}\n                      className=\"font-montserrat text-base font-normal text-gray-600 hover:text-gray-800 hover:underline dark:text-gray-200\"\n                    >\n                      #{household.code}\n                    </Link>\n                  </div>\n                  <div className=\"p-2\">\n                    <div className=\"font-montserrat text-base font-normal text-gray-600 dark:text-gray-400\">\n                      {household.head_name || 'No head assigned'}\n                    </div>\n                  </div>\n                  <div className=\"p-2\">\n                    <div className=\"font-montserrat text-base font-normal text-gray-600 dark:text-gray-400\">\n                      {formatFullAddress(household)}\n                    </div>\n                  </div>\n                  <div className=\"p-2\">\n                    <div className=\"font-montserrat text-base font-normal text-gray-600 dark:text-gray-400\">\n                      {household.member_count} member{household.member_count !== 1 ? 's' : ''}\n                    </div>\n                  </div>\n                  <div className=\"p-2\">\n                    <div className=\"font-montserrat text-base font-normal text-gray-600 dark:text-gray-400\">\n                      {household.created_at &&\n                      !Number.isNaN(new Date(household.created_at as any).getTime())\n                        ? new Date(household.created_at as any).toLocaleDateString()\n                        : 'N/A'}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-1\">\n                  <Button variant=\"neutral-outline\" size=\"sm\" iconOnly>\n                    <svg className=\"size-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z\"\n                      />\n                    </svg>\n                  </Button>\n                </div>\n              </div>\n            ));\n          })()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function HouseholdsPage() {\n  return <HouseholdsContent />;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/reports/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/reports/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/reports/records-of-barangay-inhabitants-by-household/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/reports/records-of-barangay-inhabitants-by-household/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/residents/[id]/page.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[937,940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[937,940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Resident Detail Page Tests\n * Comprehensive test suite following development standards\n */\n\nimport { render, screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { useParams, useRouter } from 'next/navigation';\nimport React from 'react';\n\nimport { useAuth } from '@/contexts';\n\nimport ResidentDetailPage from './page';\n\n// Mock dependencies\njest.mock('next/navigation', () => ({\n  useParams: jest.fn(),\n  useRouter: jest.fn(),\n}));\n\njest.mock('@/contexts/AuthContext', () => ({\n  useAuth: jest.fn(),\n}));\n\njest.mock('@/components/organisms', () => ({\n  ProtectedRoute: ({ children }: { children: React.ReactNode }) => <div>{children}</div>,\n}));\n\njest.mock('@/components/templates', () => ({\n  DashboardLayout: ({ children }: { children: React.ReactNode }) => <div>{children}</div>,\n}));\n\njest.mock('@/components/atoms', () => ({\n  Button: ({ children, onClick, ...props }: any) => (\n    <button onClick={onClick} {...props}>\n      {children}\n    </button>\n  ),\n}));\n\n// ResidentDetailSections mock removed - no longer used (component uses ResidentForm template now)\n\n// Mock fetch globally\nglobal.fetch = jest.fn();\n\ndescribe('ResidentDetailPage', () => {\n  const mockRouter = {\n    push: jest.fn(),\n    back: jest.fn(),\n  };\n\n  const mockSession = {\n    access_token: 'mock-token',\n    user: { id: '1' },\n  };\n\n  const mockResident = {\n    id: 'test-resident-id',\n    first_name: 'John',\n    middle_name: 'M',\n    last_name: 'Doe',\n    sex: 'male' as const,\n    birthdate: '1990-01-01',\n    civil_status: 'Single',\n    barangay_code: '123456789',\n    city_municipality_code: '987654321',\n    region_code: '12',\n    is_active: true,\n    created_at: '2023-01-01T00:00:00Z',\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    (useParams as jest.Mock).mockReturnValue({ id: 'test-resident-id' });\n    (useRouter as jest.Mock).mockReturnValue(mockRouter);\n    (useAuth as jest.Mock).mockReturnValue({ session: mockSession });\n\n    (fetch as jest.Mock).mockResolvedValue({\n      ok: true,\n      json: () =>\n        Promise.resolve({\n          resident: mockResident,\n        }),\n    });\n  });\n\n  describe('Rendering', () => {\n    it('should render loading state initially', () => {\n      render(<ResidentDetailPage />);\n\n      expect(screen.getByText('Loading resident details')).toBeInTheDocument();\n      expect(screen.getByRole('status', { hidden: true })).toBeInTheDocument();\n    });\n\n    it('should render all detail cards after loading', async () => {\n      render(<ResidentDetailPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('John M Doe')).toBeInTheDocument();\n      });\n\n      expect(screen.getByTestId('personal-info-card')).toBeInTheDocument();\n      expect(screen.getByTestId('contact-info-card')).toBeInTheDocument();\n      expect(screen.getByTestId('education-employment-card')).toBeInTheDocument();\n      expect(screen.getByTestId('health-physical-card')).toBeInTheDocument();\n      expect(screen.getByTestId('family-voter-card')).toBeInTheDocument();\n      expect(screen.getByTestId('admin-info-card')).toBeInTheDocument();\n    });\n\n    it('should render error state when fetch fails', async () => {\n      (fetch as jest.Mock).mockRejectedValue(new Error('Failed to fetch'));\n\n      render(<ResidentDetailPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Error Loading Resident')).toBeInTheDocument();\n      });\n\n      expect(screen.getByText('Failed to fetch')).toBeInTheDocument();\n      expect(screen.getByText('🔄 Retry')).toBeInTheDocument();\n    });\n\n    it('should render not found state when resident is null', async () => {\n      (fetch as jest.Mock).mockResolvedValue({\n        ok: true,\n        json: () => Promise.resolve(null),\n      });\n\n      render(<ResidentDetailPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Resident Not Found')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe.skip('Data Loading', () => {\n    it('should fetch resident data on mount', async () => {\n      render(<ResidentDetailPage />);\n\n      await waitFor(() => {\n        expect(fetch).toHaveBeenCalledWith('/api/residents/test-resident-id', {\n          headers: {\n            Authorization: 'Bearer mock-token',\n            'Content-Type': 'application/json',\n          },\n        });\n      });\n    });\n\n    it('should handle 404 error specifically', async () => {\n      (fetch as jest.Mock).mockResolvedValue({\n        ok: false,\n        status: 404,\n      });\n\n      render(<ResidentDetailPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Resident not found')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Navigation', () => {\n    it('should navigate to edit page when edit button is clicked', async () => {\n      const user = userEvent.setup();\n\n      render(<ResidentDetailPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('✏️ Edit')).toBeInTheDocument();\n      });\n\n      const editButton = screen.getByText('✏️ Edit');\n      await user.click(editButton);\n\n      expect(mockRouter.push).toHaveBeenCalledWith('/residents/test-resident-id/edit');\n    });\n\n    it('should navigate back to residents list when back button is clicked', async () => {\n      const user = userEvent.setup();\n\n      render(<ResidentDetailPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('← Back to List')).toBeInTheDocument();\n      });\n\n      const backButton = screen.getByText('← Back to List');\n      await user.click(backButton);\n\n      expect(mockRouter.push).toHaveBeenCalledWith('/residents');\n    });\n  });\n\n  describe('Conditional Rendering', () => {\n    it('should conditionally render sectoral info card', async () => {\n      const residentWithSectoral = {\n        ...mockResident,\n        sectoral_info: {\n          is_labor_force: true,\n          is_employed: true,\n        },\n      };\n\n      (fetch as jest.Mock).mockResolvedValue({\n        ok: true,\n        json: () =>\n          Promise.resolve({\n            resident: residentWithSectoral,\n          }),\n      });\n\n      render(<ResidentDetailPage />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('sectoral-info-card')).toBeInTheDocument();\n      });\n    });\n\n    it('should conditionally render migration info card', async () => {\n      const residentWithMigration = {\n        ...mockResident,\n        migrant_info: {\n          previous_region_code: '11',\n          migration_type: 'internal',\n        },\n      };\n\n      (fetch as jest.Mock).mockResolvedValue({\n        ok: true,\n        json: () =>\n          Promise.resolve({\n            resident: residentWithMigration,\n          }),\n      });\n\n      render(<ResidentDetailPage />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('migration-info-card')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Status Display', () => {\n    it('should display active status correctly', async () => {\n      render(<ResidentDetailPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Active')).toBeInTheDocument();\n      });\n    });\n\n    it('should display inactive status correctly', async () => {\n      const inactiveResident = { ...mockResident, is_active: false };\n\n      (fetch as jest.Mock).mockResolvedValue({\n        ok: true,\n        json: () =>\n          Promise.resolve({\n            resident: inactiveResident,\n          }),\n      });\n\n      render(<ResidentDetailPage />);\n\n      await waitFor(() => {\n        expect(screen.getAllByText('Inactive')).toHaveLength(1);\n      });\n    });\n  });\n\n  describe('Authentication', () => {\n    it('should not fetch data without session', () => {\n      (useAuth as jest.Mock).mockReturnValue({ session: null });\n\n      render(<ResidentDetailPage />);\n\n      expect(fetch).not.toHaveBeenCalled();\n    });\n  });\n\n  describe.skip('Error Handling', () => {\n    it('should retry data loading when retry button is clicked', async () => {\n      const user = userEvent.setup();\n      (fetch as jest.Mock).mockRejectedValueOnce(new Error('Network error')).mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve({ resident: mockResident }),\n      });\n\n      render(<ResidentDetailPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('🔄 Retry')).toBeInTheDocument();\n      });\n\n      const retryButton = screen.getByText('🔄 Retry');\n      await user.click(retryButton);\n\n      expect(fetch).toHaveBeenCalledTimes(2);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/residents/[id]/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAddressInfo'. Either include it or remove the dependency array.","line":228,"column":6,"nodeType":"ArrayExpression","endLine":228,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [loadAddressInfo, residentId]","fix":{"range":[8108,8120],"text":"[loadAddressInfo, residentId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport Link from 'next/link';\nimport { useParams, useRouter } from 'next/navigation';\nimport React, { useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\n\n// SectoralBadges import removed - not currently used in this component\nimport { ResidentForm } from '@/components/templates/Form/Resident';\nimport { supabase, logger, logError } from '@/lib';\n// Remove unused enum imports - using types instead\nimport { fetchWithAuth } from '@/lib/utils/sessionUtils';\nimport type { FormMode, ResidentWithRelations, SectoralInformation } from '@/types';\nimport {\n  CivilStatusEnum,\n  CitizenshipEnum,\n  EducationLevelEnum,\n  EmploymentStatusEnum,\n  BloodTypeEnum,\n  EthnicityEnum,\n  ReligionEnum,\n} from '@/types';\nimport type { ResidentFormState } from '@/types/residents';\n\n// Tooltip component removed - not used in current implementation\n\nexport const dynamic = 'force-dynamic';\n\n// Use consolidated ResidentWithRelations type instead of duplicate interface\ntype Resident = ResidentWithRelations;\n\nfunction ResidentDetailContent() {\n  const params = useParams();\n  const router = useRouter();\n  const residentId = params.id as string;\n  const [resident, setResident] = useState<Resident | null>(null);\n  const [editedResident, setEditedResident] = useState<Resident | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [formMode, setFormMode] = useState<FormMode>('view');\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n  const [, setCurrentFormData] = useState<ResidentFormState | null>(null);\n\n  const loadAddressInfo = async (residentData: Resident) => {\n    try {\n      logger.debug('Loading address information', { barangayCode: residentData.barangay_code });\n\n      const { data: addressViewData, error: viewError } = await supabase\n        .from('psgc_address_hierarchy')\n        .select('barangay_name, city_municipality_name, province_name, region_name, full_address')\n        .eq('barangay_code', residentData.barangay_code)\n        .single();\n\n      if (addressViewData && !viewError) {\n        residentData.address_info = {\n          barangay_name: addressViewData.barangay_name,\n          city_municipality_name: addressViewData.city_municipality_name,\n          province_name: addressViewData.province_name,\n          region_name: addressViewData.region_name,\n          full_address: addressViewData.full_address,\n          barangay_code: residentData.barangay_code || '',\n          city_municipality_code: '',\n          region_code: '',\n        };\n        return;\n      }\n\n      await loadAddressFromIndividualTables(residentData);\n    } catch (addressError) {\n      logger.warn('Address data lookup failed', {\n        error: addressError instanceof Error ? addressError.message : 'Unknown error',\n      });\n    }\n  };\n\n  const loadAddressFromIndividualTables = async (residentData: Resident) => {\n    logger.debug('Address view not available, trying individual table queries');\n\n    const { data: barangayData, error: barangayError } = await supabase\n      .from('psgc_barangays')\n      .select('name, city_municipality_code')\n      .eq('code', residentData.barangay_code)\n      .single();\n\n    if (!barangayData || barangayError) return;\n\n    residentData.address_info = {\n      barangay_name: barangayData.name,\n      city_municipality_name: '',\n      province_name: '',\n      region_name: '',\n      full_address: barangayData.name,\n      barangay_code: residentData.barangay_code || '',\n      city_municipality_code: barangayData.city_municipality_code,\n      region_code: '',\n    };\n\n    const { data: cityData } = await supabase\n      .from('psgc_cities_municipalities')\n      .select('name, province_code, is_independent')\n      .eq('code', barangayData.city_municipality_code)\n      .single();\n\n    if (!cityData || !residentData.address_info) return;\n\n    residentData.address_info.city_municipality_name = cityData.name;\n    residentData.address_info.full_address = `${barangayData.name}, ${cityData.name}`;\n\n    if (cityData.is_independent || !cityData.province_code) return;\n\n    const { data: provinceData } = await supabase\n      .from('psgc_provinces')\n      .select('name, region_code')\n      .eq('code', cityData.province_code)\n      .single();\n\n    if (!provinceData || !residentData.address_info) return;\n\n    residentData.address_info.province_name = provinceData.name;\n    residentData.address_info.region_code = provinceData.region_code;\n\n    const { data: regionData } = await supabase\n      .from('psgc_regions')\n      .select('name')\n      .eq('code', provinceData.region_code)\n      .single();\n\n    if (regionData && residentData.address_info) {\n      residentData.address_info.region_name = regionData.name;\n    }\n  };\n\n  const loadOccupationInfo = async (residentData: Resident) => {\n    if (!residentData.occupation_code) return;\n\n    try {\n      const { data: psocData } = await supabase\n        .from('occupation_codes')\n        .select('code, title, level')\n        .eq('code', residentData.occupation_code)\n        .single();\n\n      if (psocData) {\n        residentData.psoc_info = psocData;\n      }\n    } catch (psocError) {\n      logger.warn('PSOC data lookup failed', {\n        error: psocError instanceof Error ? psocError.message : 'Unknown error',\n      });\n    }\n  };\n\n  useEffect(() => {\n    const loadResidentDetails = async () => {\n      if (!residentId) return;\n\n      try {\n        setLoading(true);\n\n        logger.debug('Loading resident details', { residentId });\n\n        const response = await fetchWithAuth(`/api/residents/${residentId}`);\n\n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({}));\n          logger.error('API Error loading resident', errorData);\n          throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n        }\n\n        const responseData = await response.json();\n        const { resident: residentData, household: householdData } = responseData.data;\n\n        if (!residentData) {\n          setError('No data returned for resident');\n          return;\n        }\n\n        logger.debug('Resident data loaded successfully via API', { residentId: residentData.id });\n\n        if (householdData) {\n          residentData.household = householdData;\n        }\n\n        await loadAddressInfo(residentData);\n        await loadOccupationInfo(residentData);\n\n        // Initialize missing fields for comprehensive form\n        const initializedResident = {\n          ...residentData,\n          telephone_number: residentData.telephone_number || '',\n          philsys_card_number: residentData.philsys_card_number || '',\n          workplace: residentData.workplace || '',\n          height_cm: residentData.height_cm || undefined,\n          weight_kg: residentData.weight_kg || undefined,\n          complexion: residentData.complexion || '',\n          mother_first_name: residentData.mother_first_name || '',\n          mother_middle_name: residentData.mother_middle_name || '',\n          mother_maiden_last_name: residentData.mother_maiden_last_name || '',\n          migration_info: residentData.migration_info || {\n            is_migrant: false,\n            migration_type: null,\n            previous_address: '',\n            previous_country: '',\n            migration_reason: null,\n            migration_date: null,\n            documentation_status: null,\n            is_returning_resident: false,\n          },\n        };\n\n        // Setting resident state with initialized data\n        setResident(initializedResident);\n        setEditedResident(updateComputedFields({ ...initializedResident }));\n      } catch (err) {\n        logError(\n          err instanceof Error ? err : new Error('Unknown error loading resident'),\n          'RESIDENT_LOAD'\n        );\n        setError('Failed to load resident details');\n      } finally {\n        // Setting loading to false after data load attempt\n        setLoading(false);\n      }\n    };\n\n    loadResidentDetails();\n  }, [residentId]);\n\n  const updateComputedFields = (updatedResident: Resident) => {\n    // Update employment-related flags based on employment_status\n    const employmentStatus = updatedResident.employment_status;\n\n    updatedResident.is_employed = ['employed', 'self_employed'].includes(employmentStatus || '');\n    updatedResident.is_unemployed = employmentStatus === 'unemployed';\n\n    // Update senior citizen flag based on birthdate\n    if (updatedResident.birthdate) {\n      const age = new Date().getFullYear() - new Date(updatedResident.birthdate).getFullYear();\n      updatedResident.is_senior_citizen = age >= 60;\n    }\n\n    return updatedResident;\n  };\n\n  const transformToFormState = (resident: Resident): ResidentFormState => {\n    // Transform resident data to form state format\n    // Processing basic resident fields for form\n\n    // Extract sectoral information from the nested object if it exists\n    const residentWithNested = resident as Resident & {\n      sectoral_info?: SectoralInformation;\n      resident_sectoral_info?: SectoralInformation[];\n      migrant_info?: Record<string, unknown>;\n      resident_migrant_info?: Record<string, unknown>[];\n      birth_place_info?: { name?: string; level?: string };\n    };\n    const sectoralInfo =\n      residentWithNested.sectoral_info || residentWithNested.resident_sectoral_info?.[0] || null;\n    const migrantInfo =\n      residentWithNested.migrant_info || residentWithNested.resident_migrant_info?.[0] || null;\n\n    const formState = {\n      // Personal Information\n      first_name: resident.first_name || '',\n      middle_name: resident.middle_name || '',\n      last_name: resident.last_name || '',\n      extension_name: resident.extension_name || '',\n      sex: resident.sex || '',\n      civil_status: resident.civil_status as CivilStatusEnum,\n      civil_status_others_specify: '', // Not in current Resident type\n      citizenship: (resident.citizenship as CitizenshipEnum) || '',\n      birthdate: resident.birthdate || '',\n      birth_place_name:\n        residentWithNested.birth_place_info?.name ||\n        (resident.birth_place_code ? `Loading ${resident.birth_place_code}...` : ''),\n      birth_place_code: resident.birth_place_code || '',\n      birth_place_level: '' as '' | 'region' | 'province' | 'city_municipality' | 'barangay',\n      philsys_card_number: resident.philsys_card_number || '',\n      philsys_last4: resident.philsys_last4 || '',\n      education_attainment: (resident.education_attainment as EducationLevelEnum) || '',\n      is_graduate: resident.is_graduate || false,\n      employment_status: (resident.employment_status as EmploymentStatusEnum) || '',\n      employment_code: '', // Not in current Resident type\n      employment_name: '', // Not in current Resident type\n      occupation_code: resident.occupation_code || '',\n      psoc_level: resident.psoc_level || 0,\n      occupation_title: resident.occupation_title || '',\n\n      // Contact Information\n      email: resident.email || '',\n      telephone_number: resident.telephone_number || '',\n      mobile_number: resident.mobile_number || '',\n      household_code: resident.household_code || '',\n\n      // Address hierarchy codes\n      region_code: resident.region_code || '',\n      province_code: resident.province_code || '',\n      city_municipality_code: resident.city_municipality_code || '',\n      barangay_code: resident.barangay_code || '',\n\n      // Physical Personal Details\n      blood_type: (resident.blood_type as BloodTypeEnum) || '',\n      complexion: resident.complexion || '',\n      height: resident.height || 0,\n      weight: resident.weight || 0,\n      ethnicity: (resident.ethnicity as EthnicityEnum) || '',\n      religion: (resident.religion as ReligionEnum) || '',\n      religion_others_specify: '', // Not in current Resident type\n      is_voter: resident.is_voter ?? null,\n      is_resident_voter: resident.is_resident_voter ?? null,\n      last_voted_date: '', // Not in current Resident type\n      mother_maiden_first: resident.mother_maiden_first || '',\n      mother_maiden_middle: resident.mother_maiden_middle || '',\n      mother_maiden_last: resident.mother_maiden_last || '',\n\n      // Sectoral Information (use sectoral_info if available, otherwise defaults)\n      is_labor_force_employed: sectoralInfo?.is_labor_force_employed ?? false,\n      is_unemployed: sectoralInfo?.is_unemployed ?? false,\n      is_overseas_filipino_worker: sectoralInfo?.is_overseas_filipino_worker ?? false,\n      is_person_with_disability: sectoralInfo?.is_person_with_disability ?? false,\n      is_out_of_school_children: sectoralInfo?.is_out_of_school_children ?? false,\n      is_out_of_school_youth: sectoralInfo?.is_out_of_school_youth ?? false,\n      is_senior_citizen: sectoralInfo?.is_senior_citizen ?? false,\n      is_registered_senior_citizen: sectoralInfo?.is_registered_senior_citizen ?? false,\n      is_solo_parent: sectoralInfo?.is_solo_parent ?? false,\n      is_indigenous_people: sectoralInfo?.is_indigenous_people ?? false,\n      is_migrant: sectoralInfo?.is_migrant ?? false,\n\n      // Migration Information (use migrant_info if available, otherwise defaults)\n      previous_barangay_code: (migrantInfo?.previous_barangay_code as string) || '',\n      previous_city_municipality_code:\n        (migrantInfo?.previous_city_municipality_code as string) || '',\n      previous_province_code: (migrantInfo?.previous_province_code as string) || '',\n      previous_region_code: (migrantInfo?.previous_region_code as string) || '',\n      length_of_stay_previous_months: (migrantInfo?.length_of_stay_previous_months as number) || 0,\n      reason_for_leaving: (migrantInfo?.reason_for_leaving as string) || '',\n      date_of_transfer: (migrantInfo?.date_of_transfer as string) || '',\n      reason_for_transferring: (migrantInfo?.reason_for_transferring as string) || '',\n      duration_of_stay_current_months:\n        (migrantInfo?.duration_of_stay_current_months as number) || 0,\n      is_intending_to_return: (migrantInfo?.is_intending_to_return as boolean) ?? false,\n    };\n\n    // Returning transformed form state\n    // Final form state includes migration status\n    return formState;\n  };\n\n  // Handle resident deletion\n  const handleDelete = async () => {\n    try {\n      setIsDeleting(true);\n\n      const response = await fetchWithAuth(`/api/residents/${residentId}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || 'Failed to delete resident');\n      }\n\n      const result = await response.json();\n\n      toast.success(`Resident ${result.deletedResident?.name || ''} deleted successfully`);\n\n      // Redirect to residents list after successful deletion\n      router.push('/residents');\n    } catch (err) {\n      const error = err as Error;\n      logError(error, 'RESIDENT_DELETE');\n      logger.error('Failed to delete resident', { error: error.message });\n      toast.error(error.message || 'Failed to delete resident');\n    } finally {\n      setIsDeleting(false);\n      setShowDeleteConfirm(false);\n    }\n  };\n\n  // Handle form submission\n  const handleFormSubmit = async (formData: ResidentFormState) => {\n    // Handle form submission with form data\n    // Form includes migration status and other resident details\n    // Processing form submission at current timestamp\n\n    try {\n      // Use the API endpoint for updating with session fallback\n      // Getting session for form submission authentication\n\n      // Include both resident fields and sectoral information\n      // Convert empty strings to null for enum fields to avoid validation errors\n      const updatePayload = {\n        // Main resident fields\n        first_name: formData.first_name,\n        middle_name: formData.middle_name,\n        last_name: formData.last_name,\n        extension_name: formData.extension_name,\n        birthdate: formData.birthdate,\n        birth_place_code: formData.birth_place_code,\n        sex: formData.sex,\n        civil_status: formData.civil_status || null,\n        civil_status_others_specify: formData.civil_status_others_specify,\n        citizenship: formData.citizenship || null,\n        education_attainment: formData.education_attainment || null,\n        is_graduate: formData.is_graduate,\n        employment_status: formData.employment_status || null,\n        occupation_code: formData.occupation_code,\n        email: formData.email,\n        mobile_number: formData.mobile_number,\n        telephone_number: formData.telephone_number,\n        household_code: formData.household_code,\n        height: formData.height,\n        weight: formData.weight,\n        complexion: formData.complexion,\n        blood_type: formData.blood_type || null, // Convert empty string to null for enum\n        ethnicity: formData.ethnicity || null,\n        religion: formData.religion || null,\n        religion_others_specify: formData.religion_others_specify,\n        is_voter: formData.is_voter,\n        is_resident_voter: formData.is_resident_voter,\n        last_voted_date: formData.last_voted_date || null,\n        mother_maiden_first: formData.mother_maiden_first,\n        mother_maiden_middle: formData.mother_maiden_middle,\n        mother_maiden_last: formData.mother_maiden_last,\n\n        // Sectoral information fields\n        is_labor_force_employed: formData.is_labor_force_employed,\n        is_unemployed: formData.is_unemployed,\n        is_overseas_filipino_worker: formData.is_overseas_filipino_worker,\n        is_person_with_disability: formData.is_person_with_disability,\n        is_out_of_school_children: formData.is_out_of_school_children,\n        is_out_of_school_youth: formData.is_out_of_school_youth,\n        is_senior_citizen: formData.is_senior_citizen,\n        is_registered_senior_citizen: formData.is_registered_senior_citizen,\n        is_solo_parent: formData.is_solo_parent,\n        is_indigenous_people: formData.is_indigenous_people,\n        is_migrant: formData.is_migrant,\n      };\n\n      logger.debug('Making PUT request', {\n        url: `/api/residents/${residentId}`,\n        method: 'PUT',\n        payloadKeys: Object.keys(updatePayload),\n      });\n\n      const response = await fetchWithAuth(`/api/residents/${residentId}`, {\n        method: 'PUT',\n        body: JSON.stringify(updatePayload),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || 'Failed to update resident');\n      }\n\n      const responseData = await response.json();\n      // Successfully received API response\n\n      const { resident: updatedResident } = responseData;\n      // Processing updated resident data from API\n\n      // Transform the nested sectoral data from the API response\n      let transformedResident = { ...updatedResident };\n\n      if (updatedResident?.resident_sectoral_info?.[0]) {\n        const sectoralInfo = updatedResident.resident_sectoral_info[0];\n        // Flattening sectoral information into main resident object\n\n        // Flatten sectoral information into the main resident object\n        transformedResident = {\n          ...transformedResident,\n          is_labor_force_employed: sectoralInfo.is_labor_force_employed,\n          is_unemployed: sectoralInfo.is_unemployed,\n          is_overseas_filipino_worker: sectoralInfo.is_overseas_filipino_worker,\n          is_person_with_disability: sectoralInfo.is_person_with_disability,\n          is_out_of_school_children: sectoralInfo.is_out_of_school_children,\n          is_out_of_school_youth: sectoralInfo.is_out_of_school_youth,\n          is_senior_citizen: sectoralInfo.is_senior_citizen,\n          is_registered_senior_citizen: sectoralInfo.is_registered_senior_citizen,\n          is_solo_parent: sectoralInfo.is_solo_parent,\n          is_indigenous_people: sectoralInfo.is_indigenous_people,\n          is_migrant: sectoralInfo.is_migrant,\n        };\n\n        // Remove the nested object to avoid duplication\n        delete transformedResident.resident_sectoral_info;\n      }\n\n      if (updatedResident?.resident_migrant_info?.[0]) {\n        const migrantInfo = updatedResident.resident_migrant_info[0];\n        // Flattening migrant information into main resident object\n\n        // Flatten migrant information into the main resident object\n        transformedResident = {\n          ...transformedResident,\n          previous_barangay_code: migrantInfo.previous_barangay_code,\n          previous_city_municipality_code: migrantInfo.previous_city_municipality_code,\n          previous_province_code: migrantInfo.previous_province_code,\n          previous_region_code: migrantInfo.previous_region_code,\n          length_of_stay_previous_months: migrantInfo.length_of_stay_previous_months,\n          reason_for_leaving: migrantInfo.reason_for_leaving,\n          date_of_transfer: migrantInfo.date_of_transfer,\n          reason_for_transferring: migrantInfo.reason_for_transferring,\n          duration_of_stay_current_months: migrantInfo.duration_of_stay_current_months,\n          is_intending_to_return: migrantInfo.is_intending_to_return,\n        };\n\n        // Remove the nested object to avoid duplication\n        delete transformedResident.resident_migrant_info;\n      }\n\n      // Setting transformed resident state with flattened data\n      // Migration status preserved in transformation\n\n      // Update local state and return to view mode\n      // Updating resident state with transformed data\n      setResident(transformedResident);\n      setFormMode('view');\n      setCurrentFormData(null); // Clear current form data after successful save\n      toast.success('Resident updated successfully!');\n    } catch (err) {\n      const error = err as Error;\n      logError(error, 'RESIDENT_FORM_UPDATE');\n      logger.error('Failed to update resident', { error: error.message });\n      toast.error(`Failed to update resident: ${error.message}`);\n    }\n  };\n\n  // Removed unused renderEditableField function\n\n  if (loading) {\n    return (\n      <div>\n        <div className=\"p-6\">\n          <div className=\"flex h-64 items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"mx-auto size-12 animate-spin rounded-full border-b-2 border-blue-600\"></div>\n              <p className=\"mt-4 text-sm text-gray-600 dark:text-gray-400\">\n                Loading resident details...\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !resident) {\n    // Rendering error state - no resident data available\n    return (\n      <div>\n        <div className=\"p-6\">\n          <div className=\"mx-auto max-w-md text-center\">\n            <div className=\"rounded-lg border border-gray-200 bg-white p-6 shadow-md dark:border-gray-700 dark:bg-gray-800\">\n              <div className=\"mb-4 text-red-600\">\n                <svg\n                  className=\"mx-auto size-12\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 15.5c-.77.833.192 2.5 1.732 2.5z\"\n                  />\n                </svg>\n              </div>\n              <h1 className=\"font-montserrat mb-2 text-lg font-semibold text-gray-600 dark:text-gray-400\">\n                Resident Not Found\n              </h1>\n              <p className=\"font-montserrat mb-4 text-sm text-gray-600 dark:text-gray-400\">\n                {error}\n              </p>\n              <Link\n                href=\"/residents\"\n                className=\"inline-flex items-center rounded-md border border-gray-200 px-4 py-2 text-sm font-medium text-gray-600 hover:bg-gray-50 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700\"\n              >\n                Back to Residents\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Rendering main resident content\n\n  return (\n    <div className=\"min-h-screen\" style={{ minHeight: '100vh' }}>\n      <div className=\"p-6\" style={{ padding: '24px' }}>\n        {/* Page Header */}\n        <div\n          className=\"mb-6 flex items-center justify-between\"\n          style={{\n            marginBottom: '24px',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n          }}\n        >\n          <div\n            className=\"flex items-center gap-4\"\n            style={{ display: 'flex', alignItems: 'center', gap: '16px' }}\n          >\n            <Link\n              href=\"/residents\"\n              className=\"inline-flex items-center rounded-md border border-gray-200 bg-white px-3 py-2 text-sm font-medium text-gray-600 shadow-xs hover:bg-gray-50\"\n              style={{\n                display: 'inline-flex',\n                alignItems: 'center',\n                borderRadius: '6px',\n                border: '1px solid #e5e7eb',\n                backgroundColor: 'white',\n                padding: '8px 12px',\n                fontSize: '14px',\n                fontWeight: '500',\n                color: '#4b5563',\n              }}\n            >\n              <svg\n                className=\"mr-2 size-4\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n                style={{ marginRight: '8px', width: '16px', height: '16px' }}\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M15 19l-7-7 7-7\"\n                />\n              </svg>\n              Back to Residents\n            </Link>\n            <div>\n              <h1\n                className=\"text-xl font-semibold text-gray-900\"\n                style={{\n                  fontSize: '20px',\n                  fontWeight: '600',\n                  color: '#111827',\n                  marginBottom: '4px',\n                }}\n              >\n                {resident.first_name} {resident.last_name}\n              </h1>\n              <p className=\"text-sm text-gray-600\" style={{ fontSize: '14px', color: '#6b7280' }}>\n                Resident Details\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-6 lg:grid-cols-3\">\n          {/* Left Column - ResidentForm Template */}\n          <div className=\"lg:col-span-2\">\n            {/* ResidentForm Template */}\n            {(() => {\n              const formData = editedResident ? transformToFormState(editedResident) : undefined;\n              // Form data includes resident details and current mode\n              return (\n                <ResidentForm\n                  mode={formMode}\n                  initialData={formData}\n                  onSubmit={handleFormSubmit}\n                  onModeChange={undefined} // Hide FormHeader edit button\n                  onChange={setCurrentFormData} // Track current form data changes\n                  key={`resident-form-${editedResident?.id}-${editedResident?.updated_at || Date.now()}`} // Force re-render when resident updates\n                />\n              );\n            })()}\n          </div>\n\n          {/* Right Column - Side Information */}\n          <div className=\"space-y-6\">\n            {/* Quick Actions Card */}\n            <div className=\"rounded-lg border border-gray-200 bg-white shadow-sm dark:border-gray-700 dark:bg-gray-800\">\n              <div className=\"border-b border-gray-200 px-6 py-4 dark:border-gray-700\">\n                <h3 className=\"text-lg font-medium text-gray-600 dark:text-gray-400\">\n                  Quick Actions\n                </h3>\n              </div>\n              <div className=\"space-y-3 px-6 py-4\">\n                {/* Edit/Save mode toggle button with FormHeader styling */}\n                <button\n                  type=\"button\"\n                  onClick={async e => {\n                    e.preventDefault();\n                    // Save button clicked - processing form action\n                    // Checking form mode and data availability\n\n                    if (formMode === 'view') {\n                      // Switching to edit mode\n                      setFormMode('edit');\n                    } else {\n                      // Attempting to save form data\n                      // The form component handles its own validation and submission\n                      // Triggering form submission event\n                      const formElement = document.querySelector('form');\n                      if (formElement) {\n                        // Found form element, triggering submit event\n                        const submitEvent = new Event('submit', {\n                          bubbles: true,\n                          cancelable: true,\n                        });\n                        formElement.dispatchEvent(submitEvent);\n                      } else {\n                        logger.error('Form element not found for submission');\n                        toast.error('Unable to submit form');\n                      }\n                    }\n                    // Form action completed\n                  }}\n                  className=\"w-full rounded-lg border border-zinc-200 bg-zinc-50 px-3 py-2 font-medium text-zinc-900 transition-colors hover:bg-zinc-100 dark:border-zinc-800 dark:bg-zinc-900 dark:text-zinc-100 dark:hover:bg-zinc-800\"\n                >\n                  {formMode === 'view' ? '✏️ Edit' : '💾 Save'}\n                </button>\n                <button className=\"w-full rounded-md border border-gray-200 bg-white px-4 py-2 text-sm font-medium text-gray-600 hover:bg-gray-50 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-hidden dark:border-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:hover:bg-gray-700\">\n                  Generate Certificate\n                </button>\n                <button className=\"w-full rounded-md border border-gray-200 bg-white px-4 py-2 text-sm font-medium text-gray-600 hover:bg-gray-50 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-hidden dark:border-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:hover:bg-gray-700\">\n                  Export Data\n                </button>\n\n                {/* Delete Button */}\n                <button\n                  onClick={() => setShowDeleteConfirm(true)}\n                  disabled={isDeleting || formMode === 'edit'}\n                  className=\"w-full rounded-md border border-red-200 bg-red-50 px-4 py-2 text-sm font-medium text-red-600 hover:bg-red-100 focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:outline-hidden disabled:cursor-not-allowed disabled:opacity-50 dark:border-red-800 dark:bg-red-900/20 dark:text-red-400 dark:hover:bg-red-900/30\"\n                >\n                  {isDeleting ? 'Deleting...' : '🗑️ Delete Resident'}\n                </button>\n              </div>\n            </div>\n\n            {/* Delete Confirmation Modal */}\n            {showDeleteConfirm && (\n              <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n                <div className=\"flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0\">\n                  <div\n                    className=\"bg-opacity-75 fixed inset-0 bg-gray-500 transition-opacity\"\n                    role=\"button\"\n                    tabIndex={0}\n                    onClick={() => setShowDeleteConfirm(false)}\n                    onKeyDown={e => {\n                      if (e.key === 'Escape' || e.key === 'Enter') {\n                        setShowDeleteConfirm(false);\n                      }\n                    }}\n                    aria-label=\"Close delete confirmation dialog\"\n                  />\n                  <div className=\"relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg dark:bg-gray-800\">\n                    <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4 dark:bg-gray-800\">\n                      <div className=\"sm:flex sm:items-start\">\n                        <div className=\"mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10 dark:bg-red-900/20\">\n                          <svg\n                            className=\"h-6 w-6 text-red-600 dark:text-red-400\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            strokeWidth=\"1.5\"\n                            stroke=\"currentColor\"\n                          >\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              d=\"M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z\"\n                            />\n                          </svg>\n                        </div>\n                        <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\n                          <h3 className=\"text-base leading-6 font-semibold text-gray-900 dark:text-gray-100\">\n                            Delete Resident\n                          </h3>\n                          <div className=\"mt-2\">\n                            <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                              Are you sure you want to delete {resident?.first_name}{' '}\n                              {resident?.last_name}? This action cannot be undone.\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6 dark:bg-gray-700\">\n                      <button\n                        type=\"button\"\n                        onClick={handleDelete}\n                        disabled={isDeleting}\n                        className=\"inline-flex w-full justify-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 disabled:opacity-50 sm:ml-3 sm:w-auto\"\n                      >\n                        {isDeleting ? 'Deleting...' : 'Delete'}\n                      </button>\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowDeleteConfirm(false)}\n                        disabled={isDeleting}\n                        className=\"mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-gray-300 ring-inset hover:bg-gray-50 disabled:opacity-50 sm:mt-0 sm:w-auto dark:bg-gray-600 dark:text-gray-100 dark:ring-gray-500 dark:hover:bg-gray-500\"\n                      >\n                        Cancel\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function ResidentDetailPage() {\n  return <ResidentDetailContent />;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/residents/create/__tests__/create-resident.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fireEvent' is defined but never used.","line":6,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3315,3318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3315,3318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":276,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":276,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onCancel' is defined but never used. Allowed unused args must match /^_/u.","line":314,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":314,"endColumn":64},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":314,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":314,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9275,9278],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9275,9278],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":527,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":527,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Comprehensive Test Suite for Add New Resident Functionality\n * Tests the complete flow of creating a new resident\n */\n\nimport { render, screen, waitFor, fireEvent } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport React from 'react';\nimport { toast } from 'react-hot-toast';\n\nimport { useAuth } from '@/contexts';\n\nimport CreateResidentPage from '../page';\n\n// Mock dependencies\njest.mock('next/navigation', () => ({\n  useRouter: jest.fn(),\n  useSearchParams: jest.fn(),\n}));\n\njest.mock('@/contexts/AuthContext', () => ({\n  useAuth: jest.fn(),\n}));\n\njest.mock('@/components', () => ({\n  ResidentForm: jest.fn(({ onSubmit, onCancel, initialData }) => (\n    <div data-testid=\"resident-form\">\n      <button\n        onClick={() =>\n          onSubmit({\n            first_name: 'John',\n            last_name: 'Doe',\n            birthdate: '1990-01-01',\n            sex: 'male',\n          })\n        }\n      >\n        Submit\n      </button>\n      <button onClick={onCancel}>Cancel</button>\n      {initialData?.first_name && <div>Pre-filled: {initialData.first_name}</div>}\n    </div>\n  )),\n}));\n\njest.mock('@/hooks/crud/useResidentOperations', () => ({\n  useResidentOperations: jest.fn(),\n}));\n\n// Mock security and validation modules\njest.mock('@/lib/security/philippine-logging', () => ({\n  philippineCompliantLogger: {\n    debug: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  },\n  auditLogger: {\n    info: jest.fn(),\n  },\n  npcComplianceLogger: {\n    info: jest.fn(),\n  },\n  getClientIP: jest.fn(() => '127.0.0.1'),\n  generateSecureSessionId: jest.fn(() => 'mock-session-id'),\n}));\n\njest.mock('@/utils/resident-form-utils', () => ({\n  validateRequiredFields: jest.fn(() => ({ isValid: true, errors: {} })),\n  transformFormData: jest.fn(data => data),\n  parseFullName: jest.fn(name => ({\n    first_name: name.split(' ')[0] || '',\n    middleName: name.split(' ')[1] || '',\n    last_name: name.split(' ')[2] || name.split(' ')[1] || '',\n  })),\n  validateFormData: jest.fn(() => ({ isValid: true, errors: {} })),\n  prepareFormSubmission: jest.fn((formData, userId, sessionId, barangayCode) => ({\n    transformedData: formData,\n    auditInfo: {\n      userId,\n      sessionId,\n      barangayCode,\n      timestamp: new Date().toISOString(),\n      fieldCount: Object.keys(formData).length,\n      hasPhilSys: false,\n      hasVoterData: false,\n    },\n  })),\n  generateFormSummary: jest.fn(() => ({\n    hasPersonalInfo: true,\n    fieldCount: 4,\n  })),\n}));\n\njest.mock('@/utils/input-sanitizer', () => ({\n  sanitizeInput: jest.fn(input => input || ''),\n  sanitizeNameInput: jest.fn(input => input || ''),\n  checkRateLimit: jest.fn(() => true),\n}));\n\njest.mock('@/lib/auth', () => ({\n  useCSRFToken: jest.fn(() => ({\n    getToken: jest.fn(() => 'mock-csrf-token'),\n  })),\n}));\n\njest.mock('@/constants/resident-form', () => ({\n  RATE_LIMITS: {\n    FORM_SUBMISSION: {\n      MAX_ATTEMPTS: 5,\n      WINDOW_MS: 300000,\n    },\n  },\n}));\n\njest.mock('react-hot-toast', () => ({\n  toast: {\n    success: jest.fn(),\n    error: jest.fn(),\n  },\n}));\n\n// Mock the service and hooks\nconst mockCreateResident = jest.fn();\nconst mockUseResidentOperations = (require('@/hooks/crud/useResidentOperations') as any)\n  .useResidentOperations as jest.Mock;\n\ndescribe('Create New Resident - Complete Flow', () => {\n  const mockRouter = {\n    push: jest.fn(),\n  };\n\n  const mockSearchParams = new URLSearchParams();\n\n  const mockUserProfile = {\n    barangay_code: '042114014',\n    id: 'user123',\n  };\n\n  const mockSession = {\n    access_token: 'mock-token',\n    user: { id: 'user123' },\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    (useRouter as jest.Mock).mockReturnValue(mockRouter);\n    (useSearchParams as jest.Mock).mockReturnValue(mockSearchParams);\n    (useAuth as jest.Mock).mockReturnValue({\n      user: { id: 'user123', role: 'barangay_official' },\n      userProfile: mockUserProfile,\n      session: mockSession,\n    });\n\n    mockUseResidentOperations.mockReturnValue({\n      createResident: mockCreateResident,\n      isSubmitting: false,\n      validationErrors: {},\n    });\n  });\n\n  describe('Page Rendering', () => {\n    test('should render the create resident page with all required elements', () => {\n      render(<CreateResidentPage />);\n\n      expect(screen.getByText('Add New Resident')).toBeInTheDocument();\n      expect(\n        screen.getByText('Complete the form to register a new resident in the system')\n      ).toBeInTheDocument();\n      expect(screen.getByTestId('resident-form')).toBeInTheDocument();\n      expect(screen.getByText('Back')).toBeInTheDocument();\n    });\n\n    test('should render back button with correct functionality', async () => {\n      const user = userEvent.setup();\n      render(<CreateResidentPage />);\n\n      const backButton = screen.getByText('Back');\n      await user.click(backButton);\n\n      // Back button should be a link, so it won't call router.push\n      expect(backButton.closest('a')).toHaveAttribute('href', '/residents');\n    });\n  });\n\n  describe('Form Submission - Success Cases', () => {\n    test('should handle successful resident creation and redirect to resident details', async () => {\n      const user = userEvent.setup();\n      mockCreateResident.mockResolvedValue({\n        success: true,\n        data: { resident: { id: 'new-resident-123' } },\n      });\n\n      render(<CreateResidentPage />);\n\n      const submitButton = screen.getByText('Submit');\n      await user.click(submitButton);\n\n      await waitFor(() => {\n        expect(mockCreateResident).toHaveBeenCalledWith({\n          first_name: 'John',\n          middle_name: '',\n          last_name: 'Doe',\n          extension_name: '',\n          birthdate: '1990-01-01',\n          sex: 'male',\n          civil_status: 'single',\n          citizenship: 'filipino',\n          education_attainment: '',\n          employment_status: 'not_in_labor_force',\n          email: '',\n          mobile_number: '',\n          telephone_number: '',\n          philsys_card_number: '',\n          blood_type: '',\n          height: '',\n          weight: '',\n          complexion: '',\n          ethnicity: '',\n          religion: 'roman_catholic',\n          last_voted_date: '',\n          mother_maiden_first: '',\n          mother_maiden_middle: '',\n          mother_maiden_last: '',\n          region_code: '',\n          province_code: '',\n          city_municipality_code: '',\n          barangay_code: '',\n          household_code: '',\n        });\n      });\n\n      expect(toast.success).toHaveBeenCalledWith('Resident created successfully!');\n      expect(mockRouter.push).toHaveBeenCalledWith('/residents/new-resident-123');\n    });\n\n    test('should redirect to residents list when no resident ID in response', async () => {\n      const user = userEvent.setup();\n      mockCreateResident.mockResolvedValue({\n        success: true,\n        data: {},\n      });\n\n      render(<CreateResidentPage />);\n\n      const submitButton = screen.getByText('Submit');\n      await user.click(submitButton);\n\n      await waitFor(() => {\n        expect(mockRouter.push).toHaveBeenCalledWith('/residents');\n      });\n    });\n\n    test('should show success toast on successful creation', async () => {\n      const user = userEvent.setup();\n      mockCreateResident.mockResolvedValue({\n        success: true,\n        data: { resident: { id: 'new-resident-123' } },\n      });\n\n      render(<CreateResidentPage />);\n\n      const submitButton = screen.getByText('Submit');\n      await user.click(submitButton);\n\n      await waitFor(() => {\n        expect(toast.success).toHaveBeenCalledWith('Resident created successfully!');\n      });\n    });\n  });\n\n  describe('Form Submission - Error Handling', () => {\n    test('should handle validation errors and display them', async () => {\n      const user = userEvent.setup();\n      const validationErrors = {\n        first_name: 'First name is required',\n        birthdate: 'Invalid birthdate',\n      };\n\n      mockUseResidentOperations.mockReturnValue({\n        createResident: mockCreateResident,\n        isSubmitting: false,\n        validationErrors,\n      });\n\n      render(<CreateResidentPage />);\n\n      expect(screen.getByText('There were errors with your submission')).toBeInTheDocument();\n      expect(screen.getByText('first_name: First name is required')).toBeInTheDocument();\n      expect(screen.getByText('birthdate: Invalid birthdate')).toBeInTheDocument();\n    });\n\n    test('should handle creation failure with error toast', async () => {\n      const user = userEvent.setup();\n      mockCreateResident.mockRejectedValue(new Error('Creation failed'));\n\n      render(<CreateResidentPage />);\n\n      const submitButton = screen.getByText('Submit');\n      await user.click(submitButton);\n\n      await waitFor(() => {\n        expect(toast.error).toHaveBeenCalledWith('Creation failed');\n      });\n    });\n\n    test('should prevent submission when required fields are missing', async () => {\n      const user = userEvent.setup();\n\n      // Mock ResidentForm to return empty data\n      const MockResidentForm = jest.requireMock('@/components').ResidentForm;\n      MockResidentForm.mockImplementation(({ onSubmit, onCancel }: any) => (\n        <div data-testid=\"resident-form\">\n          <button\n            onClick={() =>\n              onSubmit({\n                first_name: '', // Empty required field\n                last_name: '', // Empty required field\n                birthdate: '', // Empty required field\n                sex: '', // Empty required field\n              })\n            }\n          >\n            Submit\n          </button>\n        </div>\n      ));\n\n      render(<CreateResidentPage />);\n\n      const submitButton = screen.getByText('Submit');\n      await user.click(submitButton);\n\n      expect(toast.error).toHaveBeenCalledWith(\n        'Please fill in required fields: first_name, last_name, birthdate, sex'\n      );\n      expect(mockCreateResident).not.toHaveBeenCalled();\n    });\n\n    test('should handle network errors gracefully', async () => {\n      const user = userEvent.setup();\n      mockCreateResident.mockRejectedValue(new Error('Network error'));\n\n      render(<CreateResidentPage />);\n\n      const submitButton = screen.getByText('Submit');\n      await user.click(submitButton);\n\n      await waitFor(() => {\n        expect(toast.error).toHaveBeenCalledWith('Network error');\n      });\n    });\n  });\n\n  describe('Form Cancellation', () => {\n    test('should handle form cancellation and redirect to residents list', async () => {\n      const user = userEvent.setup();\n      render(<CreateResidentPage />);\n\n      const cancelButton = screen.getByText('Cancel');\n      await user.click(cancelButton);\n\n      expect(mockRouter.push).toHaveBeenCalledWith('/residents');\n    });\n  });\n\n  describe('URL Parameters - Pre-filled Data', () => {\n    test('should pre-fill form with suggested name from URL parameters', () => {\n      const mockSearchParams = {\n        get: jest.fn((key: string) => {\n          if (key === 'suggested_name') return 'Maria Santos';\n          return null;\n        }),\n      };\n      (useSearchParams as jest.Mock).mockReturnValue(mockSearchParams);\n\n      render(<CreateResidentPage />);\n\n      expect(screen.getByText('Pre-filled: Maria')).toBeInTheDocument();\n      expect(\n        screen.getByText(\n          'Form pre-filled: The name fields have been populated with \"Maria Santos\". You can edit these values as needed.'\n        )\n      ).toBeInTheDocument();\n    });\n\n    test('should handle complex names with multiple parts', () => {\n      const mockSearchParams = {\n        get: jest.fn((key: string) => {\n          if (key === 'suggested_name') return 'Juan Carlos Santos Dela Cruz';\n          return null;\n        }),\n      };\n      (useSearchParams as jest.Mock).mockReturnValue(mockSearchParams);\n\n      render(<CreateResidentPage />);\n\n      // Should parse: first_name='Juan', middle_name='Carlos Santos', last_name='Dela Cruz'\n      expect(screen.getByText('Pre-filled: Juan')).toBeInTheDocument();\n    });\n\n    test('should handle single name gracefully', () => {\n      const mockSearchParams = {\n        get: jest.fn((key: string) => {\n          if (key === 'suggested_name') return 'Madonna';\n          return null;\n        }),\n      };\n      (useSearchParams as jest.Mock).mockReturnValue(mockSearchParams);\n\n      render(<CreateResidentPage />);\n\n      expect(screen.getByText('Pre-filled: Madonna')).toBeInTheDocument();\n    });\n\n    test('should not show pre-filled notification when no URL parameters', () => {\n      render(<CreateResidentPage />);\n\n      expect(screen.queryByText(/Form pre-filled/)).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Loading States', () => {\n    test('should show loading state during form submission', async () => {\n      const user = userEvent.setup();\n\n      mockUseResidentOperations.mockReturnValue({\n        createResident: mockCreateResident,\n        isSubmitting: true,\n        validationErrors: {},\n      });\n\n      // Mock a slow response\n      mockCreateResident.mockImplementation(\n        () => new Promise(resolve => setTimeout(resolve, 1000))\n      );\n\n      render(<CreateResidentPage />);\n\n      const submitButton = screen.getByText('Submit');\n      await user.click(submitButton);\n\n      // Form should be in submitting state\n      expect(screen.getByTestId('resident-form')).toBeInTheDocument();\n    });\n  });\n\n  describe('Authentication Requirements', () => {\n    test('should require authentication for form submission', () => {\n      (useAuth as jest.Mock).mockReturnValue({\n        userProfile: null,\n        session: null,\n      });\n\n      render(<CreateResidentPage />);\n\n      // Form should still render but operations will be limited\n      expect(screen.getByTestId('resident-form')).toBeInTheDocument();\n    });\n\n    test('should require barangay code for resident creation', () => {\n      (useAuth as jest.Mock).mockReturnValue({\n        userProfile: { id: 'user123' }, // No barangay_code\n        session: mockSession,\n      });\n\n      render(<CreateResidentPage />);\n\n      expect(screen.getByTestId('resident-form')).toBeInTheDocument();\n    });\n  });\n\n  describe('Accessibility', () => {\n    test('should have proper heading hierarchy', () => {\n      render(<CreateResidentPage />);\n\n      const heading = screen.getByRole('heading', { name: 'Add New Resident' });\n      expect(heading).toBeInTheDocument();\n      expect(heading.tagName).toBe('H1');\n    });\n\n    test('should have descriptive text for screen readers', () => {\n      render(<CreateResidentPage />);\n\n      expect(\n        screen.getByText('Complete the form to register a new resident in the system')\n      ).toBeInTheDocument();\n    });\n\n    test('should have accessible back button', () => {\n      render(<CreateResidentPage />);\n\n      const backButton = screen.getByText('Back');\n      expect(backButton.closest('a')).toHaveAttribute('href', '/residents');\n    });\n  });\n\n  describe('Integration Testing', () => {\n    test('should complete full workflow from form fill to redirect', async () => {\n      const user = userEvent.setup();\n      mockCreateResident.mockResolvedValue({\n        success: true,\n        data: { resident: { id: 'integration-test-123' } },\n      });\n\n      render(<CreateResidentPage />);\n\n      // Verify initial state\n      expect(screen.getByText('Add New Resident')).toBeInTheDocument();\n      expect(screen.getByTestId('resident-form')).toBeInTheDocument();\n\n      // Submit form\n      const submitButton = screen.getByText('Submit');\n      await user.click(submitButton);\n\n      // Verify submission and redirect\n      await waitFor(() => {\n        expect(mockCreateResident).toHaveBeenCalled();\n        expect(toast.success).toHaveBeenCalledWith('Resident created successfully!');\n        expect(mockRouter.push).toHaveBeenCalledWith('/residents/integration-test-123');\n      });\n    });\n\n    test('should handle complete error workflow', async () => {\n      const user = userEvent.setup();\n      const validationErrors = {\n        first_name: 'First name is required',\n        sex: 'Sex is required',\n      };\n\n      mockUseResidentOperations.mockReturnValue({\n        createResident: mockCreateResident,\n        isSubmitting: false,\n        validationErrors,\n      });\n\n      render(<CreateResidentPage />);\n\n      // Should show validation errors\n      expect(screen.getByText('There were errors with your submission')).toBeInTheDocument();\n      expect(screen.getByText('first_name: First name is required')).toBeInTheDocument();\n      expect(screen.getByText('sex: Sex is required')).toBeInTheDocument();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/residents/create/__tests__/security.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fireEvent' is defined but never used.","line":8,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onCancel' is defined but never used. Allowed unused args must match /^_/u.","line":25,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3515,3518],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3515,3518],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3709,3712],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3709,3712],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":231,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6921,6924],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6921,6924],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":323,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":323,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9928,9931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9928,9931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":516,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":516,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16250,16253],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16250,16253],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Security Test Suite for Residents Create Module\n *\n * Tests Philippine regulatory compliance (RA 10173) and\n * security measures per BSP Circular 808 requirements.\n */\n\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { useSearchParams, useRouter } from 'next/navigation';\n\nimport CreateResidentPage from '../page';\n\n// Mock dependencies\njest.mock('next/navigation', () => ({\n  useRouter: jest.fn(),\n  useSearchParams: jest.fn(),\n}));\n\njest.mock('@/contexts/AuthContext', () => ({\n  useAuth: jest.fn(),\n}));\n\njest.mock('@/components', () => ({\n  ResidentForm: jest.fn(({ onSubmit, onCancel, initialData }) => (\n    <div data-testid=\"resident-form\">\n      <form>\n        <input data-testid=\"first-name-input\" defaultValue={initialData?.first_name || ''} />\n        <button\n          type=\"button\"\n          data-testid=\"submit-button\"\n          onClick={() =>\n            onSubmit({\n              first_name: 'Test',\n              last_name: 'User',\n              birthdate: '1990-01-01',\n              sex: 'male',\n              household_code: 'HH001',\n            })\n          }\n        >\n          Submit\n        </button>\n      </form>\n      {initialData?.first_name && (\n        <div data-testid=\"prefilled-name\">Pre-filled: {initialData.first_name}</div>\n      )}\n    </div>\n  )),\n}));\n\n// Security-focused mocks\nconst mockAuditLogger = {\n  info: jest.fn(),\n};\n\nconst mockPhilippineCompliantLogger = {\n  debug: jest.fn(),\n  info: jest.fn(),\n  warn: jest.fn(),\n  error: jest.fn(),\n};\n\nconst mockNPCComplianceLogger = {\n  info: jest.fn(),\n};\n\njest.mock('@/lib/security/philippine-logging', () => ({\n  philippineCompliantLogger: mockPhilippineCompliantLogger,\n  auditLogger: mockAuditLogger,\n  npcComplianceLogger: mockNPCComplianceLogger,\n  getClientIP: jest.fn(() => '127.0.0.1'),\n  generateSecureSessionId: jest.fn(() => 'secure-session-123'),\n}));\n\nconst mockValidateFormData = jest.fn();\nconst mockPrepareFormSubmission = jest.fn();\n\njest.mock('@/utils/resident-form-utils', () => ({\n  validateFormData: mockValidateFormData,\n  prepareFormSubmission: mockPrepareFormSubmission,\n  parseFullName: jest.fn(name => ({\n    first_name: name?.split(' ')[0] || '',\n    middleName: name?.split(' ')[1] || '',\n    last_name: name?.split(' ')[2] || name?.split(' ')[1] || '',\n  })),\n  generateFormSummary: jest.fn(() => ({})),\n}));\n\nconst mockSanitizeInput = jest.fn();\nconst mockSanitizeNameInput = jest.fn();\nconst mockCheckRateLimit = jest.fn();\n\njest.mock('@/utils/input-sanitizer', () => ({\n  sanitizeInput: mockSanitizeInput,\n  sanitizeNameInput: mockSanitizeNameInput,\n  checkRateLimit: mockCheckRateLimit,\n}));\n\njest.mock('@/hooks/crud/useResidentOperations', () => ({\n  useResidentOperations: jest.fn(),\n}));\n\njest.mock('@/lib/auth', () => ({\n  useCSRFToken: jest.fn(() => ({\n    getToken: jest.fn(() => 'csrf-token-123'),\n  })),\n}));\n\njest.mock('@/constants/resident-form', () => ({\n  RATE_LIMITS: {\n    FORM_SUBMISSION: {\n      MAX_ATTEMPTS: 5,\n      WINDOW_MS: 300000,\n    },\n  },\n}));\n\nconst mockCreateResident = jest.fn();\n\ndescribe('Security Tests - Philippine Regulatory Compliance', () => {\n  const mockRouter = { push: jest.fn() };\n  const mockUser = { id: 'user123', role: 'barangay_official' };\n  const mockUserProfile = { barangay_code: '042114014' };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    (useRouter as jest.Mock).mockReturnValue(mockRouter);\n\n    (require('@/contexts/AuthContext') as any).useAuth.mockReturnValue({\n      user: mockUser,\n      userProfile: mockUserProfile,\n      session: { access_token: 'token' },\n    });\n\n    (require('@/hooks/crud/useResidentOperations') as any).useResidentOperations.mockReturnValue({\n      createResident: mockCreateResident,\n      isSubmitting: false,\n      validationErrors: {},\n    });\n\n    mockValidateFormData.mockReturnValue({ isValid: true, errors: {} });\n    mockPrepareFormSubmission.mockReturnValue({\n      transformedData: {},\n      auditInfo: {\n        userId: 'user123',\n        sessionId: 'session123',\n        timestamp: new Date().toISOString(),\n      },\n    });\n    mockCheckRateLimit.mockReturnValue(true);\n  });\n\n  describe('URL Parameter Injection Prevention', () => {\n    test('should sanitize XSS attempts in suggested_name parameter', () => {\n      const xssPayload = '<script>alert(\"XSS\")</script>';\n      const mockSearchParams = {\n        get: jest.fn(key => {\n          if (key === 'suggested_name') return xssPayload;\n          return null;\n        }),\n      };\n\n      mockSanitizeNameInput.mockReturnValue(''); // Sanitized to empty string\n      (useSearchParams as jest.Mock).mockReturnValue(mockSearchParams);\n\n      render(<CreateResidentPage />);\n\n      // Verify sanitization was called\n      expect(mockSanitizeNameInput).toHaveBeenCalledWith(xssPayload);\n\n      // Should not display script content\n      expect(screen.queryByText('script')).not.toBeInTheDocument();\n      expect(screen.queryByText('alert')).not.toBeInTheDocument();\n\n      // Should log security event\n      expect(mockAuditLogger.info).toHaveBeenCalledWith(\n        expect.stringContaining('URL parameter processing'),\n        expect.objectContaining({\n          eventType: 'URL_PARAM_PROCESSING',\n          userId: 'user123',\n        })\n      );\n    });\n\n    test('should handle javascript: protocol injection attempts', () => {\n      const jsPayload = 'javascript:void(0)';\n      const mockSearchParams = {\n        get: jest.fn(key => {\n          if (key === 'suggested_name') return jsPayload;\n          return null;\n        }),\n      };\n\n      mockSanitizeNameInput.mockReturnValue('void'); // Sanitized\n      (useSearchParams as jest.Mock).mockReturnValue(mockSearchParams);\n\n      expect(() => render(<CreateResidentPage />)).not.toThrow();\n      expect(mockSanitizeNameInput).toHaveBeenCalledWith(jsPayload);\n    });\n\n    test('should limit name length to prevent buffer overflow attacks', () => {\n      const longName = 'A'.repeat(1000);\n      const mockSearchParams = {\n        get: jest.fn(key => {\n          if (key === 'suggested_name') return longName;\n          return null;\n        }),\n      };\n\n      mockSanitizeNameInput.mockReturnValue('A'.repeat(100)); // Truncated\n      (useSearchParams as jest.Mock).mockReturnValue(mockSearchParams);\n\n      render(<CreateResidentPage />);\n\n      expect(mockSanitizeNameInput).toHaveBeenCalledWith(longName);\n      expect(screen.getByTestId('resident-form')).toBeInTheDocument();\n    });\n\n    test('should log security validation failures', () => {\n      const maliciousName = '<img src=x onerror=alert(1)>';\n      const mockSearchParams = {\n        get: jest.fn(key => {\n          if (key === 'suggested_name') return maliciousName;\n          return null;\n        }),\n      };\n\n      // Mock parseFullName to throw error for invalid input\n      (require('@/utils/resident-form-utils') as any).parseFullName.mockImplementation(() => {\n        throw new Error('Invalid name format');\n      });\n\n      mockSanitizeNameInput.mockReturnValue('img src=x onerror=alert(1)');\n      (useSearchParams as jest.Mock).mockReturnValue(mockSearchParams);\n\n      render(<CreateResidentPage />);\n\n      expect(mockAuditLogger.info).toHaveBeenCalledWith(\n        expect.stringContaining('URL parameter validation failed'),\n        expect.objectContaining({\n          eventType: 'URL_PARAM_VALIDATION_FAILED',\n          parameterType: 'suggested_name',\n        })\n      );\n    });\n  });\n\n  describe('Console Log Security Compliance (RA 10173)', () => {\n    let consoleSpy: jest.SpyInstance;\n\n    beforeEach(() => {\n      consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n    });\n\n    afterEach(() => {\n      consoleSpy.mockRestore();\n    });\n\n    test('should not log sensitive form data to console', async () => {\n      const user = userEvent.setup();\n      render(<CreateResidentPage />);\n\n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n\n      // Check that console.log was never called with sensitive data patterns\n      const logCalls = consoleSpy.mock.calls.flat();\n\n      expect(logCalls).not.toEqual(\n        expect.arrayContaining([\n          expect.stringMatching(/Raw form data/i),\n          expect.stringMatching(/philsys.*number/i),\n          expect.stringMatching(/voter.*value/i),\n        ])\n      );\n    });\n\n    test('should use RA 10173 compliant logging instead of console.log', async () => {\n      const user = userEvent.setup();\n      render(<CreateResidentPage />);\n\n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n\n      // Verify compliant logging was used\n      expect(mockPhilippineCompliantLogger.debug).toHaveBeenCalledWith(\n        expect.stringContaining('Form processing initiated'),\n        expect.objectContaining({\n          complianceNote: 'RA_10173_COMPLIANT_DEV_LOG',\n        })\n      );\n\n      expect(mockAuditLogger.info).toHaveBeenCalledWith(\n        expect.stringContaining('Resident registration attempt'),\n        expect.objectContaining({\n          complianceFramework: 'RA_10173_BSP_808',\n        })\n      );\n\n      expect(mockNPCComplianceLogger.info).toHaveBeenCalledWith(\n        expect.stringContaining('Data processing event'),\n        expect.objectContaining({\n          legalBasis: 'PERFORMANCE_OF_TASK_PUBLIC_INTEREST',\n        })\n      );\n    });\n  });\n\n  describe('Rate Limiting Security', () => {\n    test('should prevent form spam through rate limiting', async () => {\n      mockCheckRateLimit.mockReturnValue(false); // Rate limit exceeded\n\n      const user = userEvent.setup();\n      render(<CreateResidentPage />);\n\n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n\n      // Should show rate limiting error\n      await waitFor(() => {\n        expect((require('react-hot-toast') as any).toast.error).toHaveBeenCalledWith(\n          'Too many submission attempts. Please wait before trying again.'\n        );\n      });\n\n      // Should not proceed with form submission\n      expect(mockCreateResident).not.toHaveBeenCalled();\n    });\n\n    test('should allow submission when rate limit not exceeded', async () => {\n      mockCheckRateLimit.mockReturnValue(true); // Rate limit OK\n      mockCreateResident.mockResolvedValue({ success: true });\n\n      const user = userEvent.setup();\n      render(<CreateResidentPage />);\n\n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n\n      expect(mockCheckRateLimit).toHaveBeenCalledWith(\n        'user123',\n        5, // MAX_ATTEMPTS\n        300000 // WINDOW_MS\n      );\n\n      await waitFor(() => {\n        expect(mockCreateResident).toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe('Input Validation Security', () => {\n    test('should validate form data server-side even if client validation passes', async () => {\n      mockValidateFormData.mockReturnValue({\n        isValid: false,\n        errors: { _form: 'Server validation failed' },\n      });\n\n      const user = userEvent.setup();\n      render(<CreateResidentPage />);\n\n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n\n      // Should log validation failure\n      expect(mockAuditLogger.info).toHaveBeenCalledWith(\n        'Form validation failed',\n        expect.objectContaining({\n          eventType: 'VALIDATION_FAILED',\n          errorCount: 1,\n        })\n      );\n\n      // Should not proceed to submission\n      expect(mockCreateResident).not.toHaveBeenCalled();\n    });\n\n    test('should sanitize all form inputs before processing', async () => {\n      mockSanitizeInput.mockReturnValue('sanitized');\n\n      const user = userEvent.setup();\n      render(<CreateResidentPage />);\n\n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n\n      // Should call sanitization functions\n      expect(mockPrepareFormSubmission).toHaveBeenCalled();\n    });\n  });\n\n  describe('CSRF Protection', () => {\n    test('should include CSRF token in form submissions', async () => {\n      mockCreateResident.mockResolvedValue({ success: true });\n\n      const user = userEvent.setup();\n      render(<CreateResidentPage />);\n\n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n\n      await waitFor(() => {\n        expect(mockCreateResident).toHaveBeenCalledWith(\n          expect.objectContaining({\n            csrfToken: 'csrf-token-123',\n          })\n        );\n      });\n    });\n  });\n\n  describe('Audit Trail Compliance (BSP Circular 808)', () => {\n    test('should create comprehensive audit trail for all form interactions', async () => {\n      const user = userEvent.setup();\n      render(<CreateResidentPage />);\n\n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n\n      // Verify all required audit events are logged\n      const auditCalls = mockAuditLogger.info.mock.calls;\n      const auditEventTypes = auditCalls.map(call => call[1]?.eventType);\n\n      expect(auditEventTypes).toContain('RESIDENT_FORM_PROCESSING');\n      expect(\n        auditCalls.some(\n          call =>\n            call[1]?.complianceFramework === 'RA_10173_BSP_808' &&\n            call[1]?.retentionPeriod === '7_YEARS'\n        )\n      ).toBe(true);\n    });\n\n    test('should log security events with proper classification', async () => {\n      const maliciousInput = '<script>alert(\"test\")</script>';\n      const mockSearchParams = {\n        get: jest.fn(() => maliciousInput),\n      };\n\n      mockSanitizeNameInput.mockReturnValue('');\n      (useSearchParams as jest.Mock).mockReturnValue(mockSearchParams);\n\n      render(<CreateResidentPage />);\n\n      expect(mockAuditLogger.info).toHaveBeenCalledWith(\n        expect.any(String),\n        expect.objectContaining({\n          complianceFramework: 'RA_10173_BSP_808',\n          retentionPeriod: '7_YEARS',\n        })\n      );\n    });\n  });\n\n  describe('Data Privacy Compliance (NPC Requirements)', () => {\n    test('should log data processing activities per NPC guidelines', async () => {\n      const user = userEvent.setup();\n      render(<CreateResidentPage />);\n\n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n\n      expect(mockNPCComplianceLogger.info).toHaveBeenCalledWith(\n        'Data processing event',\n        expect.objectContaining({\n          dataCategory: 'PERSONAL_INFORMATION',\n          processingPurpose: 'BARANGAY_RESIDENT_REGISTRATION',\n          legalBasis: 'PERFORMANCE_OF_TASK_PUBLIC_INTEREST',\n          consentStatus: 'OBTAINED',\n        })\n      );\n    });\n\n    test('should never log actual personal data content', async () => {\n      const user = userEvent.setup();\n      render(<CreateResidentPage />);\n\n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n\n      // Check all logger calls to ensure no PII is logged\n      const allLogCalls = [\n        ...mockPhilippineCompliantLogger.debug.mock.calls,\n        ...mockAuditLogger.info.mock.calls,\n        ...mockNPCComplianceLogger.info.mock.calls,\n      ];\n\n      allLogCalls.forEach(call => {\n        const logContent = JSON.stringify(call);\n\n        // Should not contain actual personal data\n        expect(logContent).not.toMatch(/John|Doe|1990-01-01/);\n        expect(logContent).not.toMatch(/\\d{4}-\\d{4}-\\d{4}/); // PhilSys pattern\n        expect(logContent).not.toMatch(/\\+639\\d{9}/); // Phone pattern\n      });\n    });\n  });\n\n  describe('Error Handling Security', () => {\n    test('should not expose sensitive information in error messages', async () => {\n      mockValidateFormData.mockReturnValue({\n        isValid: false,\n        errors: { database: 'Connection failed to server 192.168.1.100' },\n      });\n\n      const user = userEvent.setup();\n      render(<CreateResidentPage />);\n\n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n\n      // Should show generic error, not expose internal details\n      await waitFor(() => {\n        expect((require('react-hot-toast') as any).toast.error).toHaveBeenCalledWith(\n          expect.not.stringMatching(/192\\.168\\.1\\.100|server|database/i)\n        );\n      });\n    });\n\n    test('should log detailed errors for security monitoring', async () => {\n      const securityError = new Error('Potential security violation detected');\n      mockValidateFormData.mockImplementation(() => {\n        throw securityError;\n      });\n\n      const user = userEvent.setup();\n      render(<CreateResidentPage />);\n\n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n\n      expect(mockAuditLogger.info).toHaveBeenCalledWith(\n        'Form submission error',\n        expect.objectContaining({\n          eventType: 'FORM_SUBMISSION_ERROR',\n          errorType: 'Error',\n        })\n      );\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/residents/create/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/residents/create/page.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/residents/create/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1076,1079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1076,1079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1127,1130],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1127,1130],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2915,2918],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2915,2918],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'sessionId'. Either exclude it or remove the dependency array. Outer scope values like 'sessionId' aren't valid dependencies because mutating them doesn't re-render the component.","line":209,"column":5,"nodeType":"ArrayExpression","endLine":209,"endColumn":65,"suggestions":[{"desc":"Update the dependencies array to be: [user, userProfile, createResident, getCSRFToken]","fix":{"range":[7772,7832],"text":"[user, userProfile, createResident, getCSRFToken]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":215,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":215,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7980,7983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7980,7983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has unnecessary dependencies: 'sessionId' and 'suggestedName'. Either exclude them or remove the dependency array. Outer scope values like 'sessionId' aren't valid dependencies because mutating them doesn't re-render the component.","line":232,"column":6,"nodeType":"ArrayExpression","endLine":232,"endColumn":55,"suggestions":[{"desc":"Update the dependencies array to be: [suggestedId, user?.id]","fix":{"range":[8534,8583],"text":"[suggestedId, user?.id]"}}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":280,"column":96,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10523,10587],"text":" The name fields have been populated with &quot;\n                    "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10523,10587],"text":" The name fields have been populated with &ldquo;\n                    "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10523,10587],"text":" The name fields have been populated with &#34;\n                    "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10523,10587],"text":" The name fields have been populated with &rdquo;\n                    "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":281,"column":36,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10602,10660],"text":"&quot;. You can edit these values as needed.\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10602,10660],"text":"&ldquo;. You can edit these values as needed.\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10602,10660],"text":"&#34;. You can edit these values as needed.\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10602,10660],"text":"&rdquo;. You can edit these values as needed.\n                  "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport React, { useMemo, useCallback } from 'react';\nimport { toast } from 'react-hot-toast';\n\nimport { ResidentForm } from '@/components';\nimport { RATE_LIMITS } from '@/constants/resident-form';\nimport { useAuth } from '@/contexts';\nimport { useResidentOperations } from '@/hooks/crud/useResidentOperations';\nimport { useResidentFormURLParameters } from '@/hooks/useURLParameters';\nimport { useCSRFToken } from '@/lib/auth';\nimport {\n  philippineCompliantLogger,\n  auditLogger,\n  npcComplianceLogger,\n  generateSecureSessionId,\n} from '@/lib/security/philippine-logging';\nimport { checkRateLimit, clearRateLimit, getRateLimitStatus } from '@/utils/input-sanitizer';\nimport { validateFormData, prepareFormSubmission } from '@/utils/resident-form-utils';\n\nexport const dynamic = 'force-dynamic';\n\nconst sessionId = generateSecureSessionId();\n\n// Expose rate limit utilities in development mode\nif (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {\n  (window as any).clearRateLimit = clearRateLimit;\n  (window as any).getRateLimitStatus = getRateLimitStatus;\n}\n\nfunction CreateResidentForm() {\n  const router = useRouter();\n  const { user, userProfile } = useAuth();\n  const { getToken: getCSRFToken } = useCSRFToken();\n\n  const { createResident, validationErrors } = useResidentOperations({\n    onSuccess: () => {\n      auditLogger.info('Resident creation successful', {\n        eventType: 'RESIDENT_CREATE_SUCCESS',\n        userId: user?.id || 'anonymous',\n        action: 'RESIDENT_CREATED',\n        timestamp: new Date().toISOString(),\n        sessionId,\n        barangayOfficial: user?.role === 'barangay_official',\n        complianceFramework: 'RA_10173_BSP_808',\n        retentionPeriod: '7_YEARS',\n      });\n\n      npcComplianceLogger.info('Data processing completed', {\n        dataCategory: 'PERSONAL_INFORMATION',\n        processingPurpose: 'BARANGAY_RESIDENT_REGISTRATION',\n        legalBasis: 'PERFORMANCE_OF_TASK_PUBLIC_INTEREST',\n        dataSubjectCount: 1,\n        sensitiveDataProcessed: false, // Never log if sensitive data was processed\n        consentStatus: 'OBTAINED',\n        timestamp: new Date().toISOString(),\n        npcRegistrationRef: process.env.NPC_REGISTRATION_NUMBER,\n      });\n\n      toast.success('Resident created successfully!');\n      router.push('/residents');\n    },\n    onError: error => {\n      auditLogger.info('Resident creation failed', {\n        eventType: 'RESIDENT_CREATE_FAILED',\n        userId: user?.id || 'anonymous',\n        action: 'RESIDENT_CREATE_ERROR',\n        timestamp: new Date().toISOString(),\n        sessionId,\n        complianceFramework: 'RA_10173_BSP_808',\n        retentionPeriod: '7_YEARS',\n      });\n\n      toast.error(error || 'Failed to create resident');\n    },\n  });\n\n  const handleSubmit = useCallback(\n    async (formData: any) => {\n      try {\n        const userIdentifier = user?.id || 'anonymous';\n\n        // Check rate limit and provide helpful feedback\n        if (\n          !checkRateLimit(\n            userIdentifier,\n            RATE_LIMITS.FORM_SUBMISSION.MAX_ATTEMPTS,\n            RATE_LIMITS.FORM_SUBMISSION.WINDOW_MS\n          )\n        ) {\n          const status = getRateLimitStatus(userIdentifier);\n          const waitTime = status.remainingTime ? Math.ceil(status.remainingTime / 1000 / 60) : 5;\n\n          toast.error(\n            `Too many submission attempts (${status.count}/5). Please wait ${waitTime} minutes before trying again.` +\n              (process.env.NODE_ENV === 'development' ? ' Check console for reset option.' : '')\n          );\n\n          // In development, provide a way to reset the rate limit\n          if (process.env.NODE_ENV === 'development') {\n            philippineCompliantLogger.warn('Rate limit exceeded in development', {\n              userIdentifier,\n              attempts: status.count,\n              waitTimeMinutes: waitTime,\n              timestamp: new Date().toISOString(),\n              complianceNote: 'DEV_RATE_LIMIT_WARNING',\n            });\n\n            // Auto-clear rate limit after 30 seconds in development to help with testing\n            setTimeout(() => {\n              philippineCompliantLogger.info(\n                'Development mode: Auto-clearing rate limit after 30 seconds'\n              );\n              clearRateLimit(userIdentifier);\n              toast.success('Rate limit cleared. You can now try submitting again.');\n            }, 30000);\n          }\n\n          return;\n        }\n\n        philippineCompliantLogger.debug('Form processing initiated', {\n          userId: user?.id || 'anonymous',\n          timestamp: new Date().toISOString(),\n          formFieldCount: Object.keys(formData).length,\n          barangayCode: userProfile?.barangay_code?.substring(0, 3) + '***',\n          hasPhilSysData: !!formData.philsys_card_number,\n          hasVoterData: !!(formData.is_voter || formData.is_resident_voter),\n          sessionId,\n          complianceNote: 'RA_10173_COMPLIANT_DEV_LOG',\n        });\n\n        const validation = validateFormData(formData);\n        if (!validation.isValid) {\n          auditLogger.info('Form validation failed', {\n            eventType: 'VALIDATION_FAILED',\n            userId: user?.id || 'anonymous',\n            action: 'FORM_VALIDATION',\n            timestamp: new Date().toISOString(),\n            sessionId,\n            complianceFramework: 'RA_10173_BSP_808',\n            retentionPeriod: '7_YEARS',\n          });\n\n          toast.error(validation.errors._form || 'Please correct the form errors');\n          return;\n        }\n\n        const { transformedData, auditInfo } = prepareFormSubmission(\n          formData,\n          user?.id || 'anonymous',\n          sessionId,\n          userProfile?.barangay_code || ''\n        );\n\n        auditLogger.info('Resident registration attempt', {\n          eventType: 'RESIDENT_FORM_PROCESSING',\n          userId: auditInfo.userId,\n          action: 'CREATE_RESIDENT_ATTEMPT',\n          timestamp: auditInfo.timestamp,\n          sessionId: auditInfo.sessionId,\n          barangayOfficial: user?.role === 'barangay_official',\n          complianceFramework: 'RA_10173_BSP_808',\n          retentionPeriod: '7_YEARS',\n        });\n\n        npcComplianceLogger.info('Data processing event', {\n          dataCategory: 'PERSONAL_INFORMATION',\n          processingPurpose: 'BARANGAY_RESIDENT_REGISTRATION',\n          legalBasis: 'PERFORMANCE_OF_TASK_PUBLIC_INTEREST',\n          dataSubjectCount: 1,\n          sensitiveDataProcessed: auditInfo.hasPhilSys,\n          consentStatus: 'OBTAINED',\n          timestamp: auditInfo.timestamp,\n          npcRegistrationRef: process.env.NPC_REGISTRATION_NUMBER,\n        });\n\n        // Get CSRF token separately\n        getCSRFToken();\n        const result = await createResident(transformedData);\n\n        if (!result?.success) {\n          auditLogger.info('Form submission processing completed', {\n            eventType: 'FORM_PROCESSING_STATUS',\n            userId: user?.id || 'anonymous',\n            action: 'PROCESSING_RESULT',\n            timestamp: new Date().toISOString(),\n            sessionId,\n            complianceFramework: 'RA_10173_BSP_808',\n            retentionPeriod: '7_YEARS',\n          });\n        }\n      } catch {\n        auditLogger.info('Form submission error', {\n          eventType: 'FORM_SUBMISSION_ERROR',\n          userId: user?.id || 'anonymous',\n          action: 'SUBMISSION_EXCEPTION',\n          timestamp: new Date().toISOString(),\n          sessionId,\n          complianceFramework: 'RA_10173_BSP_808',\n          retentionPeriod: '7_YEARS',\n        });\n\n        toast.error('An unexpected error occurred. Please try again.');\n      }\n    },\n    [user, userProfile, sessionId, createResident, getCSRFToken]\n  );\n\n  const { suggestedName, suggestedId, isPreFilled } = useResidentFormURLParameters();\n\n  const initialData = useMemo(() => {\n    const data: any = {};\n\n    // Handle suggested ID with validation\n    if (suggestedId && suggestedId.length > 0) {\n      // Log ID parameter usage (for audit purposes)\n      auditLogger.info('URL parameter processing', {\n        eventType: 'URL_PARAM_PROCESSING',\n        userId: user?.id || 'anonymous',\n        action: 'ID_PREFILL',\n        timestamp: new Date().toISOString(),\n        sessionId,\n        complianceFramework: 'RA_10173_BSP_808',\n        retentionPeriod: '7_YEARS',\n      });\n    }\n\n    return Object.keys(data).length > 0 ? data : undefined;\n  }, [suggestedName, suggestedId, user?.id, sessionId]);\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-8 flex items-center gap-4\">\n        <Link\n          href=\"/residents\"\n          className=\"inline-flex items-center gap-2 rounded-lg border border-gray-200 bg-white px-3 py-2 text-sm/6 font-medium text-gray-600 shadow-xs hover:bg-gray-50 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:hover:bg-gray-700\"\n        >\n          <svg\n            className=\"size-4\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            strokeWidth=\"1.5\"\n            stroke=\"currentColor\"\n          >\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15.75 19.5L8.25 12l7.5-7.5\" />\n          </svg>\n          Back\n        </Link>\n        <div className=\"flex-1\">\n          <h1 className=\"text-2xl/8 font-semibold text-gray-600 dark:text-gray-400\">\n            Add New Resident\n          </h1>\n          <p className=\"mt-2 text-sm/6 text-gray-600 dark:text-gray-400\">\n            Complete the form to register a new resident in the system\n          </p>\n\n          {isPreFilled && suggestedName && (\n            <div className=\"mt-4 rounded-md bg-blue-50 p-3 dark:bg-blue-900/20\">\n              <div className=\"flex\">\n                <div className=\"flex-shrink-0\">\n                  <svg\n                    className=\"h-5 w-5 text-blue-400\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                    />\n                  </svg>\n                </div>\n                <div className=\"ml-3\">\n                  <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                    <strong>Form pre-filled:</strong> The name fields have been populated with \"\n                    {suggestedName}\". You can edit these values as needed.\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {Object.keys(validationErrors).length > 0 && (\n        <div className=\"mb-4 rounded-md bg-red-50 p-4 dark:bg-red-900/20\">\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0\">\n              <svg className=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n            </div>\n            <div className=\"ml-3\">\n              <h3 className=\"text-sm font-medium text-red-800 dark:text-red-200\">\n                There were errors with your submission\n              </h3>\n              <div className=\"mt-2 text-sm text-red-700 dark:text-red-300\">\n                <ul className=\"list-disc space-y-1 pl-5\">\n                  {Object.entries(validationErrors).map(([field, error]) => (\n                    <li key={field}>\n                      <strong>{field}:</strong> {error}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <ResidentForm\n        initialData={initialData}\n        onSubmit={handleSubmit}\n        onCancel={() => router.push('/residents')}\n        hidePhysicalDetails={false}\n        hideSectoralInfo={false}\n      />\n    </div>\n  );\n}\n\nexport default function CreateResidentPage() {\n  return <CreateResidentForm />;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/residents/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/residents/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/residents/page.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1099,1102],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1099,1102],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1527,1530],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1527,1530],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1724,1727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1724,1727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1875,1878],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1875,1878],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Residents Listing Page Tests\n * Comprehensive test suite following development standards\n */\n\nimport { render, screen, waitFor, act } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { useRouter } from 'next/navigation';\nimport React from 'react';\n\nimport { useAuth } from '@/contexts';\n\nimport ResidentsPage from './page';\n\n// Mock dependencies\njest.mock('next/navigation', () => ({\n  useRouter: jest.fn(),\n}));\n\njest.mock('@/contexts/AuthContext', () => ({\n  useAuth: jest.fn(),\n}));\n\n// Mock supabase\njest.mock('@/lib/supabase', () => ({\n  supabase: {\n    auth: {\n      getSession: jest.fn(),\n    },\n  },\n}));\n\njest.mock('@/utils/resident-listing-helpers', () => ({\n  fetchResidents: jest.fn(),\n  formatFullName: jest.fn(resident => `${resident.first_name} ${resident.last_name}`),\n  formatDate: jest.fn(date => new Date(date).toLocaleDateString()),\n}));\n\njest.mock('@/components/organisms', () => ({\n  ProtectedRoute: ({ children }: { children: React.ReactNode }) => <div>{children}</div>,\n  DataTable: ({ data, _columns, _actions, pagination }: any) => (\n    <div data-testid=\"data-table\">\n      <div data-testid=\"table-data\">{JSON.stringify(data)}</div>\n      <div data-testid=\"pagination\">Page: {pagination.current}</div>\n    </div>\n  ),\n}));\n\njest.mock('@/components/templates', () => ({\n  DashboardLayout: ({ children }: { children: React.ReactNode }) => <div>{children}</div>,\n}));\n\njest.mock('@/components/atoms', () => ({\n  Button: ({ children, onClick, ...props }: any) => (\n    <button onClick={onClick} {...props}>\n      {children}\n    </button>\n  ),\n}));\n\njest.mock('@/components/molecules', () => ({\n  SearchBar: ({ onSearch, placeholder, value, onChange }: any) => (\n    <input\n      data-testid=\"search-bar\"\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      onKeyDown={(e: any) => {\n        if (e.key === 'Enter') {\n          onSearch?.(e.target.value);\n        }\n      }}\n    />\n  ),\n}));\n\n// Mock fetch globally\nglobal.fetch = jest.fn();\n\ndescribe('ResidentsPage', () => {\n  const mockRouter = {\n    push: jest.fn(),\n  };\n\n  const mockSession = {\n    access_token: 'mock-token',\n    user: { id: '1' },\n  };\n\n  const mockUserProfile = {\n    id: '1',\n    barangay_code: '123456789',\n    role: 'barangay_admin',\n  };\n\n  const mockResidents = [\n    {\n      id: '1',\n      first_name: 'John',\n      last_name: 'Doe',\n      sex: 'male',\n      birthdate: '1990-01-01',\n      civil_status: 'Single',\n      created_at: '2023-01-01T00:00:00Z',\n      barangay_code: '123456789',\n    },\n    {\n      id: '2',\n      first_name: 'Jane',\n      last_name: 'Smith',\n      sex: 'female',\n      birthdate: '1985-05-15',\n      civil_status: 'Married',\n      created_at: '2023-01-02T00:00:00Z',\n      barangay_code: '123456789',\n    },\n  ];\n\n  const mockApiResponse = {\n    data: mockResidents,\n    total: 2,\n    page: 1,\n    pageSize: 20,\n  };\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    (useRouter as jest.Mock).mockReturnValue(mockRouter);\n    (useAuth as jest.Mock).mockReturnValue({\n      user: mockSession.user,\n      loading: false,\n      userProfile: mockUserProfile,\n    });\n\n    // Mock fetch to return success response\n    (global.fetch as jest.Mock).mockResolvedValue({\n      ok: true,\n      json: () => Promise.resolve(mockApiResponse),\n    });\n\n    // Mock supabase auth\n    const { supabase } = await import('@/lib/data/supabase');\n    (supabase.auth.getSession as jest.Mock).mockResolvedValue({\n      data: { session: mockSession },\n    });\n  });\n\n  describe.skip('Rendering', () => {\n    it('should render loading state initially', () => {\n      render(<ResidentsPage />);\n\n      expect(screen.getByTestId('data-table')).toBeInTheDocument();\n    });\n\n    it('should render residents list after loading', async () => {\n      await act(async () => {\n        render(<ResidentsPage />);\n      });\n\n      await waitFor(() => {\n        expect(screen.getByText('Residents')).toBeInTheDocument();\n      });\n\n      expect(screen.getByTestId('data-table')).toBeInTheDocument();\n      expect(screen.getByTestId('search-bar')).toBeInTheDocument();\n      expect(screen.getByText('Add new resident')).toBeInTheDocument();\n    });\n\n    it('should render error state when fetch fails', async () => {\n      (global.fetch as jest.Mock).mockRejectedValue(new Error('Failed to fetch'));\n\n      await act(async () => {\n        render(<ResidentsPage />);\n      });\n\n      await waitFor(() => {\n        expect(screen.getByTestId('data-table')).toBeInTheDocument();\n      });\n\n      // The component shows empty state when data fails to load\n      expect(screen.getByText('0 total residents')).toBeInTheDocument();\n    });\n  });\n\n  describe('Search Functionality', () => {\n    it('should handle search input', async () => {\n      const user = userEvent.setup();\n\n      render(<ResidentsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('search-bar')).toBeInTheDocument();\n      });\n\n      const searchBar = screen.getByTestId('search-bar');\n      await user.type(searchBar, 'John');\n\n      // Just verify the search bar works and accepts input\n      expect(searchBar).toHaveValue('John');\n    });\n\n    it('should reset page to 1 when searching', async () => {\n      const user = userEvent.setup();\n\n      render(<ResidentsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('search-bar')).toBeInTheDocument();\n      });\n\n      const searchBar = screen.getByTestId('search-bar');\n      await user.type(searchBar, 'test query');\n\n      // Verify search input accepts the query\n      expect(searchBar).toHaveValue('test query');\n    });\n  });\n\n  describe('Navigation', () => {\n    it('should navigate to create page when create button is clicked', async () => {\n      render(<ResidentsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Add new resident')).toBeInTheDocument();\n      });\n\n      const createLink = screen.getByText('Add new resident').closest('a');\n      expect(createLink).toHaveAttribute('href', '/residents/create');\n    });\n  });\n\n  describe('Data Display', () => {\n    it('should display correct count information', async () => {\n      render(<ResidentsPage />);\n\n      // Wait for the data to load from our mocked fetch\n      await waitFor(\n        () => {\n          expect(screen.getByText('2 total residents')).toBeInTheDocument();\n        },\n        { timeout: 3000 }\n      );\n    });\n\n    it('should display pagination information', async () => {\n      render(<ResidentsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('pagination')).toBeInTheDocument();\n        expect(screen.getByText('Page: 1')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe.skip('Error Handling', () => {\n    it('should handle data loading errors gracefully', async () => {\n      (global.fetch as jest.Mock).mockRejectedValueOnce(new Error('Network error'));\n\n      await act(async () => {\n        render(<ResidentsPage />);\n      });\n\n      await waitFor(() => {\n        expect(screen.getByTestId('data-table')).toBeInTheDocument();\n      });\n\n      // Component shows empty state on error\n      expect(screen.getByText('0 total residents')).toBeInTheDocument();\n    });\n  });\n\n  describe('Authentication', () => {\n    it('should not fetch data without session', () => {\n      (useAuth as jest.Mock).mockReturnValue({\n        user: null,\n        loading: false,\n        userProfile: null,\n      });\n\n      render(<ResidentsPage />);\n\n      // Component should render but not make API calls without user\n      expect(screen.getByTestId('data-table')).toBeInTheDocument();\n    });\n  });\n\n  describe('Pagination', () => {\n    it('should handle page changes', async () => {\n      const multiPageResponse = {\n        ...mockApiResponse,\n        total: 100,\n      };\n\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: true,\n        json: () => Promise.resolve(multiPageResponse),\n      });\n\n      render(<ResidentsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('data-table')).toBeInTheDocument();\n      });\n\n      // Just verify the table renders with pagination data\n      expect(screen.getByText('Page: 1')).toBeInTheDocument();\n    });\n  });\n\n  describe('Loading States', () => {\n    it('should show loading state initially', () => {\n      render(<ResidentsPage />);\n\n      expect(screen.getByTestId('data-table')).toBeInTheDocument();\n    });\n  });\n\n  describe.skip('Responsive Design', () => {\n    it('should render header with proper responsive layout', async () => {\n      await act(async () => {\n        render(<ResidentsPage />);\n      });\n\n      await waitFor(() => {\n        expect(screen.getByText('Residents')).toBeInTheDocument();\n      });\n\n      const header = screen.getByText('Residents').closest('div');\n      expect(header?.parentElement).toHaveClass('mb-6 flex items-start justify-between');\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/residents/page.tsx","messages":[{"ruleId":"no-alert","severity":1,"message":"Unexpected confirm.","line":173,"column":11,"nodeType":"CallExpression","messageId":"unexpected","endLine":175,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport Link from 'next/link';\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\n\nimport { DataTable, SearchBar, Button } from '@/components';\nimport type { TableColumn, TableAction } from '@/components';\nimport { AdvancedFilters as AdvancedFiltersComponent } from '@/components/molecules/AdvancedFilters/AdvancedFilters';\nimport { ErrorRecovery } from '@/components/molecules/ErrorBoundary/ErrorRecovery';\nimport {\n  useResidents,\n  useResidentFilterFields,\n  type Resident,\n  type AdvancedFilters,\n} from '@/hooks/crud/useResidents';\nimport { logger } from '@/lib/logging';\n\nfunction ResidentsContent() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedResidents, setSelectedResidents] = useState<string[]>([]);\n  const [advancedFilters, setAdvancedFilters] = useState<AdvancedFilters>({});\n  const [pagination, setPagination] = useState({\n    current: 1,\n    pageSize: 20,\n  });\n\n  // Get filter field definitions\n  const filterFields = useResidentFilterFields();\n\n  // Use React Query for data fetching with enhanced error handling\n  const {\n    residents,\n    total,\n    isLoading,\n    isFetching,\n    error,\n    prefetchNextPage,\n    retryManually,\n    clearError,\n    errorDetails,\n  } = useResidents({\n    page: pagination.current,\n    pageSize: pagination.pageSize,\n    searchTerm,\n    filters: advancedFilters,\n  });\n\n  // Note: Advanced filter functionality will be implemented in future version\n\n  // Prefetch next page when scrolling near bottom\n  useEffect(() => {\n    if (!isLoading && !isFetching) {\n      prefetchNextPage();\n    }\n  }, [prefetchNextPage, isLoading, isFetching]);\n\n  const handleSearch = useCallback((term: string) => {\n    setSearchTerm(term);\n    setPagination(prev => ({ ...prev, current: 1 }));\n  }, []);\n\n  const handleFiltersChange = useCallback((filters: AdvancedFilters) => {\n    setAdvancedFilters(filters);\n    setPagination(prev => ({ ...prev, current: 1 }));\n  }, []);\n\n  const handleSelectionChange = (selectedKeys: string[], _selectedRows: Resident[]) => {\n    setSelectedResidents(selectedKeys);\n  };\n\n  const handlePaginationChange = useCallback((page: number, pageSize: number) => {\n    setPagination({ current: page, pageSize });\n  }, []);\n\n  const formatFullName = (resident: Resident) => {\n    return [resident.first_name, resident.middle_name, resident.last_name, resident.extension_name]\n      .filter(Boolean)\n      .join(' ');\n  };\n\n  const formatAddress = (resident: Resident) => {\n    if (!resident.households) return 'No household assigned';\n    const parts = [\n      resident.households.house_number,\n      // Note: street_name and subdivision would need to be fetched separately from geo_streets and geo_subdivisions\n      // For now, just show house number\n    ].filter(Boolean);\n    return parts.length > 0 ? parts.join(', ') : 'No address';\n  };\n\n  const calculateAge = (birthdate: string) => {\n    if (!birthdate) return 'N/A';\n    const today = new Date();\n    const birth = new Date(birthdate);\n    let age = today.getFullYear() - birth.getFullYear();\n    const monthDiff = today.getMonth() - birth.getMonth();\n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\n      age--;\n    }\n    return age.toString();\n  };\n\n  // Define table columns\n  const columns: TableColumn<Resident>[] = [\n    {\n      key: 'name',\n      title: 'Name',\n      dataIndex: (record: Resident) => formatFullName(record),\n      render: (value: string, record: Resident) => (\n        <Link\n          href={`/residents/${record.id}`}\n          className=\"font-montserrat text-base font-normal text-gray-600 hover:text-gray-800 hover:underline dark:text-gray-200\"\n        >\n          {value}\n        </Link>\n      ),\n      sortable: true,\n    },\n    {\n      key: 'email',\n      title: 'Email',\n      dataIndex: 'email',\n      render: (value: string) => value || 'No email',\n      sortable: true,\n    },\n    {\n      key: 'address',\n      title: 'Address',\n      dataIndex: (record: Resident) => formatAddress(record),\n      sortable: false,\n    },\n    {\n      key: 'age',\n      title: 'Age',\n      dataIndex: (record: Resident) => calculateAge(record.birthdate),\n      sortable: true,\n    },\n    {\n      key: 'sex',\n      title: 'Sex',\n      dataIndex: 'sex',\n      render: (value: string) => (value ? value.charAt(0).toUpperCase() + value.slice(1) : 'N/A'),\n      sortable: true,\n    },\n    {\n      key: 'occupation',\n      title: 'Occupation',\n      dataIndex: (record: Resident) => record.occupation_code || 'N/A',\n      sortable: true,\n    },\n  ];\n\n  // Define table actions\n  const actions: TableAction<Resident>[] = [\n    {\n      key: 'view',\n      label: 'View',\n      href: (record: Resident) => `/residents/${record.id}`,\n      variant: 'primary',\n    },\n    {\n      key: 'edit',\n      label: 'Edit',\n      href: (record: Resident) => `/residents/${record.id}`,\n      variant: 'secondary',\n    },\n    {\n      key: 'delete',\n      label: 'Delete',\n      onClick: async (record: Resident) => {\n        if (\n          window.confirm(\n            `Are you sure you want to delete ${record.first_name} ${record.last_name}?`\n          )\n        ) {\n          try {\n            const response = await fetch(`/api/residents/${record.id}`, {\n              method: 'DELETE',\n              headers: {\n                Authorization: `Bearer ${localStorage.getItem('auth_token')}`,\n              },\n            });\n\n            if (response.ok) {\n              // Refresh the residents list\n              window.location.reload();\n            } else {\n              toast.error('Failed to delete resident');\n            }\n          } catch (error) {\n            logger.error('Delete error:', error);\n            toast.error('Error deleting resident');\n          }\n        }\n      },\n      variant: 'danger',\n    },\n  ];\n\n  // Show error recovery component if there's an error\n  if (error && !isLoading) {\n    return (\n      <div className=\"p-6\">\n        <ErrorRecovery\n          error={error}\n          errorDetails={errorDetails}\n          onRetry={retryManually}\n          onClearError={clearError}\n          title=\"Failed to load residents\"\n          showDetails={process.env.NODE_ENV === 'development'}\n          className=\"mx-auto mt-8 max-w-2xl\"\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      {/* Page Header */}\n      <div className=\"mb-6 flex items-start justify-between\">\n        <div>\n          <h1 className=\"font-montserrat mb-0.5 text-xl font-semibold text-gray-600 dark:text-gray-400\">\n            Residents\n          </h1>\n          <p className=\"font-montserrat text-sm font-normal text-gray-600 dark:text-gray-400\">\n            {total} total residents\n            {isFetching && !isLoading && (\n              <span className=\"ml-2 text-blue-600\">\n                <svg className=\"inline h-4 w-4 animate-spin\" viewBox=\"0 0 24 24\">\n                  <circle\n                    className=\"opacity-25\"\n                    cx=\"12\"\n                    cy=\"12\"\n                    r=\"10\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"4\"\n                    fill=\"none\"\n                  />\n                  <path\n                    className=\"opacity-75\"\n                    fill=\"currentColor\"\n                    d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z\"\n                  />\n                </svg>\n                Updating...\n              </span>\n            )}\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          {error && (\n            <Button variant=\"secondary\" size=\"md\" onClick={retryManually} disabled={isLoading}>\n              {isLoading ? 'Retrying...' : 'Retry'}\n            </Button>\n          )}\n          <Link href=\"/residents/create\">\n            <Button variant=\"primary\" size=\"md\">\n              Add new resident\n            </Button>\n          </Link>\n        </div>\n      </div>\n\n      {/* Search Bar */}\n      <div className=\"mb-4\">\n        <SearchBar\n          placeholder=\"Search residents by name, email, or occupation...\"\n          onSearch={handleSearch}\n          value={searchTerm}\n          onChange={e => setSearchTerm(e.target.value)}\n          className=\"w-full\"\n          disabled={isLoading && !residents.length}\n        />\n      </div>\n\n      {/* Advanced Filters */}\n      <div className=\"mb-6\">\n        <AdvancedFiltersComponent\n          fields={filterFields}\n          values={advancedFilters}\n          onChange={handleFiltersChange}\n          loading={isLoading}\n          compact={true}\n          className=\"shadow-sm\"\n        />\n      </div>\n\n      {/* Error banner for non-blocking errors */}\n      {error && residents.length > 0 && (\n        <div className=\"mb-4 rounded-lg border border-yellow-200 bg-yellow-50 p-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <svg\n                className=\"mr-2 h-5 w-5 text-yellow-600\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"\n                />\n              </svg>\n              <span className=\"text-sm text-yellow-800\">\n                Showing cached data - {errorDetails.isNetworkError ? 'connection' : 'server'} issue\n                detected\n              </span>\n            </div>\n            <div className=\"flex gap-2\">\n              <button\n                type=\"button\"\n                onClick={retryManually}\n                onKeyDown={e => e.key === 'Enter' && retryManually()}\n                className=\"text-sm text-yellow-700 underline hover:text-yellow-900 focus:ring-2 focus:ring-yellow-500 focus:outline-none\"\n                disabled={isLoading}\n                aria-label=\"Retry loading residents\"\n              >\n                Retry\n              </button>\n              <button\n                type=\"button\"\n                onClick={clearError}\n                onKeyDown={e => e.key === 'Enter' && clearError()}\n                className=\"text-sm text-yellow-700 underline hover:text-yellow-900 focus:ring-2 focus:ring-yellow-500 focus:outline-none\"\n                aria-label=\"Dismiss error message\"\n              >\n                Dismiss\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Data Table */}\n      <DataTable<Resident>\n        data={residents}\n        columns={columns}\n        actions={actions}\n        loading={isLoading}\n        pagination={{\n          current: pagination.current,\n          pageSize: pagination.pageSize,\n          total: total,\n          onChange: handlePaginationChange,\n          showSizeChanger: true,\n          pageSizeOptions: ['10', '20', '50', '100'],\n        }}\n        selection={{\n          selectedRowKeys: selectedResidents,\n          onChange: handleSelectionChange,\n        }}\n        rowKey=\"id\"\n        emptyText={\n          searchTerm\n            ? `No residents found matching \"${searchTerm}\"`\n            : 'No residents found. Click \"Add new resident\" to register your first resident.'\n        }\n        size=\"middle\"\n      />\n    </div>\n  );\n}\n\nexport default function ResidentsPage() {\n  return <ResidentsContent />;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/settings/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/settings/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/settings/page.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":223,"column":41,"nodeType":"MemberExpression","messageId":"limited","endLine":223,"endColumn":52},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":234,"column":41,"nodeType":"MemberExpression","messageId":"limited","endLine":234,"endColumn":52},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":246,"column":41,"nodeType":"MemberExpression","messageId":"limited","endLine":246,"endColumn":52},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":302,"column":45,"nodeType":"MemberExpression","messageId":"limited","endLine":302,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Settings Page\n * System configuration and administrative settings\n */\n\nimport React, { useState } from 'react';\n\nimport { Button, SelectField } from '@/components';\nimport { useTheme } from '@/contexts';\n\nexport default function SettingsPage() {\n  const { theme, actualTheme, setTheme } = useTheme();\n  const [activeTab, setActiveTab] = useState('general');\n  const [notifications, setNotifications] = useState({\n    email: true,\n    sms: false,\n    push: true,\n  });\n  const [systemSettings, setSystemSettings] = useState({\n    autoBackup: true,\n    maintenance: false,\n    debugMode: false,\n  });\n\n  const tabs = [\n    { id: 'general', name: 'General', description: 'Basic configuration' },\n    { id: 'security', name: 'Security', description: 'Authentication & policies' },\n    { id: 'database', name: 'Database', description: 'Connection & performance' },\n    { id: 'notifications', name: 'Notifications', description: 'Alerts & messaging' },\n    { id: 'users', name: 'Users', description: 'Access management' },\n    { id: 'system', name: 'System', description: 'Advanced settings' },\n  ];\n\n  return (\n    <div className=\"p-6\">\n      {/* Page Header */}\n      <div className=\"mb-6 flex items-start justify-between\">\n        <div>\n          <h1 className=\"font-montserrat mb-0.5 text-xl font-semibold text-gray-600 dark:text-gray-300\">\n            Settings\n          </h1>\n          <p className=\"font-montserrat text-sm font-normal text-gray-600 dark:text-gray-400\">\n            Configure your system preferences and administrative settings\n          </p>\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"mb-6\">\n        <div className=\"border-b border-gray-200 dark:border-gray-700\">\n          <nav className=\"flex space-x-8\">\n            {tabs.map(tab => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id)}\n                className={`font-montserrat border-b-2 px-1 py-2 text-sm font-medium whitespace-nowrap ${\n                  activeTab === tab.id\n                    ? 'border-blue-500 text-gray-600 dark:text-gray-300 dark:text-gray-700'\n                    : 'border-transparent text-gray-600 hover:border-gray-200 hover:text-gray-600 dark:text-gray-300 dark:text-gray-400 dark:text-gray-700 dark:hover:border-gray-700 dark:hover:text-gray-300'\n                }`}\n              >\n                {tab.name}\n              </button>\n            ))}\n          </nav>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"overflow-hidden rounded-sm border border-gray-200 bg-white dark:border-gray-700 dark:bg-gray-800\">\n        <div className=\"p-6\">\n          {/* General Settings */}\n          {activeTab === 'general' && (\n            <div className=\"space-y-6\">\n              <div>\n                <h3 className=\"font-montserrat mb-2 text-lg font-semibold text-gray-600 dark:text-gray-300\">\n                  General Settings\n                </h3>\n                <p className=\"font-montserrat text-sm font-normal text-gray-600 dark:text-gray-400\">\n                  Basic system configuration and preferences\n                </p>\n              </div>\n\n              {/* Theme Selection */}\n              <div className=\"space-y-4\">\n                <div>\n                  <h4 className=\"font-montserrat mb-1 text-base font-medium text-gray-600 dark:text-gray-300\">\n                    Appearance\n                  </h4>\n                  <p className=\"font-montserrat text-sm font-normal text-gray-600 dark:text-gray-400 dark:text-gray-600\">\n                    {theme === 'system'\n                      ? `Following system preference (${actualTheme})`\n                      : `Using ${theme} theme`}\n                  </p>\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-3\">\n                  {/* Light Theme */}\n                  <button\n                    onClick={() => setTheme('light')}\n                    className={`relative flex flex-col items-center rounded border p-4 transition-colors ${\n                      theme === 'light'\n                        ? 'border-blue-500 bg-blue-50'\n                        : 'border-gray-200 bg-white hover:bg-gray-50 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700'\n                    }`}\n                  >\n                    <div className=\"mb-2 flex size-8 items-center justify-center rounded-sm border border-gray-200 bg-white dark:border-gray-700 dark:bg-gray-800\">\n                      <svg\n                        className=\"size-4 text-amber-500\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                      >\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth={2}\n                          d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"\n                        />\n                      </svg>\n                    </div>\n                    <span\n                      className={`font-montserrat text-sm font-medium ${theme === 'light' ? 'text-gray-700 dark:text-gray-200 dark:text-gray-800' : 'text-gray-600 dark:text-gray-400 dark:text-gray-600'}`}\n                    >\n                      Light\n                    </span>\n                    {theme === 'light' && (\n                      <div className=\"absolute top-2 right-2 size-2 rounded-full bg-blue-500\"></div>\n                    )}\n                  </button>\n\n                  {/* Dark Theme */}\n                  <button\n                    onClick={() => setTheme('dark')}\n                    className={`relative flex flex-col items-center rounded border p-4 transition-colors ${\n                      theme === 'dark'\n                        ? 'border-blue-500 bg-blue-50'\n                        : 'border-gray-200 bg-white hover:bg-gray-50 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700'\n                    }`}\n                  >\n                    <div className=\"mb-2 flex size-8 items-center justify-center rounded-sm border border-slate-600 bg-slate-800\">\n                      <svg\n                        className=\"size-4 text-slate-300 dark:text-slate-700\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                      >\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth={2}\n                          d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\"\n                        />\n                      </svg>\n                    </div>\n                    <span\n                      className={`font-montserrat text-sm font-medium ${theme === 'dark' ? 'text-gray-700 dark:text-gray-200 dark:text-gray-800' : 'text-gray-600 dark:text-gray-400 dark:text-gray-600'}`}\n                    >\n                      Dark\n                    </span>\n                    {theme === 'dark' && (\n                      <div className=\"absolute top-2 right-2 size-2 rounded-full bg-blue-500\"></div>\n                    )}\n                  </button>\n\n                  {/* System Theme */}\n                  <button\n                    onClick={() => setTheme('system')}\n                    className={`relative flex flex-col items-center rounded border p-4 transition-colors ${\n                      theme === 'system'\n                        ? 'border-blue-500 bg-blue-50'\n                        : 'border-gray-200 bg-white hover:bg-gray-50 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700'\n                    }`}\n                  >\n                    <div className=\"mb-2 flex size-8 items-center justify-center rounded-sm border border-gray-200 bg-linear-to-br from-white to-slate-800 dark:border-gray-700 dark:from-gray-800\">\n                      <svg\n                        className=\"size-4 text-gray-600 dark:text-gray-400 dark:text-gray-600\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                      >\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth={2}\n                          d=\"M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"\n                        />\n                      </svg>\n                    </div>\n                    <span\n                      className={`font-montserrat text-sm font-medium ${theme === 'system' ? 'text-gray-700 dark:text-gray-200 dark:text-gray-800' : 'text-gray-600 dark:text-gray-400 dark:text-gray-600'}`}\n                    >\n                      System\n                    </span>\n                    {theme === 'system' && (\n                      <div className=\"absolute top-2 right-2 size-2 rounded-full bg-blue-500\"></div>\n                    )}\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"mt-6 grid grid-cols-1 gap-6 sm:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <label className=\"font-montserrat block text-sm font-medium text-gray-600 dark:text-gray-300\">\n                    System Name\n                  </label>\n                  <input\n                    type=\"text\"\n                    defaultValue=\"RBI System - Barangay Records\"\n                    className=\"block w-full rounded-sm border border-gray-200 bg-white px-3 py-2 text-gray-600 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-300\"\n                  />\n                </div>\n                <SelectField\n                  label=\"Timezone\"\n                  selectProps={{\n                    options: [\n                      { value: 'Asia/Manila', label: 'Asia/Manila (GMT+8)' },\n                      { value: 'UTC', label: 'UTC (GMT+0)' },\n                    ],\n                    placeholder: 'Select timezone',\n                    onSelect: option => console.log('Timezone:', option),\n                  }}\n                />\n                <SelectField\n                  label=\"Default Language\"\n                  selectProps={{\n                    options: [\n                      { value: 'en', label: 'English' },\n                      { value: 'fil', label: 'Filipino' },\n                    ],\n                    placeholder: 'Select language',\n                    onSelect: option => console.log('Language:', option),\n                  }}\n                />\n                <SelectField\n                  label=\"Date Format\"\n                  selectProps={{\n                    options: [\n                      { value: 'MM/DD/YYYY', label: 'MM/DD/YYYY' },\n                      { value: 'DD/MM/YYYY', label: 'DD/MM/YYYY' },\n                      { value: 'YYYY-MM-DD', label: 'YYYY-MM-DD' },\n                    ],\n                    placeholder: 'Select date format',\n                    onSelect: option => console.log('Date format:', option),\n                  }}\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Security Settings */}\n          {activeTab === 'security' && (\n            <div className=\"space-y-6\">\n              <div>\n                <h3 className=\"font-montserrat mb-2 text-lg font-semibold text-gray-600 dark:text-gray-300\">\n                  Security Settings\n                </h3>\n                <p className=\"font-montserrat text-sm font-normal text-gray-600 dark:text-gray-400\">\n                  Configure authentication and security policies\n                </p>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between rounded-sm border border-gray-200 bg-gray-50 p-4 dark:border-gray-700 dark:bg-gray-700\">\n                  <div>\n                    <h4 className=\"font-montserrat text-base font-medium text-gray-600 dark:text-gray-300\">\n                      Two-Factor Authentication\n                    </h4>\n                    <p className=\"font-montserrat mt-1 text-sm font-normal text-gray-600 dark:text-gray-400\">\n                      Require 2FA for all admin accounts\n                    </p>\n                  </div>\n                  <button\n                    type=\"button\"\n                    className=\"relative inline-flex h-6 w-11 shrink-0 cursor-pointer rounded-full border-2 border-transparent bg-blue-600 transition-colors duration-200 ease-in-out focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-hidden\"\n                  >\n                    <span className=\"inline-block size-4 translate-x-5 rounded-full bg-white shadow-sm ring-0 transition duration-200 ease-in-out dark:bg-gray-200\"></span>\n                  </button>\n                </div>\n\n                <div className=\"flex items-center justify-between rounded-sm border border-gray-200 bg-gray-50 p-4 dark:border-gray-700 dark:bg-gray-700\">\n                  <div>\n                    <h4 className=\"font-montserrat text-base font-medium text-gray-600 dark:text-gray-300\">\n                      Session Timeout\n                    </h4>\n                    <p className=\"font-montserrat mt-1 text-sm font-normal text-gray-600 dark:text-gray-400\">\n                      Automatic logout after inactivity\n                    </p>\n                  </div>\n                  <div className=\"w-48\">\n                    <SelectField\n                      selectProps={{\n                        options: [\n                          { value: '30', label: '30 minutes' },\n                          { value: '60', label: '1 hour' },\n                          { value: '120', label: '2 hours' },\n                          { value: 'never', label: 'Never' },\n                        ],\n                        placeholder: 'Select timeout',\n                        onSelect: option => console.log('Timeout:', option),\n                      }}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between rounded-sm border border-gray-200 bg-gray-50 p-4 dark:border-gray-700 dark:bg-gray-700\">\n                  <div>\n                    <h4 className=\"font-montserrat text-base font-medium text-gray-600 dark:text-gray-300\">\n                      Password Complexity\n                    </h4>\n                    <p className=\"font-montserrat mt-1 text-sm font-normal text-gray-600 dark:text-gray-400\">\n                      Enforce strong password requirements\n                    </p>\n                  </div>\n                  <button\n                    type=\"button\"\n                    className=\"relative inline-flex h-6 w-11 shrink-0 cursor-pointer rounded-full border-2 border-transparent bg-blue-600 transition-colors duration-200 ease-in-out focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-hidden\"\n                  >\n                    <span className=\"inline-block size-4 translate-x-5 rounded-full bg-white shadow-sm ring-0 transition duration-200 ease-in-out dark:bg-gray-200\"></span>\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Database Settings */}\n          {activeTab === 'database' && (\n            <div className=\"space-y-6\">\n              <div>\n                <h3 className=\"font-montserrat mb-2 text-lg font-semibold text-gray-600 dark:text-gray-300\">\n                  Database Configuration\n                </h3>\n                <p className=\"font-montserrat text-sm font-normal text-gray-600 dark:text-gray-400\">\n                  Database connection and maintenance settings\n                </p>\n              </div>\n\n              <div className=\"rounded border border-green-200 bg-green-50 p-4\">\n                <div className=\"flex items-center\">\n                  <div className=\"shrink-0\">\n                    <div className=\"flex size-8 items-center justify-center rounded-sm bg-green-500\">\n                      <div className=\"size-2 rounded-full bg-white dark:bg-gray-200\"></div>\n                    </div>\n                  </div>\n                  <div className=\"ml-3\">\n                    <h4 className=\"font-montserrat text-base font-medium text-green-900\">\n                      Database Connected\n                    </h4>\n                    <p className=\"font-montserrat text-sm font-normal text-green-700\">\n                      Successfully connected to Supabase PostgreSQL database\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n                <div className=\"rounded-sm border border-gray-200 bg-gray-50 p-4 dark:border-gray-700 dark:bg-gray-700\">\n                  <h4 className=\"font-montserrat mb-4 text-base font-medium text-gray-600 dark:text-gray-300\">\n                    Connection Status\n                  </h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"font-montserrat text-sm font-normal text-gray-600 dark:text-gray-400\">\n                        Host:\n                      </span>\n                      <span className=\"font-montserrat text-sm font-medium text-gray-600 dark:text-gray-300\">\n                        Supabase\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"font-montserrat text-sm font-normal text-gray-600 dark:text-gray-400\">\n                        Database:\n                      </span>\n                      <span className=\"font-montserrat text-sm font-medium text-gray-600 dark:text-gray-300\">\n                        postgres\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"font-montserrat text-sm font-normal text-gray-600 dark:text-gray-400\">\n                        Status:\n                      </span>\n                      <span className=\"inline-flex items-center rounded-sm bg-green-100 px-2 py-1 text-xs font-medium text-green-800\">\n                        Connected\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"rounded-sm border border-gray-200 bg-gray-50 p-4 dark:border-gray-700 dark:bg-gray-700\">\n                  <h4 className=\"font-montserrat mb-4 text-base font-medium text-gray-600 dark:text-gray-300\">\n                    Performance\n                  </h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"font-montserrat text-sm font-normal text-gray-600 dark:text-gray-400\">\n                        Avg Response:\n                      </span>\n                      <span className=\"font-montserrat text-sm font-medium text-gray-600 dark:text-gray-300\">\n                        &lt;50ms\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"font-montserrat text-sm font-normal text-gray-600 dark:text-gray-400\">\n                        Uptime:\n                      </span>\n                      <span className=\"font-montserrat text-sm font-medium text-gray-600 dark:text-gray-300\">\n                        99.9%\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"font-montserrat text-sm font-normal text-gray-600 dark:text-gray-400\">\n                        Coverage:\n                      </span>\n                      <span className=\"font-montserrat text-sm font-medium text-gray-600 dark:text-gray-300\">\n                        91.3%\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Notifications Settings */}\n          {activeTab === 'notifications' && (\n            <div className=\"space-y-6\">\n              <div>\n                <h3 className=\"font-montserrat mb-2 text-lg font-semibold text-gray-600 dark:text-gray-300\">\n                  Notification Preferences\n                </h3>\n                <p className=\"font-montserrat text-sm font-normal text-gray-600 dark:text-gray-400\">\n                  Configure how you receive system notifications\n                </p>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between rounded-sm border border-gray-200 bg-gray-50 p-4 dark:border-gray-700 dark:bg-gray-700\">\n                  <div>\n                    <h4 className=\"font-montserrat text-base font-medium text-gray-600 dark:text-gray-300\">\n                      Email Notifications\n                    </h4>\n                    <p className=\"font-montserrat text-sm font-normal text-gray-600 dark:text-gray-400 dark:text-gray-600\">\n                      Receive updates via email\n                    </p>\n                  </div>\n                  <button\n                    type=\"button\"\n                    onClick={() =>\n                      setNotifications({ ...notifications, email: !notifications.email })\n                    }\n                    className={`relative inline-flex h-6 w-11 shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-hidden ${\n                      notifications.email ? 'bg-blue-600' : 'bg-gray-300 dark:bg-gray-600'\n                    }`}\n                  >\n                    <span\n                      className={`${notifications.email ? 'translate-x-5' : 'translate-x-0'} inline-block size-4 rounded-full bg-white shadow-sm ring-0 transition duration-200 ease-in-out dark:bg-gray-200`}\n                    ></span>\n                  </button>\n                </div>\n\n                <div className=\"flex items-center justify-between rounded-sm border border-gray-200 bg-gray-50 p-4 dark:border-gray-700 dark:bg-gray-700\">\n                  <div>\n                    <h4 className=\"font-montserrat text-base font-medium text-gray-600 dark:text-gray-300\">\n                      SMS Notifications\n                    </h4>\n                    <p className=\"font-montserrat text-sm font-normal text-gray-600 dark:text-gray-400 dark:text-gray-600\">\n                      Receive urgent alerts via SMS\n                    </p>\n                  </div>\n                  <button\n                    type=\"button\"\n                    onClick={() => setNotifications({ ...notifications, sms: !notifications.sms })}\n                    className={`relative inline-flex h-6 w-11 shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-hidden ${\n                      notifications.sms ? 'bg-blue-600' : 'bg-gray-300 dark:bg-gray-600'\n                    }`}\n                  >\n                    <span\n                      className={`${notifications.sms ? 'translate-x-5' : 'translate-x-0'} inline-block size-4 rounded-full bg-white shadow-sm ring-0 transition duration-200 ease-in-out dark:bg-gray-200`}\n                    ></span>\n                  </button>\n                </div>\n\n                <div className=\"flex items-center justify-between rounded-sm border border-gray-200 bg-gray-50 p-4 dark:border-gray-700 dark:bg-gray-700\">\n                  <div>\n                    <h4 className=\"font-montserrat text-base font-medium text-gray-600 dark:text-gray-300\">\n                      Push Notifications\n                    </h4>\n                    <p className=\"font-montserrat text-sm font-normal text-gray-600 dark:text-gray-400 dark:text-gray-600\">\n                      Browser push notifications\n                    </p>\n                  </div>\n                  <button\n                    type=\"button\"\n                    onClick={() =>\n                      setNotifications({ ...notifications, push: !notifications.push })\n                    }\n                    className={`relative inline-flex h-6 w-11 shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-hidden ${\n                      notifications.push ? 'bg-blue-600' : 'bg-gray-300 dark:bg-gray-600'\n                    }`}\n                  >\n                    <span\n                      className={`${notifications.push ? 'translate-x-5' : 'translate-x-0'} inline-block size-4 rounded-full bg-white shadow-sm ring-0 transition duration-200 ease-in-out dark:bg-gray-200`}\n                    ></span>\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Users Settings */}\n          {activeTab === 'users' && (\n            <div className=\"space-y-6\">\n              <div>\n                <h3 className=\"font-montserrat mb-2 text-lg font-semibold text-gray-600 dark:text-gray-300\">\n                  User Management\n                </h3>\n                <p className=\"font-montserrat text-sm font-normal text-gray-600 dark:text-gray-400\">\n                  Manage system users and access permissions\n                </p>\n              </div>\n\n              <div className=\"rounded border border-amber-200 bg-amber-50 p-4\">\n                <div className=\"flex items-center\">\n                  <div className=\"shrink-0\">\n                    <div className=\"flex size-8 items-center justify-center rounded-sm bg-amber-500\">\n                      <div className=\"size-1 rounded-full bg-white dark:bg-gray-200\"></div>\n                      <div className=\"ml-0.5 size-1 rounded-full bg-white dark:bg-gray-200\"></div>\n                      <div className=\"ml-0.5 size-1 rounded-full bg-white dark:bg-gray-200\"></div>\n                    </div>\n                  </div>\n                  <div className=\"ml-3\">\n                    <h4 className=\"font-montserrat text-base font-medium text-amber-900\">\n                      Feature Coming Soon\n                    </h4>\n                    <p className=\"font-montserrat text-sm font-normal text-amber-700\">\n                      User management functionality will be available in the next release.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* System Settings */}\n          {activeTab === 'system' && (\n            <div className=\"space-y-6\">\n              <div>\n                <h3 className=\"font-montserrat mb-2 text-lg font-semibold text-gray-600 dark:text-gray-300\">\n                  System Settings\n                </h3>\n                <p className=\"font-montserrat text-sm font-normal text-gray-600 dark:text-gray-400\">\n                  Advanced system configuration and maintenance\n                </p>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between rounded-sm border border-gray-200 bg-gray-50 p-4 dark:border-gray-700 dark:bg-gray-700\">\n                  <div>\n                    <h4 className=\"font-montserrat text-base font-medium text-gray-600 dark:text-gray-300\">\n                      Automatic Backup\n                    </h4>\n                    <p className=\"font-montserrat text-sm font-normal text-gray-600 dark:text-gray-400 dark:text-gray-600\">\n                      Daily database backups\n                    </p>\n                  </div>\n                  <button\n                    type=\"button\"\n                    onClick={() =>\n                      setSystemSettings({\n                        ...systemSettings,\n                        autoBackup: !systemSettings.autoBackup,\n                      })\n                    }\n                    className={`relative inline-flex h-6 w-11 shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-hidden ${\n                      systemSettings.autoBackup ? 'bg-blue-600' : 'bg-gray-200'\n                    }`}\n                  >\n                    <span\n                      className={`${systemSettings.autoBackup ? 'translate-x-5' : 'translate-x-0'} inline-block size-4 rounded-full bg-white shadow-sm ring-0 transition duration-200 ease-in-out dark:bg-gray-200`}\n                    ></span>\n                  </button>\n                </div>\n\n                <div className=\"flex items-center justify-between rounded-sm border border-gray-200 bg-gray-50 p-4 dark:border-gray-700 dark:bg-gray-700\">\n                  <div>\n                    <h4 className=\"font-montserrat text-base font-medium text-gray-600 dark:text-gray-300\">\n                      Maintenance Mode\n                    </h4>\n                    <p className=\"font-montserrat text-sm font-normal text-gray-600 dark:text-gray-400 dark:text-gray-600\">\n                      Temporarily disable public access\n                    </p>\n                  </div>\n                  <button\n                    type=\"button\"\n                    onClick={() =>\n                      setSystemSettings({\n                        ...systemSettings,\n                        maintenance: !systemSettings.maintenance,\n                      })\n                    }\n                    className={`relative inline-flex h-6 w-11 shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:outline-hidden ${\n                      systemSettings.maintenance ? 'bg-red-600' : 'bg-gray-200'\n                    }`}\n                  >\n                    <span\n                      className={`${systemSettings.maintenance ? 'translate-x-5' : 'translate-x-0'} inline-block size-4 rounded-full bg-white shadow-sm ring-0 transition duration-200 ease-in-out dark:bg-gray-200`}\n                    ></span>\n                  </button>\n                </div>\n\n                <div className=\"flex items-center justify-between rounded-sm border border-gray-200 bg-gray-50 p-4 dark:border-gray-700 dark:bg-gray-700\">\n                  <div>\n                    <h4 className=\"font-montserrat text-base font-medium text-gray-600 dark:text-gray-300\">\n                      Debug Mode\n                    </h4>\n                    <p className=\"font-montserrat text-sm font-normal text-gray-600 dark:text-gray-400 dark:text-gray-600\">\n                      Enable detailed error logging\n                    </p>\n                  </div>\n                  <button\n                    type=\"button\"\n                    onClick={() =>\n                      setSystemSettings({\n                        ...systemSettings,\n                        debugMode: !systemSettings.debugMode,\n                      })\n                    }\n                    className={`relative inline-flex h-6 w-11 shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-hidden ${\n                      systemSettings.debugMode ? 'bg-blue-600' : 'bg-gray-200'\n                    }`}\n                  >\n                    <span\n                      className={`${systemSettings.debugMode ? 'translate-x-5' : 'translate-x-0'} inline-block size-4 rounded-full bg-white shadow-sm ring-0 transition duration-200 ease-in-out dark:bg-gray-200`}\n                    ></span>\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"border-t border-gray-300 pt-6 dark:border-gray-600\">\n                <Button variant=\"danger\" size=\"md\">\n                  Reset System Settings\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {/* Save Button */}\n          <div className=\"border-t border-gray-300 pt-8 dark:border-gray-600\">\n            <div className=\"flex justify-end\">\n              <Button variant=\"primary\" size=\"md\">\n                Save Changes\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/slow-page/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/(dashboard)/test-loading/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":9,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Test Loading Page\n *\n * Simple page to test skeleton loading with artificial delay\n */\n\n'use client';\n\nimport { useEffect, useState } from 'react';\n\nexport default function TestLoadingPage() {\n  // No loading state - page loads immediately to show the difference\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6 flex items-start justify-between\">\n        <div>\n          <h1 className=\"mb-2 text-2xl font-semibold text-gray-600 dark:text-gray-400\">\n            Test Loading Page\n          </h1>\n          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n            This page demonstrates the skeleton loading functionality\n          </p>\n        </div>\n        <button className=\"rounded bg-blue-600 px-4 py-2 text-white\">Test Action</button>\n      </div>\n\n      {/* Content */}\n      <div className=\"rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800\">\n        <h2 className=\"mb-4 text-lg font-medium text-gray-600 dark:text-gray-400\">\n          Content Loaded!\n        </h2>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          This page loads immediately - you see the skeleton during page navigation!\n        </p>\n        <p className=\"mt-4 text-sm text-gray-500 dark:text-gray-500\">\n          To see the skeleton: navigate between pages or use slow network throttling.\n        </p>\n      </div>\n\n      {/* Sample table */}\n      <div className=\"mt-8 overflow-hidden rounded-lg border border-gray-200 bg-white dark:border-gray-700 dark:bg-gray-800\">\n        <div className=\"border-b border-gray-200 bg-gray-50 px-6 py-4 dark:border-gray-700 dark:bg-gray-700\">\n          <h3 className=\"text-lg font-medium text-gray-600 dark:text-gray-400\">Sample Data</h3>\n        </div>\n        <div className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n          {Array.from({ length: 5 }).map((_, i) => (\n            <div key={i} className=\"flex items-center justify-between px-6 py-4\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex h-8 w-8 items-center justify-center rounded-full bg-blue-100\">\n                  <span className=\"text-sm font-medium text-blue-600\">{i + 1}</span>\n                </div>\n                <div>\n                  <div className=\"font-medium text-gray-600 dark:text-gray-400\">Item {i + 1}</div>\n                  <div className=\"text-sm text-gray-500 dark:text-gray-500\">Sample description</div>\n                </div>\n              </div>\n              <button className=\"text-sm text-blue-600 hover:text-blue-800\">View</button>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/addresses/barangays/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/addresses/cities/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/addresses/provinces/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/addresses/regions/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/addresses/streets/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/addresses/subdivisions/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/admin/users/route.ts","messages":[{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":99},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2598,2601],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2598,2601],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4275,4278],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4275,4278],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":153,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5156,5159],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5156,5159],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":243,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7959,7962],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7959,7962],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":278,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":278,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8965,8968],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8965,8968],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":286,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9274,9277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9274,9277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":287,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":287,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9328,9331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9328,9331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n\nimport { createPublicSupabaseClient, createAdminSupabaseClient } from '@/lib/data/client-factory';\n\n// CreateUserData moved to src/types/api-requests.ts for consolidation\nimport type { CreateUserData } from '@/types/api-requests';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const rawData = await request.json();\n\n    // Type the userData properly\n    const userData: CreateUserData = {\n      email: rawData.email,\n      password: rawData.password,\n      firstName: rawData.firstName,\n      lastName: rawData.lastName,\n      mobileNumber: rawData.mobileNumber,\n      barangayCode: rawData.barangayCode,\n      roleId: rawData.roleId,\n    };\n\n    // Get auth header from the request\n    const authHeader = request.headers.get('Authorization') || request.headers.get('authorization');\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json({ error: 'Unauthorized - No auth token' }, { status: 401 });\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    // Create regular client to verify user\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n    const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n\n    if (!supabaseUrl || !supabaseAnonKey) {\n      return NextResponse.json({ error: 'Missing Supabase configuration' }, { status: 500 });\n    }\n\n    const supabase = createPublicSupabaseClient();\n\n    // Verify the user token and check admin permissions\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser(token);\n\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n    }\n\n    // Use service role client to bypass RLS\n    const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\n    if (!serviceRoleKey) {\n      return NextResponse.json(\n        { error: 'Missing service role key configuration' },\n        { status: 500 }\n      );\n    }\n\n    const supabaseAdmin = createAdminSupabaseClient();\n\n    // Check if current user has admin permissions\n    const { data: userProfile, error: profileError } = await supabaseAdmin\n      .from('auth_user_profiles')\n      .select('role_id')\n      .eq('id', user.id)\n      .single();\n\n    if (profileError || !userProfile) {\n      return NextResponse.json({ error: 'User profile not found' }, { status: 400 });\n    }\n\n    // Get the role name separately\n    const { data: userRole, error: roleError } = await supabaseAdmin\n      .from('roles')\n      .select('name')\n      .eq('id', (userProfile as any).role_id)\n      .single();\n\n    if (roleError || !userRole) {\n      return NextResponse.json({ error: 'User role not found' }, { status: 400 });\n    }\n\n    // Check if user has admin role (assuming 'admin' or 'super_admin' role names)\n    const roleName = (userRole as { name: string }).name;\n    if (!roleName || !['admin', 'super_admin'].includes(roleName)) {\n      return NextResponse.json(\n        { error: 'Insufficient permissions - Admin role required' },\n        { status: 403 }\n      );\n    }\n\n    // Create the new user account via Supabase Admin API\n    const { data: newUser, error: createUserError } = await supabaseAdmin.auth.admin.createUser({\n      email: userData.email,\n      password: userData.password,\n      email_confirm: true, // Auto-confirm email for admin-created users\n    });\n\n    if (createUserError) {\n      console.error('User creation error:', createUserError);\n      return NextResponse.json({ error: 'Failed to create user account' }, { status: 500 });\n    }\n\n    if (!newUser.user) {\n      return NextResponse.json(\n        { error: 'User creation failed - no user returned' },\n        { status: 500 }\n      );\n    }\n\n    // Create user profile\n    const profileData = {\n      id: newUser.user.id,\n      email: userData.email,\n      first_name: userData.firstName,\n      last_name: userData.lastName,\n      phone: userData.mobileNumber || null,\n      barangay_code: userData.barangayCode || null,\n      role_id: userData.roleId,\n      is_active: true,\n      created_at: new Date().toISOString(),\n    } as const;\n\n    const { error: profileInsertError } = await supabaseAdmin\n      .from('auth_user_profiles')\n      .insert(profileData as any);\n\n    if (profileInsertError) {\n      console.error('Profile creation error:', profileInsertError);\n      // Try to clean up the created user account (best-effort)\n      try {\n        await supabaseAdmin.auth.admin.deleteUser(newUser.user.id);\n      } catch (cleanupErr) {\n        console.warn('Cleanup failed (deleteUser):', cleanupErr);\n      }\n      return NextResponse.json({ error: 'Failed to create user profile' }, { status: 500 });\n    }\n\n    // Create barangay account if specified\n    if (userData.barangayCode) {\n      const barangayAccountData = {\n        user_id: newUser.user.id,\n        barangay_code: userData.barangayCode,\n        is_primary: true,\n        created_at: new Date().toISOString(),\n      } as const;\n\n      const { error: barangayAccountError } = await supabaseAdmin\n        .from('auth_barangay_accounts')\n        .insert(barangayAccountData as any);\n\n      if (barangayAccountError) {\n        console.warn('Barangay account creation failed:', barangayAccountError);\n        // Don't fail the entire operation, just log the warning\n      }\n    }\n\n    return NextResponse.json(\n      {\n        user: {\n          id: newUser.user.id,\n          email: newUser.user.email,\n          profile: profileData,\n        },\n        message: 'User created successfully',\n      },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error('Admin user creation API error:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const page = Math.max(1, Number.parseInt(searchParams.get('page') || '1', 10) || 1);\n    const pageSize = Math.min(\n      100,\n      Math.max(1, Number.parseInt(searchParams.get('pageSize') || '20', 10) || 20)\n    );\n\n    // Get auth header from the request\n    const authHeader = request.headers.get('Authorization') || request.headers.get('authorization');\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json({ error: 'Unauthorized - No auth token' }, { status: 401 });\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    // Create regular client to verify user\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n    const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n\n    if (!supabaseUrl || !supabaseAnonKey) {\n      return NextResponse.json({ error: 'Missing Supabase configuration' }, { status: 500 });\n    }\n\n    const supabase = createPublicSupabaseClient();\n\n    // Verify the user token\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser(token);\n\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n    }\n\n    // Use service role client to bypass RLS\n    const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\n    if (!serviceRoleKey) {\n      return NextResponse.json(\n        { error: 'Missing service role key configuration' },\n        { status: 500 }\n      );\n    }\n\n    const supabaseAdmin = createAdminSupabaseClient();\n\n    // Check if current user has admin permissions\n    const { data: userProfile, error: profileError } = await supabaseAdmin\n      .from('auth_user_profiles')\n      .select('role_id')\n      .eq('id', user.id)\n      .single();\n\n    if (profileError || !userProfile) {\n      return NextResponse.json({ error: 'User profile not found' }, { status: 400 });\n    }\n\n    // Get the role name separately\n    const { data: userRole, error: roleError } = await supabaseAdmin\n      .from('roles')\n      .select('name')\n      .eq('id', (userProfile as any).role_id)\n      .single();\n\n    if (roleError || !userRole) {\n      return NextResponse.json({ error: 'User role not found' }, { status: 400 });\n    }\n\n    // Check if user has admin role\n    const roleName = (userRole as { name: string }).name;\n    if (!roleName || !['admin', 'super_admin'].includes(roleName)) {\n      return NextResponse.json(\n        { error: 'Insufficient permissions - Admin role required' },\n        { status: 403 }\n      );\n    }\n\n    // Get users list with pagination\n    const {\n      data: users,\n      error: usersError,\n      count,\n    } = await supabaseAdmin\n      .from('auth_user_profiles')\n      .select(\n        `\n        *,\n        barangay_accounts(barangay_code)\n        `,\n        { count: 'exact' }\n      )\n      .order('created_at', { ascending: false })\n      .range((page - 1) * pageSize, page * pageSize - 1);\n\n    // If we got users, fetch their role names separately\n    if (users && users.length > 0) {\n      const roleIds = Array.from(new Set((users as any[]).map(u => u.role_id).filter(Boolean)));\n      if (roleIds.length > 0) {\n        const { data: rolesData } = await supabaseAdmin\n          .from('auth_roles')\n          .select('id, name')\n          .in('id', roleIds);\n\n        if (rolesData) {\n          const roleMap = Object.fromEntries((rolesData as any[]).map(r => [r.id, r.name]));\n          (users as any[]).forEach(user => {\n            user.role_name = user.role_id ? roleMap[user.role_id] : null;\n          });\n        }\n      }\n    }\n\n    if (usersError) {\n      console.error('Users query error:', usersError);\n      return NextResponse.json({ error: 'Failed to fetch users' }, { status: 500 });\n    }\n\n    return NextResponse.json({\n      data: users || [],\n      total: count || 0,\n      page,\n      pageSize,\n      totalPages: Math.ceil((count || 0) / pageSize),\n    });\n  } catch (error) {\n    console.error('Admin users list API error:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/auth/assign-role/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/auth/check-barangay-admin/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/auth/create-profile-fallback/route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":34,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":34,"endColumn":16,"suggestions":[{"fix":{"range":[1170,1253],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":35,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":35,"endColumn":16,"suggestions":[{"fix":{"range":[1258,1368],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1675,1678],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1675,1678],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":74,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":74,"endColumn":16,"suggestions":[{"fix":{"range":[2507,2585],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n\nimport { createAdminSupabaseClient } from '@/lib';\nimport type { CreateProfileRequest } from '@/types/api-requests';\n\n// CreateProfileRequest moved to src/types/api-requests.ts for consolidation\n\n/**\n * Fallback profile creation endpoint that bypasses strict user verification\n * Used when main endpoint fails due to timing/propagation issues\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const requestData: CreateProfileRequest = await request.json();\n\n    // Validate required fields\n    const { id, email, first_name, last_name, role_id } = requestData;\n    if (!id || !email || !first_name || !last_name || !role_id) {\n      return NextResponse.json(\n        {\n          error: 'Missing required fields',\n          required: ['id', 'email', 'first_name', 'last_name', 'role_id'],\n        },\n        { status: 400 }\n      );\n    }\n\n    // Validate UUID format\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    if (!uuidRegex.test(id)) {\n      return NextResponse.json({ error: 'Invalid user ID format' }, { status: 400 });\n    }\n\n    console.log('🔄 Fallback profile creation for user:', { id: '[REDACTED]', email });\n    console.log(\n      '⚠️ FALLBACK MODE: Skipping user existence check - proceeding with profile creation'\n    );\n\n    // Create profile regardless of user lookup result\n    // The foreign key constraint will catch any real issues\n    const supabaseAdmin = createAdminSupabaseClient();\n    const { data: profile, error: profileError } = await supabaseAdmin\n      .from('auth_user_profiles')\n      .upsert(requestData as any, {\n        onConflict: 'id',\n      })\n      .select()\n      .single();\n\n    if (profileError) {\n      console.error('Fallback profile creation error:', {\n        error: profileError,\n        requestData: { ...requestData, id: '[REDACTED]' },\n      });\n\n      // Check if it's a foreign key error (user doesn't exist)\n      if (profileError.code === '23503') {\n        return NextResponse.json(\n          {\n            error: 'User account not found. Please wait a moment and try again.',\n            code: 'USER_NOT_PROPAGATED',\n            details: 'The user account may still be propagating in the system.',\n          },\n          { status: 422 }\n        );\n      }\n\n      return NextResponse.json(\n        { error: 'Could not create user profile', details: profileError.message },\n        { status: 500 }\n      );\n    }\n\n    console.log('✅ Fallback profile created successfully:', { id: '[REDACTED]' });\n\n    return NextResponse.json({\n      profile,\n      message: 'Profile created successfully (fallback)',\n      note: 'Created without user verification due to timing issues',\n    });\n  } catch (error) {\n    console.error('Fallback API error:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/auth/create-profile/route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":39,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":39,"endColumn":16,"suggestions":[{"fix":{"range":[1405,1490],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1727,1730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1727,1730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n\nimport { createAdminSupabaseClient } from '@/lib';\nimport type { CreateProfileRequest } from '@/types/api-requests';\n// Note: These imports are available for future error handling enhancements\n// import { getErrorMessage, getStatusCodeForError, DatabaseResponse } from '@/lib/auth-errors';\n\n// CreateProfileRequest moved to src/types/api-requests.ts for consolidation\n\nexport async function POST(request: NextRequest) {\n  try {\n    const requestData: CreateProfileRequest = await request.json();\n\n    // Validate required fields\n    const { id, email, first_name, last_name, role_id } = requestData;\n    if (!id || !email || !first_name || !last_name || !role_id) {\n      return NextResponse.json(\n        {\n          error: 'Missing required fields',\n          required: ['id', 'email', 'first_name', 'last_name', 'role_id'],\n        },\n        { status: 400 }\n      );\n    }\n\n    // Validate UUID format before calling database function\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    if (!uuidRegex.test(id)) {\n      console.error('Invalid UUID format:', { id: '[REDACTED]', format: typeof id });\n      return NextResponse.json(\n        {\n          error: 'Invalid user ID format',\n          details: 'User ID must be a valid UUID',\n        },\n        { status: 400 }\n      );\n    }\n\n    console.log('Creating profile for newly created user:', { id: '[REDACTED]', email });\n\n    // Create user profile using service role\n    const supabaseAdmin = createAdminSupabaseClient();\n    const { data: profile, error: profileError } = await supabaseAdmin\n      .from('auth_user_profiles')\n      .upsert(requestData as any, {\n        onConflict: 'id',\n      })\n      .select()\n      .single();\n\n    if (profileError) {\n      console.error('Profile creation error:', {\n        error: profileError,\n        requestData: { ...requestData, id: '[REDACTED]' },\n      });\n      return NextResponse.json(\n        { error: 'Could not create user profile', details: profileError.message },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      profile,\n      message: 'Profile created successfully',\n    });\n  } catch (error) {\n    console.error('API error:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/auth/process-notifications/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[428,431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[428,431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1511,1514],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1511,1514],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2010,2013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2010,2013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3532,3535],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3532,3535],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4317,4320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4317,4320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":225,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":225,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6802,6805],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6802,6805],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n\nimport { createAdminSupabaseClient } from '@/lib';\nimport type { NotificationRecord } from '@/types/api-requests';\n\n// NotificationRecord moved to src/types/api-requests.ts for consolidation\n\nexport async function POST(_request: NextRequest) {\n  try {\n    console.warn('🔄 Processing pending notifications...');\n\n    const supabaseAdmin = createAdminSupabaseClient() as any;\n    const notifications = await fetchPendingNotifications(supabaseAdmin);\n\n    if (!notifications) {\n      return NextResponse.json({ error: 'Failed to fetch notifications' }, { status: 500 });\n    }\n\n    const results = {\n      processed: 0,\n      failed: 0,\n      total: notifications.length,\n    };\n\n    if (notifications.length === 0) {\n      return NextResponse.json({\n        message: 'No pending notifications',\n        results,\n      });\n    }\n\n    console.warn(`📧 Processing ${notifications.length} notifications...`);\n\n    for (const notification of notifications) {\n      await processNotification(notification as NotificationRecord, supabaseAdmin, results);\n    }\n\n    console.warn(`📊 Notification processing complete:`, results);\n\n    return NextResponse.json({\n      message: 'Notifications processed',\n      results,\n    });\n  } catch (error) {\n    console.error('Notification processing error:', error);\n    return NextResponse.json({ error: 'Failed to process notifications' }, { status: 500 });\n  }\n}\n\nasync function fetchPendingNotifications(supabaseAdmin: any) {\n  const { data: notifications, error } = await supabaseAdmin\n    .from('user_notifications')\n    .select('*')\n    .eq('status', 'pending')\n    .lt('retry_count', 3)\n    .lte('scheduled_for', new Date().toISOString())\n    .order('created_at', { ascending: true })\n    .limit(10);\n\n  if (error) {\n    console.error('Failed to fetch notifications:', error);\n    return null;\n  }\n\n  return notifications || [];\n}\n\nasync function processNotification(\n  notif: NotificationRecord,\n  supabaseAdmin: any,\n  results: { processed: number; failed: number; total: number }\n) {\n  try {\n    const { success, errorMessage } = await sendNotification(notif);\n    await updateNotificationStatus(notif, supabaseAdmin, success, errorMessage);\n\n    if (success) {\n      results.processed++;\n      console.warn(`✅ ${notif.notification_type} sent to user ${notif.user_id}`);\n    } else {\n      results.failed++;\n      console.error(\n        `❌ ${notif.notification_type} failed for user ${notif.user_id}: ${errorMessage}`\n      );\n    }\n  } catch (error) {\n    results.failed++;\n    const errorMsg = error instanceof Error ? error.message : 'Unknown error';\n    console.error(`❌ Failed to process notification ${notif.id}:`, errorMsg);\n    await updateNotificationRetry(notif, supabaseAdmin, errorMsg);\n  }\n}\n\nasync function sendNotification(\n  notif: NotificationRecord\n): Promise<{ success: boolean; errorMessage: string }> {\n  switch (notif.notification_type) {\n    case 'welcome_email': {\n      const emailSuccess = await sendWelcomeEmail(notif);\n      return { success: emailSuccess, errorMessage: '' };\n    }\n    case 'sms_welcome': {\n      const smsSuccess = await sendWelcomeSMS(notif);\n      return { success: smsSuccess, errorMessage: '' };\n    }\n    default: {\n      const errorMessage = `Unknown notification type: ${notif.notification_type}`;\n      console.warn(errorMessage);\n      return { success: false, errorMessage };\n    }\n  }\n}\n\nasync function updateNotificationStatus(\n  notif: NotificationRecord,\n  supabaseAdmin: any,\n  success: boolean,\n  errorMessage: string\n) {\n  const updateData = success\n    ? {\n        status: 'sent',\n        sent_at: new Date().toISOString(),\n        error_message: null,\n      }\n    : {\n        status: 'failed',\n        retry_count: notif.retry_count + 1,\n        error_message: errorMessage || 'Processing failed',\n        scheduled_for: new Date(Date.now() + (notif.retry_count + 1) * 60000).toISOString(),\n      };\n\n  const { error: updateNotifError } = await supabaseAdmin\n    .from('user_notifications')\n    .update(updateData)\n    .eq('id', notif.id);\n\n  if (updateNotifError) {\n    console.error(`❌ Failed to update notification ${notif.id} status:`, updateNotifError);\n  }\n}\n\nasync function updateNotificationRetry(\n  notif: NotificationRecord,\n  supabaseAdmin: any,\n  errorMsg: string\n) {\n  const { error: retryUpdateError } = await supabaseAdmin\n    .from('user_notifications')\n    .update({\n      retry_count: notif.retry_count + 1,\n      error_message: errorMsg,\n      scheduled_for: new Date(Date.now() + (notif.retry_count + 1) * 60000).toISOString(),\n    })\n    .eq('id', notif.id);\n\n  if (retryUpdateError) {\n    console.error(`❌ Failed to bump retry_count for ${notif.id}:`, retryUpdateError);\n  }\n}\n\nasync function sendWelcomeEmail(notification: NotificationRecord): Promise<boolean> {\n  try {\n    const { email, first_name, role_name } = notification.metadata;\n\n    console.warn(`📧 Sending welcome email to ${email} (${first_name}, ${role_name})`);\n\n    // In a real implementation, you would integrate with:\n    // - SendGrid, Mailgun, AWS SES, or similar email service\n    // - Use email templates\n    // - Handle bounces and delivery tracking\n\n    // For now, just simulate success and log\n    const emailContent = {\n      to: email,\n      subject: `Welcome to RBI System, ${first_name}!`,\n      template: 'welcome-email',\n      data: {\n        firstName: first_name,\n        role: role_name,\n        loginUrl: `${process.env.NEXT_PUBLIC_APP_URL}/login`,\n        dashboardUrl: `${process.env.NEXT_PUBLIC_APP_URL}/dashboard`,\n      },\n    };\n\n    console.warn('📧 Email content:', emailContent);\n\n    // Email service integration pending - currently returns success\n    return true;\n  } catch (error) {\n    console.error('Welcome email error:', error);\n    return false;\n  }\n}\n\nasync function sendWelcomeSMS(notification: NotificationRecord): Promise<boolean> {\n  try {\n    const { phone, first_name } = notification.metadata;\n\n    console.warn(`📱 Sending welcome SMS to ${phone} (${first_name})`);\n\n    // In a real implementation, you would integrate with:\n    // - Twilio, AWS SNS, or similar SMS service\n    // - Handle delivery receipts\n    // - Manage opt-outs\n\n    const smsContent = {\n      to: phone,\n      message: `Welcome to RBI System, ${first_name}! Your account is now active. Visit ${process.env.NEXT_PUBLIC_APP_URL}/login to get started.`,\n    };\n\n    console.warn('📱 SMS content:', smsContent);\n\n    // SMS service integration pending - currently returns success\n    return true;\n  } catch (error) {\n    console.error('Welcome SMS error:', error);\n    return false;\n  }\n}\n\n// GET endpoint to check notification status\nexport async function GET() {\n  try {\n    const supabaseAdmin = createAdminSupabaseClient() as any;\n    const { data: stats, error } = await supabaseAdmin\n      .from('user_notifications')\n      .select('status, notification_type')\n      .order('created_at', { ascending: false })\n      .limit(100);\n\n    if (error) {\n      return NextResponse.json({ error: 'Failed to fetch stats' }, { status: 500 });\n    }\n\n    const summary =\n      stats?.reduce(\n        (acc: Record<string, number>, notif: { notification_type: string; status: string }) => {\n          const key = `${notif.notification_type}_${notif.status}`;\n          acc[key] = (acc[key] || 0) + 1;\n          return acc;\n        },\n        {}\n      ) || {};\n\n    return NextResponse.json({\n      message: 'Notification stats',\n      summary,\n      total: stats?.length || 0,\n    });\n  } catch {\n    return NextResponse.json({ error: 'Failed to get stats' }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/auth/profile/route.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":40,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":40,"endColumn":44},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":41,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":41,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2288,2291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2288,2291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2436,2439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2436,2439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@supabase/supabase-js';\nimport { NextRequest } from 'next/server';\n\nimport { createAdminSupabaseClient } from '@/lib';\nimport {\n  createSuccessResponse,\n  createUnauthorizedResponse,\n  createNotFoundResponse,\n  handleDatabaseError,\n  handleUnexpectedError,\n} from '@/lib/authentication/responseUtils';\n\n/**\n * GET API Handler for auth/profile\n *\n * @description Handles GET requests for the auth/profile endpoint\n * @param {NextRequest} request - The incoming HTTP request object\n * @returns {Promise<NextResponse>} JSON response with data or error message\n *\n * @example\n * ```typescript\n * // GET /auth/profile\n * const response = await fetch('/auth/profile', { method: 'GET' });\n * const data = await response.json();\n * ```\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Get auth header from the request\n    const authHeader = request.headers.get('Authorization') || request.headers.get('authorization');\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return createUnauthorizedResponse('No auth token provided. Please log in again.');\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    // Create regular client to verify user\n    const supabase = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n    );\n\n    // Verify the user token\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser(token);\n\n    if (authError || !user) {\n      return createUnauthorizedResponse('Invalid or expired token. Please log in again.');\n    }\n\n    // Use service role client to bypass RLS for this specific query\n    // This is safe because we've already verified the user's authentication\n    const supabaseAdmin = createAdminSupabaseClient();\n\n    // Fetch user profile with service role (bypasses RLS)\n    const { data: profileData, error: profileError } = await supabaseAdmin\n      .from('auth_user_profiles')\n      .select('*')\n      .eq('id', user.id)\n      .single();\n\n    if (profileError) {\n      return await handleDatabaseError(profileError);\n    }\n\n    if (!profileData) {\n      return createNotFoundResponse('Profile');\n    }\n\n    // Fetch role separately if needed\n    let roleData = null;\n    if ((profileData as any).role_id) {\n      const { data: role } = await supabaseAdmin\n        .from('auth_roles')\n        .select('*')\n        .eq('id', (profileData as any).role_id)\n        .single();\n\n      roleData = role;\n    }\n\n    return createSuccessResponse(\n      {\n        profile: profileData,\n        role: roleData,\n      },\n      'Profile retrieved successfully'\n    );\n  } catch (error) {\n    return await handleUnexpectedError(error instanceof Error ? error : new Error(String(error)));\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/auth/test-profile/route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":15,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":15,"endColumn":16,"suggestions":[{"fix":{"range":[437,512],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2901,2904],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2901,2904],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n\nimport { createAdminSupabaseClient } from '@/lib';\nimport type { ProfileTestResults as TestResults } from '@/types/api-requests';\n\n/**\n * Test endpoint to diagnose profile creation issues\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const supabaseAdmin = createAdminSupabaseClient();\n    const body = await request.json();\n    const { userId } = body;\n\n    console.log('🧪 Testing profile creation for user:', { id: '[REDACTED]' });\n\n    const results: TestResults = {\n      timestamp: new Date().toISOString(),\n      userId: '[REDACTED]',\n      tests: {},\n    };\n\n    // Test 1: Admin client user lookup\n    try {\n      const { data: userData, error: userError } =\n        await supabaseAdmin.auth.admin.getUserById(userId);\n      results.tests.adminUserLookup = {\n        success: !!userData?.user,\n        hasData: !!userData,\n        hasUser: !!userData?.user,\n        error: userError?.message || null,\n        confirmed: userData?.user?.email_confirmed_at ? true : false,\n      };\n    } catch (error) {\n      results.tests.adminUserLookup = {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n\n    // Test 2: List all users to see if user exists\n    try {\n      const { data: allUsers, error: listError } = await supabaseAdmin.auth.admin.listUsers();\n      const userInList = allUsers?.users?.find(u => u.id === userId);\n      results.tests.userInList = {\n        success: !listError,\n        totalUsers: allUsers?.users?.length || 0,\n        userFound: !!userInList,\n        error: listError?.message || null,\n      };\n    } catch (error) {\n      results.tests.userInList = {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n\n    // Test 3: Check if profile already exists\n    try {\n      const { data: existingProfile, error: profileError } = await supabaseAdmin\n        .from('auth_user_profiles')\n        .select('*')\n        .eq('id', userId)\n        .maybeSingle();\n\n      results.tests.existingProfile = {\n        success: !profileError,\n        profileExists: !!existingProfile,\n        error: profileError?.message || null,\n      };\n    } catch (error) {\n      results.tests.existingProfile = {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n\n    // Test 4: Try to create minimal profile\n    try {\n      const minimalProfile = {\n        id: userId,\n        email: 'test@example.com',\n        first_name: 'Test',\n        last_name: 'User',\n        role_id: '3fd5bb4b-0f55-4e96-aa9f-69a63e783cc6', // barangay_admin from debug output\n        is_active: true,\n      };\n\n      const { data: createdProfile, error: createError } = await supabaseAdmin\n        .from('auth_user_profiles')\n        .upsert(minimalProfile as any)\n        .select()\n        .single();\n\n      results.tests.profileCreation = {\n        success: !createError,\n        profileCreated: !!createdProfile,\n        error: createError?.message || null,\n        errorCode: createError?.code || null,\n      };\n    } catch (error) {\n      results.tests.profileCreation = {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n\n    return NextResponse.json({\n      message: 'Profile creation test completed',\n      results,\n    });\n  } catch (error) {\n    console.error('Test API error:', error);\n    return NextResponse.json(\n      {\n        error: 'Test API error',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/auth/webhook/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[560,563],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[560,563],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":57,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":57,"endColumn":16,"suggestions":[{"fix":{"range":[2137,2275],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":91,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":91,"endColumn":20,"suggestions":[{"fix":{"range":[3296,3351],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":110,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":110,"endColumn":16,"suggestions":[{"fix":{"range":[3901,3954],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":134,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":134,"endColumn":18,"suggestions":[{"fix":{"range":[4641,4717],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":141,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4889,4892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4889,4892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":143,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":143,"endColumn":14,"suggestions":[{"fix":{"range":[4953,4999],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":147,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":147,"endColumn":16,"suggestions":[{"fix":{"range":[5115,5176],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":156,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5408,5411],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5408,5411],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":166,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":166,"endColumn":18,"suggestions":[{"fix":{"range":[5780,5848],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":172,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":172,"endColumn":18,"suggestions":[{"fix":{"range":[6012,6082],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":208,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6999,7002],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6999,7002],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":209,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7081,7084],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7081,7084],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":217,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":217,"endColumn":18,"suggestions":[{"fix":{"range":[7356,7421],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":224,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7595,7598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7595,7598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":254,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8354,8357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8354,8357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":278,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":278,"endColumn":18,"suggestions":[{"fix":{"range":[8944,9010],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import crypto from 'crypto';\n\nimport type { SupabaseClient } from '@supabase/supabase-js';\nimport { NextRequest, NextResponse } from 'next/server';\n\nimport { createAdminSupabaseClient } from '@/lib';\nimport type { WebhookPayload } from '@/types/api-requests';\nimport { WebhookUserRecord } from '@/types/auth';\n\n// Webhook secret for verifying Supabase webhook signatures\nconst WEBHOOK_SECRET = process.env.SUPABASE_WEBHOOK_SECRET || 'dev-webhook-secret';\n\n// WebhookPayload moved to src/types/api-requests.ts for consolidation\n\nfunction isWebhookUserRecord(v: any): v is WebhookUserRecord {\n  return (\n    !!v &&\n    typeof v.id === 'string' &&\n    typeof v.email === 'string' &&\n    (v.email_confirmed_at === null || typeof v.email_confirmed_at === 'string') &&\n    typeof v.created_at === 'string'\n  );\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const supabaseAdmin = createAdminSupabaseClient();\n    const body = await request.text();\n    const signature = request.headers.get('x-webhook-signature');\n\n    // Verify webhook signature in production (fail closed)\n    if (process.env.NODE_ENV === 'production') {\n      if (!signature) {\n        console.error('Missing webhook signature');\n        return NextResponse.json({ error: 'Missing signature' }, { status: 401 });\n      }\n      if (!process.env.SUPABASE_WEBHOOK_SECRET || WEBHOOK_SECRET === 'dev-webhook-secret') {\n        console.error('Webhook secret not configured in production');\n        return NextResponse.json({ error: 'Server misconfiguration' }, { status: 500 });\n      }\n      const expectedSignature = crypto\n        .createHmac('sha256', WEBHOOK_SECRET)\n        .update(body)\n        .digest('hex');\n\n      // Timing-safe comparison\n      const sigBuf = Buffer.from(signature, 'hex');\n      const expBuf = Buffer.from(expectedSignature, 'hex');\n      if (sigBuf.length !== expBuf.length || !crypto.timingSafeEqual(sigBuf, expBuf)) {\n        console.error('Invalid webhook signature');\n        return NextResponse.json({ error: 'Invalid signature' }, { status: 401 });\n      }\n    }\n\n    const payload: WebhookPayload = JSON.parse(body);\n\n    console.log('🔄 Auth webhook received:', {\n      type: payload.type,\n      table: payload.table,\n      userId: payload.record?.id,\n    });\n\n    // Handle different webhook events\n    switch (payload.type) {\n      case 'UPDATE':\n        if (payload.table === 'users' && payload.schema === 'auth') {\n          if (\n            !isWebhookUserRecord(payload.record) ||\n            !isWebhookUserRecord(payload.old_record ?? payload.record)\n          ) {\n            return NextResponse.json({ error: 'Invalid user record payload' }, { status: 400 });\n          }\n          await handleUserUpdate(\n            supabaseAdmin,\n            payload.record as WebhookUserRecord,\n            (payload.old_record ?? payload.record) as unknown as WebhookUserRecord\n          );\n        }\n        break;\n\n      case 'INSERT':\n        if (payload.table === 'users' && payload.schema === 'auth') {\n          if (!isWebhookUserRecord(payload.record)) {\n            return NextResponse.json({ error: 'Invalid user record payload' }, { status: 400 });\n          }\n          await handleUserInsert(supabaseAdmin, payload.record);\n        }\n        break;\n\n      default:\n        console.log(`Unhandled webhook type: ${payload.type}`);\n    }\n\n    return NextResponse.json({ message: 'Webhook processed successfully' });\n  } catch (error) {\n    console.error('Webhook processing error:', error);\n    return NextResponse.json({ error: 'Webhook processing failed' }, { status: 500 });\n  }\n}\n\nasync function handleUserUpdate(\n  supabaseAdmin: SupabaseClient,\n  newRecord: WebhookUserRecord,\n  oldRecord: WebhookUserRecord\n) {\n  const userId = newRecord.id;\n\n  // Check if email was just confirmed\n  if (oldRecord.email_confirmed_at === null && newRecord.email_confirmed_at !== null) {\n    console.log(`✅ Email confirmed for user: ${userId}`);\n\n    try {\n      // Update profile verification status\n      const { error: updateError } = await supabaseAdmin\n        .from('auth_user_profiles')\n        .update({\n          email_verified: true,\n          email_verified_at: newRecord.email_confirmed_at,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', userId);\n\n      if (updateError) {\n        console.error('Failed to update profile verification:', updateError);\n        return;\n      }\n\n      // Complete address hierarchy if needed\n      await completeAddressHierarchy(supabaseAdmin, userId);\n\n      // Queue welcome notifications\n      await queueWelcomeNotifications(supabaseAdmin, userId);\n\n      console.log(`✅ Post-confirmation processing completed for user: ${userId}`);\n    } catch (error) {\n      console.error(`❌ Post-confirmation processing failed for user ${userId}:`, error);\n    }\n  }\n}\n\nasync function handleUserInsert(supabaseAdmin: any, record: WebhookUserRecord) {\n  const userId = record.id;\n  console.log(`👤 New user created: ${userId}`);\n\n  // If user is already confirmed (rare but possible), process immediately\n  if (record.email_confirmed_at) {\n    console.log(`✅ User already confirmed at signup: ${userId}`);\n    const mockOldRecord: WebhookUserRecord = {\n      ...record,\n      email_confirmed_at: null,\n    };\n    await handleUserUpdate(supabaseAdmin, record, mockOldRecord);\n  }\n}\n\nasync function completeAddressHierarchy(supabaseAdmin: any, userId: string) {\n  try {\n    // Get user profile with barangay code\n    const { data: profile, error: profileError } = await supabaseAdmin\n      .from('auth_user_profiles')\n      .select('barangay_code, city_municipality_code, province_code, region_code')\n      .eq('id', userId)\n      .single();\n\n    if (profileError || !profile || !profile.barangay_code) {\n      console.log(`No address hierarchy to complete for user: ${userId}`);\n      return;\n    }\n\n    // If hierarchy is already complete, skip\n    if (profile.city_municipality_code && profile.province_code && profile.region_code) {\n      console.log(`Address hierarchy already complete for user: ${userId}`);\n      return;\n    }\n\n    // Get complete address hierarchy\n    const { data: hierarchy, error: hierarchyError } = await supabaseAdmin\n      .from('psgc_barangays')\n      .select(\n        `\n        city_municipality_code,\n        psgc_cities_municipalities!inner(\n          code,\n          province_code,\n          psgc_provinces!inner(\n            code,\n            region_code\n          )\n        )\n      `\n      )\n      .eq('code', profile.barangay_code)\n      .single();\n\n    if (hierarchyError || !hierarchy) {\n      console.error(\n        `Failed to get address hierarchy for ${profile.barangay_code}:`,\n        hierarchyError\n      );\n      return;\n    }\n\n    // Update profile with complete hierarchy\n    const { error: updateError } = await supabaseAdmin\n      .from('auth_user_profiles')\n      .update({\n        city_municipality_code: hierarchy.city_municipality_code,\n        province_code: (hierarchy as any).psgc_cities_municipalities.province_code,\n        region_code: (hierarchy as any).psgc_cities_municipalities.psgc_provinces.region_code,\n        updated_at: new Date().toISOString(),\n      })\n      .eq('id', userId);\n\n    if (updateError) {\n      console.error(`Failed to update address hierarchy for user ${userId}:`, updateError);\n    } else {\n      console.log(`✅ Address hierarchy completed for user: ${userId}`);\n    }\n  } catch (error) {\n    console.error(`Error completing address hierarchy for user ${userId}:`, error);\n  }\n}\n\nasync function queueWelcomeNotifications(supabaseAdmin: any, userId: string) {\n  try {\n    // Get user profile for notification data\n    const { data: profile, error: profileError } = await supabaseAdmin\n      .from('auth_user_profiles')\n      .select(\n        `\n        email,\n        first_name,\n        phone,\n        auth_roles!inner(name)\n      `\n      )\n      .eq('id', userId)\n      .single();\n\n    if (profileError || !profile) {\n      console.error(`Failed to get profile for notifications: ${userId}`, profileError);\n      return;\n    }\n\n    const notifications = [];\n\n    // Queue welcome email\n    notifications.push({\n      user_id: userId,\n      notification_type: 'welcome_email',\n      metadata: {\n        email: profile.email,\n        first_name: profile.first_name,\n        role_name: (profile as any).auth_roles.name,\n      },\n    });\n\n    // Queue SMS if phone provided\n    if (profile.phone) {\n      notifications.push({\n        user_id: userId,\n        notification_type: 'sms_welcome',\n        metadata: {\n          phone: profile.phone,\n          first_name: profile.first_name,\n        },\n      });\n    }\n\n    // Insert notifications\n    const { error: notifError } = await supabaseAdmin\n      .from('user_notifications')\n      .insert(notifications);\n\n    if (notifError) {\n      console.error(`Failed to queue notifications for user ${userId}:`, notifError);\n    } else {\n      console.log(`✅ Welcome notifications queued for user: ${userId}`);\n    }\n  } catch (error) {\n    console.error(`Error queuing notifications for user ${userId}:`, error);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/cache/stats/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":136,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":136,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":199,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":199,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Cache Statistics API Endpoint\n * Monitor cache performance and metrics\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\n\nimport { createErrorResponseObject } from '@/lib';\nimport { cacheManager } from '@/lib/caching/redis-client';\nimport { responseCache } from '@/lib/caching/response-cache';\nimport { isProduction } from '@/lib/config/environment';\nimport { getConnectionPoolStats } from '@/lib/database/connection-pool';\nimport { queryOptimizer } from '@/lib/database/query-optimizer';\n\nexport const dynamic = 'force-dynamic';\n\n/**\n * GET /api/cache/stats - Get cache and performance statistics\n */\nexport async function GET(request: NextRequest): Promise<NextResponse> {\n  try {\n    // Simple authentication check for admin endpoints\n    const authHeader = request.headers.get('Authorization');\n    const isAuthorized =\n      authHeader &&\n      (authHeader.includes('Bearer') || (!isProduction() && authHeader === 'dev-token'));\n\n    if (!isAuthorized) {\n      return NextResponse.json(\n        createErrorResponseObject('AUTH_001', 'Unauthorized access to cache statistics'),\n        { status: 401 }\n      );\n    }\n\n    // Gather all cache and performance statistics\n    const [cacheStats, responseCacheStats, queryStats, connectionPoolStats] =\n      await Promise.allSettled([\n        cacheManager.getStats(),\n        responseCache.getStats(),\n        Promise.resolve(queryOptimizer.getMetrics()),\n        Promise.resolve(getConnectionPoolStats()),\n      ]);\n\n    // Helper to safely get stats from settled promises\n    const getStatsValue = (\n      result: PromiseSettledResult<unknown>,\n      defaultValue: Record<string, unknown> = {}\n    ) => {\n      return result.status === 'fulfilled' ? result.value : defaultValue;\n    };\n\n    const stats: Record<string, unknown> = {\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV,\n\n      // Cache statistics\n      cache: {\n        general: getStatsValue(cacheStats, {\n          hits: 0,\n          misses: 0,\n          keys: 0,\n          memoryUsage: 0,\n        }),\n\n        responseCache: getStatsValue(responseCacheStats, {\n          hits: 0,\n          misses: 0,\n          keys: 0,\n          hitRate: '0%',\n        }),\n      },\n\n      // Database performance\n      database: {\n        queryOptimizer: getStatsValue(queryStats, {\n          totalQueries: 0,\n          averageExecutionTime: 0,\n          cacheHitRate: 0,\n          slowQueries: [],\n          recentQueries: [],\n        }),\n\n        connectionPool: getStatsValue(connectionPoolStats, {\n          activeConnections: 0,\n          totalConnections: 0,\n          availableConnections: 0,\n          maxConnections: 0,\n          utilizationPercentage: 0,\n        }),\n      },\n\n      // Health indicators\n      health: {\n        cacheHealthy: cacheStats.status === 'fulfilled',\n        databaseHealthy: connectionPoolStats.status === 'fulfilled',\n        overallHealthy: [cacheStats, connectionPoolStats].every(s => s.status === 'fulfilled'),\n      },\n    };\n\n    // Add performance warnings\n    const warnings: string[] = [];\n\n    const dbStats = getStatsValue(connectionPoolStats) as {\n      utilizationPercentage?: number;\n      [key: string]: unknown;\n    };\n    if ((dbStats.utilizationPercentage ?? 0) > 80) {\n      warnings.push('Database connection pool utilization is high (>80%)');\n    }\n\n    const queryMetrics = getStatsValue(queryStats) as {\n      averageExecutionTime?: number;\n      slowQueries?: unknown[];\n      [key: string]: unknown;\n    };\n    if ((queryMetrics.averageExecutionTime ?? 0) > 1000) {\n      warnings.push('Average query execution time is high (>1000ms)');\n    }\n\n    const slowCount = queryMetrics.slowQueries?.length ?? 0;\n    if (slowCount > 5) {\n      warnings.push(`${slowCount} slow queries detected`);\n    }\n\n    if (warnings.length > 0) {\n      stats.warnings = warnings;\n    }\n\n    return NextResponse.json(stats, {\n      headers: {\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        Pragma: 'no-cache',\n        Expires: '0',\n      },\n    });\n  } catch (error) {\n    return NextResponse.json(\n      createErrorResponseObject('SERVER_001', 'Failed to retrieve cache statistics'),\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * POST /api/cache/stats - Cache management operations\n */\nexport async function POST(request: NextRequest): Promise<NextResponse> {\n  try {\n    // Simple authentication check for admin endpoints\n    const authHeader = request.headers.get('Authorization');\n    const isAuthorized =\n      authHeader &&\n      (authHeader.includes('Bearer') || (!isProduction() && authHeader === 'dev-token'));\n\n    if (!isAuthorized) {\n      return NextResponse.json(\n        createErrorResponseObject('AUTH_001', 'Unauthorized cache management access'),\n        { status: 401 }\n      );\n    }\n\n    const { action, pattern, tags } = await request.json();\n\n    let result: Record<string, unknown> = { success: false };\n\n    switch (action) {\n      case 'clear':\n        await cacheManager.clear();\n        queryOptimizer.clearCache();\n        result = { success: true, message: 'All caches cleared' };\n        break;\n\n      case 'invalidate':\n        if (!pattern) {\n          return NextResponse.json(\n            createErrorResponseObject('DATA_001', 'Pattern required for invalidation'),\n            { status: 400 }\n          );\n        }\n        const count = await responseCache.invalidate(pattern, tags);\n        result = {\n          success: true,\n          message: `Invalidated ${count} cache entries matching pattern: ${pattern}`,\n        };\n        break;\n\n      case 'clear-query-metrics':\n        queryOptimizer.clearMetrics();\n        result = { success: true, message: 'Query metrics cleared' };\n        break;\n\n      default:\n        return NextResponse.json(createErrorResponseObject('DATA_001', 'Invalid cache action'), {\n          status: 400,\n        });\n    }\n\n    return NextResponse.json(result);\n  } catch (error) {\n    return NextResponse.json(\n      createErrorResponseObject('SERVER_001', 'Cache management operation failed'),\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/dashboard/stats/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createClient' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ErrorCode' is defined but never used.","line":4,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getEnvironmentConfig' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@supabase/supabase-js';\nimport { NextRequest, NextResponse } from 'next/server';\n\nimport { logger, createErrorResponseObject, type ErrorCode } from '@/lib';\nimport { withResponseCache, CachePresets } from '@/lib/caching/response-cache';\nimport { getEnvironmentConfig, isProduction } from '@/lib/config/environment';\nimport { getPooledConnection, releasePooledConnection } from '@/lib/database/connection-pool';\nimport { queryOptimizer } from '@/lib/database/query-optimizer';\n\n// Rate limiting configuration\nconst RATE_LIMIT_WINDOW = 60 * 1000; // 1 minute\nconst RATE_LIMIT_MAX_REQUESTS = 30; // 30 requests per minute\nconst requestCounts = new Map<string, { count: number; resetTime: number }>();\n\n// Rate limiting function\nfunction checkRateLimit(userAgent: string, ip: string): boolean {\n  const key = `${ip}-${userAgent?.substring(0, 50) || 'unknown'}`;\n  const now = Date.now();\n  const current = requestCounts.get(key);\n\n  if (!current || now > current.resetTime) {\n    requestCounts.set(key, { count: 1, resetTime: now + RATE_LIMIT_WINDOW });\n    return true;\n  }\n\n  if (current.count >= RATE_LIMIT_MAX_REQUESTS) {\n    return false;\n  }\n\n  current.count++;\n  return true;\n}\n\n// Pagination configuration\nconst MAX_RESIDENTS_PER_PAGE = 1000;\nconst DEFAULT_PAGE_SIZE = 500;\n\nasync function dashboardStatsHandler(request: NextRequest): Promise<NextResponse> {\n  try {\n    // Environment validation for production\n    if (isProduction()) {\n      if (!process.env.SUPABASE_SERVICE_ROLE_KEY) {\n        return NextResponse.json(\n          createErrorResponseObject('SERVER_001', 'Service configuration error'),\n          { status: 500 }\n        );\n      }\n    }\n\n    // Rate limiting\n    const userAgent = request.headers.get('user-agent') || '';\n    const ip =\n      request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown';\n\n    if (!checkRateLimit(userAgent, ip)) {\n      return NextResponse.json(\n        createErrorResponseObject('RATE_001', 'Rate limit exceeded. Please try again later.'),\n        { status: 429 }\n      );\n    }\n\n    // Get auth header from the request\n    const authHeader = request.headers.get('Authorization') || request.headers.get('authorization');\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json(\n        createErrorResponseObject('AUTH_001', 'No authentication token provided'),\n        { status: 401 }\n      );\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    // Get optimized connection for user verification\n    const supabase = await getPooledConnection('anon');\n\n    // Verify the user token\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser(token);\n\n    if (authError || !user) {\n      return NextResponse.json(\n        createErrorResponseObject('AUTH_002', 'Invalid or expired authentication token'),\n        { status: 401 }\n      );\n    }\n\n    // Get optimized service role connection\n    const supabaseAdmin = await getPooledConnection('service');\n\n    // Get user profile to get barangay_code\n    const { data: userProfile, error: profileError } = await supabaseAdmin\n      .from('auth_user_profiles')\n      .select('barangay_code')\n      .eq('id', user.id)\n      .single();\n\n    if (profileError) {\n      logger.error('Profile query error:', profileError);\n      return NextResponse.json(\n        createErrorResponseObject('USER_001', 'User profile could not be retrieved'),\n        { status: 400 }\n      );\n    }\n\n    if (!userProfile?.barangay_code) {\n      return NextResponse.json(\n        createErrorResponseObject('USER_002', 'No barangay assignment found for user'),\n        { status: 400 }\n      );\n    }\n\n    const barangayCode = userProfile.barangay_code;\n\n    // Get dashboard stats using query optimizer\n    const {\n      data: dashboardStats,\n      error: statsError,\n      fromCache,\n    } = await queryOptimizer.getDashboardStats(\n      supabaseAdmin,\n      barangayCode,\n      { cacheTTL: 2 * 60 * 1000 } // 2 minutes cache\n    );\n\n    if (statsError) {\n      logger.error('Dashboard stats query error:', statsError);\n      return NextResponse.json(\n        createErrorResponseObject('DATA_002', 'Unable to retrieve dashboard statistics'),\n        { status: 500 }\n      );\n    }\n\n    // If no stats data exists for this barangay, provide defaults\n    const statsData = dashboardStats || {\n      total_residents: 0,\n      total_households: 0,\n      seniors: 0,\n      employed: 0,\n    };\n\n    // Parse pagination parameters\n    const url = new URL(request.url);\n    const page = Math.max(1, parseInt(url.searchParams.get('page') || '1'));\n    const limit = Math.min(\n      MAX_RESIDENTS_PER_PAGE,\n      parseInt(url.searchParams.get('limit') || DEFAULT_PAGE_SIZE.toString())\n    );\n    const offset = (page - 1) * limit;\n\n    // Get individual residents data using optimized query\n    const {\n      data: residentsData,\n      error: residentsError,\n      fromCache: residentsFromCache,\n    } = await queryOptimizer.executeQuery(\n      supabaseAdmin,\n      `residents_sectoral_${barangayCode}_${page}_${limit}`,\n      async () => {\n        return await supabaseAdmin\n          .from('residents')\n          .select(\n            `\n            birthdate, \n            sex, \n            civil_status, \n            employment_status,\n            household_code,\n            households!inner(barangay_code),\n            resident_sectoral_info(\n              is_labor_force_employed,\n              is_unemployed,\n              is_overseas_filipino_worker,\n              is_person_with_disability,\n              is_out_of_school_children,\n              is_out_of_school_youth,\n              is_senior_citizen,\n              is_registered_senior_citizen,\n              is_solo_parent,\n              is_indigenous_people,\n              is_migrant\n            )\n          `\n          )\n          .eq('households.barangay_code', barangayCode)\n          .eq('is_active', true)\n          .range(offset, offset + limit - 1);\n      },\n      {\n        cacheTTL: 1 * 60 * 1000, // 1 minute cache for residents\n        enableCache: true,\n      }\n    );\n\n    if (residentsError) {\n      logger.error('Residents query error:', residentsError);\n      return NextResponse.json(\n        createErrorResponseObject('DATA_002', 'Unable to retrieve resident data'),\n        { status: 500 }\n      );\n    }\n\n    // Calculate real sectoral statistics from residents data\n    const sectoralStats = {\n      laborForce: 0,\n      employed: 0,\n      unemployed: 0,\n      ofw: 0,\n      pwd: 0,\n      outOfSchoolChildren: 0,\n      outOfSchoolYouth: 0,\n      seniorCitizens: 0,\n      registeredSeniorCitizens: 0,\n      soloParents: 0,\n      indigenous: 0,\n      migrants: 0,\n    };\n\n    if (residentsData && residentsData.length > 0) {\n      residentsData.forEach(resident => {\n        const sectoral = resident.resident_sectoral_info?.[0];\n        if (sectoral) {\n          // Labor force includes employed and unemployed\n          if (sectoral.is_labor_force_employed || sectoral.is_unemployed)\n            sectoralStats.laborForce++;\n          if (sectoral.is_labor_force_employed) sectoralStats.employed++;\n          if (sectoral.is_unemployed) sectoralStats.unemployed++;\n          if (sectoral.is_overseas_filipino_worker) sectoralStats.ofw++;\n          if (sectoral.is_person_with_disability) sectoralStats.pwd++;\n          if (sectoral.is_out_of_school_children) sectoralStats.outOfSchoolChildren++;\n          if (sectoral.is_out_of_school_youth) sectoralStats.outOfSchoolYouth++;\n          if (sectoral.is_senior_citizen) sectoralStats.seniorCitizens++;\n          if (sectoral.is_registered_senior_citizen) sectoralStats.registeredSeniorCitizens++;\n          if (sectoral.is_solo_parent) sectoralStats.soloParents++;\n          if (sectoral.is_indigenous_people) sectoralStats.indigenous++;\n          if (sectoral.is_migrant) sectoralStats.migrants++;\n        }\n      });\n    }\n\n    // Calculate actual counts from the data we retrieved\n    const actualResidentCount = residentsData?.length || 0;\n    const uniqueHouseholds = new Set(\n      residentsData?.map(r => r.household_code).filter(Boolean) || []\n    );\n    const actualHouseholdCount = uniqueHouseholds.size;\n\n    const response = {\n      stats: {\n        residents: actualResidentCount,\n        households: actualHouseholdCount,\n        businesses: 0, // TODO: Add when businesses table exists\n        certifications: 0, // TODO: Add when certifications table exists\n        seniorCitizens: sectoralStats.seniorCitizens || statsData?.age_65_plus || 0,\n        employedResidents: sectoralStats.employed || statsData?.employed_count || 0,\n      },\n      // Additional demographic data for charts\n      demographics: {\n        ageGroups: {\n          youngDependents: statsData?.age_0_14 || 0,\n          workingAge: statsData?.age_15_64 || 0,\n          oldDependents: statsData?.age_65_plus || 0,\n        },\n        sexDistribution: {\n          male: statsData?.male_count || 0,\n          female: statsData?.female_count || 0,\n        },\n        civilStatus: {\n          single: statsData?.single_count || 0,\n          married: statsData?.married_count || 0,\n          widowed: statsData?.widowed_count || 0,\n          divorced: statsData?.divorced_separated_count || 0,\n        },\n        employment: {\n          laborForce:\n            sectoralStats.laborForce ||\n            (statsData?.employed_count || 0) + (statsData?.unemployed_count || 0),\n          employed: sectoralStats.employed || statsData?.employed_count || 0,\n          unemployed: sectoralStats.unemployed || statsData?.unemployed_count || 0,\n        },\n        specialCategories: {\n          pwd: sectoralStats.pwd,\n          soloParents: sectoralStats.soloParents,\n          ofw: sectoralStats.ofw,\n          indigenous: sectoralStats.indigenous,\n          outOfSchoolChildren: sectoralStats.outOfSchoolChildren,\n          outOfSchoolYouth: sectoralStats.outOfSchoolYouth,\n          registeredSeniorCitizens: sectoralStats.registeredSeniorCitizens,\n          migrants: sectoralStats.migrants,\n        },\n      },\n      residentsData: residentsData || [],\n      pagination: {\n        page,\n        limit,\n        total: actualResidentCount,\n        hasNextPage: residentsData?.length === limit,\n      },\n      // Performance metadata\n      performance: {\n        dashboardStatsFromCache: fromCache,\n        residentsDataFromCache: residentsFromCache,\n        queryOptimizationEnabled: true,\n      },\n    };\n\n    // Release pooled connections\n    releasePooledConnection(supabase);\n    releasePooledConnection(supabaseAdmin);\n\n    return NextResponse.json(response);\n  } catch (error) {\n    logger.error('Dashboard stats API error:', error);\n    return NextResponse.json(\n      createErrorResponseObject('SERVER_001', 'An unexpected error occurred'),\n      { status: 500 }\n    );\n  }\n}\n\n// Wrap the handler with response caching\nexport async function GET(request: NextRequest): Promise<NextResponse> {\n  return withResponseCache(CachePresets.dashboard)(request, () => dashboardStatsHandler(request));\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/debug/rbi-preflight/route.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":16,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":16,"endColumn":44},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":17,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":17,"endColumn":49},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":30,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":30,"endColumn":44},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":31,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":31,"endColumn":45},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":34,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":34,"endColumn":16,"suggestions":[{"fix":{"range":[1009,1081],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1774,1777],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1774,1777],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2147,2150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2147,2150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@supabase/supabase-js';\nimport { NextRequest, NextResponse } from 'next/server';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Get auth header\n    const authHeader = request.headers.get('Authorization');\n    if (!authHeader?.startsWith('Bearer ')) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    // Create Supabase client for user verification\n    const supabase = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n    );\n\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser(token);\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Use service role for checks\n    const supabaseAdmin = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!\n    );\n\n    console.log('[RBI Preflight] Checking system state for user:', user.id);\n\n    // Check 1: Active encryption key\n    const { data: encryptionKey, error: keyError } = await supabaseAdmin\n      .from('system_encryption_keys')\n      .select('key_name, is_active')\n      .eq('key_name', 'pii_master_key')\n      .eq('is_active', true)\n      .single();\n\n    // Check 2: User has barangay assignment via profile (simpler and consistent with API)\n    const { data: profile, error: profileError } = await supabaseAdmin\n      .from('auth_user_profiles')\n      .select('barangay_code')\n      .eq('id', user.id)\n      .single();\n\n    // Check 3: Function existence (attempt simple no-op call with bogus params to test availability)\n    let funcExists = true;\n    let funcError: any = null;\n    try {\n      // Minimal safe call that should fail on validation but confirm function exists in schema\n      await supabaseAdmin.rpc('insert_resident_encrypted', {\n        p_first_name: 'X',\n        p_last_name: 'Y',\n        p_birthdate: '2000-01-01',\n        p_sex: 'male',\n        p_barangay_code: profile?.barangay_code || null,\n      });\n    } catch (e: any) {\n      const message = (e?.message || '').toLowerCase();\n      if (message.includes('function') && message.includes('does not exist')) {\n        funcExists = false;\n        funcError = e?.message;\n      } else {\n        // Function exists; we ignore expected validation/rls errors\n        funcExists = true;\n        funcError = null;\n      }\n    }\n\n    return NextResponse.json({\n      user_id: user.id,\n      preflight_checks: {\n        encryption_key: {\n          exists: !!encryptionKey,\n          error: keyError?.message || null,\n          data: encryptionKey,\n        },\n        profile_barangay: {\n          code: profile?.barangay_code || null,\n          error: profileError?.message || null,\n        },\n        function_check: {\n          exists: funcExists,\n          error: funcError,\n        },\n      },\n      diagnosis: {\n        ready_for_rbi: !!encryptionKey && !!profile?.barangay_code && funcExists,\n        issues: [\n          !encryptionKey ? 'Missing active pii_master_key' : null,\n          !profile?.barangay_code ? 'No barangay assigned on profile' : null,\n          !funcExists ? 'insert_resident_encrypted function not available' : null,\n        ].filter(Boolean),\n      },\n    });\n  } catch (error) {\n    console.error('[RBI Preflight] Error:', error);\n    return NextResponse.json({ error: 'Internal server error', details: error }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/debug/residents/route.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":17,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":17,"endColumn":44},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":18,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":18,"endColumn":49},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":33,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":33,"endColumn":44},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":34,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":34,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@supabase/supabase-js';\nimport { NextRequest, NextResponse } from 'next/server';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Get auth header from the request\n    const authHeader = request.headers.get('Authorization') || request.headers.get('authorization');\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json({ error: 'Unauthorized - No auth token' }, { status: 401 });\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    // Create regular client to verify user\n    const supabase = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n    );\n\n    // Verify the user token\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser(token);\n\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n    }\n\n    // Use service role client to check data directly\n    const supabaseAdmin = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!\n    );\n\n    // Get user profile first\n    const { data: userProfile, error: profileError } = await supabaseAdmin\n      .from('auth_user_profiles')\n      .select('*')\n      .eq('id', user.id)\n      .single();\n\n    if (profileError) {\n      return NextResponse.json(\n        {\n          error: 'Failed to get user profile',\n          details: profileError,\n        },\n        { status: 500 }\n      );\n    }\n\n    // Check total residents in database\n    const { count: totalResidents } = await supabaseAdmin\n      .from('residents')\n      .select('*', { count: 'exact', head: true });\n\n    // Check residents for user's barangay (via households join)\n    let residentsInBarangay = 0;\n    if (userProfile?.barangay_code) {\n      const { count } = await supabaseAdmin\n        .from('residents')\n        .select('*, households!inner(barangay_code)', { count: 'exact', head: true })\n        .eq('households.barangay_code', userProfile.barangay_code)\n        .eq('is_active', true);\n      residentsInBarangay = count || 0;\n    }\n\n    // Check what barangay codes exist in households table (residents don't have geographic fields)\n    const { data: barangayCodes } = await supabaseAdmin\n      .from('households')\n      .select('barangay_code')\n      .limit(10);\n\n    // Check with user RLS policies (using user token) - need to join via households\n    let rls_error = null;\n    let rls_count = 0;\n    try {\n      if (userProfile?.barangay_code) {\n        const { count, error } = await supabase\n          .from('residents')\n          .select('*, households!inner(barangay_code)', { count: 'exact', head: true })\n          .eq('households.barangay_code', userProfile.barangay_code)\n          .eq('is_active', true);\n\n        if (error) {\n          rls_error = error;\n        } else {\n          rls_count = count || 0;\n        }\n      }\n    } catch (error) {\n      rls_error = error;\n    }\n\n    return NextResponse.json({\n      user_id: user.id,\n      user_profile: userProfile,\n      total_residents_in_db: totalResidents || 0,\n      residents_in_user_barangay: residentsInBarangay,\n      barangay_codes_sample: barangayCodes?.map(b => b.barangay_code).filter(Boolean) || [],\n      rls_test: {\n        count: rls_count,\n        error: rls_error,\n      },\n    });\n  } catch (error) {\n    console.error('Debug API error:', error);\n    return NextResponse.json({ error: 'Internal server error', details: error }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/health/command-menu/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/health/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":24,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Health Check Endpoint\n * Production monitoring and system status checks\n */\n\nimport { createClient } from '@supabase/supabase-js';\nimport { NextRequest, NextResponse } from 'next/server';\n\nimport {\n  performRuntimeHealthCheck,\n  validateEnvironment,\n  getEnvironmentConfig,\n} from '@/lib/config/environment';\nimport type { HealthCheckResult } from '@/types/api-requests';\n\nexport const dynamic = 'force-dynamic';\n\n// HealthCheckResult moved to src/types/api-requests.ts\n\n/**\n * Basic health check endpoint\n * GET /api/health - Returns system health status\n */\nexport async function GET(request: NextRequest): Promise<NextResponse> {\n  const startTime = Date.now();\n\n  try {\n    // Get environment configuration\n    const envConfig = getEnvironmentConfig();\n    const envValidation = validateEnvironment();\n\n    // Perform comprehensive health checks\n    const healthCheck = await performRuntimeHealthCheck();\n\n    // Additional system information (server-side only)\n    let systemInfo = {};\n    if (typeof process !== 'undefined') {\n      const memory = process.memoryUsage();\n      systemInfo = {\n        memory: {\n          used: Math.round(memory.heapUsed / 1024 / 1024), // MB\n          total: Math.round(memory.heapTotal / 1024 / 1024), // MB\n          percentage: Math.round((memory.heapUsed / memory.heapTotal) * 100),\n        },\n        node: {\n          version: process.version,\n          platform: process.platform,\n        },\n      };\n    }\n\n    // Calculate uptime\n    const uptime = typeof process !== 'undefined' && process.uptime ? process.uptime() : 0;\n\n    // Determine overall status\n    const hasFailures = Object.values(healthCheck.checks).some(check => check.status === 'fail');\n    const hasWarnings = Object.values(healthCheck.checks).some(check => check.status === 'warn');\n    const environmentValid = envValidation.isValid;\n\n    let status: 'healthy' | 'unhealthy' | 'degraded' = 'healthy';\n    if (!environmentValid || hasFailures) {\n      status = 'unhealthy';\n    } else if (hasWarnings || envValidation.warnings.length > 0) {\n      status = 'degraded';\n    }\n\n    const result: HealthCheckResult = {\n      status,\n      timestamp: new Date().toISOString(),\n      version: envConfig.appVersion || '1.0.0',\n      environment: envConfig.environment,\n      uptime: Math.round(uptime),\n      checks: {\n        ...healthCheck.checks,\n        environment: {\n          status: environmentValid ? 'pass' : 'fail',\n          message: environmentValid\n            ? 'Environment configuration valid'\n            : `Environment issues: ${envValidation.errors.join(', ')}`,\n          responseTime: Date.now() - startTime,\n        },\n      },\n      system: systemInfo,\n    };\n\n    // Add environment warnings to checks if any\n    if (envValidation.warnings.length > 0) {\n      result.checks.environment_warnings = {\n        status: 'warn',\n        message: `Warnings: ${envValidation.warnings.join(', ')}`,\n      };\n    }\n\n    // Return appropriate HTTP status code\n    const httpStatus = status === 'healthy' ? 200 : status === 'degraded' ? 200 : 503;\n\n    return NextResponse.json(result, {\n      status: httpStatus,\n      headers: {\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        Pragma: 'no-cache',\n        Expires: '0',\n      },\n    });\n  } catch (error) {\n    // Fallback error response\n    const result: HealthCheckResult = {\n      status: 'unhealthy',\n      timestamp: new Date().toISOString(),\n      version: '1.0.0',\n      environment: 'unknown',\n      uptime: 0,\n      checks: {\n        system: {\n          status: 'fail',\n          message: `Health check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n          responseTime: Date.now() - startTime,\n        },\n      },\n    };\n\n    return NextResponse.json(result, {\n      status: 503,\n      headers: {\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        Pragma: 'no-cache',\n        Expires: '0',\n      },\n    });\n  }\n}\n\n/**\n * Detailed health check endpoint\n * POST /api/health - Returns detailed system diagnostics\n */\nexport async function POST(request: NextRequest): Promise<NextResponse> {\n  try {\n    // Check if request has proper authorization for detailed checks\n    const authHeader = request.headers.get('Authorization');\n    const isAuthorized = authHeader && authHeader.includes('Bearer');\n\n    if (!isAuthorized) {\n      return NextResponse.json(\n        {\n          error: 'Unauthorized access to detailed health checks',\n        },\n        { status: 401 }\n      );\n    }\n\n    // Perform detailed checks\n    const startTime = Date.now();\n    const envValidation = validateEnvironment();\n    const healthCheck = await performRuntimeHealthCheck();\n\n    // Database connectivity test\n    let dbCheck: { status: 'pass' | 'fail' | 'skip'; message: string; responseTime?: number } = {\n      status: 'skip',\n      message: 'Database check skipped',\n    };\n\n    if (process.env.NEXT_PUBLIC_SUPABASE_URL && process.env.SUPABASE_SERVICE_ROLE_KEY) {\n      try {\n        const supabase = createClient(\n          process.env.NEXT_PUBLIC_SUPABASE_URL,\n          process.env.SUPABASE_SERVICE_ROLE_KEY\n        );\n\n        const dbStartTime = Date.now();\n        const { error } = await supabase.from('auth_user_profiles').select('id').limit(1);\n        const dbResponseTime = Date.now() - dbStartTime;\n\n        dbCheck = {\n          status: error ? 'fail' : 'pass',\n          message: error\n            ? `Database error: ${error.message}`\n            : `Database accessible (${dbResponseTime}ms)`,\n          responseTime: dbResponseTime,\n        };\n      } catch (error) {\n        dbCheck = {\n          status: 'fail',\n          message: `Database connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        };\n      }\n    }\n\n    const result = {\n      status: 'detailed-check',\n      timestamp: new Date().toISOString(),\n      environment: envValidation,\n      runtime: healthCheck,\n      database: dbCheck,\n      performance: {\n        checkDuration: Date.now() - startTime,\n        memoryUsage: typeof process !== 'undefined' ? process.memoryUsage() : null,\n      },\n    };\n\n    return NextResponse.json(result);\n  } catch (error) {\n    return NextResponse.json(\n      {\n        error: 'Detailed health check failed',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/households/[id]/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1395,1398],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1395,1398],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":127,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3785,3788],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3785,3788],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3868,3871],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3868,3871],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3934,3937],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3934,3937],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4045,4048],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4045,4048],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4091,4094],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4091,4094],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4185,4188],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4185,4188],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4239,4242],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4239,4242],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4293,4296],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4293,4296],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4384,4387],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4384,4387],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4435,4438],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4435,4438],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4522,4525],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4522,4525],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":147,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4571,4574],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4571,4574],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":198,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6111,6114],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6111,6114],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_code' is assigned a value but never used.","line":219,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":219,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_brgy' is assigned a value but never used.","line":220,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":220,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_created' is assigned a value but never used.","line":221,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":221,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_prevUpdated' is assigned a value but never used.","line":222,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":222,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":224,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6872,6875],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6872,6875],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n\nimport { createPublicSupabaseClient, createAdminSupabaseClient } from '@/lib/data/client-factory';\nimport type { Database } from '@/lib/data/supabase';\nimport type { HouseholdRecord } from '@/types/api';\nimport type { AuthUserProfile } from '@/types/auth';\n\ntype DbHouseholdUpdate = Database['public']['Tables']['households']['Update'];\n\nexport async function GET(request: NextRequest, { params }: { params: Promise<{ id: string }> }) {\n  try {\n    const resolvedParams = await params;\n    const householdCode = resolvedParams.id;\n\n    // Get auth header from the request\n    const authHeader = request.headers.get('Authorization') || request.headers.get('authorization');\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json({ error: 'Unauthorized - No auth token' }, { status: 401 });\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    // Create regular client to verify user\n    const supabase = createPublicSupabaseClient();\n\n    // Verify the user token\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser(token);\n\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n    }\n\n    // Use service role client to bypass RLS\n    const supabaseAdmin = createAdminSupabaseClient() as any;\n\n    // Get user profile to verify barangay access\n    const profileResult = await supabaseAdmin\n      .from('auth_user_profiles')\n      .select('barangay_code')\n      .eq('id', user.id)\n      .single();\n\n    const userProfile = profileResult.data as AuthUserProfile | null;\n    const profileError = profileResult.error;\n\n    if (profileError || !userProfile?.barangay_code) {\n      return NextResponse.json(\n        { error: 'User profile not found or no barangay assigned' },\n        { status: 400 }\n      );\n    }\n\n    // Get household data with head resident info using correct foreign key reference\n    const householdResult = await supabaseAdmin\n      .from('households')\n      .select(\n        `\n        *,\n        head_resident:residents!household_head_id(\n          id,\n          first_name,\n          middle_name,\n          last_name,\n          email,\n          mobile_number,\n          sex,\n          birthdate,\n          civil_status\n        )\n        `\n      )\n      .eq('code', householdCode)\n      .eq('barangay_code', userProfile.barangay_code)\n      .single();\n\n    const household = householdResult.data as HouseholdRecord | null;\n    const householdError = householdResult.error;\n\n    if (householdError || !household) {\n      return NextResponse.json({ error: 'Household not found or access denied' }, { status: 404 });\n    }\n\n    // Get all household members\n    const { data: members, error: membersError } = await supabaseAdmin\n      .from('residents')\n      .select('*')\n      .eq('household_code', householdCode)\n      .eq('is_active', true)\n      .order('created_at', { ascending: true });\n\n    if (membersError) {\n      console.warn('Failed to fetch household members:', membersError);\n    }\n\n    // Get geographic information\n    let geoInfo = {};\n    try {\n      const { data: barangayData } = await supabaseAdmin\n        .from('psgc_barangays')\n        .select(\n          `\n          code,\n          name,\n          psgc_cities_municipalities!inner(\n            code,\n            name,\n            type,\n            psgc_provinces!inner(\n              code,\n              name,\n              psgc_regions!inner(\n                code,\n                name\n              )\n            )\n          )\n          `\n        )\n        .eq('code', household.barangay_code)\n        .single();\n\n      if (barangayData) {\n        const cityMunData = (barangayData as any)?.psgc_cities_municipalities ?? null;\n        const province = (cityMunData as any)?.psgc_provinces ?? null;\n        const region = (province as any)?.psgc_regions ?? null;\n\n        geoInfo = {\n          barangay_info: {\n            code: (barangayData as any).code,\n            name: (barangayData as any).name,\n          },\n          city_municipality_info: {\n            code: (cityMunData as any)?.code ?? null,\n            name: (cityMunData as any)?.name ?? null,\n            type: (cityMunData as any)?.type ?? null,\n          },\n          province_info: {\n            code: (province as any)?.code ?? null,\n            name: (province as any)?.name ?? null,\n          },\n          region_info: {\n            code: (region as any)?.code ?? null,\n            name: (region as any)?.name ?? null,\n          },\n        };\n      }\n    } catch (geoError) {\n      console.warn('Geographic info load failed:', geoError);\n    }\n\n    return NextResponse.json({\n      household: {\n        ...household,\n        ...geoInfo,\n        member_count: members?.length || 0,\n      },\n      members: members || [],\n    });\n  } catch (error) {\n    console.error('Household detail API error:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n\nexport async function PUT(request: NextRequest, { params }: { params: Promise<{ id: string }> }) {\n  try {\n    const resolvedParams = await params;\n    const householdCode = resolvedParams.id;\n    const updateData = await request.json();\n\n    // Get auth header from the request\n    const authHeader = request.headers.get('Authorization') || request.headers.get('authorization');\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json({ error: 'Unauthorized - No auth token' }, { status: 401 });\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    // Create regular client to verify user\n    const supabase = createPublicSupabaseClient();\n\n    // Verify the user token\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser(token);\n\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n    }\n\n    // Use service role client to bypass RLS\n    const supabaseAdmin = createAdminSupabaseClient() as any;\n\n    // Get user profile to verify barangay access\n    const profileResult = await supabaseAdmin\n      .from('auth_user_profiles')\n      .select('barangay_code')\n      .eq('id', user.id)\n      .single();\n\n    const userProfile = profileResult.data as AuthUserProfile | null;\n    const profileError = profileResult.error;\n\n    if (profileError || !userProfile?.barangay_code) {\n      return NextResponse.json(\n        { error: 'User profile not found or no barangay assigned' },\n        { status: 400 }\n      );\n    }\n\n    // Prepare a typed, sanitized payload (block immutable fields)\n    const {\n      code: _code,\n      barangay_code: _brgy,\n      created_at: _created,\n      updated_at: _prevUpdated,\n      ...rest\n    } = (updateData as Record<string, any>) ?? {};\n    const updateResult = await supabaseAdmin\n      .from('households')\n      .update({\n        ...(rest as DbHouseholdUpdate),\n        updated_at: new Date().toISOString(),\n      })\n      .eq('code', householdCode)\n      .eq('barangay_code', userProfile.barangay_code)\n      .select()\n      .single();\n\n    const updatedHousehold = updateResult.data;\n    const updateError = updateResult.error;\n\n    if (updateError) {\n      console.error('Household update error:', updateError);\n      return NextResponse.json({ error: 'Failed to update household' }, { status: 500 });\n    }\n\n    if (!updatedHousehold) {\n      return NextResponse.json({ error: 'Household not found or access denied' }, { status: 404 });\n    }\n\n    return NextResponse.json({\n      household: updatedHousehold,\n      message: 'Household updated successfully',\n    });\n  } catch (error) {\n    console.error('Household update API error:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/households/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Role' is defined but never used.","line":10,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3008,3011],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3008,3011],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3050,3053],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3050,3053],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":204,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7228,7231],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7228,7231],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Households API Route\n * Updated to comply with API Design Standards\n */\n\nimport { NextRequest } from 'next/server';\nimport { z } from 'zod';\n\nimport { withAuth, applyGeographicFilter, createAdminSupabaseClient } from '@/lib';\nimport { RequestContext, Role } from '@/lib/api/types';\nimport { auditDataOperation } from '@/lib/authentication/auditUtils';\nimport {\n  createPaginatedResponse,\n  createCreatedResponse,\n  createValidationErrorResponse,\n  processSearchParams,\n  applySearchFilter,\n  withNextRequestErrorHandling,\n  withSecurityHeaders,\n} from '@/lib/authentication/responseUtils';\nimport { createHouseholdSchema } from '@/lib/authentication/validationUtils';\nimport { createRateLimitHandler } from '@/lib/security/rate-limit';\nimport type { AuthenticatedUser } from '@/types/auth';\n\n// AuthenticatedUser type consolidated to src/types/auth.ts\n\n// GET /api/households - List households with pagination and search\nexport const GET = withSecurityHeaders(\n  withAuth(\n    {\n      requiredPermissions: [\n        'households.manage.barangay',\n        'households.manage.city',\n        'households.manage.province',\n        'households.manage.region',\n        'households.manage.all',\n      ],\n    },\n    withNextRequestErrorHandling(\n      async (request: NextRequest, context: RequestContext, user: AuthenticatedUser) => {\n        // Apply rate limiting\n        const rateLimitResponse = await createRateLimitHandler('SEARCH_RESIDENTS')(\n          request,\n          user.id\n        );\n        if (rateLimitResponse) return rateLimitResponse;\n\n        // Process search parameters safely\n        const { search, page, limit, offset } = await processSearchParams(\n          new URL(request.url).searchParams,\n          context\n        );\n\n        const supabaseAdmin = createAdminSupabaseClient();\n\n        // Build base query using exact database field names\n        let query = supabaseAdmin\n          .from('households')\n          .select(\n            `\n            code,\n            name,\n            address,\n            house_number,\n            street_id,\n            subdivision_id,\n            barangay_code,\n            city_municipality_code,\n            province_code,\n            region_code,\n            zip_code,\n            no_of_families,\n            no_of_household_members,\n            no_of_migrants,\n            household_type,\n            tenure_status,\n            tenure_others_specify,\n            household_unit,\n            monthly_income,\n            income_class,\n            household_head_id,\n            household_head_position,\n            is_active,\n            created_at,\n            updated_at\n          `,\n            { count: 'exact' }\n          )\n          .eq('is_active', true)\n          .order('code', { ascending: true });\n\n        // Apply geographic filtering based on user's access level\n        query = applyGeographicFilter(query, user);\n\n        // Apply search filter if provided\n        if (search) {\n          query = applySearchFilter(query as any, search, ['code', 'house_number']) as any;\n        }\n\n        // Apply pagination\n        query = query.range(offset, offset + limit - 1);\n\n        // Execute query\n        const { data: households, error, count } = await query;\n\n        if (error) {\n          // Re-throw error to be handled by withErrorHandling wrapper\n          throw error;\n        }\n\n        // Audit the data access\n        await auditDataOperation('view', 'household', 'list', context, {\n          searchTerm: search || '',\n          resultCount: households?.length || 0,\n          totalCount: count || 0,\n        });\n\n        return createPaginatedResponse(\n          households || [],\n          { page, limit, total: count || 0 },\n          'Households retrieved successfully',\n          context\n        );\n      }\n    )\n  )\n);\n\n// POST /api/households - Create new household\nexport const POST = withSecurityHeaders(\n  withAuth(\n    {\n      requiredPermissions: [\n        'households.manage.barangay',\n        'households.manage.city',\n        'households.manage.province',\n        'households.manage.region',\n        'households.manage.all',\n      ],\n    },\n    withNextRequestErrorHandling(\n      async (request: NextRequest, context: RequestContext, user: AuthenticatedUser) => {\n        // Apply rate limiting\n        const rateLimitResponse = await createRateLimitHandler('RESIDENT_CREATE')(request, user.id);\n        if (rateLimitResponse) return rateLimitResponse;\n\n        // Parse and validate request body\n        const body = await request.json();\n        const validationResult = createHouseholdSchema.safeParse(body);\n\n        if (!validationResult.success) {\n          return createValidationErrorResponse(\n            validationResult.error.issues.map((err: z.ZodIssue) => ({\n              field: err.path.join('.'),\n              message: err.message,\n            })),\n            context\n          );\n        }\n\n        const householdData = validationResult.data;\n\n        // Use user's geographic codes if not provided\n        const effectiveBarangayCode = householdData.barangay_code || user.barangayCode;\n        if (!effectiveBarangayCode) {\n          return createValidationErrorResponse(\n            [{ field: 'barangay_code', message: 'Barangay code is required' }],\n            context\n          );\n        }\n\n        const supabaseAdmin = createAdminSupabaseClient();\n\n        // Prepare data for insertion - using exact database field names\n        const insertData = {\n          code: householdData.code,\n          name: null, // Will be auto-generated if not provided\n          address: null, // Will be composed from components\n          house_number: householdData.house_number || '',\n          street_id: null, // Will need to be looked up from streetName\n          subdivision_id: null, // Will need to be looked up from subdivisionName\n          barangay_code: effectiveBarangayCode,\n          city_municipality_code: householdData.city_municipality_code || user.cityCode || null,\n          province_code: householdData.province_code || user.provinceCode || null,\n          region_code: householdData.region_code || user.regionCode || null,\n          zip_code: householdData.zip_code || null,\n          no_of_families: householdData.no_of_families || 1,\n          no_of_household_members: householdData.no_of_household_members || 0,\n          no_of_migrants: householdData.no_of_migrants || 0,\n          household_type: householdData.household_type || null,\n          tenure_status: householdData.tenure_status || null,\n          tenure_others_specify: householdData.tenure_others_specify || null,\n          household_unit: householdData.household_unit || null,\n          monthly_income: householdData.monthly_income || null,\n          income_class: householdData.income_class || null,\n          household_head_id: householdData.household_head_id || null, // UUID reference\n          household_head_position: householdData.household_head_position || null,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        };\n\n        // Insert household\n        const { data: newHousehold, error: insertError } = await (\n          supabaseAdmin.from('households') as any\n        )\n          .insert([insertData])\n          .select('*')\n          .single();\n\n        if (insertError) {\n          // Re-throw error to be handled by withErrorHandling wrapper\n          throw insertError;\n        }\n\n        // Audit the creation\n        await auditDataOperation(\n          'create',\n          'household',\n          String((newHousehold as { id?: string })?.id ?? householdData.code),\n          context,\n          {\n            barangay_code: effectiveBarangayCode,\n            householdCode: householdData.code,\n          }\n        );\n\n        return createCreatedResponse(\n          {\n            household: newHousehold,\n          },\n          'Household created successfully',\n          context\n        );\n      }\n    )\n  )\n);\n\n// Export rate limiting rules for this endpoint\n// export const rateLimitConfig = {\n//   GET: RATE_LIMIT_RULES.SEARCH_RESIDENTS,\n//   POST: RATE_LIMIT_RULES.RESIDENT_CREATE\n// };\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/logging/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/psgc/lookup/route.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":16,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":16,"endColumn":44},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":17,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":17,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[794,797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[794,797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'regError' is assigned a value but never used.","line":203,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":203,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@supabase/supabase-js';\nimport { NextRequest, NextResponse } from 'next/server';\n// Force rebuild - fixed switch case scoping issue (v2)\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const code = searchParams.get('code');\n\n    if (!code || code.trim().length < 6) {\n      return NextResponse.json({ error: 'Valid PSGC code is required' }, { status: 400 });\n    }\n\n    // Use service role client to bypass RLS for geographic data\n    const supabase = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!\n    );\n\n    const lookupCode = code.trim();\n\n    // Determine level based on code length and structure\n    let level: string;\n    let result: any = null;\n\n    if (lookupCode.length === 2) {\n      level = 'region';\n    } else if (lookupCode.length === 4) {\n      level = 'province';\n    } else if (lookupCode.length === 6) {\n      level = 'city';\n    } else if (lookupCode.length >= 9) {\n      level = 'barangay';\n    } else {\n      return NextResponse.json({ error: 'Invalid PSGC code format' }, { status: 400 });\n    }\n\n    // Look up based on determined level\n    switch (level) {\n      case 'region': {\n        const { data: regionData, error: regionError } = await supabase\n          .from('psgc_regions')\n          .select('code, name')\n          .eq('code', lookupCode)\n          .single();\n\n        if (regionError || !regionData) {\n          return NextResponse.json({ error: 'Region not found' }, { status: 404 });\n        }\n\n        result = {\n          code: regionData.code,\n          name: regionData.name,\n          level: 'region',\n          region_code: regionData.code,\n          region_name: regionData.name,\n          full_address: regionData.name,\n        };\n        break;\n      }\n\n      case 'province': {\n        const { data: provinceData, error: provinceError } = await supabase\n          .from('psgc_provinces')\n          .select(\n            `\n            code,\n            name,\n            region_code,\n            psgc_regions (code, name)\n          `\n          )\n          .eq('code', lookupCode)\n          .single();\n\n        if (provinceError || !provinceData) {\n          return NextResponse.json({ error: 'Province not found' }, { status: 404 });\n        }\n\n        const province = provinceData as {\n          code: string;\n          name: string;\n          region_code: string;\n          psgc_regions: { code: string; name: string }[] | null;\n        };\n        const region = Array.isArray(province.psgc_regions)\n          ? province.psgc_regions[0]\n          : province.psgc_regions;\n        result = {\n          code: province.code,\n          name: province.name,\n          level: 'province',\n          province_code: province.code,\n          province_name: province.name,\n          region_code: region?.code,\n          region_name: region?.name,\n          full_address: [province.name, region?.name].filter(Boolean).join(', '),\n        };\n        break;\n      }\n\n      case 'city': {\n        const { data: cityData, error: cityError } = await supabase\n          .from('psgc_cities_municipalities')\n          .select(\n            `\n            code,\n            name,\n            type,\n            is_independent,\n            province_code,\n            psgc_provinces (\n              code,\n              name,\n              region_code,\n              psgc_regions (code, name)\n            )\n          `\n          )\n          .eq('code', lookupCode)\n          .single();\n\n        if (cityError || !cityData) {\n          return NextResponse.json({ error: 'City/Municipality not found' }, { status: 404 });\n        }\n\n        const city = cityData as {\n          code: string;\n          name: string;\n          type: string;\n          is_independent: boolean;\n          province_code: string;\n          psgc_provinces:\n            | {\n                code: string;\n                name: string;\n                region_code: string;\n                psgc_regions: { code: string; name: string }[] | null;\n              }[]\n            | null;\n        };\n        const cityProvince = Array.isArray(city.psgc_provinces)\n          ? city.psgc_provinces[0]\n          : city.psgc_provinces;\n        const cityRegion = cityProvince?.psgc_regions\n          ? Array.isArray(cityProvince.psgc_regions)\n            ? cityProvince.psgc_regions[0]\n            : cityProvince.psgc_regions\n          : null;\n        result = {\n          code: city.code,\n          name: city.name,\n          level: 'city',\n          type: city.type,\n          city_code: city.code,\n          city_name: city.name,\n          city_type: city.type,\n          province_code: cityProvince?.code,\n          province_name: cityProvince?.name,\n          region_code: cityRegion?.code,\n          region_name: cityRegion?.name,\n          full_address: [city.name, cityProvince?.name, cityRegion?.name]\n            .filter(Boolean)\n            .join(', '),\n        };\n        break;\n      }\n\n      case 'barangay': {\n        // First get the barangay data\n        const { data: barangayData, error: barangayError } = await supabase\n          .from('psgc_barangays')\n          .select('code, name, city_municipality_code')\n          .eq('code', lookupCode)\n          .single();\n\n        if (barangayError || !barangayData) {\n          return NextResponse.json({ error: 'Barangay not found' }, { status: 404 });\n        }\n\n        // Then get the city data separately\n        const { data: cityData, error: cityError } = await supabase\n          .from('psgc_cities_municipalities')\n          .select('code, name, type, province_code')\n          .eq('code', barangayData.city_municipality_code)\n          .single();\n\n        // Then get the province data separately\n        let provinceData = null;\n        let regionData = null;\n\n        if (cityData && !cityError) {\n          const { data: provData, error: provError } = await supabase\n            .from('psgc_provinces')\n            .select('code, name, region_code')\n            .eq('code', cityData.province_code)\n            .single();\n\n          provinceData = provData;\n\n          // Finally get the region data\n          if (provData && !provError) {\n            const { data: regData, error: regError } = await supabase\n              .from('psgc_regions')\n              .select('code, name')\n              .eq('code', provData.region_code)\n              .single();\n\n            regionData = regData;\n          }\n        }\n\n        result = {\n          code: barangayData.code,\n          name: barangayData.name,\n          level: 'barangay',\n          barangay_code: barangayData.code,\n          barangay_name: barangayData.name,\n          city_code: cityData?.code,\n          city_name: cityData?.name,\n          city_type: cityData?.type,\n          province_code: provinceData?.code,\n          province_name: provinceData?.name,\n          region_code: regionData?.code,\n          region_name: regionData?.name,\n          full_address: [barangayData.name, cityData?.name, provinceData?.name, regionData?.name]\n            .filter(Boolean)\n            .join(', '),\n        };\n        break;\n      }\n\n      default:\n        return NextResponse.json({ error: 'Unsupported PSGC level' }, { status: 400 });\n    }\n\n    return NextResponse.json({\n      data: result,\n      level: level,\n    });\n  } catch (error) {\n    console.error('PSGC lookup API error:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/psgc/search/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'maxLevel' is assigned a value but never used.","line":14,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'minLevel' is assigned a value but never used.","line":15,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3604,3607],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3604,3607],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4088,4091],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4088,4091],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":150,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5014,5017],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5014,5017],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":221,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7069,7072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7069,7072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":245,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7942,7945],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7942,7945],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":358,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":358,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11284,11287],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11284,11287],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":386,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":386,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12348,12351],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12348,12351],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":414,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":414,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13405,13408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13405,13408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":442,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":442,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14428,14431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14428,14431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":447,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":447,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14552,14555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14552,14555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":450,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":450,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14650,14653],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14650,14653],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":450,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":450,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14658,14661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14658,14661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@supabase/supabase-js';\nimport { NextRequest, NextResponse } from 'next/server';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const query = searchParams.get('q');\n    const limit = parseInt(searchParams.get('limit') || '20', 10);\n    const offset = parseInt(searchParams.get('offset') || '0', 10);\n    const rawLevels = searchParams.get('levels') || 'city';\n    // Handle 'all' levels parameter by including all geographic levels\n    const levels =\n      rawLevels === 'all' ? ['region', 'province', 'city', 'barangay'] : rawLevels.split(',');\n    const maxLevel = searchParams.get('maxLevel') || 'city';\n    const minLevel = searchParams.get('minLevel') || 'region';\n\n    if (!query || query.trim().length < 2) {\n      // Return empty results instead of error for graceful handling\n      return NextResponse.json({ data: [], count: 0 });\n    }\n\n    // Use anon key with proper RLS for geographic data\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n    const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n\n    if (!supabaseUrl || !supabaseAnonKey) {\n      return NextResponse.json({ error: 'Missing Supabase configuration' }, { status: 500 });\n    }\n\n    const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n    const rawQuery = query.trim().toLowerCase();\n\n    // Create comprehensive search variations for fuzzy matching\n    const variations = [\n      `%${rawQuery}%`, // Basic contains search\n      `${rawQuery}%`, // Starts with\n      `%${rawQuery}`, // Ends with\n    ];\n\n    // Split query into words for multi-word fuzzy matching\n    const words = rawQuery.split(/\\s+/).filter(w => w.length > 0);\n    if (words.length > 1) {\n      // Add individual word searches\n      words.forEach(word => {\n        if (word.length >= 2) {\n          variations.push(`%${word}%`);\n        }\n      });\n\n      // Add reversed word order\n      const reversed = words.reverse().join(' ');\n      variations.push(`%${reversed}%`);\n    }\n\n    // Handle common abbreviations and variations\n    const commonVariations: Record<string, string[]> = {\n      cav: ['cavite'],\n      bgc: ['bonifacio global city', 'taguig'],\n      qc: ['quezon city'],\n      mm: ['metro manila', 'manila'],\n      ncr: ['national capital region', 'metro manila'],\n      mla: ['manila'],\n      makat: ['makati'],\n      pasig: ['pasig city'],\n      taguig: ['taguig city'],\n    };\n\n    // Add abbreviation expansions\n    Object.entries(commonVariations).forEach(([abbr, expansions]) => {\n      if (rawQuery.includes(abbr)) {\n        expansions.forEach(expansion => {\n          variations.push(`%${expansion}%`);\n          variations.push(`%${expansion.replace(/\\s+/g, '')}%`); // Without spaces\n        });\n      }\n    });\n\n    // Handle common prefixes and suffixes\n    if (rawQuery.includes('city')) {\n      const cityName = rawQuery.replace(/\\s*city\\s*/g, '').trim();\n      if (cityName) {\n        variations.push(`%city of ${cityName}%`);\n        variations.push(`%${cityName}%`);\n        variations.push(`%${cityName} city%`);\n      }\n    }\n\n    if (rawQuery.includes('municipality')) {\n      const munName = rawQuery.replace(/\\s*municipality\\s*/g, '').trim();\n      if (munName) {\n        variations.push(`%municipality of ${munName}%`);\n        variations.push(`%${munName}%`);\n        variations.push(`%${munName} municipality%`);\n      }\n    }\n\n    // Remove duplicates and empty variations\n    const uniqueVariations = Array.from(new Set(variations)).filter(v => v.length > 2);\n\n    const allResults: any[] = [];\n\n    // Search regions if requested\n    if (levels.includes('region')) {\n      const regionSearchPromises = uniqueVariations.map(term =>\n        supabase\n          .from('psgc_regions')\n          .select('code, name')\n          .ilike('name', term)\n          .limit(Math.min(limit, 10))\n      );\n\n      const regionResults = await Promise.all(regionSearchPromises);\n      regionResults.forEach(result => {\n        if (result.data) {\n          result.data.forEach((region: any) => {\n            allResults.push({\n              code: region.code,\n              name: region.name,\n              level: 'region',\n              region_code: region.code,\n              region_name: region.name,\n              full_address: region.name,\n            });\n          });\n        }\n      });\n    }\n\n    // Search provinces if requested\n    if (levels.includes('province')) {\n      const provinceSearchPromises = uniqueVariations.map(term =>\n        supabase\n          .from('psgc_provinces')\n          .select(\n            `\n            code,\n            name,\n            region_code,\n            psgc_regions (code, name)\n          `\n          )\n          .ilike('name', term)\n          .limit(Math.min(limit, 15))\n      );\n\n      const provinceResults = await Promise.all(provinceSearchPromises);\n      provinceResults.forEach(result => {\n        if (result.data) {\n          result.data.forEach((province: any) => {\n            const region = province.psgc_regions;\n            allResults.push({\n              code: province.code,\n              name: province.name,\n              level: 'province',\n              province_code: province.code,\n              province_name: province.name,\n              region_code: region?.code,\n              region_name: region?.name,\n              full_address: [province.name, region?.name].filter(Boolean).join(', '),\n            });\n          });\n        }\n      });\n    }\n\n    // Search cities/municipalities if requested\n    if (levels.includes('city')) {\n      // First search cities by name\n      const citySearchPromises = uniqueVariations.map(term =>\n        supabase\n          .from('psgc_cities_municipalities')\n          .select(\n            `\n            code,\n            name,\n            type,\n            is_independent,\n            province_code,\n            psgc_provinces (\n              code,\n              name,\n              region_code,\n              psgc_regions (code, name)\n            )\n          `\n          )\n          .ilike('name', term)\n          .limit(Math.min(limit, 20))\n      );\n\n      // Also search cities by province name (hierarchical search)\n      const provinceMatchPromises = uniqueVariations.map(term =>\n        supabase\n          .from('psgc_cities_municipalities')\n          .select(\n            `\n            code,\n            name,\n            type,\n            is_independent,\n            province_code,\n            psgc_provinces!inner (\n              code,\n              name,\n              region_code,\n              psgc_regions (code, name)\n            )\n          `\n          )\n          .filter('psgc_provinces.name', 'ilike', term)\n          .limit(Math.min(limit, 25))\n      );\n\n      const cityResults = await Promise.all(citySearchPromises);\n      const provinceMatchResults = await Promise.all(provinceMatchPromises);\n\n      // Process direct city name matches\n      cityResults.forEach(result => {\n        if (result.data) {\n          result.data.forEach((city: any) => {\n            const province = city.psgc_provinces;\n            const region = province?.psgc_regions;\n            allResults.push({\n              code: city.code,\n              name: city.name,\n              level: 'city',\n              type: city.type,\n              city_code: city.code,\n              city_name: city.name,\n              city_type: city.type,\n              province_code: province?.code,\n              province_name: province?.name,\n              region_code: region?.code,\n              region_name: region?.name,\n              full_address: [city.name, province?.name, region?.name].filter(Boolean).join(', '),\n            });\n          });\n        }\n      });\n\n      // Process cities found by province name (hierarchical matches)\n      provinceMatchResults.forEach(result => {\n        if (result.data) {\n          result.data.forEach((city: any) => {\n            const province = city.psgc_provinces;\n            const region = province?.psgc_regions;\n            allResults.push({\n              code: city.code,\n              name: city.name,\n              level: 'city',\n              type: city.type,\n              city_code: city.code,\n              city_name: city.name,\n              city_type: city.type,\n              province_code: province?.code,\n              province_name: province?.name,\n              region_code: region?.code,\n              region_name: region?.name,\n              full_address: [city.name, province?.name, region?.name].filter(Boolean).join(', '),\n            });\n          });\n        }\n      });\n    }\n\n    // Search barangays if requested\n    if (levels.includes('barangay')) {\n      // Direct barangay name matches\n      const barangaySearchPromises = uniqueVariations.map(term =>\n        supabase\n          .from('psgc_barangays')\n          .select(\n            `\n            code,\n            name,\n            city_municipality_code,\n            psgc_cities_municipalities (\n              code,\n              name,\n              type,\n              province_code,\n              psgc_provinces (\n                code,\n                name,\n                region_code,\n                psgc_regions (code, name)\n              )\n            )\n          `\n          )\n          .ilike('name', term)\n          .limit(Math.min(limit, 25))\n      );\n\n      // Hierarchical search: barangays within matching provinces\n      const barangayByProvincePromises = uniqueVariations.map(term =>\n        supabase\n          .from('psgc_barangays')\n          .select(\n            `\n            code,\n            name,\n            city_municipality_code,\n            psgc_cities_municipalities!inner (\n              code,\n              name,\n              type,\n              province_code,\n              psgc_provinces!inner (\n                code,\n                name,\n                region_code,\n                psgc_regions (code, name)\n              )\n            )\n          `\n          )\n          .filter('psgc_cities_municipalities.psgc_provinces.name', 'ilike', term)\n          .limit(Math.min(limit, 30))\n      );\n\n      // Hierarchical search: barangays within matching cities\n      const barangayByCityPromises = uniqueVariations.map(term =>\n        supabase\n          .from('psgc_barangays')\n          .select(\n            `\n            code,\n            name,\n            city_municipality_code,\n            psgc_cities_municipalities!inner (\n              code,\n              name,\n              type,\n              province_code,\n              psgc_provinces (\n                code,\n                name,\n                region_code,\n                psgc_regions (code, name)\n              )\n            )\n          `\n          )\n          .filter('psgc_cities_municipalities.name', 'ilike', term)\n          .limit(Math.min(limit, 20))\n      );\n\n      const barangayByProvinceResults = await Promise.all(barangayByProvincePromises);\n      const barangayByCityResults = await Promise.all(barangayByCityPromises);\n\n      const barangayResults = await Promise.all(barangaySearchPromises);\n\n      // Process direct barangay name matches\n      barangayResults.forEach(result => {\n        if (result.data) {\n          result.data.forEach((barangay: any) => {\n            const city = barangay.psgc_cities_municipalities;\n            const province = city?.psgc_provinces;\n            const region = province?.psgc_regions;\n            allResults.push({\n              code: barangay.code,\n              name: barangay.name,\n              level: 'barangay',\n              barangay_code: barangay.code,\n              barangay_name: barangay.name,\n              city_code: city?.code,\n              city_name: city?.name,\n              city_type: city?.type,\n              province_code: province?.code,\n              province_name: province?.name,\n              region_code: region?.code,\n              region_name: region?.name,\n              full_address: [barangay.name, city?.name, province?.name, region?.name]\n                .filter(Boolean)\n                .join(', '),\n            });\n          });\n        }\n      });\n\n      // Process hierarchical matches (barangays within provinces)\n      barangayByProvinceResults.forEach(result => {\n        if (result.data) {\n          result.data.forEach((barangay: any) => {\n            const city = barangay.psgc_cities_municipalities;\n            const province = city?.psgc_provinces;\n            const region = province?.psgc_regions;\n            allResults.push({\n              code: barangay.code,\n              name: barangay.name,\n              level: 'barangay',\n              barangay_code: barangay.code,\n              barangay_name: barangay.name,\n              city_code: city?.code,\n              city_name: city?.name,\n              city_type: city?.type,\n              province_code: province?.code,\n              province_name: province?.name,\n              region_code: region?.code,\n              region_name: region?.name,\n              full_address: [barangay.name, city?.name, province?.name, region?.name]\n                .filter(Boolean)\n                .join(', '),\n            });\n          });\n        }\n      });\n\n      // Process hierarchical matches (barangays within cities)\n      barangayByCityResults.forEach(result => {\n        if (result.data) {\n          result.data.forEach((barangay: any) => {\n            const city = barangay.psgc_cities_municipalities;\n            const province = city?.psgc_provinces;\n            const region = province?.psgc_regions;\n            allResults.push({\n              code: barangay.code,\n              name: barangay.name,\n              level: 'barangay',\n              barangay_code: barangay.code,\n              barangay_name: barangay.name,\n              city_code: city?.code,\n              city_name: city?.name,\n              city_type: city?.type,\n              province_code: province?.code,\n              province_name: province?.name,\n              region_code: region?.code,\n              region_name: region?.name,\n              full_address: [barangay.name, city?.name, province?.name, region?.name]\n                .filter(Boolean)\n                .join(', '),\n            });\n          });\n        }\n      });\n    }\n\n    // Remove duplicates based on code\n    const uniqueResults = allResults.reduce((acc, current) => {\n      const exists = acc.find((item: any) => item.code === current.code);\n      if (!exists) {\n        acc.push(current);\n      }\n      return acc;\n    }, [] as any[]);\n\n    // Enhanced sorting by relevance and geographic hierarchy\n    uniqueResults.sort((a: any, b: any) => {\n      // First priority: Direct name matches (exact or starts with query)\n      const aDirectMatch = a.name.toLowerCase().startsWith(rawQuery) ? 1 : 0;\n      const bDirectMatch = b.name.toLowerCase().startsWith(rawQuery) ? 1 : 0;\n      if (aDirectMatch !== bDirectMatch) return bDirectMatch - aDirectMatch;\n\n      // Second priority: Exact matches within direct matches\n      if (aDirectMatch && bDirectMatch) {\n        const aExactMatch = a.name.toLowerCase() === rawQuery ? 1 : 0;\n        const bExactMatch = b.name.toLowerCase() === rawQuery ? 1 : 0;\n        if (aExactMatch !== bExactMatch) return bExactMatch - aExactMatch;\n      }\n\n      // Third priority: Geographic hierarchy grouping\n      // Group by province first, then by city within province, then barangays within city\n      if (a.province_name !== b.province_name) {\n        return (a.province_name || '').localeCompare(b.province_name || '');\n      }\n\n      // Within same province: create city groups (city followed by its barangays)\n      if (a.city_name !== b.city_name) {\n        return (a.city_name || '').localeCompare(b.city_name || '');\n      }\n\n      // Within same city: city comes first, then its barangays alphabetically\n      const levelOrder = { region: 1, province: 2, city: 3, barangay: 4 };\n      const levelDiff =\n        levelOrder[a.level as keyof typeof levelOrder] -\n        levelOrder[b.level as keyof typeof levelOrder];\n      if (levelDiff !== 0) return levelDiff;\n\n      // Final priority: Alphabetical by name\n      return a.name.localeCompare(b.name);\n    });\n\n    // Apply pagination\n    const totalCount = uniqueResults.length;\n    const startIndex = Math.max(0, offset);\n    const endIndex = Math.min(startIndex + limit, totalCount, startIndex + 100); // Cap at 100 per request\n    const data = uniqueResults.slice(startIndex, endIndex);\n\n    return NextResponse.json({\n      data: data,\n      count: data.length,\n      totalCount: totalCount,\n      offset: startIndex,\n      hasMore: endIndex < totalCount,\n    });\n  } catch (error) {\n    console.error('Address search API error:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/psoc/search/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[836,839],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[836,839],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4062,4065],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4062,4065],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4186,4189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4186,4189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4506,4509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4506,4509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4514,4517],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4514,4517],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n\nimport { databaseService } from '@/services/database-service';\nimport { PSocRecord } from '@/types/api';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const query = searchParams.get('q');\n    const limit = parseInt(searchParams.get('limit') || '20', 10);\n    const levels = searchParams.get('levels')?.split(',') || ['occupation']; // Default to occupations only\n\n    if (!query || query.trim().length < 2) {\n      // Return empty results instead of error for graceful handling\n      return NextResponse.json({ data: [], count: 0 });\n    }\n\n    // Use public client for PSOC data search\n    const supabase = databaseService.getPublicClient();\n\n    const searchTerm = `%${query.trim()}%`;\n    const allResults: any[] = [];\n\n    // Search major groups if requested\n    if (levels.includes('major_group')) {\n      const { data: majorGroups } = await supabase\n        .from('psoc_major_groups')\n        .select('*')\n        .ilike('title', searchTerm)\n        .limit(Math.min(limit, 5));\n\n      if (majorGroups) {\n        majorGroups.forEach((item: PSocRecord) => {\n          allResults.push({\n            code: item.code,\n            title: item.title,\n            level: 'major_group',\n            hierarchy: `Major Group: ${item.title}`,\n            match_score: 1,\n          });\n        });\n      }\n    }\n\n    // Search sub major groups if requested\n    if (levels.includes('sub_major_group')) {\n      const { data: subMajorGroups } = await supabase\n        .from('psoc_sub_major_groups')\n        .select('*')\n        .ilike('title', searchTerm)\n        .limit(Math.min(limit, 10));\n\n      if (subMajorGroups) {\n        subMajorGroups.forEach((item: PSocRecord) => {\n          allResults.push({\n            code: item.code,\n            title: item.title,\n            level: 'sub_major_group',\n            hierarchy: `Sub Major Group: ${item.title}`,\n            match_score: 2,\n          });\n        });\n      }\n    }\n\n    // Search unit groups if requested\n    if (levels.includes('unit_group')) {\n      const { data: unitGroups } = await supabase\n        .from('psoc_unit_groups')\n        .select('*')\n        .ilike('title', searchTerm)\n        .limit(Math.min(limit, 10));\n\n      if (unitGroups) {\n        unitGroups.forEach((item: PSocRecord) => {\n          allResults.push({\n            code: item.code,\n            title: item.title,\n            level: 'unit_group',\n            hierarchy: `Unit Group: ${item.title}`,\n            match_score: 3,\n          });\n        });\n      }\n    }\n\n    // Search unit sub groups if requested\n    if (levels.includes('unit_sub_group')) {\n      const { data: unitSubGroups } = await supabase\n        .from('psoc_unit_sub_groups')\n        .select('*')\n        .ilike('title', searchTerm)\n        .limit(Math.min(limit, 10));\n\n      if (unitSubGroups) {\n        unitSubGroups.forEach((item: PSocRecord) => {\n          allResults.push({\n            code: item.code,\n            title: item.title,\n            level: 'unit_sub_group',\n            hierarchy: `Unit Sub Group: ${item.title}`,\n            match_score: 4,\n          });\n        });\n      }\n    }\n\n    // Search occupations if requested (most specific)\n    if (levels.includes('occupation')) {\n      const { data: occupations } = await supabase\n        .from('psoc_occupation_search')\n        .select('*')\n        .ilike('occupation_title', searchTerm)\n        .limit(Math.min(limit, 15));\n\n      if (occupations) {\n        occupations.forEach((item: PSocRecord) => {\n          allResults.push({\n            code: item.occupation_code,\n            title: item.occupation_title,\n            level: 'occupation',\n            hierarchy: item.full_hierarchy || item.occupation_title,\n            match_score: 5, // Highest priority for specific occupations\n          });\n        });\n      }\n    }\n\n    // Remove duplicates based on code\n    const uniqueResults = allResults.reduce((acc, current) => {\n      const exists = acc.find((item: any) => item.code === current.code);\n      if (!exists) {\n        acc.push(current);\n      }\n      return acc;\n    }, [] as any[]);\n\n    // Sort by level hierarchy (major_group -> occupation) and then by match score\n    const levelOrder: Record<string, number> = {\n      major_group: 1,\n      sub_major_group: 2,\n      unit_group: 3,\n      unit_sub_group: 4,\n      occupation: 5,\n    };\n\n    const sortedResults = uniqueResults\n      .sort((a: any, b: any) => {\n        const levelDiff = (levelOrder[a.level] || 0) - (levelOrder[b.level] || 0);\n        if (levelDiff !== 0) return levelDiff;\n        return (b.match_score || 0) - (a.match_score || 0);\n      })\n      .slice(0, limit);\n\n    return NextResponse.json({\n      data: sortedResults,\n      count: sortedResults.length,\n      total_found: uniqueResults.length,\n    });\n  } catch (error) {\n    console.error('PSOC search error:', error);\n    return NextResponse.json(\n      {\n        error: 'Failed to search PSOC data',\n        data: [],\n        count: 0,\n      },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/residents/[id]/migration/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2150,2153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2150,2153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5548,5551],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5548,5551],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":244,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8185,8188],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8185,8188],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":299,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":299,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9849,9852],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9849,9852],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\n\nimport { createPublicSupabaseClient, createAdminSupabaseClient } from '@/lib/data/client-factory';\nimport type { ResidentWithHousehold } from '@/types/api';\nimport type { AuthUserProfile } from '@/types/auth';\n\n// Migration information validation schema\nconst migrationInfoSchema = z.object({\n  previous_barangay_code: z.string().max(10).optional().or(z.literal('')),\n  previous_city_municipality_code: z.string().max(10).optional().or(z.literal('')),\n  previous_province_code: z.string().max(10).optional().or(z.literal('')),\n  previous_region_code: z.string().max(10).optional().or(z.literal('')),\n  date_of_transfer: z.string().optional().or(z.literal('')),\n  reason_for_leaving: z.string().max(500).optional().or(z.literal('')),\n  reason_for_transferring: z.string().max(500).optional().or(z.literal('')),\n  length_of_stay_previous_months: z.number().int().min(0).optional(),\n  duration_of_stay_current_months: z.number().int().min(0).optional(),\n  is_intending_to_return: z.boolean().optional(),\n});\n\n// GET /api/residents/[id]/migration - Get migration information\nexport async function GET(request: NextRequest, { params }: { params: Promise<{ id: string }> }) {\n  try {\n    const resolvedParams = await params;\n    const residentId = resolvedParams.id;\n\n    // Get auth header from the request\n    const authHeader = request.headers.get('Authorization') || request.headers.get('authorization');\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json({ error: 'Unauthorized - No auth token' }, { status: 401 });\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    // Create regular client to verify user\n    const supabase = createPublicSupabaseClient();\n\n    // Verify the user token\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser(token);\n\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n    }\n\n    // Use service role client to bypass RLS\n    const supabaseAdmin = createAdminSupabaseClient() as any;\n\n    // Get user profile to verify barangay access\n    const profileResult = await supabaseAdmin\n      .from('auth_user_profiles')\n      .select('barangay_code')\n      .eq('id', user.id)\n      .single();\n\n    const userProfile = profileResult.data as AuthUserProfile | null;\n    const profileError = profileResult.error;\n\n    if (profileError || !userProfile?.barangay_code) {\n      return NextResponse.json(\n        { error: 'User profile not found or no barangay assigned' },\n        { status: 400 }\n      );\n    }\n\n    // Verify resident access through household\n    const residentResult = await supabaseAdmin\n      .from('residents')\n      .select(\n        `\n        id,\n        households!inner(barangay_code)\n      `\n      )\n      .eq('id', residentId)\n      .eq('households.barangay_code', userProfile.barangay_code)\n      .single();\n\n    const resident = residentResult.data as ResidentWithHousehold | null;\n    const residentError = residentResult.error;\n\n    if (residentError || !resident) {\n      return NextResponse.json({ error: 'Resident not found or access denied' }, { status: 404 });\n    }\n\n    // Get migration information\n    const { data: migrationInfo, error: migrationError } = await supabaseAdmin\n      .from('resident_migrant_info')\n      .select('*')\n      .eq('resident_id', residentId)\n      .maybeSingle();\n\n    if (migrationError) {\n      console.error('Migration info query error:', migrationError);\n      return NextResponse.json({ error: 'Failed to fetch migration information' }, { status: 500 });\n    }\n\n    return NextResponse.json({\n      migrationInfo: migrationInfo || null,\n      message: 'Migration information retrieved successfully',\n    });\n  } catch (error) {\n    console.error('Migration info API error:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n\n// PUT /api/residents/[id]/migration - Update migration information\nexport async function PUT(request: NextRequest, { params }: { params: Promise<{ id: string }> }) {\n  try {\n    const resolvedParams = await params;\n    const residentId = resolvedParams.id;\n    const migrationData = await request.json();\n\n    // Validate migration data\n    const validationResult = migrationInfoSchema.safeParse(migrationData);\n    if (!validationResult.success) {\n      return NextResponse.json(\n        {\n          error: 'Validation failed',\n          details: validationResult.error.issues.map(issue => ({\n            field: issue.path.join('.'),\n            message: issue.message,\n          })),\n        },\n        { status: 400 }\n      );\n    }\n\n    // Get auth header from the request\n    const authHeader = request.headers.get('Authorization') || request.headers.get('authorization');\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json({ error: 'Unauthorized - No auth token' }, { status: 401 });\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    // Create regular client to verify user\n    const supabase = createPublicSupabaseClient();\n\n    // Verify the user token\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser(token);\n\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n    }\n\n    // Use service role client to bypass RLS\n    const supabaseAdmin = createAdminSupabaseClient() as any;\n\n    // Get user profile to verify barangay access\n    const profileResult = await supabaseAdmin\n      .from('auth_user_profiles')\n      .select('barangay_code')\n      .eq('id', user.id)\n      .single();\n\n    const userProfile = profileResult.data as AuthUserProfile | null;\n    const profileError = profileResult.error;\n\n    if (profileError || !userProfile?.barangay_code) {\n      return NextResponse.json(\n        { error: 'User profile not found or no barangay assigned' },\n        { status: 400 }\n      );\n    }\n\n    // Verify resident access through household\n    const residentResult = await supabaseAdmin\n      .from('residents')\n      .select(\n        `\n        id,\n        households!inner(barangay_code)\n      `\n      )\n      .eq('id', residentId)\n      .eq('households.barangay_code', userProfile.barangay_code)\n      .single();\n\n    const resident = residentResult.data as ResidentWithHousehold | null;\n    const residentError = residentResult.error;\n\n    if (residentError || !resident) {\n      return NextResponse.json({ error: 'Resident not found or access denied' }, { status: 404 });\n    }\n\n    // Check if migration record exists\n    const { data: existingMigration, error: checkError } = await supabaseAdmin\n      .from('resident_migrant_info')\n      .select('id')\n      .eq('resident_id', residentId)\n      .maybeSingle();\n\n    if (checkError) {\n      console.error('Migration check error:', checkError);\n      return NextResponse.json({ error: 'Failed to check migration information' }, { status: 500 });\n    }\n\n    const updateData = {\n      ...validationResult.data,\n      updated_at: new Date().toISOString(),\n    };\n\n    if (existingMigration) {\n      // Update existing record\n      const { data: updatedMigration, error: updateError } = await supabaseAdmin\n        .from('resident_migrant_info')\n        .update(updateData)\n        .eq('resident_id', residentId)\n        .select()\n        .single();\n\n      if (updateError) {\n        console.error('Migration update error:', updateError);\n        return NextResponse.json(\n          { error: 'Failed to update migration information' },\n          { status: 500 }\n        );\n      }\n\n      return NextResponse.json({\n        migrationInfo: updatedMigration,\n        message: 'Migration information updated successfully',\n      });\n    } else {\n      // Create new record\n      const insertData = {\n        resident_id: residentId,\n        ...updateData,\n        created_at: new Date().toISOString(),\n      };\n\n      const { data: newMigration, error: insertError } = await supabaseAdmin\n        .from('resident_migrant_info')\n        .insert(insertData as any)\n        .select()\n        .single();\n\n      if (insertError) {\n        console.error('Migration insert error:', insertError);\n        return NextResponse.json(\n          { error: 'Failed to create migration information' },\n          { status: 500 }\n        );\n      }\n\n      return NextResponse.json({\n        migrationInfo: newMigration,\n        message: 'Migration information created successfully',\n      });\n    }\n  } catch (error) {\n    console.error('Migration info API error:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n\n// DELETE /api/residents/[id]/migration - Delete migration information\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const resolvedParams = await params;\n    const residentId = resolvedParams.id;\n\n    // Get auth header from the request\n    const authHeader = request.headers.get('Authorization') || request.headers.get('authorization');\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json({ error: 'Unauthorized - No auth token' }, { status: 401 });\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    // Create regular client to verify user\n    const supabase = createPublicSupabaseClient();\n\n    // Verify the user token\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser(token);\n\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n    }\n\n    // Use service role client to bypass RLS\n    const supabaseAdmin = createAdminSupabaseClient() as any;\n\n    // Get user profile to verify barangay access\n    const profileResult = await supabaseAdmin\n      .from('auth_user_profiles')\n      .select('barangay_code')\n      .eq('id', user.id)\n      .single();\n\n    const userProfile = profileResult.data as AuthUserProfile | null;\n    const profileError = profileResult.error;\n\n    if (profileError || !userProfile?.barangay_code) {\n      return NextResponse.json(\n        { error: 'User profile not found or no barangay assigned' },\n        { status: 400 }\n      );\n    }\n\n    // Verify resident access through household\n    const residentResult = await supabaseAdmin\n      .from('residents')\n      .select(\n        `\n        id,\n        households!inner(barangay_code)\n      `\n      )\n      .eq('id', residentId)\n      .eq('households.barangay_code', userProfile.barangay_code)\n      .single();\n\n    const resident = residentResult.data as ResidentWithHousehold | null;\n    const residentError = residentResult.error;\n\n    if (residentError || !resident) {\n      return NextResponse.json({ error: 'Resident not found or access denied' }, { status: 404 });\n    }\n\n    // Delete migration information\n    const { error: deleteError } = await supabaseAdmin\n      .from('resident_migrant_info')\n      .delete()\n      .eq('resident_id', residentId);\n\n    if (deleteError) {\n      console.error('Migration delete error:', deleteError);\n      return NextResponse.json(\n        { error: 'Failed to delete migration information' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      message: 'Migration information deleted successfully',\n    });\n  } catch (error) {\n    console.error('Migration delete API error:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/residents/[id]/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextResponse' is defined but never used.","line":1,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Role' is defined but never used.","line":17,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1503,1506],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1503,1506],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sectoralError' is assigned a value but never used.","line":127,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":173,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5338,5341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5338,5341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":224,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6970,6973],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6970,6973],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":249,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7799,7802],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7799,7802],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":382,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":382,"endColumn":20,"suggestions":[{"fix":{"range":[12589,12679],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":390,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":390,"endColumn":20,"suggestions":[{"fix":{"range":[12965,13046],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":400,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":400,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13438,13441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13438,13441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":413,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":413,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13867,13870],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13867,13870],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":584,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":584,"endColumn":22,"suggestions":[{"fix":{"range":[21478,21640],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":613,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":613,"endColumn":24,"suggestions":[{"fix":{"range":[22529,22593],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":623,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":623,"endColumn":24,"suggestions":[{"fix":{"range":[22949,23087],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":647,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":647,"endColumn":24,"suggestions":[{"fix":{"range":[23891,23957],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":738,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":738,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26946,26949],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26946,26949],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\n\nimport {\n  withAuth,\n  createAdminSupabaseClient,\n  getAccessLevel,\n  logger,\n  logError,\n  auditDataOperation,\n  createSuccessResponse,\n  createValidationErrorResponse,\n  withNextRequestErrorHandling,\n  withSecurityHeaders,\n  createResidentSchema,\n} from '@/lib';\nimport { RequestContext, Role } from '@/lib/authentication/types';\nimport { createRateLimitHandler } from '@/lib/security/rate-limit';\nimport { ResidentFormData } from '@/types';\nimport type { AuthenticatedUser } from '@/types/auth';\n\nexport const GET = withSecurityHeaders(\n  withAuth(\n    {\n      requiredPermissions: [\n        'residents.manage.barangay',\n        'residents.manage.city',\n        'residents.manage.province',\n        'residents.manage.region',\n        'residents.manage.all',\n      ],\n    },\n    withNextRequestErrorHandling(\n      async (request: NextRequest, context: RequestContext, user: AuthenticatedUser) => {\n        // Extract params from the URL path since this is a dynamic route\n        const url = new URL(request.url);\n        const pathSegments = url.pathname.split('/');\n        const residentId = pathSegments[pathSegments.length - 1];\n\n        // Apply rate limiting\n        const rateLimitResponse = await createRateLimitHandler('SEARCH_RESIDENTS')(\n          request,\n          user.id\n        );\n        if (rateLimitResponse) return rateLimitResponse;\n\n        const supabaseAdmin = createAdminSupabaseClient() as any;\n\n        // Get access level for geographic filtering\n        const accessLevel = getAccessLevel(user.role);\n\n        // Build query with geographic filtering\n        let query = supabaseAdmin\n          .from('residents')\n          .select(\n            `\n            *,\n            households!inner(\n              code,\n              barangay_code,\n              name,\n              address,\n              house_number,\n              street_id,\n              subdivision_id,\n              city_municipality_code,\n              province_code,\n              region_code,\n              zip_code,\n              no_of_families,\n              no_of_household_members,\n              no_of_migrants,\n              household_type,\n              tenure_status,\n              tenure_others_specify,\n              household_unit,\n              monthly_income,\n              income_class,\n              household_head_id,\n              household_head_position,\n              is_active,\n              created_by,\n              updated_by,\n              created_at,\n              updated_at\n            )\n          `\n          )\n          .eq('id', residentId)\n          .eq('is_active', true);\n\n        // Apply geographic filtering based on user's access level\n        switch (accessLevel) {\n          case 'barangay':\n            if (user.barangayCode) {\n              query = query.eq('households.barangay_code', user.barangayCode);\n            }\n            break;\n          case 'city':\n            if (user.cityCode) {\n              query = query.eq('households.city_municipality_code', user.cityCode);\n            }\n            break;\n          case 'province':\n            if (user.provinceCode) {\n              query = query.eq('households.province_code', user.provinceCode);\n            }\n            break;\n          case 'region':\n            if (user.regionCode) {\n              query = query.eq('households.region_code', user.regionCode);\n            }\n            break;\n          case 'national':\n            // No filtering for national access\n            break;\n        }\n\n        const { data: residentWithHousehold, error: residentError } = await query.single();\n\n        if (residentError || !residentWithHousehold) {\n          logError(new Error('Resident not found'), `ID: ${residentId}`);\n          throw new Error('Resident not found or access denied');\n        }\n\n        // Get sectoral info separately to avoid join issues\n        const { data: sectoralInfoArray, error: sectoralError } = await supabaseAdmin\n          .from('resident_sectoral_info')\n          .select('*')\n          .eq('resident_id', residentId);\n\n        // Handle the array result - take first record if exists\n        const sectoralInfo =\n          sectoralInfoArray && sectoralInfoArray.length > 0 ? sectoralInfoArray[0] : null;\n\n        // Extract household info and merge with resident data\n        const { households, ...residentData } = residentWithHousehold;\n\n        const resident = {\n          ...residentData,\n          ...(sectoralInfo || {}),\n        };\n        const household = households;\n\n        // Get geographic information\n        let geoInfo = {};\n        try {\n          const { data: barangayData } = await supabaseAdmin\n            .from('psgc_barangays')\n            .select(\n              `\n          code,\n          name,\n          psgc_cities_municipalities!inner(\n            code,\n            name,\n            type,\n            psgc_provinces!inner(\n              code,\n              name,\n              psgc_regions!inner(\n                code,\n                name\n              )\n            )\n          )\n          `\n            )\n            .eq('code', household.barangay_code)\n            .single();\n\n          if (barangayData) {\n            const cityMunData = barangayData.psgc_cities_municipalities as any;\n            const province = cityMunData.psgc_provinces;\n            const region = province.psgc_regions;\n\n            geoInfo = {\n              barangay_info: {\n                code: barangayData.code,\n                name: barangayData.name,\n              },\n              city_municipality_info: {\n                code: cityMunData.code,\n                name: cityMunData.name,\n                type: cityMunData.type,\n              },\n              province_info: {\n                code: province.code,\n                name: province.name,\n              },\n              region_info: {\n                code: region.code,\n                name: region.name,\n              },\n            };\n          }\n        } catch (geoError) {\n          console.warn('Geographic info load failed:', geoError);\n        }\n\n        // Get birth place information if birth_place_code exists\n        let birthPlaceInfo = {};\n        if (resident.birth_place_code) {\n          try {\n            // Resolve from PSGC tables directly with hierarchical formatting\n            // Try barangay first (most specific)\n            const { data: barangayData } = await supabaseAdmin\n              .from('psgc_barangays')\n              .select(\n                `\n            code,\n            name,\n            psgc_cities_municipalities!inner(\n              name,\n              type,\n              psgc_provinces!inner(name)\n            )\n          `\n              )\n              .eq('code', resident.birth_place_code)\n              .maybeSingle();\n\n            if (barangayData) {\n              const city = barangayData.psgc_cities_municipalities as any;\n              const province = city.psgc_provinces;\n              birthPlaceInfo = {\n                birth_place_info: {\n                  code: barangayData.code,\n                  name: `${city.name}, ${province.name}`,\n                  level: 'barangay',\n                },\n              };\n            } else {\n              // Try city/municipality\n              const { data: cityData } = await supabaseAdmin\n                .from('psgc_cities_municipalities')\n                .select(\n                  `\n              code,\n              name,\n              type,\n              psgc_provinces!inner(name)\n            `\n                )\n                .eq('code', resident.birth_place_code)\n                .maybeSingle();\n\n              if (cityData) {\n                const province = cityData.psgc_provinces as any;\n                birthPlaceInfo = {\n                  birth_place_info: {\n                    code: cityData.code,\n                    name: `${cityData.name}, ${province.name}`,\n                    level: 'city_municipality',\n                    type: cityData.type, // Include the actual type (city or municipality)\n                  },\n                };\n              } else {\n                // Try province\n                const { data: provinceData } = await supabaseAdmin\n                  .from('psgc_provinces')\n                  .select('code, name')\n                  .eq('code', resident.birth_place_code)\n                  .maybeSingle();\n\n                if (provinceData) {\n                  birthPlaceInfo = {\n                    birth_place_info: {\n                      code: provinceData.code,\n                      name: provinceData.name,\n                      level: 'province',\n                    },\n                  };\n                } else {\n                  // Try region (least specific)\n                  const { data: regionData } = await supabaseAdmin\n                    .from('psgc_regions')\n                    .select('code, name')\n                    .eq('code', resident.birth_place_code)\n                    .maybeSingle();\n\n                  if (regionData) {\n                    birthPlaceInfo = {\n                      birth_place_info: {\n                        code: regionData.code,\n                        name: regionData.name,\n                        level: 'region',\n                      },\n                    };\n                  } else {\n                    // All fallbacks failed\n                    console.warn('Could not resolve birth place:', resident.birth_place_code);\n                  }\n                }\n              }\n            }\n          } catch (birthPlaceError) {\n            console.warn('Birth place info load failed:', birthPlaceError);\n          }\n        }\n\n        // Get occupation title and hierarchy if occupation_code exists\n        let occupationInfo = {};\n        if (resident.occupation_code) {\n          try {\n            const { data: psocData } = await supabaseAdmin\n              .from('psoc_unified_search')\n              .select(\n                'psoc_code, occupation_title, display_text, psoc_level, level_name, parent_code, parent_title'\n              )\n              .eq('psoc_code', resident.occupation_code)\n              .maybeSingle();\n\n            if (psocData) {\n              // Build the complete hierarchy from bottom to top\n              const hierarchyParts = [];\n\n              // Start with the occupation title\n              hierarchyParts.push(psocData.occupation_title);\n\n              // Add parent if it exists (Level 3)\n              if (psocData.parent_title) {\n                hierarchyParts.push(psocData.parent_title);\n              }\n\n              // For a complete hierarchy, we could traverse up further, but\n              // showing occupation + immediate parent is usually sufficient\n              // Full format: \"Graphic And Multimedia Designers › Architects, Planners, Surveyors And Designers\"\n              const hierarchy = hierarchyParts.join(' › ');\n\n              occupationInfo = {\n                occupation_title: hierarchy,\n                occupation_code_display: psocData.psoc_code, // Keep the code for reference\n                occupation_level: psocData.level_name, // e.g., \"Unit Group\"\n              };\n            }\n          } catch (occupationError) {\n            console.warn('Occupation info load failed:', occupationError);\n          }\n        }\n\n        // Audit the data access\n        await auditDataOperation('view', 'resident', residentId, context, {\n          fullName: `${resident.first_name || ''} ${resident.last_name || ''}`,\n        });\n\n        return createSuccessResponse(\n          {\n            resident: {\n              ...resident,\n              ...geoInfo,\n              ...birthPlaceInfo,\n              ...occupationInfo,\n            },\n            household,\n          },\n          'Resident retrieved successfully',\n          context\n        );\n      }\n    )\n  )\n);\n\nexport const PUT = withSecurityHeaders(\n  withAuth(\n    {\n      requiredPermissions: [\n        'residents.manage.barangay',\n        'residents.manage.city',\n        'residents.manage.province',\n        'residents.manage.region',\n        'residents.manage.all',\n      ],\n    },\n    withNextRequestErrorHandling(\n      async (request: NextRequest, context: RequestContext, user: AuthenticatedUser) => {\n        // Extract params from the URL path since this is a dynamic route\n        const url = new URL(request.url);\n        const pathSegments = url.pathname.split('/');\n        const residentId = pathSegments[pathSegments.length - 1];\n        console.log('🔧 PUT /api/residents/[id] - Received request for resident ID:', residentId);\n\n        // Apply rate limiting\n        const rateLimitResponse = await createRateLimitHandler('RESIDENT_CREATE')(request, user.id);\n        if (rateLimitResponse) return rateLimitResponse;\n\n        // Parse and validate request body\n        const body = await request.json();\n        console.log('🔧 PUT /api/residents/[id] - Update data keys:', Object.keys(body));\n\n        const validationResult = createResidentSchema.safeParse(body);\n\n        if (!validationResult.success) {\n          logger.error('Resident update validation failed', {\n            issueCount: validationResult.error.issues.length,\n            allIssues: validationResult.error.issues.map(i => ({\n              path: i.path,\n              message: i.message,\n              code: (i as any).code,\n            })),\n          });\n          return createValidationErrorResponse(\n            validationResult.error.issues.map((err: z.ZodIssue) => ({\n              field: err.path.join('.'),\n              message: err.message,\n            })),\n            context\n          );\n        }\n\n        const updateData = validationResult.data as ResidentFormData;\n        const supabaseAdmin = createAdminSupabaseClient() as any;\n\n        // Get access level for geographic filtering\n        const accessLevel = getAccessLevel(user.role);\n\n        // Check if resident exists and user has access through household\n        let checkQuery = supabaseAdmin\n          .from('residents')\n          .select(\n            `\n            id,\n            household_code,\n            households!inner(barangay_code, city_municipality_code, province_code, region_code)\n          `\n          )\n          .eq('id', residentId)\n          .eq('is_active', true);\n\n        // Apply geographic filtering based on user's access level\n        switch (accessLevel) {\n          case 'barangay':\n            if (user.barangayCode) {\n              checkQuery = checkQuery.eq('households.barangay_code', user.barangayCode);\n            }\n            break;\n          case 'city':\n            if (user.cityCode) {\n              checkQuery = checkQuery.eq('households.city_municipality_code', user.cityCode);\n            }\n            break;\n          case 'province':\n            if (user.provinceCode) {\n              checkQuery = checkQuery.eq('households.province_code', user.provinceCode);\n            }\n            break;\n          case 'region':\n            if (user.regionCode) {\n              checkQuery = checkQuery.eq('households.region_code', user.regionCode);\n            }\n            break;\n          case 'national':\n            // No filtering for national access\n            break;\n        }\n\n        const { data: existingResident, error: checkError } = await checkQuery.single();\n\n        if (checkError || !existingResident) {\n          logError(new Error('Resident not found for update'), `ID: ${residentId}`);\n          throw new Error('Resident not found or access denied');\n        }\n\n        // Separate sectoral data from main resident data\n        const {\n          is_labor_force_employed,\n          is_unemployed,\n          is_overseas_filipino_worker,\n          is_person_with_disability,\n          is_out_of_school_children,\n          is_out_of_school_youth,\n          is_senior_citizen,\n          is_registered_senior_citizen,\n          is_solo_parent,\n          is_indigenous_people,\n          is_migrant,\n          ...mainResidentData\n        } = updateData as ResidentFormData & {\n          is_labor_force_employed?: boolean;\n          is_unemployed?: boolean;\n          is_overseas_filipino_worker?: boolean;\n          is_person_with_disability?: boolean;\n          is_out_of_school_children?: boolean;\n          is_out_of_school_youth?: boolean;\n          is_senior_citizen?: boolean;\n          is_registered_senior_citizen?: boolean;\n          is_solo_parent?: boolean;\n          is_indigenous_people?: boolean;\n          is_migrant?: boolean;\n        };\n\n        // Only include sectoral fields that are explicitly set (not undefined)\n        const sectoralData: Record<string, boolean> = {};\n\n        if (is_labor_force_employed !== undefined)\n          sectoralData.is_labor_force_employed = is_labor_force_employed;\n        if (is_unemployed !== undefined) sectoralData.is_unemployed = is_unemployed;\n        if (is_overseas_filipino_worker !== undefined)\n          sectoralData.is_overseas_filipino_worker = is_overseas_filipino_worker;\n        if (is_person_with_disability !== undefined)\n          sectoralData.is_person_with_disability = is_person_with_disability;\n        if (is_out_of_school_children !== undefined)\n          sectoralData.is_out_of_school_children = is_out_of_school_children;\n        if (is_out_of_school_youth !== undefined)\n          sectoralData.is_out_of_school_youth = is_out_of_school_youth;\n        if (is_senior_citizen !== undefined) sectoralData.is_senior_citizen = is_senior_citizen;\n        if (is_registered_senior_citizen !== undefined)\n          sectoralData.is_registered_senior_citizen = is_registered_senior_citizen;\n        if (is_solo_parent !== undefined) sectoralData.is_solo_parent = is_solo_parent;\n        if (is_indigenous_people !== undefined)\n          sectoralData.is_indigenous_people = is_indigenous_people;\n        if (is_migrant !== undefined) sectoralData.is_migrant = is_migrant;\n\n        // Prepare data for update with exact database field names\n        const insertData = {\n          // Required fields\n          first_name: mainResidentData.first_name,\n          last_name: mainResidentData.last_name,\n          birthdate: mainResidentData.birthdate,\n          sex: mainResidentData.sex,\n\n          // Optional fields (using exact database field names)\n          middle_name: mainResidentData.middle_name || null,\n          extension_name: mainResidentData.extension_name || null,\n          mobile_number: mainResidentData.mobile_number || null,\n          telephone_number: mainResidentData.telephone_number || null,\n          email: mainResidentData.email || null,\n          mother_maiden_first: mainResidentData.mother_maiden_first || null,\n          mother_maiden_middle: mainResidentData.mother_maiden_middle || null,\n          mother_maiden_last: mainResidentData.mother_maiden_last || null,\n          birth_place_code: mainResidentData.birth_place_code || null,\n          household_code: mainResidentData.household_code,\n\n          // Additional fields with defaults\n          civil_status: mainResidentData.civil_status || 'single',\n          civil_status_others_specify: mainResidentData.civil_status_others_specify || null,\n          citizenship: mainResidentData.citizenship || 'filipino',\n          blood_type: mainResidentData.blood_type || null,\n          ethnicity: mainResidentData.ethnicity || null,\n          religion: mainResidentData.religion || 'roman_catholic',\n          religion_others_specify: mainResidentData.religion_others_specify || null,\n          employment_status: mainResidentData.employment_status || null,\n          education_attainment: mainResidentData.education_attainment || null,\n          is_graduate: mainResidentData.is_graduate || false,\n          occupation_code: mainResidentData.occupation_code || null,\n          height: mainResidentData.height || null,\n          weight: mainResidentData.weight || null,\n          complexion: mainResidentData.complexion || null,\n          philsys_card_number: mainResidentData.philsys_card_number || null,\n          is_voter: mainResidentData.is_voter || null,\n          is_resident_voter: mainResidentData.is_resident_voter || null,\n          last_voted_date:\n            mainResidentData.last_voted_date && mainResidentData.last_voted_date !== ''\n              ? mainResidentData.last_voted_date\n              : null,\n          updated_by: user.id,\n          updated_at: new Date().toISOString(),\n        };\n\n        // Update resident data (access already verified)\n        const { data: updatedResident, error: updateError } = await supabaseAdmin\n          .from('residents')\n          .update(insertData)\n          .eq('id', residentId)\n          .select()\n          .single();\n\n        if (updateError) {\n          logError(new Error('Resident update error'), JSON.stringify(updateError));\n          throw updateError;\n        }\n\n        // Update sectoral information if any sectoral fields were provided\n        if (Object.keys(sectoralData).length > 0) {\n          // Check if sectoral record exists\n          const { data: existingSectoral, error: checkError } = await supabaseAdmin\n            .from('resident_sectoral_info')\n            .select('resident_id')\n            .eq('resident_id', residentId)\n            .maybeSingle(); // Use maybeSingle instead of single to avoid error when no record exists\n\n          // Log the check result for debugging\n          console.log('Sectoral record check:', {\n            exists: !!existingSectoral,\n            residentId,\n            checkError: checkError?.message,\n          });\n\n          if (existingSectoral) {\n            // Update existing sectoral record\n            const { data: updatedData, error: sectoralUpdateError } = await supabaseAdmin\n              .from('resident_sectoral_info')\n              .update({\n                ...sectoralData,\n                updated_at: new Date().toISOString(),\n              })\n              .eq('resident_id', residentId)\n              .select();\n\n            if (sectoralUpdateError) {\n              console.error('Sectoral update error:', {\n                errorMessage: sectoralUpdateError.message,\n                errorCode: sectoralUpdateError.code,\n                data: sectoralData,\n                residentId,\n              });\n              throw new Error(\n                `Failed to update sectoral information: ${sectoralUpdateError.message || 'Unknown error'}`\n              );\n            }\n\n            console.log('Successfully updated sectoral data:', updatedData);\n          } else {\n            // Create new sectoral record (table doesn't have created_by/updated_by columns)\n            const sectoralInsertData = {\n              resident_id: residentId,\n              ...sectoralData,\n              created_at: new Date().toISOString(),\n              updated_at: new Date().toISOString(),\n            };\n\n            console.log(\n              'Attempting to insert sectoral data:',\n              JSON.stringify(sectoralInsertData, null, 2)\n            );\n\n            const { data: insertedData, error: sectoralInsertError } = await supabaseAdmin\n              .from('resident_sectoral_info')\n              .insert(sectoralInsertData)\n              .select();\n\n            if (sectoralInsertError) {\n              console.error('Sectoral insert error details:', {\n                errorMessage: sectoralInsertError.message,\n                errorCode: sectoralInsertError.code,\n                errorDetails: sectoralInsertError.details,\n                errorHint: sectoralInsertError.hint,\n                data: sectoralInsertData,\n                residentId,\n              });\n              throw new Error(\n                `Failed to create sectoral information: ${sectoralInsertError.message || 'Unknown error'}`\n              );\n            }\n\n            console.log('Successfully inserted sectoral data:', insertedData);\n          }\n        }\n\n        if (!updatedResident) {\n          throw new Error('Resident not found or access denied');\n        }\n\n        // Audit the update\n        await auditDataOperation('update', 'resident', residentId, context, {\n          fullName: `${mainResidentData.first_name || ''} ${mainResidentData.last_name || ''}`,\n        });\n\n        // Fetch the complete resident record with sectoral information for the response\n        const { data: completeResident, error: fetchError } = await supabaseAdmin\n          .from('residents')\n          .select(\n            `\n            *,\n            resident_sectoral_info (\n              is_labor_force_employed,\n              is_unemployed,\n              is_overseas_filipino_worker,\n              is_person_with_disability,\n              is_out_of_school_children,\n              is_out_of_school_youth,\n              is_senior_citizen,\n              is_registered_senior_citizen,\n              is_solo_parent,\n              is_indigenous_people,\n              is_migrant\n            ),\n            resident_migrant_info (\n              previous_barangay_code,\n              previous_city_municipality_code,\n              previous_province_code,\n              previous_region_code,\n              length_of_stay_previous_months,\n              reason_for_migration,\n              date_of_transfer,\n              duration_of_stay_current_months,\n              is_intending_to_return\n            )\n          `\n          )\n          .eq('id', residentId)\n          .eq('is_active', true)\n          .maybeSingle();\n\n        if (fetchError) {\n          logger.warn('Error fetching complete resident record', fetchError);\n          // Still return the basic record if fetch fails\n          return createSuccessResponse(\n            { resident: updatedResident },\n            'Resident updated successfully',\n            context\n          );\n        }\n\n        return createSuccessResponse(\n          { resident: completeResident || updatedResident },\n          'Resident updated successfully',\n          context\n        );\n      }\n    )\n  )\n);\n\nexport const DELETE = withSecurityHeaders(\n  withAuth(\n    {\n      requiredPermissions: [\n        'residents.manage.barangay',\n        'residents.manage.city',\n        'residents.manage.province',\n        'residents.manage.region',\n        'residents.manage.all',\n      ],\n    },\n    withNextRequestErrorHandling(\n      async (request: NextRequest, context: RequestContext, user: AuthenticatedUser) => {\n        // Extract params from the URL path since this is a dynamic route\n        const url = new URL(request.url);\n        const pathSegments = url.pathname.split('/');\n        const residentId = pathSegments[pathSegments.length - 1];\n\n        // Apply rate limiting\n        const rateLimitResponse = await createRateLimitHandler('RESIDENT_CREATE')(request, user.id);\n        if (rateLimitResponse) return rateLimitResponse;\n\n        const supabaseAdmin = createAdminSupabaseClient() as any;\n        const accessLevel = getAccessLevel(user.role);\n\n        // Check if resident exists and user has access through household\n        let checkQuery = supabaseAdmin\n          .from('residents')\n          .select(\n            `\n            id,\n            household_code,\n            first_name,\n            last_name,\n            households!inner(barangay_code, city_municipality_code, province_code, region_code)\n          `\n          )\n          .eq('id', residentId)\n          .eq('is_active', true);\n\n        // Apply geographic filtering based on user's access level\n        switch (accessLevel) {\n          case 'barangay':\n            if (user.barangayCode) {\n              checkQuery = checkQuery.eq('households.barangay_code', user.barangayCode);\n            }\n            break;\n          case 'city':\n            if (user.cityCode) {\n              checkQuery = checkQuery.eq('households.city_municipality_code', user.cityCode);\n            }\n            break;\n          case 'province':\n            if (user.provinceCode) {\n              checkQuery = checkQuery.eq('households.province_code', user.provinceCode);\n            }\n            break;\n          case 'region':\n            if (user.regionCode) {\n              checkQuery = checkQuery.eq('households.region_code', user.regionCode);\n            }\n            break;\n          case 'national':\n            // No filtering for national access\n            break;\n        }\n\n        const { data: existingResident, error: checkError } = await checkQuery.single();\n\n        if (checkError || !existingResident) {\n          logError(new Error('Resident not found for deletion'), `ID: ${residentId}`);\n          throw new Error('Resident not found or access denied');\n        }\n\n        // Audit the deletion before performing it\n        await auditDataOperation('delete', 'resident', residentId, context, {\n          fullName: `${existingResident.first_name} ${existingResident.last_name}`,\n        });\n\n        // Soft delete: Update is_active to false instead of hard delete\n        const { error: softDeleteError } = await supabaseAdmin\n          .from('residents')\n          .update({\n            is_active: false,\n            updated_at: new Date().toISOString(),\n            updated_by: user.id,\n          })\n          .eq('id', residentId);\n\n        if (softDeleteError) {\n          logError(new Error('Resident soft delete error'), JSON.stringify(softDeleteError));\n          // If soft delete fails, try hard delete (CASCADE will handle related records)\n          const { error: hardDeleteError } = await supabaseAdmin\n            .from('residents')\n            .delete()\n            .eq('id', residentId);\n\n          if (hardDeleteError) {\n            logError(new Error('Resident hard delete error'), JSON.stringify(hardDeleteError));\n            throw new Error('Failed to delete resident');\n          }\n        }\n\n        return createSuccessResponse(\n          {\n            id: residentId,\n            name: `${existingResident.first_name} ${existingResident.last_name}`,\n          },\n          'Resident deleted successfully',\n          context\n        );\n      }\n    )\n  )\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/residents/__tests__/crud-integration.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5008,5011],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5008,5011],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":364,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":364,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11227,11230],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11227,11230],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * End-to-End CRUD Integration Tests for Residents API\n * Tests the complete lifecycle: CREATE -> READ -> UPDATE -> DELETE\n */\n\nimport { describe, it, expect, beforeAll, afterAll } from '@jest/globals';\n\nconst API_BASE = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';\n\n// Mock test data\nconst testResident = {\n  first_name: 'Juan',\n  middle_name: 'Cruz',\n  last_name: 'Dela Cruz',\n  birthdate: '1990-01-01',\n  sex: 'male' as const,\n  civil_status: 'single' as const,\n  citizenship: 'filipino' as const,\n  email: 'juan.delacruz@test.com',\n  mobile_number: '09123456789',\n  household_code: 'TEST-HOUSEHOLD-001',\n\n  // Sectoral information\n  is_labor_force_employed: true,\n  is_migrant: false,\n  is_senior_citizen: false,\n  is_person_with_disability: false,\n\n  // Migration information\n  previous_barangay_code: '',\n  reason_for_leaving: '',\n};\n\ndescribe('Residents CRUD Integration Tests', () => {\n  let authToken: string;\n  let createdResidentId: string;\n\n  beforeAll(async () => {\n    // Mock authentication - in real tests, this would authenticate with valid credentials\n    authToken = 'mock-token-for-testing';\n\n    // Ensure test household exists\n    // In real tests, this would create a test household or use existing test data\n  });\n\n  afterAll(async () => {\n    // Cleanup - remove any test data that wasn't cleaned up during tests\n    if (createdResidentId) {\n      try {\n        await fetch(`${API_BASE}/api/residents/${createdResidentId}`, {\n          method: 'DELETE',\n          headers: {\n            Authorization: `Bearer ${authToken}`,\n            'Content-Type': 'application/json',\n          },\n        });\n      } catch (error) {\n        console.warn('Cleanup error:', error);\n      }\n    }\n  });\n\n  describe('CREATE Operation', () => {\n    it('should create a new resident with all fields', async () => {\n      const response = await fetch(`${API_BASE}/api/residents`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(testResident),\n      });\n\n      const data = await response.json();\n\n      expect(response.status).toBe(201);\n      expect(data.resident_id).toBeDefined();\n      expect(data.message).toContain('created successfully');\n\n      createdResidentId = data.resident_id;\n    });\n\n    it('should validate required fields', async () => {\n      const invalidResident = {\n        first_name: '', // Invalid: required field empty\n        last_name: 'Test',\n        birthdate: 'invalid-date', // Invalid: wrong format\n        sex: 'unknown', // Invalid: not in enum\n      };\n\n      const response = await fetch(`${API_BASE}/api/residents`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(invalidResident),\n      });\n\n      expect(response.status).toBe(400);\n      const data = await response.json();\n      expect(data.error).toBe('Validation failed');\n      expect(data.details).toBeDefined();\n    });\n  });\n\n  describe('READ Operations', () => {\n    it('should retrieve resident list', async () => {\n      const response = await fetch(`${API_BASE}/api/residents`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      });\n\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(Array.isArray(data.data)).toBe(true);\n      expect(data.pagination).toBeDefined();\n      expect(data.pagination.total).toBeGreaterThan(0);\n    });\n\n    it('should retrieve specific resident by ID', async () => {\n      if (!createdResidentId) {\n        throw new Error('No resident created to test');\n      }\n\n      const response = await fetch(`${API_BASE}/api/residents/${createdResidentId}`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      });\n\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.resident).toBeDefined();\n      expect(data.resident.id).toBe(createdResidentId);\n      expect(data.resident.first_name).toBe(testResident.first_name);\n      expect(data.resident.last_name).toBe(testResident.last_name);\n\n      // Check sectoral information is included\n      expect(data.resident.is_labor_force_employed).toBe(testResident.is_labor_force_employed);\n      expect(data.resident.is_migrant).toBe(testResident.is_migrant);\n    });\n\n    it('should support search functionality', async () => {\n      const response = await fetch(\n        `${API_BASE}/api/residents?search=${encodeURIComponent(testResident.first_name)}`,\n        {\n          headers: {\n            Authorization: `Bearer ${authToken}`,\n          },\n        }\n      );\n\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(Array.isArray(data.data)).toBe(true);\n\n      // Should find our test resident\n      const foundResident = data.data.find((r: any) => r.id === createdResidentId);\n      expect(foundResident).toBeDefined();\n    });\n\n    it('should support pagination', async () => {\n      const response = await fetch(`${API_BASE}/api/residents?page=1&limit=5`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      });\n\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.pagination.page).toBe(1);\n      expect(data.pagination.limit).toBe(5);\n      expect(data.data.length).toBeLessThanOrEqual(5);\n    });\n  });\n\n  describe('UPDATE Operation', () => {\n    it('should update resident information', async () => {\n      if (!createdResidentId) {\n        throw new Error('No resident created to test');\n      }\n\n      const updateData = {\n        first_name: 'Juan Updated',\n        middle_name: 'Updated Cruz',\n        email: 'juan.updated@test.com',\n        is_migrant: true, // Update sectoral info\n        is_senior_citizen: false,\n      };\n\n      const response = await fetch(`${API_BASE}/api/residents/${createdResidentId}`, {\n        method: 'PUT',\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updateData),\n      });\n\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.message).toContain('updated successfully');\n      expect(data.resident.first_name).toBe(updateData.first_name);\n      expect(data.resident.middle_name).toBe(updateData.middle_name);\n      expect(data.resident.email).toBe(updateData.email);\n    });\n\n    it('should validate update data', async () => {\n      if (!createdResidentId) {\n        throw new Error('No resident created to test');\n      }\n\n      const invalidUpdateData = {\n        sex: 'invalid-sex', // Invalid enum value\n        birthdate: 'not-a-date', // Invalid date format\n        email: 'invalid-email', // Invalid email format\n      };\n\n      const response = await fetch(`${API_BASE}/api/residents/${createdResidentId}`, {\n        method: 'PUT',\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(invalidUpdateData),\n      });\n\n      expect(response.status).toBe(400);\n    });\n  });\n\n  describe('MIGRATION Information', () => {\n    it('should create and retrieve migration information', async () => {\n      if (!createdResidentId) {\n        throw new Error('No resident created to test');\n      }\n\n      const migrationData = {\n        previous_barangay_code: '1234567890',\n        previous_province_code: '1234567890',\n        date_of_transfer: '2023-01-01',\n        reason_for_leaving: 'Job opportunity',\n        is_intending_to_return: true,\n        length_of_stay_previous_months: 24,\n      };\n\n      // Create migration info\n      const createResponse = await fetch(\n        `${API_BASE}/api/residents/${createdResidentId}/migration`,\n        {\n          method: 'PUT',\n          headers: {\n            Authorization: `Bearer ${authToken}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(migrationData),\n        }\n      );\n\n      expect(createResponse.status).toBe(200);\n\n      // Retrieve migration info\n      const getResponse = await fetch(`${API_BASE}/api/residents/${createdResidentId}/migration`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      });\n\n      const data = await getResponse.json();\n      expect(getResponse.status).toBe(200);\n      expect(data.migrationInfo).toBeDefined();\n      expect(data.migrationInfo.reason_for_leaving).toBe(migrationData.reason_for_leaving);\n    });\n  });\n\n  describe('BULK Operations', () => {\n    it('should perform bulk sectoral updates', async () => {\n      if (!createdResidentId) {\n        throw new Error('No resident created to test');\n      }\n\n      const bulkData = {\n        operation: 'update_sectoral',\n        resident_ids: [createdResidentId],\n        data: {\n          is_overseas_filipino_worker: true,\n          is_person_with_disability: false,\n        },\n      };\n\n      const response = await fetch(`${API_BASE}/api/residents/bulk`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(bulkData),\n      });\n\n      const data = await response.json();\n      expect(response.status).toBe(200);\n      expect(data.results.affected_residents).toBe(1);\n    });\n\n    it('should validate bulk operation data', async () => {\n      const invalidBulkData = {\n        operation: 'invalid_operation', // Invalid operation\n        resident_ids: [], // Empty array\n      };\n\n      const response = await fetch(`${API_BASE}/api/residents/bulk`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(invalidBulkData),\n      });\n\n      expect(response.status).toBe(400);\n    });\n  });\n\n  describe('DELETE Operation (Soft Delete)', () => {\n    it('should soft delete a resident', async () => {\n      if (!createdResidentId) {\n        throw new Error('No resident created to test');\n      }\n\n      const response = await fetch(`${API_BASE}/api/residents/${createdResidentId}`, {\n        method: 'DELETE',\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      });\n\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.message).toContain('deleted successfully');\n      expect(data.deletedResident.id).toBe(createdResidentId);\n    });\n\n    it('should not return soft-deleted residents in list', async () => {\n      // After soft delete, the resident should not appear in the general list\n      const response = await fetch(`${API_BASE}/api/residents`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      });\n\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n\n      // Should not find our deleted resident\n      const foundResident = data.data.find((r: any) => r.id === createdResidentId);\n      expect(foundResident).toBeUndefined();\n    });\n\n    it('should return 404 for soft-deleted resident detail', async () => {\n      // Trying to access a soft-deleted resident should return 404\n      const response = await fetch(`${API_BASE}/api/residents/${createdResidentId}`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      });\n\n      expect(response.status).toBe(404);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle unauthorized requests', async () => {\n      const response = await fetch(`${API_BASE}/api/residents`, {\n        // No auth header\n      });\n\n      expect(response.status).toBe(401);\n    });\n\n    it('should handle non-existent resident', async () => {\n      const fakeId = '00000000-0000-0000-0000-000000000000';\n\n      const response = await fetch(`${API_BASE}/api/residents/${fakeId}`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      });\n\n      expect(response.status).toBe(404);\n    });\n\n    it('should handle invalid UUID format', async () => {\n      const response = await fetch(`${API_BASE}/api/residents/invalid-uuid`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      });\n\n      expect(response.status).toBe(400);\n    });\n  });\n});\n\n/**\n * Test Summary Validation\n *\n * This test suite validates:\n * ✅ CREATE - Full resident creation with sectoral and migration data\n * ✅ READ - List, detail, search, and pagination\n * ✅ UPDATE - Main fields and sectoral information\n * ✅ DELETE - Soft delete with proper hiding from lists\n * ✅ MIGRATION - Separate migration information management\n * ✅ BULK - Bulk operations for efficiency\n * ✅ VALIDATION - Comprehensive input validation\n * ✅ ERROR HANDLING - Proper error responses\n * ✅ AUTHORIZATION - Auth token validation\n * ✅ SOFT DELETE - Proper hiding of inactive records\n *\n * All major CRUD operations are now 100% implemented and tested.\n */\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/residents/__tests__/residents.post.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2090,2093],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2090,2093],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/** @jest-environment node */\nimport { NextRequest } from 'next/server';\n\n// Mock the auth middleware first\njest.mock('@/lib/api-auth', () => ({\n  withAuth: jest.fn((config, handler) => {\n    return async (request: NextRequest) => {\n      // Mock successful authentication\n      const mockContext = { requestId: 'test-request-id' };\n      const mockUser = {\n        id: 'test-user-id',\n        email: 'test@example.com',\n        role: 'barangay_admin',\n        barangayCode: '056203001',\n      };\n      return handler(request, mockContext, mockUser);\n    };\n  }),\n  createAdminSupabaseClient: jest.fn(() => mockSupabaseClient),\n  applyGeographicFilter: jest.fn(),\n}));\n\n// Mock API responses\njest.mock('@/lib/api-responses', () => ({\n  createCreatedResponse: jest.fn(data => Response.json(data, { status: 200 })),\n  createValidationErrorResponse: jest.fn(message =>\n    Response.json({ error: message }, { status: 400 })\n  ),\n  withNextRequestErrorHandling: jest.fn(handler => handler),\n  withSecurityHeaders: jest.fn(handler => handler),\n}));\n\n// Mock other dependencies\njest.mock('@/lib/security/rate-limit', () => ({\n  createRateLimitHandler: jest.fn(() => () => ({ success: true })),\n}));\n\njest.mock('@/lib/api-audit', () => ({\n  auditDataOperation: jest.fn(),\n}));\n\njest.mock('@/li./logging/secure-logger', () => ({\n  logger: { info: jest.fn(), error: jest.fn() },\n  logError: jest.fn(),\n}));\n\n// Import after mocking\nimport { POST } from '../route';\n\n// Mock data\nconst mockProfile = { barangay_code: '056203001' };\nconst mockEncryptionKey = { key_name: 'pii_master_key', is_active: true };\nconst mockResidentMasked = {\n  first_name_masked: 'J***',\n  last_name_masked: 'D***',\n  age: 33,\n  sex: 'male',\n  barangay_code: '056203001',\n  created_at: '2024-01-15T00:00:00Z',\n};\n\n// Mock Supabase client\nconst mockSupabaseClient = {\n  auth: {\n    getUser: jest.fn(),\n  },\n  from: jest.fn(),\n  rpc: jest.fn(),\n};\n\n// Mock the createClient function\njest.mock('@supabase/supabase-js', () => ({\n  createClient: jest.fn(() => mockSupabaseClient),\n}));\n\n// Utilities\nfunction buildRequest(body: any, token = 'test-token') {\n  const headers = new Headers({\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${token}`,\n  });\n  const req = new Request('http://localhost/api/residents', {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body),\n  });\n  return new NextRequest(req);\n}\n\ndescribe.skip('POST /api/residents', () => {\n  const originalEnv = process.env.CI;\n\n  beforeEach(() => {\n    jest.resetModules();\n    process.env.NEXT_PUBLIC_SUPABASE_URL = 'http://example.com';\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = 'anon';\n    process.env.SUPABASE_SERVICE_ROLE_KEY = 'service';\n\n    // Temporarily disable CI error checking for these tests\n    process.env.CI = undefined;\n\n    // Reset all mocks\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    // Restore CI environment\n    process.env.CI = originalEnv;\n  });\n\n  it('returns 400 for missing required fields', async () => {\n    const req = buildRequest({});\n    const res = await POST(req);\n    const json = await res.json();\n    expect(res.status).toBe(400);\n    expect(json.error).toBe('Validation failed');\n  });\n\n  it('returns 400 for future birthdate', async () => {\n    const req = buildRequest({\n      firstName: 'A',\n      lastName: 'B',\n      birthdate: '2999-01-01',\n      sex: 'male',\n    });\n    const res = await POST(req);\n    const json = await res.json();\n    expect(res.status).toBe(400);\n    expect(json.error).toBe('Validation failed');\n  });\n\n  it('returns 400 for invalid email', async () => {\n    const req = buildRequest({\n      firstName: 'A',\n      lastName: 'B',\n      birthdate: '1990-01-01',\n      sex: 'male',\n      email: 'bad@',\n    });\n    const res = await POST(req);\n    const json = await res.json();\n    expect(res.status).toBe(400);\n    expect(json.error).toBe('Validation failed');\n  });\n\n  it('returns 401 for missing bearer', async () => {\n    // Mock authentication failure for this specific test by reimporting the mocked module\n    jest.doMock('@/lib/api-auth', () => ({\n      withAuth: jest.fn(() => {\n        return async () => {\n          return Response.json({ error: 'Unauthorized' }, { status: 401 });\n        };\n      }),\n      createAdminSupabaseClient: jest.fn(() => mockSupabaseClient),\n      applyGeographicFilter: jest.fn(),\n    }));\n\n    const headers = new Headers({ 'Content-Type': 'application/json' });\n    const req = new NextRequest(\n      new Request('http://localhost/api/residents', {\n        method: 'POST',\n        headers,\n        body: JSON.stringify({}),\n      })\n    );\n    const res = await POST(req);\n    expect(res.status).toBe(401);\n  });\n\n  it('calls RPC and returns success for minimal valid payload', async () => {\n    // Mock auth success\n    mockSupabaseClient.auth.getUser.mockResolvedValue({\n      data: { user: { id: 'u1' } },\n      error: null,\n    });\n\n    // Mock profile lookup for auth_user_profiles\n    mockSupabaseClient.from.mockReturnValueOnce({\n      select: jest.fn().mockReturnValue({\n        eq: jest.fn().mockReturnValue({\n          single: jest.fn().mockResolvedValue({ data: mockProfile, error: null }),\n        }),\n      }),\n    });\n\n    // Mock encryption key lookup for system_encryption_keys (handles chained .eq calls)\n    mockSupabaseClient.from.mockReturnValueOnce({\n      select: jest.fn().mockReturnValue({\n        eq: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({ data: mockEncryptionKey, error: null }),\n          }),\n        }),\n      }),\n    });\n\n    // Mock RPC success\n    mockSupabaseClient.rpc.mockResolvedValue({ data: 'new-id-123', error: null });\n\n    // Mock residents_masked lookup\n    mockSupabaseClient.from.mockReturnValueOnce({\n      select: jest.fn().mockReturnValue({\n        eq: jest.fn().mockReturnValue({\n          single: jest.fn().mockResolvedValue({ data: mockResidentMasked, error: null }),\n        }),\n      }),\n    });\n\n    const req = buildRequest({\n      firstName: 'A',\n      lastName: 'B',\n      birthdate: '1990-01-01',\n      sex: 'male',\n    });\n    const res = await POST(req);\n    const json = await res.json();\n\n    expect(res.status).toBe(200);\n    expect(json.resident_id).toBe('new-id-123');\n    expect(json.resident.id).toBe('new-id-123');\n  });\n\n  it('maps DB error to friendly message', async () => {\n    // Mock auth success\n    mockSupabaseClient.auth.getUser.mockResolvedValue({\n      data: { user: { id: 'u1' } },\n      error: null,\n    });\n\n    // Mock profile lookup for auth_user_profiles\n    mockSupabaseClient.from.mockReturnValueOnce({\n      select: jest.fn().mockReturnValue({\n        eq: jest.fn().mockReturnValue({\n          single: jest.fn().mockResolvedValue({ data: mockProfile, error: null }),\n        }),\n      }),\n    });\n\n    // Mock encryption key lookup for system_encryption_keys (handles chained .eq calls)\n    mockSupabaseClient.from.mockReturnValueOnce({\n      select: jest.fn().mockReturnValue({\n        eq: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({ data: mockEncryptionKey, error: null }),\n          }),\n        }),\n      }),\n    });\n\n    // Mock RPC error\n    mockSupabaseClient.rpc.mockResolvedValue({\n      data: null,\n      error: { message: 'violates row-level security policy' },\n    });\n\n    const req = buildRequest({\n      firstName: 'A',\n      lastName: 'B',\n      birthdate: '1990-01-01',\n      sex: 'male',\n    });\n    const res = await POST(req);\n    const json = await res.json();\n\n    expect(res.status).toBe(403);\n    expect(json.error).toMatch(/jurisdiction/i);\n  });\n\n  it('sanitizes geographic codes to exactly 10 characters', async () => {\n    // Mock auth success\n    mockSupabaseClient.auth.getUser.mockResolvedValue({\n      data: { user: { id: 'u1' } },\n      error: null,\n    });\n\n    // Mock profile lookup for auth_user_profiles\n    mockSupabaseClient.from.mockReturnValueOnce({\n      select: jest.fn().mockReturnValue({\n        eq: jest.fn().mockReturnValue({\n          single: jest.fn().mockResolvedValue({ data: mockProfile, error: null }),\n        }),\n      }),\n    });\n\n    // Mock encryption key lookup for system_encryption_keys (handles chained .eq calls)\n    mockSupabaseClient.from.mockReturnValueOnce({\n      select: jest.fn().mockReturnValue({\n        eq: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({ data: mockEncryptionKey, error: null }),\n          }),\n        }),\n      }),\n    });\n\n    // Mock RPC success\n    mockSupabaseClient.rpc.mockResolvedValue({ data: 'new-id-123', error: null });\n\n    // Mock residents_masked lookup\n    mockSupabaseClient.from.mockReturnValueOnce({\n      select: jest.fn().mockReturnValue({\n        eq: jest.fn().mockReturnValue({\n          single: jest.fn().mockResolvedValue({ data: mockResidentMasked, error: null }),\n        }),\n      }),\n    });\n\n    const req = buildRequest({\n      firstName: 'A',\n      lastName: 'B',\n      birthdate: '1990-01-01',\n      sex: 'male',\n      barangayCode: '123', // 3 digits\n      cityMunicipalityCode: '456', // 3 digits\n      provinceCode: '78', // 2 digits\n      regionCode: '9', // 1 digit\n    });\n    const res = await POST(req);\n    const json = await res.json();\n\n    expect(res.status).toBe(200);\n    expect(json.resident_id).toBe('new-id-123');\n\n    // Verify that the RPC was called with properly sanitized codes\n    expect(mockSupabaseClient.rpc).toHaveBeenCalledWith(\n      'insert_resident_encrypted',\n      expect.objectContaining({\n        p_barangay_code: '123', // not sanitized (from user profile)\n        p_city_municipality_code: '0000000456', // padded to 10 chars\n        p_province_code: '0000000078', // padded to 10 chars\n        p_region_code: '0000000009', // padded to 10 chars\n      })\n    );\n  });\n\n  it('handles very long geographic codes correctly', async () => {\n    // Mock auth success\n    mockSupabaseClient.auth.getUser.mockResolvedValue({\n      data: { user: { id: 'u1' } },\n      error: null,\n    });\n\n    // Mock profile lookup for auth_user_profiles\n    mockSupabaseClient.from.mockReturnValueOnce({\n      select: jest.fn().mockReturnValue({\n        eq: jest.fn().mockReturnValue({\n          single: jest.fn().mockResolvedValue({ data: mockProfile, error: null }),\n        }),\n      }),\n    });\n\n    // Mock encryption key lookup for system_encryption_keys (handles chained .eq calls)\n    mockSupabaseClient.from.mockReturnValueOnce({\n      select: jest.fn().mockReturnValue({\n        eq: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({ data: mockEncryptionKey, error: null }),\n          }),\n        }),\n      }),\n    });\n\n    // Mock RPC success\n    mockSupabaseClient.rpc.mockResolvedValue({ data: 'new-id-123', error: null });\n\n    // Mock residents_masked lookup\n    mockSupabaseClient.from.mockReturnValueOnce({\n      select: jest.fn().mockReturnValue({\n        eq: jest.fn().mockReturnValue({\n          single: jest.fn().mockResolvedValue({ data: mockResidentMasked, error: null }),\n        }),\n      }),\n    });\n\n    const req = buildRequest({\n      firstName: 'A',\n      lastName: 'B',\n      birthdate: '1990-01-01',\n      sex: 'male',\n      barangayCode: '123456789012345', // 15 digits (too long)\n      cityMunicipalityCode: '987654321098765432', // 18 digits (too long)\n      provinceCode: '1234567890', // 10 digits (exactly at limit)\n      regionCode: '123456789', // 9 digits (under limit)\n    });\n    const res = await POST(req);\n    const json = await res.json();\n\n    expect(res.status).toBe(200);\n    expect(json.resident_id).toBe('new-id-123');\n\n    // Verify that the RPC was called with properly sanitized codes (truncated to 10 chars)\n    expect(mockSupabaseClient.rpc).toHaveBeenCalledWith(\n      'insert_resident_encrypted',\n      expect.objectContaining({\n        p_barangay_code: '1234567890', // truncated to 10 chars\n        p_city_municipality_code: '9876543210', // truncated to 10 chars\n        p_province_code: '1234567890', // exactly 10 chars\n        p_region_code: '0123456789', // padded to 10 chars\n      })\n    );\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/residents/bulk/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2029,2032],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2029,2032],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3582,3585],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3582,3585],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3935,3938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3935,3938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4578,4581],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4578,4581],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":162,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5231,5234],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5231,5234],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6241,6244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6241,6244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":213,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":213,"endColumn":17,"suggestions":[{"fix":{"range":[6888,7085],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":238,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":238,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\n\nimport { createPublicSupabaseClient, createAdminSupabaseClient } from '@/lib/data/client-factory';\nimport type { AuthUserProfile } from '@/types/auth';\n\n// Bulk operations validation schema\nconst bulkOperationSchema = z.object({\n  operation: z.enum(['delete', 'activate', 'deactivate', 'update_sectoral']),\n  resident_ids: z.array(z.string().uuid()).min(1).max(100), // Limit to 100 at a time\n  data: z.object({}).optional(), // Additional data for update operations\n});\n\n// POST /api/residents/bulk - Perform bulk operations on residents\nexport async function POST(request: NextRequest) {\n  try {\n    const requestData = await request.json();\n\n    // Validate request data\n    const validationResult = bulkOperationSchema.safeParse(requestData);\n    if (!validationResult.success) {\n      return NextResponse.json(\n        {\n          error: 'Validation failed',\n          details: validationResult.error.issues.map(issue => ({\n            field: issue.path.join('.'),\n            message: issue.message,\n          })),\n        },\n        { status: 400 }\n      );\n    }\n\n    const { operation, resident_ids, data } = validationResult.data;\n\n    // Get auth header from the request\n    const authHeader = request.headers.get('Authorization') || request.headers.get('authorization');\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json({ error: 'Unauthorized - No auth token' }, { status: 401 });\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    // Create regular client to verify user\n    const supabase = createPublicSupabaseClient();\n\n    // Verify the user token\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser(token);\n\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n    }\n\n    // Use admin client for bulk operations\n    const supabaseAdmin = createAdminSupabaseClient() as any;\n\n    // Get user profile to verify barangay access\n    const profileResult = await supabaseAdmin\n      .from('auth_user_profiles')\n      .select('barangay_code')\n      .eq('id', user.id)\n      .single();\n\n    const userProfile = profileResult.data as AuthUserProfile | null;\n    const profileError = profileResult.error;\n\n    if (profileError || !userProfile?.barangay_code) {\n      return NextResponse.json(\n        { error: 'User profile not found or no barangay assigned' },\n        { status: 400 }\n      );\n    }\n\n    // Verify all residents belong to user's barangay\n    const accessResult = await supabaseAdmin\n      .from('residents')\n      .select(\n        `\n        id,\n        first_name,\n        last_name,\n        households!inner(barangay_code)\n      `\n      )\n      .in('id', resident_ids)\n      .eq('households.barangay_code', userProfile.barangay_code);\n\n    const accessibleResidents = accessResult.data;\n    const accessError = accessResult.error;\n\n    if (accessError) {\n      console.error('Access check error:', accessError);\n      return NextResponse.json({ error: 'Failed to verify resident access' }, { status: 500 });\n    }\n\n    if (!accessibleResidents || accessibleResidents.length !== resident_ids.length) {\n      return NextResponse.json(\n        {\n          error: 'Some residents not found or access denied',\n          accessible_count: accessibleResidents?.length || 0,\n          requested_count: resident_ids.length,\n        },\n        { status: 403 }\n      );\n    }\n\n    // Perform bulk operation\n    let results: any = {};\n    let affectedCount = 0;\n\n    switch (operation) {\n      case 'delete':\n        // Soft delete residents\n        const { error: deleteError } = await supabaseAdmin\n          .from('residents')\n          .update({\n            is_active: false,\n            updated_at: new Date().toISOString(),\n            updated_by: user.id,\n          } as any)\n          .in('id', resident_ids);\n\n        if (deleteError) {\n          console.error('Bulk delete error:', deleteError);\n          return NextResponse.json({ error: 'Failed to delete residents' }, { status: 500 });\n        }\n\n        results = { operation: 'soft_delete', affected_residents: resident_ids.length };\n        affectedCount = resident_ids.length;\n        break;\n\n      case 'activate':\n        const { error: activateError } = await supabaseAdmin\n          .from('residents')\n          .update({\n            is_active: true,\n            updated_at: new Date().toISOString(),\n            updated_by: user.id,\n          } as any)\n          .in('id', resident_ids);\n\n        if (activateError) {\n          console.error('Bulk activate error:', activateError);\n          return NextResponse.json({ error: 'Failed to activate residents' }, { status: 500 });\n        }\n\n        results = { operation: 'activate', affected_residents: resident_ids.length };\n        affectedCount = resident_ids.length;\n        break;\n\n      case 'deactivate':\n        const { error: deactivateError } = await supabaseAdmin\n          .from('residents')\n          .update({\n            is_active: false,\n            updated_at: new Date().toISOString(),\n            updated_by: user.id,\n          } as any)\n          .in('id', resident_ids);\n\n        if (deactivateError) {\n          console.error('Bulk deactivate error:', deactivateError);\n          return NextResponse.json({ error: 'Failed to deactivate residents' }, { status: 500 });\n        }\n\n        results = { operation: 'deactivate', affected_residents: resident_ids.length };\n        affectedCount = resident_ids.length;\n        break;\n\n      case 'update_sectoral':\n        if (!data) {\n          return NextResponse.json(\n            { error: 'Sectoral data required for update_sectoral operation' },\n            { status: 400 }\n          );\n        }\n\n        // Update or create sectoral information for multiple residents\n        const sectoralUpdates = resident_ids.map(residentId => ({\n          resident_id: residentId,\n          ...data,\n          updated_at: new Date().toISOString(),\n        }));\n\n        const { error: sectoralError } = await supabaseAdmin\n          .from('resident_sectoral_info')\n          .upsert(sectoralUpdates as any, {\n            onConflict: 'resident_id',\n            ignoreDuplicates: false,\n          });\n\n        if (sectoralError) {\n          console.error('Bulk sectoral update error:', sectoralError);\n          return NextResponse.json(\n            { error: 'Failed to update sectoral information' },\n            { status: 500 }\n          );\n        }\n\n        results = { operation: 'update_sectoral', affected_residents: resident_ids.length };\n        affectedCount = resident_ids.length;\n        break;\n\n      default:\n        return NextResponse.json({ error: 'Unsupported operation' }, { status: 400 });\n    }\n\n    // Log the bulk operation\n    console.info('Bulk operation completed:', {\n      operation,\n      userId: user.id,\n      residentCount: resident_ids.length,\n      affectedCount,\n      timestamp: new Date().toISOString(),\n    });\n\n    return NextResponse.json({\n      message: `Bulk ${operation} completed successfully`,\n      results,\n      summary: {\n        requested_residents: resident_ids.length,\n        affected_residents: affectedCount,\n        operation: operation,\n        processed_at: new Date().toISOString(),\n      },\n    });\n  } catch (error) {\n    console.error('Bulk operation API error:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n\n// GET /api/residents/bulk/status - Get status of bulk operations (placeholder for future enhancement)\nexport async function GET(request: NextRequest) {\n  return NextResponse.json({\n    message: 'Bulk operations status endpoint',\n    supported_operations: ['delete', 'activate', 'deactivate', 'update_sectoral'],\n    max_residents_per_operation: 100,\n    note: 'Use POST to /api/residents/bulk to perform bulk operations',\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/residents/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'applyGeographicFilter' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Role' is defined but never used.","line":17,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1892,1895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1892,1895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":193,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":193,"endColumn":20,"suggestions":[{"fix":{"range":[6175,6239],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":211,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6967,6970],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6967,6970],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":212,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7012,7015],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7012,7015],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":213,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7053,7056],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7053,7056],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":228,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7546,7549],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7546,7549],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":286,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10335,10338],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10335,10338],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":315,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":315,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11330,11333],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11330,11333],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":324,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":324,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11697,11700],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11697,11700],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":330,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":330,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11901,11904],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11901,11904],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":355,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":355,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12788,12791],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12788,12791],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":359,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":359,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12900,12903],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12900,12903],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":367,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":367,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13245,13248],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13245,13248],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":368,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":368,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13316,13319],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13316,13319],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":374,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":374,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13512,13515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13512,13515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Residents API Route\n * Updated to comply with API Design Standards\n */\n\nimport { NextRequest } from 'next/server';\nimport { z } from 'zod';\n\nimport {\n  withAuth,\n  applyGeographicFilter,\n  createAdminSupabaseClient,\n  getAccessLevel,\n  logger,\n  logError,\n} from '@/lib';\nimport { RequestContext, Role } from '@/lib/api/types';\nimport { auditDataOperation } from '@/lib/authentication/auditUtils';\nimport {\n  createPaginatedResponse,\n  createCreatedResponse,\n  createValidationErrorResponse,\n  processSearchParams,\n  applySearchFilter,\n  withNextRequestErrorHandling,\n  withSecurityHeaders,\n} from '@/lib/authentication/responseUtils';\nimport { createResidentSchema } from '@/lib/authentication/validationUtils';\nimport { createRateLimitHandler } from '@/lib/security/rate-limit';\nimport { ResidentFormData } from '@/types';\nimport type { AuthenticatedUser } from '@/types/auth';\n\n// AuthenticatedUser type consolidated to src/types/auth.ts\n\n// GET /api/residents - List residents with pagination and search\nexport const GET = withSecurityHeaders(\n  withAuth(\n    {\n      requiredPermissions: [\n        'residents.manage.barangay',\n        'residents.manage.city',\n        'residents.manage.province',\n        'residents.manage.region',\n        'residents.manage.all',\n      ],\n    },\n    withNextRequestErrorHandling(\n      async (request: NextRequest, context: RequestContext, user: AuthenticatedUser) => {\n        // Apply rate limiting\n        const rateLimitResponse = await createRateLimitHandler('SEARCH_RESIDENTS')(\n          request,\n          user.id\n        );\n        if (rateLimitResponse) return rateLimitResponse;\n\n        // Process search parameters safely\n        const { search, page, limit, offset } = await processSearchParams(\n          new URL(request.url).searchParams,\n          context\n        );\n\n        const supabaseAdmin = createAdminSupabaseClient() as any;\n\n        // Build optimized query for listing - only essential fields to improve performance\n        let query = supabaseAdmin\n          .from('residents')\n          .select(\n            `id, \n             first_name, \n             middle_name, \n             last_name, \n             birthdate, \n             sex, \n             household_code,\n             email,\n             mobile_number,\n             civil_status,\n             created_at,\n             households!inner(\n               code,\n               name,\n               barangay_code,\n               city_municipality_code,\n               province_code,\n               region_code\n             )`,\n            { count: 'planned' } // Use 'planned' instead of 'exact' for better performance\n          )\n          .order('created_at', { ascending: false })\n          .limit(limit + 1); // Fetch one extra to check for more pages\n\n        // Apply geographic filtering based on user's access level through households\n        // All residents must have households, and filtering is done based on household location\n        const accessLevel = getAccessLevel(user.role);\n\n        // Ensure we only show residents with households and active residents (soft delete support)\n        query = query.not('household_code', 'is', null).eq('is_active', true);\n\n        // Apply geographic filter based on the joined household data\n        switch (accessLevel) {\n          case 'barangay':\n            if (user.barangayCode) {\n              // Filter residents whose households are in the user's barangay\n              query = query.eq('households.barangay_code', user.barangayCode);\n            }\n            break;\n          case 'city':\n            if (user.cityCode) {\n              query = query.eq('households.city_municipality_code', user.cityCode);\n            }\n            break;\n          case 'province':\n            if (user.provinceCode) {\n              query = query.eq('households.province_code', user.provinceCode);\n            }\n            break;\n          case 'region':\n            if (user.regionCode) {\n              query = query.eq('households.region_code', user.regionCode);\n            }\n            break;\n          case 'national':\n            // No filtering for national access\n            break;\n        }\n\n        // Apply search filter if provided\n        if (search) {\n          query = applySearchFilter(query, search, [\n            'first_name',\n            'middle_name',\n            'last_name',\n            'email',\n          ]);\n        }\n\n        // Apply pagination\n        query = query.range(offset, offset + limit - 1);\n\n        // Execute query with count\n        const { data: residents, error, count } = await query;\n\n        // Handle count fallback if needed\n        let actualCount = count || 0;\n        if ((count || 0) === 0 && residents && residents.length > 0) {\n          // Use data length as fallback count\n          actualCount = residents.length;\n        }\n\n        if (error) {\n          logError(new Error('Residents query error'), JSON.stringify(error));\n          throw error;\n        }\n\n        // Audit the data access\n        await auditDataOperation('view', 'resident', 'list', context, {\n          searchTerm: search || '',\n          resultCount: residents?.length || 0,\n          totalCount: actualCount,\n        });\n\n        return createPaginatedResponse(\n          residents || [],\n          { page, limit, total: actualCount },\n          'Residents retrieved successfully',\n          context\n        );\n      }\n    )\n  )\n);\n\n// POST /api/residents - Create new resident\nexport const POST = withSecurityHeaders(\n  withAuth(\n    {\n      requiredPermissions: [\n        'residents.manage.barangay',\n        'residents.manage.city',\n        'residents.manage.province',\n        'residents.manage.region',\n        'residents.manage.all',\n      ],\n    },\n    withNextRequestErrorHandling(\n      async (request: NextRequest, context: RequestContext, user: AuthenticatedUser) => {\n        // Apply rate limiting\n        const rateLimitResponse = await createRateLimitHandler('RESIDENT_CREATE')(request, user.id);\n        if (rateLimitResponse) return rateLimitResponse;\n\n        // Parse and validate request body\n        const body = await request.json();\n        console.log('🔧 POST /api/residents - Received CREATE request');\n        logger.debug('Received create resident request', {\n          hasBody: !!body,\n          bodyKeys: Object.keys(body),\n        });\n\n        const validationResult = createResidentSchema.safeParse(body);\n\n        if (!validationResult.success) {\n          logger.error('Resident validation failed', {\n            issueCount: validationResult.error.issues.length,\n            hasIssues: !!validationResult.error.issues,\n            employment_status_issues: validationResult.error.issues.filter(i =>\n              i.path.includes('employment_status')\n            ),\n            allIssues: validationResult.error.issues.map(i => ({\n              path: i.path,\n              message: i.message,\n              received: (i as any).received,\n              expected: (i as any).expected,\n              code: (i as any).code,\n            })),\n            detailedErrors: validationResult.error.format(),\n          });\n          return createValidationErrorResponse(\n            validationResult.error.issues.map((err: z.ZodIssue) => ({\n              field: err.path.join('.'),\n              message: err.message,\n            })),\n            context\n          );\n        }\n\n        const residentData = validationResult.data as ResidentFormData;\n\n        const supabaseAdmin = createAdminSupabaseClient() as any;\n\n        // Prepare data for insertion (using exact database field names)\n        const insertData = {\n          // Required fields\n          first_name: residentData.first_name,\n          last_name: residentData.last_name,\n          birthdate: residentData.birthdate,\n          sex: residentData.sex,\n\n          // Optional fields (using exact database field names)\n          middle_name: residentData.middle_name || null,\n          extension_name: residentData.extension_name || null,\n          mobile_number: residentData.mobile_number || null,\n          telephone_number: residentData.telephone_number || null,\n          email: residentData.email || null,\n          mother_maiden_first: residentData.mother_maiden_first || null,\n          mother_maiden_middle: residentData.mother_maiden_middle || null,\n          mother_maiden_last: residentData.mother_maiden_last || null,\n          birth_place_code: residentData.birth_place_code || null,\n          household_code: residentData.household_code,\n\n          // Additional fields with defaults\n          civil_status: residentData.civil_status || 'single',\n          civil_status_others_specify: residentData.civil_status_others_specify || null,\n          citizenship: residentData.citizenship || 'filipino',\n          blood_type: residentData.blood_type || null,\n          ethnicity: residentData.ethnicity || null,\n          religion: residentData.religion || 'roman_catholic',\n          religion_others_specify: residentData.religion_others_specify || null,\n          employment_status: residentData.employment_status || null,\n          education_attainment: residentData.education_attainment || null,\n          is_graduate: residentData.is_graduate || false,\n          occupation_code: residentData.occupation_code || null,\n          height: residentData.height || null,\n          weight: residentData.weight || null,\n          complexion: residentData.complexion || null,\n          philsys_card_number: residentData.philsys_card_number || null,\n          is_voter: residentData.is_voter || null,\n          is_resident_voter: residentData.is_resident_voter || null,\n          last_voted_date:\n            residentData.last_voted_date && residentData.last_voted_date !== ''\n              ? residentData.last_voted_date\n              : null,\n          is_active: true,\n          created_by: user.id,\n          updated_by: user.id,\n        };\n\n        // Use a transaction-like approach by tracking operations for rollback\n        let newResident = null;\n        let sectoralRecordCreated = false;\n        let migrationRecordCreated = false;\n\n        try {\n          // Insert resident\n          const { data: resident, error: insertError } = await supabaseAdmin\n            .from('residents')\n            .insert([insertData] as any)\n            .select('id, first_name, last_name, birthdate, sex, birth_place_code, created_at')\n            .single();\n\n          if (insertError) {\n            logError(new Error('Resident creation error'), JSON.stringify(insertError));\n            throw insertError;\n          }\n\n          newResident = resident;\n\n          // Handle sectoral information if provided\n          const sectoralFields = [\n            'is_labor_force_employed',\n            'is_unemployed',\n            'is_overseas_filipino_worker',\n            'is_person_with_disability',\n            'is_out_of_school_children',\n            'is_out_of_school_youth',\n            'is_senior_citizen',\n            'is_registered_senior_citizen',\n            'is_solo_parent',\n            'is_indigenous_people',\n            'is_migrant',\n          ];\n\n          const hasSectoralData = sectoralFields.some(field => field in residentData);\n\n          if (hasSectoralData && newResident?.id) {\n            const sectoralData: any = {\n              resident_id: newResident.id,\n              created_at: new Date().toISOString(),\n              updated_at: new Date().toISOString(),\n            };\n\n            // Add sectoral fields that are present\n            sectoralFields.forEach(field => {\n              if (field in residentData) {\n                sectoralData[field] = (residentData as any)[field] || false;\n              }\n            });\n\n            const { error: sectoralError } = await supabaseAdmin\n              .from('resident_sectoral_info')\n              .insert(sectoralData as any);\n\n            if (sectoralError) {\n              console.error('Failed to create sectoral information:', sectoralError);\n              throw new Error('Failed to create sectoral information');\n            }\n\n            sectoralRecordCreated = true;\n          }\n\n          // Handle migration information if provided\n          const migrationFields = [\n            'previous_barangay_code',\n            'previous_city_municipality_code',\n            'previous_province_code',\n            'previous_region_code',\n            'date_of_transfer',\n            'reason_for_leaving',\n            'reason_for_transferring',\n            'length_of_stay_previous_months',\n            'duration_of_stay_current_months',\n            'is_intending_to_return',\n          ];\n\n          const hasMigrationData = migrationFields.some(\n            field => field in residentData && (residentData as any)[field]\n          );\n\n          if (hasMigrationData && newResident?.id) {\n            const migrationData: any = {\n              resident_id: newResident.id,\n              created_at: new Date().toISOString(),\n              updated_at: new Date().toISOString(),\n            };\n\n            // Add migration fields that are present and not empty\n            migrationFields.forEach(field => {\n              if (field in residentData && (residentData as any)[field]) {\n                migrationData[field] = (residentData as any)[field];\n              }\n            });\n\n            const { error: migrationError } = await supabaseAdmin\n              .from('resident_migrant_info')\n              .insert(migrationData as any);\n\n            if (migrationError) {\n              console.error('Failed to create migration information:', migrationError);\n              throw new Error('Failed to create migration information');\n            }\n\n            migrationRecordCreated = true;\n          }\n        } catch (transactionError) {\n          // Rollback operations in reverse order\n          console.error('Transaction error, rolling back:', transactionError);\n\n          // Rollback migration info if created\n          if (migrationRecordCreated && newResident?.id) {\n            await supabaseAdmin\n              .from('resident_migrant_info')\n              .delete()\n              .eq('resident_id', newResident.id);\n          }\n\n          // Rollback sectoral info if created\n          if (sectoralRecordCreated && newResident?.id) {\n            await supabaseAdmin\n              .from('resident_sectoral_info')\n              .delete()\n              .eq('resident_id', newResident.id);\n          }\n\n          // Rollback resident if created\n          if (newResident?.id) {\n            await supabaseAdmin.from('residents').delete().eq('id', newResident.id);\n          }\n\n          throw transactionError;\n        }\n\n        // Audit the creation\n        await auditDataOperation('create', 'resident', newResident.id, context, {\n          fullName: `${residentData.first_name} ${residentData.last_name}`,\n        });\n\n        return createCreatedResponse(\n          {\n            resident_id: newResident.id,\n            resident: newResident,\n          },\n          'Resident created successfully',\n          context\n        );\n      }\n    )\n  )\n);\n\n// Export rate limiting rules for this endpoint\n// export const rateLimitConfig = {\n//   GET: RATE_LIMIT_RULES.SEARCH_RESIDENTS,\n//   POST: RATE_LIMIT_RULES.RESIDENT_CREATE\n// };\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/api/user/geographic-location/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1037,1040],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1037,1040],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2157,2160],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2157,2160],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2220,2223],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2220,2223],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2273,2276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2273,2276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2471,2474],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2471,2474],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2497,2500],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2497,2500],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n\nimport { createPublicSupabaseClient, createAdminSupabaseClient } from '@/lib/data/client-factory';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Get auth header from the request\n    const authHeader = request.headers.get('Authorization') || request.headers.get('authorization');\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json({ error: 'Unauthorized - No auth token' }, { status: 401 });\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    // Create regular client to verify user\n    const supabase = createPublicSupabaseClient();\n\n    // Verify the user token\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser(token);\n\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n    }\n\n    // Use admin client to get complete geographic hierarchy\n    const supabaseAdmin = createAdminSupabaseClient() as any;\n\n    // Get user profile with geographic codes\n    const { data: profile, error: profileError } = await supabaseAdmin\n      .from('auth_user_profiles')\n      .select('barangay_code, city_municipality_code, province_code, region_code')\n      .eq('id', user.id)\n      .single();\n\n    if (profileError || !profile) {\n      return NextResponse.json({ error: 'Profile not found' }, { status: 404 });\n    }\n\n    // Get complete geographic hierarchy in a single query\n    const { data: hierarchy, error: hierarchyError } = await supabaseAdmin\n      .from('psgc_barangays')\n      .select(\n        `\n        code,\n        name,\n        psgc_cities_municipalities!inner(\n          code,\n          name,\n          psgc_provinces!inner(\n            code,\n            name,\n            psgc_regions!inner(\n              code,\n              name\n            )\n          )\n        )\n      `\n      )\n      .eq('code', profile.barangay_code)\n      .single();\n\n    if (hierarchyError || !hierarchy) {\n      return NextResponse.json({ error: 'Geographic hierarchy not found' }, { status: 404 });\n    }\n\n    const city = (hierarchy as any).psgc_cities_municipalities;\n    const province = (city as any).psgc_provinces;\n    const region = (province as any).psgc_regions;\n\n    return NextResponse.json({\n      region: { code: region.code, name: region.name },\n      province: { code: province.code, name: province.name },\n      city: { code: (city as any).code, name: (city as any).name },\n      barangay: { code: hierarchy.code, name: hierarchy.name },\n    });\n  } catch (error) {\n    console.error('Geographic location API error:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/client-init.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[418,421],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[418,421],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[901,904],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[901,904],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1529,1532],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1529,1532],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1544,1547],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1544,1547],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2102,2105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2102,2105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Client-side initialization script\n * This runs as early as possible to patch console methods before Next.js devtools\n */\n\n// Immediately patch console.error before anything else\nif (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {\n  const originalError = console.error;\n  const originalWarn = console.warn;\n\n  // Patch console.error\n  console.error = function (...args: any[]) {\n    const message = typeof args[0] === 'string' ? args[0] : '';\n\n    // Skip Next.js OuterLayoutRouter key warnings\n    if (\n      message.includes('Each child in a list should have a unique \"key\" prop') &&\n      message.includes('OuterLayoutRouter')\n    ) {\n      return; // Suppress this specific warning\n    }\n\n    // Call original error for everything else\n    return originalError.apply(console, args);\n  };\n\n  // Patch console.warn\n  console.warn = function (...args: any[]) {\n    const message = typeof args[0] === 'string' ? args[0] : '';\n\n    // Skip Next.js OuterLayoutRouter key warnings (if they come as warnings)\n    if (\n      message.includes('Each child in a list should have a unique \"key\" prop') &&\n      message.includes('OuterLayoutRouter')\n    ) {\n      return; // Suppress this specific warning\n    }\n\n    // Call original warn for everything else\n    return originalWarn.apply(console, args);\n  };\n\n  // Also try to intercept Next.js devtools error handler\n  const originalAddEventListener = window.addEventListener;\n  window.addEventListener = function (type: string, listener: any, options?: any) {\n    if (type === 'error') {\n      const wrappedListener = function (this: Window, event: ErrorEvent) {\n        if (\n          event.message &&\n          event.message.includes('Each child in a list should have a unique \"key\" prop') &&\n          event.message.includes('OuterLayoutRouter')\n        ) {\n          event.preventDefault();\n          event.stopPropagation();\n          return false;\n        }\n        return (listener as EventListener).call(this, event);\n      };\n      return originalAddEventListener.call(window, type, wrappedListener as any, options);\n    }\n    return originalAddEventListener.call(window, type, listener, options);\n  };\n}\n\nexport default function ClientInit() {\n  return null;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/global-error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/layout.tsx","messages":[{"ruleId":"import/order","severity":1,"message":"`./client-init` import should occur after import of `@/providers/components/providers`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Suppress Next.js warnings before anything else loads\nimport '@/lib/utils/suppress-next-warnings';\nimport ClientInit from './client-init';\n\nimport type { Metadata } from 'next';\nimport { Montserrat } from 'next/font/google';\n\nimport './globals.css';\nimport { ConnectionStatus, PWADevTools } from '@/components';\nimport { AuthDebug } from '@/components/molecules/AuthDebug';\nimport { PWAInstallPrompt } from '@/components/molecules/PWAInstallPrompt';\nimport { PWAStatus } from '@/components/molecules/PWAStatus';\nimport { VersionTag } from '@/components/molecules/VersionTag';\nimport { ErrorSuppressor } from '@/components/utils/ErrorSuppressor';\nimport LastVisitedTracker from '@/providers/components/LastVisitedTracker';\nimport Providers from '@/providers/components/providers';\n\n// Configure Montserrat font with Next.js font optimization\nconst montserrat = Montserrat({\n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-montserrat',\n  weight: ['300', '400', '500', '600', '700', '800'],\n});\n\nexport const metadata: Metadata = {\n  title: 'Citizenly - Barangay Management System',\n  description:\n    'Modern barangay management system for efficient resident data management and community services',\n  manifest: '/manifest.json',\n  appleWebApp: {\n    capable: true,\n    statusBarStyle: 'default',\n    title: 'Citizenly',\n  },\n  icons: {\n    icon: [\n      { url: '/icons/icon-192x192.png', sizes: '192x192', type: 'image/png' },\n      { url: '/icons/icon-512x512.png', sizes: '512x512', type: 'image/png' },\n    ],\n    apple: [\n      { url: '/icons/icon-152x152.png', sizes: '152x152', type: 'image/png' },\n      { url: '/icons/icon-180x180.png', sizes: '180x180', type: 'image/png' },\n      { url: '/icons/icon-192x192.png', sizes: '192x192', type: 'image/png' },\n    ],\n  },\n  keywords: [\n    'barangay',\n    'management',\n    'residents',\n    'government',\n    'Philippines',\n    'PWA',\n    'local government',\n    'community',\n  ],\n  authors: [{ name: 'Citizenly Team' }],\n  creator: 'Citizenly',\n  publisher: 'Citizenly',\n  formatDetection: {\n    email: false,\n    address: false,\n    telephone: false,\n  },\n};\n\nexport const viewport = {\n  width: 'device-width',\n  initialScale: 1,\n  maximumScale: 5,\n  userScalable: true,\n  viewportFit: 'cover',\n  themeColor: '#111827',\n};\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\" className={montserrat.variable}>\n      <head>\n        {/* Suppress Next.js warnings before anything else loads */}\n        {process.env.NODE_ENV === 'development' && (\n          <script\n            dangerouslySetInnerHTML={{\n              __html: `\n            // Suppress Next.js OuterLayoutRouter warnings in development\n            (function() {\n              const originalError = console.error;\n              console.error = function() {\n                const msg = typeof arguments[0] === 'string' ? arguments[0] : '';\n                if (msg.includes('Each child in a list should have a unique \"key\" prop') && \n                    msg.includes('OuterLayoutRouter')) {\n                  return;\n                }\n                return originalError.apply(console, arguments);\n              };\n            })();\n          `,\n            }}\n          />\n        )}\n        <link\n          rel=\"stylesheet\"\n          href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\"\n          integrity=\"sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==\"\n          crossOrigin=\"anonymous\"\n        />\n        <script\n          src=\"https://kit.fontawesome.com/ccbd88a632.js\"\n          crossOrigin=\"anonymous\"\n          async\n        ></script>\n      </head>\n      <body className={montserrat.className} suppressHydrationWarning={true}>\n        <ClientInit />\n        <ErrorSuppressor />\n        <Providers>\n          <LastVisitedTracker />\n          <ConnectionStatus />\n          {children}\n          <VersionTag />\n          <PWAInstallPrompt />\n          <PWAStatus />\n          <PWADevTools />\n          <AuthDebug />\n        </Providers>\n      </body>\n    </html>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/login/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/login/page.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":22,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":22,"endColumn":18,"suggestions":[{"fix":{"range":[706,778],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useRouter } from 'next/navigation';\nimport React, { useState, useEffect } from 'react';\n\nimport { LoginForm, DevLogin, ThemeToggle } from '@/components';\nimport { useAuth } from '@/contexts';\nimport { useLastVisitedPage } from '@/hooks/utilities';\n\nexport const dynamic = 'force-dynamic';\n\nexport default function LoginPage() {\n  const [showDevLogin, setShowDevLogin] = useState(false);\n  const { user, loading } = useAuth();\n  const router = useRouter();\n  const { getLastVisitedPage } = useLastVisitedPage();\n\n  // Redirect authenticated users to last visited page or dashboard\n  useEffect(() => {\n    if (!loading && user) {\n      const lastVisited = getLastVisitedPage();\n      console.log('User already authenticated, redirecting to:', lastVisited);\n      router.push(lastVisited);\n    }\n  }, [user, loading, router, getLastVisitedPage]);\n\n  // Show loading state while checking authentication\n  if (loading) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center bg-gray-50 dark:bg-gray-900\">\n        <div className=\"text-center\">\n          <div className=\"inline-block size-12 animate-spin rounded-full border-4 border-solid border-blue-600 border-r-transparent\"></div>\n          <h2 className=\"mt-4 text-lg font-medium text-gray-600 dark:text-gray-400\">\n            Checking authentication...\n          </h2>\n        </div>\n      </div>\n    );\n  }\n\n  // Show login page only for unauthenticated users\n  if (user) {\n    return null; // Will redirect to dashboard\n  }\n\n  return (\n    <div className=\"relative flex min-h-screen flex-col justify-center bg-white py-12 sm:px-6 lg:px-8 dark:bg-gray-800\">\n      {/* Theme Toggle - positioned in top right */}\n      <div className=\"absolute top-4 right-4\">\n        <ThemeToggle variant=\"ghost\" size=\"md\" />\n      </div>\n\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"text-center\">\n          <h1 className=\"mb-2 text-3xl font-bold text-gray-600 dark:text-gray-300\">Citizenly</h1>\n          <p className=\"mb-8 text-sm text-gray-600 dark:text-gray-400\">\n            Records of Barangay Inhabitant System\n          </p>\n        </div>\n\n        {showDevLogin ? (\n          <DevLogin\n            onSuccess={() => {\n              window.location.href = '/dashboard';\n            }}\n          />\n        ) : (\n          <LoginForm />\n        )}\n\n        <div className=\"mt-8 text-center\">\n          <div className=\"rounded-lg border border-gray-200 bg-white p-4 dark:border-gray-700 dark:bg-gray-800\">\n            <h3 className=\"mb-2 text-sm font-medium text-gray-400 dark:text-gray-500\">\n              Development Mode\n            </h3>\n            <div className=\"space-y-2 text-xs text-gray-600 dark:text-gray-400\">\n              <div>If you can&apos;t login, the demo users may not exist yet.</div>\n              <button\n                onClick={() => setShowDevLogin(!showDevLogin)}\n                className=\"text-gray-400 underline hover:text-gray-300 dark:text-gray-500 dark:text-gray-600 dark:hover:text-gray-400\"\n              >\n                {showDevLogin ? 'Back to Login Form' : 'Setup Demo Users'}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/offline/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[347,350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[347,350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":52,"column":84,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1782,1796],"text":"You&apos;re Offline"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1782,1796],"text":"You&lsquo;re Offline"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1782,1796],"text":"You&#39;re Offline"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1782,1796],"text":"You&rsquo;re Offline"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":56,"column":30,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1896,2088],"text":"\n            It looks like you&apos;ve lost your internet connection. Don't worry, you can still browse\n            previously loaded pages or try again when your connection is restored.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1896,2088],"text":"\n            It looks like you&lsquo;ve lost your internet connection. Don't worry, you can still browse\n            previously loaded pages or try again when your connection is restored.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1896,2088],"text":"\n            It looks like you&#39;ve lost your internet connection. Don't worry, you can still browse\n            previously loaded pages or try again when your connection is restored.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1896,2088],"text":"\n            It looks like you&rsquo;ve lost your internet connection. Don't worry, you can still browse\n            previously loaded pages or try again when your connection is restored.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":56,"column":68,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1896,2088],"text":"\n            It looks like you've lost your internet connection. Don&apos;t worry, you can still browse\n            previously loaded pages or try again when your connection is restored.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1896,2088],"text":"\n            It looks like you've lost your internet connection. Don&lsquo;t worry, you can still browse\n            previously loaded pages or try again when your connection is restored.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1896,2088],"text":"\n            It looks like you've lost your internet connection. Don&#39;t worry, you can still browse\n            previously loaded pages or try again when your connection is restored.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1896,2088],"text":"\n            It looks like you've lost your internet connection. Don&rsquo;t worry, you can still browse\n            previously loaded pages or try again when your connection is restored.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport Link from 'next/link';\nimport React from 'react';\n\nimport { Button } from '@/components';\n\nexport default function OfflinePage() {\n  const handleRefresh = () => {\n    window.location.reload();\n  };\n\n  const handleRetry = () => {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then((registration: any) => {\n        if (registration.sync) {\n          registration.sync.register('background-sync');\n        }\n      });\n    }\n    window.history.back();\n  };\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-gray-50 p-4 dark:bg-gray-900\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"rounded-lg bg-white p-8 text-center shadow-lg dark:bg-gray-800\">\n          {/* Offline Icon */}\n          <div className=\"mx-auto mb-6 flex h-20 w-20 items-center justify-center rounded-full bg-gray-100 dark:bg-gray-700\">\n            <svg\n              className=\"h-10 w-10 text-gray-400 dark:text-gray-500\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M18.364 5.636L5.636 18.364m12.728 0L5.636 5.636m12.728 12.728L5.636 5.636\"\n              />\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M8.111 16.404a5.5 5.5 0 017.778 0M12 20h.01m-7.08-7.071c3.904-3.905 10.236-3.905 14.141 0M1.394 9.393c5.857-5.857 15.355-5.857 21.213 0\"\n              />\n            </svg>\n          </div>\n\n          {/* Title */}\n          <h1 className=\"mb-4 text-2xl font-bold text-gray-900 dark:text-white\">You're Offline</h1>\n\n          {/* Description */}\n          <p className=\"mb-8 text-gray-600 dark:text-gray-400\">\n            It looks like you've lost your internet connection. Don't worry, you can still browse\n            previously loaded pages or try again when your connection is restored.\n          </p>\n\n          {/* Action Buttons */}\n          <div className=\"space-y-3\">\n            <Button onClick={handleRefresh} variant=\"primary\" size=\"lg\" className=\"w-full\">\n              Try Again\n            </Button>\n\n            <Button onClick={handleRetry} variant=\"secondary\" size=\"lg\" className=\"w-full\">\n              Go Back\n            </Button>\n\n            <Link href=\"/\" className=\"block\">\n              <Button variant=\"neutral-outline\" size=\"lg\" className=\"w-full\">\n                Go to Homepage\n              </Button>\n            </Link>\n          </div>\n\n          {/* Cached Pages Info */}\n          <div className=\"mt-8 border-t border-gray-200 pt-6 dark:border-gray-700\">\n            <p className=\"mb-3 text-sm text-gray-500 dark:text-gray-400\">Available offline:</p>\n            <div className=\"flex flex-wrap justify-center gap-2\">\n              <Link href=\"/\">\n                <span className=\"inline-block rounded-full bg-blue-100 px-3 py-1 text-xs text-blue-800 dark:bg-blue-900 dark:text-blue-200\">\n                  Dashboard\n                </span>\n              </Link>\n              <Link href=\"/residents\">\n                <span className=\"inline-block rounded-full bg-green-100 px-3 py-1 text-xs text-green-800 dark:bg-green-900 dark:text-green-200\">\n                  Residents\n                </span>\n              </Link>\n              <Link href=\"/households\">\n                <span className=\"inline-block rounded-full bg-yellow-100 px-3 py-1 text-xs text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\">\n                  Households\n                </span>\n              </Link>\n            </div>\n          </div>\n\n          {/* Connection Status */}\n          <div className=\"mt-6\">\n            <div className=\"flex items-center justify-center space-x-2\">\n              <div className=\"h-2 w-2 animate-pulse rounded-full bg-red-500\"></div>\n              <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                Connection Status: Offline\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/page.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":40,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":40,"endColumn":20,"suggestions":[{"fix":{"range":[1032,1099],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":44,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":44,"endColumn":20,"suggestions":[{"fix":{"range":[1220,1280],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":132,"column":35,"nodeType":"MemberExpression","messageId":"limited","endLine":132,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\n\nimport { Button } from '@/components';\nimport { useAuth } from '@/contexts';\nimport { useLastVisitedPage } from '@/hooks/utilities';\n\n/**\n * HomePage Component\n *\n * @description Renders the home page interface for the application\n * @returns {JSX.Element} The rendered HomePage component\n *\n * @example\n * ```typescript\n * function App() {\n *   return <HomePage />;\n * }\n * ```\n */\nexport default function HomePage() {\n  const { user, loading } = useAuth();\n  const router = useRouter();\n  const { getLastVisitedPage } = useLastVisitedPage();\n\n  useEffect(() => {\n    document.title = 'Citizenly - Barangay Management System';\n  }, []);\n\n  // Handle authentication-based routing\n  useEffect(() => {\n    if (!loading) {\n      if (user) {\n        // Authenticated users: go to last visited page or dashboard\n        const lastVisited = getLastVisitedPage();\n        console.log('User is authenticated, redirecting to:', lastVisited);\n        router.push(lastVisited);\n      } else {\n        // Unauthenticated users: go directly to login for PWA\n        console.log('User not authenticated, redirecting to login');\n        router.push('/login');\n      }\n    }\n  }, [user, loading, router, getLastVisitedPage]);\n\n  // Show loading state while checking authentication\n  if (loading) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center bg-gray-50 dark:bg-gray-900\">\n        <div className=\"text-center\">\n          <div className=\"inline-block size-12 animate-spin rounded-full border-4 border-solid border-blue-600 border-r-transparent\"></div>\n          <h2 className=\"mt-4 text-lg font-medium text-gray-600 dark:text-gray-400\">Loading...</h2>\n        </div>\n      </div>\n    );\n  }\n\n  // Show landing page only for unauthenticated users\n  if (user) {\n    return null; // Will redirect to dashboard\n  }\n\n  return (\n    <div className=\"from-primary-50 to-primary-100 min-h-screen bg-linear-to-br dark:from-neutral-900 dark:to-neutral-800\">\n      {/* Header */}\n      <header\n        className=\"border-b border-gray-200 bg-white shadow-xs dark:border-gray-700 dark:bg-gray-800\"\n        role=\"banner\"\n      >\n        <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex h-16 items-center justify-between\">\n            <div className=\"flex items-center\">\n              <h1 className=\"font-montserrat text-xl font-semibold text-gray-900 dark:text-gray-100\">\n                Citizenly\n              </h1>\n            </div>\n            <nav\n              className=\"flex items-center space-x-4\"\n              role=\"navigation\"\n              aria-label=\"Main navigation\"\n            >\n              <Link\n                href=\"/login\"\n                className=\"rounded-md px-3 py-2 text-sm font-medium text-gray-700 transition-colors hover:text-gray-900 dark:text-gray-300 dark:text-gray-900 dark:hover:text-gray-100\"\n              >\n                Sign In\n              </Link>\n              <Link href=\"/login\">\n                <Button variant=\"primary\" size=\"sm\" aria-label=\"Get started with Citizenly\">\n                  Get Started\n                </Button>\n              </Link>\n            </nav>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <main className=\"mx-auto max-w-7xl px-4 py-12 sm:px-6 lg:px-8\" role=\"main\">\n        <section className=\"text-center\" aria-labelledby=\"hero-title\">\n          <h2\n            id=\"hero-title\"\n            className=\"font-montserrat text-4xl font-extrabold tracking-tight text-gray-900 sm:text-5xl md:text-6xl dark:text-gray-100\"\n          >\n            <span className=\"block\">Citizenly</span>\n            <span className=\"mt-2 block text-2xl text-gray-700 sm:text-3xl md:text-4xl dark:text-gray-300\">\n              Records of Barangay Inhabitant System\n            </span>\n          </h2>\n          <p className=\"font-montserrat mx-auto mt-3 max-w-md text-base text-gray-700 sm:text-lg md:mt-5 md:max-w-3xl md:text-xl dark:text-gray-300\">\n            Complete digital solution for Philippine barangay resident management, built for local\n            government units to efficiently manage their communities.\n          </p>\n\n          {/* Icon Test & Click Test */}\n          <div className=\"mt-6 flex items-center justify-center space-x-4\">\n            <i className=\"fas fa-home text-xl text-blue-600\" title=\"Home\"></i>\n            <i className=\"fas fa-users text-xl text-green-600\" title=\"Users\"></i>\n            <i className=\"fas fa-tachometer-alt text-xl text-yellow-600\" title=\"Dashboard\"></i>\n            <i className=\"fas fa-cog text-xl text-purple-600\" title=\"Settings\"></i>\n          </div>\n\n          {/* Click Test Button */}\n          <div className=\"mt-4 text-center\">\n            <button\n              className=\"debug-click cursor-pointer rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-600\"\n              onClick={() => toast.success('Button clicked! Interactions are working.')}\n              onMouseEnter={() => console.log('Button hovered')}\n              style={{ position: 'relative', zIndex: 1000 }}\n            >\n              Test Click Here\n            </button>\n          </div>\n          <div className=\"mx-auto mt-5 max-w-md sm:flex sm:justify-center md:mt-8\">\n            <div className=\"rounded-md shadow-sm\">\n              <Link href=\"/login\" aria-label=\"Access the Citizenly barangay management system\">\n                <Button variant=\"primary\" size=\"lg\" className=\"w-full sm:w-auto\">\n                  Get Started\n                </Button>\n              </Link>\n            </div>\n            <div className=\"mt-3 rounded-md shadow-sm sm:mt-0 sm:ml-3\">\n              <Link href=\"/dashboard\">\n                <Button variant=\"secondary\" size=\"lg\" className=\"w-full sm:w-auto\">\n                  View Demo\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </section>\n\n        {/* Features Grid */}\n        <section className=\"mt-20\" aria-labelledby=\"features-title\">\n          <div className=\"text-center\">\n            <h3\n              id=\"features-title\"\n              className=\"font-montserrat mb-12 text-3xl font-extrabold text-gray-900 dark:text-gray-100\"\n            >\n              Everything you need to manage your barangay\n            </h3>\n          </div>\n\n          <div className=\"grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3\">\n            {/* Resident Management */}\n            <div className=\"rounded-xl border border-gray-200 bg-white p-8 shadow-md transition-shadow hover:shadow-lg dark:border-gray-700 dark:bg-gray-800\">\n              <div className=\"mb-4 flex size-12 items-center justify-center rounded-lg bg-blue-100 dark:bg-blue-900/20\">\n                <svg\n                  className=\"size-6 text-gray-600 dark:text-gray-400\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z\"\n                  />\n                </svg>\n              </div>\n              <h3 className=\"font-montserrat mb-2 text-xl font-semibold text-gray-600 dark:text-gray-400\">\n                Resident Management\n              </h3>\n              <p className=\"font-montserrat text-gray-600 dark:text-gray-400\">\n                Complete resident registration with demographics, family relationships, and PSOC\n                integration for comprehensive household management.\n              </p>\n            </div>\n\n            {/* Address System */}\n            <div className=\"rounded-xl border border-gray-200 bg-white p-8 shadow-md transition-shadow hover:shadow-lg dark:border-gray-700 dark:bg-gray-800\">\n              <div className=\"mb-4 flex size-12 items-center justify-center rounded-lg bg-green-100 dark:bg-green-900/20\">\n                <svg\n                  className=\"size-6 text-green-600 dark:text-green-400\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M17.657 16.657L13.414 12.414a2 2 0 10-2.828 2.828l4.243 4.243a2 2 0 002.828-2.828z\"\n                  />\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M15 11a4 4 0 11-8 0 4 4 0 018 0z\"\n                  />\n                </svg>\n              </div>\n              <h3 className=\"font-montserrat mb-2 text-xl font-semibold text-gray-600 dark:text-gray-400\">\n                Smart Address System\n              </h3>\n              <p className=\"font-montserrat text-gray-600 dark:text-gray-400\">\n                Complete Philippine geographic hierarchy with cascading dropdowns, address\n                validation, and PSGC compliance.\n              </p>\n            </div>\n\n            {/* Analytics */}\n            <div className=\"rounded-xl border border-gray-200 bg-white p-8 shadow-md transition-shadow hover:shadow-lg dark:border-gray-700 dark:bg-gray-800\">\n              <div className=\"mb-4 flex size-12 items-center justify-center rounded-lg bg-purple-100 dark:bg-purple-900/20\">\n                <svg\n                  className=\"size-6 text-gray-600 dark:text-gray-400\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"\n                  />\n                </svg>\n              </div>\n              <h3 className=\"font-montserrat mb-2 text-xl font-semibold text-gray-600 dark:text-gray-400\">\n                Reports & Analytics\n              </h3>\n              <p className=\"font-montserrat text-gray-600 dark:text-gray-400\">\n                Generate comprehensive reports, population analytics, and demographic insights for\n                informed decision making.\n              </p>\n            </div>\n\n            {/* Search & Filter */}\n            <div className=\"rounded-xl border border-gray-200 bg-white p-8 shadow-md transition-shadow hover:shadow-lg dark:border-gray-700 dark:bg-gray-800\">\n              <div className=\"mb-4 flex size-12 items-center justify-center rounded-lg bg-orange-100 dark:bg-orange-900/20\">\n                <svg\n                  className=\"size-6 text-orange-600 dark:text-orange-400\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                  />\n                </svg>\n              </div>\n              <h3 className=\"font-montserrat mb-2 text-xl font-semibold text-gray-600 dark:text-gray-400\">\n                Advanced Search\n              </h3>\n              <p className=\"font-montserrat text-gray-600 dark:text-gray-400\">\n                Powerful search and filtering capabilities to quickly find residents, households,\n                and generate targeted lists.\n              </p>\n            </div>\n\n            {/* Security */}\n            <div className=\"rounded-xl border border-gray-200 bg-white p-8 shadow-md transition-shadow hover:shadow-lg dark:border-gray-700 dark:bg-gray-800\">\n              <div className=\"mb-4 flex size-12 items-center justify-center rounded-lg bg-red-100 dark:bg-red-900/20\">\n                <svg\n                  className=\"size-6 text-red-600 dark:text-red-400\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\"\n                  />\n                </svg>\n              </div>\n              <h3 className=\"font-montserrat mb-2 text-xl font-semibold text-gray-600 dark:text-gray-400\">\n                Secure & Compliant\n              </h3>\n              <p className=\"font-montserrat text-gray-600 dark:text-gray-400\">\n                Built with security best practices, data privacy compliance, and role-based access\n                control for safe operations.\n              </p>\n            </div>\n\n            {/* Digital Forms */}\n            <div className=\"rounded-xl border border-gray-200 bg-white p-8 shadow-md transition-shadow hover:shadow-lg dark:border-gray-700 dark:bg-gray-800\">\n              <div className=\"mb-4 flex size-12 items-center justify-center rounded-lg bg-blue-100 dark:bg-blue-900/20\">\n                <svg\n                  className=\"size-6 text-blue-600 dark:text-blue-400\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\n                  />\n                </svg>\n              </div>\n              <h3 className=\"font-montserrat mb-2 text-xl font-semibold text-gray-600 dark:text-gray-400\">\n                Digital Forms\n              </h3>\n              <p className=\"font-montserrat text-gray-600 dark:text-gray-400\">\n                Streamlined digital forms for certifications, business permits, and other barangay\n                documents with automated processing.\n              </p>\n            </div>\n          </div>\n        </section>\n\n        {/* CTA Section */}\n        <section className=\"mt-20\" aria-labelledby=\"cta-title\">\n          <div className=\"mt-20 rounded-2xl bg-blue-600 shadow-xl dark:bg-blue-700\">\n            <div className=\"px-6 py-12 sm:px-12 sm:py-16 lg:px-16\">\n              <div className=\"text-center\">\n                <h2\n                  id=\"cta-title\"\n                  className=\"font-montserrat text-3xl font-extrabold text-white dark:text-black\"\n                >\n                  Ready to modernize your barangay?\n                </h2>\n                <p className=\"font-montserrat mt-4 text-lg text-gray-100 dark:text-gray-200\">\n                  Join local government units across the Philippines in digitizing their resident\n                  management systems.\n                </p>\n                <div className=\"mt-8\">\n                  <Link href=\"/login\">\n                    <Button variant=\"secondary\" size=\"lg\">\n                      Start Your Digital Transformation\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      {/* Footer */}\n      <footer\n        className=\"mt-20 border-t border-gray-200 bg-white dark:border-gray-700 dark:bg-gray-900\"\n        role=\"contentinfo\"\n      >\n        <div className=\"mx-auto max-w-7xl px-4 py-12 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <div className=\"mb-4 flex items-center justify-center\">\n              <span className=\"font-montserrat text-xl font-semibold text-gray-900 dark:text-gray-100\">\n                Citizenly\n              </span>\n            </div>\n            <p className=\"font-montserrat text-gray-700 dark:text-gray-300\">\n              © 2024 Citizenly. Built for Philippine Local Government Units.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/signup/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/signup/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_assignedRole' is assigned a value but never used.","line":40,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_setAssignedRole' is assigned a value but never used.","line":40,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport Link from 'next/link';\nimport React, { useState, useEffect } from 'react';\n\nimport { InputField, SelectField, Button } from '@/components';\nimport { useGenericFormSubmission } from '@/hooks/utilities';\nimport { supabase, logger, logError } from '@/lib';\nimport { createFieldChangeHandler } from '@/lib/form-utils';\n// import { getErrorMessage } from '@/lib/auth-errors';\n\ninterface SignupFormData {\n  email: string;\n  password: string;\n  confirm_password: string;\n  first_name: string;\n  last_name: string;\n  mobile_number: string;\n  barangay_code: string;\n}\n\n// Profile creation now happens after email confirmation via database trigger\n// No need for immediate profile creation during signup\n\nexport default function SignupPage() {\n  const [formData, setFormData] = useState<SignupFormData>({\n    email: '',\n    password: '',\n    confirm_password: '',\n    first_name: '',\n    last_name: '',\n    mobile_number: '',\n    barangay_code: '',\n  });\n  const [barangayOptions, setBarangayOptions] = useState<{ value: string; label: string }[]>([]);\n  const [barangayLoading, setBarangayLoading] = useState(false);\n  const [barangaySearchTerm, setBarangaySearchTerm] = useState('');\n  const [errors, setErrors] = useState<{ [key: string]: string }>({});\n  const [step, setStep] = useState<'form' | 'success'>('form');\n  const [_assignedRole, _setAssignedRole] = useState<string>('');\n  const [submitStatus, setSubmitStatus] = useState<string>('');\n\n  // Load barangays directly from Supabase (simplified without joins)\n  const loadBarangays = async (searchTerm = '') => {\n    if (!searchTerm || searchTerm.length < 2) {\n      setBarangayOptions([]);\n      return;\n    }\n\n    try {\n      setBarangayLoading(true);\n\n      const { data, error } = await supabase\n        .from('psgc_barangays')\n        .select('code, name')\n        .ilike('name', `%${searchTerm}%`)\n        .limit(50)\n        .order('name');\n\n      if (error) {\n        console.error('Error loading barangays:', error);\n        return;\n      }\n\n      const options =\n        data?.map((item: { code: string; name: string }) => ({\n          value: item.code,\n          label: `${item.name} (${item.code})`,\n        })) || [];\n\n      setBarangayOptions(options);\n    } catch (error) {\n      console.error('Error loading barangays:', error);\n    } finally {\n      setBarangayLoading(false);\n    }\n  };\n\n  // Search barangays when search term changes\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      loadBarangays(barangaySearchTerm);\n    }, 300);\n\n    return () => clearTimeout(timeoutId);\n  }, [barangaySearchTerm]);\n\n  // Barangay admin checking now handled by database trigger after email confirmation\n\n  // Use consolidated form handler - eliminates 7 lines of duplicate code\n  const handleChange = createFieldChangeHandler<SignupFormData>(setFormData, setErrors);\n\n  // Use consolidated form submission hook\n  const { isSubmitting, handleSubmit } = useGenericFormSubmission<SignupFormData>({\n    onSubmit: async (data) => {\n      // Add timeout to prevent infinite loading\n      const timeoutId = setTimeout(() => {\n        logger.error('Signup process timed out after 30 seconds');\n        throw new Error('Signup process timed out. Please try again.');\n      }, 30000); // 30 second timeout\n\n      try {\n        // Step 1: Create auth user with metadata for post-confirmation processing\n        setSubmitStatus('Creating your account...');\n        \n        // Check if we're in development mode (disable emails to prevent bounces)\n        const isDevelopment = process.env.NODE_ENV === 'development';\n\n        const { data: authData, error: authError } = await supabase.auth.signUp({\n          email: data.email,\n          password: data.password,\n          options: {\n            data: {\n              first_name: data.first_name,\n              last_name: data.last_name,\n              phone: data.mobile_number,\n              barangay_code: data.barangay_code,\n              signup_step: 'awaiting_confirmation',\n            },\n            // In development, don't send confirmation emails\n            emailRedirectTo: isDevelopment ? undefined : `${window.location.origin}/auth/callback`,\n          },\n        });\n\n        if (authError || !authData.user) {\n          logger.error('Signup failed', {\n            error: authError?.message,\n            code: authError?.code,\n            status: authError?.status,\n          });\n          throw new Error(authError?.message || 'Failed to create account');\n        }\n\n        // Success\n        setSubmitStatus('Account created successfully!');\n        clearTimeout(timeoutId);\n      } catch (error) {\n        clearTimeout(timeoutId);\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n        logError(error instanceof Error ? error : new Error(errorMessage), 'SIGNUP_PROCESS');\n        throw error;\n      } finally {\n        setSubmitStatus('');\n      }\n    },\n    validate: (data) => {\n      const newErrors: Record<string, string> = {};\n\n      // Email validation\n      if (!data.email.trim()) {\n        newErrors.email = 'Email is required';\n      } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(data.email)) {\n        newErrors.email = 'Please enter a valid email address';\n      }\n\n      // Password validation\n      if (!data.password) {\n        newErrors.password = 'Password is required';\n      } else if (data.password.length < 8) {\n        newErrors.password = 'Password must be at least 8 characters';\n      } else if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(data.password)) {\n        newErrors.password =\n          'Password must contain at least one uppercase letter, one lowercase letter, and one number';\n      }\n\n      // Confirm password validation\n      if (!data.confirm_password) {\n        newErrors.confirm_password = 'Please confirm your password';\n      } else if (data.password !== data.confirm_password) {\n        newErrors.confirm_password = 'Passwords do not match';\n      }\n\n      // Name validation\n      if (!data.first_name.trim()) {\n        newErrors.first_name = 'First name is required';\n      }\n      if (!data.last_name.trim()) {\n        newErrors.last_name = 'Last name is required';\n      }\n\n      // Mobile number validation\n      if (!data.mobile_number.trim()) {\n        newErrors.mobile_number = 'Mobile number is required';\n      } else if (!/^(09|\\+639)\\d{9}$/.test(data.mobile_number.replace(/\\s+/g, ''))) {\n        newErrors.mobile_number = 'Please enter a valid Philippine mobile number';\n      }\n\n      // Barangay validation\n      if (!data.barangay_code) {\n        newErrors.barangay_code = 'Please select your barangay';\n      }\n\n      return {\n        isValid: Object.keys(newErrors).length === 0,\n        errors: newErrors,\n      };\n    },\n    onSuccess: () => {\n      setStep('success');\n    },\n    onError: (error) => {\n      setErrors({ general: error.message });\n    },\n  });\n\n  // Role assignment now handled by database trigger after email confirmation\n\n  // No auth loading check needed for signup page\n\n  // Success step\n  if (step === 'success') {\n    return (\n      <div className=\"flex min-h-screen flex-col justify-center bg-gray-50 py-12 sm:px-6 lg:px-8 dark:bg-gray-900\">\n        <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n          <div className=\"rounded-lg border border-gray-200 bg-white p-8 shadow-md dark:border-gray-700 dark:bg-gray-800\">\n            <div className=\"text-center\">\n              <div className=\"mx-auto flex size-12 items-center justify-center rounded-full bg-green-100 dark:bg-green-900\">\n                <svg\n                  className=\"size-6 text-green-600 dark:text-green-400\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth=\"2\"\n                    d=\"M5 13l4 4L19 7\"\n                  ></path>\n                </svg>\n              </div>\n              <h2 className=\"mt-6 text-2xl font-bold text-gray-900 dark:text-gray-100\">\n                Account Created Successfully!\n              </h2>\n\n              <div className=\"mt-4 rounded-lg border border-blue-200 bg-blue-50 p-4 dark:border-blue-700 dark:bg-blue-900/20\">\n                <h3 className=\"mb-2 text-sm font-medium text-blue-800 dark:text-blue-300\">\n                  Pending Role Assignment:\n                </h3>\n                <p className=\"text-blue-700 dark:text-blue-400\">\n                  You will be assigned as <strong>Barangay Administrator</strong> once you verify\n                  your email address.\n                </p>\n                <p className=\"mt-2 text-sm text-blue-600 dark:text-blue-400\">\n                  Your role will be automatically assigned after email verification, allowing you to\n                  manage users and data for your barangay.\n                </p>\n              </div>\n\n              <div className=\"mt-4 rounded-lg border border-yellow-200 bg-yellow-50 p-4 dark:border-yellow-700 dark:bg-yellow-900/20\">\n                <h3 className=\"mb-2 text-sm font-medium text-yellow-800 dark:text-yellow-300\">\n                  Next Steps:\n                </h3>\n                <ol className=\"list-inside list-decimal space-y-1 text-left text-sm text-yellow-700 dark:text-yellow-400\">\n                  <li>\n                    <strong>Check your email</strong> for a verification link from Citizenly\n                  </li>\n                  <li>\n                    <strong>Click the verification link</strong> to confirm your email address\n                  </li>\n                  <li>\n                    <strong>Your administrator account will be automatically activated</strong>{' '}\n                    after verification\n                  </li>\n                  <li>\n                    <strong>Return to login</strong> and access your dashboard\n                  </li>\n                  <li>\n                    <strong>Start managing your barangay</strong> - add residents and data\n                  </li>\n                </ol>\n              </div>\n\n              <div className=\"mt-6\">\n                <Link href=\"/login\">\n                  <Button variant=\"primary\" size=\"regular\">\n                    Go to Login\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex min-h-screen flex-col justify-center bg-gray-50 py-12 sm:px-6 lg:px-8 dark:bg-gray-900\">\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"text-center\">\n          <h1 className=\"mb-2 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n            Create RBI Account\n          </h1>\n          <p className=\"mb-8 text-sm text-gray-600 dark:text-gray-400\">\n            Join the Records of Barangay Inhabitant System\n          </p>\n        </div>\n\n        <div className=\"rounded-lg border border-gray-200 bg-white p-8 shadow-md dark:border-gray-700 dark:bg-gray-800\">\n          <form onSubmit={(e) => handleSubmit(e, formData)} className=\"space-y-6\">\n            {/* Status Message */}\n            {isSubmitting && submitStatus && (\n              <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4 dark:border-blue-700 dark:bg-blue-900/20\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"h-4 w-4 animate-spin rounded-full border-b-2 border-blue-600 dark:border-blue-400\"></div>\n                  <div>\n                    <h4 className=\"font-medium text-blue-800 dark:text-blue-300\">\n                      Creating Account\n                    </h4>\n                    <p className=\"text-sm text-blue-700 dark:text-blue-400\">{submitStatus}</p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* General Error */}\n            {errors.general && (\n              <div className=\"rounded-lg border border-red-200 bg-red-50 p-4 dark:border-red-700 dark:bg-red-900/20\">\n                <div className=\"flex items-start gap-3\">\n                  <span className=\"mt-0.5 text-red-600 dark:text-red-400\">⚠️</span>\n                  <div>\n                    <h4 className=\"font-medium text-red-800 dark:text-red-300\">\n                      Registration Failed\n                    </h4>\n                    <p className=\"text-sm text-red-700 dark:text-red-400\">{errors.general}</p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Personal Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"border-b border-gray-200 pb-2 text-lg font-medium text-gray-900 dark:border-gray-600 dark:text-gray-100\">\n                Personal Information\n              </h3>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <InputField\n                  label=\"First Name\"\n                  required\n                  errorMessage={errors.first_name}\n                  inputProps={{\n                    id: 'first_name',\n                    type: 'text',\n                    value: formData.first_name,\n                    onChange: (e: React.ChangeEvent<HTMLInputElement>) =>\n                      handleChange('first_name', e.target.value),\n                    placeholder: 'Juan',\n                    disabled: isSubmitting,\n                    autoComplete: 'given-name',\n                    leftIcon: (\n                      <svg className=\"size-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth={2}\n                          d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\n                        />\n                      </svg>\n                    ),\n                  }}\n                />\n                <InputField\n                  label=\"Last Name\"\n                  required\n                  errorMessage={errors.last_name}\n                  inputProps={{\n                    id: 'last_name',\n                    type: 'text',\n                    value: formData.last_name,\n                    onChange: (e: React.ChangeEvent<HTMLInputElement>) =>\n                      handleChange('last_name', e.target.value),\n                    placeholder: 'Dela Cruz',\n                    disabled: isSubmitting,\n                    autoComplete: 'family-name',\n                    leftIcon: (\n                      <svg className=\"size-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth={2}\n                          d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\n                        />\n                      </svg>\n                    ),\n                  }}\n                />\n              </div>\n\n              <InputField\n                label=\"Email Address\"\n                required\n                errorMessage={errors.email}\n                helperText=\"Use a valid email address for account verification\"\n                inputProps={{\n                  id: 'email',\n                  type: 'email',\n                  value: formData.email,\n                  onChange: (e: React.ChangeEvent<HTMLInputElement>) =>\n                    handleChange('email', e.target.value),\n                  placeholder: 'juan.delacruz@gmail.com',\n                  disabled: isSubmitting,\n                  autoComplete: 'email',\n                  leftIcon: (\n                    <svg className=\"size-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path d=\"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z\"></path>\n                      <polyline points=\"22,6 12,13 2,6\"></polyline>\n                    </svg>\n                  ),\n                }}\n              />\n\n              <InputField\n                label=\"Mobile Number\"\n                required\n                errorMessage={errors.mobile_number}\n                inputProps={{\n                  id: 'mobileNumber',\n                  type: 'tel',\n                  value: formData.mobile_number,\n                  onChange: (e: React.ChangeEvent<HTMLInputElement>) =>\n                    handleChange('mobile_number', e.target.value),\n                  placeholder: '09XX XXX XXXX',\n                  disabled: isSubmitting,\n                  autoComplete: 'tel',\n                  leftIcon: (\n                    <svg className=\"size-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\"\n                      />\n                    </svg>\n                  ),\n                }}\n              />\n            </div>\n\n            {/* Location Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"border-b border-gray-200 pb-2 text-lg font-medium text-gray-900 dark:border-gray-600 dark:text-gray-100\">\n                Location Information\n              </h3>\n\n              <SelectField\n                label=\"Barangay\"\n                required\n                errorMessage={errors.barangay_code}\n                selectProps={{\n                  placeholder: 'Search and select your barangay...',\n                  options: barangayOptions,\n                  value: formData.barangay_code,\n                  onSelect: option => handleChange('barangay_code', option?.value || ''),\n                  onSearch: query => setBarangaySearchTerm(query),\n                  loading: barangayLoading,\n                  disabled: isSubmitting || barangayLoading,\n                  error: errors.barangay_code,\n                  searchable: true,\n                }}\n              />\n            </div>\n\n            {/* Barangay Selection Info */}\n            <div className=\"space-y-4\">\n              <h3 className=\"border-b border-gray-200 pb-2 text-lg font-medium text-gray-900 dark:border-gray-600 dark:text-gray-100\">\n                Role Assignment\n              </h3>\n              <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4 dark:border-blue-700 dark:bg-blue-900/20\">\n                <h4 className=\"mb-2 text-sm font-medium text-blue-800 dark:text-blue-300\">\n                  Automatic Role Assignment\n                </h4>\n                <p className=\"text-sm text-blue-700 dark:text-blue-400\">\n                  Your role will be automatically assigned based on your barangay:\n                </p>\n                <ul className=\"mt-2 list-inside list-disc text-sm text-blue-600 dark:text-blue-400\">\n                  <li>\n                    If no administrator exists for your barangay →{' '}\n                    <strong>Barangay Administrator</strong>\n                  </li>\n                  <li>\n                    If an administrator already exists → <strong>Registration blocked</strong>\n                    <br />\n                    <small className=\"text-blue-500 dark:text-blue-500\">\n                      Contact your barangay admin to be invited to the system\n                    </small>\n                  </li>\n                </ul>\n              </div>\n            </div>\n\n            {/* Account Security */}\n            <div className=\"space-y-4\">\n              <h3 className=\"border-b border-gray-200 pb-2 text-lg font-medium text-gray-900 dark:border-gray-600 dark:text-gray-100\">\n                Account Security\n              </h3>\n\n              <InputField\n                label=\"Password\"\n                required\n                errorMessage={errors.password}\n                inputProps={{\n                  id: 'password',\n                  type: 'password',\n                  value: formData.password,\n                  onChange: (e: React.ChangeEvent<HTMLInputElement>) =>\n                    handleChange('password', e.target.value),\n                  placeholder: 'Create a strong password',\n                  disabled: isSubmitting,\n                  autoComplete: 'new-password',\n                  showPasswordToggle: true,\n                  leftIcon: (\n                    <svg className=\"size-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <rect x=\"3\" y=\"11\" width=\"18\" height=\"11\" rx=\"2\" ry=\"2\"></rect>\n                      <circle cx=\"12\" cy=\"16\" r=\"1\"></circle>\n                      <path d=\"M7 11V7a5 5 0 0 1 10 0v4\"></path>\n                    </svg>\n                  ),\n                }}\n              />\n\n              <InputField\n                label=\"Confirm Password\"\n                required\n                errorMessage={errors.confirm_password}\n                inputProps={{\n                  id: 'confirmPassword',\n                  type: 'password',\n                  value: formData.confirm_password,\n                  onChange: (e: React.ChangeEvent<HTMLInputElement>) =>\n                    handleChange('confirm_password', e.target.value),\n                  placeholder: 'Confirm your password',\n                  disabled: isSubmitting,\n                  autoComplete: 'new-password',\n                  showPasswordToggle: true,\n                  leftIcon: (\n                    <svg className=\"size-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <rect x=\"3\" y=\"11\" width=\"18\" height=\"11\" rx=\"2\" ry=\"2\"></rect>\n                      <circle cx=\"12\" cy=\"16\" r=\"1\"></circle>\n                      <path d=\"M7 11V7a5 5 0 0 1 10 0v4\"></path>\n                    </svg>\n                  ),\n                }}\n              />\n            </div>\n\n            {/* Submit Button */}\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting}\n              loading={isSubmitting}\n              variant=\"primary\"\n              size=\"regular\"\n              fullWidth\n            >\n              Create Account\n            </Button>\n          </form>\n\n          {/* Footer */}\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Already have an account?{' '}\n              <Link\n                href=\"/login\"\n                className=\"font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300\"\n              >\n                Sign in here\n              </Link>\n            </p>\n            <p className=\"mt-2 text-xs text-gray-500 dark:text-gray-500\">\n              By creating an account, you agree to follow barangay policies and data privacy\n              guidelines.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/app/template.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Badge/Badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Badge/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Button/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Button/__tests__/Button.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Button/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Chart/ChartContainer/ChartContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Chart/ChartContainer/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Chart/ChartEmptyState/ChartEmptyState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Chart/ChartEmptyState/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Chart/ChartLegend/ChartLegend.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Chart/ChartLegend/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Chart/ChartTitle/ChartTitle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Chart/ChartTitle/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Chart/ChartTooltip/ChartTooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Chart/ChartTooltip/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Chart/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/Control/Checkbox/Checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/Control/Checkbox/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/Control/Control.tsx","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":175,"column":86,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":175,"endColumn":91},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":176,"column":44,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":176,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport React, { forwardRef, InputHTMLAttributes } from 'react';\n\nimport { cn } from '@/lib';\n\nimport { TitleDescription } from './TitleDescription';\n\nconst controlVariants = cva(\n  'relative inline-flex items-center cursor-pointer disabled:cursor-not-allowed',\n  {\n    variants: {\n      size: {\n        sm: 'text-sm',\n        md: 'text-base',\n        lg: 'text-lg',\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n    },\n  }\n);\n\n// Common input variants for checkbox and radio\nconst inputVariants = cva(\n  'relative border transition-colors focus:outline-hidden focus:ring-2 focus:ring-offset-1',\n  {\n    variants: {\n      variant: {\n        default: 'border-[#d4d4d4] bg-white focus:ring-[#7c3aed]/20',\n        primary: 'border-[#d4d4d4] bg-white focus:ring-[#2563eb]/20',\n        error: 'border-[#dc2626] bg-white focus:ring-[#dc2626]/20',\n        disabled: 'border-[#d4d4d4] bg-[#fafafa] cursor-not-allowed',\n      },\n      size: {\n        sm: 'w-4 h-4',\n        md: 'w-5 h-5',\n        lg: 'w-6 h-6',\n      },\n      type: {\n        checkbox: 'rounded-sm',\n        radio: 'rounded-full',\n        toggle: 'rounded-full', // Will be overridden with specific toggle styles\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md',\n      type: 'checkbox',\n    },\n  }\n);\n\n// Toggle-specific variants\nconst toggleSwitchVariants = cva(\n  'relative inline-flex items-center rounded-full border-2 transition-colors duration-200 ease-in-out focus:outline-hidden focus:ring-2 focus:ring-offset-2',\n  {\n    variants: {\n      variant: {\n        default: 'border-transparent focus:ring-[#7c3aed]/20',\n        primary: 'border-transparent focus:ring-[#2563eb]/20',\n        error: 'border-transparent focus:ring-[#dc2626]/20',\n        disabled: 'border-transparent cursor-not-allowed',\n      },\n      size: {\n        sm: 'h-5 w-9',\n        md: 'h-6 w-11',\n        lg: 'h-7 w-13',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md',\n    },\n  }\n);\n\nexport interface ControlProps\n  extends Omit<InputHTMLAttributes<HTMLInputElement>, 'size' | 'onToggle'>,\n    VariantProps<typeof controlVariants> {\n  /** Option type: checkbox, radio, or toggle */\n  type: 'checkbox' | 'radio' | 'toggle';\n  /** Label text displayed next to the option */\n  label?: string;\n  /** Description text displayed below the label */\n  description?: string;\n  /** Error message to display */\n  errorMessage?: string;\n  /** Visual variant */\n  variant?: 'default' | 'primary' | 'error' | 'disabled';\n  /** Indeterminate state (checkbox only) */\n  indeterminate?: boolean;\n  /** Toggle change handler (toggle only) */\n  onToggle?: (checked: boolean) => void;\n}\n\nconst Control = forwardRef<HTMLInputElement, ControlProps>(\n  (\n    {\n      className,\n      size = 'md',\n      variant = 'default',\n      type,\n      label,\n      description,\n      errorMessage,\n      indeterminate = false,\n      disabled,\n      checked = false,\n      onToggle,\n      onChange,\n      ...props\n    },\n    ref\n  ) => {\n    const actualVariant = disabled ? 'disabled' : errorMessage ? 'error' : variant;\n    const checkboxRef = React.useRef<HTMLInputElement>(null);\n\n    // Handle indeterminate state for checkboxes\n    React.useEffect(() => {\n      if (type === 'checkbox' && checkboxRef.current) {\n        checkboxRef.current.indeterminate = indeterminate;\n      }\n    }, [indeterminate, type]);\n\n    // Use either the forwarded ref or our internal ref\n    const inputRef = ref || checkboxRef;\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const newChecked = e.target.checked;\n      onChange?.(e);\n      if (type === 'toggle') {\n        onToggle?.(newChecked);\n      }\n    };\n\n    // Render toggle\n    const renderToggle = () => {\n      const getBackgroundColor = () => {\n        if (disabled) {\n          return checked ? 'bg-[#d4d4d4]' : 'bg-[#fafafa]';\n        }\n        if (!checked) {\n          return 'bg-[#d4d4d4]';\n        }\n        switch (actualVariant) {\n          case 'primary':\n            return 'bg-[#2563eb]';\n          case 'error':\n            return 'bg-[#dc2626]';\n          default:\n            return 'bg-[#7c3aed]';\n        }\n      };\n\n      const getThumbClasses = () => {\n        const baseClasses =\n          'inline-block rounded-full bg-white shadow transform transition-transform duration-200 ease-in-out';\n        const sizeClasses = {\n          sm: 'w-3 h-3',\n          md: 'w-4 h-4',\n          lg: 'w-5 h-5',\n        };\n        const translateClasses = checked\n          ? {\n              sm: 'translate-x-4',\n              md: 'translate-x-5',\n              lg: 'translate-x-6',\n            }\n          : 'translate-x-0';\n\n        const translateClass =\n          typeof translateClasses === 'string' ? translateClasses : translateClasses[size!];\n        return cn(baseClasses, sizeClasses[size!], translateClass);\n      };\n\n      return (\n        <div className=\"relative flex items-start\">\n          <button\n            type=\"button\"\n            role=\"switch\"\n            aria-checked={checked}\n            aria-disabled={disabled}\n            className={cn(\n              toggleSwitchVariants({ variant: actualVariant, size }),\n              getBackgroundColor()\n            )}\n            onClick={() => {\n              if (!disabled) {\n                const newChecked = !checked;\n                onToggle?.(newChecked);\n                // Create synthetic event for compatibility\n                const syntheticEvent = {\n                  target: { checked: newChecked },\n                  currentTarget: { checked: newChecked },\n                } as React.ChangeEvent<HTMLInputElement>;\n                onChange?.(syntheticEvent);\n              }\n            }}\n          >\n            <span className={getThumbClasses()} />\n          </button>\n\n          {/* Hidden input for form compatibility */}\n          <input\n            ref={inputRef}\n            type=\"checkbox\"\n            className=\"sr-only\"\n            checked={checked}\n            disabled={disabled}\n            onChange={handleChange}\n            {...props}\n          />\n        </div>\n      );\n    };\n\n    // Render checkbox or radio\n    const renderInput = () => {\n      return (\n        <div className=\"relative flex items-start\">\n          <input\n            ref={inputRef}\n            type={type}\n            className={cn(\n              inputVariants({ variant: actualVariant, size, type }),\n              'shrink-0 appearance-none',\n              // Checked styles\n              type === 'checkbox' && 'checked:border-[#7c3aed] checked:bg-[#7c3aed]',\n              type === 'checkbox' &&\n                actualVariant === 'primary' &&\n                'checked:border-[#2563eb] checked:bg-[#2563eb]',\n              type === 'checkbox' &&\n                actualVariant === 'error' &&\n                'checked:border-[#dc2626] checked:bg-[#dc2626]',\n              type === 'checkbox' && actualVariant === 'disabled' && 'checked:bg-[#d4d4d4]',\n              type === 'radio' && 'checked:border-[#7c3aed]',\n              type === 'radio' && actualVariant === 'primary' && 'checked:border-[#2563eb]',\n              type === 'radio' && actualVariant === 'error' && 'checked:border-[#dc2626]'\n            )}\n            disabled={disabled}\n            checked={checked}\n            onChange={handleChange}\n            {...props}\n          />\n\n          {/* Custom indicators */}\n          {type === 'checkbox' && (\n            <div\n              className={cn(\n                'pointer-events-none absolute inset-0 flex items-center justify-center',\n                size === 'sm' && 'h-4 w-4',\n                size === 'md' && 'h-5 w-5',\n                size === 'lg' && 'h-6 w-6'\n              )}\n            >\n              {indeterminate ? (\n                <div\n                  className={cn(\n                    'bg-white',\n                    size === 'sm' && 'h-0.5 w-2',\n                    size === 'md' && 'h-0.5 w-2.5',\n                    size === 'lg' && 'h-1 w-3'\n                  )}\n                />\n              ) : (\n                checked && (\n                  <svg\n                    className={cn(\n                      'text-white',\n                      size === 'sm' && 'h-3 w-3',\n                      size === 'md' && 'h-3 w-3',\n                      size === 'lg' && 'h-4 w-4'\n                    )}\n                    fill=\"currentColor\"\n                    viewBox=\"0 0 20 20\"\n                  >\n                    <path\n                      fillRule=\"evenodd\"\n                      d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                      clipRule=\"evenodd\"\n                    />\n                  </svg>\n                )\n              )}\n            </div>\n          )}\n\n          {type === 'radio' && checked && (\n            <div\n              className={cn(\n                'pointer-events-none absolute inset-0 flex items-center justify-center',\n                size === 'sm' && 'h-4 w-4',\n                size === 'md' && 'h-5 w-5',\n                size === 'lg' && 'h-6 w-6'\n              )}\n            >\n              <div\n                className={cn(\n                  'rounded-full',\n                  actualVariant === 'primary' && 'bg-[#2563eb]',\n                  actualVariant === 'error' && 'bg-[#dc2626]',\n                  actualVariant === 'disabled' && 'bg-[#d4d4d4]',\n                  actualVariant === 'default' && 'bg-[#7c3aed]',\n                  size === 'sm' && 'h-1.5 w-1.5',\n                  size === 'md' && 'h-2 w-2',\n                  size === 'lg' && 'h-2.5 w-2.5'\n                )}\n              />\n            </div>\n          )}\n        </div>\n      );\n    };\n\n    return (\n      <div className=\"w-full\">\n        <label className={cn(controlVariants({ size }), className)}>\n          {type === 'toggle' ? renderToggle() : renderInput()}\n\n          <TitleDescription\n            title={label}\n            description={description}\n            errorMessage={errorMessage}\n            variant={actualVariant}\n            disabled={disabled}\n            size={size}\n          />\n        </label>\n      </div>\n    );\n  }\n);\n\nControl.displayName = 'Control';\n\nexport { Control };\nexport default Control;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/Control/Radio/Radio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/Control/Radio/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/Control/TitleDescription.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/Control/Toggle/Toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/Control/Toggle/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/Control/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/HelperText/HelperText.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/HelperText/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/Input/Input.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'leftPadding' is assigned a value but never used.","line":62,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'rightPadding' is assigned a value but never used.","line":66,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { forwardRef, useState } from 'react';\n\nexport interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  /** Error message to display */\n  error?: string;\n  /** Custom class name */\n  className?: string;\n  /** Whether to show a clear button when input has content */\n  clearable?: boolean;\n  /** Callback when clear button is clicked */\n  onClear?: () => void;\n  /** Whether to show password visibility toggle for password inputs */\n  showPasswordToggle?: boolean;\n  /** Left icon element */\n  leftIcon?: React.ReactNode;\n  /** Right icon element */\n  rightIcon?: React.ReactNode;\n  /** Whether the input is dismissible/clearable */\n  dismissible?: boolean;\n  /** Loading state for async operations */\n  loading?: boolean;\n  /** Whether to suppress clear/dismiss buttons (for Select usage) */\n  suppressActions?: boolean;\n}\n\nexport const Input = forwardRef<HTMLInputElement, InputProps>(\n  (\n    {\n      error,\n      className = '',\n      clearable = false,\n      dismissible = false,\n      onClear,\n      value,\n      showPasswordToggle = false,\n      type,\n      leftIcon,\n      rightIcon,\n      name,\n      id,\n      disabled = false,\n      loading = false,\n      suppressActions = false,\n      ...props\n    },\n    ref\n  ) => {\n    const [showPassword, setShowPassword] = useState(false);\n\n    // Generate unique IDs for the form elements\n    const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`;\n\n    const hasValue = value !== undefined && value !== '';\n    const showClearButton = !suppressActions && (clearable || dismissible) && hasValue;\n    const isPasswordInput = type === 'password';\n    const showPasswordButton = !suppressActions && showPasswordToggle && isPasswordInput;\n    const effectiveType = isPasswordInput && showPassword ? 'text' : type;\n\n    // Calculate left padding for left icon\n    const leftPadding = leftIcon ? 'pl-10' : 'pl-3';\n\n    // Calculate right padding for right elements\n    const rightElements = [rightIcon, showClearButton, showPasswordButton].filter(Boolean);\n    const rightPadding =\n      rightElements.length > 0\n        ? rightElements.length === 1\n          ? 'pr-10'\n          : rightElements.length === 2\n            ? 'pr-16'\n            : 'pr-20'\n        : 'pr-3';\n\n    const handleClear = () => {\n      if (onClear) {\n        onClear();\n      }\n    };\n\n    const togglePasswordVisibility = () => {\n      setShowPassword(!showPassword);\n    };\n\n    return (\n      <div className=\"relative\">\n        <div\n          className={`font-system relative flex w-full items-center transition-colors focus-within:outline-hidden ${\n            error\n              ? 'rounded-sm border border-red-600 bg-white focus-within:border-red-600 focus-within:shadow-[0px_0px_0px_4px_rgba(220,38,38,0.32)] dark:bg-gray-800'\n              : 'rounded-sm border border-gray-300 bg-white focus-within:border-blue-600 focus-within:shadow-[0px_0px_0px_4px_rgba(59,130,246,0.32)] dark:border-gray-600 dark:bg-gray-800'\n          } min-h-10 p-2 text-base ${className}`}\n        >\n          {/* Left Icon */}\n          {leftIcon && (\n            <div className=\"mr-2 flex size-5 shrink-0 items-center justify-center text-gray-400 dark:text-gray-500\">\n              {leftIcon}\n            </div>\n          )}\n\n          <div className=\"flex min-h-0 min-w-0 grow basis-0 flex-col items-center justify-center gap-0.5 px-1 py-0\">\n            <div className=\"font-montserrat flex w-full flex-col justify-center overflow-hidden leading-5 font-normal text-nowrap text-ellipsis\">\n              <input\n                ref={ref}\n                id={inputId}\n                name={name}\n                type={effectiveType}\n                value={value || ''}\n                {...props}\n                className=\"font-montserrat w-full border-0 bg-transparent text-base leading-5 font-normal text-gray-600 shadow-none ring-0 outline-0 placeholder:text-gray-500 focus:border-0 focus:shadow-none focus:ring-0 focus:outline-0 dark:text-gray-300 dark:placeholder:text-gray-400\"\n                style={{\n                  border: 'none',\n                  outline: 'none',\n                  boxShadow: 'none',\n                  appearance: 'none',\n                }}\n                disabled={disabled}\n                aria-invalid={error ? 'true' : 'false'}\n              />\n            </div>\n          </div>\n\n          {/* Right Icons and Controls */}\n          <div className=\"flex items-center space-x-2\">\n            {/* Loading Indicator */}\n            {loading && (\n              <div className=\"flex size-5 shrink-0 items-center justify-center text-gray-600 dark:text-gray-400\">\n                <svg className=\"size-4 animate-spin\" fill=\"none\" viewBox=\"0 0 24 24\">\n                  <circle\n                    className=\"opacity-25\"\n                    cx=\"12\"\n                    cy=\"12\"\n                    r=\"10\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"4\"\n                  />\n                  <path\n                    className=\"opacity-75\"\n                    fill=\"currentColor\"\n                    d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                  />\n                </svg>\n              </div>\n            )}\n\n            {/* Right Icon */}\n            {rightIcon && (\n              <div className=\"flex size-5 shrink-0 items-center justify-center text-gray-400 dark:text-gray-500\">\n                {rightIcon}\n              </div>\n            )}\n\n            {/* Clear/Dismiss Button */}\n            {showClearButton && (\n              <button\n                type=\"button\"\n                className=\"focus:ring-opacity-50 flex size-5 shrink-0 items-center justify-center rounded text-gray-400 transition-colors duration-200 hover:text-gray-600 focus:ring-2 focus:ring-blue-500 focus:outline-none dark:text-gray-500 dark:hover:text-gray-300\"\n                onClick={handleClear}\n                aria-label=\"Clear input\"\n                tabIndex={-1}\n              >\n                <svg className=\"size-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M6 18L18 6M6 6l12 12\"\n                  />\n                </svg>\n              </button>\n            )}\n\n            {/* Password Toggle */}\n            {showPasswordButton && (\n              <button\n                type=\"button\"\n                className=\"focus:ring-opacity-50 flex size-5 shrink-0 items-center justify-center rounded text-gray-400 transition-colors duration-200 hover:text-gray-600 focus:ring-2 focus:ring-blue-500 focus:outline-none dark:text-gray-500 dark:hover:text-gray-300\"\n                onClick={togglePasswordVisibility}\n                aria-label={showPassword ? 'Hide password' : 'Show password'}\n                tabIndex={-1}\n              >\n                {showPassword ? (\n                  <svg className=\"size-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21\"\n                    />\n                  </svg>\n                ) : (\n                  <svg className=\"size-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"\n                    />\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\"\n                    />\n                  </svg>\n                )}\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\nInput.displayName = 'Input';\n\nexport default Input;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/Input/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/Label/Label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/Label/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/ReadOnly/ReadOnly.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/ReadOnly/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/Select/Option/Option.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'description' is defined but never used. Allowed unused args must match /^_/u.","line":37,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'value' is defined but never used. Allowed unused args must match /^_/u.","line":38,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { forwardRef } from 'react';\n\nexport interface OptionProps {\n  /** Whether this option is currently selected */\n  selected?: boolean;\n  /** Whether this option is currently focused/highlighted */\n  focused?: boolean;\n  /** Whether this option is disabled */\n  disabled?: boolean;\n  /** Main option label */\n  label: string;\n  /** Optional description text */\n  description?: string;\n  /** Optional value for the option */\n  value?: string;\n  /** Optional badge text to display on the right */\n  badge?: string;\n  /** Click handler */\n  onClick?: () => void;\n  /** Mouse enter handler for focus management */\n  onMouseEnter?: () => void;\n  /** Custom class name */\n  className?: string;\n  /** Custom children to override default rendering */\n  children?: React.ReactNode;\n}\n\nexport const Option = forwardRef<HTMLDivElement, OptionProps>(\n  (\n    {\n      selected = false,\n      focused = false,\n      disabled = false,\n      label,\n      description,\n      value,\n      badge,\n      onClick,\n      onMouseEnter,\n      className = '',\n      children,\n    },\n    ref\n  ) => {\n    const handleClick = () => {\n      if (!disabled && onClick) {\n        onClick();\n      }\n    };\n\n    const handleMouseEnter = () => {\n      if (!disabled && onMouseEnter) {\n        onMouseEnter();\n      }\n    };\n\n    return (\n      <div\n        ref={ref}\n        role=\"option\"\n        aria-selected={selected}\n        aria-disabled={disabled}\n        className={`cursor-pointer px-3 py-3 transition-colors duration-150 sm:px-4 ${\n          focused\n            ? 'bg-blue-50 text-blue-900 dark:bg-blue-900/30 dark:text-blue-100'\n            : 'text-gray-900 hover:bg-gray-50 dark:text-gray-100 dark:hover:bg-gray-700'\n        } ${selected ? 'bg-blue-100 font-medium dark:bg-blue-900/20' : ''} ${\n          disabled ? 'cursor-not-allowed opacity-50' : ''\n        } ${className}`}\n        onClick={handleClick}\n        onMouseEnter={handleMouseEnter}\n      >\n        {children ? (\n          children\n        ) : (\n          <div className=\"flex items-center justify-between gap-3\">\n            <div className=\"min-w-0 flex-1\">\n              <div className=\"truncate text-sm font-medium\">\n                {label.includes(',') ? (\n                  <>\n                    {label.split(',')[0]}\n                    <span className=\"font-normal text-gray-500 dark:text-gray-400\">\n                      , {label.split(',').slice(1).join(',')}\n                    </span>\n                  </>\n                ) : (\n                  label\n                )}\n              </div>\n            </div>\n            <div className=\"flex flex-shrink-0 items-center gap-2\">\n              {badge && (\n                <span className=\"inline-flex items-center rounded bg-gray-100 px-2 py-0.5 text-xs font-medium text-gray-800 dark:bg-gray-700 dark:text-gray-200\">\n                  {badge}\n                </span>\n              )}\n              {selected && (\n                <svg className=\"h-4 w-4 text-blue-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                    clipRule=\"evenodd\"\n                  />\n                </svg>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nOption.displayName = 'Option';\n\nexport default Option;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/Select/Option/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/Select/Select.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":611,"column":15,"nodeType":"MemberExpression","messageId":"limited","endLine":611,"endColumn":26,"suggestions":[{"fix":{"range":[20168,20576],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":627,"column":19,"nodeType":"MemberExpression","messageId":"limited","endLine":627,"endColumn":30,"suggestions":[{"fix":{"range":[20793,20837],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced Select Component\n * Follows PSGCSelector patterns for consistency across the application\n * Supports both static enums and API-driven data\n */\n\n'use client';\n\nimport { useState, useEffect, useRef, useCallback } from 'react';\n\nimport { createDropdownKeyHandler } from '@/lib/keyboardUtils';\n\nimport { Input } from '../Input';\n\nimport { Option } from './Option';\n\nexport type SelectOption = {\n  value: string;\n  label: string;\n  disabled?: boolean;\n  description?: string;\n  category?: string;\n  badge?: string;\n};\n\ninterface SelectProps {\n  value?: string;\n  onSelect: (option: SelectOption | null) => void;\n  placeholder?: string;\n  className?: string;\n  error?: string;\n  // Data sources\n  options?: SelectOption[];\n  enumData?: Record<string, string> | SelectOption[];\n  // Configuration options\n  name?: string;\n  id?: string;\n  disabled?: boolean;\n  searchable?: boolean;\n  allowCustom?: boolean;\n  // API integration (similar to PSGCSelector)\n  onSearch?: (query: string) => void;\n  loading?: boolean;\n  // Lazy loading support\n  hasMore?: boolean;\n  onLoadMore?: () => void;\n  loadingMore?: boolean;\n  infiniteScroll?: boolean; // Enable infinite scroll vs manual button\n}\n\n// Utility function to convert enum/constant data to SelectOption array\nconst normalizeOptions = (\n  data: SelectOption[] | Record<string, string> | undefined\n): SelectOption[] => {\n  if (!data) return [];\n\n  if (Array.isArray(data)) {\n    return data;\n  }\n\n  // Convert enum or object to options\n  return Object.entries(data).map(([key, value]) => ({\n    value: key,\n    label: typeof value === 'string' ? value : String(value),\n  }));\n};\n\nexport default function Select({\n  value,\n  onSelect,\n  placeholder = 'Select an option...',\n  className = '',\n  error,\n  options = [],\n  enumData,\n  name,\n  id,\n  disabled = false,\n  searchable = true,\n  allowCustom = false,\n  onSearch, // For API-driven searches\n  loading = false,\n  hasMore = false,\n  onLoadMore,\n  loadingMore = false,\n  infiniteScroll = true, // Default to infinite scroll\n}: SelectProps) {\n  const [inputValue, setInputValue] = useState('');\n  const [normalizedOptions, setNormalizedOptions] = useState<SelectOption[]>([]);\n  const [filteredOptions, setFilteredOptions] = useState<SelectOption[]>([]);\n  const [selectedOption, setSelectedOption] = useState<SelectOption | null>(null);\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [focusedIndex, setFocusedIndex] = useState(-1);\n  const [dropdownPosition, setDropdownPosition] = useState<'below' | 'above'>('below');\n  const [justSelected, setJustSelected] = useState(false);\n\n  const debounceTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const optionRefs = useRef<(HTMLDivElement | null)[]>([]);\n  const lastSearchRef = useRef<string>('');\n\n  // Generate unique IDs for the form elements\n  const inputId = id || `select-input-${Math.random().toString(36).substr(2, 9)}`;\n\n  // Normalize and set options (for static data)\n  useEffect(() => {\n    if (enumData || options.length > 0) {\n      const normalized = normalizeOptions(enumData || options);\n      setNormalizedOptions(normalized);\n      // Don't automatically set filteredOptions here - let explicit interactions control this\n      // setFilteredOptions(normalized);\n    }\n  }, [options, enumData]);\n\n  // Debounced search (handles both static and API)\n  useEffect(() => {\n    if (debounceTimerRef.current) {\n      clearTimeout(debounceTimerRef.current);\n    }\n\n    if (onSearch) {\n      // API-driven search with debounce\n      const timer = setTimeout(() => {\n        if (inputValue.trim() && inputValue.length >= 2 && lastSearchRef.current !== inputValue) {\n          lastSearchRef.current = inputValue;\n          onSearch(inputValue);\n        } else if (!enumData && inputValue.trim().length < 2) {\n          setFilteredOptions([]);\n        }\n      }, 300);\n      debounceTimerRef.current = timer;\n    } else {\n      // Static data filtering - immediate for better UX\n      if (!inputValue.trim() || !searchable) {\n        // Don't automatically set filteredOptions when input is empty\n        // This prevents unwanted dropdown showing\n        // setFilteredOptions(normalizedOptions);\n        setFocusedIndex(-1);\n      } else {\n        const filtered = normalizedOptions.filter(\n          option =>\n            option.label.toLowerCase().includes(inputValue.toLowerCase()) ||\n            option.value.toLowerCase().includes(inputValue.toLowerCase()) ||\n            option.description?.toLowerCase().includes(inputValue.toLowerCase())\n        );\n        setFilteredOptions(filtered);\n        setFocusedIndex(filtered.length > 0 ? 0 : -1);\n      }\n    }\n\n    return () => {\n      if (debounceTimerRef.current) {\n        clearTimeout(debounceTimerRef.current);\n      }\n    };\n  }, [inputValue, onSearch, normalizedOptions, searchable, enumData]);\n\n  // Calculate dropdown position based on available space\n  const calculateDropdownPosition = useCallback(() => {\n    if (!inputRef.current) return 'below';\n\n    const inputRect = inputRef.current.getBoundingClientRect();\n    const viewportHeight = window.innerHeight;\n    const dropdownHeight = 320; // max-h-80 = 320px\n\n    const spaceBelow = viewportHeight - inputRect.bottom;\n    const spaceAbove = inputRect.top;\n\n    // If there's not enough space below but enough space above, show above\n    if (spaceBelow < dropdownHeight && spaceAbove > dropdownHeight) {\n      return 'above';\n    }\n\n    return 'below';\n  }, []);\n\n  // Show dropdown only on explicit user interaction (focus, click, typing, keyboard)\n  // By default, hide dropdown - only show when user actively interacts\n  useEffect(() => {\n    // Always hide dropdown by default after selection\n    if (justSelected) {\n      setShowDropdown(false);\n      return;\n    }\n\n    // For typing behavior: only show when user has typed enough characters\n    // BUT don't show if the inputValue exactly matches the selectedOption (means it's not user typing)\n    if (inputValue.trim().length > 0 && !(selectedOption && inputValue === selectedOption.label)) {\n      const shouldShow = onSearch\n        ? true // For API search: always show when user is typing, let dropdown content handle the messaging\n        : filteredOptions.length > 0; // For static data: only show if there are options\n\n      if (shouldShow) {\n        setShowDropdown(true);\n        setDropdownPosition(calculateDropdownPosition());\n        optionRefs.current = optionRefs.current.slice(0, Math.max(filteredOptions.length, 1));\n      } else {\n        setShowDropdown(false);\n      }\n    }\n    // Note: Focus and keyboard interactions are handled separately in their respective handlers\n  }, [\n    filteredOptions,\n    inputValue,\n    calculateDropdownPosition,\n    onSearch,\n    justSelected,\n    selectedOption,\n  ]);\n\n  // Scroll focused option into view\n  useEffect(() => {\n    if (focusedIndex >= 0 && optionRefs.current[focusedIndex]) {\n      optionRefs.current[focusedIndex]?.scrollIntoView({\n        behavior: 'smooth',\n        block: 'nearest',\n        inline: 'nearest',\n      });\n    }\n  }, [focusedIndex]);\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      const target = event.target as Node;\n      const isOutsideDropdown = dropdownRef.current && !dropdownRef.current.contains(target);\n      const isOutsideInput = inputRef.current && !inputRef.current.contains(target);\n\n      if (isOutsideDropdown && isOutsideInput) {\n        setShowDropdown(false);\n        setFocusedIndex(-1);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  // Handle input changes\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.stopPropagation(); // Prevent event bubbling to parent components\n    const query = e.target.value;\n    setInputValue(query);\n\n    // Always show dropdown when user starts typing (especially important for API selects and error states)\n    setShowDropdown(true);\n    setDropdownPosition(calculateDropdownPosition());\n    setFocusedIndex(-1);\n    setJustSelected(false); // Reset the flag when user starts typing\n\n    // Clear selection when user starts typing (unless it matches exactly)\n    if (!onSearch) {\n      // Only clear selection if the input doesn't match the current selection\n      if (selectedOption && query !== selectedOption.label) {\n        setSelectedOption(null);\n        onSelect(null);\n      }\n\n      // Check for exact matches\n      const matchingOption = normalizedOptions.find(\n        option => option.label === query || option.value === query\n      );\n\n      if (matchingOption && query === matchingOption.label) {\n        setSelectedOption(matchingOption);\n        onSelect(matchingOption);\n      } else if (!query.trim()) {\n        setSelectedOption(null);\n        onSelect(null);\n        setShowDropdown(false);\n      } else if (allowCustom && query.trim()) {\n        // Create custom option for allowCustom mode\n        const customOption: SelectOption = { value: query, label: query };\n        setSelectedOption(customOption);\n        onSelect(customOption);\n      }\n    } else {\n      // For API-driven search, clear selection when user modifies input\n      if (selectedOption && query !== selectedOption.label) {\n        setSelectedOption(null);\n        onSelect(null);\n      }\n    }\n  };\n\n  // Handle input focus - show options with selected value highlighted\n  const handleInputFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    e.stopPropagation(); // Prevent event bubbling to parent components\n    if (!disabled) {\n      // Reset just selected flag to allow dropdown to show\n      setJustSelected(false);\n\n      // For static data, show all options on focus\n      if (!onSearch && normalizedOptions.length > 0) {\n        setFilteredOptions(normalizedOptions);\n        setShowDropdown(true);\n        setDropdownPosition(calculateDropdownPosition());\n\n        // Highlight and scroll to the currently selected item\n        if (selectedOption) {\n          const selectedIndex = normalizedOptions.findIndex(\n            opt => opt.value === selectedOption.value\n          );\n          if (selectedIndex >= 0) {\n            setFocusedIndex(selectedIndex);\n            // Scroll will be handled by the focusedIndex useEffect\n          } else {\n            setFocusedIndex(0);\n          }\n        } else {\n          setFocusedIndex(0);\n        }\n      }\n\n      // For API-driven selects, show dropdown immediately to display empty state\n      else if (onSearch) {\n        setShowDropdown(true);\n        setDropdownPosition(calculateDropdownPosition());\n        setFocusedIndex(-1);\n        // Don't trigger onSearch with empty string to avoid API errors\n      }\n    }\n  };\n\n  // Handle input blur\n  const handleInputBlur = () => {\n    // Delay hiding dropdown to allow clicks on options\n    setTimeout(() => {\n      // More specific check: only hide if the active element is not within this component\n      const activeElement = document.activeElement;\n      const isWithinThisComponent =\n        dropdownRef.current?.contains(activeElement) ||\n        inputRef.current?.contains(activeElement) ||\n        inputRef.current === activeElement;\n\n      if (!isWithinThisComponent) {\n        setShowDropdown(false);\n        setFocusedIndex(-1);\n      }\n    }, 300);\n  };\n\n  // Handle keyboard navigation using consolidated utility\n  const handleKeyDown = createDropdownKeyHandler({\n    isOpen: showDropdown,\n    selectedIndex: focusedIndex,\n    itemCount: filteredOptions.length,\n    onOpen: () => {\n      // Reset just selected flag to allow dropdown to show\n      setJustSelected(false);\n\n      if (onSearch) {\n        // For API-driven selects, show dropdown immediately without triggering API call\n        setShowDropdown(true);\n        setDropdownPosition(calculateDropdownPosition());\n      } else {\n        // Show all options when opening dropdown via keyboard for static data\n        setFilteredOptions(normalizedOptions);\n        setShowDropdown(true);\n        setDropdownPosition(calculateDropdownPosition());\n\n        // Highlight and scroll to the currently selected item\n        if (selectedOption) {\n          const selectedIndex = normalizedOptions.findIndex(\n            opt => opt.value === selectedOption.value\n          );\n          setFocusedIndex(selectedIndex >= 0 ? selectedIndex : 0);\n        } else {\n          setFocusedIndex(0);\n        }\n      }\n    },\n    onClose: () => {\n      setShowDropdown(false);\n      setFocusedIndex(-1);\n      inputRef.current?.blur();\n    },\n    onSelect: (index: number) => {\n      if (index >= 0 && index < filteredOptions.length) {\n        handleOptionSelect(filteredOptions[index]);\n      } else if (showDropdown) {\n        // If dropdown is open but no option focused, just close it\n        setShowDropdown(false);\n        setFocusedIndex(-1);\n      }\n    },\n    onNavigate: (index: number) => {\n      setFocusedIndex(index);\n    }\n  });\n\n  // Handle option selection from dropdown\n  const handleOptionSelect = (option: SelectOption) => {\n    if (option.disabled) return;\n\n    setSelectedOption(option);\n    setInputValue(option.label);\n    setShowDropdown(false);\n    setFocusedIndex(-1);\n    setJustSelected(true);\n\n    // Always reset filtering for static data after selection to show all options next time\n    if (!onSearch && normalizedOptions.length > 0) {\n      setFilteredOptions(normalizedOptions);\n    }\n\n    onSelect(option);\n\n    // Blur the input after selection to prevent API handler from reopening\n    inputRef.current?.blur();\n\n    // Reset the justSelected flag after a longer delay to prevent reopening\n    setTimeout(() => setJustSelected(false), 300);\n  };\n\n  // Load initial value if provided\n  useEffect(() => {\n    if (value && !selectedOption && normalizedOptions.length > 0) {\n      const matchingOption = normalizedOptions.find(opt => opt.value === value);\n      if (matchingOption) {\n        setSelectedOption(matchingOption);\n        setInputValue(matchingOption.label);\n      }\n    }\n  }, [value, selectedOption, normalizedOptions]);\n\n  // Handle external option updates (for API-driven data)\n  useEffect(() => {\n    if (onSearch && options.length > 0) {\n      // Only update if options have actually changed\n      setFilteredOptions(prev => {\n        if (JSON.stringify(prev) !== JSON.stringify(options)) {\n          return options;\n        }\n        return prev;\n      });\n    }\n  }, [options, onSearch]);\n\n  // Special handler for API-driven selects: show dropdown after focus loads options\n  useEffect(() => {\n    // Only show dropdown if:\n    // 1. It's an API-driven select\n    // 2. We have options from API\n    // 3. We haven't just selected something\n    // 4. Input is currently focused (user is actively interacting)\n    // 5. Input is not showing a selected value (avoid reopening after selection)\n    const shouldShowAPI =\n      onSearch &&\n      options.length > 0 &&\n      !justSelected &&\n      document.activeElement === inputRef.current &&\n      !showDropdown && // Don't reopen if already showing\n      !(selectedOption && inputValue === selectedOption.label); // Don't reopen if showing selected value\n\n    if (shouldShowAPI) {\n      setShowDropdown(true);\n      setDropdownPosition(calculateDropdownPosition());\n\n      // Highlight and scroll to the currently selected item\n      if (selectedOption) {\n        const selectedIndex = options.findIndex(opt => opt.value === selectedOption.value);\n        if (selectedIndex >= 0) {\n          setFocusedIndex(selectedIndex);\n        } else {\n          setFocusedIndex(0);\n        }\n      } else {\n        setFocusedIndex(0);\n      }\n    }\n  }, [\n    options,\n    onSearch,\n    justSelected,\n    selectedOption,\n    calculateDropdownPosition,\n    showDropdown,\n    inputValue,\n  ]);\n\n  // Handle clear button click\n  const handleClearClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    setSelectedOption(null);\n    setInputValue('');\n    setShowDropdown(false);\n    setFocusedIndex(-1);\n    onSelect(null);\n\n    // Focus back to input for better UX\n    inputRef.current?.focus();\n  };\n\n  // Handle dropdown icon click\n  const handleDropdownIconClick = () => {\n    if (!disabled) {\n      if (showDropdown) {\n        setShowDropdown(false);\n        setFocusedIndex(-1);\n      } else {\n        // Reset just selected flag to allow dropdown to show\n        setJustSelected(false);\n\n        if (onSearch) {\n          // For API-driven selects, show dropdown immediately without triggering API call\n          setShowDropdown(true);\n          setDropdownPosition(calculateDropdownPosition());\n          inputRef.current?.focus();\n        } else {\n          // Show all options when clicking the dropdown arrow for static data\n          setFilteredOptions(normalizedOptions);\n          setShowDropdown(true);\n          setDropdownPosition(calculateDropdownPosition());\n\n          // Highlight and scroll to the currently selected item\n          if (selectedOption) {\n            const selectedIndex = normalizedOptions.findIndex(\n              opt => opt.value === selectedOption.value\n            );\n            setFocusedIndex(selectedIndex >= 0 ? selectedIndex : 0);\n          } else {\n            setFocusedIndex(0);\n          }\n\n          inputRef.current?.focus();\n        }\n      }\n    }\n  };\n\n  // Create the clear button icon\n  const clearIcon = (\n    <svg\n      className=\"size-4 cursor-pointer transition-colors duration-200 hover:text-red-600 dark:hover:text-red-400\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n      onClick={handleClearClick}\n    >\n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n    </svg>\n  );\n\n  // Create the dropdown chevron icon\n  const dropdownIcon = (\n    <svg\n      className={`size-4 cursor-pointer transition-transform duration-200 ${showDropdown ? 'rotate-180' : ''}`}\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n      onClick={handleDropdownIconClick}\n    >\n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n    </svg>\n  );\n\n  return (\n    <div className=\"relative\">\n      <Input\n        ref={inputRef}\n        id={inputId}\n        name={name ? `${name}_display` : undefined}\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        onKeyDown={handleKeyDown}\n        placeholder={placeholder}\n        disabled={disabled}\n        error={error}\n        loading={loading}\n        rightIcon={selectedOption && inputValue ? clearIcon : dropdownIcon}\n        suppressActions={true}\n        autoComplete=\"off\"\n        role=\"combobox\"\n        aria-expanded={showDropdown}\n        aria-haspopup=\"listbox\"\n        className={className}\n      />\n\n      {/* Custom dropdown */}\n      {showDropdown && (\n        <div\n          ref={dropdownRef}\n          className={`absolute right-0 left-0 z-50 max-h-60 overflow-y-auto rounded-md border border-gray-300 bg-white shadow-lg sm:max-h-80 dark:border-gray-600 dark:bg-gray-800 ${\n            dropdownPosition === 'above' ? 'bottom-full mb-1' : 'top-full mt-1'\n          }`}\n          onMouseDown={e => {\n            // Prevent the dropdown from closing when clicking inside it\n            e.preventDefault();\n          }}\n        >\n          <div\n            role=\"listbox\"\n            className=\"py-1\"\n            onScroll={e => {\n              // Enhanced infinite scroll debugging\n              const target = e.currentTarget;\n              const scrollTop = target.scrollTop;\n              const scrollHeight = target.scrollHeight;\n              const clientHeight = target.clientHeight;\n              const threshold = 50;\n              const isScrollable = scrollHeight > clientHeight;\n              const isNearBottom = scrollTop + clientHeight >= scrollHeight - threshold;\n\n              console.log('📊 Scroll Debug:', {\n                infiniteScroll,\n                hasMore,\n                hasOnLoadMore: !!onLoadMore,\n                loadingMore,\n                scrollTop,\n                scrollHeight,\n                clientHeight,\n                isScrollable,\n                isNearBottom,\n                distanceFromBottom: scrollHeight - (scrollTop + clientHeight),\n              });\n\n              // Infinite scroll: trigger when scrolled near bottom\n              if (infiniteScroll && hasMore && onLoadMore && !loadingMore) {\n                if (isScrollable && isNearBottom) {\n                  console.log('🚀 Infinite scroll triggered');\n                  onLoadMore();\n                }\n              }\n            }}\n          >\n            {filteredOptions.length > 0 ? (\n              <>\n                {filteredOptions.map((option, index) => (\n                  <Option\n                    key={`${option.value}-${index}`}\n                    ref={el => {\n                      optionRefs.current[index] = el;\n                    }}\n                    selected={selectedOption?.value === option.value}\n                    focused={focusedIndex === index}\n                    disabled={option.disabled}\n                    label={option.label}\n                    description={option.description}\n                    value={option.value}\n                    badge={option.badge}\n                    onClick={() => handleOptionSelect(option)}\n                    onMouseEnter={() => setFocusedIndex(index)}\n                  />\n                ))}\n\n                {/* Load More Indicator */}\n                {hasMore && (\n                  <div className=\"border-t border-gray-200 px-4 py-2 text-center dark:border-gray-600\">\n                    {loadingMore ? (\n                      <div className=\"flex items-center justify-center gap-2 text-sm text-gray-500 dark:text-gray-400\">\n                        <div className=\"h-4 w-4 animate-spin rounded-full border-b-2 border-blue-600 dark:border-blue-400\"></div>\n                        {infiniteScroll ? 'Loading more...' : 'Loading...'}\n                      </div>\n                    ) : !infiniteScroll ? (\n                      <button\n                        onClick={onLoadMore}\n                        className=\"text-sm text-blue-600 hover:text-blue-800 focus:outline-none dark:text-blue-400 dark:hover:text-blue-200\"\n                      >\n                        Load more results\n                      </button>\n                    ) : (\n                      <div className=\"py-1 text-xs text-gray-400\">Scroll for more results</div>\n                    )}\n                  </div>\n                )}\n              </>\n            ) : (\n              <div className=\"px-4 py-8 text-center text-gray-500 dark:text-gray-400\">\n                {loading ? (\n                  <div className=\"flex flex-col items-center gap-3\">\n                    <div className=\"h-6 w-6 animate-spin rounded-full border-b-2 border-blue-600 dark:border-blue-400\"></div>\n                    <p className=\"text-sm\">Searching...</p>\n                  </div>\n                ) : onSearch && inputValue.length >= 2 && filteredOptions.length === 0 ? (\n                  <div className=\"flex flex-col items-center gap-3\">\n                    <div className=\"h-6 w-6 animate-spin rounded-full border-b-2 border-blue-600 dark:border-blue-400\"></div>\n                    <p className=\"text-sm\">Searching...</p>\n                  </div>\n                ) : onSearch && inputValue.length < 2 ? (\n                  <div className=\"flex flex-col items-center gap-3\">\n                    <svg\n                      className=\"h-8 w-8 text-gray-400\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                      />\n                    </svg>\n                    <div>\n                      <p className=\"text-sm font-medium\">Start typing to search</p>\n                      <p className=\"mt-1 text-xs\">Type at least 2 characters to see results</p>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col items-center gap-3\">\n                    <svg\n                      className=\"h-8 w-8 text-gray-400\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M9.172 16.172a4 4 0 015.656 0M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\n                      />\n                    </svg>\n                    <div>\n                      <p className=\"text-sm font-medium\">No results found</p>\n                      <p className=\"mt-1 text-xs\">Try a different search term</p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Hidden input for form submission */}\n      <input type=\"hidden\" name={name} value={selectedOption?.value || ''} />\n    </div>\n  );\n}\n\nexport type { SelectProps };\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/Select/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/Textarea/Textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/Textarea/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Field/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Link/Link.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Link/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Loading/FormSkeleton/FormSkeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Loading/FormSkeleton/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Loading/LoadingFallback/LoadingFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Loading/LoadingFallback/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Loading/StatsSkeleton/StatsSkeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Loading/StatsSkeleton/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Loading/TableSkeleton/TableSkeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Loading/TableSkeleton/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/Loading/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/SkipNavigation/SkipNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/SkipNavigation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/atoms/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/lazy-index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/AccessibleModal/AccessibleModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/AccessibleModal/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/AdvancedFilters/AdvancedFilters.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[613,616],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[613,616],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1961,1964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1961,1964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Advanced Filters Component\n * Comprehensive filtering interface for resident data\n */\n\n'use client';\n\nimport React, { useState, useCallback, useEffect } from 'react';\n\nimport { Button } from '@/components';\nimport { clientLogger } from '@/lib/logging/client-logger';\n\ninterface FilterOption {\n  value: string;\n  label: string;\n  count?: number;\n}\n\ninterface FilterField {\n  key: string;\n  label: string;\n  type: 'select' | 'multiselect' | 'range' | 'date' | 'text' | 'boolean';\n  options?: FilterOption[];\n  placeholder?: string;\n  min?: number;\n  max?: number;\n}\n\ninterface FilterValue {\n  [key: string]: any;\n}\n\ninterface AdvancedFiltersProps {\n  fields: FilterField[];\n  values: FilterValue;\n  onChange: (values: FilterValue) => void;\n  onApply?: () => void;\n  onClear?: () => void;\n  loading?: boolean;\n  className?: string;\n  compact?: boolean;\n}\n\nexport const AdvancedFilters: React.FC<AdvancedFiltersProps> = ({\n  fields,\n  values,\n  onChange,\n  onApply,\n  onClear,\n  loading = false,\n  className = '',\n  compact = false,\n}) => {\n  const [isExpanded, setIsExpanded] = useState(!compact);\n  const [localValues, setLocalValues] = useState<FilterValue>(values);\n  const [hasChanges, setHasChanges] = useState(false);\n\n  // Sync local values with prop changes\n  useEffect(() => {\n    setLocalValues(values);\n    setHasChanges(false);\n  }, [values]);\n\n  // Check if there are any changes\n  useEffect(() => {\n    const hasAnyChanges = Object.keys(localValues).some(key => {\n      const localValue = localValues[key];\n      const propValue = values[key];\n\n      if (Array.isArray(localValue) && Array.isArray(propValue)) {\n        return (\n          localValue.length !== propValue.length ||\n          localValue.some((val, idx) => val !== propValue[idx])\n        );\n      }\n\n      return localValue !== propValue;\n    });\n\n    setHasChanges(hasAnyChanges);\n  }, [localValues, values]);\n\n  const handleFieldChange = useCallback((fieldKey: string, value: any) => {\n    setLocalValues(prev => ({\n      ...prev,\n      [fieldKey]: value,\n    }));\n\n    clientLogger.userAction('filter_field_changed', 'AdvancedFilters', {\n      field: fieldKey,\n      valueType: typeof value,\n    });\n  }, []);\n\n  const handleApply = useCallback(() => {\n    onChange(localValues);\n    if (onApply) {\n      onApply();\n    }\n\n    clientLogger.userAction('filters_applied', 'AdvancedFilters', {\n      filterCount: Object.keys(localValues).filter(key => {\n        const value = localValues[key];\n        return (\n          value !== undefined &&\n          value !== null &&\n          value !== '' &&\n          (!Array.isArray(value) || value.length > 0)\n        );\n      }).length,\n    });\n  }, [localValues, onChange, onApply]);\n\n  const handleClear = useCallback(() => {\n    const clearedValues: FilterValue = {};\n    fields.forEach(field => {\n      if (field.type === 'multiselect') {\n        clearedValues[field.key] = [];\n      } else if (field.type === 'boolean') {\n        clearedValues[field.key] = undefined;\n      } else {\n        clearedValues[field.key] = '';\n      }\n    });\n\n    setLocalValues(clearedValues);\n    onChange(clearedValues);\n\n    if (onClear) {\n      onClear();\n    }\n\n    clientLogger.userAction('filters_cleared', 'AdvancedFilters');\n  }, [fields, onChange, onClear]);\n\n  const renderFilterField = (field: FilterField) => {\n    const value = localValues[field.key];\n\n    switch (field.type) {\n      case 'select':\n        return (\n          <select\n            value={value || ''}\n            onChange={e => handleFieldChange(field.key, e.target.value)}\n            className=\"w-full rounded-md border border-gray-300 px-3 py-2 text-sm shadow-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500 focus:outline-none\"\n            disabled={loading}\n          >\n            <option value=\"\">All {field.label}</option>\n            {field.options?.map(option => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n                {option.count !== undefined && ` (${option.count})`}\n              </option>\n            ))}\n          </select>\n        );\n\n      case 'multiselect':\n        const selectedValues = Array.isArray(value) ? value : [];\n        return (\n          <div className=\"space-y-2\">\n            <div className=\"mb-1 text-xs text-gray-500\">{selectedValues.length} selected</div>\n            <div className=\"max-h-32 overflow-y-auto rounded-md border border-gray-300 bg-gray-50 p-2\">\n              {field.options?.map(option => (\n                <label\n                  key={option.value}\n                  className=\"flex items-center space-x-2 rounded px-1 py-1 hover:bg-gray-100\"\n                >\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedValues.includes(option.value)}\n                    onChange={e => {\n                      const newValues = e.target.checked\n                        ? [...selectedValues, option.value]\n                        : selectedValues.filter(v => v !== option.value);\n                      handleFieldChange(field.key, newValues);\n                    }}\n                    className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                    disabled={loading}\n                  />\n                  <span className=\"text-sm text-gray-700\">{option.label}</span>\n                  {option.count !== undefined && (\n                    <span className=\"text-xs text-gray-500\">({option.count})</span>\n                  )}\n                </label>\n              ))}\n            </div>\n          </div>\n        );\n\n      case 'range':\n        const rangeValue = value || { min: field.min, max: field.max };\n        return (\n          <div className=\"space-y-2\">\n            <div className=\"grid grid-cols-2 gap-2\">\n              <div>\n                <label className=\"mb-1 block text-xs text-gray-500\">Min</label>\n                <input\n                  type=\"number\"\n                  value={rangeValue.min || ''}\n                  onChange={e =>\n                    handleFieldChange(field.key, {\n                      ...rangeValue,\n                      min: e.target.value ? parseInt(e.target.value) : undefined,\n                    })\n                  }\n                  min={field.min}\n                  max={field.max}\n                  className=\"w-full rounded border border-gray-300 px-2 py-1 text-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500 focus:outline-none\"\n                  disabled={loading}\n                />\n              </div>\n              <div>\n                <label className=\"mb-1 block text-xs text-gray-500\">Max</label>\n                <input\n                  type=\"number\"\n                  value={rangeValue.max || ''}\n                  onChange={e =>\n                    handleFieldChange(field.key, {\n                      ...rangeValue,\n                      max: e.target.value ? parseInt(e.target.value) : undefined,\n                    })\n                  }\n                  min={field.min}\n                  max={field.max}\n                  className=\"w-full rounded border border-gray-300 px-2 py-1 text-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500 focus:outline-none\"\n                  disabled={loading}\n                />\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'date':\n        const dateValue = value || { from: '', to: '' };\n        return (\n          <div className=\"space-y-2\">\n            <div className=\"grid grid-cols-2 gap-2\">\n              <div>\n                <label className=\"mb-1 block text-xs text-gray-500\">From</label>\n                <input\n                  type=\"date\"\n                  value={dateValue.from || ''}\n                  onChange={e =>\n                    handleFieldChange(field.key, {\n                      ...dateValue,\n                      from: e.target.value,\n                    })\n                  }\n                  className=\"w-full rounded border border-gray-300 px-2 py-1 text-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500 focus:outline-none\"\n                  disabled={loading}\n                />\n              </div>\n              <div>\n                <label className=\"mb-1 block text-xs text-gray-500\">To</label>\n                <input\n                  type=\"date\"\n                  value={dateValue.to || ''}\n                  onChange={e =>\n                    handleFieldChange(field.key, {\n                      ...dateValue,\n                      to: e.target.value,\n                    })\n                  }\n                  className=\"w-full rounded border border-gray-300 px-2 py-1 text-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500 focus:outline-none\"\n                  disabled={loading}\n                />\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'text':\n        return (\n          <input\n            type=\"text\"\n            value={value || ''}\n            onChange={e => handleFieldChange(field.key, e.target.value)}\n            placeholder={field.placeholder || `Enter ${field.label.toLowerCase()}...`}\n            className=\"w-full rounded-md border border-gray-300 px-3 py-2 text-sm shadow-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500 focus:outline-none\"\n            disabled={loading}\n          />\n        );\n\n      case 'boolean':\n        return (\n          <select\n            value={value === undefined ? '' : value.toString()}\n            onChange={e => {\n              const newValue = e.target.value === '' ? undefined : e.target.value === 'true';\n              handleFieldChange(field.key, newValue);\n            }}\n            className=\"w-full rounded-md border border-gray-300 px-3 py-2 text-sm shadow-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500 focus:outline-none\"\n            disabled={loading}\n          >\n            <option value=\"\">All</option>\n            <option value=\"true\">Yes</option>\n            <option value=\"false\">No</option>\n          </select>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  const activeFilterCount = Object.keys(localValues).filter(key => {\n    const value = localValues[key];\n    if (value === undefined || value === null || value === '') return false;\n    if (Array.isArray(value)) return value.length > 0;\n    if (typeof value === 'object' && value !== null) {\n      return Object.values(value).some(v => v !== undefined && v !== null && v !== '');\n    }\n    return true;\n  }).length;\n\n  return (\n    <div className={`rounded-lg border border-gray-200 bg-white ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between border-b border-gray-200 p-4\">\n        <div className=\"flex items-center space-x-2\">\n          <h3 className=\"text-sm font-medium text-gray-900\">Advanced Filters</h3>\n          {activeFilterCount > 0 && (\n            <span className=\"inline-flex items-center rounded-full bg-blue-100 px-2 py-0.5 text-xs font-medium text-blue-800\">\n              {activeFilterCount} active\n            </span>\n          )}\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          {hasChanges && <span className=\"text-xs text-orange-600\">Unsaved changes</span>}\n\n          <button\n            onClick={() => setIsExpanded(!isExpanded)}\n            className=\"rounded-md p-1 hover:bg-gray-100 focus:ring-2 focus:ring-blue-500 focus:outline-none\"\n            disabled={loading}\n          >\n            <svg\n              className={`h-4 w-4 text-gray-500 transition-transform ${isExpanded ? 'rotate-180' : ''}`}\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M19 9l-7 7-7-7\"\n              />\n            </svg>\n          </button>\n        </div>\n      </div>\n\n      {/* Filter Fields */}\n      {isExpanded && (\n        <div className=\"p-4\">\n          <div\n            className={`grid gap-4 ${compact ? 'grid-cols-2 lg:grid-cols-3' : 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'}`}\n          >\n            {fields.map(field => (\n              <div key={field.key} className=\"space-y-1\">\n                <label className=\"block text-xs font-medium text-gray-700\">{field.label}</label>\n                {renderFilterField(field)}\n              </div>\n            ))}\n          </div>\n\n          {/* Actions */}\n          <div className=\"mt-4 flex items-center justify-between border-t border-gray-200 pt-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleClear}\n              disabled={loading || activeFilterCount === 0}\n            >\n              Clear All\n            </Button>\n\n            <div className=\"flex space-x-2\">\n              <Button\n                variant=\"secondary\"\n                size=\"sm\"\n                onClick={() => setIsExpanded(false)}\n                disabled={loading}\n              >\n                Close\n              </Button>\n\n              <Button\n                variant=\"primary\"\n                size=\"sm\"\n                onClick={handleApply}\n                disabled={loading || !hasChanges}\n              >\n                {loading ? 'Applying...' : 'Apply Filters'}\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AdvancedFilters;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/AuthDebug/AuthDebug.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[200,203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[200,203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2261,2264],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2261,2264],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\n\nimport { supabase } from '@/lib/data/supabase';\n\nexport default function AuthDebug() {\n  const [debugInfo, setDebugInfo] = useState<any>({});\n  const [showDebug, setShowDebug] = useState(false);\n\n  useEffect(() => {\n    const updateDebugInfo = async () => {\n      try {\n        // Check localStorage for auth tokens\n        const authToken = localStorage.getItem('rbi-auth-token');\n        const supabaseAuth = localStorage.getItem('sb-cdtcbelaimyftpxmzkjf-auth-token');\n\n        // Also check for any Supabase-related storage keys\n        const allStorageKeys = Object.keys(localStorage);\n        const supabaseKeys = allStorageKeys.filter(\n          key => key.includes('supabase') || key.includes('sb-')\n        );\n        const authKeys = allStorageKeys.filter(key => key.includes('auth'));\n\n        // Get current session\n        const {\n          data: { session },\n          error,\n        } = await supabase.auth.getSession();\n\n        // Get current user\n        const {\n          data: { user },\n          error: userError,\n        } = await supabase.auth.getUser();\n\n        setDebugInfo({\n          localStorage: {\n            hasRbiToken: !!authToken,\n            hasSupabaseToken: !!supabaseAuth,\n            rbiTokenLength: authToken?.length || 0,\n            supabaseTokenLength: supabaseAuth?.length || 0,\n            allSupabaseKeys: supabaseKeys,\n            allAuthKeys: authKeys,\n            totalStorageKeys: allStorageKeys.length,\n          },\n          session: {\n            hasSession: !!session,\n            hasUser: !!session?.user,\n            userId: session?.user?.id,\n            expiresAt: session?.expires_at,\n            expiresIn: session?.expires_in,\n            sessionError: error?.message,\n          },\n          user: {\n            hasUser: !!user,\n            userId: user?.id,\n            email: user?.email,\n            userError: userError?.message,\n          },\n          browser: {\n            isLocalStorageSupported: typeof Storage !== 'undefined',\n            userAgent: navigator.userAgent,\n            cookieEnabled: navigator.cookieEnabled,\n          },\n        });\n      } catch (error) {\n        setDebugInfo({\n          error: (error as any)?.message || 'Debug info error',\n        });\n      }\n    };\n\n    if (showDebug) {\n      updateDebugInfo();\n      const interval = setInterval(updateDebugInfo, 5000); // Update every 5 seconds\n      return () => clearInterval(interval);\n    }\n  }, [showDebug]);\n\n  if (!showDebug) {\n    return (\n      <button\n        onClick={() => setShowDebug(true)}\n        className=\"fixed bottom-4 left-4 z-40 rounded-full bg-orange-600 p-2 text-xs text-white shadow-lg transition-colors hover:bg-orange-700\"\n        title=\"Auth Debug\"\n      >\n        🔐\n      </button>\n    );\n  }\n\n  return (\n    <div className=\"fixed bottom-4 left-4 z-40 max-h-96 max-w-md overflow-y-auto rounded-lg border border-gray-200 bg-white p-4 shadow-lg dark:border-gray-700 dark:bg-gray-800\">\n      <div className=\"mb-3 flex items-center justify-between\">\n        <h3 className=\"text-sm font-semibold text-gray-900 dark:text-white\">Auth Debug Info</h3>\n        <button\n          onClick={() => setShowDebug(false)}\n          className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-200\"\n        >\n          <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M6 18L18 6M6 6l12 12\"\n            />\n          </svg>\n        </button>\n      </div>\n\n      <div className=\"space-y-3 text-xs\">\n        {/* localStorage Status */}\n        <div>\n          <h4 className=\"mb-1 font-medium text-gray-700 dark:text-gray-300\">Local Storage:</h4>\n          <div className=\"space-y-1 pl-2\">\n            <div\n              className={`flex justify-between ${debugInfo.localStorage?.hasRbiToken ? 'text-green-600' : 'text-red-600'}`}\n            >\n              <span>RBI Token:</span>\n              <span>\n                {debugInfo.localStorage?.hasRbiToken ? '✓' : '✗'} (\n                {debugInfo.localStorage?.rbiTokenLength})\n              </span>\n            </div>\n            <div\n              className={`flex justify-between ${debugInfo.localStorage?.hasSupabaseToken ? 'text-green-600' : 'text-red-600'}`}\n            >\n              <span>Supabase Token:</span>\n              <span>\n                {debugInfo.localStorage?.hasSupabaseToken ? '✓' : '✗'} (\n                {debugInfo.localStorage?.supabaseTokenLength})\n              </span>\n            </div>\n            <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n              <div>Total Keys: {debugInfo.localStorage?.totalStorageKeys}</div>\n              {debugInfo.localStorage?.allSupabaseKeys?.length > 0 && (\n                <div>Supabase Keys: {debugInfo.localStorage.allSupabaseKeys.join(', ')}</div>\n              )}\n              {debugInfo.localStorage?.allAuthKeys?.length > 0 && (\n                <div>Auth Keys: {debugInfo.localStorage.allAuthKeys.join(', ')}</div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Session Status */}\n        <div>\n          <h4 className=\"mb-1 font-medium text-gray-700 dark:text-gray-300\">Session:</h4>\n          <div className=\"space-y-1 pl-2\">\n            <div\n              className={`flex justify-between ${debugInfo.session?.hasSession ? 'text-green-600' : 'text-red-600'}`}\n            >\n              <span>Has Session:</span>\n              <span>{debugInfo.session?.hasSession ? '✓' : '✗'}</span>\n            </div>\n            <div\n              className={`flex justify-between ${debugInfo.session?.hasUser ? 'text-green-600' : 'text-red-600'}`}\n            >\n              <span>Has User:</span>\n              <span>{debugInfo.session?.hasUser ? '✓' : '✗'}</span>\n            </div>\n            {debugInfo.session?.userId && (\n              <div className=\"text-gray-600 dark:text-gray-400\">\n                <span>User ID:</span>{' '}\n                <span className=\"font-mono text-xs\">{debugInfo.session.userId.slice(0, 8)}...</span>\n              </div>\n            )}\n            {debugInfo.session?.sessionError && (\n              <div className=\"text-xs text-red-600\">Error: {debugInfo.session.sessionError}</div>\n            )}\n          </div>\n        </div>\n\n        {/* Browser Support */}\n        <div>\n          <h4 className=\"mb-1 font-medium text-gray-700 dark:text-gray-300\">Browser:</h4>\n          <div className=\"space-y-1 pl-2\">\n            <div\n              className={`flex justify-between ${debugInfo.browser?.isLocalStorageSupported ? 'text-green-600' : 'text-red-600'}`}\n            >\n              <span>LocalStorage:</span>\n              <span>{debugInfo.browser?.isLocalStorageSupported ? '✓' : '✗'}</span>\n            </div>\n            <div\n              className={`flex justify-between ${debugInfo.browser?.cookieEnabled ? 'text-green-600' : 'text-red-600'}`}\n            >\n              <span>Cookies:</span>\n              <span>{debugInfo.browser?.cookieEnabled ? '✓' : '✗'}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"border-t border-gray-100 pt-2 dark:border-gray-700\">\n          <h4 className=\"mb-2 font-medium text-gray-700 dark:text-gray-300\">Actions:</h4>\n          <div className=\"space-y-2\">\n            <button\n              onClick={() => {\n                localStorage.clear();\n                window.location.reload();\n              }}\n              className=\"w-full rounded bg-red-500 px-3 py-1 text-xs text-white hover:bg-red-600\"\n            >\n              Clear All Storage & Reload\n            </button>\n            <button\n              onClick={async () => {\n                await supabase.auth.signOut();\n                window.location.reload();\n              }}\n              className=\"w-full rounded bg-blue-500 px-3 py-1 text-xs text-white hover:bg-blue-600\"\n            >\n              Sign Out & Reload\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/AuthDebug/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/ButtonGroup/ButtonGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/ButtonGroup/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/CivilStatusPieChart/CivilStatusPieChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/CivilStatusPieChart/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/CommandMenu/CommandMenu.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CommandMenuProps' is defined but never used.","line":11,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'items' is defined but never used. Allowed unused args must match /^_/u.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":8},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":92,"column":9,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":92,"endColumn":31,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[2600,2601],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":101,"column":9,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":101,"endColumn":31,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[2889,2890],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Dialog } from '@headlessui/react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport React, { useEffect, useRef } from 'react';\n\nimport { useCommandMenuWithApi } from '@/hooks/ui/useCommandMenuWithApi';\nimport { cn } from '@/lib';\nimport type {\n  CommandMenuSearchResult as CommandMenuItem,\n  CommandMenuHookResult as CommandMenuProps,\n} from '@/types';\n\nimport { CommandMenuEmpty } from './CommandMenuEmpty';\nimport { CommandMenuGroup } from './CommandMenuGroup';\n\nconst commandMenuVariants = cva(\n  'relative mx-auto w-full overflow-hidden rounded-xl bg-white dark:bg-gray-900 shadow-2xl ring-1 ring-black/5 dark:ring-white/10',\n  {\n    variants: {\n      size: {\n        sm: 'max-w-sm',\n        md: 'max-w-lg',\n        lg: 'max-w-2xl',\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n    },\n  }\n);\n\ninterface CommandMenuComponentProps extends VariantProps<typeof commandMenuVariants> {\n  items?: CommandMenuItem[]; // Made optional since we get items from API\n  placeholder?: string;\n  emptyStateText?: string;\n  maxResults?: number;\n  showShortcuts?: boolean;\n  showRecentSection?: boolean;\n  className?: string;\n}\n\nexport function CommandMenu({\n  items, // This is now optional and will be ignored in favor of API data\n  placeholder = 'Search for anything...',\n  emptyStateText,\n  maxResults = 10,\n  showShortcuts = true,\n  showRecentSection = true,\n  size,\n  className,\n}: CommandMenuComponentProps) {\n  const {\n    isOpen,\n    close,\n    searchQuery,\n    setSearchQuery,\n    filteredItems,\n    selectedIndex,\n    executeCommand,\n    isLoading,\n  } = useCommandMenuWithApi({ maxResults });\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Focus input when menu opens\n  useEffect(() => {\n    if (isOpen && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isOpen]);\n\n  // Group items by category\n  const groupedItems = React.useMemo(() => {\n    const groups = new Map<string, CommandMenuItem[]>();\n\n    // If showing recent section and no search query, separate recent items\n    if (showRecentSection && !searchQuery.trim()) {\n      const recentItems = filteredItems.filter(item => item.recent);\n      const nonRecentItems = filteredItems.filter(item => !item.recent);\n\n      if (recentItems.length > 0) {\n        groups.set('Recent', recentItems);\n      }\n\n      // Group non-recent items by their group property\n      nonRecentItems.forEach(item => {\n        const groupName = item.group || 'Other';\n        if (!groups.has(groupName)) {\n          groups.set(groupName, []);\n        }\n        groups.get(groupName)!.push(item);\n      });\n    } else {\n      // Group all items by their group property\n      filteredItems.forEach(item => {\n        const groupName = item.group || 'Results';\n        if (!groups.has(groupName)) {\n          groups.set(groupName, []);\n        }\n        groups.get(groupName)!.push(item);\n      });\n    }\n\n    return Array.from(groups.entries()).map(([name, items]) => ({\n      name,\n      items,\n    }));\n  }, [filteredItems, searchQuery, showRecentSection]);\n\n  return (\n    <Dialog open={isOpen} onClose={close} className=\"relative z-50\">\n      {/* Backdrop */}\n      <div className=\"fixed inset-0 bg-black/25 dark:bg-black/50\" aria-hidden=\"true\" />\n\n      {/* Dialog */}\n      <div className=\"fixed inset-0 overflow-y-auto p-4 pt-[25vh]\">\n        <Dialog.Panel className={cn(commandMenuVariants({ size }), className)}>\n          {/* Search Input */}\n          <div className=\"flex items-center border-b border-gray-200 px-4 dark:border-gray-700\">\n            {isLoading ? (\n              <svg\n                className=\"size-5 shrink-0 animate-spin text-gray-400 dark:text-gray-500\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n                />\n              </svg>\n            ) : (\n              <svg\n                className=\"size-5 shrink-0 text-gray-400 dark:text-gray-500\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                />\n              </svg>\n            )}\n            <input\n              ref={inputRef}\n              type=\"text\"\n              className=\"w-full border-0 bg-transparent py-4 pr-4 pl-3 text-gray-900 placeholder-gray-500 focus:ring-0 focus:outline-none dark:text-gray-100 dark:placeholder-gray-400\"\n              placeholder={placeholder}\n              value={searchQuery}\n              onChange={e => setSearchQuery(e.target.value)}\n            />\n            <div className=\"flex shrink-0 items-center gap-1\">\n              <kbd className=\"inline-flex h-5 min-w-[20px] items-center justify-center rounded border border-gray-200 bg-gray-50 px-1 text-xs font-medium text-gray-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-400\">\n                ESC\n              </kbd>\n            </div>\n          </div>\n\n          {/* Results */}\n          <div className=\"max-h-96 overflow-y-auto\">\n            {filteredItems.length === 0 ? (\n              <CommandMenuEmpty query={searchQuery}>{emptyStateText}</CommandMenuEmpty>\n            ) : (\n              <div className=\"py-2\">\n                {groupedItems.map((group, groupIndex) => {\n                  // Calculate global index for this group\n                  const globalIndex = groupedItems\n                    .slice(0, groupIndex)\n                    .reduce((acc, g) => acc + g.items.length, 0);\n\n                  return (\n                    <CommandMenuGroup\n                      key={group.name}\n                      label={group.name}\n                      items={group.items}\n                      selectedIndex={selectedIndex}\n                      globalIndex={globalIndex}\n                      showShortcuts={showShortcuts}\n                      onItemClick={executeCommand}\n                    />\n                  );\n                })}\n              </div>\n            )}\n          </div>\n\n          {/* Footer */}\n          <div className=\"border-t border-gray-200 px-4 py-3 dark:border-gray-700\">\n            <div className=\"flex items-center justify-between text-xs text-gray-500 dark:text-gray-400\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"flex items-center gap-1\">\n                  <kbd className=\"inline-flex h-4 min-w-[16px] items-center justify-center rounded border border-gray-200 bg-gray-50 px-1 text-xs font-medium dark:border-gray-600 dark:bg-gray-700\">\n                    ↵\n                  </kbd>\n                  <span>to select</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <kbd className=\"inline-flex h-4 min-w-[16px] items-center justify-center rounded border border-gray-200 bg-gray-50 px-1 text-xs font-medium dark:border-gray-600 dark:bg-gray-700\">\n                    ↑↓\n                  </kbd>\n                  <span>to navigate</span>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <kbd className=\"inline-flex h-4 min-w-[16px] items-center justify-center rounded border border-gray-200 bg-gray-50 px-1 text-xs font-medium dark:border-gray-600 dark:bg-gray-700\">\n                  ⌘K\n                </kbd>\n                <span>to open</span>\n              </div>\n            </div>\n          </div>\n        </Dialog.Panel>\n      </div>\n    </Dialog>\n  );\n}\n\nexport { commandMenuVariants };\nexport type { CommandMenuComponentProps };\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/CommandMenu/CommandMenuEmpty.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":254,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8678,8733],"text":"\n            Here&apos;s what you can do instead:\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8678,8733],"text":"\n            Here&lsquo;s what you can do instead:\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8678,8733],"text":"\n            Here&#39;s what you can do instead:\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8678,8733],"text":"\n            Here&rsquo;s what you can do instead:\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\n\nimport { cn } from '@/lib';\n\ninterface CommandMenuEmptyProps {\n  query?: string;\n  className?: string;\n  children?: React.ReactNode;\n  onSuggestionClick?: (suggestion: WorkflowSuggestion) => void;\n}\n\ninterface WorkflowSuggestion {\n  id: string;\n  title: string;\n  description: string;\n  icon: React.ReactNode;\n  action: string;\n  href?: string;\n  keywords: string[];\n}\n\n// Smart workflow suggestions based on query analysis\nfunction getWorkflowSuggestions(query?: string): WorkflowSuggestion[] {\n  if (!query) {\n    return [\n      {\n        id: 'add-resident',\n        title: 'Add New Resident',\n        description: 'Register a new resident in the system',\n        action: 'Create resident',\n        href: '/residents/create',\n        keywords: ['add', 'new', 'create', 'register'],\n        icon: (\n          <svg className=\"size-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4v16m8-8H4\" />\n          </svg>\n        ),\n      },\n      {\n        id: 'add-household',\n        title: 'Add New Household',\n        description: 'Create a new household record',\n        action: 'Create household',\n        href: '/households/create',\n        keywords: ['household', 'family', 'add', 'new'],\n        icon: (\n          <svg className=\"size-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z\"\n            />\n          </svg>\n        ),\n      },\n      {\n        id: 'view-reports',\n        title: 'View Reports',\n        description: 'Access population and statistical reports',\n        action: 'View reports',\n        href: '/reports',\n        keywords: ['reports', 'statistics', 'data', 'analytics'],\n        icon: (\n          <svg className=\"size-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"\n            />\n          </svg>\n        ),\n      },\n    ];\n  }\n\n  // Analyze query to provide contextual suggestions\n  const queryLower = query.toLowerCase();\n  const suggestions: WorkflowSuggestion[] = [];\n\n  // Suggest creating new records if searching for non-existent items\n  if (queryLower.match(/^\\d+$/) && query.length > 3) {\n    // Looks like searching for an ID/code\n    suggestions.push({\n      id: 'create-resident-with-id',\n      title: 'Add New Resident',\n      description: 'Register a new resident in the system',\n      action: 'Create resident',\n      href: `/residents/create?suggested_id=${query}`,\n      keywords: ['create', 'add', 'resident'],\n      icon: (\n        <svg className=\"size-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4v16m8-8H4\" />\n        </svg>\n      ),\n    });\n\n    suggestions.push({\n      id: 'create-household-with-code',\n      title: 'Add New Household',\n      description: 'Create a new household record',\n      action: 'Create household',\n      href: `/households/create?suggested_code=${query}`,\n      keywords: ['create', 'add', 'household'],\n      icon: (\n        <svg className=\"size-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4v16m8-8H4\" />\n        </svg>\n      ),\n    });\n  }\n\n  // Name-like queries\n  if (queryLower.match(/^[a-zA-Z\\s]+$/) && query.length > 2) {\n    suggestions.push({\n      id: 'create-resident-with-name',\n      title: 'Add New Resident',\n      description: 'Register a new resident in the system',\n      action: 'Create resident',\n      href: `/residents/create?suggested_name=${encodeURIComponent(query)}`,\n      keywords: ['create', 'add', 'resident', 'person'],\n      icon: (\n        <svg className=\"size-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4v16m8-8H4\" />\n        </svg>\n      ),\n    });\n\n    suggestions.push({\n      id: 'create-household-with-head-name',\n      title: 'Add New Household',\n      description: 'Create a new household record',\n      action: 'Create household',\n      href: `/households/create?suggested_name=${encodeURIComponent(query)}`,\n      keywords: ['create', 'add', 'household', 'family'],\n      icon: (\n        <svg className=\"size-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4v16m8-8H4\" />\n        </svg>\n      ),\n    });\n  }\n\n  // Generic helpful actions\n  suggestions.push({\n    id: 'browse-residents',\n    title: 'Browse All Residents',\n    description: 'View the complete residents directory',\n    action: 'View residents',\n    href: '/residents',\n    keywords: ['browse', 'view', 'residents', 'directory'],\n    icon: (\n      <svg className=\"size-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={2}\n          d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"\n        />\n      </svg>\n    ),\n  });\n\n  suggestions.push({\n    id: 'browse-households',\n    title: 'Browse All Households',\n    description: 'View the complete households directory',\n    action: 'View households',\n    href: '/households',\n    keywords: ['browse', 'view', 'households', 'families'],\n    icon: (\n      <svg className=\"size-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={2}\n          d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"\n        />\n      </svg>\n    ),\n  });\n\n  return suggestions.slice(0, 4); // Limit to 4 suggestions\n}\n\nexport type { WorkflowSuggestion };\n\nexport function CommandMenuEmpty({\n  query,\n  className,\n  children,\n  onSuggestionClick,\n}: CommandMenuEmptyProps) {\n  const suggestions = getWorkflowSuggestions(query);\n  const defaultMessage = query ? `No results found for \"${query}\"` : 'Start typing to search...';\n\n  const handleSuggestionClick = (suggestion: WorkflowSuggestion) => {\n    onSuggestionClick?.(suggestion);\n\n    // Navigate to the suggestion's href if available\n    if (suggestion.href) {\n      window.location.href = suggestion.href;\n    }\n  };\n\n  return (\n    <div\n      className={cn('flex flex-col items-center justify-center px-4 py-8 text-center', className)}\n    >\n      {/* Icon */}\n      <div className=\"mb-4 flex size-12 items-center justify-center rounded-full bg-gray-100 dark:bg-gray-800\">\n        {query ? (\n          <svg\n            className=\"size-6 text-gray-400 dark:text-gray-500\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M9.172 16.172a4 4 0 015.656 0M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\n            />\n          </svg>\n        ) : (\n          <svg\n            className=\"size-6 text-gray-400 dark:text-gray-500\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n            />\n          </svg>\n        )}\n      </div>\n\n      {/* Message */}\n      <div className=\"mb-6 space-y-2\">\n        <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">\n          {query ? 'No results found' : 'Search anything'}\n        </h3>\n        <p className=\"text-sm text-gray-500 dark:text-gray-400\">{children || defaultMessage}</p>\n        {query && (\n          <p className=\"text-xs text-gray-400 dark:text-gray-500\">\n            Here's what you can do instead:\n          </p>\n        )}\n      </div>\n\n      {/* Workflow Suggestions */}\n      {suggestions.length > 0 && (\n        <div className=\"w-full max-w-sm space-y-2\">\n          {suggestions.map(suggestion => (\n            <button\n              key={suggestion.id}\n              onClick={() => handleSuggestionClick(suggestion)}\n              className=\"flex w-full items-center gap-3 rounded-lg px-3 py-2 text-left text-sm transition-colors hover:bg-gray-50 dark:hover:bg-gray-800\"\n            >\n              <div className=\"flex size-5 shrink-0 items-center justify-center\">\n                <div className=\"size-4 text-gray-500 dark:text-gray-400\">{suggestion.icon}</div>\n              </div>\n              <div className=\"flex min-w-0 flex-1 flex-col\">\n                <div className=\"font-medium text-gray-900 dark:text-gray-100\">\n                  {suggestion.title}\n                </div>\n                <div className=\"truncate text-xs text-gray-500 dark:text-gray-400\">\n                  {suggestion.description}\n                </div>\n              </div>\n            </button>\n          ))}\n        </div>\n      )}\n\n      {/* Basic tips for empty state */}\n      {!query && suggestions.length === 0 && (\n        <div className=\"mt-6 space-y-2\">\n          <p className=\"text-xs text-gray-400 dark:text-gray-500\">Try searching for:</p>\n          <div className=\"flex flex-wrap justify-center gap-2\">\n            <span className=\"inline-flex items-center rounded-full bg-gray-100 px-2.5 py-0.5 text-xs font-medium text-gray-600 dark:bg-gray-700 dark:text-gray-300\">\n              residents\n            </span>\n            <span className=\"inline-flex items-center rounded-full bg-gray-100 px-2.5 py-0.5 text-xs font-medium text-gray-600 dark:bg-gray-700 dark:text-gray-300\">\n              households\n            </span>\n            <span className=\"inline-flex items-center rounded-full bg-gray-100 px-2.5 py-0.5 text-xs font-medium text-gray-600 dark:bg-gray-700 dark:text-gray-300\">\n              reports\n            </span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/CommandMenu/CommandMenuErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/CommandMenu/CommandMenuGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/CommandMenu/CommandMenuItem.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":70,"column":15,"nodeType":"JSXOpeningElement","endLine":85,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport React from 'react';\n\nimport { cn } from '@/lib';\nimport type { CommandMenuSearchResult as CommandMenuItemType } from '@/types';\n\nconst commandMenuItemVariants = cva(\n  'flex w-full items-center gap-3 rounded-lg px-3 py-2 text-left text-sm transition-colors',\n  {\n    variants: {\n      variant: {\n        default: 'hover:bg-gray-50 dark:hover:bg-gray-800',\n        selected: 'bg-gray-100 dark:bg-gray-700',\n        disabled: 'opacity-50 cursor-not-allowed',\n      },\n      size: {\n        sm: 'px-2 py-1.5 text-xs',\n        md: 'px-3 py-2 text-sm',\n        lg: 'px-4 py-3 text-base',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md',\n    },\n  }\n);\n\ninterface CommandMenuItemProps\n  extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'onClick'>,\n    VariantProps<typeof commandMenuItemVariants> {\n  item: CommandMenuItemType;\n  isSelected?: boolean;\n  showShortcuts?: boolean;\n  onClick?: (item: CommandMenuItemType) => void;\n}\n\nconst CommandMenuItem = React.forwardRef<HTMLButtonElement, CommandMenuItemProps>(\n  (\n    { item, isSelected = false, showShortcuts = true, onClick, variant, size, className, ...props },\n    ref\n  ) => {\n    const handleClick = () => {\n      if (!item.disabled && onClick) {\n        onClick(item);\n      }\n    };\n\n    const getVariant = () => {\n      if (item.disabled) return 'disabled';\n      if (isSelected) return 'selected';\n      return variant || 'default';\n    };\n\n    return (\n      <button\n        ref={ref}\n        type=\"button\"\n        className={cn(commandMenuItemVariants({ variant: getVariant(), size }), className)}\n        onClick={handleClick}\n        disabled={item.disabled}\n        {...props}\n      >\n        {/* Icon or Avatar */}\n        <div className=\"flex size-5 shrink-0 items-center justify-center\">\n          {item.avatar ? (\n            <div className=\"size-5 overflow-hidden rounded-full\">\n              <img\n                src={typeof item.avatar === 'string' ? item.avatar : item.avatar.src}\n                alt={typeof item.avatar === 'string' ? item.title : item.avatar.alt}\n                className=\"size-full object-cover\"\n                onError={e => {\n                  // Fallback to initials\n                  const target = e.target as HTMLImageElement;\n                  const parent = target.parentElement;\n                  if (parent) {\n                    parent.innerHTML = `<div class=\"flex size-full items-center justify-center bg-gray-200 dark:bg-gray-600 text-xs font-medium text-gray-600 dark:text-gray-300\">${\n                      (typeof item.avatar === 'object' ? item.avatar?.fallback : undefined) ||\n                      (item.label || item.title).charAt(0).toUpperCase()\n                    }</div>`;\n                  }\n                }}\n              />\n            </div>\n          ) : item.icon ? (\n            <item.icon className=\"size-4 text-gray-500 dark:text-gray-400\" />\n          ) : null}\n        </div>\n\n        {/* Content */}\n        <div className=\"flex min-w-0 flex-1 items-center\">\n          <div className=\"truncate font-medium text-gray-900 dark:text-gray-100\">{item.label}</div>\n        </div>\n\n        {/* Shortcut */}\n        {showShortcuts && item.shortcut && item.shortcut.length > 0 && (\n          <div className=\"flex shrink-0 items-center gap-1\">\n            {item.shortcut.map((key: string, index: number) => (\n              <kbd\n                key={index}\n                className=\"inline-flex h-5 min-w-[20px] items-center justify-center rounded border border-gray-200 bg-gray-50 px-1 text-xs font-medium text-gray-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-400\"\n              >\n                {key}\n              </kbd>\n            ))}\n          </div>\n        )}\n\n        {/* Recent indicator */}\n        {item.recent && (\n          <div className=\"flex shrink-0 items-center\">\n            <div className=\"size-1.5 rounded-full bg-blue-500\" />\n          </div>\n        )}\n      </button>\n    );\n  }\n);\n\nCommandMenuItem.displayName = 'CommandMenuItem';\n\nexport { CommandMenuItem, commandMenuItemVariants };\nexport type { CommandMenuItemProps };\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/CommandMenu/InlineCommandMenu.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CommandMenuProps' is defined but never used.","line":11,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSelectedIndex' is assigned a value but never used.","line":67,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":21},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":163,"column":9,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":163,"endColumn":31,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[5197,5198],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":172,"column":9,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":172,"endColumn":31,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[5486,5487],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { useCommandMenuWithApi } from '@/hooks/ui/useCommandMenuWithApi';\nimport { cn } from '@/lib';\nimport { trackCommandMenuError, trackWorkflowSuggestion } from '@/lib/command-menu/analytics-utils';\nimport type {\n  CommandMenuSearchResult as CommandMenuItem,\n  CommandMenuHookResult as CommandMenuProps,\n} from '@/types';\n\nimport { CommandMenuEmpty } from './CommandMenuEmpty';\nimport { CommandMenuErrorBoundary } from './CommandMenuErrorBoundary';\nimport { CommandMenuGroup } from './CommandMenuGroup';\n\nconst inlineCommandMenuVariants = cva(\n  'absolute top-full left-0 right-0 z-50 mt-1 overflow-hidden rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900 shadow-xl ring-1 ring-black/5 dark:ring-white/10',\n  {\n    variants: {\n      size: {\n        sm: 'max-w-sm',\n        md: 'max-w-lg',\n        lg: 'max-w-2xl',\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n    },\n  }\n);\n\ninterface InlineCommandMenuProps extends VariantProps<typeof inlineCommandMenuVariants> {\n  placeholder?: string;\n  emptyStateText?: string;\n  maxResults?: number;\n  showShortcuts?: boolean;\n  showRecentSection?: boolean;\n  className?: string;\n  onFocus?: () => void;\n  onBlur?: () => void;\n}\n\nexport function InlineCommandMenu({\n  placeholder = 'Search for anything...',\n  emptyStateText,\n  maxResults = 10,\n  showShortcuts = true,\n  showRecentSection = true,\n  size,\n  className,\n  onFocus,\n  onBlur,\n}: InlineCommandMenuProps) {\n  const [isInputFocused, setIsInputFocused] = useState(false);\n  const [showDropdown, setShowDropdown] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const scrollableRef = useRef<HTMLDivElement>(null);\n\n  const {\n    searchQuery,\n    setSearchQuery,\n    filteredItems,\n    selectedIndex,\n    setSelectedIndex,\n    executeCommand,\n    isLoading,\n    isOpen,\n    open,\n    close,\n    handleClearRecentItems,\n  } = useCommandMenuWithApi({ maxResults });\n\n  // Show dropdown when input is focused, there's a search query, or hook says it's open (for ⌘K)\n  useEffect(() => {\n    const shouldShow = isInputFocused || searchQuery.trim().length > 0 || isOpen;\n    setShowDropdown(shouldShow);\n\n    // Also sync the hook's isOpen state with our dropdown state for keyboard navigation\n    if (shouldShow && !isOpen) {\n      open(); // This will make keyboard navigation work\n    } else if (!shouldShow && isOpen) {\n      close();\n    }\n  }, [isInputFocused, searchQuery, isOpen, open, close]);\n\n  // When hook opens (via ⌘K), focus the input\n  useEffect(() => {\n    if (isOpen && inputRef.current) {\n      inputRef.current.focus();\n      setIsInputFocused(true);\n    }\n  }, [isOpen]);\n\n  // Scroll selected item into view\n  useEffect(() => {\n    if (showDropdown && scrollableRef.current && filteredItems.length > 0) {\n      const selectedElement = scrollableRef.current.querySelector(\n        `[data-command-item-index=\"${selectedIndex}\"]`\n      );\n      if (selectedElement) {\n        selectedElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'nearest',\n        });\n      }\n    }\n  }, [selectedIndex, showDropdown, filteredItems.length]);\n\n  // Handle clicks outside to close dropdown\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (containerRef.current && !containerRef.current.contains(event.target as Node)) {\n        setIsInputFocused(false);\n        setShowDropdown(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  // Handle input-specific events and coordinate with hook\n  const handleInputKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    // Let the hook handle most navigation, but handle some input-specific behavior\n    if (event.key === 'Enter' && filteredItems[selectedIndex]) {\n      event.preventDefault();\n      executeCommand(filteredItems[selectedIndex]);\n      setIsInputFocused(false);\n      setShowDropdown(false);\n      close();\n      inputRef.current?.blur();\n    } else if (event.key === 'Escape') {\n      event.preventDefault();\n      setIsInputFocused(false);\n      setShowDropdown(false);\n      close();\n      inputRef.current?.blur();\n    }\n  };\n\n  // Group items by category\n  const groupedItems = React.useMemo(() => {\n    const groups = new Map<string, CommandMenuItem[]>();\n\n    // If showing recent section and no search query, separate recent items\n    if (showRecentSection && !searchQuery.trim()) {\n      const recentItems = filteredItems.filter(item => item.recent);\n      const nonRecentItems = filteredItems.filter(item => !item.recent);\n\n      if (recentItems.length > 0) {\n        groups.set('Recent', recentItems);\n      }\n\n      // Group non-recent items by their group property\n      nonRecentItems.forEach(item => {\n        const groupName = item.group || 'Other';\n        if (!groups.has(groupName)) {\n          groups.set(groupName, []);\n        }\n        groups.get(groupName)!.push(item);\n      });\n    } else {\n      // Group all items by their group property\n      filteredItems.forEach(item => {\n        const groupName = item.group || 'Results';\n        if (!groups.has(groupName)) {\n          groups.set(groupName, []);\n        }\n        groups.get(groupName)!.push(item);\n      });\n    }\n\n    return Array.from(groups.entries()).map(([name, items]) => ({\n      name,\n      items,\n    }));\n  }, [filteredItems, searchQuery, showRecentSection]);\n\n  const handleInputFocus = () => {\n    setIsInputFocused(true);\n    onFocus?.();\n  };\n\n  const handleInputBlur = () => {\n    // Delay blur to allow for dropdown item clicks\n    setTimeout(() => {\n      if (!containerRef.current?.contains(document.activeElement)) {\n        setIsInputFocused(false);\n        close(); // Also close hook state\n        onBlur?.();\n      }\n    }, 100);\n  };\n\n  return (\n    <CommandMenuErrorBoundary\n      onError={error => {\n        trackCommandMenuError(error, {\n          component: 'InlineCommandMenu',\n          searchQuery: searchQuery.slice(0, 50),\n          hasDropdown: showDropdown,\n          filteredItemsCount: filteredItems.length,\n        });\n      }}\n    >\n      <div ref={containerRef} className=\"relative w-full\">\n        {/* Search Input */}\n        <div className=\"flex w-full items-center gap-3 rounded-lg border border-gray-200 bg-white px-4 py-2.5 text-left text-sm transition-colors hover:bg-gray-50 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700\">\n          {isLoading ? (\n            <svg\n              className=\"size-4 shrink-0 animate-spin text-gray-400 dark:text-gray-500\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n              />\n            </svg>\n          ) : (\n            <svg\n              className=\"size-4 shrink-0 text-gray-400 dark:text-gray-500\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n              />\n            </svg>\n          )}\n          <input\n            ref={inputRef}\n            type=\"text\"\n            className=\"flex-1 bg-transparent text-gray-900 placeholder-gray-500 focus:outline-none dark:text-gray-100 dark:placeholder-gray-400\"\n            placeholder={placeholder}\n            value={searchQuery}\n            onChange={e => setSearchQuery(e.target.value)}\n            onKeyDown={handleInputKeyDown}\n            onFocus={handleInputFocus}\n            onBlur={handleInputBlur}\n          />\n          <div className=\"flex items-center gap-1\">\n            <kbd className=\"inline-flex h-5 min-w-[20px] items-center justify-center rounded border border-gray-200 bg-gray-50 px-1 text-xs font-medium text-gray-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-400\">\n              ⌘K\n            </kbd>\n          </div>\n        </div>\n\n        {/* Dropdown Results */}\n        {showDropdown && (\n          <div className={cn(inlineCommandMenuVariants({ size }), className)}>\n            {/* Scrollable Results Area */}\n            <div ref={scrollableRef} className=\"max-h-80 overflow-y-auto\">\n              {filteredItems.length === 0 ? (\n                <div className=\"py-4\">\n                  <CommandMenuEmpty\n                    query={searchQuery}\n                    onSuggestionClick={suggestion => {\n                      // Track workflow suggestion click\n                      trackWorkflowSuggestion(suggestion.id, searchQuery, suggestion.title);\n\n                      // Close the dropdown\n                      setIsInputFocused(false);\n                      setShowDropdown(false);\n                      close();\n                      inputRef.current?.blur();\n                    }}\n                  >\n                    {emptyStateText}\n                  </CommandMenuEmpty>\n                </div>\n              ) : (\n                <div className=\"py-2\">\n                  {groupedItems.map((group, groupIndex) => {\n                    // Calculate global index for this group\n                    const globalIndex = groupedItems\n                      .slice(0, groupIndex)\n                      .reduce((acc, g) => acc + g.items.length, 0);\n\n                    return (\n                      <CommandMenuGroup\n                        key={group.name}\n                        label={group.name}\n                        items={group.items}\n                        selectedIndex={selectedIndex}\n                        globalIndex={globalIndex}\n                        showShortcuts={showShortcuts}\n                        onItemClick={item => {\n                          executeCommand(item);\n                          setIsInputFocused(false);\n                          setShowDropdown(false);\n                          inputRef.current?.blur();\n                        }}\n                        onClearGroup={group.name === 'Recent' ? handleClearRecentItems : undefined}\n                      />\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n\n            {/* Fixed Footer */}\n            <div className=\"border-t border-gray-200 bg-white px-4 py-3 dark:border-gray-700 dark:bg-gray-900\">\n              <div className=\"flex items-center justify-between text-xs text-gray-500 dark:text-gray-400\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"flex items-center gap-1\">\n                    <kbd className=\"inline-flex h-4 min-w-[16px] items-center justify-center rounded border border-gray-200 bg-gray-50 px-1 text-xs font-medium dark:border-gray-600 dark:bg-gray-700\">\n                      ↵\n                    </kbd>\n                    <span>to select</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <kbd className=\"inline-flex h-4 min-w-[16px] items-center justify-center rounded border border-gray-200 bg-gray-50 px-1 text-xs font-medium dark:border-gray-600 dark:bg-gray-700\">\n                      ↑↓\n                    </kbd>\n                    <span>to navigate</span>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <kbd className=\"inline-flex h-4 min-w-[16px] items-center justify-center rounded border border-gray-200 bg-gray-50 px-1 text-xs font-medium dark:border-gray-600 dark:bg-gray-700\">\n                    ESC\n                  </kbd>\n                  <span>to close</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </CommandMenuErrorBoundary>\n  );\n}\n\nexport { inlineCommandMenuVariants };\nexport type { InlineCommandMenuProps };\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/CommandMenu/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/ConnectionStatus/ConnectionStatus.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useConnectionStatus' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'syncPending' is assigned a value but never used.","line":26,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\n\nimport { useConnectionStatus } from '@/hooks/utilities/useConnectionStatus';\nimport { syncQueue } from '@/lib/data';\n\n// Custom hook to handle client-side mounting\nfunction useIsClient() {\n  const [isClient, setIsClient] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  return isClient;\n}\n\ninterface ConnectionStatusProps {\n  className?: string;\n}\n\nexport default function ConnectionStatus({ className = '' }: ConnectionStatusProps) {\n  const isClient = useIsClient();\n  const [isOnline, setIsOnline] = useState(true);\n  const [syncPending, setSyncPending] = useState(false);\n  const [syncStatus, setSyncStatus] = useState({\n    isProcessing: false,\n    pendingCount: 0,\n  });\n  const [showBanner, setShowBanner] = useState(false);\n\n  useEffect(() => {\n    // Only run on client side\n    if (!isClient) return;\n\n    // Set initial connection status\n    setIsOnline(navigator.onLine);\n\n    // Setup enhanced sync status monitoring\n    const handleOnline = async () => {\n      setIsOnline(true);\n      setShowBanner(true);\n\n      // Check for pending sync items\n      const status = await syncQueue.getStatus();\n      setSyncStatus(status);\n      setSyncPending(status.pendingCount > 0);\n\n      // Auto-hide banner after sync completes\n      setTimeout(() => {\n        if (status.pendingCount === 0) {\n          setShowBanner(false);\n        }\n      }, 3000);\n    };\n\n    const handleOffline = () => {\n      setIsOnline(false);\n      setShowBanner(true);\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // Initial sync status check\n    const checkSyncStatus = async () => {\n      const status = await syncQueue.getStatus();\n      setSyncStatus(status);\n      setSyncPending(status.pendingCount > 0);\n\n      // Show banner if there are pending items\n      if (status.pendingCount > 0) {\n        setShowBanner(true);\n      }\n    };\n\n    checkSyncStatus();\n\n    // Periodic sync status updates\n    const statusInterval = setInterval(checkSyncStatus, 5000);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n      clearInterval(statusInterval);\n    };\n  }, [isClient]);\n\n  const handleDismiss = () => {\n    setShowBanner(false);\n  };\n\n  const handleForceSync = async () => {\n    if (isOnline) {\n      try {\n        await syncQueue.forceSync();\n        const status = await syncQueue.getStatus();\n        setSyncStatus(status);\n        setSyncPending(status.pendingCount > 0);\n      } catch (error) {\n        console.error('Force sync failed:', error);\n      }\n    }\n  };\n\n  const getStatusInfo = () => {\n    if (!isOnline) {\n      return {\n        message: 'You are offline',\n        detail: 'Changes will be saved locally and synced when connection is restored',\n        color: 'bg-red-500',\n        icon: (\n          <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M18.364 5.636L5.636 18.364M5.636 5.636l12.728 12.728\"\n            />\n          </svg>\n        ),\n      };\n    }\n\n    if (syncStatus.isProcessing) {\n      return {\n        message: 'Syncing data...',\n        detail: `Uploading ${syncStatus.pendingCount} pending changes`,\n        color: 'bg-blue-500',\n        icon: (\n          <svg\n            className=\"h-4 w-4 animate-spin\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n            />\n          </svg>\n        ),\n      };\n    }\n\n    if (syncStatus.pendingCount > 0) {\n      return {\n        message: 'Connection restored',\n        detail: `${syncStatus.pendingCount} changes ready to sync`,\n        color: 'bg-orange-500',\n        icon: (\n          <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z\"\n            />\n          </svg>\n        ),\n      };\n    }\n\n    return {\n      message: 'Connection restored',\n      detail: 'All data is up to date',\n      color: 'bg-green-500',\n      icon: (\n        <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n        </svg>\n      ),\n    };\n  };\n\n  // Don't render on server to prevent hydration mismatch\n  if (!isClient) {\n    return null;\n  }\n\n  // Don't show if online and no pending sync\n  if (!showBanner && isOnline && syncStatus.pendingCount === 0) {\n    return null;\n  }\n\n  const statusInfo = getStatusInfo();\n\n  return (\n    <div className={`fixed top-0 right-0 left-0 z-50 ${statusInfo.color} text-white ${className}`}>\n      <div className=\"mx-auto max-w-7xl px-4 py-2\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex-shrink-0\">{statusInfo.icon}</div>\n            <div className=\"min-w-0 flex-1\">\n              <p className=\"truncate text-sm font-medium\">{statusInfo.message}</p>\n              <p className=\"truncate text-xs opacity-90\">{statusInfo.detail}</p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            {/* Force Sync Button */}\n            {isOnline && syncStatus.pendingCount > 0 && !syncStatus.isProcessing && (\n              <button\n                onClick={handleForceSync}\n                className=\"bg-opacity-20 hover:bg-opacity-30 rounded bg-white px-2 py-1 text-xs transition-colors\"\n              >\n                Sync Now\n              </button>\n            )}\n\n            {/* Dismiss Button */}\n            <button\n              onClick={handleDismiss}\n              className=\"text-white transition-colors hover:text-gray-200\"\n            >\n              <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M6 18L18 6M6 6l12 12\"\n                />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/ConnectionStatus/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/DependencyRatioPieChart/DependencyRatioPieChart.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":23,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":23,"endColumn":14,"suggestions":[{"fix":{"range":[520,580],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":24,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":24,"endColumn":14,"suggestions":[{"fix":{"range":[583,623],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\n\nimport type { DependencyData } from '@/types/charts';\n\nimport GenericPieChart from '../GenericPieChart/GenericPieChart';\n\ninterface DependencyRatioPieChartProps {\n  data: DependencyData;\n  title: string;\n  className?: string;\n}\n\nexport default function DependencyRatioPieChart({\n  data,\n  title,\n  className = '',\n}: DependencyRatioPieChartProps) {\n  const { youngDependents, workingAge, oldDependents } = data;\n  const total = youngDependents + workingAge + oldDependents;\n\n  console.log('DependencyRatioPieChart received data:', data);\n  console.log('Calculated total:', total);\n\n  // Let GenericPieChart generate beautiful colors automatically\n  const colors = {\n    youngDependents: '',\n    workingAge: '',\n    oldDependents: '',\n  };\n\n  // Prepare chart data with semantic colors\n  const chartData = [\n    {\n      label: 'Young (0-14)',\n      value: youngDependents,\n      percentage: total > 0 ? (youngDependents / total) * 100 : 0,\n      color: colors.youngDependents,\n    },\n    {\n      label: 'Working (15-64)',\n      value: workingAge,\n      percentage: total > 0 ? (workingAge / total) * 100 : 0,\n      color: colors.workingAge,\n    },\n    {\n      label: 'Elderly (65+)',\n      value: oldDependents,\n      percentage: total > 0 ? (oldDependents / total) * 100 : 0,\n      color: colors.oldDependents,\n    },\n  ]; // Show all categories including zero values\n\n  return <GenericPieChart data={chartData} title={title} className={className} />;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/DependencyRatioPieChart/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/EmploymentStatusPieChart/EmploymentStatusPieChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/EmploymentStatusPieChart/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/ErrorBoundary/ErrorRecovery.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/ErrorModal/ErrorModal.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/ErrorModal/ErrorModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/ErrorModal/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/FieldSet/ControlField/ControlField.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3674,3677],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3674,3677],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4784,4787],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4784,4787],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\n\nimport { cn } from '@/lib';\nimport type { FormMode } from '@/types';\nimport {\n  getFieldId,\n  getFieldIds,\n  buildAriaDescribedBy,\n  buildAriaLabelledBy,\n} from '@/utils/id-generators';\n\nimport { Label, HelperText, ReadOnly } from '../../../atoms/Field';\nimport { Control } from '../../../atoms/Field/Control/Control';\n\nexport interface ControlFieldProps {\n  children?: React.ReactNode;\n  /** Form mode - determines if field is editable or read-only */\n  mode?: FormMode;\n  label?: string;\n  required?: boolean;\n  helperText?: string;\n  errorMessage?: string;\n  className?: string;\n  orientation?: 'vertical' | 'horizontal';\n  labelWidth?: 'sm' | 'md' | 'lg';\n  htmlFor?: string;\n  labelSize?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  // Control component props (when used directly with Control)\n  controlProps?: React.ComponentProps<typeof Control>;\n  // Label component props\n  labelProps?: Omit<\n    React.ComponentProps<typeof Label>,\n    'htmlFor' | 'required' | 'children' | 'size'\n  >;\n  // Toggle-specific props\n  toggleText?: {\n    checked: string;\n    unchecked: string;\n  };\n}\n\nexport const ControlField = ({\n  children,\n  mode = 'create',\n  label,\n  required = false,\n  helperText,\n  errorMessage,\n  className,\n  orientation = 'vertical',\n  labelWidth = 'md',\n  htmlFor,\n  labelSize = 'sm',\n  controlProps,\n  labelProps,\n  toggleText,\n}: ControlFieldProps) => {\n  const isHorizontal = orientation === 'horizontal';\n\n  // Generate unique field ID using utility function\n  const fieldId = getFieldId(htmlFor, controlProps?.id, 'control-field');\n  const { labelId, helperTextId, errorId } = getFieldIds(fieldId);\n\n  // Use errorMessage as the control error if provided (errorMessage takes precedence)\n  const controlError = errorMessage || controlProps?.errorMessage;\n  const hasHelperText = helperText || errorMessage;\n\n  // Build ARIA attributes for accessibility\n  const ariaLabelledBy = buildAriaLabelledBy(label ? labelId : undefined);\n  const ariaDescribedBy = buildAriaDescribedBy(\n    helperText ? helperTextId : undefined,\n    controlError ? errorId : undefined\n  );\n\n  const getLabelWidthClass = (width: 'sm' | 'md' | 'lg') => {\n    const widthClasses = {\n      sm: 'w-32', // 128px\n      md: 'w-40', // 160px\n      lg: 'w-48', // 192px\n    };\n    return widthClasses[width];\n  };\n\n  return (\n    <div className={cn('w-full', isHorizontal && 'flex items-start space-x-4', className)}>\n      {/* Label */}\n      {label && (\n        <div\n          className={cn(isHorizontal ? `${getLabelWidthClass(labelWidth)} shrink-0 pt-2` : 'mb-1')}\n        >\n          <Label htmlFor={fieldId} required={required} size={labelSize} {...labelProps}>\n            {label}\n          </Label>\n        </div>\n      )}\n\n      {/* Field Container */}\n      <div className={cn('flex-1', isHorizontal ? 'min-w-0' : 'flex flex-col')}>\n        {/* Control/Field */}\n        <div>\n          {mode === 'view' ? (\n            controlProps ? (\n              <ReadOnly\n                id={fieldId}\n                value={\n                  controlProps.type === 'toggle' && toggleText\n                    ? controlProps.checked\n                      ? toggleText.checked\n                      : toggleText.unchecked\n                    : controlProps.checked\n                      ? 'Yes'\n                      : 'No'\n                }\n                aria-labelledby={ariaLabelledBy}\n                aria-describedby={ariaDescribedBy}\n              />\n            ) : (\n              React.Children.map(children, child => {\n                if (React.isValidElement(child)) {\n                  return React.cloneElement(child as React.ReactElement<any>, {\n                    id: fieldId,\n                    'aria-labelledby': ariaLabelledBy,\n                    'aria-describedby': ariaDescribedBy,\n                    mode: 'view',\n                  });\n                }\n                return child;\n              })\n            )\n          ) : controlProps ? (\n            <Control\n              id={fieldId}\n              errorMessage={controlError}\n              aria-labelledby={ariaLabelledBy}\n              aria-describedby={\n                ariaDescribedBy || (toggleText ? `${fieldId}-description` : undefined)\n              }\n              description={\n                controlProps.type === 'toggle' && toggleText\n                  ? controlProps.checked\n                    ? toggleText.checked\n                    : toggleText.unchecked\n                  : controlProps.description || label\n              }\n              {...controlProps}\n            />\n          ) : (\n            React.Children.map(children, child => {\n              if (React.isValidElement(child)) {\n                return React.cloneElement(child as React.ReactElement<any>, {\n                  id: fieldId,\n                  'aria-labelledby': ariaLabelledBy,\n                  'aria-describedby': ariaDescribedBy,\n                });\n              }\n              return child;\n            })\n          )}\n        </div>\n\n        {/* Helper Text and Error Messages */}\n        {hasHelperText && (\n          <div className=\"mt-1 space-y-1\">\n            {/* Helper Text */}\n            {helperText && <HelperText id={helperTextId}>{helperText}</HelperText>}\n\n            {/* Error Message */}\n            {errorMessage && (\n              <HelperText id={errorId} error>\n                {errorMessage}\n              </HelperText>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Control Group for organizing multiple controls\nexport interface ControlGroupProps {\n  children: React.ReactNode;\n  title?: string;\n  description?: string;\n  className?: string;\n  spacing?: 'sm' | 'md' | 'lg';\n  orientation?: 'vertical' | 'horizontal';\n}\n\nexport const ControlGroup = ({\n  children,\n  title,\n  description,\n  className,\n  spacing = 'md',\n  orientation = 'vertical',\n}: ControlGroupProps) => {\n  const getSpacingClass = (spacing: 'sm' | 'md' | 'lg') => {\n    const spacingMap = {\n      sm: '2',\n      md: '4',\n      lg: '6',\n    };\n    return spacingMap[spacing];\n  };\n\n  const spacingClass = getSpacingClass(spacing);\n  const orientationClass = orientation === 'vertical' ? 'flex-col' : 'flex-row flex-wrap';\n\n  return (\n    <div className={cn('w-full', className)}>\n      {/* Title and Description */}\n      {(title || description) && (\n        <div className=\"mb-3\">\n          {title && (\n            <h3 className=\"text-lg font-medium text-gray-800 dark:text-gray-200\">{title}</h3>\n          )}\n          {description && (\n            <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">{description}</p>\n          )}\n        </div>\n      )}\n\n      {/* Controls */}\n      <div className={cn('flex', orientationClass, `gap-${spacingClass}`)}>{children}</div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/FieldSet/ControlField/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/FieldSet/FieldErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/FieldSet/FieldSet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/FieldSet/InputField/InputField.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3065,3068],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3065,3068],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3680,3683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3680,3683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\n\nimport { cn } from '@/lib';\nimport type { FormMode } from '@/types';\nimport {\n  getFieldId,\n  getFieldIds,\n  buildAriaDescribedBy,\n  buildAriaLabelledBy,\n} from '@/utils/id-generators';\n\nimport { Label, Input, HelperText, ReadOnly } from '../../../atoms/Field';\n\nexport interface InputFieldProps {\n  children?: React.ReactNode;\n  /** Form mode - determines if field is editable or read-only */\n  mode?: FormMode;\n  label?: string;\n  required?: boolean;\n  helperText?: string;\n  errorMessage?: string;\n  className?: string;\n  orientation?: 'vertical' | 'horizontal';\n  labelWidth?: 'sm' | 'md' | 'lg';\n  htmlFor?: string;\n  labelSize?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  // Input component props (when used directly with Input)\n  inputProps?: React.ComponentProps<typeof Input>;\n  // Label component props\n  labelProps?: Omit<\n    React.ComponentProps<typeof Label>,\n    'htmlFor' | 'required' | 'children' | 'size'\n  >;\n}\n\nexport const InputField = ({\n  children,\n  mode = 'create',\n  label,\n  required = false,\n  helperText,\n  errorMessage,\n  className,\n  orientation = 'vertical',\n  labelWidth = 'md',\n  htmlFor,\n  labelSize = 'sm',\n  inputProps,\n  labelProps,\n}: InputFieldProps) => {\n  const isHorizontal = orientation === 'horizontal';\n\n  const getLabelWidthClass = (width: 'sm' | 'md' | 'lg') => {\n    const widthClasses = {\n      sm: 'w-32', // 128px\n      md: 'w-40', // 160px\n      lg: 'w-48', // 192px\n    };\n    return widthClasses[width];\n  };\n\n  // Generate unique field ID using utility function\n  const fieldId = getFieldId(htmlFor, inputProps?.id, 'input-field');\n  const { labelId, helperTextId, errorId } = getFieldIds(fieldId);\n\n  // Use errorMessage as the input error if provided\n  const inputError = errorMessage || inputProps?.error;\n  const hasHelperText = helperText || errorMessage;\n\n  // Build ARIA attributes for accessibility\n  const ariaLabelledBy = buildAriaLabelledBy(label ? labelId : undefined);\n  const ariaDescribedByString = buildAriaDescribedBy(\n    helperText ? helperTextId : undefined,\n    inputError ? errorId : undefined\n  );\n\n  return (\n    <div className={cn('w-full', isHorizontal && 'flex items-start space-x-4', className)}>\n      {/* Label */}\n      {label && (\n        <div\n          className={cn(isHorizontal ? `${getLabelWidthClass(labelWidth)} shrink-0 pt-2` : 'mb-1')}\n        >\n          <Label htmlFor={fieldId} required={required} size={labelSize} {...labelProps}>\n            {label}\n          </Label>\n        </div>\n      )}\n\n      {/* Field Container */}\n      <div className={cn(isHorizontal && 'flex-1')}>\n        {/* Input/Field */}\n        <div>\n          {mode === 'view' ? (\n            inputProps ? (\n              <ReadOnly\n                id={fieldId}\n                value={inputProps.value?.toString() || '—'}\n                aria-labelledby={ariaLabelledBy}\n                aria-describedby={ariaDescribedByString}\n              />\n            ) : React.isValidElement(children) ? (\n              React.cloneElement(children as React.ReactElement<any>, {\n                id: fieldId,\n                'aria-labelledby': ariaLabelledBy,\n                'aria-describedby': ariaDescribedByString,\n                mode: 'view',\n              })\n            ) : (\n              children\n            )\n          ) : inputProps ? (\n            <Input\n              id={fieldId}\n              error={inputError}\n              aria-labelledby={ariaLabelledBy}\n              aria-describedby={ariaDescribedByString}\n              {...inputProps}\n            />\n          ) : React.isValidElement(children) ? (\n            React.cloneElement(children as React.ReactElement<any>, {\n              id: fieldId,\n              'aria-labelledby': ariaLabelledBy,\n              'aria-describedby': ariaDescribedByString,\n              error: inputError,\n            })\n          ) : (\n            children\n          )}\n        </div>\n\n        {/* Helper Text and Error Messages */}\n        {hasHelperText && (\n          <div className=\"mt-1 space-y-1\">\n            {/* Helper Text */}\n            {helperText && <HelperText id={helperTextId}>{helperText}</HelperText>}\n\n            {/* Error Message */}\n            {errorMessage && (\n              <HelperText id={errorId} error>\n                {errorMessage}\n              </HelperText>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Form Group for organizing multiple fields\nexport interface FormGroupProps {\n  children: React.ReactNode;\n  title?: string;\n  description?: string;\n  className?: string;\n  spacing?: 'sm' | 'md' | 'lg';\n}\n\nexport const FormGroup = ({\n  children,\n  title,\n  description,\n  className,\n  spacing = 'md',\n}: FormGroupProps) => {\n  const spacingClasses = {\n    sm: 'space-y-3',\n    md: 'space-y-4',\n    lg: 'space-y-6',\n  };\n\n  return (\n    <div className={cn('w-full', className)}>\n      {/* Title and Description */}\n      {(title || description) && (\n        <div className=\"mb-4\">\n          {title && (\n            <h3 className=\"font-body mb-1 text-lg font-semibold text-gray-600 dark:text-gray-400\">\n              {title}\n            </h3>\n          )}\n          {description && (\n            <p className=\"font-body text-sm text-gray-500 dark:text-gray-400\">{description}</p>\n          )}\n        </div>\n      )}\n\n      {/* Fields */}\n      <div className={spacingClasses[spacing]}>{children}</div>\n    </div>\n  );\n};\n\n// Form Container for the entire form\nexport interface FormProps extends React.FormHTMLAttributes<HTMLFormElement> {\n  children: React.ReactNode;\n  spacing?: 'sm' | 'md' | 'lg';\n}\n\nexport const Form = ({ children, className, spacing = 'md', ...props }: FormProps) => {\n  const spacingClasses = {\n    sm: 'space-y-4',\n    md: 'space-y-6',\n    lg: 'space-y-8',\n  };\n\n  return (\n    <form className={cn('w-full', spacingClasses[spacing], className)} {...props}>\n      {children}\n    </form>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/FieldSet/InputField/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/FieldSet/ReadOnlyField/ReadOnlyField.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2822,2825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2822,2825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\n\nimport { cn } from '@/lib';\nimport {\n  getFieldId,\n  getFieldIds,\n  buildAriaDescribedBy,\n  buildAriaLabelledBy,\n} from '@/utils/id-generators';\n\nimport { Label, ReadOnly, HelperText } from '../../../atoms/Field';\n\nexport interface ReadOnlyFieldProps {\n  children?: React.ReactNode;\n  label?: string;\n  required?: boolean;\n  helperText?: string;\n  errorMessage?: string;\n  className?: string;\n  orientation?: 'vertical' | 'horizontal';\n  labelWidth?: 'sm' | 'md' | 'lg';\n  htmlFor?: string;\n  labelSize?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  // ReadOnly component props (when used directly with ReadOnly)\n  readOnlyProps?: React.ComponentProps<typeof ReadOnly>;\n  // Label component props\n  labelProps?: Omit<\n    React.ComponentProps<typeof Label>,\n    'htmlFor' | 'required' | 'children' | 'size'\n  >;\n}\n\nexport const ReadOnlyField = ({\n  children,\n  label,\n  required = false,\n  helperText,\n  errorMessage,\n  className,\n  orientation = 'vertical',\n  labelWidth = 'md',\n  htmlFor,\n  labelSize = 'sm',\n  readOnlyProps,\n  labelProps,\n}: ReadOnlyFieldProps) => {\n  const isHorizontal = orientation === 'horizontal';\n\n  // Generate secure unique ID if not provided\n  const fieldId = getFieldId(htmlFor, readOnlyProps?.id, 'readonly-field');\n  const { labelId, helperTextId, errorId } = getFieldIds(fieldId);\n\n  const hasHelperText = helperText || errorMessage;\n\n  // Build ARIA attributes for accessibility\n  const ariaLabelledBy = buildAriaLabelledBy(label ? labelId : undefined);\n  const ariaDescribedByString = buildAriaDescribedBy(\n    helperText ? helperTextId : undefined,\n    errorMessage ? errorId : undefined\n  );\n\n  const getLabelWidthClass = (width: 'sm' | 'md' | 'lg') => {\n    const widthClasses = {\n      sm: 'w-32', // 128px\n      md: 'w-40', // 160px\n      lg: 'w-48', // 192px\n    };\n    return widthClasses[width];\n  };\n\n  return (\n    <div className={cn('w-full', isHorizontal && 'flex items-start space-x-4', className)}>\n      {/* Label */}\n      {label && (\n        <div\n          className={cn(isHorizontal ? `${getLabelWidthClass(labelWidth)} shrink-0 pt-2` : 'mb-1')}\n        >\n          <Label htmlFor={fieldId} required={required} size={labelSize} {...labelProps}>\n            {label}\n          </Label>\n        </div>\n      )}\n\n      {/* Field Container */}\n      <div className={cn(isHorizontal && 'min-w-0 flex-1')}>\n        {/* ReadOnly Field */}\n        <div>\n          {readOnlyProps ? (\n            <ReadOnly\n              id={fieldId}\n              aria-labelledby={ariaLabelledBy}\n              aria-describedby={ariaDescribedByString}\n              {...readOnlyProps}\n            />\n          ) : (\n            (() => {\n              if (React.isValidElement(children)) {\n                return React.cloneElement(children as React.ReactElement<any>, {\n                  id: fieldId,\n                  'aria-labelledby': ariaLabelledBy,\n                  'aria-describedby': ariaDescribedByString,\n                });\n              }\n              return children;\n            })()\n          )}\n        </div>\n\n        {/* Helper Text and Error Messages */}\n        {hasHelperText && (\n          <div className=\"mt-1 space-y-1\">\n            {/* Helper Text */}\n            {helperText && <HelperText id={helperTextId}>{helperText}</HelperText>}\n\n            {/* Error Message */}\n            {errorMessage && (\n              <HelperText id={errorId} error>\n                {errorMessage}\n              </HelperText>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ReadOnlyField;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/FieldSet/ReadOnlyField/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/FieldSet/SelectField/SelectField.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3529,3532],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3529,3532],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4043,4046],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4043,4046],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\n\nimport { cn } from '@/lib';\nimport type { FormMode } from '@/types';\nimport {\n  getFieldId,\n  getFieldIds,\n  buildAriaDescribedBy,\n  buildAriaLabelledBy,\n} from '@/utils/id-generators';\n\nimport { Label, HelperText, ReadOnly } from '../../../atoms/Field';\nimport { Select, SelectProps } from '../../../atoms/Field/Select';\n\nexport interface SelectFieldProps {\n  children?: React.ReactNode;\n  /** Form mode - determines if field is editable or read-only */\n  mode?: FormMode;\n  label?: string;\n  required?: boolean;\n  helperText?: string;\n  errorMessage?: string;\n  className?: string;\n  orientation?: 'vertical' | 'horizontal';\n  labelWidth?: 'sm' | 'md' | 'lg';\n  htmlFor?: string;\n  labelSize?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  // Select component props (when used directly with Select)\n  selectProps?: SelectProps;\n  // Label component props\n  labelProps?: Omit<\n    React.ComponentProps<typeof Label>,\n    'htmlFor' | 'required' | 'children' | 'size'\n  >;\n}\n\nexport const SelectField = ({\n  children,\n  mode = 'create',\n  label,\n  required = false,\n  helperText,\n  errorMessage,\n  className,\n  orientation = 'vertical',\n  labelWidth = 'md',\n  htmlFor,\n  labelSize = 'sm',\n  selectProps,\n  labelProps,\n}: SelectFieldProps) => {\n  const isHorizontal = orientation === 'horizontal';\n\n  const getLabelWidthClass = (width: 'sm' | 'md' | 'lg') => {\n    const widthClasses = {\n      sm: 'w-32', // 128px\n      md: 'w-40', // 160px\n      lg: 'w-48', // 192px\n    };\n    return widthClasses[width];\n  };\n\n  // Generate unique field ID using utility function\n  const fieldId = getFieldId(htmlFor, selectProps?.id, 'select-field');\n  const { labelId, helperTextId, errorId } = getFieldIds(fieldId);\n\n  // Use errorMessage as the select error if provided\n  const selectError = errorMessage || selectProps?.error;\n  const hasHelperText = helperText || errorMessage;\n\n  // Build ARIA attributes for accessibility\n  const ariaLabelledBy = buildAriaLabelledBy(label ? labelId : undefined);\n  const ariaDescribedByString = buildAriaDescribedBy(\n    helperText ? helperTextId : undefined,\n    selectError ? errorId : undefined\n  );\n\n  return (\n    <div className={cn('w-full', isHorizontal && 'flex items-start space-x-4', className)}>\n      {/* Label */}\n      {label && (\n        <div\n          className={cn(isHorizontal ? `${getLabelWidthClass(labelWidth)} shrink-0 pt-2` : 'mb-1')}\n        >\n          <Label htmlFor={fieldId} required={required} size={labelSize} {...labelProps}>\n            {label}\n          </Label>\n        </div>\n      )}\n\n      {/* Field Container */}\n      <div className={cn(isHorizontal && 'flex-1')}>\n        {/* Select/Field */}\n        <div>\n          {mode === 'view' ? (\n            selectProps ? (\n              <ReadOnly\n                id={fieldId}\n                value={(() => {\n                  if (!selectProps.value) return '—';\n                  // Find the matching option and return its label\n                  const matchingOption = selectProps.options?.find(\n                    option => option.value === selectProps.value\n                  );\n                  return matchingOption\n                    ? matchingOption.label\n                    : selectProps.value?.toString() || '—';\n                })()}\n                aria-labelledby={ariaLabelledBy}\n                aria-describedby={ariaDescribedByString}\n              />\n            ) : React.isValidElement(children) ? (\n              React.cloneElement(children as React.ReactElement<any>, {\n                id: fieldId,\n                'aria-labelledby': ariaLabelledBy,\n                'aria-describedby': ariaDescribedByString,\n                mode: 'view',\n              })\n            ) : (\n              children\n            )\n          ) : selectProps ? (\n            <Select {...selectProps} id={fieldId} error={selectError} />\n          ) : (\n            (() => {\n              if (React.isValidElement(children)) {\n                return React.cloneElement(children as React.ReactElement<any>, {\n                  id: fieldId,\n                  'aria-labelledby': ariaLabelledBy,\n                  'aria-describedby': ariaDescribedByString,\n                  error: selectError,\n                });\n              }\n              return children;\n            })()\n          )}\n        </div>\n\n        {/* Helper Text and Error Messages */}\n        {hasHelperText && (\n          <div className=\"mt-1 space-y-1\">\n            {/* Helper Text */}\n            {helperText && <HelperText id={helperTextId}>{helperText}</HelperText>}\n\n            {/* Error Message */}\n            {errorMessage && (\n              <HelperText id={errorId} error>\n                {errorMessage}\n              </HelperText>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Note: Form and FormGroup are exported from InputField to avoid conflicts\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/FieldSet/SelectField/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/FieldSet/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/FileUpload/FileUpload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/FileUpload/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/GenericPieChart/GenericPieChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":153,"column":36,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":153,"endColumn":80}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\n\ninterface ChartData {\n  label: string;\n  value: number;\n  percentage: number;\n  color: string;\n}\n\ninterface GenericPieChartProps {\n  data: ChartData[];\n  title: string;\n  baseColor?: string;\n  className?: string;\n}\n\nexport default function GenericPieChart({\n  data,\n  title,\n  baseColor: _baseColor = '#3b82f6',\n  className = '',\n}: GenericPieChartProps) {\n  const [hoveredSlice, setHoveredSlice] = useState<string | null>(null);\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n\n  // Chart.js default color palette - extended for better variety\n  const generateColorVariations = (count: number) => {\n    // Chart.js default brand colors extended with complementary colors\n    const chartJsColors = [\n      '#36a2eb', // Blue\n      '#ff6384', // Pink/Red\n      '#ff9f40', // Orange\n      '#ffcd56', // Yellow\n      '#4bc0c0', // Cyan/Teal\n      '#9966ff', // Purple\n      '#c9cbcf', // Light Gray\n      '#ff4757', // Bright Red\n      '#2ed573', // Green\n      '#ffa502', // Dark Orange\n      '#3742fa', // Indigo\n      '#ff3838', // Coral\n      '#70a1ff', // Light Blue\n      '#7bed9f', // Light Green\n      '#5352ed', // Blue Violet\n    ];\n\n    // Return colors cycling through the extended Chart.js palette\n    return Array.from({ length: count }, (_, index) => {\n      return chartJsColors[index % chartJsColors.length];\n    });\n  };\n\n  // Generate Chart.js colors for all items\n  const colorVariations = generateColorVariations(data.length);\n  const dataWithColors = data.map((item, index) => {\n    // If item has a valid predefined color, use it; otherwise use generated color\n    if (item.color && item.color !== '' && item.color !== '#000000') {\n      return item;\n    }\n    return {\n      ...item,\n      color: colorVariations[index],\n    };\n  });\n\n  const total = dataWithColors.reduce((sum, item) => sum + item.value, 0);\n\n  if (total === 0) {\n    return (\n      <div\n        className={`rounded-lg border border-gray-300 bg-white p-6 dark:border-gray-600 dark:bg-gray-800 ${className}`}\n      >\n        <h3 className=\"font-display mb-4 text-lg font-semibold text-gray-600 dark:text-gray-400\">\n          {title}\n        </h3>\n        <div className=\"text-center text-gray-600 dark:text-gray-400 dark:text-gray-600\">\n          No data available\n        </div>\n      </div>\n    );\n  }\n\n  // Create SVG path for pie slices\n  const createPieSlicePath = (startAngle: number, endAngle: number, radius: number) => {\n    // Convert angles to radians and adjust for SVG coordinate system (start from top)\n    const startAngleRad = ((startAngle - 90) * Math.PI) / 180;\n    const endAngleRad = ((endAngle - 90) * Math.PI) / 180;\n\n    const x1 = 50 + radius * Math.cos(startAngleRad);\n    const y1 = 50 + radius * Math.sin(startAngleRad);\n    const x2 = 50 + radius * Math.cos(endAngleRad);\n    const y2 = 50 + radius * Math.sin(endAngleRad);\n\n    const largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n\n    return ['M', 50, 50, 'L', x1, y1, 'A', radius, radius, 0, largeArcFlag, 1, x2, y2, 'Z'].join(\n      ' '\n    );\n  };\n\n  const radius = 45;\n\n  const handleMouseMove = (event: React.MouseEvent, label: string) => {\n    setHoveredSlice(label);\n    setMousePosition({ x: event.clientX, y: event.clientY });\n  };\n\n  const handleMouseLeave = () => {\n    setHoveredSlice(null);\n  };\n\n  const getTooltipData = (label: string) => {\n    const item = dataWithColors.find(d => d.label === label);\n    return item\n      ? {\n          label: item.label,\n          count: item.value,\n          percentage: item.percentage,\n        }\n      : null;\n  };\n\n  // Calculate angles for each slice\n  let currentAngle = 0;\n  const slices = dataWithColors.map(item => {\n    const angle = (item.percentage / 100) * 360;\n    const slice = {\n      ...item,\n      startAngle: currentAngle,\n      endAngle: currentAngle + angle,\n    };\n    currentAngle += angle;\n    return slice;\n  });\n\n  return (\n    <div\n      className={`rounded-lg border border-gray-300 bg-white p-6 dark:border-gray-600 dark:bg-gray-800 ${className}`}\n    >\n      <h3 className=\"font-display mb-4 text-lg font-semibold text-gray-600 dark:text-gray-400 dark:text-gray-600\">\n        {title}\n      </h3>\n\n      <div className=\"grid grid-cols-2 gap-6\">\n        {/* Pie Chart */}\n        <div className=\"relative flex items-center justify-center\">\n          <svg width=\"240\" height=\"240\" viewBox=\"0 0 100 100\">\n            {/* Handle 100% case with full circle */}\n            {dataWithColors.filter(item => item.value > 0).length === 1 ? (\n              (() => {\n                const singleItem = dataWithColors.find(item => item.value > 0)!;\n                return (\n                  <circle\n                    cx=\"50\"\n                    cy=\"50\"\n                    r={hoveredSlice === singleItem.label ? '47' : '45'}\n                    fill={singleItem.color}\n                    className={`cursor-pointer transition-all duration-200 ${\n                      hoveredSlice === singleItem.label ? 'drop-shadow-lg' : 'hover:opacity-90'\n                    }`}\n                    onMouseMove={e => handleMouseMove(e, singleItem.label)}\n                    onMouseLeave={handleMouseLeave}\n                  />\n                );\n              })()\n            ) : (\n              <>\n                {slices.map((slice, index) => {\n                  const isHovered = hoveredSlice === slice.label;\n                  const isOtherHovered = hoveredSlice && hoveredSlice !== slice.label;\n\n                  return (\n                    slice.value > 0 && (\n                      <path\n                        key={index}\n                        d={createPieSlicePath(\n                          slice.startAngle,\n                          slice.endAngle,\n                          isHovered ? radius + 2 : radius\n                        )}\n                        fill={slice.color}\n                        className={`cursor-pointer transition-all duration-200 ${\n                          isHovered\n                            ? 'drop-shadow-lg'\n                            : isOtherHovered\n                              ? 'opacity-60'\n                              : 'hover:opacity-90'\n                        }`}\n                        onMouseMove={e => handleMouseMove(e, slice.label)}\n                        onMouseLeave={handleMouseLeave}\n                      />\n                    )\n                  );\n                })}\n              </>\n            )}\n          </svg>\n        </div>\n\n        {/* Legend - show all items including zero values */}\n        <div className=\"flex flex-col justify-center space-y-1\">\n          {dataWithColors.map((item, index) => {\n            const isHovered = hoveredSlice === item.label;\n            const isOtherHovered = hoveredSlice && hoveredSlice !== item.label;\n            const hasNoData = item.value === 0;\n\n            return (\n              <div\n                key={index}\n                className={`flex cursor-pointer items-center justify-between rounded-md px-2 py-1 transition-all duration-200 ${\n                  hasNoData\n                    ? 'cursor-default opacity-50'\n                    : isHovered\n                      ? 'bg-gray-50 shadow-xs dark:bg-gray-700'\n                      : isOtherHovered\n                        ? 'opacity-60'\n                        : 'hover:bg-gray-50 dark:bg-gray-700'\n                }`}\n                onMouseEnter={hasNoData ? undefined : e => handleMouseMove(e, item.label)}\n                onMouseLeave={hasNoData ? undefined : handleMouseLeave}\n              >\n                <div className=\"flex items-center gap-2\">\n                  <div\n                    className={`size-3 rounded-full transition-all duration-200 ${\n                      hasNoData\n                        ? ''\n                        : isHovered\n                          ? 'ring-primary-200 scale-125 shadow-md ring-2'\n                          : ''\n                    }`}\n                    style={{ backgroundColor: item.color }}\n                  ></div>\n                  <span\n                    className={`font-body text-sm transition-all duration-200 ${\n                      hasNoData\n                        ? 'text-gray-400 dark:text-gray-400 dark:text-gray-600'\n                        : isHovered\n                          ? 'font-medium text-gray-600 dark:text-gray-400'\n                          : 'text-gray-700 dark:text-gray-300 dark:text-gray-700'\n                    }`}\n                  >\n                    {item.label}\n                  </span>\n                </div>\n                <div\n                  className={`font-display text-sm font-semibold transition-all duration-200 ${\n                    hasNoData\n                      ? 'text-gray-400 dark:text-gray-400 dark:text-gray-600'\n                      : isHovered\n                        ? 'font-bold text-gray-600 dark:text-gray-400'\n                        : 'text-gray-900 dark:text-gray-100 dark:text-gray-900'\n                  }`}\n                >\n                  {item.value.toLocaleString()} ({item.percentage.toFixed(1)}%)\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Tooltip */}\n      {hoveredSlice && (\n        <div\n          className=\"pointer-events-none fixed z-50 rounded-lg border-2 border-blue-200 bg-white px-4 py-3 shadow-2xl dark:border-blue-700 dark:bg-gray-900\"\n          style={{\n            left: mousePosition.x + 10,\n            top: mousePosition.y - 10,\n            transform: 'translate(-50%, -100%)',\n          }}\n        >\n          {(() => {\n            const tooltipData = getTooltipData(hoveredSlice);\n            if (!tooltipData) return null;\n\n            const item = dataWithColors.find(d => d.label === hoveredSlice);\n\n            return (\n              <div className=\"text-sm\">\n                <div className=\"mb-1 flex items-center gap-2 font-semibold text-gray-900 dark:text-gray-100\">\n                  <div\n                    className=\"size-3 rounded-full\"\n                    style={{ backgroundColor: item?.color }}\n                  ></div>\n                  {tooltipData.label}\n                </div>\n                <div className=\"text-gray-700 dark:text-gray-300\">\n                  {tooltipData.count.toLocaleString()} ({tooltipData.percentage.toFixed(1)}%)\n                </div>\n              </div>\n            );\n          })()}\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/GenericPieChart/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/PWADevTools/PWADevTools.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'offlineStorage' is defined but never used.","line":6,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[456,459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[456,459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[515,518],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[515,518],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[576,579],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[576,579],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\n\nimport { syncQueue, offlineStorage } from '@/lib/data';\nimport { pwaPerformance } from '@/lib/performance/pwaPerformanceUtils';\n\ninterface PWADevToolsProps {\n  className?: string;\n}\n\nexport default function PWADevTools({ className = '' }: PWADevToolsProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [metrics, setMetrics] = useState<any>(null);\n  const [syncStatus, setSyncStatus] = useState<any>(null);\n  const [userMetrics, setUserMetrics] = useState<any>(null);\n\n  // Only show in development\n  const isDevelopment = process.env.NODE_ENV === 'development';\n\n  useEffect(() => {\n    if (!isDevelopment) return;\n\n    const updateMetrics = async () => {\n      try {\n        // Get PWA performance metrics\n        if (pwaPerformance.instance) {\n          const report = pwaPerformance.instance.generateReport();\n          setMetrics(report);\n        }\n\n        // Get sync queue status\n        const status = await syncQueue.getStatus();\n        setSyncStatus(status);\n\n        // Get user behavior metrics\n        const stored = localStorage.getItem('pwa-user-metrics');\n        if (stored) {\n          setUserMetrics(JSON.parse(stored));\n        }\n      } catch (error) {\n        console.error('Failed to update PWA dev tools metrics:', error);\n      }\n    };\n\n    updateMetrics();\n    const interval = setInterval(updateMetrics, 5000);\n\n    return () => clearInterval(interval);\n  }, [isDevelopment]);\n\n  if (!isDevelopment) {\n    return null;\n  }\n\n  const clearAllData = () => {\n    localStorage.removeItem('pwa-metrics');\n    localStorage.removeItem('pwa-user-metrics');\n    localStorage.removeItem('pwa-prompt-dismissed-date');\n    sessionStorage.removeItem('pwa-prompt-dismissed');\n    pwaPerformance.instance?.reset();\n    toast.success('PWA data cleared');\n    window.location.reload();\n  };\n\n  const exportMetrics = () => {\n    const data = {\n      pwaMetrics: metrics,\n      syncStatus,\n      userMetrics,\n      timestamp: new Date().toISOString(),\n    };\n\n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `pwa-metrics-${Date.now()}.json`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className={`fixed right-4 bottom-20 z-50 ${className}`}>\n      {/* Toggle Button */}\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"rounded-full bg-blue-600 p-2 text-white shadow-lg transition-colors hover:bg-blue-700\"\n        title=\"PWA Dev Tools\"\n      >\n        <svg className=\"h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"\n          />\n        </svg>\n      </button>\n\n      {/* Panel */}\n      {isOpen && (\n        <div className=\"absolute right-0 bottom-12 max-h-96 w-80 overflow-y-auto rounded-lg border border-gray-200 bg-white p-4 shadow-xl dark:border-gray-700 dark:bg-gray-800\">\n          <div className=\"mb-3 flex items-center justify-between\">\n            <h3 className=\"text-sm font-semibold text-gray-900 dark:text-white\">PWA Dev Tools</h3>\n            <button\n              onClick={() => setIsOpen(false)}\n              className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-200\"\n            >\n              <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M6 18L18 6M6 6l12 12\"\n                />\n              </svg>\n            </button>\n          </div>\n\n          {/* Performance Metrics */}\n          {metrics && (\n            <div className=\"mb-4\">\n              <h4 className=\"mb-2 text-xs font-medium text-gray-700 dark:text-gray-300\">\n                Performance Metrics\n              </h4>\n              <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                <div className=\"rounded bg-gray-50 p-2 dark:bg-gray-700\">\n                  <div className=\"text-gray-600 dark:text-gray-400\">Cache Hit Rate</div>\n                  <div className=\"font-medium\">\n                    {(metrics.rates.cacheHitRate * 100).toFixed(1)}%\n                  </div>\n                </div>\n                <div className=\"rounded bg-gray-50 p-2 dark:bg-gray-700\">\n                  <div className=\"text-gray-600 dark:text-gray-400\">Install Conversion</div>\n                  <div className=\"font-medium\">\n                    {(metrics.rates.installConversionRate * 100).toFixed(1)}%\n                  </div>\n                </div>\n                <div className=\"rounded bg-gray-50 p-2 dark:bg-gray-700\">\n                  <div className=\"text-gray-600 dark:text-gray-400\">Prompts Shown</div>\n                  <div className=\"font-medium\">{metrics.metrics.installPromptShown}</div>\n                </div>\n                <div className=\"rounded bg-gray-50 p-2 dark:bg-gray-700\">\n                  <div className=\"text-gray-600 dark:text-gray-400\">Offline Usage</div>\n                  <div className=\"font-medium\">{metrics.metrics.offlineUsage}</div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Sync Status */}\n          {syncStatus && (\n            <div className=\"mb-4\">\n              <h4 className=\"mb-2 text-xs font-medium text-gray-700 dark:text-gray-300\">\n                Sync Status\n              </h4>\n              <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                <div className=\"rounded bg-gray-50 p-2 dark:bg-gray-700\">\n                  <div className=\"text-gray-600 dark:text-gray-400\">Pending Items</div>\n                  <div className=\"font-medium\">{syncStatus.pendingCount}</div>\n                </div>\n                <div className=\"rounded bg-gray-50 p-2 dark:bg-gray-700\">\n                  <div className=\"text-gray-600 dark:text-gray-400\">Processing</div>\n                  <div className=\"font-medium\">{syncStatus.isProcessing ? 'Yes' : 'No'}</div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* User Behavior */}\n          {userMetrics && (\n            <div className=\"mb-4\">\n              <h4 className=\"mb-2 text-xs font-medium text-gray-700 dark:text-gray-300\">\n                User Behavior\n              </h4>\n              <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                <div className=\"rounded bg-gray-50 p-2 dark:bg-gray-700\">\n                  <div className=\"text-gray-600 dark:text-gray-400\">Page Views</div>\n                  <div className=\"font-medium\">{userMetrics.pageViews}</div>\n                </div>\n                <div className=\"rounded bg-gray-50 p-2 dark:bg-gray-700\">\n                  <div className=\"text-gray-600 dark:text-gray-400\">Revisits</div>\n                  <div className=\"font-medium\">{userMetrics.revisits}</div>\n                </div>\n                <div className=\"rounded bg-gray-50 p-2 dark:bg-gray-700\">\n                  <div className=\"text-gray-600 dark:text-gray-400\">Time Spent</div>\n                  <div className=\"font-medium\">{Math.round(userMetrics.timeSpent / 1000)}s</div>\n                </div>\n                <div className=\"rounded bg-gray-50 p-2 dark:bg-gray-700\">\n                  <div className=\"text-gray-600 dark:text-gray-400\">Interactions</div>\n                  <div className=\"font-medium\">{userMetrics.interactions}</div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Actions */}\n          <div className=\"flex flex-col space-y-2\">\n            <button\n              onClick={exportMetrics}\n              className=\"rounded bg-blue-600 px-3 py-2 text-xs text-white transition-colors hover:bg-blue-700\"\n            >\n              Export Metrics\n            </button>\n            <button\n              onClick={clearAllData}\n              className=\"rounded bg-red-600 px-3 py-2 text-xs text-white transition-colors hover:bg-red-700\"\n            >\n              Clear All Data\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/PWADevTools/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/PWAInstallPrompt/PWAInstallPrompt.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":101,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":101,"endColumn":20,"suggestions":[{"fix":{"range":[3172,3208],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":104,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":104,"endColumn":20,"suggestions":[{"fix":{"range":[3274,3319],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":138,"column":13,"nodeType":"JSXOpeningElement","endLine":138,"endColumn":97}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\n\nimport { Button } from '@/components';\nimport {\n  loadUserMetrics,\n  updatePageViewMetrics,\n  trackUserInteraction,\n  trackTimeSpent,\n  shouldShowInstallPrompt,\n  getPersonalizedInstallMessage,\n  isPWAInstalled,\n  recordInstallDismissal,\n  getInstallPromptDelay,\n  setupUserInteractionTracking,\n  setupTimeTracking,\n  type UserBehaviorMetrics,\n} from '@/lib/analytics/user-behavior';\nimport { trackPWAEvents } from '@/lib/performance/pwaPerformanceUtils';\n\ninterface BeforeInstallPromptEvent extends Event {\n  prompt(): Promise<void>;\n  userChoice: Promise<{ outcome: 'accepted' | 'dismissed' }>;\n}\n\nexport default function PWAInstallPrompt() {\n  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);\n  const [showPrompt, setShowPrompt] = useState(false);\n  const [isInstalled, setIsInstalled] = useState(isPWAInstalled);\n  const [userMetrics, setUserMetrics] = useState<UserBehaviorMetrics>(loadUserMetrics);\n\n  useEffect(() => {\n    // Initialize PWA installation check\n    setIsInstalled(isPWAInstalled());\n\n    // Update page view metrics\n    const updatedMetrics = updatePageViewMetrics();\n    setUserMetrics(updatedMetrics);\n\n    // Setup beforeinstallprompt event listener\n    const handleBeforeInstallPrompt = (e: Event) => {\n      e.preventDefault();\n      setDeferredPrompt(e as BeforeInstallPromptEvent);\n\n      // Use smart timing based on user behavior\n      if (!isPWAInstalled() && shouldShowInstallPrompt(updatedMetrics)) {\n        const delay = getInstallPromptDelay(updatedMetrics);\n        setTimeout(() => {\n          if (!isInstalled) {\n            setShowPrompt(true);\n            trackPWAEvents.installPromptShown();\n          }\n        }, delay);\n      }\n    };\n\n    // Setup app installed event listener\n    const handleAppInstalled = () => {\n      setIsInstalled(true);\n      setShowPrompt(false);\n      setDeferredPrompt(null);\n      trackPWAEvents.installAccepted();\n    };\n\n    // Setup user interaction tracking\n    const cleanupInteractionTracking = setupUserInteractionTracking(() => {\n      const updatedMetrics = trackUserInteraction();\n      setUserMetrics(updatedMetrics);\n    });\n\n    // Setup time tracking\n    const cleanupTimeTracking = setupTimeTracking(sessionTime => {\n      const updatedMetrics = trackTimeSpent(Date.now() - sessionTime);\n      setUserMetrics(updatedMetrics);\n    });\n\n    // Add PWA event listeners\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    window.addEventListener('appinstalled', handleAppInstalled);\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      window.removeEventListener('appinstalled', handleAppInstalled);\n      cleanupInteractionTracking();\n      cleanupTimeTracking();\n    };\n  }, [isInstalled]);\n\n  const handleInstallClick = async () => {\n    if (!deferredPrompt) return;\n\n    try {\n      // Show the install prompt\n      await deferredPrompt.prompt();\n\n      // Wait for user choice\n      const { outcome } = await deferredPrompt.userChoice;\n\n      if (outcome === 'accepted') {\n        console.log('PWA install accepted');\n        trackPWAEvents.installAccepted();\n      } else {\n        console.log('PWA install dismissed by user');\n        trackPWAEvents.installDismissed();\n        // Record dismissal for smart timing\n        recordInstallDismissal();\n      }\n    } catch (error) {\n      console.error('PWA install error:', error);\n      trackPWAEvents.installDismissed();\n    } finally {\n      setDeferredPrompt(null);\n      setShowPrompt(false);\n    }\n  };\n\n  const handleDismiss = () => {\n    setShowPrompt(false);\n    trackPWAEvents.installDismissed();\n    recordInstallDismissal();\n  };\n\n  // Don't show if already installed, dismissed this session, or conditions not met\n  if (isInstalled || !showPrompt || sessionStorage.getItem('pwa-prompt-dismissed')) {\n    return null;\n  }\n\n  // Generate personalized message based on user behavior\n  const personalizedMessage = getPersonalizedInstallMessage(userMetrics);\n\n  return (\n    <div className=\"fixed right-4 bottom-4 left-4 z-50 md:right-4 md:left-auto md:max-w-sm\">\n      <div className=\"animate-slide-up rounded-lg border border-gray-200 bg-white p-4 shadow-lg dark:border-gray-700 dark:bg-gray-800\">\n        <div className=\"flex items-start space-x-3\">\n          {/* App Icon with engagement indicator */}\n          <div className=\"relative flex-shrink-0\">\n            <img src=\"/icons/icon-72x72.png\" alt=\"Citizenly\" className=\"h-12 w-12 rounded-lg\" />\n            {userMetrics.revisits >= 2 && (\n              <div className=\"absolute -top-1 -right-1 flex h-4 w-4 items-center justify-center rounded-full bg-green-500\">\n                <svg className=\"h-2 w-2 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                    clipRule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            )}\n          </div>\n\n          {/* Content */}\n          <div className=\"min-w-0 flex-1\">\n            <h3 className=\"text-sm font-semibold text-gray-900 dark:text-white\">\n              {personalizedMessage.title}\n            </h3>\n            <p className=\"mt-1 text-xs text-gray-600 dark:text-gray-400\">\n              {personalizedMessage.description}\n            </p>\n\n            {/* Engagement indicators */}\n            {userMetrics.revisits >= 2 && (\n              <div className=\"mt-2 flex items-center space-x-1\">\n                <div className=\"h-2 w-2 rounded-full bg-green-500\"></div>\n                <span className=\"text-xs text-green-600 dark:text-green-400\">Returning user</span>\n              </div>\n            )}\n\n            {/* Buttons */}\n            <div className=\"mt-3 flex space-x-2\">\n              <Button\n                onClick={handleInstallClick}\n                variant=\"primary\"\n                size=\"sm\"\n                className=\"px-3 py-1 text-xs\"\n              >\n                Install\n              </Button>\n              <Button\n                onClick={handleDismiss}\n                variant=\"neutral-outline\"\n                size=\"sm\"\n                className=\"px-3 py-1 text-xs\"\n              >\n                Not now\n              </Button>\n            </div>\n          </div>\n\n          {/* Close button */}\n          <button\n            onClick={handleDismiss}\n            className=\"flex-shrink-0 p-1 text-gray-400 hover:text-gray-600 dark:hover:text-gray-200\"\n          >\n            <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n\n        {/* Features */}\n        <div className=\"mt-3 border-t border-gray-100 pt-3 dark:border-gray-700\">\n          <div className=\"grid grid-cols-3 gap-2 text-xs text-gray-500 dark:text-gray-400\">\n            <div className=\"flex items-center space-x-1\">\n              <svg className=\"h-3 w-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M13 10V3L4 14h7v7l9-11h-7z\"\n                />\n              </svg>\n              <span>Fast</span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <svg className=\"h-3 w-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\"\n                />\n              </svg>\n              <span>Offline</span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <svg className=\"h-3 w-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z\"\n                />\n              </svg>\n              <span>Mobile</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/PWAInstallPrompt/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/PWAStatus/PWAStatus.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[821,824],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[821,824],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":221,"column":87,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7827,7916],"text":" Look for the install prompt or use browser menu → &quot;Install\n          Citizenly\"\n        "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7827,7916],"text":" Look for the install prompt or use browser menu → &ldquo;Install\n          Citizenly\"\n        "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7827,7916],"text":" Look for the install prompt or use browser menu → &#34;Install\n          Citizenly\"\n        "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7827,7916],"text":" Look for the install prompt or use browser menu → &rdquo;Install\n          Citizenly\"\n        "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":222,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7827,7916],"text":" Look for the install prompt or use browser menu → \"Install\n          Citizenly&quot;\n        "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7827,7916],"text":" Look for the install prompt or use browser menu → \"Install\n          Citizenly&ldquo;\n        "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7827,7916],"text":" Look for the install prompt or use browser menu → \"Install\n          Citizenly&#34;\n        "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7827,7916],"text":" Look for the install prompt or use browser menu → \"Install\n          Citizenly&rdquo;\n        "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\n\nimport { Button } from '@/components';\n\ninterface PWAStatusInfo {\n  isOnline: boolean;\n  isInstalled: boolean;\n  hasServiceWorker: boolean;\n  cacheStatus: string;\n  installPromptAvailable: boolean;\n}\n\nexport default function PWAStatus() {\n  const [status, setStatus] = useState<PWAStatusInfo>({\n    isOnline: true,\n    isInstalled: false,\n    hasServiceWorker: false,\n    cacheStatus: 'Unknown',\n    installPromptAvailable: false,\n  });\n  const [showDetails, setShowDetails] = useState(false);\n\n  useEffect(() => {\n    const updateStatus = () => {\n      const isOnline = navigator.onLine;\n\n      const isInstalled =\n        window.matchMedia('(display-mode: standalone)').matches ||\n        (window.navigator as any).standalone === true;\n\n      const hasServiceWorker = 'serviceWorker' in navigator;\n\n      setStatus(prev => ({\n        ...prev,\n        isOnline,\n        isInstalled,\n        hasServiceWorker,\n      }));\n    };\n\n    // Initial status check\n    updateStatus();\n\n    // Listen for online/offline changes\n    window.addEventListener('online', updateStatus);\n    window.addEventListener('offline', updateStatus);\n\n    // Check service worker status\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(() => {\n        setStatus(prev => ({ ...prev, cacheStatus: 'Active' }));\n      });\n    }\n\n    return () => {\n      window.removeEventListener('online', updateStatus);\n      window.removeEventListener('offline', updateStatus);\n    };\n  }, []);\n\n  const handleClearCache = async () => {\n    if ('caches' in window) {\n      try {\n        const cacheNames = await caches.keys();\n        await Promise.all(cacheNames.map(name => caches.delete(name)));\n\n        // Also unregister service worker\n        if ('serviceWorker' in navigator) {\n          const registrations = await navigator.serviceWorker.getRegistrations();\n          await Promise.all(registrations.map(reg => reg.unregister()));\n        }\n\n        setStatus(prev => ({ ...prev, cacheStatus: 'Cleared' }));\n\n        // Reload the page\n        window.location.reload();\n      } catch (error) {\n        console.error('Failed to clear cache:', error);\n      }\n    }\n  };\n\n  const handleTestOffline = () => {\n    // Simulate offline mode for testing\n    toast(\n      'To test offline mode: 1. Open DevTools (F12), 2. Go to Network tab, 3. Check \"Offline\" checkbox, 4. Try navigating pages'\n    );\n  };\n\n  if (!showDetails) {\n    return (\n      <button\n        onClick={() => setShowDetails(true)}\n        className=\"fixed right-4 bottom-20 z-40 rounded-full bg-blue-600 p-2 text-white shadow-lg transition-colors hover:bg-blue-700\"\n        title=\"PWA Status\"\n      >\n        <svg className=\"h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n          />\n        </svg>\n      </button>\n    );\n  }\n\n  return (\n    <div className=\"fixed right-4 bottom-4 z-40 max-w-sm rounded-lg border border-gray-200 bg-white p-4 shadow-lg dark:border-gray-700 dark:bg-gray-800\">\n      <div className=\"mb-3 flex items-center justify-between\">\n        <h3 className=\"text-sm font-semibold text-gray-900 dark:text-white\">PWA Status</h3>\n        <button\n          onClick={() => setShowDetails(false)}\n          className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-200\"\n        >\n          <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M6 18L18 6M6 6l12 12\"\n            />\n          </svg>\n        </button>\n      </div>\n\n      <div className=\"space-y-2 text-xs\">\n        {/* Connection Status */}\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-gray-600 dark:text-gray-400\">Connection:</span>\n          <div className=\"flex items-center space-x-1\">\n            <div\n              className={`h-2 w-2 rounded-full ${status.isOnline ? 'bg-green-500' : 'bg-red-500'}`}\n            ></div>\n            <span className={status.isOnline ? 'text-green-600' : 'text-red-600'}>\n              {status.isOnline ? 'Online' : 'Offline'}\n            </span>\n          </div>\n        </div>\n\n        {/* Installation Status */}\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-gray-600 dark:text-gray-400\">Installed:</span>\n          <div className=\"flex items-center space-x-1\">\n            <div\n              className={`h-2 w-2 rounded-full ${status.isInstalled ? 'bg-green-500' : 'bg-gray-400'}`}\n            ></div>\n            <span className={status.isInstalled ? 'text-green-600' : 'text-gray-600'}>\n              {status.isInstalled ? 'Yes' : 'No'}\n            </span>\n          </div>\n        </div>\n\n        {/* Service Worker Status */}\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-gray-600 dark:text-gray-400\">Service Worker:</span>\n          <div className=\"flex items-center space-x-1\">\n            <div\n              className={`h-2 w-2 rounded-full ${status.hasServiceWorker ? 'bg-green-500' : 'bg-gray-400'}`}\n            ></div>\n            <span className={status.hasServiceWorker ? 'text-green-600' : 'text-gray-600'}>\n              {status.hasServiceWorker ? 'Active' : 'Disabled'}\n            </span>\n          </div>\n        </div>\n\n        {/* Cache Status */}\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-gray-600 dark:text-gray-400\">Cache:</span>\n          <span className=\"text-blue-600\">{status.cacheStatus}</span>\n        </div>\n      </div>\n\n      {/* PWA Features */}\n      <div className=\"mt-3 border-t border-gray-100 pt-3 dark:border-gray-700\">\n        <h4 className=\"mb-2 text-xs font-medium text-gray-700 dark:text-gray-300\">\n          Features Available:\n        </h4>\n        <div className=\"grid grid-cols-2 gap-1 text-xs\">\n          <div className=\"flex items-center space-x-1\">\n            <div className=\"h-2 w-2 rounded-full bg-green-500\"></div>\n            <span className=\"text-gray-600 dark:text-gray-400\">Offline Mode</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <div className=\"h-2 w-2 rounded-full bg-green-500\"></div>\n            <span className=\"text-gray-600 dark:text-gray-400\">Fast Loading</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <div className=\"h-2 w-2 rounded-full bg-green-500\"></div>\n            <span className=\"text-gray-600 dark:text-gray-400\">App Install</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <div className=\"h-2 w-2 rounded-full bg-green-500\"></div>\n            <span className=\"text-gray-600 dark:text-gray-400\">Background Sync</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Test Actions */}\n      <div className=\"mt-3 space-y-2 border-t border-gray-100 pt-3 dark:border-gray-700\">\n        <Button onClick={handleTestOffline} variant=\"primary\" size=\"sm\" className=\"w-full text-xs\">\n          Test Offline Mode\n        </Button>\n        <Button\n          onClick={handleClearCache}\n          variant=\"neutral-outline\"\n          size=\"sm\"\n          className=\"w-full text-xs\"\n        >\n          Clear Cache & Reload\n        </Button>\n      </div>\n\n      {/* Instructions */}\n      <div className=\"mt-3 border-t border-gray-100 pt-3 dark:border-gray-700\">\n        <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n          <strong>Install:</strong> Look for the install prompt or use browser menu → \"Install\n          Citizenly\"\n        </p>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/PWAStatus/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/SearchBar/SearchBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/SearchBar/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/SectoralBadges/SectoralBadges.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'key' is defined but never used. Allowed unused args must match /^_/u.","line":30,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\n\nimport type { SectoralInformation } from '@/types';\n\ninterface SectoralBadgesProps {\n  sectoral: SectoralInformation;\n  className?: string;\n}\n\n// Field labels mapping for human-readable display\nconst SECTORAL_FIELD_LABELS: Record<keyof SectoralInformation, string> = {\n  is_labor_force_employed: 'Labor Force Employed',\n  is_unemployed: 'Unemployed',\n  is_overseas_filipino_worker: 'OFW',\n  is_person_with_disability: 'PWD',\n  is_out_of_school_children: 'Out-of-School Children',\n  is_out_of_school_youth: 'Out-of-School Youth',\n  is_senior_citizen: 'Senior Citizen',\n  is_registered_senior_citizen: 'Registered Senior Citizen',\n  is_solo_parent: 'Solo Parent',\n  is_indigenous_people: 'Indigenous People',\n  is_migrant: 'Migrant',\n};\n\nexport default function SectoralBadges({ sectoral, className = '' }: SectoralBadgesProps) {\n  // Get all active (true) sectoral classifications\n  const activeBadges = Object.entries(sectoral)\n    .filter(([key, value]) => value === true)\n    .map(([key]) => key as keyof SectoralInformation)\n    .map(key => SECTORAL_FIELD_LABELS[key])\n    .filter(label => label); // Remove any undefined labels\n\n  if (activeBadges.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={`mt-2 flex flex-wrap gap-2 ${className}`}>\n      {activeBadges.map(label => (\n        <span\n          key={label}\n          className=\"inline-flex items-center rounded-full bg-blue-100 px-2.5 py-0.5 text-xs font-medium text-blue-800 dark:bg-blue-900 dark:text-blue-200\"\n        >\n          {label}\n        </span>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/SectoralBadges/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/SexDistributionPieChart/SexDistributionPieChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/SexDistributionPieChart/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/StatisticsChart/StatisticsChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChartType' is defined but never used.","line":8,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\n\nimport {\n  transformChartData,\n  getChartTitle,\n  type ChartType,\n  type DependencyData,\n  type SexData,\n  type CivilStatusData,\n  type EmploymentStatusData,\n} from '@/lib/charts';\n\nimport GenericPieChart from '../GenericPieChart/GenericPieChart';\n\ninterface BaseStatisticsChartProps {\n  title?: string;\n  className?: string;\n  variant?: 'default' | 'compact' | 'detailed';\n  intent?: 'primary' | 'secondary' | 'embedded';\n}\n\ntype StatisticsChartProps =\n  | ({ type: 'dependency'; data: DependencyData } & BaseStatisticsChartProps)\n  | ({ type: 'sex'; data: SexData } & BaseStatisticsChartProps)\n  | ({ type: 'civilStatus'; data: CivilStatusData } & BaseStatisticsChartProps)\n  | ({ type: 'employment'; data: EmploymentStatusData } & BaseStatisticsChartProps);\n\nexport default function StatisticsChart(props: StatisticsChartProps) {\n  const { type, data, title, className = '', variant = 'default', intent } = props;\n\n  const chartTitle = getChartTitle(type, title);\n  const chartData = transformChartData(type, data);\n\n  // Build semantic utility classes based on variant and intent\n  const getVariantClasses = () => {\n    const baseClasses = 'w-full';\n\n    switch (variant) {\n      case 'compact':\n        return `${baseClasses} max-w-3`;\n      case 'detailed':\n        return `${baseClasses} p-6 border border-zinc-100 dark:border-zinc-700 rounded-lg`;\n      default:\n        return baseClasses;\n    }\n  };\n\n  const getIntentClasses = () => {\n    switch (intent) {\n      case 'primary':\n        return 'bg-blue-50 dark:bg-blue-900/20';\n      case 'secondary':\n        return 'bg-pink-50 dark:bg-pink-900/20';\n      case 'embedded':\n        return 'bg-transparent';\n      default:\n        return '';\n    }\n  };\n\n  const semanticClasses = [getVariantClasses(), getIntentClasses(), className]\n    .filter(Boolean)\n    .join(' ');\n\n  return <GenericPieChart data={chartData} title={chartTitle} className={semanticClasses} />;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/StatisticsChart/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/StatsCard/StatsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/StatsCard/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/SuccessModal/SuccessModal.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/SuccessModal/SuccessModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/SuccessModal/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/ThemeToggle/ThemeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/ThemeToggle/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/VersionTag/VersionTag.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/VersionTag/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/molecules/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/CreateHouseholdModal/CreateHouseholdModal.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/CreateHouseholdModal/CreateHouseholdModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarangayData' is defined but never used.","line":37,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":23},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'userProfile'. Either include it or remove the dependency array.","line":246,"column":6,"nodeType":"ArrayExpression","endLine":246,"endColumn":59,"suggestions":[{"desc":"Update the dependencies array to be: [userProfile.barangay_code, userProfile.id, isOpen, userProfile]","fix":{"range":[8309,8362],"text":"[userProfile.barangay_code, userProfile.id, isOpen, userProfile]"}}]},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":256,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":256,"endColumn":72},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":437,"column":9,"nodeType":"CallExpression","messageId":"unexpected","endLine":437,"endColumn":62},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":454,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":454,"endColumn":63}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\n\nimport { useAuth } from '@/contexts';\nimport { supabase, logger, logError } from '@/lib';\nimport type { HouseholdModalFormData as HouseholdFormData } from '@/types/components';\n\nimport { Button } from '../../atoms';\nimport AccessibleModal from '../../molecules/AccessibleModal';\nimport { SelectField } from '../../molecules/FieldSet/SelectField';\n\ninterface CreateHouseholdModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onHouseholdCreated: (householdCode: string) => void;\n}\n\ninterface RegionData {\n  code: string;\n  name: string;\n}\n\ninterface ProvinceData {\n  code: string;\n  name: string;\n  psgc_regions: RegionData;\n}\n\ninterface CityMunicipalityData {\n  code: string;\n  name: string;\n  type: string;\n  psgc_provinces: ProvinceData;\n}\n\ninterface BarangayData {\n  code: string;\n  name: string;\n  psgc_cities_municipalities: CityMunicipalityData;\n}\n\ninterface AddressHierarchy {\n  barangay_code: string;\n  barangay_name?: string;\n  city_municipality_code: string | null;\n  city_municipality_name?: string;\n  city_municipality_type?: string;\n  province_code: string | null;\n  province_name?: string;\n  region_code: string | null;\n  region_name?: string;\n}\n\nexport default function CreateHouseholdModal({\n  isOpen,\n  onClose,\n  onHouseholdCreated,\n}: CreateHouseholdModalProps) {\n  const { userProfile } = useAuth();\n  const [formData, setFormData] = useState<HouseholdFormData>({\n    house_number: '',\n    street_id: '',\n    subdivision_id: '',\n  });\n  const [errors, setErrors] = useState<Partial<Record<keyof HouseholdFormData, string>>>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleInputChange = (field: keyof HouseholdFormData, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: undefined }));\n    }\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Partial<Record<keyof HouseholdFormData, string>> = {};\n\n    if (!formData.street_id.trim()) {\n      newErrors.street_id = 'Street is required';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const generateHouseholdCode = async (): Promise<string> => {\n    // Generate PSGC-compliant household code: RRPPMMBBB-SSSS-TTTT-HHHH\n    const barangayCode = userProfile?.barangay_code || '000000000';\n\n    // Get next household sequence number for this barangay\n    const { count } = await supabase\n      .from('households')\n      .select('*', { count: 'exact', head: true })\n      .eq('barangay_code', barangayCode);\n\n    const nextSequence = (count || 0) + 1;\n\n    // Format: RRPPMMBBB-SSSS-TTTT-HHHH\n    // RRPPMMBBB = Full barangay code (9 digits)\n    // SSSS = Subdivision (0000 = no subdivision)\n    // TTTT = Street (0001 = default street)\n    // HHHH = House sequence number\n    return `${barangayCode}-0000-0001-${nextSequence.toString().padStart(4, '0')}`;\n  };\n\n  const deriveGeographicCodes = (barangayCode: string) => {\n    // Extract geographic codes from barangay code\n    // Format: RRPPCCBBB where RR=region, PP=province, CC=city/municipality, BBB=barangay\n    if (barangayCode.length !== 9) return null;\n\n    const regionCode = barangayCode.substring(0, 2); // Just the first 2 digits\n    const provinceCode = barangayCode.substring(0, 4); // First 4 digits\n    const cityMunicipalityCode = barangayCode.substring(0, 6); // First 6 digits\n\n    return {\n      region_code: regionCode,\n      province_code: provinceCode,\n      city_municipality_code: cityMunicipalityCode,\n    };\n  };\n\n  const [addressDisplayInfo, setAddressDisplayInfo] = useState({\n    region: 'Loading...',\n    province: 'Loading...',\n    cityMunicipality: 'Loading...',\n    barangay: 'Loading...',\n  });\n\n  // Load address display info from database\n  const loadAddressDisplayInfo = async (barangayCode: string) => {\n    try {\n      logger.debug('Loading address display info', { barangayCode });\n\n      // Check if user is authenticated before making database queries\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n      if (!session) {\n        logger.debug('No active session, skipping address info load');\n        setAddressDisplayInfo({\n          region: 'Session required',\n          province: 'Session required',\n          cityMunicipality: 'Session required',\n          barangay: 'Session required',\n        });\n        return;\n      }\n\n      // Validate barangay code before querying\n      if (!barangayCode || barangayCode.trim() === '') {\n        logger.warn('Empty barangay code provided', { barangayCode });\n        setAddressDisplayInfo({\n          region: 'Region information not available',\n          province: 'Province information not available',\n          cityMunicipality: 'City/Municipality information not available',\n          barangay: 'Barangay information not available',\n        });\n        return;\n      }\n\n      // Use our API endpoint to get full address hierarchy (avoids complex nested query issues)\n      logger.debug('Querying PSGC lookup API for barangay', { barangayCode });\n      const response = await fetch(`/api/psgc/lookup?code=${encodeURIComponent(barangayCode)}`);\n\n      if (!response.ok) {\n        throw new Error(`API request failed: ${response.status}`);\n      }\n\n      const result = await response.json();\n      const barangayData = result.data;\n      const error = result.error;\n\n      if (error) {\n        logger.error('Error loading address display info', {\n          error: error?.message || 'Unknown error',\n          barangayCode,\n          errorCode: error?.code || 'Unknown code',\n          errorDetails: error?.details || 'No details',\n          fullError: JSON.stringify(error),\n        });\n        setAddressDisplayInfo({\n          region: 'Region information not available',\n          province: 'Province information not available',\n          cityMunicipality: 'City/Municipality information not available',\n          barangay: `Barangay ${barangayCode}`,\n        });\n        return;\n      }\n\n      if (barangayData) {\n        // API returns flattened structure\n        setAddressDisplayInfo({\n          region: barangayData.region_name || 'Region information not available',\n          province: barangayData.province_name || 'Province information not available',\n          cityMunicipality: barangayData.city_type\n            ? `${barangayData.city_name} (${barangayData.city_type})`\n            : barangayData.city_name || 'City/Municipality information not available',\n          barangay: barangayData.name || barangayData.barangay_name || `Barangay ${barangayCode}`,\n        });\n        logger.debug('Loaded address display info from database');\n      }\n    } catch (error) {\n      logger.error('Exception in loadAddressDisplayInfo', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        barangayCode,\n        errorType: typeof error,\n        fullError: JSON.stringify(error),\n      });\n      logError(error as Error, 'ADDRESS_INFO_LOAD_ERROR');\n      setAddressDisplayInfo({\n        region: 'Region information not available',\n        province: 'Province information not available',\n        cityMunicipality: 'City/Municipality information not available',\n        barangay: `Barangay ${barangayCode}`,\n      });\n    }\n  };\n\n  // Load address info when userProfile changes\n  useEffect(() => {\n    // Early exit if modal is not open to prevent unnecessary operations\n    if (!isOpen) {\n      return;\n    }\n\n    // Only attempt to load address info if user is properly authenticated and has profile\n    if (userProfile?.barangay_code && userProfile.id) {\n      loadAddressDisplayInfo(userProfile.barangay_code);\n    } else {\n      logger.debug('No barangay code or user ID in profile', {\n        hasBarangayCode: !!userProfile?.barangay_code,\n        hasUserId: !!userProfile?.id,\n        isModalOpen: isOpen,\n        userProfile,\n      });\n      // Set fallback info when no barangay code is available\n      setAddressDisplayInfo({\n        region: 'Authentication required',\n        province: 'Authentication required',\n        cityMunicipality: 'Authentication required',\n        barangay: 'Authentication required',\n      });\n    }\n  }, [userProfile?.barangay_code, userProfile?.id, isOpen]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    if (!userProfile?.barangay_code) {\n      alert('Unable to create household: No barangay assignment found');\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      logger.info('Creating household', { barangayCode: userProfile.barangay_code });\n\n      // Try to get address hierarchy info, fallback to direct table queries if view doesn't exist\n      let addressInfo: AddressHierarchy | null = null;\n\n      try {\n        logger.debug('Attempting to query psgc_address_hierarchy view');\n        const { data, error } = await supabase\n          .from('psgc_address_hierarchy')\n          .select('*')\n          .eq('barangay_code', userProfile.barangay_code)\n          .single();\n\n        if (error) {\n          logger.debug('View query error', { error });\n        } else {\n          logger.debug('View query successful', { hasData: !!data });\n          addressInfo = data;\n        }\n      } catch (viewError) {\n        logger.debug('Address hierarchy view not available, using direct queries', {\n          error: viewError,\n        });\n      }\n\n      // If view query failed, get address info from individual tables\n      if (!addressInfo) {\n        logger.debug('Using fallback query to get address info');\n        try {\n          // Use our API endpoint to get barangay info (avoids complex nested query issues)\n          logger.debug('Using PSGC lookup API for fallback query');\n          const response = await fetch(\n            `/api/psgc/lookup?code=${encodeURIComponent(userProfile.barangay_code)}`\n          );\n\n          let barangayData = null;\n          let barangayError = null;\n\n          if (!response.ok) {\n            barangayError = { message: `API request failed: ${response.status}` };\n            logger.error('Error fetching barangay info', { error: barangayError });\n            logger.debug('Fallback query failed, will use minimal data approach');\n          } else {\n            const result = await response.json();\n            barangayData = result.data;\n            barangayError = result.error;\n\n            if (barangayError) {\n              logger.error('Error fetching barangay info', { error: barangayError });\n              logger.debug('Fallback query failed, will use minimal data approach');\n            }\n          }\n\n          if (barangayData && !barangayError) {\n            logger.debug('Fallback query successful', { hasData: !!barangayData });\n\n            // Map the flattened API response data to expected format\n            addressInfo = {\n              barangay_code: barangayData.code || barangayData.barangay_code,\n              barangay_name: barangayData.name || barangayData.barangay_name,\n              city_municipality_code: barangayData.city_code,\n              city_municipality_name: barangayData.city_name,\n              city_municipality_type: barangayData.city_type,\n              province_code: barangayData.province_code,\n              province_name: barangayData.province_name,\n              region_code: barangayData.region_code,\n              region_name: barangayData.region_name,\n            };\n          }\n        } catch (fallbackError) {\n          logError(fallbackError as Error, 'FALLBACK_ADDRESS_QUERY_ERROR');\n        }\n      }\n\n      // If both queries failed, use minimal data approach\n      if (!addressInfo) {\n        logger.debug('Creating household with minimal data - no PSGC lookup needed');\n\n        // Final fallback - derive geographic codes from barangay code\n        const derivedCodes = deriveGeographicCodes(userProfile.barangay_code);\n        addressInfo = {\n          barangay_code: userProfile.barangay_code,\n          region_code: derivedCodes?.region_code || null,\n          province_code: derivedCodes?.province_code || null,\n          city_municipality_code: derivedCodes?.city_municipality_code || null,\n        };\n        logger.debug('Using minimal fallback data', { addressInfo });\n      }\n\n      logger.debug('Final address info', { addressInfo });\n\n      // Debug: Check current user and auth state\n      const {\n        data: { user },\n      } = await supabase.auth.getUser();\n      logger.debug('Authentication state', {\n        userId: user?.id,\n        profileId: userProfile.id,\n        barangayCode: userProfile.barangay_code,\n        authMatch: user?.id === userProfile.id,\n      });\n\n      // Test RLS policy by checking if user can query their own profile\n      const { data: testProfile, error: testProfileError } = await supabase\n        .from('auth_user_profiles')\n        .select('id, barangay_code, is_active, role_id')\n        .eq('id', user?.id)\n        .single();\n\n      logger.debug('User profile data', { hasProfile: !!testProfile, error: testProfileError });\n\n      // Check if user has proper role\n      if (testProfile?.role_id) {\n        const { data: roleData, error: roleError } = await supabase\n          .from('auth_roles')\n          .select('id, name')\n          .eq('id', testProfile.role_id)\n          .single();\n\n        logger.debug('User role data', { hasRole: !!roleData, error: roleError });\n      }\n\n      // Fix: If user is not active, make them active\n      if (testProfile && testProfile.is_active !== true) {\n        logger.info('User is not active, updating profile to active status');\n        const { error: updateError } = await supabase\n          .from('auth_user_profiles')\n          .update({ is_active: true })\n          .eq('id', user?.id);\n\n        if (updateError) {\n          logger.error('Failed to activate user', { error: updateError });\n        } else {\n          logger.info('User successfully activated');\n        }\n      }\n\n      // Use the actual user's barangay_code from the real profile data\n      const actualBarangayCode = testProfile?.barangay_code || userProfile.barangay_code;\n\n      // Derive geographic codes for the user's actual barangay\n      const actualDerivedCodes = deriveGeographicCodes(actualBarangayCode);\n      logger.debug('Derived geographic codes', { codes: actualDerivedCodes });\n\n      // Use the selected street and subdivision IDs directly\n      const streetId = formData.street_id;\n      const subdivisionId = formData.subdivision_id || null;\n\n      // Generate PSGC-compliant household code\n      const householdCode = await generateHouseholdCode();\n\n      // Create household record with proper schema fields\n      const householdData = {\n        code: householdCode,\n        house_number: formData.house_number.trim() || '1', // Default to '1' if empty since it's required\n        street_id: streetId, // Required UUID reference\n        subdivision_id: subdivisionId, // Optional UUID reference\n        barangay_code: actualBarangayCode,\n        city_municipality_code: actualDerivedCodes?.city_municipality_code,\n        province_code: actualDerivedCodes?.province_code,\n        region_code: actualDerivedCodes?.region_code,\n        created_by: userProfile.id,\n      };\n\n      logger.info('Creating household with data', { householdCode: householdData.code });\n\n      const { data, error } = await supabase\n        .from('households')\n        .insert([householdData])\n        .select('code, barangay_code, house_number')\n        .single();\n\n      if (error) {\n        logger.error('Error creating household', { error });\n        alert(`Failed to create household: ${error.message}`);\n        return;\n      }\n\n      logger.info('Household created successfully', { householdCode: data.code });\n      onHouseholdCreated(data.code);\n      onClose();\n\n      // Reset form\n      setFormData({\n        house_number: '',\n        street_id: '',\n        subdivision_id: '',\n      });\n      setErrors({});\n    } catch (error) {\n      logError(error as Error, 'HOUSEHOLD_CREATION_ERROR');\n      alert('An unexpected error occurred. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleClose = () => {\n    if (!isSubmitting) {\n      onClose();\n      // Reset form when closing\n      setFormData({\n        house_number: '',\n        street_id: '',\n        subdivision_id: '',\n      });\n      setErrors({});\n    }\n  };\n\n  return (\n    <AccessibleModal\n      isOpen={isOpen}\n      onClose={handleClose}\n      title=\"Create New Household\"\n      description=\"Create a new household for this resident in your assigned barangay\"\n      size=\"md\"\n      closeOnEscape={!isSubmitting}\n      closeOnBackdropClick={!isSubmitting}\n      showCloseButton={!isSubmitting}\n      footer={\n        <div className=\"flex gap-3\">\n          <Button\n            type=\"button\"\n            onClick={handleClose}\n            disabled={isSubmitting}\n            variant=\"neutral\"\n            size=\"regular\"\n            fullWidth\n          >\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            form=\"household-form\"\n            disabled={isSubmitting}\n            loading={isSubmitting}\n            variant=\"primary\"\n            size=\"regular\"\n            fullWidth\n          >\n            Create Household\n          </Button>\n        </div>\n      }\n    >\n      {/* Address Info Display */}\n      <div className=\"-m-4 mb-6 border-b border-green-200 bg-green-50 p-4\">\n        <div className=\"flex items-start gap-3\">\n          <span className=\"mt-0.5 text-green-600\">📍</span>\n          <div>\n            <h5 className=\"mb-2 font-medium text-green-800\">Household Location</h5>\n            <div className=\"space-y-1 text-sm text-green-700\">\n              <div>\n                <strong>Region:</strong> {addressDisplayInfo.region}\n              </div>\n              <div>\n                <strong>Province:</strong> {addressDisplayInfo.province}\n              </div>\n              <div>\n                <strong>City/Municipality:</strong> {addressDisplayInfo.cityMunicipality}\n              </div>\n              <div>\n                <strong>Barangay:</strong> {addressDisplayInfo.barangay}\n              </div>\n              <div className=\"mt-1 text-xs text-gray-500 dark:text-gray-500\">\n                Code: {userProfile?.barangay_code}\n              </div>\n              <div className=\"mt-2 text-xs text-green-600\">\n                All household geographic details are auto-populated from your barangay assignment.\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Form */}\n      <form id=\"household-form\" onSubmit={handleSubmit} className=\"space-y-4\">\n        {/* House Number */}\n        <div>\n          <label\n            htmlFor=\"house-number\"\n            className=\"font-montserrat mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            House/Block/Lot Number\n          </label>\n          <input\n            id=\"house-number\"\n            type=\"text\"\n            value={formData.house_number}\n            onChange={e => handleInputChange('house_number', e.target.value)}\n            placeholder=\"e.g., Blk 1 Lot 5, #123\"\n            className=\"font-montserrat w-full rounded-sm border border-gray-300 px-3 py-2 text-base focus:border-transparent focus:ring-2 focus:ring-blue-500 focus:outline-hidden\"\n            disabled={isSubmitting}\n          />\n        </div>\n\n        {/* Subdivision */}\n        <SelectField\n          label=\"Subdivision/Zone/Sitio/Purok\"\n          selectProps={{\n            placeholder: '🏘️ Select subdivision or create new',\n            options: [\n              { value: '', label: 'None' },\n              { value: 'zone1', label: 'Zone 1' },\n              { value: 'zone2', label: 'Zone 2' },\n              { value: 'purok1', label: 'Purok 1' },\n              { value: 'purok2', label: 'Purok 2' },\n            ],\n            value: formData.subdivision_id,\n            onSelect: option => handleInputChange('subdivision_id', option?.value || ''),\n            error: errors.subdivision_id,\n          }}\n          errorMessage={errors.subdivision_id}\n        />\n\n        {/* Street Name */}\n        <SelectField\n          label=\"Street Name *\"\n          required\n          selectProps={{\n            placeholder: '🛣️ Select street or create new',\n            options: [\n              { value: 'main_st', label: 'Main Street' },\n              { value: 'market_st', label: 'Market Street' },\n              { value: 'rizal_st', label: 'Rizal Street' },\n              { value: 'national_rd', label: 'National Road' },\n            ],\n            value: formData.street_id,\n            onSelect: option => handleInputChange('street_id', option?.value || ''),\n            error: errors.street_id,\n          }}\n          errorMessage={errors.street_id}\n        />\n\n        {/* Info Note */}\n        <div className=\"rounded border border-blue-200 bg-blue-50 p-4\">\n          <p className=\"font-montserrat text-sm text-gray-800 dark:text-gray-200\">\n            <strong>Note:</strong> This household will be created in your assigned barangay. You can\n            assign a resident as the household head after creating the household.\n          </p>\n        </div>\n      </form>\n    </AccessibleModal>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/CreateHouseholdModal/HouseholdAddressForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'errors' is defined but never used. Allowed unused args must match /^_/u.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":9}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * HouseholdAddressForm Component\n * Form fields for household address information\n */\n\nimport React from 'react';\n\n// TODO: Implement StreetSelector and SubdivisionSelector components\n// import StreetSelector from '../StreetSelector/StreetSelector';\n// import SubdivisionSelector from '../SubdivisionSelector/SubdivisionSelector';\nimport type { HouseholdModalFormData as HouseholdFormData } from '@/types/components';\n\ninterface HouseholdAddressFormProps {\n  formData: HouseholdFormData;\n  errors: Partial<Record<keyof HouseholdFormData, string>>;\n  isSubmitting: boolean;\n  onChange: (field: keyof HouseholdFormData, value: string) => void;\n}\n\nexport default function HouseholdAddressForm({\n  formData,\n  errors,\n  isSubmitting,\n  onChange,\n}: HouseholdAddressFormProps) {\n  return (\n    <div className=\"space-y-4\">\n      {/* House Number */}\n      <div>\n        <label\n          htmlFor=\"house-number\"\n          className=\"font-montserrat mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300\"\n        >\n          House/Block/Lot Number\n        </label>\n        <input\n          id=\"house-number\"\n          type=\"text\"\n          value={formData.house_number}\n          onChange={e => onChange('house_number', e.target.value)}\n          placeholder=\"e.g., Blk 1 Lot 5, #123\"\n          className=\"font-montserrat w-full rounded-sm border border-gray-300 px-3 py-2 text-base focus:border-transparent focus:ring-2 focus:ring-blue-500 focus:outline-hidden\"\n          disabled={isSubmitting}\n        />\n      </div>\n\n      {/* Subdivision */}\n      <div>\n        <label className=\"font-montserrat mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300\">\n          Subdivision/Zone/Sitio/Purok\n        </label>\n        {/* TODO: Replace with actual SubdivisionSelector component */}\n        <div className=\"rounded border border-gray-300 bg-gray-50 p-2 text-gray-500\">\n          SubdivisionSelector - Component not implemented yet\n        </div>\n      </div>\n\n      {/* Street Name */}\n      <div>\n        <label className=\"font-montserrat mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300\">\n          Street Name *\n        </label>\n        {/* TODO: Replace with actual StreetSelector component */}\n        <div className=\"rounded border border-gray-300 bg-gray-50 p-2 text-gray-500\">\n          StreetSelector - Component not implemented yet\n        </div>\n      </div>\n\n      {/* Info Note */}\n      <div className=\"rounded border border-blue-200 bg-blue-50 p-4\">\n        <p className=\"font-montserrat text-sm text-gray-800 dark:text-gray-200\">\n          <strong>Note:</strong> This household will be created in your assigned barangay. You can\n          assign a resident as the household head after creating the household.\n        </p>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/CreateHouseholdModal/HouseholdLocationInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/CreateHouseholdModal/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/DataTable/DataTable.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/DataTable/DataTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[169,172],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[169,172],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[248,251],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[248,251],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[273,276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[273,276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[500,503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[500,503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[829,832],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[829,832],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1657,1660],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1657,1660],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":164,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4728,4731],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4728,4731],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":356,"column":47,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":356,"endColumn":62,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[12746,12747],"text":"?."},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport Link from 'next/link';\nimport React, { useState, useMemo } from 'react';\n\nimport { Button } from '@/components';\n\nexport interface TableColumn<T = any> {\n  key: string;\n  title: string;\n  dataIndex?: keyof T | ((record: T) => any);\n  render?: (value: any, record: T, index: number) => React.ReactNode;\n  sortable?: boolean;\n  filterable?: boolean;\n  width?: string | number;\n  align?: 'left' | 'center' | 'right';\n  fixed?: 'left' | 'right';\n}\n\nexport interface TableAction<T = any> {\n  key: string;\n  label: string;\n  icon?: React.ReactNode;\n  onClick?: (record: T, index: number) => void;\n  href?: (record: T) => string;\n  visible?: (record: T) => boolean;\n  disabled?: (record: T) => boolean;\n  variant?: 'primary' | 'secondary' | 'danger' | 'success' | 'warning';\n}\n\nexport interface DataTableProps<T = any> {\n  data: T[];\n  columns: TableColumn<T>[];\n  actions?: TableAction<T>[];\n  loading?: boolean;\n  pagination?: {\n    current: number;\n    pageSize: number;\n    total: number;\n    onChange: (page: number, pageSize: number) => void;\n    showSizeChanger?: boolean;\n    pageSizeOptions?: string[];\n  };\n  selection?: {\n    selectedRowKeys: string[];\n    onChange: (selectedRowKeys: string[], selectedRows: T[]) => void;\n    getCheckboxProps?: (record: T) => { disabled?: boolean };\n  };\n  rowKey?: keyof T | ((record: T) => string);\n  onRow?: (\n    record: T,\n    index: number\n  ) => {\n    onClick?: () => void;\n    onDoubleClick?: () => void;\n    className?: string;\n  };\n  emptyText?: React.ReactNode;\n  className?: string;\n  size?: 'small' | 'middle' | 'large';\n}\n\nexport default function DataTable<T extends Record<string, any>>({\n  data,\n  columns,\n  actions = [],\n  loading = false,\n  pagination,\n  selection,\n  rowKey = 'id',\n  onRow,\n  emptyText = 'No data available',\n  className = '',\n  size = 'middle',\n}: DataTableProps<T>) {\n  const [sortField, setSortField] = useState<string>('');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\n\n  // Get row key\n  const getRowKey = (record: T, index: number): string => {\n    if (typeof rowKey === 'function') {\n      return rowKey(record);\n    }\n    return record[rowKey]?.toString() || index.toString();\n  };\n\n  // Handle sorting\n  const handleSort = (columnKey: string) => {\n    if (sortField === columnKey) {\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(columnKey);\n      setSortOrder('asc');\n    }\n  };\n\n  // Sort data\n  const sortedData = useMemo(() => {\n    if (!sortField) return data;\n\n    return [...data].sort((a, b) => {\n      const column = columns.find(col => col.key === sortField);\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (column?.dataIndex && typeof column.dataIndex === 'function') {\n        aValue = column.dataIndex(a);\n        bValue = column.dataIndex(b);\n      } else if (column?.dataIndex && typeof column.dataIndex === 'string') {\n        aValue = a[column.dataIndex];\n        bValue = b[column.dataIndex];\n      }\n\n      // Handle null/undefined values\n      if (aValue == null && bValue == null) return 0;\n      if (aValue == null) return sortOrder === 'asc' ? 1 : -1;\n      if (bValue == null) return sortOrder === 'asc' ? -1 : 1;\n\n      // Convert to strings for comparison\n      const aStr = aValue.toString().toLowerCase();\n      const bStr = bValue.toString().toLowerCase();\n\n      if (aStr < bStr) return sortOrder === 'asc' ? -1 : 1;\n      if (aStr > bStr) return sortOrder === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }, [data, sortField, sortOrder, columns]);\n\n  // Handle select all\n  const handleSelectAll = (checked: boolean) => {\n    if (!selection) return;\n\n    if (checked) {\n      const allKeys = sortedData.map((record, index) => getRowKey(record, index));\n      selection.onChange(allKeys, sortedData);\n    } else {\n      selection.onChange([], []);\n    }\n  };\n\n  // Handle single row selection\n  const handleRowSelect = (record: T, index: number, checked: boolean) => {\n    if (!selection) return;\n\n    const rowKeyValue = getRowKey(record, index);\n    let newSelectedKeys = [...selection.selectedRowKeys];\n    let newSelectedRows = sortedData.filter((item, idx) =>\n      selection.selectedRowKeys.includes(getRowKey(item, idx))\n    );\n\n    if (checked) {\n      newSelectedKeys.push(rowKeyValue);\n      newSelectedRows.push(record);\n    } else {\n      newSelectedKeys = newSelectedKeys.filter(key => key !== rowKeyValue);\n      newSelectedRows = newSelectedRows.filter(item => getRowKey(item, 0) !== rowKeyValue);\n    }\n\n    selection.onChange(newSelectedKeys, newSelectedRows);\n  };\n\n  // Get cell value\n  const getCellValue = (record: T, column: TableColumn<T>, index: number) => {\n    let value: any;\n\n    if (column.dataIndex) {\n      if (typeof column.dataIndex === 'function') {\n        value = column.dataIndex(record);\n      } else {\n        value = record[column.dataIndex];\n      }\n    } else {\n      value = record[column.key];\n    }\n\n    if (column.render) {\n      return column.render(value, record, index);\n    }\n\n    return value;\n  };\n\n  const sizeClasses = {\n    small: 'text-sm',\n    middle: 'text-base',\n    large: 'text-lg',\n  };\n\n  const paddingClasses = {\n    small: 'px-3 py-2',\n    middle: 'px-4 py-3',\n    large: 'px-6 py-4',\n  };\n\n  if (loading) {\n    return (\n      <div\n        className={`rounded-lg border border-gray-300 bg-white dark:border-gray-600 dark:bg-gray-800 ${className}`}\n      >\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"size-6 animate-spin rounded-full border-b-2 border-blue-600\"></div>\n            <span className=\"text-sm text-gray-600 dark:text-gray-400 dark:text-gray-600\">\n              Loading...\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={`overflow-hidden rounded-lg border border-gray-300 bg-white dark:border-gray-600 dark:bg-gray-800 ${className}`}\n    >\n      {/* Table */}\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y border-gray-300 dark:border-gray-600\">\n          {/* Header */}\n          <thead className=\"bg-gray-100 dark:bg-gray-700\">\n            <tr>\n              {/* Selection column */}\n              {selection && (\n                <th className={`${paddingClasses[size]} w-12`}>\n                  <input\n                    type=\"checkbox\"\n                    className=\"size-4 rounded-sm border-gray-300 bg-white text-gray-600 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-400 dark:text-gray-600\"\n                    checked={\n                      selection.selectedRowKeys.length === sortedData.length &&\n                      sortedData.length > 0\n                    }\n                    onChange={e => handleSelectAll(e.target.checked)}\n                  />\n                </th>\n              )}\n\n              {/* Data columns */}\n              {columns.map(column => (\n                <th\n                  key={column.key}\n                  className={`${paddingClasses[size]} text-left ${sizeClasses[size]} font-medium text-gray-600 dark:text-gray-400 ${\n                    column.sortable ? 'cursor-pointer hover:bg-gray-50 dark:bg-gray-700' : ''\n                  }`}\n                  style={{ width: column.width }}\n                  onClick={column.sortable ? () => handleSort(column.key) : undefined}\n                >\n                  <div className=\"flex items-center space-x-1\">\n                    <span>{column.title}</span>\n                    {column.sortable && (\n                      <div className=\"flex flex-col\">\n                        <svg\n                          className={`size-3 ${\n                            sortField === column.key && sortOrder === 'asc'\n                              ? 'text-gray-600 dark:text-gray-400'\n                              : 'text-gray-500 dark:text-gray-400 dark:text-gray-600'\n                          }`}\n                          fill=\"currentColor\"\n                          viewBox=\"0 0 20 20\"\n                        >\n                          <path d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" />\n                        </svg>\n                      </div>\n                    )}\n                  </div>\n                </th>\n              ))}\n\n              {/* Actions column */}\n              {actions.length > 0 && (\n                <th\n                  className={`${paddingClasses[size]} text-right ${sizeClasses[size]} font-medium text-gray-600 dark:text-gray-400`}\n                >\n                  Actions\n                </th>\n              )}\n            </tr>\n          </thead>\n\n          {/* Body */}\n          <tbody className=\"divide-y border-gray-300 bg-white dark:border-gray-600 dark:bg-gray-800\">\n            {sortedData.length === 0 ? (\n              <tr>\n                <td\n                  colSpan={columns.length + (selection ? 1 : 0) + (actions.length > 0 ? 1 : 0)}\n                  className=\"px-6 py-12 text-center text-gray-600 dark:text-gray-400 dark:text-gray-600\"\n                >\n                  {emptyText}\n                </td>\n              </tr>\n            ) : (\n              sortedData.map((record, index) => {\n                const rowKeyValue = getRowKey(record, index);\n                const rowProps = onRow?.(record, index) || {};\n                const isSelected = selection?.selectedRowKeys.includes(rowKeyValue) || false;\n\n                return (\n                  <tr\n                    key={rowKeyValue}\n                    className={`hover:bg-gray-50 dark:bg-gray-700 ${isSelected ? 'bg-blue-50 dark:bg-blue-900/20' : ''} ${rowProps.className || ''}`}\n                    onClick={rowProps.onClick}\n                    onDoubleClick={rowProps.onDoubleClick}\n                  >\n                    {/* Selection column */}\n                    {selection && (\n                      <td className={paddingClasses[size]}>\n                        <input\n                          type=\"checkbox\"\n                          className=\"size-4 rounded-sm border-gray-300 bg-white text-gray-600 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-400 dark:text-gray-600\"\n                          checked={isSelected}\n                          onChange={e => handleRowSelect(record, index, e.target.checked)}\n                          disabled={selection.getCheckboxProps?.(record)?.disabled}\n                        />\n                      </td>\n                    )}\n\n                    {/* Data columns */}\n                    {columns.map(column => (\n                      <td\n                        key={column.key}\n                        className={`${paddingClasses[size]} ${sizeClasses[size]} text-gray-600 dark:text-gray-400`}\n                        style={{ textAlign: column.align || 'left' }}\n                      >\n                        {getCellValue(record, column, index)}\n                      </td>\n                    ))}\n\n                    {/* Actions column */}\n                    {actions.length > 0 && (\n                      <td className={`${paddingClasses[size]} text-right`}>\n                        <div className=\"flex items-center justify-end space-x-2\">\n                          {actions\n                            .filter(action => action.visible?.(record) !== false)\n                            .map(action => {\n                              const isDisabled = action.disabled?.(record) || false;\n\n                              if (action.href) {\n                                return (\n                                  <Link\n                                    key={action.key}\n                                    href={action.href(record)}\n                                    className=\"inline-flex items-center px-3 py-1 text-sm font-medium text-gray-600 hover:text-gray-800 dark:text-gray-200 dark:text-gray-400\"\n                                  >\n                                    {action.icon && <span className=\"mr-1\">{action.icon}</span>}\n                                    {action.label}\n                                  </Link>\n                                );\n                              }\n\n                              return (\n                                <Button\n                                  key={action.key}\n                                  size=\"sm\"\n                                  variant={action.variant || 'secondary-outline'}\n                                  onClick={\n                                    action.onClick\n                                      ? () => action.onClick!(record, index)\n                                      : undefined\n                                  }\n                                  disabled={isDisabled}\n                                  leftIcon={action.icon}\n                                >\n                                  {action.label}\n                                </Button>\n                              );\n                            })}\n                        </div>\n                      </td>\n                    )}\n                  </tr>\n                );\n              })\n            )}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Pagination */}\n      {pagination && (\n        <div className=\"flex items-center justify-between border-t border-gray-300 bg-white px-4 py-3 dark:border-gray-600 dark:bg-gray-800\">\n          <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-400\">\n            <span>\n              Showing{' '}\n              {Math.min((pagination.current - 1) * pagination.pageSize + 1, pagination.total)} to{' '}\n              {Math.min(pagination.current * pagination.pageSize, pagination.total)} of{' '}\n              {pagination.total} results\n            </span>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              size=\"sm\"\n              variant=\"secondary-outline\"\n              onClick={() => pagination.onChange(pagination.current - 1, pagination.pageSize)}\n              disabled={pagination.current <= 1}\n            >\n              Previous\n            </Button>\n\n            <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Page {pagination.current} of {Math.ceil(pagination.total / pagination.pageSize)}\n            </span>\n\n            <Button\n              size=\"sm\"\n              variant=\"secondary-outline\"\n              onClick={() => pagination.onChange(pagination.current + 1, pagination.pageSize)}\n              disabled={pagination.current >= Math.ceil(pagination.total / pagination.pageSize)}\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/DataTable/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/DevLogin/DevLogin.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/DevLogin/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Household/HouseholdDetails/FormField/AddressDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Household/HouseholdDetails/FormField/GeographicLocation.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":40,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":10}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\n\nimport { SelectField } from '@/components/molecules/FieldSet';\nimport { useGeographicData } from '@/hooks/api/useGeographicData';\n\nimport { HouseholdDetailsData } from '../../types';\n\nexport interface GeographicLocationProps {\n  formData: HouseholdDetailsData;\n  onChange: (field: string, value: string | number | boolean | null) => void;\n  errors?: Record<string, string>;\n  mode?: 'create' | 'view' | 'edit';\n  className?: string;\n}\n\n/**\n * Geographic Location Form Fields Component\n *\n * Handles the administrative geographic hierarchy for households:\n * - Region\n * - Province\n * - City/Municipality\n * - Barangay\n */\nexport function GeographicLocation({\n  formData,\n  onChange,\n  errors,\n  mode = 'edit',\n  className = '',\n}: GeographicLocationProps) {\n  const isReadOnly = mode === 'view';\n\n  const {\n    regions,\n    provinces,\n    cities,\n    barangays,\n    loading,\n    error,\n    loadProvinces,\n    loadCities,\n    loadBarangays,\n    loadIndependentCities,\n  } = useGeographicData();\n\n  const handleFieldChange = (field: string) => (value: string | number | boolean | null) => {\n    onChange(field, value);\n\n    // Handle cascading selections\n    if (field === 'region_code') {\n      // Clear dependent fields\n      onChange('province_code', '');\n      onChange('city_municipality_code', '');\n      onChange('barangay_code', '');\n\n      if (value) {\n        // Load provinces or independent cities based on region\n        // NCR (code: '13') has independent cities, not provinces\n        if (value === '13') {\n          loadIndependentCities(value as string);\n        } else {\n          loadProvinces(value as string);\n        }\n      }\n    } else if (field === 'province_code') {\n      // Clear dependent fields\n      onChange('city_municipality_code', '');\n      onChange('barangay_code', '');\n\n      if (value) {\n        loadCities(value as string);\n      }\n    } else if (field === 'city_municipality_code') {\n      // Clear dependent fields\n      onChange('barangay_code', '');\n\n      if (value) {\n        loadBarangays(value as string);\n      }\n    }\n  };\n\n  // Load initial data based on existing form values\n  useEffect(() => {\n    if (formData.region_code) {\n      if (formData.region_code === '13') {\n        loadIndependentCities(formData.region_code);\n      } else {\n        loadProvinces(formData.region_code);\n      }\n\n      if (formData.province_code) {\n        loadCities(formData.province_code);\n\n        if (formData.city_municipality_code) {\n          loadBarangays(formData.city_municipality_code);\n        }\n      } else if (formData.city_municipality_code && formData.region_code === '13') {\n        // For NCR, load barangays directly from city\n        loadBarangays(formData.city_municipality_code);\n      }\n    }\n  }, [\n    formData.region_code,\n    formData.province_code,\n    formData.city_municipality_code,\n    loadProvinces,\n    loadCities,\n    loadBarangays,\n    loadIndependentCities,\n  ]);\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <div className=\"grid grid-cols-1 gap-3 md:grid-cols-2\">\n        {/* Region */}\n        <SelectField\n          label=\"Region\"\n          required\n          helperText=\"Choose the administrative region\"\n          errorMessage={errors?.region_code}\n          selectProps={{\n            name: 'region_code',\n            value: formData.region_code || '',\n            onSelect: option => handleFieldChange('region_code')(option?.value || ''),\n            placeholder: 'Select region...',\n            disabled: isReadOnly,\n            loading: loading.regions,\n            options: [{ value: '', label: 'Select region...' }, ...regions],\n          }}\n        />\n\n        {/* Province */}\n        <SelectField\n          label=\"Province\"\n          helperText=\"Choose the province (if applicable)\"\n          errorMessage={errors?.province_code}\n          selectProps={{\n            name: 'province_code',\n            value: formData.province_code || '',\n            onSelect: option => handleFieldChange('province_code')(option?.value || ''),\n            placeholder: 'Select province...',\n            disabled: isReadOnly || !formData.region_code || formData.region_code === '13',\n            loading: loading.provinces,\n            options: [\n              {\n                value: '',\n                label:\n                  formData.region_code === '13' ? 'N/A (Independent Cities)' : 'Select province...',\n              },\n              ...provinces,\n            ],\n          }}\n        />\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-3 md:grid-cols-2\">\n        {/* City/Municipality */}\n        <SelectField\n          label=\"City/Municipality\"\n          required\n          helperText=\"Choose the city or municipality\"\n          errorMessage={errors?.city_municipality_code}\n          selectProps={{\n            name: 'city_municipality_code',\n            value: formData.city_municipality_code || '',\n            onSelect: option => handleFieldChange('city_municipality_code')(option?.value || ''),\n            placeholder: 'Select city/municipality...',\n            disabled:\n              isReadOnly ||\n              !formData.region_code ||\n              (!formData.province_code && formData.region_code !== '13'),\n            loading: loading.cities,\n            options: [{ value: '', label: 'Select city/municipality...' }, ...cities],\n          }}\n        />\n\n        {/* Barangay */}\n        <SelectField\n          label=\"Barangay\"\n          required\n          helperText=\"Choose the barangay\"\n          errorMessage={errors?.barangay_code}\n          selectProps={{\n            name: 'barangay_code',\n            value: formData.barangay_code || '',\n            onSelect: option => handleFieldChange('barangay_code')(option?.value || ''),\n            placeholder: 'Select barangay...',\n            disabled: isReadOnly || !formData.city_municipality_code,\n            loading: loading.barangays,\n            options: [{ value: '', label: 'Select barangay...' }, ...barangays],\n          }}\n        />\n      </div>\n\n      {/* Helper Text for Geographic Hierarchy */}\n      <div className=\"bg-info/5 border-info/20 rounded-md border p-3\">\n        <div>\n          <p className=\"mb-1.5 font-medium text-zinc-900 dark:text-zinc-100\">\n            Geographic Hierarchy Information:\n          </p>\n          <p className=\"text-sm text-zinc-500 dark:text-zinc-400\">\n            Select the geographic location from the highest level (Region) down to the specific\n            Barangay. Each selection will filter the options for the next level.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Household/HouseholdDetails/FormField/HouseholdStatistics.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleFieldChange' is assigned a value but never used.","line":32,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport { InputField } from '@/components/molecules/FieldSet';\n\nimport { HouseholdDetailsData } from '../../types';\n\nexport interface HouseholdStatisticsProps {\n  formData: HouseholdDetailsData;\n  onChange: (field: string, value: string | number | boolean | null) => void;\n  errors?: Record<string, string>;\n  mode?: 'create' | 'view' | 'edit';\n  className?: string;\n}\n\n/**\n * Household Statistics Form Fields Component\n *\n * Handles the numerical statistics for households:\n * - Number of families\n * - Number of household members\n * - Number of migrants\n */\nexport function HouseholdStatistics({\n  formData,\n  onChange,\n  errors,\n  mode = 'edit',\n  className = '',\n}: HouseholdStatisticsProps) {\n  const isReadOnly = mode === 'view';\n\n  const handleFieldChange = (field: string) => (value: string | number | boolean | null) => {\n    onChange(field, value);\n  };\n\n  const handleNumberChange = (field: string) => (value: string | number | boolean | null) => {\n    // Convert string to number for numeric fields\n    const numericValue = typeof value === 'string' ? parseInt(value, 10) || 0 : value;\n    onChange(field, numericValue);\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <div className=\"grid grid-cols-1 gap-3 md:grid-cols-3\">\n        {/* Number of Families */}\n        <InputField\n          label=\"Number of Families\"\n          helperText=\"Total families in this household\"\n          errorMessage={errors?.no_of_families}\n          inputProps={{\n            name: 'no_of_families',\n            type: 'number',\n            value: formData.no_of_families?.toString() || '1',\n            onChange: (e: React.ChangeEvent<HTMLInputElement>) =>\n              handleNumberChange('no_of_families')(e.target.value),\n            readOnly: isReadOnly,\n            placeholder: '1',\n            min: 1,\n            max: 50,\n          }}\n        />\n\n        {/* Number of Household Members */}\n        <InputField\n          label=\"Household Members\"\n          helperText=\"Total people living in household\"\n          errorMessage={errors?.no_of_household_members}\n          inputProps={{\n            name: 'no_of_household_members',\n            type: 'number',\n            value: formData.no_of_household_members?.toString() || '0',\n            onChange: (e: React.ChangeEvent<HTMLInputElement>) =>\n              handleNumberChange('no_of_household_members')(e.target.value),\n            readOnly: isReadOnly,\n            placeholder: '0',\n            min: 0,\n            max: 100,\n          }}\n        />\n\n        {/* Number of Migrants */}\n        <InputField\n          label=\"Number of Migrants\"\n          helperText=\"Household members who are migrants\"\n          errorMessage={errors?.no_of_migrants}\n          inputProps={{\n            name: 'no_of_migrants',\n            type: 'number',\n            value: formData.no_of_migrants?.toString() || '0',\n            onChange: (e: React.ChangeEvent<HTMLInputElement>) =>\n              handleNumberChange('no_of_migrants')(e.target.value),\n            readOnly: isReadOnly,\n            placeholder: '0',\n            min: 0,\n            max: 100,\n          }}\n        />\n      </div>\n\n      {/* Statistics Information Panel */}\n      <div className=\"bg-info/5 border-info/20 rounded-md border p-3\">\n        <div>\n          <p className=\"mb-2 font-medium text-zinc-900 dark:text-zinc-100\">\n            Household Statistics Guidelines:\n          </p>\n          <ul className=\"space-y-2 text-xs\">\n            <li className=\"flex items-start\">\n              <span className=\"mr-2\">•</span>\n              <span>\n                <strong>Families:</strong> Count each family unit living in the household (minimum\n                1)\n              </span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"mr-2\">•</span>\n              <span>\n                <strong>Members:</strong> Total number of people who regularly live in this\n                household\n              </span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"mr-2\">•</span>\n              <span>\n                <strong>Migrants:</strong> Household members who moved from another location\n              </span>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      {/* Validation Summary */}\n      {(formData.no_of_migrants || 0) > (formData.no_of_household_members || 0) && (\n        <div className=\"bg-warning/5 border-warning/20 rounded-md border p-3\">\n          <div>\n            <p className=\"font-medium text-yellow-600 dark:text-yellow-400\">\n              ⚠️ Data Validation Warning\n            </p>\n            <p className=\"mt-1.5 text-sm text-zinc-500 dark:text-zinc-400\">\n              Number of migrants ({formData.no_of_migrants}) cannot exceed the total household\n              members ({formData.no_of_household_members}).\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Household/HouseholdDetails/FormField/HouseholdTypeInformation.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2413,2416],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2413,2416],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport { InputField, SelectField } from '@/components';\nimport type { FormMode } from '@/types';\n\nexport interface HouseholdTypeInformationData {\n  householdType: string;\n  tenureStatus: string;\n  tenureOthersSpecify: string;\n  householdUnit: string;\n  householdName: string;\n}\n\nexport interface HouseholdTypeInformationProps {\n  /** Form mode - determines if field is editable or read-only */\n  mode?: FormMode;\n  value: HouseholdTypeInformationData;\n  onChange: (value: HouseholdTypeInformationData) => void;\n  errors: Record<string, string>;\n  className?: string;\n}\n\n// Household Type Options\nconst HOUSEHOLD_TYPE_OPTIONS = [\n  { value: '', label: 'Select household type' },\n  { value: 'nuclear', label: 'Nuclear Family' },\n  { value: 'single_parent', label: 'Single Parent' },\n  { value: 'extended', label: 'Extended Family' },\n  { value: 'childless', label: 'Childless' },\n  { value: 'one_person', label: 'One Person' },\n  { value: 'non_family', label: 'Non-Family' },\n  { value: 'other', label: 'Other' },\n];\n\n// Tenure Status Options\nconst TENURE_STATUS_OPTIONS = [\n  { value: '', label: 'Select tenure status' },\n  { value: 'owned', label: 'Owned' },\n  { value: 'owned_with_mortgage', label: 'Owned with Mortgage' },\n  { value: 'rented', label: 'Rented' },\n  { value: 'occupied_for_free', label: 'Occupied for Free' },\n  { value: 'occupied_without_consent', label: 'Occupied without Consent' },\n  { value: 'others', label: 'Others' },\n];\n\n// Household Unit Options\nconst HOUSEHOLD_UNIT_OPTIONS = [\n  { value: '', label: 'Select household unit' },\n  { value: 'single_house', label: 'Single House' },\n  { value: 'duplex', label: 'Duplex' },\n  { value: 'apartment', label: 'Apartment' },\n  { value: 'townhouse', label: 'Townhouse' },\n  { value: 'condominium', label: 'Condominium' },\n  { value: 'boarding_house', label: 'Boarding House' },\n  { value: 'institutional', label: 'Institutional' },\n  { value: 'makeshift', label: 'Makeshift' },\n  { value: 'others', label: 'Others' },\n];\n\nexport function HouseholdTypeInformation({\n  mode = 'create',\n  value,\n  onChange,\n  errors,\n  className = '',\n}: HouseholdTypeInformationProps) {\n  const handleChange = (field: keyof HouseholdTypeInformationData, fieldValue: string) => {\n    onChange({\n      ...value,\n      [field]: fieldValue,\n    });\n  };\n\n  const handleSelectChange = (field: keyof HouseholdTypeInformationData) => (option: any) => {\n    handleChange(field, option?.value || '');\n  };\n\n  // Show tenure others specify field when 'others' is selected\n  const showTenureOthersSpecify = value.tenureStatus === 'others';\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <div>\n        <h4 className=\"text-lg font-medium text-gray-800 dark:text-gray-200\">\n          Household Type Information\n        </h4>\n        <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">\n          Classification and structural details of the household.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-2 lg:grid-cols-3\">\n        {/* Household Type */}\n        <SelectField\n          label=\"Household Type\"\n          required\n          labelSize=\"sm\"\n          errorMessage={errors.householdType}\n          mode={mode}\n          selectProps={{\n            options: HOUSEHOLD_TYPE_OPTIONS,\n            value: value.householdType,\n            onSelect: handleSelectChange('householdType'),\n            placeholder: 'Select household type',\n          }}\n        />\n\n        {/* Tenure Status */}\n        <SelectField\n          label=\"Tenure Status\"\n          required\n          labelSize=\"sm\"\n          errorMessage={errors.tenureStatus}\n          mode={mode}\n          selectProps={{\n            options: TENURE_STATUS_OPTIONS,\n            value: value.tenureStatus,\n            onSelect: handleSelectChange('tenureStatus'),\n            placeholder: 'Select tenure status',\n          }}\n        />\n\n        {/* Tenure Others Specify - Only show when 'others' is selected */}\n        {showTenureOthersSpecify && (\n          <InputField\n            label=\"Tenure Status (Others)\"\n            required\n            labelSize=\"sm\"\n            errorMessage={errors.tenureOthersSpecify}\n            mode={mode}\n            inputProps={{\n              value: value.tenureOthersSpecify,\n              onChange: e => handleChange('tenureOthersSpecify', e.target.value),\n              placeholder: 'Please specify tenure status',\n              error: errors.tenureOthersSpecify,\n            }}\n          />\n        )}\n\n        {/* Household Unit */}\n        <SelectField\n          label=\"Household Unit\"\n          required\n          labelSize=\"sm\"\n          errorMessage={errors.householdUnit}\n          mode={mode}\n          selectProps={{\n            options: HOUSEHOLD_UNIT_OPTIONS,\n            value: value.householdUnit,\n            onSelect: handleSelectChange('householdUnit'),\n            placeholder: 'Select household unit',\n          }}\n        />\n\n        {/* Household Name */}\n        <div className={showTenureOthersSpecify ? 'sm:col-span-2' : 'sm:col-span-1'}>\n          <InputField\n            label=\"Household Name\"\n            required\n            labelSize=\"sm\"\n            errorMessage={errors.householdName}\n            mode={mode}\n            inputProps={{\n              value: value.householdName,\n              onChange: e => handleChange('householdName', e.target.value),\n              placeholder: 'Enter household name',\n              error: errors.householdName,\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default HouseholdTypeInformation;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Household/HouseholdDetails/FormField/IncomeAndHeadInformation.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1978,1981],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1978,1981],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport { InputField, SelectField } from '@/components';\nimport type { FormMode } from '@/types';\n\nexport interface IncomeAndHeadInformationData {\n  monthlyIncome: number;\n  householdHeadId: string;\n  householdHeadPosition: string;\n}\n\nexport interface IncomeAndHeadInformationProps {\n  /** Form mode - determines if field is editable or read-only */\n  mode?: FormMode;\n  value: IncomeAndHeadInformationData;\n  onChange: (value: IncomeAndHeadInformationData) => void;\n  errors: Record<string, string>;\n  className?: string;\n  // Head of family options (residents who can be heads)\n  householdHeadOptions?: Array<{ value: string; label: string }>;\n  householdHeadsLoading?: boolean;\n}\n\n// Household Head Position Options\nconst HOUSEHOLD_HEAD_POSITION_OPTIONS = [\n  { value: '', label: 'Select position' },\n  { value: 'father', label: 'Father' },\n  { value: 'mother', label: 'Mother' },\n  { value: 'son', label: 'Son' },\n  { value: 'daughter', label: 'Daughter' },\n  { value: 'grandmother', label: 'Grandmother' },\n  { value: 'grandfather', label: 'Grandfather' },\n  { value: 'father_in_law', label: 'Father-in-law' },\n  { value: 'mother_in_law', label: 'Mother-in-law' },\n  { value: 'brother_in_law', label: 'Brother-in-law' },\n  { value: 'sister_in_law', label: 'Sister-in-law' },\n  { value: 'spouse', label: 'Spouse' },\n  { value: 'sibling', label: 'Sibling' },\n  { value: 'guardian', label: 'Guardian' },\n  { value: 'ward', label: 'Ward' },\n  { value: 'other', label: 'Other' },\n];\n\nexport function IncomeAndHeadInformation({\n  mode = 'create',\n  value,\n  onChange,\n  errors,\n  className = '',\n  householdHeadOptions = [],\n  householdHeadsLoading = false,\n}: IncomeAndHeadInformationProps) {\n  const handleChange = (field: keyof IncomeAndHeadInformationData, fieldValue: string | number) => {\n    onChange({\n      ...value,\n      [field]: fieldValue,\n    });\n  };\n\n  const handleSelectChange = (field: keyof IncomeAndHeadInformationData) => (option: any) => {\n    handleChange(field, option?.value || '');\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <div>\n        <h4 className=\"text-lg font-medium text-gray-800 dark:text-gray-200\">\n          Income & Head of Family\n        </h4>\n        <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">\n          Household income and head of family information.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-2 lg:grid-cols-3\">\n        {/* Monthly Income */}\n        <InputField\n          label=\"Monthly Income (PHP)\"\n          required\n          labelSize=\"sm\"\n          errorMessage={errors.monthlyIncome}\n          mode={mode}\n          inputProps={{\n            type: 'number',\n            min: 0,\n            step: '0.01',\n            value: value.monthlyIncome,\n            onChange: e => handleChange('monthlyIncome', parseFloat(e.target.value) || 0),\n            placeholder: 'Enter monthly income',\n            error: errors.monthlyIncome,\n          }}\n        />\n\n        {/* Head of Family */}\n        <SelectField\n          label=\"Head of Family\"\n          labelSize=\"sm\"\n          errorMessage={errors.householdHeadId}\n          mode={mode}\n          selectProps={{\n            options: householdHeadOptions,\n            value: value.householdHeadId,\n            onSelect: handleSelectChange('householdHeadId'),\n            placeholder: householdHeadsLoading\n              ? 'Loading household members...'\n              : 'Select head of family',\n            loading: householdHeadsLoading,\n          }}\n        />\n\n        {/* Head Position */}\n        <SelectField\n          label=\"Head Position\"\n          required\n          labelSize=\"sm\"\n          errorMessage={errors.householdHeadPosition}\n          mode={mode}\n          selectProps={{\n            options: HOUSEHOLD_HEAD_POSITION_OPTIONS,\n            value: value.householdHeadPosition,\n            onSelect: handleSelectChange('householdHeadPosition'),\n            placeholder: 'Select head position',\n          }}\n        />\n      </div>\n\n      {/* Income Guidelines */}\n      <div className=\"rounded-md bg-green-50 p-3 dark:bg-green-900/20\">\n        <div className=\"text-sm text-green-700 dark:text-green-300\">\n          <p className=\"mb-1 font-medium\">Income Guidelines:</p>\n          <ul className=\"list-inside list-disc space-y-1 text-xs\">\n            <li>\n              <strong>Monthly Income:</strong> Total household income per month in Philippine Peso\n              (PHP)\n            </li>\n            <li>\n              <strong>Head of Family:</strong> Primary decision-maker and income provider (if\n              applicable)\n            </li>\n            <li>\n              <strong>Head Position:</strong> Relationship of the head to other household members\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default IncomeAndHeadInformation;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Household/HouseholdDetails/HouseholdDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Household/HouseholdDetails/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Household/HouseholdForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Household/LocationAndDemographics/FormField/AddressInformation.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2689,2692],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2689,2692],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2899,2902],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2899,2902],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3117,3120],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3117,3120],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3327,3330],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3327,3330],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":155,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4881,4884],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4881,4884],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":172,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5417,5420],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5417,5420],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport { InputField, SelectField } from '@/components';\nimport { useStreetsSearch } from '@/hooks/search/useStreetsSearch';\nimport { useSubdivisionsSearch } from '@/hooks/search/useSubdivisionsSearch';\nimport type { FormMode } from '@/types';\n\nexport interface AddressInformationData {\n  houseNumber: string;\n  streetId: string; // Changed from streetName to streetId (UUID)\n  subdivisionId: string; // Changed from subdivisionName to subdivisionId (UUID)\n  barangayCode: string;\n  cityMunicipalityCode: string;\n  provinceCode: string;\n  regionCode: string;\n}\n\nexport interface AddressInformationProps {\n  /** Form mode - determines if field is editable or read-only */\n  mode?: FormMode;\n  value: AddressInformationData;\n  onChange: (value: AddressInformationData) => void;\n  errors: Record<string, string>;\n  className?: string;\n  // Location options (streets and subdivisions will be fetched automatically)\n  regionOptions?: Array<{ value: string; label: string }>;\n  provinceOptions?: Array<{ value: string; label: string }>;\n  cityOptions?: Array<{ value: string; label: string }>;\n  barangayOptions?: Array<{ value: string; label: string }>;\n  // Loading states (streets and subdivisions will be handled automatically)\n  regionsLoading?: boolean;\n  provincesLoading?: boolean;\n  citiesLoading?: boolean;\n  barangaysLoading?: boolean;\n  // Search handlers\n  onRegionChange?: (regionCode: string) => void;\n  onProvinceChange?: (provinceCode: string) => void;\n  onCityChange?: (cityCode: string) => void;\n  onBarangayChange?: (barangayCode: string) => void;\n}\n\nexport function AddressInformation({\n  mode = 'create',\n  value,\n  onChange,\n  errors,\n  className = '',\n  regionOptions = [],\n  provinceOptions = [],\n  cityOptions = [],\n  barangayOptions = [],\n  regionsLoading = false,\n  provincesLoading = false,\n  citiesLoading = false,\n  barangaysLoading = false,\n  onRegionChange,\n  onProvinceChange,\n  onCityChange,\n  onBarangayChange,\n}: AddressInformationProps) {\n  // Fetch subdivisions based on selected barangay\n  const { subdivisions: subdivisionOptions, loading: subdivisionsLoading } = useSubdivisionsSearch({\n    barangayCode: value.barangayCode,\n    enabled: !!value.barangayCode,\n  });\n\n  // Fetch streets based on selected barangay and subdivision\n  const { streets: streetOptions, loading: streetsLoading } = useStreetsSearch({\n    barangayCode: value.barangayCode,\n    subdivisionId: value.subdivisionId,\n    enabled: !!value.barangayCode,\n  });\n\n  const handleChange = (field: keyof AddressInformationData, fieldValue: string) => {\n    onChange({\n      ...value,\n      [field]: fieldValue,\n    });\n  };\n\n  const handleRegionSelect = (option: any) => {\n    const regionCode = option?.value || '';\n    handleChange('regionCode', regionCode);\n    if (onRegionChange) {\n      onRegionChange(regionCode);\n    }\n  };\n\n  const handleProvinceSelect = (option: any) => {\n    const provinceCode = option?.value || '';\n    handleChange('provinceCode', provinceCode);\n    if (onProvinceChange) {\n      onProvinceChange(provinceCode);\n    }\n  };\n\n  const handleCitySelect = (option: any) => {\n    const cityCode = option?.value || '';\n    handleChange('cityMunicipalityCode', cityCode);\n    if (onCityChange) {\n      onCityChange(cityCode);\n    }\n  };\n\n  const handleBarangaySelect = (option: any) => {\n    const barangayCode = option?.value || '';\n    handleChange('barangayCode', barangayCode);\n    // Clear dependent fields when barangay changes\n    if (barangayCode !== value.barangayCode) {\n      handleChange('subdivisionId', '');\n      handleChange('streetId', '');\n    }\n    if (onBarangayChange) {\n      onBarangayChange(barangayCode);\n    }\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <div>\n        <h4 className=\"text-lg font-medium text-gray-800 dark:text-gray-200\">\n          Address Information\n        </h4>\n        <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">\n          Complete household address with geographic information.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-2 lg:grid-cols-3\">\n        {/* House Number */}\n        <InputField\n          label=\"House Number\"\n          required\n          labelSize=\"sm\"\n          errorMessage={errors.houseNumber}\n          mode={mode}\n          inputProps={{\n            value: value.houseNumber,\n            onChange: e => handleChange('houseNumber', e.target.value),\n            placeholder: 'Enter house number',\n            error: errors.houseNumber,\n          }}\n        />\n\n        {/* Street Name */}\n        <SelectField\n          label=\"Street Name\"\n          required\n          labelSize=\"sm\"\n          errorMessage={errors.streetId}\n          mode={mode}\n          selectProps={{\n            options: streetOptions,\n            value: value.streetId,\n            onSelect: (option: any) => {\n              handleChange('streetId', option?.value || '');\n            },\n            placeholder: streetsLoading ? 'Loading streets...' : 'Select street',\n            loading: streetsLoading,\n            disabled: !value.barangayCode,\n          }}\n        />\n\n        {/* Subdivision */}\n        <SelectField\n          label=\"Subdivision\"\n          labelSize=\"sm\"\n          mode={mode}\n          selectProps={{\n            options: subdivisionOptions,\n            value: value.subdivisionId,\n            onSelect: (option: any) => {\n              const newSubdivisionId = option?.value || '';\n              handleChange('subdivisionId', newSubdivisionId);\n              // Clear street when subdivision changes\n              if (newSubdivisionId !== value.subdivisionId) {\n                handleChange('streetId', '');\n              }\n            },\n            placeholder: subdivisionsLoading\n              ? 'Loading subdivisions...'\n              : 'Select subdivision (optional)',\n            loading: subdivisionsLoading,\n            disabled: !value.barangayCode,\n          }}\n        />\n\n        {/* Barangay */}\n        <SelectField\n          label=\"Barangay\"\n          required\n          labelSize=\"sm\"\n          errorMessage={errors.barangayCode}\n          mode={mode}\n          selectProps={{\n            options: barangayOptions,\n            value: value.barangayCode,\n            onSelect: handleBarangaySelect,\n            placeholder: barangaysLoading ? 'Loading barangays...' : 'Select barangay',\n            loading: barangaysLoading,\n            disabled: !value.cityMunicipalityCode,\n          }}\n        />\n\n        {/* City/Municipality */}\n        <SelectField\n          label=\"City/Municipality\"\n          required\n          labelSize=\"sm\"\n          errorMessage={errors.cityMunicipalityCode}\n          mode={mode}\n          selectProps={{\n            options: cityOptions,\n            value: value.cityMunicipalityCode,\n            onSelect: handleCitySelect,\n            placeholder: citiesLoading ? 'Loading cities...' : 'Select city/municipality',\n            loading: citiesLoading,\n            disabled: !value.provinceCode,\n          }}\n        />\n\n        {/* Province */}\n        <SelectField\n          label=\"Province\"\n          required\n          labelSize=\"sm\"\n          errorMessage={errors.provinceCode}\n          mode={mode}\n          selectProps={{\n            options: provinceOptions,\n            value: value.provinceCode,\n            onSelect: handleProvinceSelect,\n            placeholder: provincesLoading ? 'Loading provinces...' : 'Select province',\n            loading: provincesLoading,\n            disabled: !value.regionCode,\n          }}\n        />\n\n        {/* Region */}\n        <SelectField\n          label=\"Region\"\n          required\n          labelSize=\"sm\"\n          errorMessage={errors.regionCode}\n          mode={mode}\n          selectProps={{\n            options: regionOptions,\n            value: value.regionCode,\n            onSelect: handleRegionSelect,\n            placeholder: regionsLoading ? 'Loading regions...' : 'Select region',\n            loading: regionsLoading,\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default AddressInformation;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Household/LocationAndDemographics/FormField/DemographicsInformation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Household/LocationAndDemographics/LocationAndDemographics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Household/LocationAndDemographics/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Household/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Household/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/ContactInformation/ContactInformation.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[753,756],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[753,756],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[780,783],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[780,783],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2331,2334],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2331,2334],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback } from 'react';\n\nimport type { FormMode } from '@/types';\n\nimport { ContactDetails, ContactDetailsData } from './FormField/ContactDetails';\nimport { HouseholdInformation, HouseholdInformationData } from './FormField/HouseholdInformation';\n\nexport interface ContactInformationFormProps {\n  /** Form mode - determines if field is editable or read-only */\n  mode?: FormMode;\n  formData: {\n    email?: string;\n    telephone_number?: string;\n    mobile_number?: string;\n    household_code?: string;\n    household_name?: string;\n  };\n  onChange: (field: string, value: string | number | boolean | null) => void;\n  errors: Record<string, string>;\n  // Household search functionality\n  onHouseholdSearch?: (query: string) => Promise<any>;\n  householdOptions?: any[];\n  householdLoading?: boolean;\n}\n\nexport function ContactInformationForm({\n  mode = 'create',\n  formData,\n  onChange,\n  errors,\n  onHouseholdSearch,\n  householdOptions = [],\n  householdLoading = false,\n}: ContactInformationFormProps) {\n  // Map form data to ContactDetails component props\n  const contactDetailsValue: ContactDetailsData = {\n    email: formData.email ?? '',\n    telephone_number: formData.telephone_number ?? '',\n    mobile_number: formData.mobile_number ?? '',\n  };\n\n  // Map form data to HouseholdInformation component props\n  const householdInfoValue: HouseholdInformationData = {\n    household_code: formData.household_code || '',\n    household_name: formData.household_name || '',\n  };\n\n  // Handle changes from ContactDetails component\n  const handleContactDetailsChange = useCallback(\n    (value: ContactDetailsData) => {\n      // Only update the fields that actually changed\n      // Compare with current formData to determine what changed\n      Object.entries(value).forEach(([field, fieldValue]) => {\n        const currentValue = formData[field as keyof typeof formData];\n        if (currentValue !== fieldValue) {\n          onChange(field as keyof typeof value, fieldValue);\n        }\n      });\n    },\n    [onChange, formData]\n  );\n\n  // Handle changes from HouseholdInformation component\n  const handleHouseholdInfoChange = useCallback(\n    (value: HouseholdInformationData) => {\n      // Call onChange with a special marker to indicate this is a household batch update\n      onChange('__household_batch__', value as any);\n    },\n    [onChange]\n  );\n\n  return (\n    <div className=\"rounded-lg border border-gray-300 bg-white p-6 shadow-xs dark:border-gray-600 dark:bg-gray-800\">\n      <div className=\"space-y-6\">\n        <div>\n          <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200\">\n            Contact Information\n          </h2>\n          <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">\n            Contact details and household assignment information.\n          </p>\n        </div>\n\n        <div className=\"space-y-8\">\n          {/* Contact Details */}\n          <ContactDetails\n            value={contactDetailsValue}\n            onChange={handleContactDetailsChange}\n            errors={errors}\n            mode={mode}\n          />\n\n          {/* Household Information */}\n          <HouseholdInformation\n            value={householdInfoValue}\n            onChange={handleHouseholdInfoChange}\n            errors={errors}\n            onHouseholdSearch={onHouseholdSearch}\n            householdOptions={householdOptions}\n            householdLoading={householdLoading}\n            mode={mode}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ContactInformationForm;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/ContactInformation/FormField/ContactDetails.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":30,"column":24,"nodeType":"Identifier","endLine":30,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback } from 'react';\n\nimport { InputField } from '@/components';\nimport { createComponentFieldChangeHandler } from '@/lib/form-utils';\nimport type { FormMode } from '@/types';\n\nexport interface ContactDetailsData {\n  email: string;\n  telephone_number: string;\n  mobile_number: string;\n}\n\nexport interface ContactDetailsProps {\n  /** Form mode - determines if field is editable or read-only */\n  mode?: FormMode;\n  value: ContactDetailsData;\n  onChange: (value: ContactDetailsData) => void;\n  errors: Record<string, string>;\n  className?: string;\n}\n\nexport function ContactDetails({\n  mode = 'create',\n  value,\n  onChange,\n  errors,\n  className = '',\n}: ContactDetailsProps) {\n  // Use consolidated component field handler - eliminates 8 lines of duplicate code\n  const handleChange = useCallback(\n    createComponentFieldChangeHandler<ContactDetailsData>(value, onChange),\n    [value, onChange]\n  );\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <div>\n        <h4 className=\"text-lg font-medium text-gray-800 dark:text-gray-200\">Contact Details</h4>\n        <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">\n          Email and phone contact information.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-2 lg:grid-cols-4\">\n        <InputField\n          label=\"Email Address\"\n          labelSize=\"sm\"\n          errorMessage={errors.email}\n          mode={mode}\n          inputProps={{\n            name: 'email',\n            type: 'email',\n            value: value.email,\n            onChange: e => handleChange('email', e.target.value),\n            placeholder: 'Enter email address',\n            error: errors.email,\n          }}\n        />\n\n        <InputField\n          label=\"Phone Number\"\n          labelSize=\"sm\"\n          errorMessage={errors.telephone_number}\n          mode={mode}\n          inputProps={{\n            name: 'telephone_number',\n            type: 'tel',\n            value: value.telephone_number,\n            onChange: e => handleChange('telephone_number', e.target.value),\n            placeholder: 'Enter phone number',\n            error: errors.telephone_number,\n          }}\n        />\n\n        <InputField\n          label=\"Mobile Number\"\n          labelSize=\"sm\"\n          errorMessage={errors.mobile_number}\n          mode={mode}\n          inputProps={{\n            name: 'mobile_number',\n            type: 'tel',\n            value: value.mobile_number,\n            onChange: e => handleChange('mobile_number', e.target.value),\n            placeholder: 'Enter mobile number',\n            error: errors.mobile_number,\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default ContactDetails;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/ContactInformation/FormField/HouseholdInformation.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[720,723],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[720,723],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[747,750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[747,750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onHouseholdSearch' is defined but never used. Allowed unused args must match /^_/u.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'householdOptions' is defined but never used. Allowed unused args must match /^_/u.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'householdLoading' is defined but never used. Allowed unused args must match /^_/u.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleChange' is assigned a value but never used.","line":53,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1466,1469],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1466,1469],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2268,2271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2268,2271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2934,2937],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2934,2937],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2991,2994],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2991,2994],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport { SelectField } from '@/components';\nimport { useOptimizedHouseholdSearch } from '@/hooks/search/useOptimizedHouseholdSearch';\nimport type { FormMode } from '@/types';\n\nexport interface HouseholdInformationData {\n  household_code: string;\n  household_name: string;\n}\n\nexport interface HouseholdInformationProps {\n  /** Form mode - determines if field is editable or read-only */\n  mode?: FormMode;\n  value: HouseholdInformationData;\n  onChange: (value: HouseholdInformationData) => void;\n  errors: Record<string, string>;\n  className?: string;\n  // Optional external search functionality (HouseholdSelector has its own built-in search)\n  onHouseholdSearch?: (query: string) => Promise<any>;\n  householdOptions?: any[];\n  householdLoading?: boolean;\n}\n\nexport function HouseholdInformation({\n  mode = 'create',\n  value,\n  onChange,\n  errors,\n  className = '',\n  onHouseholdSearch,\n  householdOptions,\n  householdLoading,\n}: HouseholdInformationProps) {\n  // Household search hook\n  const {\n    setQuery: setSearchQuery,\n    options: householdSearchOptions = [],\n    isLoading,\n    hasMore,\n    loadMore,\n    isLoadingMore,\n  } = useOptimizedHouseholdSearch({\n    limit: 20,\n    debounceMs: 300,\n  });\n\n  // Load initial households on mount\n  React.useEffect(() => {\n    setSearchQuery(''); // Trigger initial load with empty search\n  }, [setSearchQuery]);\n\n  const handleChange = (field: keyof HouseholdInformationData, fieldValue: any) => {\n    onChange({\n      ...value,\n      [field]: fieldValue,\n    });\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <div>\n        <h4 className=\"text-lg font-medium text-gray-800 dark:text-gray-200\">\n          Household Information\n        </h4>\n        <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">\n          Household assignment and relationship details.\n        </p>\n      </div>\n\n      <div>\n        <SelectField\n          mode={mode}\n          label=\"Current Household *\"\n          labelSize=\"sm\"\n          errorMessage={errors.household_code}\n          helperText=\"Search and select an existing household\"\n          selectProps={{\n            placeholder: '🏠 Select household...',\n            options: (householdSearchOptions || []).map((household: any) => ({\n              value: household.code,\n              label: household.name || `Household ${household.code}`,\n              description: `Code: ${household.code}${household.address ? ` • ${household.address}` : ''}`,\n              badge: 'household',\n            })),\n            value: value.household_code,\n            loading: isLoading,\n            searchable: true,\n            onSearch: setSearchQuery,\n            onSelect: option => {\n              if (option) {\n                // Update both values in a single call to avoid race condition\n                const newValue = {\n                  ...value,\n                  household_code: (option as any).value,\n                  household_name: (option as any).label,\n                };\n                onChange(newValue);\n              } else {\n                const newValue = {\n                  ...value,\n                  household_code: '',\n                  household_name: '',\n                };\n                onChange(newValue);\n              }\n            },\n            // Infinite scroll props\n            infiniteScroll: true,\n            hasMore: hasMore,\n            onLoadMore: loadMore,\n            loadingMore: isLoadingMore,\n          }}\n        />\n\n        {/* Display selected household info (read-only) */}\n        {value.household_code && value.household_name && (\n          <div className=\"bg-info/5 border-info/20 mt-3 rounded-md border p-3\">\n            <h6 className=\"mb-2 font-medium text-zinc-900 dark:text-zinc-100\">\n              Selected Household\n            </h6>\n            <div className=\"text-sm\">\n              <div>\n                <span className=\"form-info-title\">Household:</span>\n                <div className=\"form-info-content\">{value.household_name}</div>\n                <div className=\"text-xs text-zinc-500 dark:text-zinc-400\">\n                  {value.household_code}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default HouseholdInformation;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/ContactInformation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/MemoizedComponents.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DEFAULT_VALUES' is defined but never used.","line":10,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Memoized Form Components for Performance Optimization\n *\n * Pre-optimized components to prevent unnecessary re-renders\n * following Philippine government performance standards.\n */\n\nimport React, { memo, useMemo, useCallback } from 'react';\n\nimport { FIELD_LABELS, DEFAULT_VALUES } from '@/constants/resident-form';\n\n// Memoized field validation error display\nexport const MemoizedFieldError = memo<{\n  fieldName: string;\n  error?: string;\n}>(({ fieldName, error }) => {\n  if (!error) return null;\n\n  return (\n    <div className=\"mt-1 text-sm text-red-600\" role=\"alert\">\n      <strong>{FIELD_LABELS[fieldName] || fieldName}:</strong> {error}\n    </div>\n  );\n});\n\nMemoizedFieldError.displayName = 'MemoizedFieldError';\n\n// Memoized form section wrapper\nexport const MemoizedFormSection = memo<{\n  title: string;\n  description?: string;\n  children: React.ReactNode;\n  isCollapsible?: boolean;\n  defaultExpanded?: boolean;\n}>(({ title, description, children, isCollapsible = false, defaultExpanded = true }) => {\n  const [isExpanded, setIsExpanded] = React.useState(defaultExpanded);\n\n  const toggleExpanded = useCallback(() => {\n    if (isCollapsible) {\n      setIsExpanded(prev => !prev);\n    }\n  }, [isCollapsible]);\n\n  const sectionContent = useMemo(\n    () => (\n      <div className=\"space-y-4\">\n        <div className=\"border-b border-gray-200 pb-4\">\n          <div\n            className={`flex items-center justify-between ${isCollapsible ? 'cursor-pointer' : ''}`}\n            onClick={toggleExpanded}\n          >\n            <div>\n              <h3 className=\"text-lg font-medium text-gray-900\">{title}</h3>\n              {description && <p className=\"mt-1 text-sm text-gray-500\">{description}</p>}\n            </div>\n            {isCollapsible && (\n              <button\n                type=\"button\"\n                className=\"text-gray-400 hover:text-gray-600\"\n                aria-expanded={isExpanded}\n              >\n                <svg\n                  className={`h-5 w-5 transform transition-transform ${isExpanded ? 'rotate-180' : ''}`}\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M19 9l-7 7-7-7\"\n                  />\n                </svg>\n              </button>\n            )}\n          </div>\n        </div>\n\n        {(!isCollapsible || isExpanded) && <div className=\"space-y-4\">{children}</div>}\n      </div>\n    ),\n    [title, description, children, isCollapsible, isExpanded, toggleExpanded]\n  );\n\n  return sectionContent;\n});\n\nMemoizedFormSection.displayName = 'MemoizedFormSection';\n\n// Memoized loading skeleton\nexport const MemoizedFormSkeleton = memo(() => {\n  const skeletonFields = useMemo(\n    () =>\n      Array.from({ length: 8 }, (_, index) => (\n        <div key={index} className=\"space-y-2\">\n          <div className=\"h-4 w-1/4 animate-pulse rounded bg-gray-200\"></div>\n          <div className=\"h-10 animate-pulse rounded bg-gray-200\"></div>\n        </div>\n      )),\n    []\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"h-8 w-1/2 animate-pulse rounded bg-gray-200\"></div>\n      <div className=\"space-y-4\">{skeletonFields}</div>\n      <div className=\"flex justify-end space-x-3\">\n        <div className=\"h-10 w-20 animate-pulse rounded bg-gray-200\"></div>\n        <div className=\"h-10 w-24 animate-pulse rounded bg-blue-200\"></div>\n      </div>\n    </div>\n  );\n});\n\nMemoizedFormSkeleton.displayName = 'MemoizedFormSkeleton';\n\n// Memoized validation summary\nexport const MemoizedValidationSummary = memo<{\n  errors: Record<string, string>;\n  onErrorClick?: (fieldName: string) => void;\n}>(({ errors, onErrorClick }) => {\n  const errorEntries = useMemo(\n    () => Object.entries(errors).filter(([field, error]) => error && field !== '_form'),\n    [errors]\n  );\n\n  const handleErrorClick = useCallback(\n    (fieldName: string) => {\n      onErrorClick?.(fieldName);\n\n      // Focus the field with error\n      const fieldElement = document.querySelector(\n        `[name=\"${fieldName}\"], #${fieldName}`\n      ) as HTMLElement;\n      if (fieldElement) {\n        fieldElement.focus();\n        fieldElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      }\n    },\n    [onErrorClick]\n  );\n\n  if (errorEntries.length === 0 && !errors._form) {\n    return null;\n  }\n\n  return (\n    <div className=\"rounded-md bg-red-50 p-4\" role=\"alert\">\n      <div className=\"flex\">\n        <div className=\"flex-shrink-0\">\n          <svg className=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path\n              fillRule=\"evenodd\"\n              d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\n              clipRule=\"evenodd\"\n            />\n          </svg>\n        </div>\n        <div className=\"ml-3\">\n          <h3 className=\"text-sm font-medium text-red-800\">\n            {errors._form ? 'Form Validation Error' : 'Please fix the following errors:'}\n          </h3>\n          {errors._form ? (\n            <div className=\"mt-2 text-sm text-red-700\">{errors._form}</div>\n          ) : (\n            <div className=\"mt-2 text-sm text-red-700\">\n              <ul className=\"list-disc space-y-1 pl-5\">\n                {errorEntries.map(([field, error]) => (\n                  <li key={field}>\n                    <button\n                      type=\"button\"\n                      className=\"text-left text-red-700 underline hover:text-red-900\"\n                      onClick={() => handleErrorClick(field)}\n                    >\n                      <strong>{FIELD_LABELS[field] || field}:</strong> {error}\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n});\n\nMemoizedValidationSummary.displayName = 'MemoizedValidationSummary';\n\n// Memoized form actions (submit/cancel buttons)\nexport const MemoizedFormActions = memo<{\n  onSubmit: () => void;\n  onCancel: () => void;\n  isSubmitting: boolean;\n  submitText?: string;\n  cancelText?: string;\n  isValid?: boolean;\n}>(\n  ({\n    onSubmit,\n    onCancel,\n    isSubmitting,\n    submitText = 'Submit',\n    cancelText = 'Cancel',\n    isValid = true,\n  }) => {\n    const handleSubmit = useCallback(\n      (e: React.FormEvent) => {\n        e.preventDefault();\n        if (!isSubmitting && isValid) {\n          onSubmit();\n        }\n      },\n      [onSubmit, isSubmitting, isValid]\n    );\n\n    const handleCancel = useCallback(\n      (e: React.FormEvent) => {\n        e.preventDefault();\n        if (!isSubmitting) {\n          onCancel();\n        }\n      },\n      [onCancel, isSubmitting]\n    );\n\n    return (\n      <div className=\"flex justify-end space-x-3 border-t border-gray-200 pt-6\">\n        <button\n          type=\"button\"\n          onClick={handleCancel}\n          disabled={isSubmitting}\n          className=\"inline-flex justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50\"\n        >\n          {cancelText}\n        </button>\n        <button\n          type=\"submit\"\n          onClick={handleSubmit}\n          disabled={isSubmitting || !isValid}\n          className=\"inline-flex justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50\"\n        >\n          {isSubmitting ? (\n            <>\n              <svg\n                className=\"mr-3 -ml-1 h-5 w-5 animate-spin text-white\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n              >\n                <circle\n                  className=\"opacity-25\"\n                  cx=\"12\"\n                  cy=\"12\"\n                  r=\"10\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"4\"\n                ></circle>\n                <path\n                  className=\"opacity-75\"\n                  fill=\"currentColor\"\n                  d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                ></path>\n              </svg>\n              Processing...\n            </>\n          ) : (\n            submitText\n          )}\n        </button>\n      </div>\n    );\n  }\n);\n\nMemoizedFormActions.displayName = 'MemoizedFormActions';\n\n// Memoized field group for related fields\nexport const MemoizedFieldGroup = memo<{\n  legend: string;\n  description?: string;\n  children: React.ReactNode;\n  required?: boolean;\n  className?: string;\n}>(({ legend, description, children, required = false, className = '' }) => {\n  const groupContent = useMemo(\n    () => (\n      <fieldset className={`space-y-4 ${className}`}>\n        <legend className=\"text-base font-medium text-gray-900\">\n          {legend}\n          {required && (\n            <span className=\"ml-1 text-red-500\" aria-label=\"Required\">\n              *\n            </span>\n          )}\n        </legend>\n        {description && <p className=\"text-sm text-gray-500\">{description}</p>}\n        <div className=\"space-y-4\">{children}</div>\n      </fieldset>\n    ),\n    [legend, description, children, required, className]\n  );\n\n  return groupContent;\n});\n\nMemoizedFieldGroup.displayName = 'MemoizedFieldGroup';\n\n// Memoized progressive enhancement wrapper\nexport const MemoizedProgressiveForm = memo<{\n  children: React.ReactNode;\n  onFormChange?: (hasChanges: boolean) => void;\n}>(({ children, onFormChange }) => {\n  const [hasChanges, setHasChanges] = React.useState(false);\n\n  const handleFormChange = useCallback(() => {\n    if (!hasChanges) {\n      setHasChanges(true);\n      onFormChange?.(true);\n    }\n  }, [hasChanges, onFormChange]);\n\n  // Add change listeners to form\n  React.useEffect(() => {\n    const handleChange = () => handleFormChange();\n    const handleInput = () => handleFormChange();\n\n    document.addEventListener('change', handleChange);\n    document.addEventListener('input', handleInput);\n\n    return () => {\n      document.removeEventListener('change', handleChange);\n      document.removeEventListener('input', handleInput);\n    };\n  }, [handleFormChange]);\n\n  return (\n    <div className=\"space-y-6\">\n      {hasChanges && (\n        <div className=\"rounded-md bg-yellow-50 p-4\">\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0\">\n              <svg className=\"h-5 w-5 text-yellow-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n            </div>\n            <div className=\"ml-3\">\n              <p className=\"text-sm text-yellow-700\">\n                You have unsaved changes. Make sure to submit the form to save your progress.\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n      {children}\n    </div>\n  );\n});\n\nMemoizedProgressiveForm.displayName = 'MemoizedProgressiveForm';\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/MigrationInformation/MigrationInformation.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'totalCount' is assigned a value but never used.","line":41,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2751,2754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2751,2754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2779,2782],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2779,2782],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2866,2869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2866,2869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2895,2898],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2895,2898],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2958,2961],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2958,2961],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3041,3044],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3041,3044],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3278,3281],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3278,3281],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3365,3368],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3365,3368],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3447,3450],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3447,3450],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3777,3780],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3777,3780],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3925,3928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3925,3928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4160,4163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4160,4163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\n\nimport { InputField, SelectField, ControlField } from '@/components';\nimport {\n  useMigrationInformation,\n  MigrationInformationData,\n} from '@/hooks/utilities/useMigrationInformation';\nimport type { FormMode } from '@/types';\n\nexport type { MigrationInformationData };\n\nexport interface MigrationInformationProps {\n  /** Form mode - determines if field is editable or read-only */\n  mode?: FormMode;\n  value: MigrationInformationData;\n  onChange: (value: MigrationInformationData) => void;\n  errors: Record<string, string>;\n  className?: string;\n}\n\nexport function MigrationInformation({\n  mode = 'create',\n  value,\n  onChange,\n  errors,\n  className = '',\n}: Readonly<MigrationInformationProps>) {\n  // Use custom hook for migration information management\n  const {\n    migrationData,\n    selectedBarangayInfo,\n    barangayOptions,\n    isLoadingBarangays,\n    updateMigrationData,\n    setMigrationData,\n    handleBarangaySelect,\n    searchBarangays,\n    hasMore,\n    loadMore,\n    isLoadingMore,\n    totalCount,\n  } = useMigrationInformation({\n    initialData: value,\n    onChange,\n  });\n\n  // Sync with external value changes\n  useEffect(() => {\n    if (JSON.stringify(value) !== JSON.stringify(migrationData)) {\n      setMigrationData(value);\n    }\n  }, [value, migrationData, setMigrationData]);\n\n  return (\n    <div\n      className={`rounded-lg border border-gray-300 bg-white p-6 shadow-xs dark:border-gray-600 dark:bg-gray-800 ${className}`}\n    >\n      <div className=\"space-y-6\">\n        <div>\n          <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200\">\n            Migration Information\n          </h2>\n          <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">\n            Details about previous residence and migration timeline.\n          </p>\n        </div>\n\n        {/* Migration Timeline */}\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-4\">\n          <div className=\"col-span-4\">\n            <SelectField\n              label=\"Previous Barangay\"\n              required\n              labelSize=\"sm\"\n              errorMessage={errors.previous_barangay_code}\n              helperText=\"Search for the previous barangay\"\n              mode={mode}\n              selectProps={{\n                placeholder: 'Search for previous barangay...',\n                options: barangayOptions.map(place => {\n                  // Format hierarchical display based on level\n                  let displayLabel = place.name;\n                  let description = '';\n                  let badge = place.level;\n\n                  if (place.level === 'barangay') {\n                    // For barangay: \"Barangay Name, City, Province\"\n                    if ((place as any).city_name && (place as any).province_name) {\n                      displayLabel = `${place.name}, ${(place as any).city_name}, ${(place as any).province_name}`;\n                    } else if ((place as any).city_name) {\n                      displayLabel = `${place.name}, ${(place as any).city_name}`;\n                    }\n                    badge = 'barangay';\n                  } else if (place.level === 'city') {\n                    // For city/municipality: \"City Name, Province\"\n                    if ((place as any).province_name) {\n                      displayLabel = `${place.name}, ${(place as any).province_name}`;\n                    }\n                    badge = (place as any).type || 'city';\n                  } else if (place.level === 'province') {\n                    // For province: just \"Province Name\"\n                    displayLabel = place.name;\n                    badge = 'province';\n                  }\n\n                  // Format description for subtext\n                  if ((place as any).full_address) {\n                    // Use full address but trim to province level (remove region)\n                    const parts = (place as any).full_address.split(', ');\n                    if (parts.length >= 3) {\n                      description = parts.slice(0, 3).join(', '); // Up to Province\n                    } else {\n                      description = (place as any).full_address;\n                    }\n                  }\n\n                  return {\n                    value: place.code,\n                    label: displayLabel,\n                    description: description,\n                    badge: badge,\n                  };\n                }),\n                value: migrationData.previous_barangay_code || '',\n                searchable: true,\n                loading: isLoadingBarangays,\n                onSelect: option => {\n                  if (option) {\n                    // Find the original barangay data by matching the value (code)\n                    const originalBarangay = barangayOptions.find(b => b.code === option.value);\n                    if (originalBarangay) {\n                      handleBarangaySelect(originalBarangay);\n                    }\n                  }\n                },\n                onSearch: searchBarangays,\n                disabled: false,\n                // Lazy loading props\n                hasMore: hasMore,\n                onLoadMore: loadMore,\n                loadingMore: isLoadingMore,\n                infiniteScroll: true,\n              }}\n            />\n\n            {/* Display selected address hierarchy (read-only) */}\n            {migrationData.previous_barangay_code && selectedBarangayInfo && (\n              <div className=\"bg-info/5 border-info/20 rounded-md border p-3\">\n                <h6 className=\"mb-2 font-medium text-zinc-900 dark:text-zinc-100\">\n                  Selected Previous Address\n                </h6>\n                <div className=\"grid grid-cols-1 gap-3 text-sm md:grid-cols-2 lg:grid-cols-4\">\n                  <div>\n                    <span className=\"form-info-title\">Barangay:</span>\n                    <div className=\"form-info-content\">\n                      {selectedBarangayInfo.barangay || 'Not set'}\n                    </div>\n                    <div className=\"text-xs text-zinc-500 dark:text-zinc-400\">\n                      {migrationData.previous_barangay_code}\n                    </div>\n                  </div>\n                  <div>\n                    <span className=\"form-info-title\">City/Municipality:</span>\n                    <div className=\"form-info-content\">\n                      {selectedBarangayInfo.city || 'Not set'}\n                    </div>\n                    <div className=\"text-xs text-zinc-500 dark:text-zinc-400\">\n                      {migrationData.previous_city_municipality_code}\n                    </div>\n                  </div>\n                  <div>\n                    <span className=\"form-info-title\">Province:</span>\n                    <div className=\"form-info-content\">\n                      {selectedBarangayInfo.province || 'Not set'}\n                    </div>\n                    <div className=\"text-xs text-zinc-500 dark:text-zinc-400\">\n                      {migrationData.previous_province_code}\n                    </div>\n                  </div>\n                  <div>\n                    <span className=\"form-info-title\">Region:</span>\n                    <div className=\"form-info-content\">\n                      {selectedBarangayInfo.region || 'Not set'}\n                    </div>\n                    <div className=\"text-xs text-zinc-500 dark:text-zinc-400\">\n                      {migrationData.previous_region_code}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n          <InputField\n            label=\"Length of Stay in Previous Location (months)\"\n            labelSize=\"sm\"\n            errorMessage={errors.length_of_stay_previous_months}\n            mode={mode}\n            inputProps={{\n              type: 'number',\n              value: migrationData.length_of_stay_previous_months || '',\n              onChange: e =>\n                updateMigrationData(\n                  'length_of_stay_previous_months',\n                  parseInt(e.target.value) || 0\n                ),\n              placeholder: 'Number of months',\n              min: '0',\n            }}\n          />\n\n          <InputField\n            label=\"Reason for Leaving Previous Location\"\n            labelSize=\"sm\"\n            errorMessage={errors.reason_for_leaving}\n            mode={mode}\n            inputProps={{\n              value: migrationData.reason_for_leaving || '',\n              onChange: e => updateMigrationData('reason_for_leaving', e.target.value),\n              placeholder: 'e.g., employment, family, education',\n            }}\n          />\n\n          <InputField\n            label=\"Date of Transfer\"\n            labelSize=\"sm\"\n            errorMessage={errors.date_of_transfer}\n            mode={mode}\n            inputProps={{\n              type: 'date',\n              value: migrationData.date_of_transfer || '',\n              onChange: e => updateMigrationData('date_of_transfer', e.target.value),\n            }}\n          />\n\n          <InputField\n            label=\"Reason for Transferring Here\"\n            labelSize=\"sm\"\n            errorMessage={errors.reason_for_transferring}\n            mode={mode}\n            inputProps={{\n              value: migrationData.reason_for_transferring || '',\n              onChange: e => updateMigrationData('reason_for_transferring', e.target.value),\n              placeholder: 'e.g., job opportunity, family reunion',\n            }}\n          />\n\n          <InputField\n            label=\"Duration of Stay in Current Location (months)\"\n            labelSize=\"sm\"\n            errorMessage={errors.duration_of_stay_current_months}\n            mode={mode}\n            inputProps={{\n              type: 'number',\n              value: migrationData.duration_of_stay_current_months || '',\n              onChange: e =>\n                updateMigrationData(\n                  'duration_of_stay_current_months',\n                  parseInt(e.target.value) || 0\n                ),\n              placeholder: 'Number of months',\n              min: '0',\n            }}\n          />\n\n          <ControlField\n            label=\"Intending to Return?\"\n            labelSize=\"sm\"\n            errorMessage={errors.is_intending_to_return}\n            mode={mode}\n            toggleText={{\n              checked: 'Yes, resident plans to return to previous residence',\n              unchecked: 'No, resident does not plan to return',\n            }}\n            controlProps={{\n              type: 'toggle',\n              checked: Boolean(migrationData.is_intending_to_return),\n              onChange: (e: React.ChangeEvent<HTMLInputElement>) =>\n                updateMigrationData('is_intending_to_return', e.target.checked),\n              size: 'md',\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default MigrationInformation;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/MigrationInformation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/PersonalInformation/FormField/BasicInformation.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1303,1306],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1303,1306],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":175,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5255,5258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5255,5258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport { InputField, SelectField, ControlFieldSet } from '@/components';\nimport { Radio } from '@/components/atoms/Field/Control/Radio/Radio';\nimport {\n  SEX_OPTIONS_WITH_DEFAULT,\n  CIVIL_STATUS_OPTIONS_WITH_DEFAULT,\n} from '@/lib/constants/resident-enums';\nimport type { FormMode } from '@/types';\n\nexport interface BasicInformationData {\n  first_name: string;\n  middle_name: string;\n  last_name: string;\n  extension_name: string;\n  sex: 'male' | 'female' | '';\n  civil_status: string;\n  civil_status_others_specify?: string;\n}\n\ninterface BasicInformationProps {\n  /** Form mode - determines if field is editable or read-only */\n  mode?: FormMode;\n  value: BasicInformationData;\n  onChange: (value: BasicInformationData) => void;\n  errors?: Partial<Record<keyof BasicInformationData, string>>;\n  className?: string;\n}\n\n// Use imported options with default empty values\n\nexport function BasicInformation({\n  mode = 'create',\n  value,\n  onChange,\n  errors = {},\n  className = '',\n}: BasicInformationProps) {\n  const handleChange = (field: keyof BasicInformationData, newValue: string) => {\n    const updatedValue = {\n      ...value,\n      [field]: newValue,\n    };\n    onChange(updatedValue);\n  };\n\n  const handleSelectChange = (field: keyof BasicInformationData) => (option: any) => {\n    handleChange(field, option?.value || '');\n  };\n\n  // Helper function to format full name\n  const formatFullName = () => {\n    const parts = [\n      value.first_name?.trim(),\n      value.middle_name?.trim(),\n      value.last_name?.trim(),\n      value.extension_name?.trim(),\n    ].filter(Boolean);\n    return parts.length > 0 ? parts.join(' ') : '—';\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <div>\n        <h4 className=\"text-lg font-medium text-gray-800 dark:text-gray-200\">Basic Information</h4>\n        <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">\n          Basic details and identification information.\n        </p>\n      </div>\n\n      {/* All Fields in One Grid */}\n      <div className=\"grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-2 lg:grid-cols-4\">\n        {/* Name Fields - Combined in view mode */}\n        {mode === 'view' ? (\n          <div className=\"col-span-full\">\n            <InputField\n              mode={mode}\n              label=\"Full Name\"\n              labelSize=\"sm\"\n              inputProps={{\n                value: formatFullName(),\n                readOnly: true,\n              }}\n            />\n          </div>\n        ) : (\n          <>\n            <InputField\n              mode={mode}\n              label=\"First Name\"\n              required\n              labelSize=\"sm\"\n              errorMessage={errors.first_name}\n              inputProps={{\n                value: value.first_name,\n                onChange: e => handleChange('first_name', e.target.value),\n                placeholder: 'Enter first name',\n                required: true,\n              }}\n            />\n\n            <InputField\n              mode={mode}\n              label=\"Middle Name\"\n              labelSize=\"sm\"\n              inputProps={{\n                value: value.middle_name,\n                onChange: e => handleChange('middle_name', e.target.value),\n                placeholder: 'Enter middle name',\n              }}\n            />\n\n            <InputField\n              mode={mode}\n              label=\"Last Name\"\n              required\n              labelSize=\"sm\"\n              errorMessage={errors.last_name}\n              inputProps={{\n                value: value.last_name,\n                onChange: e => handleChange('last_name', e.target.value),\n                placeholder: 'Enter last name',\n                required: true,\n              }}\n            />\n\n            <InputField\n              mode={mode}\n              label=\"Extension Name\"\n              labelSize=\"sm\"\n              inputProps={{\n                value: value.extension_name,\n                onChange: e => handleChange('extension_name', e.target.value),\n                placeholder: 'Jr., Sr., III, etc.',\n              }}\n            />\n          </>\n        )}\n\n        {/* Sex, Civil Status, Civil Status Other (conditional), Citizenship */}\n        <ControlFieldSet\n          mode={mode}\n          type=\"radio\"\n          label=\"Sex\"\n          labelSize=\"sm\"\n          radioName=\"sex\"\n          radioValue={value.sex}\n          onRadioChange={(selectedValue: string) => handleChange('sex', selectedValue)}\n          errorMessage={errors.sex}\n          orientation=\"horizontal\"\n          spacing=\"sm\"\n        >\n          {SEX_OPTIONS_WITH_DEFAULT.map(option => (\n            <Radio\n              key={option.value}\n              value={option.value}\n              label={option.label}\n              size=\"md\"\n              style=\"button\"\n              buttonProps={{\n                variant: 'neutral-outline',\n                size: 'lg',\n              }}\n            />\n          ))}\n        </ControlFieldSet>\n\n        <SelectField\n          mode={mode}\n          label=\"Civil Status\"\n          labelSize=\"sm\"\n          errorMessage={errors.civil_status}\n          selectProps={{\n            placeholder: 'Select civil status...',\n            options: CIVIL_STATUS_OPTIONS_WITH_DEFAULT as any,\n            value: value.civil_status,\n            onSelect: handleSelectChange('civil_status'),\n          }}\n        />\n\n        {/* Show input field when \"others\" is selected */}\n        {value.civil_status === 'others' && (\n          <InputField\n            mode={mode}\n            label=\"Specify Civil Status\"\n            required\n            labelSize=\"sm\"\n            errorMessage={errors.civil_status_others_specify}\n            inputProps={{\n              value: value.civil_status_others_specify || '',\n              onChange: e => handleChange('civil_status_others_specify', e.target.value),\n              placeholder: 'Please specify civil status',\n              required: true,\n            }}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default BasicInformation;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/PersonalInformation/FormField/BirthInformation.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1113,1116],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1113,1116],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1609,1612],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1609,1612],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1637,1640],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1637,1640],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1712,1715],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1712,1715],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1741,1744],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1741,1744],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1792,1795],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1792,1795],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1863,1866],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1863,1866],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2040,2043],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2040,2043],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2115,2118],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2115,2118],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2173,2176],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2173,2176],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2419,2422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2419,2422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2543,2546],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2543,2546],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2730,2733],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2730,2733],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\n\nimport { InputField, SelectField } from '@/components';\nimport { usePsgcSearch } from '@/hooks/search/usePsgcSearch';\nimport type { FormMode } from '@/types';\n\nexport interface BirthInformationData {\n  birthdate: string;\n  birth_place_name: string;\n  birth_place_code: string;\n}\n\nexport interface BirthInformationProps {\n  /** Form mode - determines if field is editable or read-only */\n  mode?: FormMode;\n  value: BirthInformationData;\n  onChange: (value: BirthInformationData) => void;\n  errors: Record<string, string>;\n  className?: string;\n}\n\nexport function BirthInformation({\n  mode = 'create',\n  value,\n  onChange,\n  errors,\n  className = '',\n}: Readonly<BirthInformationProps>) {\n  // PSGC search hook for birth place\n  const {\n    options: psgcOptions,\n    isLoading: psgcLoading,\n    setQuery: handlePsgcSearch,\n  } = usePsgcSearch({\n    levels: 'all', // Allow province, city, and barangay selection\n    limit: 20, // Smaller initial load for better performance\n    debounceMs: 300,\n  });\n\n  const handleChange = (field: keyof BirthInformationData, fieldValue: any) => {\n    onChange({\n      ...value,\n      [field]: fieldValue,\n    });\n  };\n\n  // Memoize options to prevent infinite re-renders\n  const birthPlaceOptions = useMemo(() => {\n    const allOptions = psgcOptions.map(place => {\n      // Format hierarchical display based on level\n      let displayLabel = place.name;\n      let description = '';\n      let badge = place.level;\n\n      if (place.level === 'barangay') {\n        // For barangay: \"Barangay Name, City, Province\"\n        if ((place as any).city_name && (place as any).province_name) {\n          displayLabel = `${place.name}, ${(place as any).city_name}, ${(place as any).province_name}`;\n        } else if ((place as any).city_name) {\n          displayLabel = `${place.name}, ${(place as any).city_name}`;\n        }\n        badge = 'barangay';\n      } else if (place.level === 'city') {\n        // For city/municipality: \"City Name, Province\"\n        if ((place as any).province_name) {\n          displayLabel = `${place.name}, ${(place as any).province_name}`;\n        }\n        badge = (place as any).type || 'city';\n      } else if (place.level === 'province') {\n        // For province: just \"Province Name\"\n        displayLabel = place.name;\n        badge = 'province';\n      }\n\n      // Format description for subtext\n      if ((place as any).full_address) {\n        // Use full address but trim to province level (remove region)\n        const parts = (place as any).full_address.split(', ');\n        if (parts.length >= 3) {\n          description = parts.slice(0, 3).join(', '); // Up to Province\n        } else {\n          description = (place as any).full_address;\n        }\n      }\n\n      return {\n        value: place.code,\n        label: displayLabel,\n        description: description,\n        badge: badge,\n      };\n    });\n\n    // Ensure current selected value is always in options for proper display in view mode\n    if (value.birth_place_code && value.birth_place_name) {\n      const exists = allOptions.some(opt => opt.value === value.birth_place_code);\n      if (!exists) {\n        allOptions.unshift({\n          value: value.birth_place_code,\n          label: value.birth_place_name,\n          description: 'Current selection',\n          badge: 'barangay',\n        });\n      }\n    }\n\n    return allOptions;\n  }, [psgcOptions, value.birth_place_code, value.birth_place_name]);\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <div>\n        <h4 className=\"text-lg font-medium text-gray-800 dark:text-gray-200\">Birth Information</h4>\n        <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">\n          Birth date and place information.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-2\">\n        <InputField\n          mode={mode}\n          label=\"Birth Date\"\n          required\n          labelSize=\"sm\"\n          errorMessage={errors.birthdate}\n          inputProps={{\n            type: 'date',\n            value: value.birthdate,\n            onChange: e => handleChange('birthdate', e.target.value),\n            required: true,\n          }}\n        />\n\n        <SelectField\n          mode={mode}\n          label=\"Birth Place\"\n          required\n          labelSize=\"sm\"\n          errorMessage={errors.birth_place_name}\n          helperText=\"Search for the place of birth\"\n          selectProps={{\n            placeholder: 'Search for birth place...',\n            options: birthPlaceOptions,\n            value: value.birth_place_code,\n            onSelect: option => {\n              handleChange('birth_place_code', option?.value || '');\n              handleChange('birth_place_name', option?.label || '');\n            },\n            onSearch: handlePsgcSearch,\n            loading: psgcLoading,\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default BirthInformation;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/PersonalInformation/FormField/EducationInformation.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1074,1077],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1074,1077],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport { SelectField, ControlFieldSet } from '@/components';\nimport { Radio } from '@/components/atoms/Field/Control/Radio/Radio';\nimport { EDUCATION_LEVEL_OPTIONS_WITH_EMPTY } from '@/lib/constants/resident-enums';\nimport type { FormMode } from '@/types';\n\n// Graduate status options\nconst GRADUATE_STATUS_OPTIONS = [\n  { value: 'yes', label: 'Yes, graduated' },\n  { value: 'no', label: 'No, not graduated' },\n];\n\nexport interface EducationInformationData {\n  education_attainment: string;\n  is_graduate: string; // 'yes' | 'no' (defaults to 'yes')\n}\n\nexport interface EducationInformationProps {\n  value: EducationInformationData;\n  onChange: (value: EducationInformationData) => void;\n  errors: Record<string, string>;\n  /** Form mode - determines if field is editable or read-only */\n  mode?: FormMode;\n  className?: string;\n}\n\nexport function EducationInformation({\n  value,\n  onChange,\n  errors,\n  mode = 'create',\n  className = '',\n}: EducationInformationProps) {\n  const handleChange = (field: keyof EducationInformationData, fieldValue: any) => {\n    const updatedValue = {\n      ...value,\n      [field]: fieldValue,\n    };\n\n    // Business logic: Auto-set graduate status based on education level\n    if (field === 'education_attainment') {\n      // Post-graduate education implies college graduation\n      if (fieldValue === 'post_graduate') {\n        updatedValue.is_graduate = 'yes';\n      }\n      // For other levels, keep the current graduate status or default to 'no' if empty\n      else if (!value.is_graduate) {\n        updatedValue.is_graduate = 'no';\n      }\n    }\n\n    onChange(updatedValue);\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <div>\n        <h4 className=\"text-lg font-medium text-gray-800 dark:text-gray-200\">\n          Education Information\n        </h4>\n        <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">\n          Educational attainment and graduation status.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n        <SelectField\n          label=\"Highest Educational Attainment\"\n          required\n          labelSize=\"sm\"\n          errorMessage={errors.education_attainment}\n          mode={mode}\n          selectProps={{\n            placeholder: 'Select education level...',\n            options: EDUCATION_LEVEL_OPTIONS_WITH_EMPTY,\n            value: value.education_attainment,\n            onSelect: option => handleChange('education_attainment', option?.value || ''),\n          }}\n        />\n\n        <ControlFieldSet\n          type=\"radio\"\n          label=\"Graduate Status\"\n          labelSize=\"sm\"\n          radioName=\"is_graduate\"\n          radioValue={value.is_graduate}\n          onRadioChange={(selectedValue: string) => handleChange('is_graduate', selectedValue)}\n          errorMessage={errors.is_graduate}\n          orientation=\"horizontal\"\n          spacing=\"sm\"\n          mode={value.education_attainment === 'post_graduate' ? 'view' : mode}\n          // helperText={\n          //   value.education_attainment === 'post_graduate'\n          //     ? \"Automatically set to 'Yes' for post-graduate education\"\n          //     : \"Whether the current education level has been completed\"\n          // }\n        >\n          {GRADUATE_STATUS_OPTIONS.map(option => (\n            <Radio\n              key={option.value}\n              value={option.value}\n              label={option.label}\n              style=\"button\"\n              buttonProps={{\n                variant: 'neutral-outline',\n                size: 'lg',\n              }}\n            />\n          ))}\n        </ControlFieldSet>\n      </div>\n    </div>\n  );\n}\n\nexport default EducationInformation;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/PersonalInformation/FormField/EmploymentInformation.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3459,3462],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3459,3462],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3556,3559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3556,3559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3641,3644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3641,3644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport { SelectField } from '@/components';\nimport { EMPLOYMENT_STATUS_OPTIONS_WITH_EMPTY } from '@/lib/constants/resident-enums';\nimport type { FormMode } from '@/types';\nimport { SelectOption } from '@/types';\n\nexport interface EmploymentInformationData {\n  employment_status: string;\n  occupation_code: string;\n  occupation_title: string;\n}\n\nexport interface EmploymentInformationProps {\n  value: EmploymentInformationData;\n  onChange: (value: EmploymentInformationData) => void;\n  errors: Record<string, string>;\n  // PSOC search functionality\n  onPsocSearch?: (query: string) => void;\n  psocOptions?: SelectOption[];\n  psocLoading?: boolean;\n  /** Form mode - determines if field is editable or read-only */\n  mode?: FormMode;\n  className?: string;\n}\n\nexport function EmploymentInformation({\n  value,\n  onChange,\n  errors,\n  onPsocSearch,\n  psocOptions = [],\n  psocLoading = false,\n  mode = 'create',\n  className = '',\n}: EmploymentInformationProps) {\n  const handleChange = (field: keyof EmploymentInformationData, fieldValue: string) => {\n    onChange({\n      ...value,\n      [field]: fieldValue,\n    });\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <div>\n        <h4 className=\"text-lg font-medium text-gray-800 dark:text-gray-200\">\n          Employment Information\n        </h4>\n        <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">\n          Employment status and occupation details.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n        <SelectField\n          label=\"Employment Status\"\n          labelSize=\"sm\"\n          errorMessage={errors.employment_status}\n          mode={mode}\n          selectProps={{\n            placeholder: 'Select employment status...',\n            options: EMPLOYMENT_STATUS_OPTIONS_WITH_EMPTY,\n            value: value.employment_status,\n            onSelect: option => handleChange('employment_status', option?.value || ''),\n          }}\n        />\n\n        <SelectField\n          label=\"Occupation Name\"\n          labelSize=\"sm\"\n          errorMessage={errors.occupation_title || errors.occupation_code}\n          mode={mode}\n          selectProps={{\n            placeholder: 'Search occupation from level 1-5...',\n            options: (() => {\n              // Ensure the current selected value is in options\n              const currentOptions = [...psocOptions];\n              if (value.occupation_code && value.occupation_title) {\n                // Check if current selection is already in options\n                const hasCurrentOption = currentOptions.some(\n                  opt => opt.value === value.occupation_code\n                );\n                if (!hasCurrentOption) {\n                  // Add the current value as an option so it displays correctly\n                  currentOptions.unshift({\n                    value: value.occupation_code,\n                    label: value.occupation_title, // Use full hierarchy as label\n                    description: `PSOC Code: ${value.occupation_code}`,\n                  });\n                }\n              }\n              return currentOptions;\n            })(),\n            value: value.occupation_code,\n            loading: psocLoading,\n            onSearch: onPsocSearch,\n            onSelect: option => {\n              if (option) {\n                // Only allow specific occupation (level 5) as final result\n                if ((option as any).level_type === 'occupation') {\n                  handleChange('occupation_code', (option as any).occupation_code);\n                  handleChange('occupation_title', (option as any).occupation_title);\n                } else {\n                  // If higher level is selected, clear the fields\n                  handleChange('occupation_code', '');\n                  handleChange('occupation_title', '');\n                }\n              } else {\n                handleChange('occupation_code', '');\n                handleChange('occupation_title', '');\n              }\n            },\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default EmploymentInformation;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/PersonalInformation/FormField/PhilSysCardField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/PersonalInformation/PersonalInformation.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/PersonalInformation/PersonalInformation.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1508,1511],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1508,1511],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1531,1534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1531,1534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onPsgcSearch' is defined but never used. Allowed unused args must match /^_/u.","line":56,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'psgcOptions' is assigned a value but never used. Allowed unused args must match /^_/u.","line":58,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'psgcLoading' is assigned a value but never used. Allowed unused args must match /^_/u.","line":60,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":14},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useCallback has a missing dependency: 'formData.civil_status_others_specify'. Either include it or remove the dependency array.","line":103,"column":5,"nodeType":"ArrayExpression","endLine":111,"endColumn":6,"suggestions":[{"desc":"Update the dependencies array to be: [formData.first_name, formData.middle_name, formData.last_name, formData.extension_name, formData.sex, formData.civil_status, formData.civil_status_others_specify, onChange]","fix":{"range":[3343,3527],"text":"[formData.first_name, formData.middle_name, formData.last_name, formData.extension_name, formData.sex, formData.civil_status, formData.civil_status_others_specify, onChange]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport type { FormMode } from '@/types';\n\nimport { BasicInformation, BasicInformationData } from './FormField/BasicInformation';\nimport { BirthInformation, BirthInformationData } from './FormField/BirthInformation';\nimport { EducationInformation, EducationInformationData } from './FormField/EducationInformation';\nimport {\n  EmploymentInformation,\n  EmploymentInformationData,\n} from './FormField/EmploymentInformation';\nimport { PhilSysCardField } from './FormField/PhilSysCardField';\n\nexport interface PersonalInformationFormProps {\n  /** Form mode - determines if field is editable or read-only */\n  mode?: FormMode;\n  formData: {\n    // PhilSys and Personal Info\n    philsys_card_number?: string;\n    first_name?: string;\n    middle_name?: string;\n    last_name?: string;\n    extension_name?: string;\n    sex?: string;\n    civil_status?: string;\n    civil_status_others_specify?: string;\n    citizenship?: string;\n    // Birth Information\n    birthdate?: string;\n    birth_place_name?: string;\n    birth_place_code?: string;\n    // Education\n    education_attainment?: string;\n    is_graduate?: boolean;\n    // Employment\n    employment_status?: string;\n    occupation_code?: string;\n    occupation_title?: string;\n  };\n  onChange: (field: string, value: string | number | boolean | null) => void;\n  errors: Record<string, string>;\n  // API handlers for search functionality\n  onPsgcSearch?: (query: string) => void;\n  onPsocSearch?: (query: string) => void;\n  psgcOptions?: any[];\n  psocOptions?: any[];\n  psgcLoading?: boolean;\n  psocLoading?: boolean;\n}\n\nexport function PersonalInformationForm({\n  mode = 'create',\n  formData,\n  onChange,\n  errors,\n  onPsgcSearch,\n  onPsocSearch,\n  psgcOptions = [],\n  psocOptions = [],\n  psgcLoading = false,\n  psocLoading = false,\n}: PersonalInformationFormProps) {\n  // Map form data to BasicInformation component props\n  const basicInfoValue: BasicInformationData = React.useMemo(\n    () => ({\n      first_name: formData.first_name || '',\n      middle_name: formData.middle_name || '',\n      last_name: formData.last_name || '',\n      extension_name: formData.extension_name || '',\n      sex: (formData.sex || '') as '' | 'male' | 'female',\n      civil_status: formData.civil_status || '',\n    }),\n    [\n      formData.first_name,\n      formData.middle_name,\n      formData.last_name,\n      formData.extension_name,\n      formData.sex,\n      formData.civil_status,\n    ]\n  );\n\n  // Handle changes from BasicInformation component\n  const handleBasicInfoChange = React.useCallback(\n    (value: BasicInformationData) => {\n      // Only update fields that have actually changed from current form data\n      const currentBasicInfo: BasicInformationData = {\n        first_name: formData.first_name || '',\n        middle_name: formData.middle_name || '',\n        last_name: formData.last_name || '',\n        extension_name: formData.extension_name || '',\n        sex: (formData.sex || '') as '' | 'male' | 'female',\n        civil_status: formData.civil_status || '',\n        civil_status_others_specify: formData.civil_status_others_specify || '',\n      };\n\n      Object.entries(value).forEach(([field, fieldValue]) => {\n        if (currentBasicInfo[field as keyof BasicInformationData] !== fieldValue) {\n          onChange(field, fieldValue);\n        }\n      });\n    },\n    [\n      onChange,\n      formData.first_name,\n      formData.middle_name,\n      formData.last_name,\n      formData.extension_name,\n      formData.sex,\n      formData.civil_status,\n    ]\n  );\n\n  // Handle changes from BirthInformation component\n  const handleBirthInfoChange = React.useCallback(\n    (value: BirthInformationData) => {\n      // Only update fields that have actually changed from current form data\n      const currentBirthInfo: BirthInformationData = {\n        birthdate: formData.birthdate || '',\n        birth_place_name: formData.birth_place_name || '',\n        birth_place_code: formData.birth_place_code || '',\n      };\n\n      Object.entries(value).forEach(([field, fieldValue]) => {\n        if (currentBirthInfo[field as keyof BirthInformationData] !== fieldValue) {\n          onChange(field, fieldValue);\n        }\n      });\n    },\n    [onChange, formData.birthdate, formData.birth_place_name, formData.birth_place_code]\n  );\n\n  // Handle changes from EducationInformation component\n  const handleEducationInfoChange = React.useCallback(\n    (value: EducationInformationData) => {\n      // Only update fields that have actually changed from current form data\n      const currentEducationInfo = {\n        education_attainment: formData.education_attainment || '',\n        is_graduate: formData.is_graduate ? 'yes' : 'no',\n      };\n\n      Object.entries(value).forEach(([field, fieldValue]) => {\n        if (currentEducationInfo[field as keyof typeof currentEducationInfo] !== fieldValue) {\n          // Convert is_graduate string back to boolean for form state\n          if (field === 'is_graduate') {\n            onChange(field, fieldValue === 'yes');\n          } else {\n            onChange(field, fieldValue);\n          }\n        }\n      });\n    },\n    [onChange, formData.education_attainment, formData.is_graduate]\n  );\n\n  // Handle changes from EmploymentInformation component\n  const handleEmploymentInfoChange = React.useCallback(\n    (value: EmploymentInformationData) => {\n      // Only update fields that have actually changed from current form data\n      const currentEmploymentInfo: EmploymentInformationData = {\n        employment_status: formData.employment_status || '',\n        occupation_code: formData.occupation_code || '',\n        occupation_title: formData.occupation_title || '',\n      };\n\n      Object.entries(value).forEach(([field, fieldValue]) => {\n        if (currentEmploymentInfo[field as keyof EmploymentInformationData] !== fieldValue) {\n          onChange(field, fieldValue);\n        }\n      });\n    },\n    [onChange, formData.employment_status, formData.occupation_code, formData.occupation_title]\n  );\n\n  return (\n    <div className=\"rounded-lg border border-gray-300 bg-white p-6 shadow-xs dark:border-gray-600 dark:bg-gray-800\">\n      <div className=\"space-y-6\">\n        <div>\n          <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200\">\n            Personal Information\n          </h2>\n          <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">\n            Basic personal details, birth information, and educational/employment background.\n          </p>\n        </div>\n\n        <div className=\"space-y-8\">\n          {/* PhilSys Card Number */}\n          <PhilSysCardField\n            mode={mode}\n            value={formData.philsys_card_number || ''}\n            onChange={value => onChange('philsys_card_number', value)}\n            error={errors.philsys_card_number}\n          />\n\n          {/* Basic Information Component - Names, Sex, Civil Status, Citizenship */}\n          <BasicInformation\n            mode={mode}\n            value={basicInfoValue}\n            onChange={handleBasicInfoChange}\n            errors={errors}\n          />\n\n          {/* Birth Information */}\n          <BirthInformation\n            mode={mode}\n            value={React.useMemo(\n              () => ({\n                birthdate: formData.birthdate || '',\n                birth_place_name: formData.birth_place_name || '',\n                birth_place_code: formData.birth_place_code || '',\n              }),\n              [formData.birthdate, formData.birth_place_name, formData.birth_place_code]\n            )}\n            onChange={handleBirthInfoChange}\n            errors={errors}\n          />\n\n          {/* Education Information */}\n          <EducationInformation\n            mode={mode}\n            value={React.useMemo(\n              () => ({\n                education_attainment: formData.education_attainment || '',\n                is_graduate: formData.is_graduate ? 'yes' : 'no',\n              }),\n              [formData.education_attainment, formData.is_graduate]\n            )}\n            onChange={handleEducationInfoChange}\n            errors={errors}\n          />\n\n          {/* Employment Information */}\n          <EmploymentInformation\n            mode={mode}\n            value={React.useMemo(\n              () => ({\n                employment_status: formData.employment_status || '',\n                occupation_code: formData.occupation_code || '',\n                occupation_title: formData.occupation_title || '',\n              }),\n              [formData.employment_status, formData.occupation_code, formData.occupation_title]\n            )}\n            onChange={handleEmploymentInfoChange}\n            errors={errors}\n            onPsocSearch={onPsocSearch}\n            psocOptions={psocOptions}\n            psocLoading={psocLoading}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/PersonalInformation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/PhysicalPersonalDetails/FormField/MotherMaidenName.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":49,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1262,1302],"text":"\n          Mother&apos;s Maiden Name\n        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1262,1302],"text":"\n          Mother&lsquo;s Maiden Name\n        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1262,1302],"text":"\n          Mother&#39;s Maiden Name\n        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1262,1302],"text":"\n          Mother&rsquo;s Maiden Name\n        "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport { InputField } from '@/components';\nimport type { FormMode } from '@/types';\n\nexport interface MotherMaidenNameData {\n  mother_maiden_first: string;\n  mother_maiden_middle: string;\n  mother_maiden_last: string;\n}\n\nexport interface MotherMaidenNameProps {\n  /** Form mode - determines if field is editable or read-only */\n  mode?: FormMode;\n  value: MotherMaidenNameData;\n  onChange: (value: MotherMaidenNameData) => void;\n  errors: Record<string, string>;\n  className?: string;\n}\n\nexport function MotherMaidenName({\n  mode = 'create',\n  value,\n  onChange,\n  errors,\n  className = '',\n}: MotherMaidenNameProps) {\n  const handleChange = (field: keyof MotherMaidenNameData, fieldValue: string) => {\n    onChange({\n      ...value,\n      [field]: fieldValue,\n    });\n  };\n\n  // Helper function to format full maiden name\n  const formatFullMaidenName = () => {\n    const parts = [\n      value.mother_maiden_first?.trim(),\n      value.mother_maiden_middle?.trim(),\n      value.mother_maiden_last?.trim(),\n    ].filter(Boolean);\n    return parts.length > 0 ? parts.join(' ') : '—';\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <div>\n        <h4 className=\"text-lg font-medium text-gray-800 dark:text-gray-200\">\n          Mother's Maiden Name\n        </h4>\n        <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">\n          Complete maiden name of mother for identification purposes.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-2 lg:grid-cols-4\">\n        {mode === 'view' ? (\n          <div className=\"col-span-full\">\n            <InputField\n              label=\"Mother's Full Maiden Name\"\n              labelSize=\"sm\"\n              mode={mode}\n              inputProps={{\n                value: formatFullMaidenName(),\n                readOnly: true,\n              }}\n            />\n          </div>\n        ) : (\n          <>\n            <InputField\n              label=\"First Name\"\n              labelSize=\"sm\"\n              errorMessage={errors.mother_maiden_first}\n              mode={mode}\n              inputProps={{\n                value: value.mother_maiden_first,\n                onChange: e => handleChange('mother_maiden_first', e.target.value),\n                placeholder: \"Mother's maiden first name\",\n                error: errors.mother_maiden_first,\n              }}\n            />\n\n            <InputField\n              label=\"Middle Name\"\n              labelSize=\"sm\"\n              errorMessage={errors.mother_maiden_middle}\n              mode={mode}\n              inputProps={{\n                value: value.mother_maiden_middle,\n                onChange: e => handleChange('mother_maiden_middle', e.target.value),\n                placeholder: \"Mother's maiden middle name\",\n                error: errors.mother_maiden_middle,\n              }}\n            />\n\n            <InputField\n              label=\"Last Name\"\n              labelSize=\"sm\"\n              errorMessage={errors.mother_maiden_last}\n              mode={mode}\n              inputProps={{\n                value: value.mother_maiden_last,\n                onChange: e => handleChange('mother_maiden_last', e.target.value),\n                placeholder: \"Mother's maiden last name\",\n                error: errors.mother_maiden_last,\n              }}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default MotherMaidenName;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/PhysicalPersonalDetails/FormField/PhysicalCharacteristics.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1329,1332],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1329,1332],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1395,1398],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1395,1398],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1459,1462],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1459,1462],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1529,1532],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1529,1532],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport { InputField, SelectField } from '@/components';\nimport {\n  BLOOD_TYPE_OPTIONS_WITH_DEFAULT,\n  ETHNICITY_OPTIONS_WITH_DEFAULT,\n  RELIGION_OPTIONS_WITH_DEFAULT,\n  CITIZENSHIP_OPTIONS_WITH_DEFAULT,\n} from '@/lib/constants/resident-enums';\nimport type { FormMode } from '@/types';\n\nexport interface PhysicalCharacteristicsData {\n  blood_type: string;\n  complexion: string;\n  height: string;\n  weight: string;\n  citizenship: string;\n  ethnicity: string;\n  religion: string;\n  religion_others_specify?: string;\n}\n\nexport interface PhysicalCharacteristicsProps {\n  /** Form mode - determines if field is editable or read-only */\n  mode?: FormMode;\n  value: PhysicalCharacteristicsData;\n  onChange: (value: PhysicalCharacteristicsData) => void;\n  errors: Record<string, string>;\n  className?: string;\n}\n\nexport function PhysicalCharacteristics({\n  mode = 'create',\n  value,\n  onChange,\n  errors,\n  className = '',\n}: PhysicalCharacteristicsProps) {\n  const handleChange = (field: keyof PhysicalCharacteristicsData, fieldValue: string) => {\n    onChange({\n      ...value,\n      [field]: fieldValue,\n    });\n  };\n\n  // Use pre-defined options - blood_type and citizenship have database defaults, religion and ethnicity have \"Select\" options\n  const bloodTypeOptions = BLOOD_TYPE_OPTIONS_WITH_DEFAULT as any;\n  const ethnicityOptions = ETHNICITY_OPTIONS_WITH_DEFAULT as any;\n  const religionOptions = RELIGION_OPTIONS_WITH_DEFAULT as any;\n  const citizenshipOptions = CITIZENSHIP_OPTIONS_WITH_DEFAULT as any;\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <div>\n        <h4 className=\"text-lg font-medium text-gray-800 dark:text-gray-200\">\n          Physical Characteristics\n        </h4>\n        <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">\n          Physical attributes and personal identifiers.\n        </p>\n      </div>\n\n      {/* All Fields in One Grid */}\n      <div className=\"grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-2 lg:grid-cols-4\">\n        <SelectField\n          label=\"Blood Type\"\n          labelSize=\"sm\"\n          errorMessage={errors.blood_type}\n          mode={mode}\n          selectProps={{\n            placeholder: 'Select blood type...',\n            options: bloodTypeOptions,\n            value: value.blood_type,\n            onSelect: option => handleChange('blood_type', option?.value || ''),\n          }}\n        />\n\n        <InputField\n          label=\"Complexion\"\n          labelSize=\"sm\"\n          errorMessage={errors.complexion}\n          mode={mode}\n          inputProps={{\n            value: value.complexion,\n            onChange: e => handleChange('complexion', e.target.value),\n            placeholder: 'e.g., Fair, Medium, Dark',\n            error: errors.complexion,\n          }}\n        />\n\n        <InputField\n          label=\"Height (cm)\"\n          labelSize=\"sm\"\n          errorMessage={errors.height}\n          mode={mode}\n          inputProps={{\n            type: 'number',\n            value: value.height,\n            onChange: e => handleChange('height', e.target.value),\n            placeholder: '170',\n            error: errors.height,\n          }}\n        />\n\n        <InputField\n          label=\"Weight (kg)\"\n          labelSize=\"sm\"\n          errorMessage={errors.weight}\n          mode={mode}\n          inputProps={{\n            type: 'number',\n            value: value.weight,\n            onChange: e => handleChange('weight', e.target.value),\n            placeholder: '65',\n            error: errors.weight,\n          }}\n        />\n\n        <SelectField\n          label=\"Citizenship\"\n          labelSize=\"sm\"\n          errorMessage={errors.citizenship}\n          mode={mode}\n          selectProps={{\n            placeholder: 'Select citizenship...',\n            options: citizenshipOptions,\n            value: value.citizenship || 'filipino',\n            onSelect: option => handleChange('citizenship', option?.value || 'filipino'),\n          }}\n        />\n\n        <SelectField\n          label=\"Ethnicity\"\n          labelSize=\"sm\"\n          errorMessage={errors.ethnicity}\n          mode={mode}\n          selectProps={{\n            placeholder: 'Select ethnicity...',\n            options: ethnicityOptions,\n            value: value.ethnicity,\n            onSelect: option => handleChange('ethnicity', option?.value || ''),\n          }}\n        />\n\n        <SelectField\n          label=\"Religion\"\n          labelSize=\"sm\"\n          errorMessage={errors.religion}\n          mode={mode}\n          selectProps={{\n            placeholder: 'Select religion...',\n            options: religionOptions,\n            value: value.religion,\n            onSelect: option => handleChange('religion', option?.value || ''),\n          }}\n        />\n\n        {/* Conditional Religion Other Specify - shows next to religion when religion = 'others' */}\n        {value.religion === 'others' && (\n          <InputField\n            label=\"Specify Religion\"\n            required\n            labelSize=\"sm\"\n            errorMessage={errors.religion_others_specify}\n            mode={mode}\n            inputProps={{\n              value: value.religion_others_specify || '',\n              onChange: e => handleChange('religion_others_specify', e.target.value),\n              placeholder: 'Please specify religion',\n              required: true,\n            }}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default PhysicalCharacteristics;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/PhysicalPersonalDetails/FormField/VotingInformation.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[865,868],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[865,868],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport { InputField, ControlFieldSet } from '@/components';\nimport { Radio } from '@/components/atoms/Field/Control/Radio/Radio';\nimport type { FormMode } from '@/types';\n\nexport interface VotingInformationData {\n  is_voter: string; // 'yes' | 'no' (defaults to 'no')\n  is_resident_voter: string; // 'yes' | 'no' (defaults to 'no')\n  last_voted_date: string;\n}\n\nexport interface VotingInformationProps {\n  /** Form mode - determines if field is editable or read-only */\n  mode?: FormMode;\n  value: VotingInformationData;\n  onChange: (value: VotingInformationData) => void;\n  errors: Record<string, string>;\n  className?: string;\n}\n\nexport function VotingInformation({\n  mode = 'create',\n  value,\n  onChange,\n  errors,\n  className = '',\n}: VotingInformationProps) {\n  const handleChange = (field: keyof VotingInformationData, fieldValue: any) => {\n    onChange({\n      ...value,\n      [field]: fieldValue,\n    });\n  };\n\n  // Yes/No options for voter status\n  const VOTER_STATUS_OPTIONS = [\n    { value: 'yes', label: 'Yes' },\n    { value: 'no', label: 'No' },\n  ];\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <div>\n        <h4 className=\"text-lg font-medium text-gray-800 dark:text-gray-200\">Voting Information</h4>\n        <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">\n          Voter registration and participation details.\n        </p>\n      </div>\n\n      {/* All Fields in One Grid */}\n      <div className=\"grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-2 lg:grid-cols-4\">\n        <ControlFieldSet\n          type=\"radio\"\n          label=\"Registered Voter?\"\n          labelSize=\"sm\"\n          radioName=\"is_voter\"\n          radioValue={value.is_voter || 'no'}\n          onRadioChange={(selectedValue: string) => handleChange('is_voter', selectedValue)}\n          errorMessage={errors.is_voter}\n          orientation=\"horizontal\"\n          spacing=\"sm\"\n          mode={mode}\n        >\n          {VOTER_STATUS_OPTIONS.map(option => (\n            <Radio\n              key={option.value}\n              value={option.value}\n              label={option.label}\n              style=\"button\"\n              buttonProps={{\n                variant: 'neutral-outline',\n                size: 'lg',\n              }}\n            />\n          ))}\n        </ControlFieldSet>\n\n        <ControlFieldSet\n          type=\"radio\"\n          label=\"Resident Voter?\"\n          labelSize=\"sm\"\n          radioName=\"is_resident_voter\"\n          radioValue={value.is_resident_voter || 'no'}\n          onRadioChange={(selectedValue: string) =>\n            handleChange('is_resident_voter', selectedValue)\n          }\n          errorMessage={errors.is_resident_voter}\n          orientation=\"horizontal\"\n          spacing=\"sm\"\n          mode={mode}\n        >\n          {VOTER_STATUS_OPTIONS.map(option => (\n            <Radio\n              key={option.value}\n              value={option.value}\n              label={option.label}\n              style=\"button\"\n              buttonProps={{\n                variant: 'neutral-outline',\n                size: 'lg',\n              }}\n            />\n          ))}\n        </ControlFieldSet>\n\n        <InputField\n          label=\"Last Voted Year\"\n          labelSize=\"sm\"\n          errorMessage={errors.last_voted_date}\n          mode={mode}\n          inputProps={{\n            type: 'number',\n            value: value.last_voted_date,\n            onChange: e => handleChange('last_voted_date', e.target.value),\n            placeholder: '2024',\n            min: '1900',\n            max: new Date().getFullYear().toString(),\n            disabled: value.is_voter !== 'yes' && value.is_resident_voter !== 'yes',\n            error: errors.last_voted_date,\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VotingInformation;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/PhysicalPersonalDetails/PhysicalPersonalDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/PhysicalPersonalDetails/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/SectoralInformation/FormField/SectoralClassifications.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'onChange' and 'value'. Either include them or remove the dependency array. If 'onChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":120,"column":6,"nodeType":"ArrayExpression","endLine":120,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [calculatedFlags, onChange, value]","fix":{"range":[4491,4508],"text":"[calculatedFlags, onChange, value]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/SectoralInformation/SectoralInformation.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/SectoralInformation/SectoralInformation.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'errors' is defined but never used. Allowed unused args must match /^_/u.","line":56,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2334,2337],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2334,2337],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3178,3181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3178,3181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport type { FormMode } from '@/types';\n\nimport SectoralClassifications, {\n  SectoralInformation,\n  SectoralContext,\n} from './FormField/SectoralClassifications';\n\nexport interface SectoralInformationFormProps {\n  /** Form mode - determines if field is editable or read-only */\n  mode?: FormMode;\n  formData: {\n    // Sectoral Information (snake_case matching database)\n    is_labor_force_employed?: boolean;\n    is_unemployed?: boolean;\n    is_overseas_filipino?: boolean;\n    is_person_with_disability?: boolean;\n    is_out_of_school_children?: boolean;\n    is_out_of_school_youth?: boolean;\n    is_senior_citizen?: boolean;\n    is_registered_senior_citizen?: boolean;\n    is_solo_parent?: boolean;\n    is_indigenous_people?: boolean;\n    is_migrant?: boolean;\n    // Context data for auto-calculation\n    birthdate?: string;\n    employment_status?: string;\n    education_attainment?: string;\n    civil_status?: string;\n    ethnicity?: string;\n  };\n  onChange: (field: string | number | symbol, value: string | number | boolean | null) => void;\n  errors: Record<string, string>;\n}\n\n// Field mapping configuration (matches database schema exactly)\nconst SECTORAL_FIELD_MAPPING = [\n  { formKey: 'is_labor_force_employed', dbKey: 'is_labor_force_employed' },\n  { formKey: 'is_unemployed', dbKey: 'is_unemployed' },\n  { formKey: 'is_overseas_filipino', dbKey: 'is_overseas_filipino_worker' },\n  { formKey: 'is_person_with_disability', dbKey: 'is_person_with_disability' },\n  { formKey: 'is_out_of_school_children', dbKey: 'is_out_of_school_children' },\n  { formKey: 'is_out_of_school_youth', dbKey: 'is_out_of_school_youth' },\n  { formKey: 'is_senior_citizen', dbKey: 'is_senior_citizen' },\n  { formKey: 'is_registered_senior_citizen', dbKey: 'is_registered_senior_citizen' },\n  { formKey: 'is_solo_parent', dbKey: 'is_solo_parent' },\n  { formKey: 'is_indigenous_people', dbKey: 'is_indigenous_people' },\n  { formKey: 'is_migrant', dbKey: 'is_migrant' },\n];\n\nexport function SectoralInformationForm({\n  mode = 'create',\n  formData,\n  onChange,\n  errors,\n}: SectoralInformationFormProps) {\n  // Map form data to SectoralInfo component props using configuration\n  const sectoralValue: SectoralInformation = SECTORAL_FIELD_MAPPING.reduce(\n    (acc, field) => ({\n      ...acc,\n      [field.dbKey]: (formData as any)[field.formKey] || false,\n    }),\n    {} as SectoralInformation\n  );\n\n  // Context for auto-calculation\n  const sectoralContext: SectoralContext = React.useMemo(\n    () => ({\n      birthdate: formData.birthdate,\n      employment_status: formData.employment_status,\n      highest_educational_attainment: formData.education_attainment,\n      marital_status: formData.civil_status,\n      ethnicity: formData.ethnicity,\n    }),\n    [\n      formData.birthdate,\n      formData.employment_status,\n      formData.education_attainment,\n      formData.civil_status,\n      formData.ethnicity,\n    ]\n  );\n\n  // Handle changes from SectoralInfo component using configuration\n  const handleSectoralChange = React.useCallback(\n    (value: SectoralInformation) => {\n      SECTORAL_FIELD_MAPPING.forEach(field => {\n        onChange(field.formKey, (value as any)[field.dbKey]);\n      });\n    },\n    [onChange]\n  );\n\n  return (\n    <div className=\"rounded-lg border border-gray-300 bg-white p-6 shadow-xs dark:border-gray-600 dark:bg-gray-800\">\n      <div className=\"space-y-6\">\n        <div>\n          <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200\">\n            Sectoral Information\n          </h2>\n          <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">\n            Sectoral classifications and group memberships. Some fields are automatically calculated\n            based on age, employment, and education data.\n          </p>\n        </div>\n\n        <SectoralClassifications\n          value={sectoralValue}\n          onChange={handleSectoralChange}\n          context={sectoralContext}\n          mode={mode}\n          disabled={mode === 'view'}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default SectoralInformationForm;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/SectoralInformation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/Resident/utils/fieldRenderers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/FormSection/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/LoginForm/LoginForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/LoginForm/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/Navigation/Navigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/Navigation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/PopulationPyramid/PopulationPyramid.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/PopulationPyramid/PopulationPyramid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/PopulationPyramid/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/ProtectedRoute/ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/ProtectedRoute/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/Sidebar/Sidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Link' is defined but never used.","line":11,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'usePathname' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Sidebar Component\n * A comprehensive sidebar navigation component for the Citizenly application\n * Built following atomic design principles and Philippines government UI standards\n */\n\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { clsx } from 'clsx';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport React, { useState, useEffect } from 'react';\n\nimport Navigation, { type NavigationItem } from '../Navigation/Navigation';\n// Icon component removed - using inline SVG or icon library instead\n\n// Sidebar variant styles using CVA\nconst sidebarVariants = cva(\n  // Base styles - always applied\n  'relative flex flex-col bg-white dark:bg-gray-900 border-r border-gray-200 dark:border-gray-800 transition-all duration-300 ease-in-out',\n  {\n    variants: {\n      // Width variants\n      size: {\n        sm: 'w-16', // Collapsed/icon-only\n        md: 'w-64', // Standard width\n        lg: 'w-80', // Wide sidebar\n        xl: 'w-96', // Extra wide\n      },\n      // Position variants\n      position: {\n        fixed: 'fixed inset-y-0 left-0 z-50',\n        sticky: 'sticky top-0 h-screen',\n        relative: 'relative',\n      },\n      // Visibility on mobile\n      mobile: {\n        hidden: 'lg:flex hidden',\n        overlay: 'fixed inset-0 z-50 lg:relative lg:inset-auto',\n        push: 'relative',\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n      position: 'sticky',\n      mobile: 'hidden',\n    },\n  }\n);\n\n// Header section component for the sidebar\ninterface SidebarHeaderProps {\n  logo?: React.ReactNode;\n  title?: string;\n  subtitle?: string;\n  isCollapsed?: boolean;\n  className?: string;\n}\n\nfunction SidebarHeader({ logo, title, subtitle, isCollapsed, className }: SidebarHeaderProps) {\n  return (\n    <div\n      className={clsx(\n        'flex items-center border-b border-gray-200 px-6 py-4 dark:border-gray-700',\n        className\n      )}\n    >\n      {logo && <div className=\"flex-shrink-0\">{logo}</div>}\n      {!isCollapsed && (\n        <div className=\"ml-3 min-w-0 flex-1\">\n          {title && (\n            <h1 className=\"truncate text-lg font-semibold text-gray-900 dark:text-gray-100\">\n              {title}\n            </h1>\n          )}\n          {subtitle && (\n            <p className=\"truncate text-sm text-gray-500 dark:text-gray-400\">{subtitle}</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Footer section component for the sidebar\ninterface SidebarFooterProps {\n  children?: React.ReactNode;\n  isCollapsed?: boolean;\n  className?: string;\n}\n\nfunction SidebarFooter({ children, isCollapsed, className }: SidebarFooterProps) {\n  if (!children) return null;\n\n  return (\n    <div\n      className={clsx('mt-auto border-t border-gray-200 px-6 py-4 dark:border-gray-700', className)}\n    >\n      {!isCollapsed ? children : null}\n    </div>\n  );\n}\n\n// Toggle button component\ninterface ToggleButtonProps {\n  isCollapsed: boolean;\n  onToggle: () => void;\n  className?: string;\n}\n\nfunction ToggleButton({ isCollapsed, onToggle, className }: ToggleButtonProps) {\n  return (\n    <button\n      type=\"button\"\n      onClick={onToggle}\n      className={clsx(\n        'absolute top-6 -right-3 z-10 flex h-6 w-6 items-center justify-center rounded-full border border-gray-200 bg-white text-gray-400 transition-colors hover:text-gray-600 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none dark:border-gray-700 dark:bg-gray-900 dark:text-gray-500 dark:hover:text-gray-300 dark:focus:ring-offset-gray-900',\n        className\n      )}\n      aria-label={isCollapsed ? 'Expand sidebar' : 'Collapse sidebar'}\n    >\n      <span\n        className={clsx('transition-transform duration-200', {\n          'rotate-180': isCollapsed,\n        })}\n      >\n        {/* Icon placeholder - replace with actual icon library */}←\n      </span>\n    </button>\n  );\n}\n\n// Mobile backdrop overlay\ninterface MobileBackdropProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nfunction MobileBackdrop({ isOpen, onClose }: MobileBackdropProps) {\n  if (!isOpen) return null;\n\n  return (\n    <div\n      className=\"bg-opacity-75 dark:bg-opacity-75 fixed inset-0 z-40 bg-gray-600 transition-opacity lg:hidden dark:bg-gray-900\"\n      onClick={onClose}\n      aria-hidden=\"true\"\n    />\n  );\n}\n\n// Main Sidebar component interface\nexport interface SidebarProps extends VariantProps<typeof sidebarVariants> {\n  // Navigation items\n  navigationItems?: NavigationItem[];\n  bottomNavigationItems?: NavigationItem[];\n\n  // Header configuration\n  logo?: React.ReactNode;\n  title?: string;\n  subtitle?: string;\n\n  // Footer content\n  footer?: React.ReactNode;\n\n  // Collapse functionality\n  collapsible?: boolean;\n  defaultCollapsed?: boolean;\n  onCollapsedChange?: (collapsed: boolean) => void;\n\n  // Mobile functionality\n  mobileOpen?: boolean;\n  onMobileToggle?: () => void;\n\n  // Customization\n  className?: string;\n  children?: React.ReactNode;\n\n  // Additional navigation props\n  showSubmenu?: boolean;\n  showIcons?: boolean;\n}\n\nexport default function Sidebar({\n  navigationItems,\n  bottomNavigationItems,\n  logo,\n  title = 'Citizenly',\n  subtitle = 'Barangay Management System',\n  footer,\n  collapsible = true,\n  defaultCollapsed = false,\n  onCollapsedChange,\n  size = 'md',\n  position = 'sticky',\n  mobile = 'hidden',\n  mobileOpen = false,\n  onMobileToggle,\n  className,\n  children,\n  showSubmenu = true,\n  showIcons = true,\n}: SidebarProps) {\n  // Internal state for collapse\n  const [isCollapsed, setIsCollapsed] = useState(defaultCollapsed);\n\n  // Handle collapse toggle\n  const handleToggle = () => {\n    const newCollapsed = !isCollapsed;\n    setIsCollapsed(newCollapsed);\n    onCollapsedChange?.(newCollapsed);\n  };\n\n  // Responsive collapse based on screen size\n  useEffect(() => {\n    const handleResize = () => {\n      if (window.innerWidth < 1024) {\n        // lg breakpoint\n        setIsCollapsed(true);\n      } else if (collapsible) {\n        setIsCollapsed(defaultCollapsed);\n      }\n    };\n\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [defaultCollapsed, collapsible]);\n\n  // Determine effective size based on collapse state\n  const effectiveSize = isCollapsed && collapsible ? 'sm' : size;\n\n  return (\n    <>\n      {/* Mobile backdrop */}\n      <MobileBackdrop isOpen={mobileOpen} onClose={() => onMobileToggle?.()} />\n\n      {/* Sidebar container */}\n      <aside\n        className={clsx(\n          sidebarVariants({ size: effectiveSize, position, mobile }),\n          {\n            'translate-x-0 transform': mobileOpen,\n            '-translate-x-full transform lg:translate-x-0': !mobileOpen && mobile === 'overlay',\n          },\n          className\n        )}\n        aria-label=\"Sidebar navigation\"\n      >\n        {/* Collapse toggle button */}\n        {collapsible && position !== 'fixed' && (\n          <ToggleButton isCollapsed={isCollapsed} onToggle={handleToggle} />\n        )}\n\n        {/* Sidebar header */}\n        <SidebarHeader\n          logo={logo}\n          title={title}\n          subtitle={subtitle}\n          isCollapsed={isCollapsed && collapsible}\n        />\n\n        {/* Navigation content */}\n        <div className=\"flex min-h-0 flex-1 flex-col py-4\">\n          {children ? (\n            // Custom content\n            <div className=\"flex-1 px-6\">{children}</div>\n          ) : (\n            // Default navigation\n            <div className=\"flex-1 px-6\">\n              <Navigation\n                items={navigationItems}\n                bottomItems={bottomNavigationItems}\n                showSubmenu={showSubmenu && !(isCollapsed && collapsible)}\n                showIcons={showIcons}\n                className=\"h-full\"\n              />\n            </div>\n          )}\n        </div>\n\n        {/* Sidebar footer */}\n        <SidebarFooter isCollapsed={isCollapsed && collapsible}>{footer}</SidebarFooter>\n      </aside>\n    </>\n  );\n}\n\n// Export components\nexport { SidebarHeader, SidebarFooter, ToggleButton };\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/Sidebar/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/Table/Table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/Table/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/UserProfile/UserProfile.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/UserProfile/UserProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/UserProfile/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/organisms/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/templates/AppShell/AppShell.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/templates/AppShell/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/templates/DashboardLayout/DashboardLayout.tsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":52},{"ruleId":"import/order","severity":1,"message":"`next/link` import should occur before import of `react`","line":15,"column":1,"nodeType":"ImportDeclaration","endLine":15,"endColumn":30},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":244,"column":19,"nodeType":"CallExpression","messageId":"unexpected","endLine":244,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\n\n// Custom hook to handle client-side mounting\nfunction useIsClient() {\n  const [isClient, setIsClient] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  return isClient;\n}\nimport Link from 'next/link';\nimport { Toaster } from 'react-hot-toast';\n\nimport { Navigation } from '@/components';\nimport SkipNavigation from '@/components/atoms/SkipNavigation';\nimport { InlineCommandMenu } from '@/components/molecules/CommandMenu/InlineCommandMenu';\nimport { useAuth } from '@/contexts';\nimport { logger, logError } from '@/lib';\nimport { supabase } from '@/lib/data/supabase';\n\n// User dropdown component with details (from original dashboard)\nfunction UserDropdown() {\n  const isClient = useIsClient();\n  const { userProfile, role, signOut } = useAuth();\n  const [isOpen, setIsOpen] = useState(false);\n  const [barangayInfo, setBarangayInfo] = useState<string>('Loading...');\n  const dropdownRef = React.useRef<HTMLDivElement>(null);\n  const buttonRef = React.useRef<HTMLButtonElement>(null);\n\n  // Load barangay information from database\n  const loadBarangayInfo = async (barangayCode: string) => {\n    try {\n      // Check if user is authenticated first\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n      if (!session) {\n        logger.debug('Cannot load barangay info - user not authenticated', { barangayCode });\n        setBarangayInfo(`Barangay ${barangayCode}`);\n        return;\n      }\n\n      logger.debug('Loading barangay info', { barangayCode });\n\n      // Use API endpoint to get full address hierarchy (avoids complex nested query issues)\n      const response = await fetch(`/api/psgc/lookup?code=${encodeURIComponent(barangayCode)}`);\n\n      let barangayData = null;\n      let error = null;\n\n      if (!response.ok) {\n        error = { message: `API request failed: ${response.status}` };\n      } else {\n        const result = await response.json();\n        barangayData = result.data;\n        error = result.error;\n      }\n\n      if (error) {\n        // Don't log error if it's just an authentication issue\n        if (\n          error.code === 'PGRST001' ||\n          error.message?.includes('permission') ||\n          error.message?.includes('JWT') ||\n          error.message?.includes('unauthorized') ||\n          error.code === '401'\n        ) {\n          logger.debug('Cannot load barangay info - user not authenticated', { barangayCode });\n        } else {\n          // Only log non-authentication related errors, and use debug level for less critical errors\n          logger.debug('Error loading barangay info', {\n            error: error.message,\n            code: error.code,\n            barangayCode,\n          });\n        }\n        setBarangayInfo(`Barangay ${barangayCode}`);\n        return;\n      }\n\n      if (barangayData) {\n        // API returns flattened structure\n        const barangayName = barangayData.name || barangayData.barangay_name;\n        const cityName = barangayData.city_name;\n        const cityType = barangayData.city_type;\n        const provinceName = barangayData.province_name;\n\n        const fullAddress = `${barangayName}, ${cityName} (${cityType}), ${provinceName}`;\n        logger.debug('Loaded barangay info from API', { address: fullAddress });\n        setBarangayInfo(fullAddress);\n      } else {\n        setBarangayInfo(`Barangay ${barangayCode}`);\n      }\n    } catch (error) {\n      // Don't log critical errors for authentication-related issues in dashboard\n      logger.debug('Error loading barangay info (caught in catch)', {\n        error: error instanceof Error ? error.message : String(error),\n        barangayCode,\n      });\n      setBarangayInfo(`Barangay ${barangayCode}`);\n    }\n  };\n\n  // Load barangay info when userProfile changes\n  useEffect(() => {\n    if (userProfile?.barangay_code) {\n      loadBarangayInfo(userProfile.barangay_code);\n    }\n  }, [userProfile?.barangay_code]);\n\n  // Handle click outside and Escape key (only on client)\n  useEffect(() => {\n    if (!isClient) return;\n\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && isOpen) {\n        setIsOpen(false);\n        buttonRef.current?.focus();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n      document.addEventListener('keydown', handleEscape);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [isOpen, isClient]);\n\n  const handleLogout = async () => {\n    try {\n      await signOut();\n      if (typeof window !== 'undefined') {\n        window.location.href = '/login';\n      }\n    } catch (error) {\n      logError(error as Error, 'SIGN_OUT_ERROR');\n    }\n  };\n\n  if (!userProfile) return null;\n\n  return (\n    <div className=\"relative\" ref={dropdownRef}>\n      {/* Dropdown trigger */}\n      <button\n        ref={buttonRef}\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"flex items-center gap-2 rounded-sm px-2 py-1 transition-colors hover:bg-gray-100 dark:hover:bg-gray-800\"\n        aria-expanded={isOpen}\n        aria-haspopup=\"true\"\n        aria-label=\"User menu\"\n      >\n        <div\n          className=\"size-8 rounded-full bg-cover bg-center bg-no-repeat\"\n          style={{\n            backgroundImage:\n              'url(\\'data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"%3E%3Ccircle cx=\"16\" cy=\"16\" r=\"16\" fill=\"%23e5e7eb\"%2F%3E%3Ctext x=\"16\" y=\"20\" text-anchor=\"middle\" fill=\"%236b7280\" font-size=\"14\"%3EU%3C%2Ftext%3E%3C%2Fsvg%3E\\')',\n          }}\n        ></div>\n        <div className=\"font-montserrat text-sm font-medium text-gray-800 dark:text-gray-200 dark:text-gray-800\">\n          {`${userProfile.first_name} ${userProfile.last_name}`}\n        </div>\n        <div className=\"size-4 text-gray-600 dark:text-gray-400\">\n          <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d={isOpen ? 'M5 15l7-7 7 7' : 'M19 9l-7 7-7-7'}\n            />\n          </svg>\n        </div>\n      </button>\n\n      {/* Dropdown menu */}\n      {isOpen && (\n        <>\n          {/* Dropdown content - no backdrop needed with proper event handling */}\n          <div\n            className=\"absolute right-0 z-20 mt-2 w-72 rounded-lg border border-gray-200 bg-white shadow-xl dark:border-gray-700 dark:bg-gray-900\"\n            role=\"menu\"\n            aria-orientation=\"vertical\"\n            aria-labelledby=\"user-menu-button\"\n          >\n            {/* User info header */}\n            <div className=\"border-b border-gray-100 p-4 dark:border-gray-700\">\n              <div className=\"flex items-center gap-3\">\n                <div\n                  className=\"size-12 rounded-full bg-cover bg-center bg-no-repeat\"\n                  style={{\n                    backgroundImage:\n                      'url(\\'data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\"%3E%3Ccircle cx=\"24\" cy=\"24\" r=\"24\" fill=\"%23e5e7eb\"%2F%3E%3Ctext x=\"24\" y=\"30\" text-anchor=\"middle\" fill=\"%236b7280\" font-size=\"20\"%3EU%3C%2Ftext%3E%3C%2Fsvg%3E\\')',\n                  }}\n                ></div>\n                <div>\n                  <div className=\"font-montserrat font-semibold text-gray-900 dark:text-gray-100 dark:text-gray-900\">\n                    {`${userProfile.first_name} ${userProfile.last_name}`}\n                  </div>\n                  <div className=\"font-montserrat text-sm text-gray-600 dark:text-gray-400\">\n                    {userProfile.email}\n                  </div>\n                  <div className=\"font-montserrat mt-1 text-xs text-gray-600 dark:text-gray-400\">\n                    {role?.name || 'User'}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Barangay info */}\n            <div className=\"border-b border-gray-100 p-4 dark:border-gray-700\">\n              <div className=\"font-montserrat mb-2 text-xs font-medium text-gray-500 dark:text-gray-400\">\n                BARANGAY ASSIGNMENT\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"size-2 rounded-full bg-green-500 dark:bg-green-400\"></div>\n                <div className=\"font-montserrat text-sm text-gray-800 dark:text-gray-200\">\n                  {barangayInfo}\n                </div>\n              </div>\n              <div className=\"font-montserrat mt-1 text-xs text-gray-500 dark:text-gray-400\">\n                Code: {userProfile.barangay_code}\n              </div>\n            </div>\n\n            {/* Actions */}\n            <div className=\"p-2\">\n              <button\n                onClick={() => {\n                  // Add profile editing functionality later\n                  alert('Profile editing coming soon!');\n                }}\n                className=\"font-montserrat w-full rounded-sm px-3 py-2 text-left text-sm text-gray-700 transition-colors hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-800\"\n              >\n                Edit Profile\n              </button>\n              <Link href=\"/settings\">\n                <button className=\"font-montserrat w-full rounded-sm px-3 py-2 text-left text-sm text-gray-700 transition-colors hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-800\">\n                  Settings\n                </button>\n              </Link>\n              <hr className=\"my-2 border-gray-200 dark:border-gray-700\" />\n              <button\n                onClick={handleLogout}\n                className=\"font-montserrat w-full rounded-sm px-3 py-2 text-left text-sm text-red-600 transition-colors hover:bg-red-50 dark:text-red-400 dark:hover:bg-red-900/20\"\n              >\n                Sign Out\n              </button>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\ninterface DashboardLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function DashboardLayout({ children }: DashboardLayoutProps) {\n  return (\n    <div className=\"min-h-screen bg-white dark:bg-gray-800 dark:bg-gray-900\">\n      {/* Skip Navigation */}\n      <SkipNavigation skipTo=\"#main-content\" />\n\n      {/* Sidebar */}\n      <aside\n        id=\"navigation\"\n        className=\"fixed top-0 left-0 h-full w-56 border-r border-gray-200 border-gray-300 bg-gray-50 dark:border-gray-600 dark:border-gray-700 dark:bg-gray-800\"\n        aria-label=\"Main navigation\"\n      >\n        <div className=\"flex h-full flex-col\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between border-b border-gray-200 border-gray-300 px-4 py-3 dark:border-gray-600 dark:border-gray-700\">\n            <h1 className=\"font-montserrat text-xl font-semibold text-gray-600 dark:text-gray-300\">\n              Citizenly\n            </h1>\n            <div className=\"flex gap-1\">\n              <div className=\"rounded bg-gray-200 p-0.5 dark:bg-gray-600\">\n                <div className=\"size-5 rounded-sm bg-gray-400 dark:bg-gray-500\"></div>\n              </div>\n              <div className=\"rounded bg-gray-200 p-0.5 dark:bg-gray-600\">\n                <div className=\"size-5 rounded-sm bg-gray-400 dark:bg-gray-500\"></div>\n              </div>\n            </div>\n          </div>\n\n          {/* Navigation */}\n          <div className=\"flex-1 px-2 py-4\">\n            <Navigation />\n          </div>\n        </div>\n      </aside>\n\n      {/* Main Content */}\n      <main className=\"ml-56\">\n        {/* Top Header */}\n        <header className=\"border-b border-gray-200 border-gray-300 bg-white px-6 py-2 dark:border-gray-600 dark:border-gray-700 dark:bg-gray-800 dark:bg-gray-900\">\n          <div className=\"flex items-center justify-between\">\n            {/* Inline Command Menu */}\n            <div className=\"w-[497px]\">\n              <InlineCommandMenu\n                placeholder=\"Search for anything...\"\n                maxResults={10}\n                showShortcuts={true}\n                showRecentSection={true}\n                size=\"md\"\n              />\n            </div>\n\n            {/* User Section */}\n            <div className=\"flex items-center gap-2\">\n              <div className=\"rounded-full bg-gray-200 p-2 dark:bg-gray-700\">\n                <div className=\"size-5 text-gray-600 dark:text-gray-400\">\n                  <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\n                    />\n                  </svg>\n                </div>\n              </div>\n              <div className=\"rounded-full bg-gray-200 p-2 dark:bg-gray-700\">\n                <div className=\"size-5 text-gray-600 dark:text-gray-400\">\n                  <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\n                    />\n                  </svg>\n                </div>\n              </div>\n              <div className=\"h-0 w-6 border-l border-gray-300 dark:border-gray-600\"></div>\n              <UserDropdown />\n            </div>\n          </div>\n        </header>\n\n        {/* Page Content */}\n        <div id=\"main-content\" role=\"main\" tabIndex={-1}>\n          {children}\n        </div>\n      </main>\n\n      {/* Note: Command menu is now inline in the header */}\n\n      {/* Toast Notifications */}\n      <Toaster\n        position=\"top-right\"\n        toastOptions={{\n          duration: 4000,\n          style: {\n            background: 'var(--background)',\n            color: 'var(--foreground)',\n            border: '1px solid var(--border)',\n          },\n        }}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/templates/DashboardLayout/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/templates/Form/Household/HouseholdForm.tsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":16,"column":1,"nodeType":"ImportDeclaration","endLine":16,"endColumn":67},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1168,1171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1168,1171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1200,1203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1200,1203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getCSRFToken' is assigned a value but never used.","line":53,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'session' is assigned a value but never used.","line":54,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'testAutoFill' is assigned a value but never used.","line":67,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":68,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":68,"endColumn":16,"suggestions":[{"fix":{"range":[2156,2199],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":69,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":69,"endColumn":16,"suggestions":[{"fix":{"range":[2204,2436],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":75,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":75,"endColumn":16,"suggestions":[{"fix":{"range":[2441,2640],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":81,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":81,"endColumn":16,"suggestions":[{"fix":{"range":[2645,2700],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":82,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":82,"endColumn":16,"suggestions":[{"fix":{"range":[2705,2761],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":85,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":87,"endColumn":8},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3026,3029],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3026,3029],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":94,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":94,"endColumn":18,"suggestions":[{"fix":{"range":[3082,3231],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3178,3181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3178,3181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":98,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":98,"endColumn":61},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":102,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":102,"endColumn":16,"suggestions":[{"fix":{"range":[3319,3365],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":103,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":103,"endColumn":16,"suggestions":[{"fix":{"range":[3370,3409],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":114,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":114,"endColumn":16,"suggestions":[{"fix":{"range":[3686,3728],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":115,"column":5,"nodeType":"CallExpression","messageId":"unexpected","endLine":115,"endColumn":64},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":199,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":199,"endColumn":18,"suggestions":[{"fix":{"range":[6446,6539],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":230,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":230,"endColumn":18,"suggestions":[{"fix":{"range":[7494,7536],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":234,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":234,"endColumn":20,"suggestions":[{"fix":{"range":[7700,7769],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":245,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":245,"endColumn":20,"suggestions":[{"fix":{"range":[8012,8081],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":252,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":252,"endColumn":20,"suggestions":[{"fix":{"range":[8251,8383],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":263,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":263,"endColumn":18,"suggestions":[{"fix":{"range":[8568,8616],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":270,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":270,"endColumn":22,"suggestions":[{"fix":{"range":[8777,8825],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":275,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":275,"endColumn":22,"suggestions":[{"fix":{"range":[9013,9103],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":282,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":282,"endColumn":24,"suggestions":[{"fix":{"range":[9297,9350],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":294,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":294,"endColumn":22,"suggestions":[{"fix":{"range":[9771,9829],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":297,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":297,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9940,9943],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9940,9943],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":300,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":300,"endColumn":24,"suggestions":[{"fix":{"range":[10029,10078],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":342,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":342,"endColumn":24,"suggestions":[{"fix":{"range":[11798,11849],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useQueryClient, useQuery } from '@tanstack/react-query';\nimport { useRouter } from 'next/navigation';\nimport React, { useState, useEffect } from 'react';\n\nimport { Button } from '@/components';\nimport {\n  LocationAndDemographicsForm,\n  HouseholdDetailsForm,\n} from '@/components/organisms/FormSection/Household';\nimport { useAuth } from '@/contexts';\nimport { useUserBarangay } from '@/hooks/utilities';\nimport { supabase, logger, logError } from '@/lib';\nimport { useCSRFToken } from '@/lib/auth/csrf';\nimport { geographicService } from '@/services/geographic.service';\n\n// Import our new Form/Household components\n\n// Import molecules and atoms\n\nimport { HouseholdFormData } from '@/types/forms';\n\nexport type { HouseholdFormData };\nexport type HouseholdFormMode = 'create' | 'view' | 'edit';\n\ninterface HouseholdFormProps {\n  mode?: HouseholdFormMode;\n  onSubmit?: (data: HouseholdFormData) => Promise<void>;\n  onCancel?: () => void;\n  onModeChange?: (mode: HouseholdFormMode) => void;\n  initialData?: Partial<HouseholdFormData>;\n  householdId?: string;\n  // View mode options for displaying labels\n  viewModeOptions?: {\n    addressLabels?: any;\n    household_typeLabels?: any;\n    householdHeadLabel?: string;\n  };\n}\n\nexport default function HouseholdForm({\n  mode = 'create',\n  onSubmit,\n  onCancel: _onCancel,\n  onModeChange,\n  initialData,\n  householdId,\n  viewModeOptions,\n}: HouseholdFormProps) {\n  const router = useRouter();\n  const queryClient = useQueryClient();\n  const { getToken: getCSRFToken } = useCSRFToken();\n  const { user, userProfile, session } = useAuth();\n\n  const [errors, setErrors] = useState<Partial<Record<keyof HouseholdFormData, string>>>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isAutoFilling, setIsAutoFilling] = useState(false);\n\n  // Production-ready auto-fill state management\n  const [autoFillAttempted, setAutoFillAttempted] = useState(false);\n  const [autoFillStatus, setAutoFillStatus] = useState<'idle' | 'loading' | 'success' | 'failed'>(\n    'idle'\n  );\n\n  // Test function to manually trigger auto-fill with sample data\n  const testAutoFill = () => {\n    console.log('🧪 TEST AUTO-FILL triggered');\n    console.log('🧪 Current form data codes:', {\n      region_code: formData.region_code,\n      province_code: formData.province_code,\n      cityCode: formData.city_municipality_code,\n      barangay_code: formData.barangay_code,\n    });\n    console.log('🧪 Available options:', {\n      regions: regionOptions.length,\n      provinces: provinceOptions.length,\n      cities: cityOptions.length,\n      barangays: barangayOptions.length,\n    });\n    console.log('🧪 Cities loading state:', citiesLoading);\n    console.log('🧪 Should load cities:', shouldLoadCities);\n\n    if (regionOptions.length === 0) {\n      alert(\n        '❌ No regions loaded. Please wait for the page to load completely or check your connection.'\n      );\n      return;\n    }\n\n    // Find region 04 (CALABARZON)\n    const testRegion = regionOptions.find((r: any) => r.value === '04');\n    if (!testRegion) {\n      console.log(\n        '❌ Region 04 not found. Available regions:',\n        regionOptions.map((r: any) => `${r.value}:${r.label}`).slice(0, 5)\n      );\n      alert('❌ Region 04 (CALABARZON) not found in options');\n      return;\n    }\n\n    console.log('✅ Found region 04:', testRegion);\n    console.log('🧪 Setting form data...');\n\n    setFormData(prev => ({\n      ...prev,\n      region_code: '04', // CALABARZON\n      province_code: '0421', // Cavite\n      city_municipality_code: '042114', // Dasmariñas\n      barangay_code: '042114014', // Sample barangay\n    }));\n\n    setAutoFillStatus('success');\n    console.log('✅ Test auto-fill completed');\n    alert('✅ Test auto-fill completed! Check the form fields.');\n  };\n\n  const [formData, setFormData] = useState<HouseholdFormData>(() => ({\n    // Required fields with defaults\n    code: '',\n    barangay_code: '',\n    city_municipality_code: '',\n    region_code: '',\n    house_number: '',\n    street_id: '',\n    is_active: true,\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n\n    // Location and Demographics\n    subdivision_id: null,\n    province_code: null,\n    zip_code: null,\n    no_of_families: 1,\n    no_of_household_members: 0,\n    no_of_migrants: 0,\n\n    // Household Details\n    name: null,\n    address: null,\n    household_type: null,\n    tenure_status: null,\n    tenure_others_specify: null,\n    household_unit: null,\n    monthly_income: null,\n    income_class: null,\n    household_head_id: null,\n    household_head_position: null,\n    created_by: null,\n    updated_by: null,\n\n    // Merge initial data if provided\n    ...initialData,\n  }));\n\n  // User's assigned barangay address (auto-populated)\n  const { address: userAddress, loading: loadingAddress } = useUserBarangay();\n\n  // Load location options using React Query directly - always load regions\n  const { data: regionOptions = [], isLoading: regionsLoading } = useQuery({\n    queryKey: ['addresses', 'regions'],\n    queryFn: async () => {\n      return await geographicService.getRegions();\n    },\n    staleTime: 10 * 60 * 1000, // 10 minutes\n  });\n\n  // Load provinces when we have a region (either from form data or user selection)\n  const shouldLoadProvinces = formData.region_code || userAddress?.region_code;\n\n  const { data: provinceOptions = [], isLoading: provincesLoading } = useQuery({\n    queryKey: [\n      'addresses',\n      'provinces',\n      shouldLoadProvinces ? formData.region_code || userAddress?.region_code : '',\n    ],\n    queryFn: async () => {\n      const region_code = formData.region_code || userAddress?.region_code;\n      if (!region_code) return [];\n      return await geographicService.getProvincesByRegion(region_code);\n    },\n    enabled: !!shouldLoadProvinces,\n    staleTime: 10 * 60 * 1000,\n  });\n\n  // Load cities when we have a province\n  const shouldLoadCities = formData.province_code || userAddress?.province_code;\n\n  const { data: cityOptions = [], isLoading: citiesLoading } = useQuery({\n    queryKey: [\n      'addresses',\n      'cities',\n      shouldLoadCities ? formData.province_code || userAddress?.province_code : '',\n    ],\n    queryFn: async () => {\n      const province_code = formData.province_code || userAddress?.province_code;\n      if (!province_code) return [];\n      const cityOptions = await geographicService.getCitiesByProvince(province_code);\n      console.log('🏙️ Cities loaded:', cityOptions.length, 'cities for province:', province_code);\n      return cityOptions;\n    },\n    enabled: !!shouldLoadCities,\n    staleTime: 10 * 60 * 1000,\n  });\n\n  // Load barangays when we have a city\n  const shouldLoadBarangays =\n    formData.city_municipality_code || userAddress?.city_municipality_code;\n\n  const { data: barangayOptions = [], isLoading: barangaysLoading } = useQuery({\n    queryKey: [\n      'addresses',\n      'barangays',\n      shouldLoadBarangays\n        ? formData.city_municipality_code || userAddress?.city_municipality_code\n        : '',\n    ],\n    queryFn: async () => {\n      const cityCode = formData.city_municipality_code || userAddress?.city_municipality_code;\n      if (!cityCode) return [];\n      return await geographicService.getBarangaysByCity(cityCode);\n    },\n    enabled: !!shouldLoadBarangays,\n    staleTime: 10 * 60 * 1000,\n  });\n\n  // Enhanced auto-fill with multiple strategies and better debugging\n  useEffect(() => {\n    const performAutoFill = async () => {\n      console.log('🔄 Auto-fill check started');\n\n      // Only attempt once per form session (unless it was unsuccessful)\n      if (autoFillAttempted && formData.region_code && formData.barangay_code) {\n        console.log('⏭️ Auto-fill already completed successfully, skipping');\n        return;\n      }\n\n      // Skip if form already has location data\n      if (\n        formData.region_code ||\n        formData.province_code ||\n        formData.city_municipality_code ||\n        formData.barangay_code\n      ) {\n        console.log('⏭️ Form already has location data, skipping auto-fill');\n        setAutoFillAttempted(true);\n        return;\n      }\n\n      // Wait for regions to be available\n      if (regionsLoading || regionOptions.length === 0) {\n        console.log('⏳ Waiting for regions to load...', {\n          regionsLoading,\n          regionCount: regionOptions.length,\n        });\n        return;\n      }\n\n      // Mark as attempted to prevent multiple calls\n      setAutoFillAttempted(true);\n      setAutoFillStatus('loading');\n      setIsAutoFilling(true);\n      console.log('🚀 Starting auto-fill process...');\n\n      try {\n        let addressData = null;\n\n        // Strategy 1: Use userAddress from context (preferred)\n        if (userAddress?.region_code) {\n          console.log('✅ Using userAddress from context');\n          addressData = userAddress;\n        }\n        // Strategy 1B: Fetch from API if authenticated but no userAddress\n        else if (user && userProfile?.barangay_code) {\n          console.log('🌐 Fetching address data from API for barangay:', userProfile.barangay_code);\n\n          try {\n            const result = await geographicService.getGeographicHierarchy(\n              userProfile.barangay_code\n            );\n            addressData = result;\n            console.log('✅ Address data retrieved successfully');\n          } catch (error) {\n            console.error('❌ API fetch failed:', error);\n          }\n        } else {\n          console.warn('🚫 Auto-fill failed: No authenticated user data available');\n          setAutoFillStatus('failed');\n          return;\n        }\n\n        // Apply auto-fill if we have valid address data\n        if (addressData && 'region_code' in addressData && addressData.region_code) {\n          console.log('🔍 Validating and applying address data...');\n\n          // Validate the region exists in our options\n          const regionExists = regionOptions.some((r: any) => r.value === addressData.region_code);\n\n          if (regionExists) {\n            console.log('✅ Auto-filling location fields...');\n\n            // Step 1: Set region and trigger province loading\n            handleRegionChange(addressData.region_code);\n\n            // Step 2: Wait for provinces to load, then set province and trigger city loading\n            setTimeout(() => {\n              if ('province_code' in addressData && addressData.province_code) {\n                handleProvinceChange(addressData.province_code);\n\n                // Step 3: Wait for cities to load, then set city and trigger barangay loading\n                setTimeout(() => {\n                  let cityCode: string | undefined;\n                  if (\n                    'city_municipality_code' in addressData &&\n                    typeof addressData.city_municipality_code === 'string' &&\n                    addressData.city_municipality_code\n                  ) {\n                    cityCode = addressData.city_municipality_code;\n                  } else if (\n                    'city_code' in addressData &&\n                    typeof addressData.city_code === 'string' &&\n                    addressData.city_code\n                  ) {\n                    cityCode = addressData.city_code;\n                  }\n\n                  if (cityCode) {\n                    handleCityChange(cityCode);\n\n                    // Step 4: Wait for barangays to load, then set barangay\n                    setTimeout(() => {\n                      if ('barangay_code' in addressData && addressData.barangay_code) {\n                        handleBarangayChange(addressData.barangay_code);\n                      }\n                    }, 300);\n                  }\n                }, 300);\n              }\n            }, 300);\n\n            setAutoFillStatus('success');\n            console.log('✅ Auto-fill completed successfully!');\n          } else {\n            console.warn('⚠️ Region validation failed - region not found in options');\n            setAutoFillStatus('failed');\n          }\n        } else {\n          console.warn('⚠️ No valid address data available');\n          setAutoFillStatus('failed');\n        }\n      } catch (error) {\n        console.error('❌ Auto-fill error:', error);\n        setAutoFillStatus('failed');\n      } finally {\n        setIsAutoFilling(false);\n      }\n    };\n\n    performAutoFill();\n  }, [\n    user,\n    userProfile?.barangay_code,\n    userAddress,\n    regionsLoading,\n    regionOptions,\n    autoFillAttempted,\n    formData.region_code,\n    formData.province_code,\n    formData.city_municipality_code,\n    formData.barangay_code,\n  ]);\n\n  // Household code will be generated by the database\n  // The generate_hierarchical_household_id() function creates codes in format: RRPPMMBBB-SSSS-TTTT-HHHH\n  // Example: \"137404001-0001-0002-0123\" based on PSGC barangay code and address components\n\n  const handleInputChange = (field: string, value: string | number | boolean | null) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n\n    // Clear error when user starts typing\n    if (errors[field as keyof HouseholdFormData]) {\n      setErrors(prev => ({\n        ...prev,\n        [field as keyof HouseholdFormData]: undefined,\n      }));\n    }\n  };\n\n  // Location change handlers for cascade and auto-fill\n  const handleRegionChange = (region_code: string) => {\n    setFormData(prev => ({\n      ...prev,\n      region_code,\n      province_code: '',\n      city_municipality_code: '',\n      barangay_code: '',\n      subdivision_id: '',\n      street_id: '',\n    }));\n  };\n\n  const handleProvinceChange = (province_code: string) => {\n    setFormData(prev => ({\n      ...prev,\n      province_code,\n      city_municipality_code: '',\n      barangay_code: '',\n      subdivision_id: '',\n      street_id: '',\n    }));\n  };\n\n  const handleCityChange = (cityCode: string) => {\n    setFormData(prev => ({\n      ...prev,\n      city_municipality_code: cityCode,\n      barangay_code: '',\n      subdivision_id: '',\n      street_id: '',\n    }));\n  };\n\n  const handleBarangayChange = (barangay_code: string) => {\n    setFormData(prev => ({\n      ...prev,\n      barangay_code,\n      subdivision_id: '',\n      street_id: '',\n    }));\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Partial<Record<keyof HouseholdFormData, string>> = {};\n\n    try {\n      // Location and Demographics validation\n      if (!formData.house_number?.trim()) newErrors.house_number = 'House number is required';\n      if (!formData.street_id?.trim()) newErrors.street_id = 'Street name is required';\n      if (!formData.barangay_code) newErrors.barangay_code = 'Barangay is required';\n      if (!formData.city_municipality_code)\n        newErrors.city_municipality_code = 'City/Municipality is required';\n      if (!formData.province_code) newErrors.province_code = 'Province is required';\n      if (!formData.region_code) newErrors.region_code = 'Region is required';\n      if ((formData.no_of_families ?? 0) < 1)\n        newErrors.no_of_families = 'Number of families must be at least 1';\n      if ((formData.no_of_household_members ?? 0) < 0)\n        newErrors.no_of_household_members = 'Number of household members cannot be negative';\n\n      // Household Details validation\n      if (!formData.household_type) newErrors.household_type = 'Household type is required';\n      if (!formData.tenure_status) newErrors.tenure_status = 'Tenure status is required';\n      if (formData.tenure_status === 'others' && !formData.tenure_others_specify?.trim()) {\n        newErrors.tenure_others_specify = 'Please specify tenure status';\n      }\n      if (!formData.household_unit) newErrors.household_unit = 'Household unit is required';\n      if (!formData.name?.trim()) newErrors.name = 'Household name is required';\n      if (!formData.household_head_position)\n        newErrors.household_head_position = 'Head position is required';\n\n      setErrors(newErrors);\n      return Object.keys(newErrors).length === 0;\n    } catch (error) {\n      logError(error as Error, 'VALIDATION_ERROR');\n      return false;\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!validateForm()) {\n      // Find the first error field and scroll to it\n      const firstErrorField = document.querySelector('[aria-invalid=\"true\"]');\n      if (firstErrorField) {\n        firstErrorField.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      }\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      const action = mode === 'create' ? 'Creating' : 'Updating';\n      logger.info(`${action} household`, {\n        name: formData.name,\n        barangay_code: formData.barangay_code,\n        householdId,\n      });\n\n      let household;\n\n      if (mode === 'create') {\n        // Create household in database (code will be auto-generated by database function)\n        const { data, error } = await supabase\n          .from('households')\n          .insert({\n            name: formData.name,\n            house_number: formData.house_number,\n            street_id: formData.street_id || null,\n            subdivision_id: formData.subdivision_id || null,\n            barangay_code: formData.barangay_code,\n            city_municipality_code: formData.city_municipality_code,\n            province_code: formData.province_code,\n            region_code: formData.region_code,\n            no_of_families: formData.no_of_families,\n            no_of_household_members: formData.no_of_household_members,\n            no_of_migrants: formData.no_of_migrants,\n            household_type: formData.household_type,\n            tenure_status: formData.tenure_status,\n            tenure_others_specify: formData.tenure_others_specify || null,\n            household_unit: formData.household_unit,\n            monthly_income: formData.monthly_income || null,\n            household_head_id: formData.household_head_id || null,\n            household_head_position: formData.household_head_position,\n          })\n          .select()\n          .single();\n\n        if (error) throw error;\n        household = data;\n      } else {\n        // Update existing household\n        if (!householdId) throw new Error('Household ID is required for updates');\n\n        const { data, error } = await supabase\n          .from('households')\n          .update({\n            name: formData.name,\n            house_number: formData.house_number,\n            street_id: formData.street_id || null,\n            subdivision_id: formData.subdivision_id || null,\n            barangay_code: formData.barangay_code,\n            city_municipality_code: formData.city_municipality_code,\n            province_code: formData.province_code,\n            region_code: formData.region_code,\n            no_of_families: formData.no_of_families,\n            no_of_household_members: formData.no_of_household_members,\n            no_of_migrants: formData.no_of_migrants,\n            household_type: formData.household_type,\n            tenure_status: formData.tenure_status,\n            tenure_others_specify: formData.tenure_others_specify || null,\n            household_unit: formData.household_unit,\n            monthly_income: formData.monthly_income || null,\n            household_head_id: formData.household_head_id || null,\n            household_head_position: formData.household_head_position,\n            updated_at: new Date().toISOString(),\n          })\n          .eq('id', householdId)\n          .select()\n          .single();\n\n        if (error) throw error;\n        household = data;\n      }\n\n      logger.info(`Household ${mode === 'create' ? 'created' : 'updated'} successfully`, {\n        id: household.id,\n        code: household.code,\n      });\n\n      // Invalidate relevant queries\n      await queryClient.invalidateQueries({ queryKey: ['households'] });\n\n      if (onSubmit) {\n        await onSubmit(formData);\n      } else if (mode === 'create') {\n        router.push(`/households/${household.id}`);\n      } else {\n        // Switch to view mode after successful edit\n        onModeChange?.('view');\n      }\n    } catch (error) {\n      logError(error as Error, `HOUSEHOLD_${mode.toUpperCase()}_ERROR`);\n      setErrors({\n        code: `Failed to ${mode === 'create' ? 'create' : 'update'} household. Please try again.`,\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleCancel = () => {\n    if (_onCancel) {\n      _onCancel();\n    } else {\n      router.push('/households');\n    }\n  };\n\n  if (loadingAddress || (isAutoFilling && autoFillStatus === 'loading')) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"text-center\">\n          <div className=\"mb-4 size-8 animate-spin rounded-full border-b-2 border-zinc-950\"></div>\n          <p className=\"text-sm text-zinc-600\">\n            {loadingAddress ? 'Loading address information...' : 'Auto-filling location fields...'}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mx-auto max-w-4xl\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-zinc-950 dark:text-white\">\n              {mode === 'create'\n                ? 'Create New Household'\n                : mode === 'edit'\n                  ? 'Edit Household'\n                  : 'Household Details'}\n            </h2>\n            <p className=\"mt-2 text-sm text-zinc-600 dark:text-zinc-400\">\n              {mode === 'create'\n                ? 'Fill in all required information to register a new household in the barangay.'\n                : mode === 'edit'\n                  ? 'Update the household information as needed.'\n                  : 'View the household information and details.'}\n            </p>\n          </div>\n          {mode !== 'create' && onModeChange && (\n            <div className=\"flex gap-2\">\n              {mode === 'view' && (\n                <Button variant=\"primary\" onClick={() => onModeChange('edit')}>\n                  Edit Household\n                </Button>\n              )}\n              {mode === 'edit' && (\n                <Button variant=\"secondary-outline\" onClick={() => onModeChange('view')}>\n                  Cancel Edit\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n\n        {autoFillStatus === 'failed' && (\n          <div className=\"mt-4 rounded-lg bg-yellow-50 p-4 ring-1 ring-yellow-900/10 dark:bg-yellow-400/10 dark:ring-yellow-400/20\">\n            <div className=\"flex\">\n              <div className=\"shrink-0\">\n                <svg className=\"size-5 text-yellow-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\"\n                    clipRule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n              <div className=\"ml-3\">\n                <h4 className=\"text-sm font-medium text-yellow-800 dark:text-yellow-200\">\n                  Auto-fill Not Available\n                </h4>\n                <div className=\"mt-1 text-sm text-yellow-700 dark:text-yellow-300\">\n                  <p>\n                    Please manually select the location information.{' '}\n                    {!user\n                      ? 'Sign in for automatic population.'\n                      : 'Location data could not be loaded automatically.'}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Form Sections */}\n      <div className=\"space-y-8\">\n        {/* Section 1: Location & Demographics */}\n        <LocationAndDemographicsForm\n          mode={mode}\n          formData={{\n            // Map new snake_case to old camelCase for compatibility\n            houseNumber: formData.house_number || '',\n            streetId: formData.street_id || '',\n            subdivisionId: formData.subdivision_id || '',\n            barangayCode: formData.barangay_code || '',\n            cityMunicipalityCode: formData.city_municipality_code || '',\n            provinceCode: formData.province_code || '',\n            regionCode: formData.region_code || '',\n            noOfFamilies: formData.no_of_families || 1,\n            noOfHouseholdMembers: formData.no_of_household_members || 0,\n            noOfMigrants: formData.no_of_migrants || 0,\n          }}\n          onChange={handleInputChange}\n          errors={errors}\n          regionOptions={\n            mode === 'view' && viewModeOptions?.addressLabels\n              ? formData.region_code\n                ? [\n                    {\n                      value: formData.region_code,\n                      label: viewModeOptions.addressLabels.regionLabel || formData.region_code,\n                    },\n                  ]\n                : []\n              : regionOptions\n          }\n          provinceOptions={\n            mode === 'view' && viewModeOptions?.addressLabels\n              ? formData.province_code\n                ? [\n                    {\n                      value: formData.province_code,\n                      label: viewModeOptions.addressLabels.provinceLabel || formData.province_code,\n                    },\n                  ]\n                : []\n              : provinceOptions\n          }\n          cityOptions={\n            mode === 'view' && viewModeOptions?.addressLabels\n              ? formData.city_municipality_code\n                ? [\n                    {\n                      value: formData.city_municipality_code,\n                      label:\n                        viewModeOptions.addressLabels.cityLabel || formData.city_municipality_code,\n                    },\n                  ]\n                : []\n              : cityOptions\n          }\n          barangayOptions={\n            mode === 'view' && viewModeOptions?.addressLabels\n              ? formData.barangay_code\n                ? [\n                    {\n                      value: formData.barangay_code,\n                      label: viewModeOptions.addressLabels.barangayLabel || formData.barangay_code,\n                    },\n                  ]\n                : []\n              : barangayOptions\n          }\n          regionsLoading={regionsLoading}\n          provincesLoading={provincesLoading}\n          citiesLoading={citiesLoading}\n          barangaysLoading={barangaysLoading}\n          onRegionChange={handleRegionChange}\n          onProvinceChange={handleProvinceChange}\n          onCityChange={handleCityChange}\n          onBarangayChange={handleBarangayChange}\n        />\n\n        {/* Section 2: Household Details */}\n        <HouseholdDetailsForm\n          mode={mode}\n          formData={{\n            // Map new snake_case to old camelCase for compatibility\n            householdType: formData.household_type || '',\n            tenureStatus: formData.tenure_status || '',\n            tenureOthersSpecify: formData.tenure_others_specify || '',\n            householdUnit: formData.household_unit || '',\n            householdName: formData.name || '',\n            monthlyIncome: formData.monthly_income || 0,\n            householdHeadId: formData.household_head_id || '',\n            householdHeadPosition: formData.household_head_position || '',\n          }}\n          onChange={handleInputChange}\n          errors={errors}\n          // Head of family options would be populated from residents\n          householdHeadOptions={\n            mode === 'view' && viewModeOptions?.householdHeadLabel\n              ? formData.household_head_id\n                ? [{ value: formData.household_head_id, label: viewModeOptions.householdHeadLabel }]\n                : []\n              : []\n          }\n          householdHeadsLoading={false}\n        />\n\n        {/* Form Actions */}\n        {mode !== 'view' && (\n          <div className=\"flex justify-end gap-3 border-t pt-6\">\n            <Button variant=\"secondary-outline\" onClick={handleCancel}>\n              Cancel\n            </Button>\n            <Button variant=\"primary\" onClick={handleSubmit} disabled={isSubmitting}>\n              {isSubmitting\n                ? mode === 'create'\n                  ? 'Creating Household...'\n                  : 'Saving Changes...'\n                : mode === 'create'\n                  ? 'Create Household'\n                  : 'Save Changes'}\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/templates/Form/Household/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/templates/Form/Resident/ResidentForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3305,3308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3305,3308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3328,3331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3328,3331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3356,3359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3356,3359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6643,6646],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6643,6646],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":227,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":227,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8058,8061],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8058,8061],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":269,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9510,9513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9510,9513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":326,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":326,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11341,11344],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11341,11344],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":360,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":360,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12598,12601],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12598,12601],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":497,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":497,"endColumn":20,"suggestions":[{"fix":{"range":[16627,16687],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":498,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":498,"endColumn":20,"suggestions":[{"fix":{"range":[16696,16775],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":499,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":499,"endColumn":20,"suggestions":[{"fix":{"range":[16784,17054],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useCallback, useEffect } from 'react';\n\nimport {\n  PersonalInformationForm,\n  ContactInformationForm,\n  PhysicalPersonalDetailsForm,\n  SectoralInformationForm,\n  MigrationInformation,\n} from '@/components/organisms/FormSection';\nimport { useAuth } from '@/contexts';\nimport { isIndigenousPeople } from '@/lib/business-rules/sectoral-classification';\nimport { supabase } from '@/lib/data/supabase';\nimport type { FormMode } from '@/types';\nimport { ResidentFormState } from '@/types/residents';\n\nimport { FormActions } from './components/FormActions';\nimport { FormHeader } from './components/FormHeader';\n\n// Use the database-aligned ResidentFormState interface\ntype ResidentFormData = ResidentFormState;\n\ninterface ResidentFormProps {\n  mode?: FormMode;\n  onSubmit?: (data: ResidentFormData) => void;\n  onCancel?: () => void;\n  initialData?: Partial<ResidentFormData>;\n  onModeChange?: (mode: FormMode) => void;\n  hidePhysicalDetails?: boolean;\n  hideSectoralInfo?: boolean;\n  onChange?: (data: ResidentFormData) => void;\n}\n\n// Helper function to get sectoral classifications based on ethnicity\nconst getSectoralClassificationsByEthnicity = (ethnicity: string): Partial<ResidentFormData> => {\n  const updates: Partial<ResidentFormData> = {};\n\n  // Reset all sectoral classifications first (except manually set ones)\n  updates.is_indigenous_people = false;\n\n  // Indigenous peoples classification - automatically set to true\n  if (isIndigenousPeople(ethnicity)) {\n    updates.is_indigenous_people = true;\n  }\n\n  // Note: Other sectoral classifications could be auto-suggested based on ethnicity:\n  // - is_migrant: Some communities are traditionally mobile (e.g., Badjao)\n  // - is_person_with_disability: Cannot be determined by ethnicity\n  // - is_solo_parent: Cannot be determined by ethnicity\n  // - is_senior_citizen: Cannot be determined by ethnicity\n  // - is_out_of_school_children/youth: Cannot be determined by ethnicity\n  // - is_overseas_filipino_worker: Cannot be determined by ethnicity\n\n  // For now, we only auto-set is_indigenous_people as it's directly determinable from ethnicity\n  // Other classifications should be manually selected by the user\n\n  return updates;\n};\n\n// Database default values matching schema.sql + UX defaults for required fields\n// ONLY for truly empty/new forms - should NOT override existing data\nconst DEFAULT_FORM_VALUES: Partial<ResidentFormData> = {\n  // Database defaults - ONLY for create mode, not for existing data\n  citizenship: 'filipino', // Database default\n  is_graduate: false, // Database default\n\n  // UX defaults for required fields without database defaults - ONLY for create mode\n  sex: 'male', // No database default but required - provide UX default\n\n  // DO NOT set civil_status default here - let real data take precedence\n  // Note: ethnicity, blood_type, religion are nullable - no defaults\n};\n\nexport function ResidentForm({\n  mode = 'create',\n  onSubmit,\n  onCancel,\n  initialData,\n  onModeChange,\n  hidePhysicalDetails = false,\n  hideSectoralInfo = false,\n  onChange,\n}: ResidentFormProps) {\n  // Auth context\n  const { userProfile } = useAuth();\n\n  // Search options state - need state for re-renders when options change\n  const [searchOptions, setSearchOptions] = useState({\n    psgc: [] as any[],\n    psoc: [] as any[],\n    household: [] as any[],\n  });\n\n  const [searchLoading, setSearchLoading] = useState({\n    psgc: false,\n    psoc: false,\n    household: false,\n  });\n\n  // Create form data with database defaults, then merge with initialData if provided\n  const [formData, setFormData] = useState<ResidentFormData>(() => {\n    const baseFormData: ResidentFormData = {\n      // Personal Information - database field names\n      first_name: '',\n      middle_name: '',\n      last_name: '',\n      extension_name: '',\n      sex: '', // Required field - no default\n      civil_status: '', // Will be set from defaults\n      civil_status_others_specify: '',\n      citizenship: '', // Will be set from defaults\n      birthdate: '',\n      birth_place_name: '',\n      birth_place_code: '',\n      philsys_card_number: '',\n      education_attainment: '', // No database default\n      is_graduate: false, // Will be set from defaults\n      employment_status: '', // No database default\n      occupation_code: '',\n      occupation_title: '',\n\n      // Contact Information - database field names\n      email: '',\n      telephone_number: '',\n      mobile_number: '',\n      household_code: '',\n\n      // Physical Personal Details - database field names\n      blood_type: '', // Nullable field - no default\n      complexion: '',\n      height: 0, // Will be excluded from submission if section is hidden\n      weight: 0, // Will be excluded from submission if section is hidden\n      ethnicity: '', // Nullable field - no default\n      religion: '', // Nullable field - no default\n      religion_others_specify: '',\n      is_voter: false, // Default to false for boolean validation\n      is_resident_voter: false, // Default to false for boolean validation\n      last_voted_date: '',\n      mother_maiden_first: '',\n      mother_maiden_middle: '',\n      mother_maiden_last: '',\n\n      // Sectoral Information - database field names\n      is_labor_force_employed: false,\n      is_unemployed: false,\n      is_overseas_filipino_worker: false,\n      is_person_with_disability: false,\n      is_out_of_school_children: false,\n      is_out_of_school_youth: false,\n      is_senior_citizen: false,\n      is_registered_senior_citizen: false,\n      is_solo_parent: false,\n      is_indigenous_people: false,\n      is_migrant: false,\n\n      // Migration Information - database field names\n      previous_barangay_code: '',\n      previous_city_municipality_code: '',\n      previous_province_code: '',\n      previous_region_code: '',\n      length_of_stay_previous_months: 0,\n      date_of_transfer: '',\n      duration_of_stay_current_months: 0,\n      is_intending_to_return: false,\n    };\n\n    // Smart merge strategy: only apply defaults for missing/empty values\n    const formWithDefaults = { ...baseFormData };\n\n    // Apply defaults ONLY for create mode or when values are truly missing\n    if (mode === 'create' || !initialData) {\n      Object.assign(formWithDefaults, DEFAULT_FORM_VALUES);\n    } else {\n      // For existing data, only apply defaults for undefined/null values\n      Object.entries(DEFAULT_FORM_VALUES).forEach(([key, defaultValue]) => {\n        if (\n          formWithDefaults[key as keyof ResidentFormData] === undefined ||\n          formWithDefaults[key as keyof ResidentFormData] === null\n        ) {\n          (formWithDefaults as any)[key] = defaultValue;\n        }\n      });\n    }\n\n    // Merge with initialData - initialData takes precedence over defaults\n    const finalFormData = initialData ? { ...formWithDefaults, ...initialData } : formWithDefaults;\n\n    // Notify parent of initial data (use setTimeout to avoid state update during render)\n    if (onChange) {\n      setTimeout(() => {\n        onChange(finalFormData);\n      }, 0);\n    }\n\n    return finalFormData;\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Production-ready stable search handlers\n  const handlePsgcSearch = useCallback(async (query: string) => {\n    if (!query || query.trim().length < 2) {\n      setSearchOptions(prev => ({ ...prev, psgc: [] }));\n      setSearchLoading(prev => ({ ...prev, psgc: false }));\n      return;\n    }\n\n    setSearchLoading(prev => ({ ...prev, psgc: true }));\n    try {\n      const params = new URLSearchParams({\n        q: query.trim(),\n        limit: '50',\n        levels: 'province,city',\n        maxLevel: 'city',\n        minLevel: 'province',\n      });\n\n      const response = await fetch(`/api/psgc/search?${params}`);\n\n      if (response.ok) {\n        const data = await response.json();\n        if (data.data && Array.isArray(data.data)) {\n          setSearchOptions(prev => ({\n            ...prev,\n            psgc: data.data.map((item: any) => ({\n              value: item.code || item.city_code || item.province_code,\n              label: item.name || item.city_name || item.province_name,\n              description: item.full_address || item.full_hierarchy,\n              level: item.level,\n              code: item.code || item.city_code || item.province_code,\n            })),\n          }));\n        }\n      }\n    } catch (error) {\n      console.error('PSGC search error:', error);\n      setSearchOptions(prev => ({ ...prev, psgc: [] }));\n    } finally {\n      setSearchLoading(prev => ({ ...prev, psgc: false }));\n    }\n  }, []);\n\n  const handlePsocSearch = useCallback(async (query: string) => {\n    if (!query || query.trim().length < 2) {\n      setSearchOptions(prev => ({ ...prev, psoc: [] }));\n      setSearchLoading(prev => ({ ...prev, psoc: false }));\n      return;\n    }\n\n    setSearchLoading(prev => ({ ...prev, psoc: true }));\n    try {\n      const params = new URLSearchParams({\n        q: query.trim(),\n        limit: '20',\n        levels: 'major_group,sub_major_group,unit_group,unit_sub_group,occupation',\n        maxLevel: 'occupation',\n        minLevel: 'major_group',\n      });\n\n      const response = await fetch(`/api/psoc/search?${params}`);\n\n      if (response.ok) {\n        const data = await response.json();\n        if (data.data && Array.isArray(data.data)) {\n          setSearchOptions(prev => ({\n            ...prev,\n            psoc: data.data.map((item: any) => ({\n              value: item.code,\n              label: item.title,\n              description: item.hierarchy,\n              level_type: item.level,\n              occupation_code: item.code,\n              occupation_title: item.title,\n            })),\n          }));\n        }\n      }\n    } catch (error) {\n      console.error('PSOC search error:', error);\n      setSearchOptions(prev => ({ ...prev, psoc: [] }));\n    } finally {\n      setSearchLoading(prev => ({ ...prev, psoc: false }));\n    }\n  }, []);\n\n  const handleHouseholdSearch = useCallback(\n    async (query: string) => {\n      if (!userProfile?.barangay_code) {\n        setSearchOptions(prev => ({ ...prev, household: [] }));\n        return;\n      }\n\n      setSearchLoading(prev => ({ ...prev, household: true }));\n      try {\n        // Get current session to pass auth token\n        const {\n          data: { session },\n        } = await supabase.auth.getSession();\n\n        if (!session?.access_token) {\n          console.warn('No valid session found for household search');\n          setSearchOptions(prev => ({ ...prev, household: [] }));\n          return;\n        }\n\n        // Call the actual households API\n        const url = `/api/households?${query ? `search=${encodeURIComponent(query)}&` : ''}limit=50`;\n        const response = await fetch(url, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${session.access_token}`,\n          },\n        });\n\n        if (!response.ok) {\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        const households = data.data || [];\n\n        // Transform household data for the dropdown\n        const householdOptions = households.map((household: any) => ({\n          value: household.code,\n          label: `${household.code}${household.name ? ` - ${household.name}` : ''}`,\n          description: household.address || `House ${household.house_number || 'N/A'}`,\n        }));\n\n        setSearchOptions(prev => ({ ...prev, household: householdOptions }));\n      } catch (error) {\n        console.error('Household search error:', error);\n        // Fallback to empty array if API fails\n        setSearchOptions(prev => ({ ...prev, household: [] }));\n      } finally {\n        setSearchLoading(prev => ({ ...prev, household: false }));\n      }\n    },\n    [userProfile?.barangay_code]\n  );\n\n  // Load initial household options when component mounts\n  useEffect(() => {\n    if (userProfile?.barangay_code) {\n      handleHouseholdSearch(''); // Load initial household data\n    }\n  }, [userProfile?.barangay_code, handleHouseholdSearch]);\n\n  // Handle form field changes\n  const handleFieldChange = (\n    field: string | number | symbol,\n    value: string | number | boolean | null\n  ) => {\n    const fieldKey = String(field);\n\n    // Handle household batch update to avoid race condition\n    if (fieldKey === '__household_batch__' && value && typeof value === 'object') {\n      const householdData = value as any;\n\n      const updatedData: Partial<ResidentFormData> = {\n        household_code: householdData.household_code || '',\n        household_name: householdData.household_name || '',\n      };\n\n      const newFormData = {\n        ...formData,\n        ...updatedData,\n      };\n\n      setFormData(newFormData);\n\n      // Notify parent component of changes\n      if (onChange) {\n        onChange(newFormData);\n      }\n\n      // Clear errors for both household fields\n      if (errors.household_code || errors.household_name) {\n        setErrors(prev => ({\n          ...prev,\n          household_code: '',\n          household_name: '',\n        }));\n      }\n\n      return; // Exit early for batch update\n    }\n\n    // Start with the basic field update\n    let updatedData: Partial<ResidentFormData> = {\n      [fieldKey]: value,\n    };\n\n    if (fieldKey === 'ethnicity' && typeof value === 'string') {\n      // Auto-update sectoral classifications based on ethnicity\n      const sectoralUpdates = getSectoralClassificationsByEthnicity(value);\n      updatedData = { ...updatedData, ...sectoralUpdates };\n    }\n\n    const newFormData = {\n      ...formData,\n      ...updatedData,\n    };\n\n    setFormData(newFormData);\n\n    // Notify parent component of changes\n    if (onChange) {\n      onChange(newFormData);\n    }\n\n    // Clear error when user starts typing\n    if (errors[fieldKey]) {\n      setErrors(prev => ({\n        ...prev,\n        [fieldKey]: '',\n      }));\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      // Basic validation using database field names\n      const newErrors: Record<string, string> = {};\n\n      if (!formData.first_name.trim()) newErrors.first_name = 'First name is required';\n      if (!formData.last_name.trim()) newErrors.last_name = 'Last name is required';\n      if (!formData.sex) newErrors.sex = 'Sex is required';\n      if (!formData.birthdate) newErrors.birthdate = 'Birth date is required';\n      if (!formData.household_code || !formData.household_code.trim()) {\n        newErrors.household_code = 'Household assignment is required';\n      }\n\n      if (Object.keys(newErrors).length > 0) {\n        setErrors(newErrors);\n        setIsSubmitting(false);\n        return;\n      }\n\n      // Call onSubmit callback\n      if (onSubmit) {\n        // Create a filtered version of form data that excludes hidden fields\n        const filteredFormData = { ...formData };\n\n        // Remove Physical & Personal Details fields if section is hidden\n        if (hidePhysicalDetails) {\n          const physicalFields = [\n            'height',\n            'weight',\n            'blood_type',\n            'complexion',\n            'ethnicity',\n            'religion',\n            'religion_others_specify',\n            'is_voter',\n            'is_resident_voter',\n            'last_voted_date',\n            'mother_maiden_first',\n            'mother_maiden_middle',\n            'mother_maiden_last',\n          ];\n          physicalFields.forEach(field => {\n            if (filteredFormData.hasOwnProperty(field)) {\n              delete filteredFormData[field as keyof typeof filteredFormData];\n            }\n          });\n        }\n\n        // Remove Sectoral Information fields if section is hidden\n        if (hideSectoralInfo) {\n          const sectoralFields = [\n            'is_labor_force_employed',\n            'is_unemployed',\n            'is_overseas_filipino_worker',\n            'is_person_with_disability',\n            'is_out_of_school_children',\n            'is_out_of_school_youth',\n            'is_senior_citizen',\n            'is_registered_senior_citizen',\n            'is_solo_parent',\n            'is_indigenous_people',\n            'is_migrant',\n          ];\n          sectoralFields.forEach(field => {\n            if (filteredFormData.hasOwnProperty(field)) {\n              delete filteredFormData[field as keyof typeof filteredFormData];\n            }\n          });\n        }\n\n        console.log('🚀 RESIDENTFORM: Calling onSubmit with data:');\n        console.log('🚀 RESIDENTFORM: is_migrant value:', filteredFormData.is_migrant);\n        console.log('🚀 RESIDENTFORM: sectoral fields in filtered data:', {\n          is_migrant: filteredFormData.is_migrant,\n          is_solo_parent: filteredFormData.is_solo_parent,\n          is_person_with_disability: filteredFormData.is_person_with_disability,\n        });\n\n        onSubmit(filteredFormData);\n      }\n    } catch (error) {\n      console.error('Form submission error:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Form Header */}\n      <FormHeader mode={mode} onModeChange={onModeChange} />\n\n      <form onSubmit={handleSubmit} className=\"space-y-8\">\n        {/* Personal Information Section */}\n        <PersonalInformationForm\n          mode={mode}\n          formData={{\n            // Direct snake_case properties (matching database schema)\n            philsys_card_number: formData.philsys_card_number,\n            first_name: formData.first_name,\n            middle_name: formData.middle_name,\n            last_name: formData.last_name,\n            extension_name: formData.extension_name,\n            sex: formData.sex,\n            civil_status: formData.civil_status,\n            citizenship: formData.citizenship,\n            birthdate: formData.birthdate,\n            birth_place_name: formData.birth_place_name,\n            birth_place_code: formData.birth_place_code,\n            education_attainment: formData.education_attainment,\n            is_graduate: formData.is_graduate,\n            employment_status: formData.employment_status,\n            occupation_code: formData.occupation_code,\n            occupation_title: formData.occupation_title,\n          }}\n          onChange={(field: string | number | symbol, value: string | number | boolean | null) => {\n            // Direct field mapping (no conversion needed as both use snake_case)\n            const fieldName = String(field);\n            handleFieldChange(fieldName, value);\n          }}\n          errors={errors}\n          onPsgcSearch={handlePsgcSearch}\n          onPsocSearch={handlePsocSearch}\n          psgcOptions={searchOptions.psgc}\n          psocOptions={searchOptions.psoc}\n          psgcLoading={searchLoading.psgc}\n          psocLoading={searchLoading.psoc}\n        />\n\n        {/* Contact Information Section */}\n        <ContactInformationForm\n          mode={mode}\n          formData={{\n            // Direct snake_case properties (matching database schema)\n            email: formData.email,\n            telephone_number: formData.telephone_number,\n            mobile_number: formData.mobile_number,\n            household_code: formData.household_code,\n            household_name: formData.household_name,\n          }}\n          onChange={(field: string | number | symbol, value: string | number | boolean | null) => {\n            // Direct field mapping (no conversion needed as both use snake_case)\n            const fieldName = String(field);\n            handleFieldChange(fieldName, value);\n          }}\n          errors={errors}\n          onHouseholdSearch={handleHouseholdSearch}\n          householdOptions={searchOptions.household}\n          householdLoading={searchLoading.household}\n        />\n\n        {/* Physical Personal Details Section - Hidden in basic create mode */}\n        {!hidePhysicalDetails && (\n          <PhysicalPersonalDetailsForm\n            mode={mode}\n            formData={{\n              // Direct snake_case properties (matching database schema)\n              blood_type: formData.blood_type,\n              complexion: formData.complexion,\n              height: formData.height ? formData.height.toString() : '',\n              weight: formData.weight ? formData.weight.toString() : '',\n              ethnicity: formData.ethnicity,\n              religion: formData.religion,\n              religion_others_specify: formData.religion_others_specify,\n              is_voter: formData.is_voter,\n              is_resident_voter: formData.is_resident_voter,\n              last_voted_date: formData.last_voted_date,\n              mother_maiden_first: formData.mother_maiden_first,\n              mother_maiden_middle: formData.mother_maiden_middle,\n              mother_maiden_last: formData.mother_maiden_last,\n            }}\n            onChange={(\n              field: string | number | symbol,\n              value: string | number | boolean | null\n            ) => {\n              // Direct field mapping with type conversion for height/weight\n              const fieldName = String(field);\n              // Convert height/weight strings back to numbers for database\n              let convertedValue = value;\n              if ((fieldName === 'height' || fieldName === 'weight') && typeof value === 'string') {\n                convertedValue = parseFloat(value) || 0;\n              }\n              handleFieldChange(fieldName, convertedValue);\n            }}\n            errors={errors}\n          />\n        )}\n\n        {/* Sectoral Information Section - Hidden in basic create mode */}\n        {!hideSectoralInfo && (\n          <SectoralInformationForm\n            mode={mode}\n            formData={{\n              // Sectoral classifications (matching database schema)\n              is_labor_force_employed: formData.is_labor_force_employed,\n              is_unemployed: formData.is_unemployed,\n              is_overseas_filipino: formData.is_overseas_filipino_worker,\n              is_person_with_disability: formData.is_person_with_disability,\n              is_out_of_school_children: formData.is_out_of_school_children,\n              is_out_of_school_youth: formData.is_out_of_school_youth,\n              is_senior_citizen: formData.is_senior_citizen,\n              is_registered_senior_citizen: formData.is_registered_senior_citizen,\n              is_solo_parent: formData.is_solo_parent,\n              is_indigenous_people: formData.is_indigenous_people,\n              is_migrant: formData.is_migrant,\n              // Context data for auto-calculation\n              birthdate: formData.birthdate,\n              employment_status: formData.employment_status,\n              education_attainment: formData.education_attainment,\n              civil_status: formData.civil_status,\n              ethnicity: formData.ethnicity,\n            }}\n            onChange={handleFieldChange}\n            errors={errors}\n          />\n        )}\n\n        {/* Migration Information Section - Only show if migrant is checked */}\n        {formData.is_migrant && (\n          <MigrationInformation\n            mode={mode}\n            value={{\n              previous_barangay_code: formData.previous_barangay_code || undefined,\n              previous_city_municipality_code:\n                formData.previous_city_municipality_code || undefined,\n              previous_province_code: formData.previous_province_code || undefined,\n              previous_region_code: formData.previous_region_code || undefined,\n              length_of_stay_previous_months: formData.length_of_stay_previous_months || undefined,\n              reason_for_migration: formData.reason_for_migration || undefined,\n              date_of_transfer: formData.date_of_transfer || undefined,\n              migration_type: formData.migration_type || undefined,\n            }}\n            onChange={migrationData => {\n              handleFieldChange(\n                'previous_barangay_code',\n                migrationData.previous_barangay_code || ''\n              );\n              handleFieldChange(\n                'previous_city_municipality_code',\n                migrationData.previous_city_municipality_code || ''\n              );\n              handleFieldChange(\n                'previous_province_code',\n                migrationData.previous_province_code || ''\n              );\n              handleFieldChange('previous_region_code', migrationData.previous_region_code || '');\n              handleFieldChange(\n                'length_of_stay_previous_months',\n                migrationData.length_of_stay_previous_months || 0\n              );\n              handleFieldChange('reason_for_migration', migrationData.reason_for_migration || '');\n              handleFieldChange('date_of_transfer', migrationData.date_of_transfer || '');\n              handleFieldChange(\n                'reason_for_transferring',\n                migrationData.reason_for_transferring || ''\n              );\n              handleFieldChange(\n                'duration_of_stay_current_months',\n                migrationData.duration_of_stay_current_months || 0\n              );\n              handleFieldChange(\n                'is_intending_to_return',\n                migrationData.is_intending_to_return || false\n              );\n            }}\n            errors={errors}\n          />\n        )}\n\n        {/* Form Actions - Submit/Cancel buttons */}\n        <FormActions\n          mode={mode}\n          isSubmitting={isSubmitting}\n          isOptimisticallyUpdated={false}\n          onCancel={onCancel}\n          errorCount={Object.keys(errors).length}\n        />\n      </form>\n    </div>\n  );\n}\n\nexport default ResidentForm;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/templates/Form/Resident/components/FormActions.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":59,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":59,"endColumn":14,"suggestions":[{"fix":{"range":[1565,1702],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":69,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":69,"endColumn":16,"suggestions":[{"fix":{"range":[1733,1803],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport type { FormMode } from '@/types';\n\n// Helper function to get button variant\nconst getButtonVariant = (isOptimisticallyUpdated: boolean): string => {\n  return isOptimisticallyUpdated\n    ? 'px-4 py-2 bg-success-600 hover:bg-success-700 text-white font-medium rounded-lg transition-colors'\n    : 'px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white font-medium rounded-lg transition-colors';\n};\n\n// Helper function to get button content\nconst getButtonContent = (isSubmitting: boolean, isOptimisticallyUpdated: boolean) => {\n  if (isSubmitting) {\n    return (\n      <>\n        <span aria-hidden=\"true\">Saving...</span>\n        <span className=\"sr-only\">Saving resident data, please wait</span>\n      </>\n    );\n  }\n\n  if (isOptimisticallyUpdated) {\n    return (\n      <>\n        <span aria-hidden=\"true\">✓ Saved</span>\n        <span className=\"sr-only\">Changes saved successfully</span>\n      </>\n    );\n  }\n\n  return 'Save Resident';\n};\n\n// Helper function to get help text\nconst getHelpText = (errorCount: number): string => {\n  if (errorCount > 0) {\n    const errorText = errorCount > 1 ? 's' : '';\n    return `Please fix ${errorCount} validation error${errorText} before submitting`;\n  }\n  return 'Form is ready to submit';\n};\n\ninterface FormActionsProps {\n  mode: FormMode;\n  isSubmitting: boolean;\n  isOptimisticallyUpdated: boolean;\n  onCancel?: () => void;\n  errorCount: number;\n}\n\nconst FormActionsComponent = ({\n  mode,\n  isSubmitting,\n  isOptimisticallyUpdated,\n  onCancel,\n  errorCount,\n}: FormActionsProps) => {\n  console.log(\n    '🎬 FormActions render - mode:',\n    mode,\n    'errorCount:',\n    errorCount,\n    'isSubmitting:',\n    isSubmitting\n  );\n\n  if (mode === 'view') {\n    console.log('👁️ FormActions: returning null because mode is \"view\"');\n    return null;\n  }\n\n  return (\n    <div className=\"mt-8 flex items-center justify-end gap-3 border-t border-zinc-200 pt-8 dark:border-zinc-800\">\n      {onCancel && (\n        <button\n          type=\"button\"\n          onClick={onCancel}\n          className=\"rounded-lg border border-zinc-200 bg-zinc-50 px-4 py-2 font-medium text-zinc-900 transition-colors hover:bg-zinc-50 dark:border-zinc-800 dark:bg-zinc-900 dark:text-zinc-100 dark:hover:bg-zinc-800\"\n        >\n          Cancel\n        </button>\n      )}\n      <button\n        type=\"submit\"\n        disabled={isSubmitting}\n        aria-describedby=\"submit-help\"\n        aria-label={\n          isSubmitting ? 'Saving resident data, please wait' : 'Save resident information'\n        }\n        className={getButtonVariant(isOptimisticallyUpdated)}\n      >\n        {getButtonContent(isSubmitting, isOptimisticallyUpdated)}\n      </button>\n      <div id=\"submit-help\" className=\"sr-only\">\n        {getHelpText(errorCount)}\n      </div>\n    </div>\n  );\n};\n\nFormActionsComponent.displayName = 'FormActions';\n\nexport const FormActions = React.memo(FormActionsComponent);\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/templates/Form/Resident/components/FormHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/templates/Form/Resident/components/FormValidationFeedback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/templates/Form/Resident/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/templates/Form/Resident/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/templates/Form/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/templates/Header/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/templates/Header/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/templates/MainLayout/MainLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/templates/MainLayout/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/templates/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/utils/ErrorSuppressor.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":15,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":15,"endColumn":18,"suggestions":[{"fix":{"range":[468,545],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[779,782],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[779,782],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1335,1338],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1335,1338],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2894,2897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2894,2897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2969,2972],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2969,2972],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect } from 'react';\n\n/**\n * Component to suppress specific Next.js internal warnings that cannot be fixed in user code\n * This targets the specific \"OuterLayoutRouter key prop\" warning from Next.js 15.5.0\n */\nexport function ErrorSuppressor() {\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      // Additional suppression at the component level\n      // This runs after the initial import-time suppression\n\n      console.log('🔧 ErrorSuppressor: Additional Next.js warning filters active');\n\n      // Store original console methods\n      const originalError = console.error;\n      const originalWarn = console.warn;\n\n      // Create separate suppression functions for error and warn\n      const suppressKeyError = (...args: any[]) => {\n        const message = args[0];\n\n        // ONLY suppress if it's specifically about OuterLayoutRouter\n        if (\n          typeof message === 'string' &&\n          message.includes('Each child in a list should have a unique \"key\" prop') &&\n          message.includes('OuterLayoutRouter')\n        ) {\n          // This is the specific Next.js 15.5.0 internal warning - suppress it\n          return;\n        }\n\n        // Allow ALL other errors through\n        return originalError(...args);\n      };\n\n      const suppressKeyWarn = (...args: any[]) => {\n        const message = args[0];\n\n        // ONLY suppress if it's specifically about OuterLayoutRouter (unlikely for warnings)\n        if (\n          typeof message === 'string' &&\n          message.includes('Each child in a list should have a unique \"key\" prop') &&\n          message.includes('OuterLayoutRouter')\n        ) {\n          // This is the specific Next.js 15.5.0 internal warning - suppress it\n          return;\n        }\n\n        // Allow ALL other warnings through (including performance warnings)\n        return originalWarn(...args);\n      };\n\n      // Override console methods with correct handlers\n      console.error = suppressKeyError;\n      console.warn = suppressKeyWarn;\n\n      // Also patch the global error handler if it exists\n      if (typeof window !== 'undefined') {\n        const originalOnError = window.onerror;\n        window.onerror = (message, source, lineno, colno, error) => {\n          if (\n            typeof message === 'string' &&\n            message.includes('Each child in a list should have a unique \"key\" prop') &&\n            message.includes('OuterLayoutRouter')\n          ) {\n            return true; // Suppress the error\n          }\n\n          if (originalOnError) {\n            return originalOnError(message, source, lineno, colno, error);\n          }\n          return false;\n        };\n\n        // Try to patch React's internal warning system\n        const intervalId = setInterval(() => {\n          // Look for React's internal warning functions in the global scope\n          if ((window as any).__REACT_DEVTOOLS_GLOBAL_HOOK__) {\n            const hook = (window as any).__REACT_DEVTOOLS_GLOBAL_HOOK__;\n            if (hook.onCommitFiberRoot) {\n              // Already handled above\n              clearInterval(intervalId);\n            }\n          }\n        }, 100);\n\n        // Clear the interval after 5 seconds to avoid memory leaks\n        setTimeout(() => clearInterval(intervalId), 5000);\n      }\n\n      // Cleanup function\n      return () => {\n        console.error = originalError;\n        console.warn = originalWarn;\n        if (typeof window !== 'undefined' && window.onerror) {\n          // Reset to original error handler if we set one\n          window.onerror = null;\n        }\n      };\n    }\n  }, []);\n\n  // Render nothing\n  return null;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/components/utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/constants/api-limits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/constants/chart-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/constants/household-form-options.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/constants/resident-form-options.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/constants/resident-form.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/contexts/AuthContext.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":72,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":72,"endColumn":20,"suggestions":[{"fix":{"range":[2477,2553],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":90,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":90,"endColumn":22,"suggestions":[{"fix":{"range":[3164,3205],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":98,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":98,"endColumn":22,"suggestions":[{"fix":{"range":[3449,3516],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":105,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":105,"endColumn":20,"suggestions":[{"fix":{"range":[3651,3700],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":108,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":108,"endColumn":20,"suggestions":[{"fix":{"range":[3751,3800],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":138,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":138,"endColumn":24,"suggestions":[{"fix":{"range":[4888,4961],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":143,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":143,"endColumn":22,"suggestions":[{"fix":{"range":[5079,5149],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":166,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":166,"endColumn":22,"suggestions":[{"fix":{"range":[6068,6123],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":167,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":167,"endColumn":22,"suggestions":[{"fix":{"range":[6134,6200],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":168,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":168,"endColumn":22,"suggestions":[{"fix":{"range":[6211,6265],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":197,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":197,"endColumn":22,"suggestions":[{"fix":{"range":[7887,7940],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":198,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":198,"endColumn":22,"suggestions":[{"fix":{"range":[7951,7985],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":219,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8605,8608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8605,8608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":220,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":220,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8669,8672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8669,8672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":221,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8714,8717],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8714,8717],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":222,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":222,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8759,8762],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8759,8762],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":249,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":249,"endColumn":20,"suggestions":[{"fix":{"range":[9635,9682],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":261,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":261,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10010,10013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10010,10013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":262,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":262,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10052,10055],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10052,10055],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":268,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":268,"endColumn":24,"suggestions":[{"fix":{"range":[10220,10279],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":275,"column":15,"nodeType":"MemberExpression","messageId":"limited","endLine":275,"endColumn":26,"suggestions":[{"fix":{"range":[10502,10548],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":287,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":287,"endColumn":20,"suggestions":[{"fix":{"range":[10835,10915],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":291,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":291,"endColumn":20,"suggestions":[{"fix":{"range":[10994,11038],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":295,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":295,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11173,11176],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11173,11176],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":296,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11233,11236],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11233,11236],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":297,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":297,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11274,11277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11274,11277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":298,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":298,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11315,11318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11315,11318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":314,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":314,"endColumn":22,"suggestions":[{"fix":{"range":[11807,11887],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":327,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":327,"endColumn":18,"suggestions":[{"fix":{"range":[12203,12263],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","line":345,"column":6,"nodeType":"ArrayExpression","endLine":345,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [user]","fix":{"range":[12668,12670],"text":"[user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport type { User, Session } from '@supabase/supabase-js';\nimport React, { createContext, useContext, useState, useEffect, useCallback, useMemo } from 'react';\n\nimport { supabase } from '@/lib/data/supabase';\nimport type { AuthRole, AuthUserProfile } from '@/types/auth';\n\n// Use consolidated AuthRole type with permissions extension\nexport interface Role extends Pick<AuthRole, 'id' | 'name'> {\n  permissions: Record<string, boolean | string>;\n}\n\n// Simplified for original schema - no barangay_accounts needed\n\ninterface AuthContextType {\n  // Authentication state\n  session: Session | null;\n  user: User | null;\n  userProfile: AuthUserProfile | null;\n  role: Role | null;\n\n  // Loading states\n  loading: boolean;\n  profileLoading: boolean;\n  profileError: string | null;\n\n  // Methods\n  signIn: (email: string, password: string) => Promise<{ error: Error | null }>;\n  signOut: () => Promise<void>;\n  loadProfile: () => Promise<void>;\n  refreshProfile: () => Promise<void>;\n\n  // Helper methods\n  hasPermission: (permission: string) => boolean;\n  isInRole: (roleName: string) => boolean;\n  canAccessBarangay: (barangayCode: string) => boolean;\n  isBarangayAdmin: () => boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { readonly children: React.ReactNode }) {\n  // Core auth state\n  const [session, setSession] = useState<Session | null>(null);\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  // Profile state\n  const [userProfile, setUserProfile] = useState<AuthUserProfile | null>(null);\n  const [role, setRole] = useState<Role | null>(null);\n  const [profileLoading, setProfileLoading] = useState(false);\n  const [profileError, setProfileError] = useState<string | null>(null);\n  const [profileCache, setProfileCache] = useState<\n    Map<string, { profile: AuthUserProfile; role: Role; timestamp: number }>\n  >(new Map());\n  const [lastProfileLoad, setLastProfileLoad] = useState<number>(0);\n\n  // Retry helper with exponential backoff\n  const retryWithBackoff = async <T,>(\n    operation: () => Promise<T>,\n    maxRetries = 3,\n    baseDelay = 1000\n  ): Promise<T> => {\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error) {\n        if (attempt === maxRetries) throw error;\n\n        const delay = baseDelay * Math.pow(2, attempt);\n        console.log(`Retry attempt ${attempt + 1}/${maxRetries + 1} in ${delay}ms`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    throw new Error('Max retries exceeded');\n  };\n\n  // Load user profile and related data (simplified for original schema)\n  const loadUserProfile = useCallback(\n    async (userId: string, force = false) => {\n      try {\n        // Check cache first (cache for 5 minutes)\n        const cacheKey = userId;\n        const cached = profileCache.get(cacheKey);\n        const now = Date.now();\n        const cacheTimeout = 5 * 60 * 1000; // 5 minutes\n\n        if (!force && cached && now - cached.timestamp < cacheTimeout) {\n          console.log('Using cached profile data');\n          setUserProfile(cached.profile);\n          setRole(cached.role);\n          return;\n        }\n\n        // Prevent multiple simultaneous requests for the same user\n        if (profileLoading && now - lastProfileLoad < 1000) {\n          console.log('Profile already loading, skipping duplicate request');\n          return;\n        }\n\n        setProfileLoading(true);\n        setProfileError(null);\n        setLastProfileLoad(now);\n        console.log('Loading user profile for:', userId);\n\n        // Try real database query first\n        console.log('Attempting real database query...');\n        const startTime = Date.now();\n\n        // Set a shorter timeout for this specific query\n        const timeoutPromise = new Promise((_, reject) => {\n          setTimeout(() => reject(new Error('Profile query timeout')), 15000); // 15 second timeout\n        });\n\n        try {\n          // Get the current session to pass the auth token\n          const {\n            data: { session },\n          } = await supabase.auth.getSession();\n\n          if (!session?.access_token) {\n            throw new Error('No valid authentication session. Please log in again.');\n          }\n\n          // Use server-side API to fetch profile data (bypasses RLS issues)\n          const response = (await retryWithBackoff(async () => {\n            const result = await Promise.race([\n              fetch('/api/auth/profile', {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  Authorization: `Bearer ${session.access_token}`,\n                },\n              }),\n              timeoutPromise,\n            ]);\n            console.log('Profile API response status:', (result as Response).status);\n            return result;\n          })) as Response;\n\n          const queryTime = Date.now() - startTime;\n          console.log(`Profile query completed successfully in ${queryTime}ms`);\n\n          if (!response.ok) {\n            const errorData = await response.json().catch(() => ({}));\n            console.error('Profile API error:', {\n              status: response.status,\n              statusText: response.statusText,\n              error: errorData.error || 'Unknown error',\n              fullError: JSON.stringify(errorData, null, 2),\n            });\n            throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n          }\n\n          const data = await response.json();\n          // The API returns { data: { profile, role }, message, metadata }\n          const { profile: profileData, role } = data.data || data;\n\n          if (!profileData) {\n            console.error('No profile found for user:', userId);\n            throw new Error('Profile not found');\n          }\n\n          // Log the actual data structure to understand what fields exist\n          console.log('Raw profile data from API:', profileData);\n          console.log('Profile barangay_code:', profileData?.barangay_code);\n          console.log('Profile role_id:', profileData?.role_id);\n\n          // Map the database fields to our interface, using defaults for missing fields\n          const profile: AuthUserProfile = {\n            id: profileData.id || userId,\n            email: profileData.email || '',\n            first_name: profileData.first_name || '',\n            middle_name: profileData.middle_name || null,\n            last_name: profileData.last_name || '',\n            phone: profileData.phone || null,\n            role_id: profileData.role_id || '',\n            barangay_code: profileData.barangay_code || null,\n            city_municipality_code: profileData.city_municipality_code || null,\n            province_code: profileData.province_code || null,\n            region_code: profileData.region_code || null,\n            is_active: profileData.is_active !== undefined ? profileData.is_active : true,\n            last_login: profileData.last_login || null,\n            email_verified: profileData.email_verified || false,\n            email_verified_at: profileData.email_verified_at || null,\n            welcome_email_sent: profileData.welcome_email_sent || false,\n            welcome_email_sent_at: profileData.welcome_email_sent_at || null,\n            onboarding_completed: profileData.onboarding_completed || false,\n            onboarding_completed_at: profileData.onboarding_completed_at || null,\n            created_by: profileData.created_by || null,\n            updated_by: profileData.updated_by || null,\n            created_at: profileData.created_at || new Date().toISOString(),\n            updated_at: profileData.updated_at || new Date().toISOString(),\n          };\n\n          console.log('Profile loaded successfully:', profile);\n          console.log('Role loaded:', role);\n\n          const finalRole = role || {\n            id: 'default-role',\n            name: 'User',\n            permissions: { residents_view: true },\n          };\n\n          // Cache the results\n          const newCache = new Map(profileCache);\n          newCache.set(cacheKey, {\n            profile,\n            role: finalRole,\n            timestamp: Date.now(),\n          });\n          setProfileCache(newCache);\n\n          setUserProfile(profile);\n          setRole(finalRole);\n        } catch (dbError) {\n          console.error('Database query failed and no fallback available:', {\n            message: (dbError as any)?.message || 'Unknown error',\n            code: (dbError as any)?.code,\n            details: (dbError as any)?.details,\n            hint: (dbError as any)?.hint,\n            fullError: JSON.stringify(dbError, null, 2),\n          });\n          console.error('User must have a valid profile in the database to use the system');\n\n          // Don't use mock data - require real database profile\n          setUserProfile(null);\n          setRole(null);\n          throw new Error('Failed to load user profile from database');\n        }\n      } catch (error) {\n        console.error('Error in loadUserProfile:', error);\n        setProfileError(error instanceof Error ? error.message : 'Failed to load profile');\n        setUserProfile(null);\n        setRole(null);\n      } finally {\n        setProfileLoading(false);\n      }\n    },\n    [profileCache, profileLoading, lastProfileLoad]\n  );\n\n  // Initialize auth state\n  useEffect(() => {\n    // Get initial session with timeout\n    const initAuth = async () => {\n      try {\n        console.log('Starting auth initialization...');\n\n        // First try to get session\n        const {\n          data: { session },\n          error,\n        } = await supabase.auth.getSession();\n\n        if (error) {\n          console.error('Session error:', {\n            message: error.message || 'Unknown error',\n            code: error.code,\n            details: (error as any).details,\n            hint: (error as any).hint,\n            fullError: JSON.stringify(error, null, 2),\n          });\n\n          // If session fails, try to refresh from storage\n          try {\n            console.log('Attempting session recovery from storage...');\n            await supabase.auth.refreshSession();\n            const {\n              data: { session: refreshedSession },\n            } = await supabase.auth.getSession();\n\n            if (refreshedSession) {\n              console.log('Session recovered successfully');\n              setSession(refreshedSession);\n              setUser(refreshedSession.user);\n            }\n          } catch (refreshError) {\n            console.warn('Session recovery failed:', refreshError);\n          }\n\n          setLoading(false);\n          return;\n        }\n\n        console.log('Session retrieved:', session?.user?.id ? 'User found' : 'No user');\n        setSession(session);\n        setUser(session?.user ?? null);\n\n        console.log('Auth initialization complete');\n        setLoading(false);\n      } catch (error) {\n        console.error('Auth initialization error:', {\n          message: (error as any)?.message || 'Unknown error',\n          code: (error as any)?.code,\n          details: (error as any)?.details,\n          hint: (error as any)?.hint,\n          fullError: JSON.stringify(error, null, 2),\n        });\n        setLoading(false);\n      }\n    };\n\n    // Add timeout to prevent infinite loading - only if page is visible\n    let timeoutId: NodeJS.Timeout | null = null;\n\n    if (!document.hidden) {\n      timeoutId = setTimeout(() => {\n        console.warn('Auth initialization timeout - forcing completion');\n        setLoading(false);\n        // Don't clear the session if user was found\n        if (user) {\n          console.log('User was authenticated but initialization timed out - continuing');\n        }\n      }, 10000); // 10 seconds timeout - shorter for incognito mode\n    }\n\n    initAuth().then(() => {\n      if (timeoutId) clearTimeout(timeoutId);\n    });\n\n    // Listen for auth changes\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      console.log('Auth state change:', event, session?.user?.id);\n      setSession(session);\n      setUser(session?.user ?? null);\n\n      if (event === 'SIGNED_OUT') {\n        setUserProfile(null);\n        setRole(null);\n        setProfileError(null);\n      }\n\n      // Always ensure loading is false after auth state change\n      setLoading(false);\n    });\n\n    return () => {\n      if (timeoutId) clearTimeout(timeoutId);\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  // Sign in method\n  const signIn = useCallback(\n    async (email: string, password: string) => {\n      const { error, data } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      // Preload profile data immediately after successful sign-in (but skip on public routes)\n      if (!error && data.user) {\n        const publicRoutes = ['/signup', '/login', '/'];\n        const currentPath = typeof window !== 'undefined' ? window.location.pathname : '';\n        const isPublicRoute = publicRoutes.includes(currentPath);\n\n        if (!isPublicRoute) {\n          loadUserProfile(data.user.id).catch(err => {\n            console.error('Profile preloading failed:', err);\n          });\n        }\n      }\n\n      return { error };\n    },\n    [loadUserProfile]\n  );\n\n  // Sign out method\n  const signOut = useCallback(async () => {\n    const { error } = await supabase.auth.signOut();\n    if (error) {\n      console.error('Error signing out:', error);\n    }\n  }, []);\n\n  // Load profile method (separate from auth)\n  const loadProfile = useCallback(async () => {\n    if (user?.id) {\n      await loadUserProfile(user.id);\n    }\n  }, [user?.id, loadUserProfile]);\n\n  // Refresh profile method\n  const refreshProfile = useCallback(async () => {\n    if (user) {\n      await loadUserProfile(user.id);\n    }\n  }, [user, loadUserProfile]);\n\n  // Auto-load profile when user is authenticated (but skip on public routes)\n  useEffect(() => {\n    // Skip profile loading on public routes\n    const publicRoutes = ['/signup', '/login', '/'];\n    const currentPath = typeof window !== 'undefined' ? window.location.pathname : '';\n    const isPublicRoute = publicRoutes.includes(currentPath);\n\n    if (user?.id && !userProfile && !profileLoading && !isPublicRoute) {\n      loadProfile();\n    }\n  }, [user?.id, userProfile, profileLoading, loadProfile]);\n\n  // Permission helpers\n  const checkCrudPermission = useCallback((action: string, permissionValue: string): boolean => {\n    if (permissionValue === 'crud' || permissionValue === 'manage') return true;\n    if (action === 'view' && (permissionValue === 'read' || permissionValue === 'crud'))\n      return true;\n    if (action === 'create' && (permissionValue === 'write' || permissionValue === 'crud'))\n      return true;\n    if (action === 'update' && (permissionValue === 'write' || permissionValue === 'crud'))\n      return true;\n    if (action === 'delete' && (permissionValue === 'write' || permissionValue === 'crud'))\n      return true;\n    return false;\n  }, []);\n\n  const hasPermission = useCallback(\n    (permission: string): boolean => {\n      if (!role?.permissions) return false;\n\n      // Super admin has all permissions\n      if (role.permissions.all === true) return true;\n\n      // Check specific permission (boolean style)\n      if (role.permissions[permission] === true) return true;\n\n      // Check CRUD-style permissions (e.g., \"residents_view\")\n      const [resource, action] = permission.split('_');\n      if (resource && action && role.permissions[resource]) {\n        const resourcePermission = role.permissions[resource];\n        // If permission is boolean true, user has full access\n        if (resourcePermission === true) return true;\n        // If permission is a string, check CRUD permissions\n        if (typeof resourcePermission === 'string') {\n          return checkCrudPermission(action, resourcePermission);\n        }\n      }\n\n      return false;\n    },\n    [role, checkCrudPermission]\n  );\n\n  const isInRole = useCallback(\n    (roleName: string): boolean => {\n      return role?.name === roleName;\n    },\n    [role]\n  );\n\n  const canAccessBarangay = useCallback(\n    (barangayCode: string): boolean => {\n      return userProfile?.barangay_code === barangayCode;\n    },\n    [userProfile]\n  );\n\n  const isBarangayAdmin = useCallback((): boolean => {\n    return role?.name === 'barangay_admin';\n  }, [role]);\n\n  const value: AuthContextType = useMemo(\n    () => ({\n      // State\n      session,\n      user,\n      userProfile,\n      role,\n      loading,\n      profileLoading,\n      profileError,\n\n      // Methods\n      signIn,\n      signOut,\n      loadProfile,\n      refreshProfile,\n\n      // Helpers\n      hasPermission,\n      isInRole,\n      canAccessBarangay,\n      isBarangayAdmin,\n    }),\n    [\n      session,\n      user,\n      userProfile,\n      role,\n      loading,\n      profileLoading,\n      profileError,\n      signIn,\n      signOut,\n      loadProfile,\n      refreshProfile,\n      hasPermission,\n      isInRole,\n      canAccessBarangay,\n      isBarangayAdmin,\n    ]\n  );\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\n// Hook to use auth context\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    // Provide a fallback during SSR or if used outside provider\n    return {\n      user: null,\n      session: null,\n      userProfile: null,\n      role: null,\n      loading: true,\n      profileLoading: true,\n      profileError: null,\n      signIn: async () => ({ error: new Error('AuthProvider not available') }),\n      signOut: async () => {},\n      loadProfile: async () => {},\n      refreshProfile: async () => {},\n      hasPermission: () => false,\n      isInRole: () => false,\n      canAccessBarangay: () => false,\n      isBarangayAdmin: () => false,\n    };\n  }\n  return context;\n}\n\n// Hook for protected routes\nexport function useRequireAuth() {\n  const auth = useAuth();\n\n  useEffect(() => {\n    if (!auth.loading && !auth.user) {\n      // Redirect to login - but give more time for auth to settle during navigation\n      const timer = setTimeout(() => {\n        window.location.href = '/login';\n      }, 500); // Small delay to prevent race conditions during navigation\n\n      return () => clearTimeout(timer);\n    }\n  }, [auth.loading, auth.user]);\n\n  return auth;\n}\n\n// Hook for role-based access\nexport function useRequireRole(requiredRole: string) {\n  const auth = useRequireAuth();\n\n  useEffect(() => {\n    if (!auth.loading && !auth.profileLoading && auth.user && !auth.isInRole(requiredRole)) {\n      // Redirect to unauthorized page\n      window.location.href = '/unauthorized';\n    }\n  }, [auth, requiredRole]);\n\n  return auth;\n}\n\n// Hook for permission-based access\nexport function useRequirePermission(permission: string) {\n  const auth = useRequireAuth();\n\n  useEffect(() => {\n    if (!auth.loading && !auth.profileLoading && auth.user && !auth.hasPermission(permission)) {\n      // Redirect to unauthorized page\n      window.location.href = '/unauthorized';\n    }\n  }, [auth, permission]);\n\n  return auth;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/contexts/ThemeContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/contexts/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/design-system/__tests__/utils.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":238,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8089,8092],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8089,8092],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Design System Utils Tests\n * Tests for design token utility functions\n */\n\nimport {\n  getColor,\n  getRBIColor,\n  getSpacing,\n  getResponsiveSpacing,\n  getFontSize,\n  getHeadingStyle,\n  getButtonStyles,\n  getInputStyles,\n  checkContrast,\n  getFocusRing,\n  validateDesignTokenUsage,\n  getSectoralBadgeColor,\n  getHouseholdTypeStyle,\n} from '../utils';\n\ndescribe('Design System Utils', () => {\n  describe('getColor', () => {\n    it('should return correct color for valid path', () => {\n      expect(getColor('primary.500')).toBe('#3b82f6');\n      expect(getColor('success.600')).toBe('#059669');\n      expect(getColor('neutral.800')).toBe('#262626');\n    });\n\n    it('should return fallback color for invalid path', () => {\n      // Should use neutral.500 as fallback\n      expect(getColor('invalid.path')).toBe('#737373');\n    });\n\n    it('should warn for invalid color paths', () => {\n      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();\n      getColor('invalid.color');\n      expect(consoleSpy).toHaveBeenCalledWith(\n        \"Color token 'invalid.color' not found. Using fallback.\"\n      );\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('getRBIColor', () => {\n    it('should return correct colors for RBI classifications', () => {\n      expect(getRBIColor('laborForce')).toBe('#059669');\n      expect(getRBIColor('seniorCitizen')).toBe('#9333ea');\n      expect(getRBIColor('youth')).toBe('#2563eb');\n      expect(getRBIColor('pwd')).toBe('#c2410c');\n    });\n\n    it('should return fallback for invalid classification', () => {\n      // @ts-expect-error Testing invalid input\n      expect(getRBIColor('invalid')).toBe('#737373');\n    });\n  });\n\n  describe('getSpacing', () => {\n    it('should return correct spacing values', () => {\n      expect(getSpacing(4)).toBe('16px');\n      expect(getSpacing(8)).toBe('32px');\n      expect(getSpacing(0.5)).toBe('2px');\n    });\n  });\n\n  describe('getResponsiveSpacing', () => {\n    it('should return responsive spacing object', () => {\n      const responsive = getResponsiveSpacing(4);\n\n      expect(responsive).toHaveProperty('base', '16px');\n      expect(responsive).toHaveProperty('sm', '16px');\n      expect(responsive).toHaveProperty('md');\n      expect(responsive).toHaveProperty('lg');\n    });\n  });\n\n  describe('getFontSize', () => {\n    it('should return font size configuration', () => {\n      const fontSize = getFontSize('base');\n\n      expect(fontSize).toEqual(['16px', { lineHeight: '24px', letterSpacing: '0em' }]);\n    });\n\n    it('should return display sizes correctly', () => {\n      const displaySize = getFontSize('7xl');\n\n      expect(displaySize).toEqual(['72px', { lineHeight: '72px', letterSpacing: '-0.15em' }]);\n    });\n  });\n\n  describe('getHeadingStyle', () => {\n    it('should return proper heading styles for each level', () => {\n      const h1Style = getHeadingStyle(1);\n      const h6Style = getHeadingStyle(6);\n\n      expect(h1Style.fontSize).toEqual(['36px', { lineHeight: '40px', letterSpacing: '-0.1em' }]);\n      expect(h1Style.fontWeight).toBe('700');\n\n      expect(h6Style.fontSize).toEqual(['16px', { lineHeight: '24px', letterSpacing: '0em' }]);\n      expect(h6Style.fontWeight).toBe('500');\n    });\n  });\n\n  describe('getButtonStyles', () => {\n    it('should return complete button styles', () => {\n      const primaryButton = getButtonStyles('primary', 'md');\n\n      expect(primaryButton).toHaveProperty('fontFamily');\n      expect(primaryButton).toHaveProperty('fontWeight', '500');\n      expect(primaryButton).toHaveProperty('borderRadius', '6px');\n      expect(primaryButton).toHaveProperty('backgroundColor', '#3b82f6');\n    });\n\n    it('should return different styles for different variants', () => {\n      const primaryButton = getButtonStyles('primary');\n      const secondaryButton = getButtonStyles('secondary');\n      const dangerButton = getButtonStyles('danger');\n\n      expect(primaryButton.backgroundColor).toBe('#3b82f6');\n      expect(secondaryButton.backgroundColor).toBe('#7c3aed');\n      expect(dangerButton.backgroundColor).toBe('#dc2626');\n    });\n  });\n\n  describe('getInputStyles', () => {\n    it('should return proper input styles for different states', () => {\n      const defaultInput = getInputStyles('default');\n      const focusInput = getInputStyles('focus');\n      const errorInput = getInputStyles('error');\n\n      expect(defaultInput.borderColor).toBe('#d4d4d4');\n      expect(focusInput.borderColor).toBe('#3b82f6');\n      expect(errorInput.borderColor).toBe('#ef4444');\n    });\n\n    it('should include focus ring-3 for focus state', () => {\n      const focusInput = getInputStyles('focus');\n\n      expect(focusInput).toHaveProperty('boxShadow', '0 0 0 3px rgba(59, 130, 246, 0.1)');\n    });\n  });\n\n  describe('checkContrast', () => {\n    it('should return true for known compliant combinations', () => {\n      const isCompliant = checkContrast('#262626', '#fafafa', 'AA');\n\n      expect(isCompliant).toBe(true);\n    });\n\n    it('should return false for unknown combinations', () => {\n      const isCompliant = checkContrast('#random', '#color', 'AA');\n\n      expect(isCompliant).toBe(false);\n    });\n  });\n\n  describe('getFocusRing', () => {\n    it('should return focus ring-3 styles for different variants', () => {\n      const primaryFocus = getFocusRing('primary');\n      const dangerFocus = getFocusRing('danger');\n\n      expect(primaryFocus.outline).toBe('none');\n      expect(primaryFocus.boxShadow).toBe('0 0 0 3px rgba(59, 130, 246, 0.1)');\n      expect(dangerFocus.boxShadow).toBe('0 0 0 3px rgba(220, 38, 38, 0.1)');\n    });\n  });\n\n  describe('validateDesignTokenUsage', () => {\n    it('should detect hardcoded colors', () => {\n      const styles = {\n        backgroundColor: '#ff0000',\n        color: '#000000',\n      };\n\n      const validation = validateDesignTokenUsage(styles);\n\n      expect(validation.isValid).toBe(false);\n      expect(validation.warnings).toHaveLength(2);\n      expect(validation.warnings[0]).toContain('Hardcoded color');\n    });\n\n    it('should detect non-standard spacing', () => {\n      const styles = {\n        padding: '15px',\n        margin: '25px',\n      };\n\n      const validation = validateDesignTokenUsage(styles);\n\n      expect(validation.isValid).toBe(false);\n      expect(validation.warnings.length).toBeGreaterThan(0);\n      expect(validation.warnings[0]).toContain('Non-standard spacing');\n    });\n\n    it('should pass for valid design token usage', () => {\n      const styles = {\n        backgroundColor: '#3b82f6', // This would be detected as hardcoded\n        padding: '16px', // Valid spacing token\n      };\n\n      const validation = validateDesignTokenUsage(styles);\n\n      // Should have warnings for hardcoded colors but suggestions for improvement\n      expect(validation.suggestions.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('getSectoralBadgeColor', () => {\n    it('should return proper badge colors for different variants', () => {\n      const solidBadge = getSectoralBadgeColor('laborForce', 'solid');\n      const outlineBadge = getSectoralBadgeColor('laborForce', 'outline-solid');\n      const subtleBadge = getSectoralBadgeColor('laborForce', 'subtle');\n\n      expect(solidBadge.backgroundColor).toBe('#059669');\n      expect(solidBadge.color).toBe('#fafafa');\n\n      expect(outlineBadge.backgroundColor).toBe('transparent');\n      expect(outlineBadge.color).toBe('#059669');\n\n      expect(subtleBadge.backgroundColor).toBeTruthy(); // Should have a light background\n    });\n  });\n\n  describe('getHouseholdTypeStyle', () => {\n    it('should return appropriate icons and colors for household types', () => {\n      const nuclear = getHouseholdTypeStyle('nuclear');\n      const singleParent = getHouseholdTypeStyle('single_parent');\n\n      expect(nuclear.icon).toBe('👪');\n      expect(nuclear.color).toBe('#3b82f6');\n\n      expect(singleParent.icon).toBe('👩‍👧‍👦');\n      expect(singleParent.color).toBe('#a855f7');\n    });\n\n    it('should return default style for unknown household type', () => {\n      const unknown = getHouseholdTypeStyle('unknown' as any);\n\n      expect(unknown.icon).toBe('👪'); // Should fallback to nuclear\n      expect(unknown.color).toBe('#3b82f6');\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/design-system/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/design-system/tokens.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/design-system/tokens/Colors/Colors.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ColorSwatch' is assigned a value but never used.","line":88,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport React from 'react';\n\n// Static color definitions for display purposes\n// These represent the colors currently used in the application\nconst colors = {\n  // Base colors\n  gray: {\n    50: '#f9fafb',\n    100: '#f3f4f6',\n    200: '#e5e7eb',\n    300: '#d1d5db',\n    400: '#9ca3af',\n    500: '#6b7280',\n    600: '#4b5563',\n    700: '#374151',\n    800: '#1f2937',\n    900: '#111827',\n  },\n  blue: {\n    50: '#eff6ff',\n    100: '#dbeafe',\n    200: '#bfdbfe',\n    300: '#93c5fd',\n    400: '#60a5fa',\n    500: '#3b82f6',\n    600: '#2563eb',\n    700: '#1d4ed8',\n    800: '#1e40af',\n    900: '#1e3a8a',\n  },\n  green: {\n    50: '#f0fdf4',\n    100: '#dcfce7',\n    200: '#bbf7d0',\n    300: '#86efac',\n    400: '#4ade80',\n    500: '#22c55e',\n    600: '#16a34a',\n    700: '#15803d',\n    800: '#166534',\n    900: '#14532d',\n  },\n  red: {\n    50: '#fef2f2',\n    100: '#fee2e2',\n    200: '#fecaca',\n    300: '#fca5a5',\n    400: '#f87171',\n    500: '#ef4444',\n    600: '#dc2626',\n    700: '#b91c1c',\n    800: '#991b1b',\n    900: '#7f1d1d',\n  },\n  yellow: {\n    50: '#fefce8',\n    100: '#fef3c7',\n    200: '#fde68a',\n    300: '#fcd34d',\n    400: '#fbbf24',\n    500: '#f59e0b',\n    600: '#d97706',\n    700: '#b45309',\n    800: '#92400e',\n    900: '#78350f',\n  },\n  white: '#ffffff',\n  black: '#000000',\n  // Semantic color mappings\n  primary: '#2563eb', // blue-600\n  secondary: '#6b7280', // gray-500\n  success: '#16a34a', // green-600\n  warning: '#d97706', // yellow-600\n  danger: '#dc2626', // red-600\n  neutral: '#6b7280', // gray-500\n  default: '#1f2937', // gray-800\n  default_secondary: '#4b5563', // gray-600\n  default_tertiary: '#6b7280', // gray-500\n  default_quaternary: '#9ca3af', // gray-400\n  default_secondary_hover: '#374151', // gray-700\n  default_tertiary_hover: '#4b5563', // gray-600\n  border: '#d1d5db', // gray-300\n  utility: '#3b82f6', // blue-500\n};\n\n// Helper Components\nconst ColorSwatch: React.FC<{ name: string; value: string; className?: string }> = ({\n  name,\n  value,\n  className = '',\n}) => {\n  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(value);\n    } catch (err) {\n      console.error('Failed to copy color:', err);\n    }\n  };\n\n  // Auto-determine text color\n  const getTextColor = (bgColor: string): string => {\n    if (bgColor === 'transparent') return '#000000';\n    const hex = bgColor.replace('#', '');\n    if (hex.length !== 6) return '#000000';\n\n    const r = parseInt(hex.substring(0, 2), 16);\n    const g = parseInt(hex.substring(2, 4), 16);\n    const b = parseInt(hex.substring(4, 6), 16);\n    const brightness = (r * 299 + g * 587 + b * 114) / 1000;\n\n    return brightness > 128 ? '#000000' : '#ffffff';\n  };\n\n  const textColor = getTextColor(value);\n\n  return (\n    <div\n      className={`cursor-pointer rounded-lg border border-gray-200 p-4 transition-all hover:shadow-md ${className}`}\n      style={{ backgroundColor: value, color: textColor }}\n      onClick={handleCopy}\n      title={`Click to copy ${value}`}\n    >\n      <div className=\"text-sm font-semibold\">{name}</div>\n      <div className=\"mt-1 font-mono text-xs opacity-75\">{value}</div>\n    </div>\n  );\n};\n\nconst ColorScale: React.FC<{\n  title: string;\n  colorObject: Record<string, string>;\n  description?: string;\n}> = ({ title, colorObject, description }) => {\n  return (\n    <div className=\"mb-8\">\n      <div className=\"mb-4\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{title}</h3>\n        {description && (\n          <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400 dark:text-gray-600\">\n            {description}\n          </p>\n        )}\n      </div>\n      <div className=\"flex overflow-hidden rounded-lg border border-gray-200 shadow-xs\">\n        {Object.entries(colorObject).map(([shade, color]) => (\n          <div\n            key={shade}\n            className=\"flex min-h-[80px] flex-1 cursor-pointer flex-col justify-between p-3 transition-transform hover:scale-105\"\n            style={{\n              backgroundColor: color,\n              color: shade === '50' || shade === '100' || shade === '200' ? '#000000' : '#ffffff',\n            }}\n            onClick={() => navigator.clipboard.writeText(color)}\n            title={`Click to copy ${color}`}\n          >\n            <div className=\"text-xs font-bold\">{shade}</div>\n            <div className=\"mt-1 font-mono text-xs\">{color}</div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst meta: Meta = {\n  title: 'Design System/Colors',\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component: `\n# Figma-Style Color System\n\nThis is your **living color documentation** using professional Figma design system patterns. \nAll colors read directly from your Tailwind config with built-in dark mode support.\n\n## What You Have\n\n- **Brand Colors**: Your government blue, purple, green, orange, red palette\n- **Text Hierarchy**: \\`text-text-gray-600 dark:text-gray-400\\`, \\`text-text-gray-600 dark:text-gray-400\\`, \\`text-text-tertiary\\`, \\`text-text-quaternary\\`\n- **Background Hierarchy**: \\`bg-default-primary\\`, \\`bg-default-secondary\\`, etc.\n- **Context-Aware**: \\`_onBrand\\`, \\`_hover\\`, \\`_solid\\` variants\n- **Built-in Dark Mode**: Every semantic color automatically switches\n\n## Professional Usage Patterns\n\n\\`\\`\\`tsx\n// Text hierarchy (professional Figma pattern)\n<h1 className=\"text-text-gray-600 dark:text-gray-400\">Main heading</h1>\n<p className=\"text-text-gray-600 dark:text-gray-400\">Secondary content</p>\n<p className=\"text-text-tertiary\">Less important content</p>\n<span className=\"text-text-quaternary\">Subtle text</span>\n\n// Context-aware text\n<span className=\"text-text-gray-600_onBrand\">White text on brand colors</span>\n<span className=\"text-text-gray-600_onBrand\">Light text on brand</span>\n\n// Background hierarchy  \n<div className=\"bg-default-primary\">Main background</div>\n<div className=\"bg-default-secondary\">Card background</div>\n<div className=\"bg-default-tertiary\">Subtle background</div>\n\n// Status colors with hierarchy\n<div className=\"text-text-success_primary bg-default-success_primary border border-border-green-600\">\n  Professional success message\n</div>\n\n// Brand colors (your government theme)\n<button className=\"bg-default-brand_solid hover:bg-default-brand_solid_hover text-text-gray-600_onBrand\">\n  Government Action Button\n</button>\n\n// Still use standard Tailwind when needed\n<div className=\"bg-blue-500 text-white dark:text-black dark:text-white\">Standard Tailwind</div>\n\\`\\`\\`\n\n## Dark Mode\n\nAll semantic colors automatically switch in dark mode. Just add \\`dark\\` class to your HTML:\n\n\\`\\`\\`html\n<html className=\"dark\">\n\\`\\`\\`\n        `,\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Brand Colors from Config\nexport const BrandColors: Story = {\n  name: '🎨 Brand Colors',\n  render: () => (\n    <div className=\"mx-auto max-w-6xl p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"mb-2 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n          Brand Color System\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Your brand color palette from{' '}\n          <code className=\"rounded bg-gray-100 px-2 py-1\">tailwind.config.js</code>. Use classes\n          like <code className=\"rounded bg-gray-100 px-2 py-1\">bg-blue-600</code>,{' '}\n          <code className=\"rounded bg-gray-100 px-2 py-1\">text-gray-500</code>, etc.\n        </p>\n      </div>\n\n      <div className=\"space-y-8\">\n        {colors.primary && (\n          <ColorScale\n            title=\"Primary (Blue)\"\n            colorObject={colors.primary}\n            description=\"Government blue - your main brand color\"\n          />\n        )}\n        {colors.secondary && (\n          <ColorScale\n            title=\"Secondary (Purple)\"\n            colorObject={colors.secondary}\n            description=\"Brand secondary color\"\n          />\n        )}\n        {colors.success && (\n          <ColorScale\n            title=\"Success (Green)\"\n            colorObject={colors.success}\n            description=\"Success states and positive actions\"\n          />\n        )}\n        {colors.warning && (\n          <ColorScale\n            title=\"Warning (Orange)\"\n            colorObject={colors.warning}\n            description=\"Warning states and caution indicators\"\n          />\n        )}\n        {colors.danger && (\n          <ColorScale\n            title=\"Danger (Red)\"\n            colorObject={colors.danger}\n            description=\"Error states and destructive actions\"\n          />\n        )}\n        {colors.neutral && (\n          <ColorScale\n            title=\"Neutral (Gray)\"\n            colorObject={colors.neutral}\n            description=\"Text, borders, and neutral backgrounds\"\n          />\n        )}\n      </div>\n    </div>\n  ),\n};\n\n// Semantic Colors from Config\nexport const SemanticColors: Story = {\n  name: '💭 Complete Semantic System',\n  render: () => (\n    <div className=\"mx-auto max-w-6xl p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"mb-2 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n          Professional Semantic Color System\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Your complete semantic color system with text hierarchy, backgrounds, borders, and dark\n          mode support.\n        </p>\n      </div>\n\n      {/* Text Semantic Colors - Clean Structure */}\n      <div className=\"mb-12\">\n        <h2 className=\"mb-6 text-xl font-semibold text-gray-900 dark:text-gray-100\">\n          Clean Text Colors\n        </h2>\n        <p className=\"mb-4 text-sm text-gray-600 dark:text-gray-400\">\n          Now using clean class names:{' '}\n          <code className=\"rounded bg-gray-100 px-1 py-0.5\">text-default</code>,{' '}\n          <code className=\"rounded bg-gray-100 px-1 py-0.5\">text-gray-600</code>,{' '}\n          <code className=\"rounded bg-gray-100 px-1 py-0.5\">text-success</code> (no redundant\n          prefixes!)\n        </p>\n\n        <div className=\"grid grid-cols-1 gap-6\">\n          {/* Content Hierarchy Section */}\n          <div className=\"rounded-xl border border-gray-200 bg-white p-6\">\n            <h3 className=\"mb-4 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n              📝 Content Hierarchy\n            </h3>\n            <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4\">\n              {colors.default && (\n                <div className=\"rounded-lg border border-gray-100 p-4\">\n                  <div className=\"mb-2 flex items-center gap-3\">\n                    <div\n                      className=\"h-6 w-6 shrink-0 rounded-sm border border-gray-200\"\n                      style={{ backgroundColor: colors.default.DEFAULT }}\n                    />\n                    <div className=\"min-w-0 flex-1\">\n                      <div className=\"text-sm font-semibold text-gray-900 dark:text-gray-100\">\n                        text-default\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"space-y-1 text-xs\">\n                    <div className=\"font-mono text-gray-600 dark:text-gray-400\">\n                      Light: {colors.default.DEFAULT}\n                    </div>\n                    <div className=\"font-mono text-gray-600 dark:text-gray-400\">\n                      Dark: {colors.default.dark}\n                    </div>\n                  </div>\n                  <div className=\"mt-3\">\n                    <div\n                      className=\"rounded px-2 py-1 text-sm\"\n                      style={{ color: colors.default.DEFAULT }}\n                    >\n                      Main headings\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {colors.default_secondary && (\n                <div className=\"rounded-lg border border-gray-100 p-4\">\n                  <div className=\"mb-2 flex items-center gap-3\">\n                    <div\n                      className=\"h-6 w-6 shrink-0 rounded-sm border border-gray-200\"\n                      style={{ backgroundColor: colors.default_secondary.DEFAULT }}\n                    />\n                    <div className=\"min-w-0 flex-1\">\n                      <div className=\"text-sm font-semibold text-gray-900 dark:text-gray-100\">\n                        text-default_secondary\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"space-y-1 text-xs\">\n                    <div className=\"font-mono text-gray-600 dark:text-gray-400\">\n                      Light: {colors.default_secondary.DEFAULT}\n                    </div>\n                    <div className=\"font-mono text-gray-600 dark:text-gray-400\">\n                      Dark: {colors.default_secondary.dark}\n                    </div>\n                  </div>\n                  <div className=\"mt-3\">\n                    <div\n                      className=\"rounded px-2 py-1 text-sm\"\n                      style={{ color: colors.default_secondary.DEFAULT }}\n                    >\n                      Body text\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {colors.default_tertiary && (\n                <div className=\"rounded-lg border border-gray-100 p-4\">\n                  <div className=\"mb-2 flex items-center gap-3\">\n                    <div\n                      className=\"h-6 w-6 shrink-0 rounded-sm border border-gray-200\"\n                      style={{ backgroundColor: colors.default_tertiary.DEFAULT }}\n                    />\n                    <div className=\"min-w-0 flex-1\">\n                      <div className=\"text-sm font-semibold text-gray-900 dark:text-gray-100\">\n                        text-default_tertiary\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"space-y-1 text-xs\">\n                    <div className=\"font-mono text-gray-600 dark:text-gray-400\">\n                      Light: {colors.default_tertiary.DEFAULT}\n                    </div>\n                    <div className=\"font-mono text-gray-600 dark:text-gray-400\">\n                      Dark: {colors.default_tertiary.dark}\n                    </div>\n                  </div>\n                  <div className=\"mt-3\">\n                    <div\n                      className=\"rounded px-2 py-1 text-sm\"\n                      style={{ color: colors.default_tertiary.DEFAULT }}\n                    >\n                      Supporting info\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {colors.default_quaternary && (\n                <div className=\"rounded-lg border border-gray-100 p-4\">\n                  <div className=\"mb-2 flex items-center gap-3\">\n                    <div\n                      className=\"h-6 w-6 shrink-0 rounded-sm border border-gray-200\"\n                      style={{ backgroundColor: colors.default_quaternary.DEFAULT }}\n                    />\n                    <div className=\"min-w-0 flex-1\">\n                      <div className=\"text-sm font-semibold text-gray-900 dark:text-gray-100\">\n                        text-default_quaternary\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"space-y-1 text-xs\">\n                    <div className=\"font-mono text-gray-600 dark:text-gray-400\">\n                      Light: {colors.default_quaternary.DEFAULT}\n                    </div>\n                    <div className=\"font-mono text-gray-600 dark:text-gray-400\">\n                      Dark: {colors.default_quaternary.dark}\n                    </div>\n                  </div>\n                  <div className=\"mt-3\">\n                    <div\n                      className=\"rounded px-2 py-1 text-sm\"\n                      style={{ color: colors.default_quaternary.DEFAULT }}\n                    >\n                      Metadata\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Brand Colors Section */}\n          <div className=\"rounded-xl border border-gray-200 bg-white p-6\">\n            <h3 className=\"mb-4 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n              🎨 Brand Colors\n            </h3>\n            <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n              {colors.primary && (\n                <div className=\"rounded-lg border border-gray-100 p-4\">\n                  <div className=\"mb-2 flex items-center gap-3\">\n                    <div\n                      className=\"h-6 w-6 shrink-0 rounded-sm border border-gray-200\"\n                      style={{ backgroundColor: colors.primary.DEFAULT }}\n                    />\n                    <div className=\"min-w-0 flex-1\">\n                      <div className=\"text-sm font-semibold text-gray-900 dark:text-gray-100\">\n                        text-gray-600\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"space-y-1 text-xs\">\n                    <div className=\"font-mono text-gray-600 dark:text-gray-400\">\n                      Light: {colors.primary.DEFAULT}\n                    </div>\n                    <div className=\"font-mono text-gray-600 dark:text-gray-400\">\n                      Dark: {colors.primary.dark}\n                    </div>\n                  </div>\n                  <div className=\"mt-3\">\n                    <div\n                      className=\"rounded px-2 py-1 text-sm\"\n                      style={{ color: colors.primary.DEFAULT }}\n                    >\n                      Government Blue\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {colors.secondary && (\n                <div className=\"rounded-lg border border-gray-100 p-4\">\n                  <div className=\"mb-2 flex items-center gap-3\">\n                    <div\n                      className=\"h-6 w-6 shrink-0 rounded-sm border border-gray-200\"\n                      style={{ backgroundColor: colors.secondary.DEFAULT }}\n                    />\n                    <div className=\"min-w-0 flex-1\">\n                      <div className=\"text-sm font-semibold text-gray-900 dark:text-gray-100\">\n                        text-gray-600\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"space-y-1 text-xs\">\n                    <div className=\"font-mono text-gray-600 dark:text-gray-400\">\n                      Light: {colors.secondary.DEFAULT}\n                    </div>\n                    <div className=\"font-mono text-gray-600 dark:text-gray-400\">\n                      Dark: {colors.secondary.dark}\n                    </div>\n                  </div>\n                  <div className=\"mt-3\">\n                    <div\n                      className=\"rounded px-2 py-1 text-sm\"\n                      style={{ color: colors.secondary.DEFAULT }}\n                    >\n                      Brand Purple\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {colors.success && (\n                <div className=\"rounded-lg border border-gray-100 p-4\">\n                  <div className=\"mb-2 flex items-center gap-3\">\n                    <div\n                      className=\"h-6 w-6 shrink-0 rounded-sm border border-gray-200\"\n                      style={{ backgroundColor: colors.success.DEFAULT }}\n                    />\n                    <div className=\"min-w-0 flex-1\">\n                      <div className=\"text-sm font-semibold text-gray-900 dark:text-gray-100\">\n                        text-success\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"space-y-1 text-xs\">\n                    <div className=\"font-mono text-gray-600 dark:text-gray-400\">\n                      Light: {colors.success.DEFAULT}\n                    </div>\n                    <div className=\"font-mono text-gray-600 dark:text-gray-400\">\n                      Dark: {colors.success.dark}\n                    </div>\n                  </div>\n                  <div className=\"mt-3\">\n                    <div\n                      className=\"rounded px-2 py-1 text-sm\"\n                      style={{ color: colors.success.DEFAULT }}\n                    >\n                      Success Green\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Interactive States Section */}\n          <div className=\"rounded-xl border border-gray-200 bg-white p-6\">\n            <h3 className=\"mb-4 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n              ⚡ Interactive States\n            </h3>\n            <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n              {colors.default_secondary_hover && (\n                <div className=\"rounded-lg border border-gray-100 p-4\">\n                  <div className=\"mb-2 flex items-center gap-3\">\n                    <div\n                      className=\"h-6 w-6 shrink-0 rounded-sm border border-gray-200\"\n                      style={{ backgroundColor: colors.default_secondary_hover.DEFAULT }}\n                    />\n                    <div className=\"min-w-0 flex-1\">\n                      <div className=\"text-sm font-semibold text-gray-900 dark:text-gray-100\">\n                        hover:text-default_secondary_hover\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"space-y-1 text-xs\">\n                    <div className=\"font-mono text-gray-600 dark:text-gray-400\">\n                      Light: {colors.default_secondary_hover.DEFAULT}\n                    </div>\n                    <div className=\"font-mono text-gray-600 dark:text-gray-400\">\n                      Dark: {colors.default_secondary_hover.dark}\n                    </div>\n                  </div>\n                  <div className=\"mt-3\">\n                    <div\n                      className=\"rounded px-2 py-1 text-sm\"\n                      style={{ color: colors.default_secondary_hover.DEFAULT }}\n                    >\n                      Secondary hover\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {colors.default_tertiary_hover && (\n                <div className=\"rounded-lg border border-gray-100 p-4\">\n                  <div className=\"mb-2 flex items-center gap-3\">\n                    <div\n                      className=\"h-6 w-6 shrink-0 rounded-sm border border-gray-200\"\n                      style={{ backgroundColor: colors.default_tertiary_hover.DEFAULT }}\n                    />\n                    <div className=\"min-w-0 flex-1\">\n                      <div className=\"text-sm font-semibold text-gray-900 dark:text-gray-100\">\n                        hover:text-default_tertiary_hover\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"space-y-1 text-xs\">\n                    <div className=\"font-mono text-gray-600 dark:text-gray-400\">\n                      Light: {colors.default_tertiary_hover.DEFAULT}\n                    </div>\n                    <div className=\"font-mono text-gray-600 dark:text-gray-400\">\n                      Dark: {colors.default_tertiary_hover.dark}\n                    </div>\n                  </div>\n                  <div className=\"mt-3\">\n                    <div\n                      className=\"rounded px-2 py-1 text-sm\"\n                      style={{ color: colors.default_tertiary_hover.DEFAULT }}\n                    >\n                      Tertiary hover\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Background Semantic Colors - Clean Structure */}\n      <div className=\"mb-12\">\n        <h2 className=\"mb-6 text-xl font-semibold text-gray-900 dark:text-gray-100\">\n          Clean Background Colors\n        </h2>\n        <p className=\"mb-4 text-sm text-gray-600 dark:text-gray-400\">\n          Now using:{' '}\n          <code className=\"rounded bg-gray-100 px-1 py-0.5\">bg-white dark:bg-gray-800</code>,{' '}\n          <code className=\"rounded bg-gray-100 px-1 py-0.5\">bg-blue-600</code>,{' '}\n          <code className=\"rounded bg-gray-100 px-1 py-0.5\">bg-success</code>\n        </p>\n\n        <div className=\"space-y-4 text-sm text-gray-800 dark:text-gray-200\">\n          <p>\n            <strong>Surface Hierarchy:</strong> bg-white dark:bg-gray-800 (main), bg-white\n            dark:bg-gray-800 secondary (cards), bg-white dark:bg-gray-800 tertiary (subtle)\n          </p>\n          <p>\n            <strong>Brand Backgrounds:</strong> bg-blue-600 (light), bg-blue-600_solid (buttons)\n          </p>\n          <p>\n            <strong>Status Backgrounds:</strong> bg-success, bg-warning, bg-error\n          </p>\n        </div>\n      </div>\n\n      {/* Border Semantic Colors - Clean Structure */}\n      <div className=\"mb-12\">\n        <h2 className=\"mb-6 text-xl font-semibold text-gray-900 dark:text-gray-100\">\n          Clean Border Colors\n        </h2>\n        <p className=\"mb-4 text-sm text-gray-600 dark:text-gray-400\">\n          Now using:{' '}\n          <code className=\"rounded bg-gray-100 px-1 py-0.5\">\n            border-gray-300 dark:border-gray-600\n          </code>\n          , <code className=\"rounded bg-gray-100 px-1 py-0.5\">border-blue-600</code>,{' '}\n          <code className=\"rounded bg-gray-100 px-1 py-0.5\">border-success</code>\n        </p>\n\n        <div className=\"space-y-4 text-sm text-gray-800 dark:text-gray-200\">\n          <p>\n            <strong>Border Hierarchy:</strong> border-gray-300 dark:border-gray-600 (main),\n            border-gray-300 dark:border-gray-600_secondary (subtle), border-gray-300\n            dark:border-gray-600_tertiary (very subtle)\n          </p>\n          <p>\n            <strong>Brand Borders:</strong> border-blue-600 (light brand), border-blue-600_solid\n            (strong brand)\n          </p>\n          <p>\n            <strong>Status Borders:</strong> border-success, border-warning, border-error\n          </p>\n        </div>\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {colors.border &&\n            Object.entries(colors.border).map(([name, colorObj]) => {\n              const colorValue = typeof colorObj === 'object' ? colorObj.DEFAULT : colorObj;\n              const darkValue = typeof colorObj === 'object' ? colorObj.dark : null;\n\n              return (\n                <div key={name} className=\"overflow-hidden rounded-lg bg-white\">\n                  <div className=\"border-2 p-4\" style={{ borderColor: colorValue }}>\n                    <div className=\"mb-1 text-sm font-semibold text-gray-900 dark:text-gray-100\">\n                      border-{name}\n                    </div>\n                    <div className=\"text-xs text-gray-600 dark:text-gray-400\">Border sample</div>\n                  </div>\n                  <div className=\"bg-gray-50 p-3\">\n                    <div className=\"space-y-1 text-xs\">\n                      <div className=\"font-mono text-gray-600 dark:text-gray-400\">\n                        Light: {colorValue}\n                      </div>\n                      {darkValue && (\n                        <div className=\"font-mono text-gray-600 dark:text-gray-400\">\n                          Dark: {darkValue}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n        </div>\n      </div>\n\n      {/* Usage Guidelines - Updated for Clean Structure */}\n      <div className=\"rounded-lg border border-green-200 bg-green-50 p-6\">\n        <h3 className=\"mb-4 text-lg font-semibold text-green-900\">\n          🎉 Clean Color System - No More Redundant Prefixes!\n        </h3>\n        <div className=\"grid grid-cols-1 gap-6 md:grid-cols-3\">\n          <div>\n            <h4 className=\"mb-2 font-semibold text-green-800\">✨ Text Colors:</h4>\n            <ul className=\"space-y-1 text-sm text-green-700\">\n              <li>\n                • <code>text-default</code> - Main content\n              </li>\n              <li>\n                • <code>text-default_secondary</code> - Body text\n              </li>\n              <li>\n                • <code>text-default_tertiary</code> - Supporting info\n              </li>\n              <li>\n                • <code>text-gray-600</code> - Brand blue text\n              </li>\n              <li>\n                • <code>text-success</code> - Success green text\n              </li>\n              <li>\n                • <code>hover:text-default_secondary_hover</code> - Interactive\n              </li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"mb-2 font-semibold text-green-800\">🏠 Backgrounds:</h4>\n            <ul className=\"space-y-1 text-sm text-green-700\">\n              <li>\n                • <code>bg-white dark:bg-gray-800</code> - Main background\n              </li>\n              <li>\n                • <code>bg-white dark:bg-gray-800 secondary</code> - Card backgrounds\n              </li>\n              <li>\n                • <code>bg-blue-600</code> - Light brand background\n              </li>\n              <li>\n                • <code>bg-blue-600_solid</code> - Solid brand buttons\n              </li>\n              <li>\n                • <code>bg-success</code> - Success backgrounds\n              </li>\n              <li>\n                • <code>hover:bg-blue-600_solid_hover</code> - Button hovers\n              </li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"mb-2 font-semibold text-green-800\">📐 Borders:</h4>\n            <ul className=\"space-y-1 text-sm text-green-700\">\n              <li>\n                • <code>border-gray-300 dark:border-gray-600</code> - Main borders\n              </li>\n              <li>\n                • <code>border-gray-300 dark:border-gray-600_secondary</code> - Subtle borders\n              </li>\n              <li>\n                • <code>border-blue-600</code> - Brand borders\n              </li>\n              <li>\n                • <code>border-blue-600_solid</code> - Strong brand\n              </li>\n              <li>\n                • <code>border-success</code> - Success borders\n              </li>\n              <li>\n                • <code>border-disabled</code> - Inactive states\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"mt-6 rounded-lg border border-green-300 bg-green-100 p-4\">\n          <h4 className=\"mb-2 font-semibold text-green-900\">🚀 Benefits of the New Structure:</h4>\n          <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n            <ul className=\"space-y-1 text-sm text-green-800\">\n              <li>\n                ✅ <strong>Cleaner:</strong> No more text-text-gray-600 redundancy\n              </li>\n              <li>\n                ✅ <strong>Shorter:</strong> Less typing, more readable code\n              </li>\n              <li>\n                ✅ <strong>Standard:</strong> Follows Tailwind conventions\n              </li>\n            </ul>\n            <ul className=\"space-y-1 text-sm text-green-800\">\n              <li>\n                ✅ <strong>Intuitive:</strong> text-gray-600, bg-blue-600, border-blue-600\n              </li>\n              <li>\n                ✅ <strong>Dark Mode:</strong> Still automatic with all colors\n              </li>\n              <li>\n                ✅ <strong>Future-proof:</strong> Easier to maintain and extend\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  ),\n};\n\n// Text Hierarchy Story\nexport const TextHierarchy: Story = {\n  name: '📝 Text Hierarchy (Figma Style)',\n  render: () => (\n    <div className=\"mx-auto max-w-6xl p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"mb-2 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n          Professional Text Hierarchy\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Figma-style text hierarchy with semantic naming. Each level has specific usage contexts.\n        </p>\n      </div>\n\n      <div className=\"space-y-8\">\n        {/* Text Hierarchy Examples */}\n        <div className=\"rounded-xl border border-gray-200 bg-white p-6\">\n          <h3 className=\"mb-6 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n            Text Hierarchy in Light Mode\n          </h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-32 text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Primary\n              </div>\n              <div className=\"text-text-gray-600 text-xl dark:text-gray-400\">\n                Main headings and important content\n              </div>\n              <code className=\"rounded bg-gray-100 px-2 py-1 text-xs\">text-text-gray-600</code>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-32 text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Secondary\n              </div>\n              <div className=\"text-text-gray-600 text-lg dark:text-gray-400\">\n                Secondary headings and body text\n              </div>\n              <code className=\"rounded bg-gray-100 px-2 py-1 text-xs\">text-text-gray-600</code>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-32 text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Tertiary\n              </div>\n              <div className=\"text-text-tertiary\">Supporting information</div>\n              <code className=\"rounded bg-gray-100 px-2 py-1 text-xs\">text-text-tertiary</code>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-32 text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Quaternary\n              </div>\n              <div className=\"text-text-quaternary text-sm\">Subtle details and metadata</div>\n              <code className=\"rounded bg-gray-100 px-2 py-1 text-xs\">text-text-quaternary</code>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-32 text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Disabled\n              </div>\n              <div className=\"text-text-disabled text-sm\">Disabled or inactive text</div>\n              <code className=\"rounded bg-gray-100 px-2 py-1 text-xs\">text-text-disabled</code>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-32 text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Placeholder\n              </div>\n              <div className=\"text-text-placeholder text-sm italic\">Form placeholder text</div>\n              <code className=\"rounded bg-gray-100 px-2 py-1 text-xs\">text-text-placeholder</code>\n            </div>\n          </div>\n        </div>\n\n        {/* Brand Context Text */}\n        <div className=\"rounded-xl border border-blue-700 bg-blue-600 p-6\">\n          <h3 className=\"text-text-gray-600_onBrand mb-6 text-lg font-semibold\">\n            Text on Brand Colors\n          </h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-text-gray-600_onBrand w-32 text-sm font-medium\">\n                Primary on Brand\n              </div>\n              <div className=\"text-text-gray-600_onBrand text-xl\">White text for high contrast</div>\n              <code className=\"rounded bg-blue-800 px-2 py-1 text-xs text-gray-100 dark:text-gray-900\">\n                text-text-gray-600_onBrand\n              </code>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-text-gray-600_onBrand w-32 text-sm font-medium\">\n                Secondary on Brand\n              </div>\n              <div className=\"text-text-gray-600_onBrand\">Light blue text on brand</div>\n              <code className=\"rounded bg-blue-800 px-2 py-1 text-xs text-gray-100 dark:text-gray-900\">\n                text-text-gray-600_onBrand\n              </code>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-text-gray-600_onBrand w-32 text-sm font-medium\">\n                Tertiary on Brand\n              </div>\n              <div className=\"text-text-tertiary_onBrand text-sm\">\n                Subtle text on brand backgrounds\n              </div>\n              <code className=\"rounded bg-blue-800 px-2 py-1 text-xs text-gray-100 dark:text-gray-900\">\n                text-text-tertiary_onBrand\n              </code>\n            </div>\n          </div>\n        </div>\n\n        {/* Status Text Colors */}\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n          <div className=\"border-border-green-600 bg-default-success_primary rounded-lg border p-4\">\n            <h4 className=\"text-text-success_primary mb-2 font-semibold\">Success Text</h4>\n            <p className=\"text-text-success_primary text-sm\">\n              Use for positive feedback, confirmations, and successful actions.\n            </p>\n            <code className=\"mt-2 inline-block rounded-sm bg-green-100 px-2 py-1 text-xs text-green-800\">\n              text-text-success_primary\n            </code>\n          </div>\n          <div className=\"border-border-orange-600 bg-default-warning_primary rounded-lg border p-4\">\n            <h4 className=\"text-text-warning_primary mb-2 font-semibold\">Warning Text</h4>\n            <p className=\"text-text-warning_primary text-sm\">\n              Use for cautions, pending states, and important notices.\n            </p>\n            <code className=\"mt-2 inline-block rounded-sm bg-orange-100 px-2 py-1 text-xs text-orange-800\">\n              text-text-warning_primary\n            </code>\n          </div>\n          <div className=\"border-border-error bg-default-error_primary rounded-lg border p-4\">\n            <h4 className=\"text-text-error_primary mb-2 font-semibold\">Error Text</h4>\n            <p className=\"text-text-error_primary text-sm\">\n              Use for errors, validation messages, and critical alerts.\n            </p>\n            <code className=\"mt-2 inline-block rounded-sm bg-red-100 px-2 py-1 text-xs text-red-800\">\n              text-text-error_primary\n            </code>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mt-8 rounded-lg border border-blue-200 bg-blue-50 p-6\">\n        <h3 className=\"mb-2 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          💡 Usage Guidelines\n        </h3>\n        <div className=\"space-y-2 text-sm text-gray-800 dark:text-gray-200\">\n          <p>\n            <strong>Primary:</strong> Main headings, key information, primary actions\n          </p>\n          <p>\n            <strong>Secondary:</strong> Subheadings, body text, secondary content\n          </p>\n          <p>\n            <strong>Tertiary:</strong> Supporting details, less important information\n          </p>\n          <p>\n            <strong>Quaternary:</strong> Metadata, timestamps, subtle details\n          </p>\n          <p>\n            <strong>On Brand:</strong> Text that appears on colored backgrounds\n          </p>\n        </div>\n      </div>\n    </div>\n  ),\n};\n\n// Live Examples\n// Utility Colors Documentation\nexport const UtilityColors: Story = {\n  name: '🎨 Utility Color Scales',\n  render: () => (\n    <div className=\"mx-auto max-w-6xl p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"mb-2 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n          Complete Utility Color System\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Full Tailwind color palette with dark mode support. Each color includes comprehensive\n          50-950 scale.\n        </p>\n      </div>\n\n      {colors.utility && (\n        <div className=\"space-y-8\">\n          {Object.entries(colors.utility).map(([colorName, colorScale]) => (\n            <div\n              key={colorName}\n              className=\"rounded-xl border border-gray-200 bg-white p-6 shadow-xs\"\n            >\n              <h2 className=\"mb-4 text-lg font-semibold text-gray-900 capitalize dark:text-gray-100 dark:text-gray-900\">\n                {colorName.replace('-', ' ')} Utilities\n              </h2>\n              <div className=\"flex overflow-hidden rounded-lg border border-gray-200\">\n                {typeof colorScale === 'object' &&\n                  Object.entries(colorScale as Record<string, any>).map(([shade, colorObj]) => {\n                    const colorValue = typeof colorObj === 'object' ? colorObj.DEFAULT : colorObj;\n                    const darkValue = typeof colorObj === 'object' ? colorObj.dark : null;\n\n                    return (\n                      <div\n                        key={shade}\n                        className=\"flex min-h-[100px] flex-1 cursor-pointer flex-col justify-between p-3 transition-transform hover:scale-105\"\n                        style={{\n                          backgroundColor: colorValue,\n                          color: ['50', '100', '200', '300'].includes(shade)\n                            ? '#000000'\n                            : '#ffffff',\n                        }}\n                        onClick={() => navigator.clipboard.writeText(colorValue)}\n                        title={`Click to copy ${colorValue}`}\n                      >\n                        <div className=\"text-xs font-bold\">{shade}</div>\n                        <div className=\"space-y-1\">\n                          <div className=\"font-mono text-xs\">{colorValue}</div>\n                          {darkValue && (\n                            <div className=\"font-mono text-xs opacity-75\">Dark: {darkValue}</div>\n                          )}\n                        </div>\n                      </div>\n                    );\n                  })}\n              </div>\n              <div className=\"mt-4 rounded-lg bg-gray-50 p-4\">\n                <h3 className=\"mb-2 text-sm font-semibold text-gray-700 dark:text-gray-300\">\n                  Usage Examples:\n                </h3>\n                <div className=\"flex flex-wrap gap-2 text-xs\">\n                  <code className=\"rounded border bg-white px-2 py-1\">\n                    text-utility-{colorName}-600\n                  </code>\n                  <code className=\"rounded border bg-white px-2 py-1\">\n                    bg-utility-{colorName}-50\n                  </code>\n                  <code className=\"rounded border bg-white px-2 py-1\">\n                    border-utility-{colorName}-300\n                  </code>\n                  <code className=\"rounded border bg-white px-2 py-1\">\n                    hover:bg-utility-{colorName}-100\n                  </code>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Usage Guidelines for Utility Colors */}\n      <div className=\"mt-12 rounded-lg border border-green-200 bg-green-50 p-6\">\n        <h3 className=\"mb-4 text-lg font-semibold text-green-900\">🌈 Utility Color Guidelines</h3>\n        <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n          <div>\n            <h4 className=\"mb-3 font-semibold text-green-800\">When to Use Utility Colors:</h4>\n            <ul className=\"space-y-2 text-sm text-green-700\">\n              <li>\n                • <strong>Illustrations & Graphics:</strong> Colorful icons, charts, illustrations\n              </li>\n              <li>\n                • <strong>Status Indicators:</strong> Success (green), warning (amber), error (red)\n              </li>\n              <li>\n                • <strong>Categories & Tags:</strong> Different colored badges or labels\n              </li>\n              <li>\n                • <strong>Data Visualization:</strong> Charts, graphs, progress bars\n              </li>\n              <li>\n                • <strong>Accent Colors:</strong> Highlighting specific content\n              </li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"mb-3 font-semibold text-green-800\">Color Scale Guidelines:</h4>\n            <ul className=\"space-y-2 text-sm text-green-700\">\n              <li>\n                • <strong>50-200:</strong> Very light, backgrounds, subtle accents\n              </li>\n              <li>\n                • <strong>300-400:</strong> Light, borders, muted content\n              </li>\n              <li>\n                • <strong>500:</strong> Base color, primary use case\n              </li>\n              <li>\n                • <strong>600-700:</strong> Darker, hover states, emphasis\n              </li>\n              <li>\n                • <strong>800-950:</strong> Very dark, high contrast text\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  ),\n};\n\nexport const LiveExamples: Story = {\n  name: '🚀 Live Examples',\n  render: () => (\n    <div className=\"mx-auto max-w-6xl p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"mb-2 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n          Your Colors in Action\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          See your semantic color system in real components. All colors come directly from your\n          config.\n        </p>\n      </div>\n\n      <div className=\"space-y-8\">\n        {/* Brand Buttons */}\n        <div>\n          <h3 className=\"mb-4 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n            Brand Color Buttons\n          </h3>\n          <div className=\"flex flex-wrap gap-3\">\n            <button className=\"rounded-lg bg-blue-600 px-6 py-3 text-white transition-colors hover:bg-blue-700 dark:text-black\">\n              Primary Button\n              <span className=\"block text-xs opacity-75\">bg-blue-600</span>\n            </button>\n            <button className=\"rounded-lg bg-purple-600 px-6 py-3 text-white transition-colors hover:bg-purple-700 dark:text-black\">\n              Secondary Button\n              <span className=\"block text-xs opacity-75\">bg-purple-600</span>\n            </button>\n            <button className=\"rounded-lg bg-green-600 px-6 py-3 text-white transition-colors hover:bg-green-700 dark:text-black\">\n              Success Button\n              <span className=\"block text-xs opacity-75\">bg-green-600</span>\n            </button>\n            <button className=\"rounded-lg bg-red-600 px-6 py-3 text-white transition-colors hover:bg-red-700 dark:text-black\">\n              Danger Button\n              <span className=\"block text-xs opacity-75\">bg-red-600</span>\n            </button>\n          </div>\n        </div>\n\n        {/* Professional Semantic Notifications */}\n        <div>\n          <h3 className=\"mb-4 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n            Professional Semantic Notifications\n          </h3>\n          <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n            <div className=\"border-border-green-600 bg-default-success_primary rounded-lg border-l-4 p-4\">\n              <div className=\"flex items-center\">\n                <div className=\"bg-default-success_solid mr-3 h-2 w-2 rounded-full\" />\n                <span className=\"text-text-success_primary font-medium\">\n                  Application submitted successfully\n                </span>\n              </div>\n              <p className=\"text-text-quaternary mt-2 text-sm\">\n                Classes:{' '}\n                <code className=\"rounded bg-gray-100 px-1 py-0.5 text-xs\">\n                  bg-default-success_primary text-text-success_primary\n                </code>\n              </p>\n            </div>\n\n            <div className=\"border-border-orange-600 bg-default-warning_primary rounded-lg border-l-4 p-4\">\n              <div className=\"flex items-center\">\n                <div className=\"bg-default-warning_solid mr-3 h-2 w-2 rounded-full\" />\n                <span className=\"text-text-warning_primary font-medium\">\n                  Document verification required\n                </span>\n              </div>\n              <p className=\"text-text-quaternary mt-2 text-sm\">\n                Classes:{' '}\n                <code className=\"rounded bg-gray-100 px-1 py-0.5 text-xs\">\n                  bg-default-warning_primary text-text-warning_primary\n                </code>\n              </p>\n            </div>\n\n            <div className=\"border-border-error bg-default-error_primary rounded-lg border-l-4 p-4\">\n              <div className=\"flex items-center\">\n                <div className=\"bg-default-error_solid mr-3 h-2 w-2 rounded-full\" />\n                <span className=\"text-text-error_primary font-medium\">\n                  Invalid government ID format\n                </span>\n              </div>\n              <p className=\"text-text-quaternary mt-2 text-sm\">\n                Classes:{' '}\n                <code className=\"rounded bg-gray-100 px-1 py-0.5 text-xs\">\n                  bg-default-error_primary text-text-error_primary\n                </code>\n              </p>\n            </div>\n\n            <div className=\"border-border-blue-600 bg-default-secondary rounded-lg border p-4\">\n              <h4 className=\"text-text-gray-600 mb-2 font-semibold dark:text-gray-400\">\n                Professional Content Card\n              </h4>\n              <p className=\"text-text-gray-600 mb-2 dark:text-gray-400\">\n                This is secondary text content using professional Figma-style hierarchy.\n              </p>\n              <p className=\"text-text-quaternary text-sm\">\n                Classes:{' '}\n                <code className=\"rounded bg-gray-100 px-1 py-0.5 text-xs\">\n                  bg-default-secondary text-text-gray-600 text-text-gray-600\n                </code>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mt-8 rounded-lg border border-blue-200 bg-blue-50 p-6\">\n        <h3 className=\"mb-2 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          🎯 Single Source of Truth\n        </h3>\n        <p className=\"text-sm text-gray-800 dark:text-gray-200\">\n          All colors shown here come directly from your{' '}\n          <code className=\"rounded bg-blue-100 px-1 py-0.5\">tailwind.config.js</code>. When you\n          update your config, this documentation automatically updates too!\n        </p>\n      </div>\n    </div>\n  ),\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/design-system/tokens/Colors/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/design-system/tokens/Layout/Layout.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LayoutSwatch' is defined but never used.","line":3,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport Layout, {\n  LayoutSwatch,\n  LayoutGroup,\n  LayoutDemo,\n  ResponsiveDemo,\n  layoutTokens,\n  semanticLayout,\n} from './Layout';\n\nconst meta = {\n  title: 'Design System/Layout',\n  component: Layout,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component: `\n# Layout Tokens\n\nComprehensive layout system for the Citizenly design system, providing consistent \nstructure and organization across all Philippine government applications.\n\n## Layout Philosophy\n\n- **Container-First**: Predefined container widths for different content types\n- **Responsive by Design**: Mobile-first approach with consistent breakpoints  \n- **Grid-Based**: 12-column grid system with flexible gaps\n- **Layered Organization**: Structured z-index system for proper stacking\n- **Pattern-Driven**: Common layout patterns for government websites\n\n## Layout Categories\n\n### Container Widths\nPredefined container sizes for different layout needs:\n- **xs (320px)**: Mobile small screens\n- **sm (640px)**: Mobile large / Tablet small\n- **md (768px)**: Tablet screens\n- **lg (1024px)**: Desktop small\n- **xl (1280px)**: Standard desktop\n- **2xl (1536px)**: Large desktop screens\n\n### Responsive Breakpoints\nScreen width breakpoints matching Tailwind CSS:\n- **xs (475px)**: Extra small devices\n- **sm (640px)**: Small devices (phones)\n- **md (768px)**: Medium devices (tablets)\n- **lg (1024px)**: Large devices (laptops)\n- **xl (1280px)**: Extra large devices (desktops)\n- **2xl (1536px)**: Large desktop displays\n\n### Grid System\n- **12-Column Grid**: Flexible percentage-based columns (8.33% to 100%)\n- **Grid Gaps**: Consistent spacing from 0px to 32px\n- **Responsive**: Works across all breakpoints\n\n### Z-Index Layers\nOrganized stacking system:\n- **base (0)**: Base elements\n- **docked (10)**: Docked elements  \n- **dropdown (1000)**: Dropdowns and popovers\n- **sticky (1100)**: Sticky elements\n- **overlay (1300)**: Modal overlays\n- **modal (1400)**: Modal content\n- **toast (1700)**: Toast notifications\n- **tooltip (1800)**: Tooltips (highest)\n\n### Layout Patterns\nCommon government website patterns:\n- **Sidebar Widths**: 240px (narrow), 280px (default), 320px (wide)\n- **Header Heights**: 48px (compact), 64px (default), 80px (large)\n- **Footer Heights**: 40px (minimal), 80px (default), 120px (extended)\n\n## Usage in Code\n\n\\`\\`\\`tsx\n// Container widths\n<div className=\"max-w-4xl mx-auto\"> // lg container\n<div style={{ maxWidth: layoutTokens.containers.xl }}>\n\n// Responsive breakpoints\n@media (min-width: ${layoutTokens.breakpoints.md}) {\n  // Tablet styles\n}\n\n// Grid system\n<div className=\"grid grid-cols-12 gap-4\">\n<div style={{ width: layoutTokens.grid.columns[6] }}> // 50% width\n\n// Z-index layering\n.modal {\n  z-index: ${layoutTokens.zIndex.modal};\n}\n\n// Layout patterns\n.sidebar {\n  width: ${layoutTokens.patterns.sidebarWidths.default};\n}\n\\`\\`\\`\n        `,\n      },\n    },\n  },\n  tags: ['autodocs'],\n} satisfies Meta<typeof Layout>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// =============================================================================\n// MAIN STORIES\n// =============================================================================\n\nexport const AllLayout: Story = {\n  name: '🏗️ All Layout',\n  render: () => <Layout />,\n};\n\nexport const ContainerWidths: Story = {\n  name: '📐 Container Widths',\n  render: () => (\n    <div className=\"p-6\">\n      <h1 className=\"mb-6 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n        Container Width System\n      </h1>\n      <p className=\"mb-8 text-gray-600 dark:text-gray-400\">\n        Predefined container widths that provide consistent content boundaries across different\n        screen sizes.\n      </p>\n\n      <LayoutGroup\n        title=\"Container Sizes\"\n        layouts={layoutTokens.containers}\n        type=\"width\"\n        description=\"Standard container widths for different layout needs\"\n      />\n\n      <LayoutDemo title=\"Container Comparison\" description=\"Visual comparison of container sizes\">\n        <div className=\"space-y-6\">\n          {Object.entries(layoutTokens.containers)\n            .filter(([name]) => !['full'].includes(name))\n            .map(([name, width]) => (\n              <div key={name} className=\"space-y-2\">\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <span className=\"w-8 font-mono text-gray-600 dark:text-gray-400\">{name}:</span>\n                  <span className=\"text-gray-500 dark:text-gray-500\">{width}</span>\n                </div>\n                <div\n                  className=\"mx-auto rounded-sm border border-blue-200 bg-blue-100 p-4 text-center text-gray-800 dark:text-gray-200\"\n                  style={{\n                    maxWidth: width === 'full' ? '100%' : width,\n                    width: '100%',\n                  }}\n                >\n                  {width} container content area\n                </div>\n              </div>\n            ))}\n        </div>\n      </LayoutDemo>\n\n      <div className=\"mt-8 rounded-lg border border-blue-200 bg-blue-50 p-4\">\n        <h3 className=\"mb-2 font-semibold text-gray-900 dark:text-gray-100\">📱 Container Usage</h3>\n        <ul className=\"space-y-1 text-sm text-gray-800 dark:text-gray-200\">\n          <li>\n            • <strong>xs-sm</strong>: Mobile-optimized layouts and forms\n          </li>\n          <li>\n            • <strong>md</strong>: Tablet interfaces and narrow content\n          </li>\n          <li>\n            • <strong>lg</strong>: Standard desktop content and dashboards\n          </li>\n          <li>\n            • <strong>xl-2xl</strong>: Wide desktop layouts and data tables\n          </li>\n          <li>\n            • <strong>full</strong>: Hero sections and immersive experiences\n          </li>\n        </ul>\n      </div>\n    </div>\n  ),\n};\n\nexport const ResponsiveBreakpoints: Story = {\n  name: '📱 Responsive Breakpoints',\n  render: () => (\n    <div className=\"p-6\">\n      <h1 className=\"mb-6 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n        Responsive Breakpoint System\n      </h1>\n      <p className=\"mb-8 text-gray-600 dark:text-gray-400\">\n        Screen width breakpoints for responsive design, ensuring consistent behavior across all\n        government applications.\n      </p>\n\n      <LayoutGroup\n        title=\"Breakpoint Values\"\n        layouts={layoutTokens.breakpoints}\n        type=\"width\"\n        description=\"Responsive design breakpoints matching modern web standards\"\n      />\n\n      <LayoutDemo\n        title=\"Breakpoint Visualization\"\n        description=\"Relative scale of different screen sizes\"\n      >\n        <ResponsiveDemo />\n      </LayoutDemo>\n\n      <div className=\"mt-8 grid grid-cols-1 gap-6 md:grid-cols-2\">\n        <div className=\"rounded-lg border border-green-200 bg-green-50 p-4\">\n          <h3 className=\"mb-2 font-semibold text-green-900\">📱 Device Mapping</h3>\n          <ul className=\"space-y-1 text-sm text-green-800\">\n            <li>\n              • <strong>xs (475px)</strong>: Small phones, feature phones\n            </li>\n            <li>\n              • <strong>sm (640px)</strong>: Standard smartphones\n            </li>\n            <li>\n              • <strong>md (768px)</strong>: Tablets, large phones landscape\n            </li>\n            <li>\n              • <strong>lg (1024px)</strong>: Laptops, small desktops\n            </li>\n            <li>\n              • <strong>xl (1280px)</strong>: Desktop monitors\n            </li>\n            <li>\n              • <strong>2xl (1536px)</strong>: Large displays, ultrawide\n            </li>\n          </ul>\n        </div>\n\n        <div className=\"rounded-lg border border-purple-200 bg-purple-50 p-4\">\n          <h3 className=\"mb-2 font-semibold text-gray-900 dark:text-gray-100\">\n            🎯 Usage Guidelines\n          </h3>\n          <ul className=\"space-y-1 text-sm text-gray-800 dark:text-gray-200\">\n            <li>• Design mobile-first, enhance for larger screens</li>\n            <li>• Test critical features at all breakpoints</li>\n            <li>• Use consistent breakpoints across all components</li>\n            <li>• Consider touch targets on smaller screens</li>\n            <li>• Ensure accessibility at all screen sizes</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  ),\n};\n\nexport const GridSystem: Story = {\n  name: '⚏ Grid System',\n  render: () => (\n    <div className=\"p-6\">\n      <h1 className=\"mb-6 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n        12-Column Grid System\n      </h1>\n      <p className=\"mb-8 text-gray-600 dark:text-gray-400\">\n        Flexible grid system for consistent layouts and responsive design across government\n        applications.\n      </p>\n\n      <div className=\"mb-8 grid grid-cols-1 gap-8 lg:grid-cols-2\">\n        <LayoutGroup\n          title=\"Grid Columns\"\n          layouts={layoutTokens.grid.columns}\n          type=\"percentage\"\n          description=\"12-column grid percentage widths\"\n        />\n\n        <LayoutGroup\n          title=\"Grid Gaps\"\n          layouts={layoutTokens.grid.gap}\n          type=\"width\"\n          description=\"Consistent spacing between grid items\"\n        />\n      </div>\n\n      <LayoutDemo\n        title=\"Grid Column Examples\"\n        description=\"Visual demonstration of different column combinations\"\n      >\n        <div className=\"space-y-6\">\n          {/* 12 columns */}\n          <div>\n            <div className=\"mb-2 text-sm font-medium text-gray-700 dark:text-gray-300\">\n              12 Columns (1 each)\n            </div>\n            <div className=\"grid grid-cols-12 gap-1\">\n              {Array.from({ length: 12 }).map((_, i) => (\n                <div\n                  key={i}\n                  className=\"rounded bg-blue-200 p-2 text-center text-xs text-gray-800 dark:text-gray-200\"\n                >\n                  1\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* 6 columns */}\n          <div>\n            <div className=\"mb-2 text-sm font-medium text-gray-700 dark:text-gray-300\">\n              6 Columns (2 each)\n            </div>\n            <div className=\"grid grid-cols-6 gap-2\">\n              {Array.from({ length: 6 }).map((_, i) => (\n                <div\n                  key={i}\n                  className=\"rounded bg-green-200 p-3 text-center text-xs text-green-800\"\n                >\n                  2\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* 4 columns */}\n          <div>\n            <div className=\"mb-2 text-sm font-medium text-gray-700 dark:text-gray-300\">\n              4 Columns (3 each)\n            </div>\n            <div className=\"grid grid-cols-4 gap-3\">\n              {Array.from({ length: 4 }).map((_, i) => (\n                <div\n                  key={i}\n                  className=\"rounded bg-purple-200 p-4 text-center text-xs text-gray-800 dark:text-gray-200\"\n                >\n                  3\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* 3 columns */}\n          <div>\n            <div className=\"mb-2 text-sm font-medium text-gray-700 dark:text-gray-300\">\n              3 Columns (4 each)\n            </div>\n            <div className=\"grid grid-cols-3 gap-4\">\n              {Array.from({ length: 3 }).map((_, i) => (\n                <div\n                  key={i}\n                  className=\"rounded bg-orange-200 p-5 text-center text-xs text-orange-800\"\n                >\n                  4\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Mixed columns */}\n          <div>\n            <div className=\"mb-2 text-sm font-medium text-gray-700 dark:text-gray-300\">\n              Mixed Layout (8 + 4)\n            </div>\n            <div className=\"grid grid-cols-12 gap-4\">\n              <div className=\"col-span-8 rounded-sm bg-red-200 p-6 text-center text-sm text-red-800\">\n                Main Content (8 columns)\n              </div>\n              <div className=\"col-span-4 rounded-sm bg-yellow-200 p-6 text-center text-sm text-yellow-800\">\n                Sidebar (4 columns)\n              </div>\n            </div>\n          </div>\n        </div>\n      </LayoutDemo>\n\n      <div className=\"mt-8 rounded-lg border border-amber-200 bg-amber-50 p-4\">\n        <h3 className=\"mb-2 font-semibold text-amber-900\">⚏ Grid Best Practices</h3>\n        <ul className=\"space-y-1 text-sm text-amber-800\">\n          <li>• Use grid gaps for consistent spacing between elements</li>\n          <li>• Combine columns to create common layouts (8+4, 6+6, 9+3)</li>\n          <li>• Consider content needs when choosing column spans</li>\n          <li>• Test grid layouts on mobile devices</li>\n          <li>• Use responsive grid classes for different breakpoints</li>\n        </ul>\n      </div>\n    </div>\n  ),\n};\n\nexport const ZIndexLayers: Story = {\n  name: '📚 Z-Index Layers',\n  render: () => (\n    <div className=\"p-6\">\n      <h1 className=\"mb-6 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n        Z-Index Layering System\n      </h1>\n      <p className=\"mb-8 text-gray-600 dark:text-gray-400\">\n        Organized layering system for managing stacking context and overlapping elements.\n      </p>\n\n      <LayoutGroup\n        title=\"Z-Index Values\"\n        layouts={layoutTokens.zIndex}\n        type=\"index\"\n        description=\"Hierarchical stacking order for UI elements\"\n      />\n\n      <LayoutDemo\n        title=\"Z-Index Demonstration\"\n        description=\"Interactive stacking layers showing proper hierarchy\"\n      >\n        <div className=\"relative h-64 overflow-hidden rounded-sm bg-gray-100\">\n          {/* Base layer */}\n          <div\n            className=\"absolute inset-6 flex items-center justify-center rounded-sm border-2 border-blue-300 bg-blue-200 font-medium text-gray-800 dark:text-gray-200\"\n            style={{ zIndex: parseInt(layoutTokens.zIndex.base) }}\n          >\n            Base Layer (z: {layoutTokens.zIndex.base})\n          </div>\n\n          {/* Docked layer */}\n          <div\n            className=\"absolute top-10 right-10 left-10 flex h-20 items-center justify-center rounded-sm border-2 border-green-400 bg-green-300 font-medium text-green-800\"\n            style={{ zIndex: parseInt(layoutTokens.zIndex.docked) }}\n          >\n            Docked Element (z: {layoutTokens.zIndex.docked})\n          </div>\n\n          {/* Dropdown layer */}\n          <div\n            className=\"absolute top-16 left-16 flex h-16 w-40 items-center justify-center rounded-sm border-2 border-purple-500 bg-purple-400 text-sm font-medium text-gray-900 dark:text-gray-100\"\n            style={{ zIndex: parseInt(layoutTokens.zIndex.dropdown) }}\n          >\n            Dropdown (z: {layoutTokens.zIndex.dropdown})\n          </div>\n\n          {/* Overlay layer */}\n          <div\n            className=\"absolute top-20 left-20 flex h-12 w-32 items-center justify-center rounded-sm border-2 border-yellow-500 bg-yellow-400 text-sm font-medium text-yellow-900\"\n            style={{ zIndex: parseInt(layoutTokens.zIndex.overlay) }}\n          >\n            Overlay (z: {layoutTokens.zIndex.overlay})\n          </div>\n\n          {/* Modal layer */}\n          <div\n            className=\"absolute top-24 left-24 flex h-10 w-24 items-center justify-center rounded-sm border-2 border-red-600 bg-red-500 text-xs font-medium text-white dark:text-black\"\n            style={{ zIndex: parseInt(layoutTokens.zIndex.modal) }}\n          >\n            Modal (z: {layoutTokens.zIndex.modal})\n          </div>\n\n          {/* Tooltip layer */}\n          <div\n            className=\"absolute top-28 left-28 flex h-8 w-20 items-center justify-center rounded-sm bg-gray-800 text-xs font-medium text-white dark:text-black\"\n            style={{ zIndex: parseInt(layoutTokens.zIndex.tooltip) }}\n          >\n            Tooltip (z: {layoutTokens.zIndex.tooltip})\n          </div>\n        </div>\n      </LayoutDemo>\n\n      <div className=\"mt-8 grid grid-cols-1 gap-6 md:grid-cols-2\">\n        <div className=\"rounded-lg border border-indigo-200 bg-indigo-50 p-4\">\n          <h3 className=\"mb-2 font-semibold text-indigo-900\">📋 Layer Categories</h3>\n          <ul className=\"space-y-1 text-sm text-indigo-800\">\n            <li>\n              • <strong>0-100</strong>: Base content and layout elements\n            </li>\n            <li>\n              • <strong>1000-1200</strong>: Floating UI (dropdowns, sticky)\n            </li>\n            <li>\n              • <strong>1300-1500</strong>: Modal and overlay systems\n            </li>\n            <li>\n              • <strong>1600-1800</strong>: Accessibility and notifications\n            </li>\n          </ul>\n        </div>\n\n        <div className=\"rounded-lg border border-rose-200 bg-rose-50 p-4\">\n          <h3 className=\"mb-2 font-semibold text-rose-900\">⚠️ Usage Rules</h3>\n          <ul className=\"space-y-1 text-sm text-rose-800\">\n            <li>• Always use semantic z-index tokens</li>\n            <li>• Test stacking with real content</li>\n            <li>• Avoid z-index wars with arbitrary values</li>\n            <li>• Consider accessibility when layering</li>\n            <li>• Document custom stacking contexts</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  ),\n};\n\nexport const LayoutPatterns: Story = {\n  name: '🏛️ Layout Patterns',\n  render: () => (\n    <div className=\"p-6\">\n      <h1 className=\"mb-6 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n        Common Layout Patterns\n      </h1>\n      <p className=\"mb-8 text-gray-600 dark:text-gray-400\">\n        Predefined dimensions for common government website layout elements and patterns.\n      </p>\n\n      <div className=\"mb-8 grid grid-cols-1 gap-8 lg:grid-cols-3\">\n        <LayoutGroup\n          title=\"Sidebar Widths\"\n          layouts={layoutTokens.patterns.sidebarWidths}\n          type=\"width\"\n          description=\"Navigation and auxiliary content areas\"\n        />\n\n        <LayoutGroup\n          title=\"Header Heights\"\n          layouts={layoutTokens.patterns.headerHeights}\n          type=\"height\"\n          description=\"Top navigation and branding areas\"\n        />\n\n        <LayoutGroup\n          title=\"Footer Heights\"\n          layouts={layoutTokens.patterns.footerHeights}\n          type=\"height\"\n          description=\"Page footer and supplementary info\"\n        />\n      </div>\n\n      <LayoutDemo\n        title=\"Government Website Layout\"\n        description=\"Typical layout structure using standard patterns\"\n      >\n        <div className=\"overflow-hidden rounded-sm border border-gray-300 bg-white shadow-xs\">\n          {/* Header */}\n          <div\n            className=\"flex items-center justify-between bg-blue-600 px-6 text-sm font-medium text-white dark:text-black\"\n            style={{ height: layoutTokens.patterns.headerHeights.default }}\n          >\n            <div className=\"flex items-center gap-4\">\n              <div className=\"bg-opacity-20 h-8 w-8 rounded-sm bg-white\"></div>\n              <span>Philippine Government Portal</span>\n            </div>\n            <div className=\"text-xs\">Header: {layoutTokens.patterns.headerHeights.default}</div>\n          </div>\n\n          <div className=\"flex\">\n            {/* Sidebar */}\n            <div\n              className=\"border-r border-gray-200 bg-gray-50 p-4\"\n              style={{\n                width: layoutTokens.patterns.sidebarWidths.default,\n                minHeight: '240px',\n              }}\n            >\n              <div className=\"mb-3 text-sm font-semibold text-gray-700 dark:text-gray-300\">\n                Navigation\n              </div>\n              <div className=\"space-y-2 text-sm text-gray-600 dark:text-gray-400\">\n                <div className=\"rounded bg-blue-100 p-2 text-gray-700 dark:text-gray-300\">\n                  Services\n                </div>\n                <div className=\"rounded p-2 hover:bg-gray-100\">About</div>\n                <div className=\"rounded p-2 hover:bg-gray-100\">Contact</div>\n                <div className=\"rounded p-2 hover:bg-gray-100\">Resources</div>\n              </div>\n              <div className=\"mt-4 text-xs text-gray-500 dark:text-gray-500\">\n                Width: {layoutTokens.patterns.sidebarWidths.default}\n              </div>\n            </div>\n\n            {/* Main Content */}\n            <div className=\"flex-1 p-6\">\n              <h2 className=\"mb-4 text-xl font-bold text-gray-900 dark:text-gray-100\">\n                Welcome to Government Services\n              </h2>\n              <div className=\"space-y-4 text-gray-600 dark:text-gray-400\">\n                <p>\n                  This main content area adapts to the available space after accounting for the\n                  sidebar width of {layoutTokens.patterns.sidebarWidths.default}.\n                </p>\n                <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n                  <div className=\"rounded border border-blue-200 bg-blue-50 p-4\">\n                    <h3 className=\"mb-2 font-semibold text-gray-900 dark:text-gray-100\">\n                      Online Services\n                    </h3>\n                    <p className=\"text-sm text-gray-800 dark:text-gray-200\">\n                      Access government services online\n                    </p>\n                  </div>\n                  <div className=\"rounded border border-green-200 bg-green-50 p-4\">\n                    <h3 className=\"mb-2 font-semibold text-green-900\">Document Request</h3>\n                    <p className=\"text-sm text-green-800\">Request official documents</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Footer */}\n          <div\n            className=\"flex items-center justify-between border-t border-gray-200 bg-gray-100 px-6 text-sm text-gray-600 dark:text-gray-400\"\n            style={{ height: layoutTokens.patterns.footerHeights.default }}\n          >\n            <div>© 2024 Republic of the Philippines</div>\n            <div className=\"text-xs\">Footer: {layoutTokens.patterns.footerHeights.default}</div>\n          </div>\n        </div>\n      </LayoutDemo>\n\n      {/* Pattern variations */}\n      <div className=\"mt-8 space-y-6\">\n        <LayoutDemo\n          title=\"Compact Layout Variation\"\n          description=\"Smaller dimensions for information-dense interfaces\"\n        >\n          <div className=\"overflow-hidden rounded-sm border border-gray-300 bg-white\">\n            <div\n              className=\"flex items-center bg-blue-500 px-4 text-sm text-white dark:text-black\"\n              style={{ height: layoutTokens.patterns.headerHeights.compact }}\n            >\n              Compact Header ({layoutTokens.patterns.headerHeights.compact})\n            </div>\n            <div className=\"flex\">\n              <div\n                className=\"border-r border-gray-200 bg-gray-50 p-3 text-sm\"\n                style={{ width: layoutTokens.patterns.sidebarWidths.narrow }}\n              >\n                Narrow Sidebar\n                <br />\n                <span className=\"text-xs text-gray-500 dark:text-gray-500\">\n                  ({layoutTokens.patterns.sidebarWidths.narrow})\n                </span>\n              </div>\n              <div className=\"flex-1 p-4\">\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Compact layout for dense information display\n                </div>\n              </div>\n            </div>\n          </div>\n        </LayoutDemo>\n\n        <LayoutDemo\n          title=\"Spacious Layout Variation\"\n          description=\"Larger dimensions for content-focused interfaces\"\n        >\n          <div className=\"overflow-hidden rounded-sm border border-gray-300 bg-white\">\n            <div\n              className=\"flex items-center bg-blue-700 px-6 text-lg font-medium text-white dark:text-black\"\n              style={{ height: layoutTokens.patterns.headerHeights.large }}\n            >\n              Large Header ({layoutTokens.patterns.headerHeights.large})\n            </div>\n            <div className=\"flex\">\n              <div\n                className=\"border-r border-gray-200 bg-gray-50 p-5\"\n                style={{ width: layoutTokens.patterns.sidebarWidths.wide }}\n              >\n                Wide Sidebar\n                <br />\n                <span className=\"text-sm text-gray-500 dark:text-gray-500\">\n                  ({layoutTokens.patterns.sidebarWidths.wide})\n                </span>\n                <div className=\"mt-3 text-sm text-gray-600 dark:text-gray-400\">\n                  More space for navigation and auxiliary content\n                </div>\n              </div>\n              <div className=\"flex-1 p-6\">\n                <div className=\"text-gray-600 dark:text-gray-400\">\n                  Spacious layout for content-focused applications\n                </div>\n              </div>\n            </div>\n          </div>\n        </LayoutDemo>\n      </div>\n\n      <div className=\"mt-8 rounded-lg border border-yellow-200 bg-yellow-50 p-4\">\n        <h3 className=\"mb-2 font-semibold text-yellow-900\">🏛️ Government Layout Guidelines</h3>\n        <ul className=\"space-y-1 text-sm text-yellow-800\">\n          <li>• Use consistent header heights across related applications</li>\n          <li>• Choose sidebar widths based on navigation complexity</li>\n          <li>• Ensure footer contains required government information</li>\n          <li>• Test layouts with real content and long text</li>\n          <li>• Consider accessibility guidelines for layout patterns</li>\n        </ul>\n      </div>\n    </div>\n  ),\n};\n\nexport const SemanticLayout: Story = {\n  name: '🎯 Semantic Layout',\n  render: () => (\n    <div className=\"p-6\">\n      <h1 className=\"mb-6 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n        Semantic Layout Tokens\n      </h1>\n      <p className=\"mb-8 text-gray-600 dark:text-gray-400\">\n        Contextual layout tokens that provide meaning and consistency for specific use cases.\n      </p>\n\n      <div className=\"space-y-8\">\n        {Object.entries(semanticLayout).map(([category, tokens]) => (\n          <div key={category} className=\"rounded-lg border border-gray-200 p-6\">\n            <h3 className=\"mb-4 text-lg font-semibold text-gray-900 capitalize dark:text-gray-100\">\n              {category} Layout\n            </h3>\n            <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3\">\n              {Object.entries(tokens as Record<string, string>).map(([name, value]) => (\n                <div key={name} className=\"flex items-center gap-3 rounded-sm bg-gray-50 p-3\">\n                  <div className=\"w-20 font-mono text-sm text-gray-700 dark:text-gray-300\">\n                    {name}\n                  </div>\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">{value}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <LayoutDemo\n        title=\"Semantic Layout Usage Example\"\n        description=\"How semantic tokens create consistent layouts\"\n      >\n        <div\n          className=\"overflow-hidden rounded-sm border border-gray-200 bg-white\"\n          style={{\n            maxWidth: semanticLayout.page.maxWidth,\n            margin: semanticLayout.page.margin,\n            padding: semanticLayout.page.padding,\n          }}\n        >\n          <div\n            className=\"flex items-center bg-blue-600 px-6 text-white dark:text-black\"\n            style={{\n              height: semanticLayout.navigation.height,\n              padding: semanticLayout.navigation.padding,\n              zIndex: semanticLayout.navigation.zIndex,\n            }}\n          >\n            Navigation using semantic tokens\n          </div>\n\n          <div\n            className=\"p-6\"\n            style={{\n              maxWidth: semanticLayout.content.maxWidth,\n              padding: semanticLayout.content.padding,\n              gap: semanticLayout.content.gap,\n            }}\n          >\n            <div\n              className=\"rounded border border-gray-200 bg-gray-50\"\n              style={{\n                padding: semanticLayout.card.padding,\n                borderRadius: semanticLayout.card.borderRadius,\n              }}\n            >\n              Card using semantic padding and border radius\n            </div>\n          </div>\n        </div>\n      </LayoutDemo>\n\n      <div className=\"mt-8 rounded-lg border border-teal-200 bg-teal-50 p-4\">\n        <h3 className=\"mb-2 font-semibold text-teal-900\">🎯 Semantic Benefits</h3>\n        <ul className=\"space-y-1 text-sm text-teal-800\">\n          <li>• Self-documenting code with meaningful token names</li>\n          <li>• Consistent patterns across different components</li>\n          <li>• Easy maintenance and global updates</li>\n          <li>• Context-appropriate sizing and spacing</li>\n        </ul>\n      </div>\n    </div>\n  ),\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/design-system/tokens/Layout/Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/design-system/tokens/Layout/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/design-system/tokens/Shadows/Shadows.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ShadowSwatch' is defined but never used.","line":3,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport Shadows, {\n  ShadowSwatch,\n  ShadowGroup,\n  ShadowDemo,\n  InteractiveShadowDemo,\n  shadowTokens,\n  radiusTokens,\n  opacityTokens,\n  blurTokens,\n  semanticShadows,\n  semanticEffects,\n} from './Shadows';\n\nconst meta = {\n  title: 'Design System/Shadows & Effects',\n  component: Shadows,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component: `\n# Shadows & Effects Tokens\n\nComprehensive shadow, border radius, opacity, and blur system for the Citizenly design system,\nadding depth, hierarchy, and visual interest to Philippine government applications.\n\n## Effects Philosophy\n\n- **Layered Depth**: Progressive shadow system from subtle to prominent\n- **Modern Aesthetics**: Contemporary border radius and blur effects  \n- **Semantic Context**: Meaningful tokens for different component types\n- **Accessibility First**: Effects that enhance rather than hinder usability\n- **Performance Aware**: Optimized values for smooth animations\n\n## Shadow Categories\n\n### Box Shadows\nProgressive depth system for UI elevation:\n- **xs**: Subtle lift for small elements (1px blur)\n- **sm**: Small cards and buttons (3px blur) \n- **md**: Standard cards and containers (6px blur)\n- **lg**: Prominent elements and sidebars (15px blur)\n- **xl**: Large modals and overlays (25px blur)\n- **2xl**: Hero elements and major sections (50px blur)\n- **inner**: Inset shadow for pressed states\n\n### Drop Shadows  \nText and icon shadows for improved readability:\n- **sm-2xl**: Progressive filter shadows for typography\n- Optimized for text contrast and legibility\n- Subtle enough for government accessibility standards\n\n### Border Radius\nModern corner rounding for approachable interfaces:\n- **sm (2px)**: Minimal rounding for professional look\n- **md (6px)**: Standard component rounding\n- **lg (8px)**: Cards and containers\n- **xl-3xl**: Large containers and special elements\n- **full**: Circular elements (badges, avatars)\n\n### Opacity Values\nTransparency for overlays and states:\n- **0-100**: Full range from transparent to opaque\n- **Common values**: 10%, 25%, 50%, 75% for standard use cases\n- Semantic mappings for disabled, loading, overlay states\n\n### Blur Effects\nModern backdrop and focus effects:\n- **sm (4px)**: Subtle backdrop blur for glassmorphism\n- **md (12px)**: Loading states and disabled content\n- **lg-3xl**: Dramatic effects for special cases\n\n## Semantic Usage\n\n### Component Shadows\n- **button**: sm - Subtle lift for clickable elements\n- **card**: md - Standard container depth\n- **input**: xs - Minimal depth for form elements\n- **modal**: 2xl - Strong separation from background\n\n### Interactive States\n- **hover**: lg - Enhanced depth on interaction\n- **focus**: Custom blue ring - Accessibility focus indicator\n- **active**: xs - Pressed/clicked appearance\n- **disabled**: none - Flattened disabled state\n\n### Layout Shadows\n- **navigation**: md - Header/nav separation\n- **dropdown**: xl - Floating menu separation\n- **tooltip**: lg - Helper text prominence\n\n## Usage in Code\n\n\\`\\`\\`tsx\n// Box shadows\n.button {\n  box-shadow: \\${shadowTokens.boxShadows.sm};\n}\n\n// Semantic shadows\n.card {\n  box-shadow: \\${semanticShadows.component.card};\n}\n\n// Border radius\n.container {\n  border-radius: \\${radiusTokens.lg};\n}\n\n// Interactive states\n.button:hover {\n  box-shadow: \\${semanticShadows.interactive.hover};\n}\n\n// Opacity states\n.disabled {\n  opacity: \\${semanticEffects.opacity.disabled};\n}\n\n// Blur effects\n.backdrop {\n  backdrop-filter: blur(\\${blurTokens.sm});\n}\n\\`\\`\\`\n\n## Accessibility Considerations\n\n- Shadows provide visual hierarchy without relying solely on color\n- Focus shadows meet WCAG 2.1 contrast requirements\n- Blur effects don't interfere with screen readers\n- Effects enhance but don't replace semantic HTML structure\n        `,\n      },\n    },\n  },\n  tags: ['autodocs'],\n} satisfies Meta<typeof Shadows>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// =============================================================================\n// MAIN STORIES\n// =============================================================================\n\nexport const AllShadowsEffects: Story = {\n  name: '✨ All Shadows & Effects',\n  render: () => <Shadows />,\n};\n\nexport const BoxShadows: Story = {\n  name: '📦 Box Shadows',\n  render: () => (\n    <div className=\"p-6\">\n      <h1 className=\"mb-6 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n        Box Shadow System\n      </h1>\n      <p className=\"mb-8 text-gray-600 dark:text-gray-400\">\n        Progressive shadow system that creates depth and visual hierarchy in government\n        applications.\n      </p>\n\n      <ShadowGroup\n        title=\"Shadow Scale\"\n        shadows={shadowTokens.boxShadows}\n        type=\"boxShadow\"\n        description=\"From subtle elevation to dramatic separation\"\n      />\n\n      <ShadowDemo\n        title=\"Interactive Shadow Explorer\"\n        description=\"Click different shadow-sm values to preview them on a card element\"\n      >\n        <InteractiveShadowDemo />\n      </ShadowDemo>\n\n      <ShadowDemo\n        title=\"Shadow Comparison\"\n        description=\"Side-by-side comparison of different shadow-sm depths\"\n      >\n        <div className=\"grid grid-cols-2 gap-6 md:grid-cols-4\">\n          {Object.entries(shadowTokens.boxShadows)\n            .filter(([name]) => !['none', 'inner'].includes(name))\n            .slice(0, 4)\n            .map(([name, shadow]) => (\n              <div key={name} className=\"text-center\">\n                <div\n                  className=\"mx-auto mb-3 flex h-24 w-24 items-center justify-center rounded-lg border border-gray-200 bg-white font-medium text-gray-700 dark:text-gray-300\"\n                  style={{ boxShadow: shadow }}\n                >\n                  {name}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">{name} shadow</div>\n              </div>\n            ))}\n        </div>\n      </ShadowDemo>\n\n      <div className=\"mt-8 rounded-lg border border-blue-200 bg-blue-50 p-4\">\n        <h3 className=\"mb-2 font-semibold text-gray-900 dark:text-gray-100\">\n          📦 Box Shadow Guidelines\n        </h3>\n        <ul className=\"space-y-1 text-sm text-gray-800 dark:text-gray-200\">\n          <li>\n            • <strong>xs-sm</strong>: Subtle elevation for buttons, inputs, small cards\n          </li>\n          <li>\n            • <strong>md</strong>: Standard depth for cards, containers, navigation\n          </li>\n          <li>\n            • <strong>lg-xl</strong>: Prominent elements, large cards, sidebars\n          </li>\n          <li>\n            • <strong>2xl</strong>: Modals, overlays, hero sections\n          </li>\n          <li>\n            • <strong>inner</strong>: Pressed states, inset form elements\n          </li>\n        </ul>\n      </div>\n    </div>\n  ),\n};\n\nexport const BorderRadius: Story = {\n  name: '🔄 Border Radius',\n  render: () => (\n    <div className=\"p-6\">\n      <h1 className=\"mb-6 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n        Border Radius System\n      </h1>\n      <p className=\"mb-8 text-gray-600 dark:text-gray-400\">\n        Modern corner rounding that creates approachable, contemporary government interfaces.\n      </p>\n\n      <ShadowGroup\n        title=\"Radius Scale\"\n        shadows={radiusTokens}\n        type=\"radius\"\n        description=\"From sharp corners to fully rounded-sm elements\"\n      />\n\n      <ShadowDemo\n        title=\"Component Radius Examples\"\n        description=\"How different radius values affect common UI components\"\n      >\n        <div className=\"space-y-8\">\n          {/* Buttons */}\n          <div>\n            <h4 className=\"mb-4 font-semibold text-gray-900 dark:text-gray-100\">Buttons</h4>\n            <div className=\"flex flex-wrap gap-4\">\n              {Object.entries(radiusTokens)\n                .filter(([name]) => !['full'].includes(name))\n                .slice(0, 5)\n                .map(([name, radius]) => (\n                  <button\n                    key={name}\n                    className=\"bg-blue-600 px-6 py-3 font-medium text-white shadow-xs transition-colors hover:bg-blue-700 dark:text-black\"\n                    style={{ borderRadius: radius }}\n                  >\n                    {name} radius\n                  </button>\n                ))}\n            </div>\n          </div>\n\n          {/* Cards */}\n          <div>\n            <h4 className=\"mb-4 font-semibold text-gray-900 dark:text-gray-100\">Cards</h4>\n            <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n              {[radiusTokens.sm, radiusTokens.lg, radiusTokens['2xl']].map((radius, index) => {\n                const names = ['sm', 'lg', '2xl'];\n                return (\n                  <div\n                    key={radius}\n                    className=\"border border-gray-200 bg-white p-6 shadow-md\"\n                    style={{ borderRadius: radius }}\n                  >\n                    <h5 className=\"mb-2 font-semibold text-gray-900 dark:text-gray-100\">\n                      Card Component\n                    </h5>\n                    <p className=\"mb-3 text-sm text-gray-600 dark:text-gray-400\">\n                      This card uses {names[index]} border radius ({radius}).\n                    </p>\n                    <button className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      Learn more →\n                    </button>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Badges and Avatars */}\n          <div>\n            <h4 className=\"mb-4 font-semibold text-gray-900 dark:text-gray-100\">\n              Badges & Avatars\n            </h4>\n            <div className=\"flex items-center gap-6\">\n              <div className=\"flex items-center gap-3\">\n                <div\n                  className=\"flex h-12 w-12 items-center justify-center bg-linear-to-r from-blue-500 to-purple-600 font-bold text-white dark:text-black\"\n                  style={{ borderRadius: radiusTokens.full }}\n                >\n                  JD\n                </div>\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Avatar (full radius)\n                </span>\n              </div>\n\n              <div className=\"flex items-center gap-3\">\n                <span\n                  className=\"bg-green-100 px-3 py-1 text-sm font-medium text-green-800\"\n                  style={{ borderRadius: radiusTokens.full }}\n                >\n                  Online\n                </span>\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Badge (full radius)\n                </span>\n              </div>\n\n              <div className=\"flex items-center gap-3\">\n                <span\n                  className=\"bg-red-100 px-2 py-1 text-xs font-medium text-red-800\"\n                  style={{ borderRadius: radiusTokens.sm }}\n                >\n                  New\n                </span>\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Tag (sm radius)</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ShadowDemo>\n\n      <div className=\"mt-8 rounded-lg border border-green-200 bg-green-50 p-4\">\n        <h3 className=\"mb-2 font-semibold text-green-900\">🔄 Radius Usage Guidelines</h3>\n        <ul className=\"space-y-1 text-sm text-green-800\">\n          <li>\n            • <strong>none-sm</strong>: Professional, government look for forms and inputs\n          </li>\n          <li>\n            • <strong>md-lg</strong>: Modern feel for cards, buttons, and containers\n          </li>\n          <li>\n            • <strong>xl-3xl</strong>: Prominent sections, hero areas, special components\n          </li>\n          <li>\n            • <strong>full</strong>: Circular elements like avatars, badges, and pills\n          </li>\n        </ul>\n      </div>\n    </div>\n  ),\n};\n\nexport const OpacityBlur: Story = {\n  name: '👻 Opacity & Blur',\n  render: () => (\n    <div className=\"p-6\">\n      <h1 className=\"mb-6 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n        Opacity & Blur Effects\n      </h1>\n      <p className=\"mb-8 text-gray-600 dark:text-gray-400\">\n        Transparency and blur effects for modern UI patterns and state management.\n      </p>\n\n      <div className=\"mb-8 grid grid-cols-1 gap-8 lg:grid-cols-2\">\n        <ShadowGroup\n          title=\"Opacity Scale\"\n          shadows={opacityTokens}\n          type=\"opacity\"\n          description=\"Transparency values for overlays and states\"\n        />\n\n        <ShadowGroup\n          title=\"Blur Scale\"\n          shadows={blurTokens}\n          type=\"blur\"\n          description=\"Blur effects for modern UI patterns\"\n        />\n      </div>\n\n      <ShadowDemo\n        title=\"Opacity Applications\"\n        description=\"Common uses of opacity in government interface design\"\n      >\n        <div className=\"space-y-8\">\n          {/* Loading States */}\n          <div>\n            <h4 className=\"mb-4 font-semibold text-gray-900 dark:text-gray-100\">\n              Loading & Disabled States\n            </h4>\n            <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n              <div className=\"rounded-lg border border-gray-200 bg-white p-4\">\n                <h5 className=\"mb-2 font-semibold text-gray-900 dark:text-gray-100\">\n                  Normal State\n                </h5>\n                <p className=\"mb-3 text-sm text-gray-600 dark:text-gray-400\">\n                  This content is fully visible and interactive.\n                </p>\n                <button className=\"rounded-md bg-blue-600 px-4 py-2 text-white dark:text-black\">\n                  Action\n                </button>\n              </div>\n\n              <div\n                className=\"rounded-lg border border-gray-200 bg-white p-4\"\n                style={{ opacity: opacityTokens[60] }}\n              >\n                <h5 className=\"mb-2 font-semibold text-gray-900 dark:text-gray-100\">\n                  Loading State\n                </h5>\n                <p className=\"mb-3 text-sm text-gray-600 dark:text-gray-400\">\n                  Content is loading, reduced opacity indicates wait.\n                </p>\n                <button\n                  className=\"rounded-md bg-blue-600 px-4 py-2 text-white dark:text-black\"\n                  disabled\n                >\n                  Loading...\n                </button>\n              </div>\n\n              <div\n                className=\"rounded-lg border border-gray-200 bg-white p-4\"\n                style={{ opacity: opacityTokens[40] }}\n              >\n                <h5 className=\"mb-2 font-semibold text-gray-900 dark:text-gray-100\">\n                  Disabled State\n                </h5>\n                <p className=\"mb-3 text-sm text-gray-600 dark:text-gray-400\">\n                  Content is disabled, low opacity shows unavailability.\n                </p>\n                <button\n                  className=\"rounded-md bg-blue-600 px-4 py-2 text-white dark:text-black\"\n                  disabled\n                >\n                  Disabled\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Overlay Examples */}\n          <div>\n            <h4 className=\"mb-4 font-semibold text-gray-900 dark:text-gray-100\">\n              Overlay Patterns\n            </h4>\n            <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n              {/* Modal overlay */}\n              <div className=\"relative h-40 overflow-hidden rounded-lg bg-linear-to-br from-blue-400 to-purple-500\">\n                <div className=\"absolute inset-0 p-4\">\n                  <h5 className=\"mb-2 font-bold text-white dark:text-black\">Background Content</h5>\n                  <p className=\"text-sm text-white dark:text-black\">\n                    This is the main page content that gets overlaid.\n                  </p>\n                </div>\n                <div\n                  className=\"absolute inset-0 flex items-center justify-center font-medium text-white dark:text-black dark:text-white\"\n                  style={{ backgroundColor: `rgba(0, 0, 0, ${opacityTokens[60]})` }}\n                >\n                  Modal Overlay\n                  <br />\n                  <span className=\"text-sm opacity-75\">opacity: {opacityTokens[60]}</span>\n                </div>\n              </div>\n\n              {/* Image overlay */}\n              <div className=\"relative h-40 overflow-hidden rounded-lg bg-linear-to-br from-green-400 to-teal-500\">\n                <div className=\"absolute inset-0 p-4\">\n                  <h5 className=\"mb-2 font-bold text-white dark:text-black\">Image Background</h5>\n                  <p className=\"text-sm text-white dark:text-black\">\n                    Background image or video content.\n                  </p>\n                </div>\n                <div\n                  className=\"absolute inset-0 flex items-center justify-center font-medium text-white dark:text-black dark:text-white\"\n                  style={{\n                    background: `linear-gradient(rgba(0, 0, 0, ${opacityTokens[30]}), rgba(0, 0, 0, ${opacityTokens[70]}))`,\n                  }}\n                >\n                  Text Overlay\n                  <br />\n                  <span className=\"text-sm opacity-75\">gradient overlay</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ShadowDemo>\n\n      <ShadowDemo\n        title=\"Blur Effect Showcase\"\n        description=\"Modern blur-sm effects for contemporary government interfaces\"\n      >\n        <div className=\"space-y-8\">\n          {/* Glassmorphism */}\n          <div>\n            <h4 className=\"mb-4 font-semibold text-gray-900 dark:text-gray-100 dark:text-gray-900\">\n              Glassmorphism Cards\n            </h4>\n            <div className=\"relative h-64 overflow-hidden rounded-xl bg-linear-to-br from-blue-400 via-purple-500 to-pink-500 p-6\">\n              <div className=\"grid h-full grid-cols-1 gap-6 md:grid-cols-2\">\n                {/* Light glass */}\n                <div\n                  className=\"border-opacity-30 bg-opacity-20 rounded-xl border border-white bg-white p-6 backdrop-blur-xs\"\n                  style={{ backdropFilter: `blur(${blurTokens.sm})` }}\n                >\n                  <h5 className=\"mb-3 font-bold text-white dark:text-black\">\n                    Government Service Card\n                  </h5>\n                  <p className=\"mb-4 text-sm text-white dark:text-black\">\n                    Modern glassmorphism effect using backdrop blur for contemporary government\n                    interfaces.\n                  </p>\n                  <button className=\"border-opacity-30 bg-opacity-20 hover:bg-opacity-30 rounded-lg border border-white bg-white px-4 py-2 text-white transition-all dark:text-black dark:text-white\">\n                    Learn More\n                  </button>\n                </div>\n\n                {/* Dark glass */}\n                <div\n                  className=\"border-opacity-20 bg-opacity-20 rounded-xl border border-white bg-black p-6 backdrop-blur-md\"\n                  style={{ backdropFilter: `blur(${blurTokens.md})` }}\n                >\n                  <h5 className=\"mb-3 font-bold text-white dark:text-black\">Document Portal</h5>\n                  <p className=\"mb-4 text-sm text-white dark:text-black\">\n                    Enhanced blur effect for more pronounced glass appearance in key interface\n                    areas.\n                  </p>\n                  <button className=\"border-opacity-20 bg-opacity-20 hover:bg-opacity-30 rounded-lg border border-white bg-white px-4 py-2 text-white transition-all dark:text-black\">\n                    Access Portal\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Loading blur */}\n          <div>\n            <h4 className=\"mb-4 font-semibold text-gray-900 dark:text-gray-100\">\n              Loading State Blur\n            </h4>\n            <div className=\"relative overflow-hidden rounded-lg border border-gray-200 bg-white\">\n              <div className=\"p-6\">\n                <h5 className=\"mb-3 font-semibold text-gray-900 dark:text-gray-100\">\n                  Document Processing System\n                </h5>\n                <div className=\"mb-4 grid grid-cols-1 gap-4 md:grid-cols-3\">\n                  <div className=\"rounded border bg-gray-50 p-4\">\n                    <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      Applications\n                    </div>\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">1,234</div>\n                  </div>\n                  <div className=\"rounded border bg-gray-50 p-4\">\n                    <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      Processed\n                    </div>\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">856</div>\n                  </div>\n                  <div className=\"rounded border bg-gray-50 p-4\">\n                    <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      Pending\n                    </div>\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">378</div>\n                  </div>\n                </div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400 dark:text-gray-600\">\n                  This interface shows document processing statistics and status information.\n                </p>\n              </div>\n\n              {/* Loading overlay */}\n              <div\n                className=\"bg-opacity-80 absolute inset-0 flex items-center justify-center bg-white\"\n                style={{ backdropFilter: `blur(${blurTokens.md})` }}\n              >\n                <div className=\"text-center\">\n                  <div className=\"mx-auto mb-3 h-8 w-8 animate-spin rounded-full border-2 border-blue-600 border-t-transparent\"></div>\n                  <div className=\"font-medium text-gray-900 dark:text-gray-100\">\n                    Processing Request...\n                  </div>\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    blur: {blurTokens.md}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ShadowDemo>\n\n      <div className=\"mt-8 grid grid-cols-1 gap-6 md:grid-cols-2\">\n        <div className=\"rounded-lg border border-purple-200 bg-purple-50 p-4\">\n          <h3 className=\"mb-2 font-semibold text-gray-900 dark:text-gray-100\">\n            👻 Opacity Guidelines\n          </h3>\n          <ul className=\"space-y-1 text-sm text-gray-800 dark:text-gray-200\">\n            <li>\n              • <strong>10-25%</strong>: Subtle overlays, hover effects\n            </li>\n            <li>\n              • <strong>40-60%</strong>: Disabled states, loading indicators\n            </li>\n            <li>\n              • <strong>75-90%</strong>: Modal overlays, backdrop dimming\n            </li>\n            <li>• Test opacity values for accessibility contrast</li>\n          </ul>\n        </div>\n\n        <div className=\"rounded-lg border border-cyan-200 bg-cyan-50 p-4\">\n          <h3 className=\"mb-2 font-semibold text-cyan-900\">🌫️ Blur Guidelines</h3>\n          <ul className=\"space-y-1 text-sm text-cyan-800\">\n            <li>\n              • <strong>sm (4px)</strong>: Subtle glassmorphism effects\n            </li>\n            <li>\n              • <strong>md (12px)</strong>: Loading states, disabled content\n            </li>\n            <li>\n              • <strong>lg+ (16px+)</strong>: Dramatic effects, privacy screens\n            </li>\n            <li>• Consider performance impact on mobile devices</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  ),\n};\n\nexport const SemanticShadows: Story = {\n  name: '🎯 Semantic Usage',\n  render: () => (\n    <div className=\"p-6\">\n      <h1 className=\"mb-6 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n        Semantic Shadow & Effect Usage\n      </h1>\n      <p className=\"mb-8 text-gray-600 dark:text-gray-400\">\n        Contextual shadow and effect tokens for consistent patterns across government applications.\n      </p>\n\n      <ShadowDemo\n        title=\"Component Shadows\"\n        description=\"Semantic shadows applied to different UI component types\"\n      >\n        <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3\">\n          {/* Button */}\n          <div className=\"text-center\">\n            <button\n              className=\"rounded-md bg-blue-600 px-6 py-3 font-medium text-white transition-all hover:shadow-lg active:shadow-xs dark:text-black\"\n              style={{\n                boxShadow: semanticShadows.component.button,\n                borderRadius: semanticEffects.radius.button,\n              }}\n            >\n              Primary Button\n            </button>\n            <div className=\"mt-2 text-sm text-gray-600 dark:text-gray-400\">\n              button shadow + radius\n            </div>\n          </div>\n\n          {/* Card */}\n          <div className=\"text-center\">\n            <div\n              className=\"mx-auto max-w-48 border border-gray-200 bg-white p-4\"\n              style={{\n                boxShadow: semanticShadows.component.card,\n                borderRadius: semanticEffects.radius.card,\n              }}\n            >\n              <h4 className=\"mb-2 font-semibold text-gray-900 dark:text-gray-100\">Service Card</h4>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Government service information\n              </p>\n            </div>\n            <div className=\"mt-2 text-sm text-gray-600 dark:text-gray-400\">\n              card shadow + radius\n            </div>\n          </div>\n\n          {/* Input */}\n          <div className=\"text-center\">\n            <input\n              type=\"text\"\n              placeholder=\"Government ID\"\n              className=\"w-full max-w-48 border border-gray-300 px-4 py-2 transition-all focus:border-blue-500 focus:outline-hidden\"\n              style={{\n                boxShadow: semanticShadows.component.input,\n                borderRadius: semanticEffects.radius.input,\n              }}\n              onFocus={e => {\n                e.currentTarget.style.boxShadow = semanticShadows.component.inputFocus;\n              }}\n              onBlur={e => {\n                e.currentTarget.style.boxShadow = semanticShadows.component.input;\n              }}\n            />\n            <div className=\"mt-2 text-sm text-gray-600 dark:text-gray-400\">\n              input shadow + radius\n            </div>\n          </div>\n        </div>\n      </ShadowDemo>\n\n      <ShadowDemo\n        title=\"Interactive State Demonstration\"\n        description=\"How shadows change with user interaction\"\n      >\n        <div className=\"grid grid-cols-1 gap-8 md:grid-cols-2\">\n          {/* Hover effects */}\n          <div className=\"space-y-6\">\n            <h4 className=\"font-semibold text-gray-900 dark:text-gray-100\">Hover Effects</h4>\n            <div className=\"space-y-4\">\n              {['Normal', 'Hover Me!', 'Click Me!'].map((text, index) => {\n                const shadows = [\n                  semanticShadows.component.card,\n                  semanticShadows.interactive.hover,\n                  semanticShadows.interactive.active,\n                ];\n                return (\n                  <div\n                    key={text}\n                    className=\"cursor-pointer rounded-lg border border-gray-200 bg-white p-4 transition-all duration-200 select-none\"\n                    style={{ boxShadow: shadows[index] }}\n                    onMouseEnter={e => {\n                      if (index === 1)\n                        e.currentTarget.style.boxShadow = semanticShadows.interactive.hover;\n                    }}\n                    onMouseLeave={e => {\n                      if (index === 1)\n                        e.currentTarget.style.boxShadow = semanticShadows.component.card;\n                    }}\n                    onMouseDown={e => {\n                      if (index === 2)\n                        e.currentTarget.style.boxShadow = semanticShadows.interactive.active;\n                    }}\n                    onMouseUp={e => {\n                      if (index === 2)\n                        e.currentTarget.style.boxShadow = semanticShadows.component.card;\n                    }}\n                  >\n                    <div className=\"text-center font-medium text-gray-700 dark:text-gray-300\">\n                      {text}\n                    </div>\n                    {index === 0 && (\n                      <div className=\"mt-1 text-center text-xs text-gray-500 dark:text-gray-500\">\n                        Default card shadow\n                      </div>\n                    )}\n                    {index === 1 && (\n                      <div className=\"mt-1 text-center text-xs text-gray-500 dark:text-gray-500\">\n                        Hover to see elevation\n                      </div>\n                    )}\n                    {index === 2 && (\n                      <div className=\"mt-1 text-center text-xs text-gray-500 dark:text-gray-500\">\n                        Click and hold for active state\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Focus states */}\n          <div className=\"space-y-6\">\n            <h4 className=\"font-semibold text-gray-900 dark:text-gray-100\">Focus States</h4>\n            <div className=\"space-y-4\">\n              <input\n                type=\"text\"\n                placeholder=\"Click to focus\"\n                className=\"w-full rounded-lg border border-gray-300 px-4 py-3 transition-all focus:outline-hidden\"\n                onFocus={e => {\n                  e.currentTarget.style.boxShadow = semanticShadows.interactive.focus;\n                  e.currentTarget.style.borderColor = '#3b82f6';\n                }}\n                onBlur={e => {\n                  e.currentTarget.style.boxShadow = semanticShadows.component.input;\n                  e.currentTarget.style.borderColor = '#d1d5db';\n                }}\n              />\n\n              <textarea\n                placeholder=\"Text area with focus shadow-sm\"\n                rows={3}\n                className=\"w-full resize-none rounded-lg border border-gray-300 px-4 py-3 transition-all focus:outline-hidden\"\n                onFocus={e => {\n                  e.currentTarget.style.boxShadow = semanticShadows.interactive.focus;\n                  e.currentTarget.style.borderColor = '#3b82f6';\n                }}\n                onBlur={e => {\n                  e.currentTarget.style.boxShadow = semanticShadows.component.input;\n                  e.currentTarget.style.borderColor = '#d1d5db';\n                }}\n              />\n\n              <button\n                className=\"w-full rounded-lg bg-green-600 px-4 py-3 font-medium text-white transition-all focus:outline-hidden dark:text-black\"\n                onFocus={e => {\n                  e.currentTarget.style.boxShadow = semanticShadows.interactive.focus;\n                }}\n                onBlur={e => {\n                  e.currentTarget.style.boxShadow = semanticShadows.component.button;\n                }}\n              >\n                Button with focus ring\n              </button>\n\n              <div className=\"text-center text-xs text-gray-500 dark:text-gray-500\">\n                Focus elements above to see accessibility focus indicators\n              </div>\n            </div>\n          </div>\n        </div>\n      </ShadowDemo>\n\n      <ShadowDemo\n        title=\"Layout Shadow Examples\"\n        description=\"Semantic shadows for major layout elements\"\n      >\n        <div className=\"space-y-8\">\n          {/* Navigation */}\n          <div>\n            <h4 className=\"mb-4 font-semibold text-gray-900 dark:text-gray-100\">\n              Navigation Shadow\n            </h4>\n            <div\n              className=\"rounded-lg bg-blue-600 p-4 text-white dark:text-black\"\n              style={{ boxShadow: semanticShadows.layout.navigation }}\n            >\n              <div className=\"flex items-center justify-between\">\n                <div className=\"font-medium\">Philippine Government Portal</div>\n                <div className=\"text-sm opacity-75\">navigation shadow</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Modal */}\n          <div>\n            <h4 className=\"mb-4 font-semibold text-gray-900 dark:text-gray-100\">Modal Shadow</h4>\n            <div className=\"relative\">\n              <div className=\"bg-opacity-50 rounded-xl bg-gray-900 p-8\">\n                <div\n                  className=\"mx-auto max-w-md rounded-xl bg-white p-6\"\n                  style={{ boxShadow: semanticShadows.layout.modal }}\n                >\n                  <h5 className=\"mb-3 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n                    Document Confirmation\n                  </h5>\n                  <p className=\"mb-4 text-gray-600 dark:text-gray-400\">\n                    Are you sure you want to submit this application?\n                  </p>\n                  <div className=\"flex justify-end gap-3\">\n                    <button className=\"px-4 py-2 text-gray-600 hover:text-gray-800 dark:text-gray-200 dark:text-gray-400\">\n                      Cancel\n                    </button>\n                    <button className=\"rounded-md bg-blue-600 px-4 py-2 text-white dark:text-black\">\n                      Confirm\n                    </button>\n                  </div>\n                </div>\n              </div>\n              <div className=\"mt-2 text-center text-sm text-gray-600 dark:text-gray-400\">\n                modal shadow (2xl depth)\n              </div>\n            </div>\n          </div>\n\n          {/* Dropdown */}\n          <div>\n            <h4 className=\"mb-4 font-semibold text-gray-900 dark:text-gray-100\">Dropdown Shadow</h4>\n            <div className=\"relative inline-block\">\n              <button className=\"rounded-md border border-gray-300 bg-white px-4 py-2 text-gray-700 dark:text-gray-300\">\n                Select Service ▼\n              </button>\n              <div\n                className=\"absolute top-full left-0 z-10 mt-2 w-56 rounded-md border border-gray-200 bg-white py-2\"\n                style={{ boxShadow: semanticShadows.layout.dropdown }}\n              >\n                <div className=\"cursor-pointer px-4 py-2 hover:bg-gray-50\">\n                  Birth Certificate Request\n                </div>\n                <div className=\"cursor-pointer px-4 py-2 hover:bg-gray-50\">\n                  Marriage Certificate\n                </div>\n                <div className=\"cursor-pointer px-4 py-2 hover:bg-gray-50\">\n                  Business Permit Application\n                </div>\n                <div className=\"cursor-pointer px-4 py-2 hover:bg-gray-50\">Tax Clearance</div>\n              </div>\n              <div className=\"mt-16 text-sm text-gray-600 dark:text-gray-400\">\n                dropdown shadow (xl depth)\n              </div>\n            </div>\n          </div>\n        </div>\n      </ShadowDemo>\n\n      <div className=\"mt-8 rounded-lg border border-emerald-200 bg-emerald-50 p-4\">\n        <h3 className=\"mb-2 font-semibold text-emerald-900\">🎯 Semantic Benefits</h3>\n        <ul className=\"space-y-1 text-sm text-emerald-800\">\n          <li>\n            • <strong>Consistency</strong>: Same shadow patterns across similar components\n          </li>\n          <li>\n            • <strong>Maintainability</strong>: Easy to update shadow system-wide\n          </li>\n          <li>\n            • <strong>Accessibility</strong>: Focus shadows meet WCAG contrast requirements\n          </li>\n          <li>\n            • <strong>Hierarchy</strong>: Clear visual layering of interface elements\n          </li>\n        </ul>\n      </div>\n    </div>\n  ),\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/design-system/tokens/Shadows/Shadows.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/design-system/tokens/Shadows/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/design-system/tokens/Spacing/Spacing.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":111,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":125,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":142,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":142,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport Spacing, {\n  SpacingSwatch,\n  SpacingGroup,\n  SpacingDemo,\n  spacingTokens,\n  semanticSpacing,\n} from './Spacing';\n\nconst meta = {\n  title: 'Design System/Spacing',\n  component: Spacing,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component: `\n# Spacing Tokens\n\nSpacing system for the Citizenly design system, built on a 4px base grid to ensure \nconsistent rhythm and alignment across all government applications.\n\n## Spacing Philosophy\n\n- **4px Base Grid**: All spacing values are multiples of 4px for pixel-perfect alignment\n- **Semantic Naming**: Contextual tokens (component, layout, form) for meaningful usage\n- **Progressive Scale**: Smaller increments at small sizes, larger jumps at large sizes\n- **Responsive Friendly**: Values work well across all screen sizes\n\n## Spacing Categories\n\n### Base Scale (0-384px)\nRaw spacing values from 0px to 384px in 4px increments. Use these for custom spacing needs.\n\n### Component Spacing\nInternal spacing within components:\n- **xs (4px)**: Tight spacing for compact elements\n- **sm (8px)**: Small internal spacing\n- **md (12px)**: Medium internal spacing (most common)\n- **lg (16px)**: Large internal spacing\n- **xl (24px)**: Extra large internal spacing\n\n### Layout Spacing  \nSpacing between major layout elements:\n- **xs (16px)**: Tight layout spacing\n- **sm (24px)**: Small layout spacing\n- **md (32px)**: Medium layout spacing\n- **lg (48px)**: Large layout spacing\n- **xl (64px)**: Extra large layout spacing\n- **2xl (96px)**: Section spacing\n- **3xl (128px)**: Page section spacing\n\n### Form Spacing\nSpecialized spacing for forms:\n- **fieldGap (16px)**: Between form fields\n- **groupGap (32px)**: Between form groups\n- **labelGap (4px)**: Between label and input\n- **helpGap (4px)**: Between input and help text\n- **buttonGap (12px)**: Between buttons\n\n## Usage in Code\n\n\\`\\`\\`tsx\n// Tailwind CSS classes\n<div className=\"p-4 mb-6 space-y-3\">\n\n// Custom CSS with tokens\n<div style={{ padding: spacingTokens[4], marginBottom: spacingTokens[6] }}>\n\n// Semantic spacing\n<div style={{ gap: semanticSpacing.form.fieldGap }}>\n\\`\\`\\`\n        `,\n      },\n    },\n  },\n  tags: ['autodocs'],\n} satisfies Meta<typeof Spacing>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// =============================================================================\n// MAIN STORIES\n// =============================================================================\n\nexport const AllSpacing: Story = {\n  name: '📏 All Spacing',\n  render: () => <Spacing />,\n};\n\nexport const BaseSpacingScale: Story = {\n  name: '📐 Base Spacing Scale',\n  render: () => (\n    <div className=\"p-6\">\n      <h1 className=\"mb-6 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n        Base Spacing Scale\n      </h1>\n      <p className=\"mb-8 text-gray-600 dark:text-gray-400\">\n        Built on a 4px base grid system. All values are multiples of 4px for consistent alignment.\n      </p>\n\n      <div className=\"grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3\">\n        {/* Extra Small (0-12px) */}\n        <div>\n          <h3 className=\"mb-4 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n            Extra Small (0-12px)\n          </h3>\n          <div className=\"space-y-2\">\n            {Object.entries(spacingTokens)\n              .filter(([_, value]) => parseInt(value) <= 12)\n              .map(([name, value]) => (\n                <SpacingSwatch key={name} name={name} value={value} />\n              ))}\n          </div>\n        </div>\n\n        {/* Small (14-32px) */}\n        <div>\n          <h3 className=\"mb-4 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n            Small (14-32px)\n          </h3>\n          <div className=\"space-y-2\">\n            {Object.entries(spacingTokens)\n              .filter(([_, value]) => {\n                const px = parseInt(value);\n                return px >= 14 && px <= 32;\n              })\n              .map(([name, value]) => (\n                <SpacingSwatch key={name} name={name} value={value} />\n              ))}\n          </div>\n        </div>\n\n        {/* Medium (36-96px) */}\n        <div>\n          <h3 className=\"mb-4 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n            Medium (36-96px)\n          </h3>\n          <div className=\"space-y-2\">\n            {Object.entries(spacingTokens)\n              .filter(([_, value]) => {\n                const px = parseInt(value);\n                return px >= 36 && px <= 96;\n              })\n              .map(([name, value]) => (\n                <SpacingSwatch key={name} name={name} value={value} />\n              ))}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mt-8 rounded-lg border border-blue-200 bg-blue-50 p-4\">\n        <h3 className=\"mb-2 font-semibold text-gray-900 dark:text-gray-100\">🔢 4px Grid System</h3>\n        <p className=\"text-sm text-gray-800 dark:text-gray-200\">\n          All spacing values are multiples of 4px. This creates a consistent rhythm and ensures\n          pixel-perfect alignment across all screen densities and zoom levels.\n        </p>\n      </div>\n    </div>\n  ),\n};\n\nexport const SemanticSpacing: Story = {\n  name: '💭 Semantic Spacing',\n  render: () => (\n    <div className=\"p-6\">\n      <h1 className=\"mb-6 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n        Semantic Spacing Tokens\n      </h1>\n      <p className=\"mb-8 text-gray-600 dark:text-gray-400\">\n        Contextual spacing tokens that provide meaning and consistency across different use cases.\n      </p>\n\n      <div className=\"grid grid-cols-1 gap-8 lg:grid-cols-2\">\n        <SpacingGroup\n          title=\"Component Spacing\"\n          spacings={semanticSpacing.component}\n          description=\"Internal spacing within components like buttons, cards, and form elements\"\n        />\n\n        <SpacingGroup\n          title=\"Layout Spacing\"\n          spacings={semanticSpacing.layout}\n          description=\"Spacing between major layout elements and page sections\"\n        />\n\n        <SpacingGroup\n          title=\"Content Spacing\"\n          spacings={semanticSpacing.content}\n          description=\"Spacing for text content, paragraphs, and editorial layouts\"\n        />\n\n        <SpacingGroup\n          title=\"Form Spacing\"\n          spacings={semanticSpacing.form}\n          description=\"Specialized spacing for form fields, labels, and form groups\"\n        />\n      </div>\n\n      <div className=\"mt-8 rounded-lg border border-green-200 bg-green-50 p-4\">\n        <h3 className=\"mb-2 font-semibold text-green-900\">✨ Benefits of Semantic Spacing</h3>\n        <ul className=\"space-y-1 text-sm text-green-800\">\n          <li>\n            • <strong>Consistency</strong>: Same spacing patterns across similar components\n          </li>\n          <li>\n            • <strong>Maintainability</strong>: Easy to update spacing system-wide\n          </li>\n          <li>\n            • <strong>Clarity</strong>: Self-documenting code with meaningful names\n          </li>\n          <li>\n            • <strong>Flexibility</strong>: Easy to adjust for different contexts\n          </li>\n        </ul>\n      </div>\n    </div>\n  ),\n};\n\nexport const ComponentSpacing: Story = {\n  name: '🧩 Component Spacing',\n  render: () => (\n    <div className=\"p-6\">\n      <h1 className=\"mb-6 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n        Component Internal Spacing\n      </h1>\n      <p className=\"mb-8 text-gray-600 dark:text-gray-400\">\n        Examples of how spacing tokens are used within components for consistent internal rhythm.\n      </p>\n\n      <div className=\"space-y-8\">\n        {/* Extra Small Spacing */}\n        <SpacingDemo title=\"Extra Small (xs)\" spacing=\"4px\">\n          <div\n            className=\"inline-block rounded-sm border border-red-200 bg-red-100 text-red-900\"\n            style={{ padding: semanticSpacing.component.xs }}\n          >\n            <span className=\"text-sm font-medium\">Tight Badge</span>\n          </div>\n        </SpacingDemo>\n\n        {/* Small Spacing */}\n        <SpacingDemo title=\"Small (sm)\" spacing=\"8px\">\n          <button\n            className=\"rounded bg-blue-500 text-white transition-colors hover:bg-blue-600 dark:text-black\"\n            style={{ padding: semanticSpacing.component.sm }}\n          >\n            Small Button\n          </button>\n        </SpacingDemo>\n\n        {/* Medium Spacing */}\n        <SpacingDemo title=\"Medium (md)\" spacing=\"12px\">\n          <div\n            className=\"rounded-lg border border-gray-200 bg-white shadow-xs\"\n            style={{ padding: semanticSpacing.component.md }}\n          >\n            <h4 className=\"mb-2 font-semibold text-gray-900 dark:text-gray-100\">Card Title</h4>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              This card uses medium component spacing for comfortable internal padding.\n            </p>\n          </div>\n        </SpacingDemo>\n\n        {/* Large Spacing */}\n        <SpacingDemo title=\"Large (lg)\" spacing=\"16px\">\n          <div\n            className=\"rounded-lg border border-green-200 bg-green-50\"\n            style={{ padding: semanticSpacing.component.lg }}\n          >\n            <h4 className=\"mb-2 font-semibold text-green-900\">Success Alert</h4>\n            <p className=\"text-sm text-green-800\">\n              Alert components use large spacing for better readability and emphasis.\n            </p>\n          </div>\n        </SpacingDemo>\n\n        {/* Extra Large Spacing */}\n        <SpacingDemo title=\"Extra Large (xl)\" spacing=\"24px\">\n          <div\n            className=\"rounded-lg border border-blue-200 bg-blue-50 text-center\"\n            style={{ padding: semanticSpacing.component.xl }}\n          >\n            <h4 className=\"mb-2 font-semibold text-gray-900 dark:text-gray-100\">Hero Section</h4>\n            <p className=\"text-gray-800 dark:text-gray-200\">\n              Hero sections and prominent content areas use extra large spacing.\n            </p>\n          </div>\n        </SpacingDemo>\n      </div>\n    </div>\n  ),\n};\n\nexport const LayoutSpacing: Story = {\n  name: '🏗️ Layout Spacing',\n  render: () => (\n    <div className=\"p-6\">\n      <h1 className=\"mb-6 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n        Layout Element Spacing\n      </h1>\n      <p className=\"mb-8 text-gray-600 dark:text-gray-400\">\n        Spacing between major layout elements to create visual hierarchy and organization.\n      </p>\n\n      {/* Small Layout Spacing */}\n      <SpacingDemo title=\"Small Layout (sm)\" spacing=\"24px\">\n        <div className=\"space-y-6\">\n          <div className=\"rounded-lg border border-purple-200 bg-purple-100 p-4\">\n            <h4 className=\"font-semibold text-gray-900 dark:text-gray-100\">\n              Related Content Block 1\n            </h4>\n            <p className=\"text-sm text-gray-800 dark:text-gray-200\">\n              Content that is closely related\n            </p>\n          </div>\n          <div className=\"rounded-lg border border-purple-200 bg-purple-100 p-4\">\n            <h4 className=\"font-semibold text-gray-900 dark:text-gray-100\">\n              Related Content Block 2\n            </h4>\n            <p className=\"text-sm text-gray-800 dark:text-gray-200\">\n              Uses small layout spacing for grouping\n            </p>\n          </div>\n        </div>\n      </SpacingDemo>\n\n      {/* Medium Layout Spacing */}\n      <SpacingDemo title=\"Medium Layout (md)\" spacing=\"32px\">\n        <div style={{ display: 'flex', flexDirection: 'column', gap: semanticSpacing.layout.md }}>\n          <div className=\"rounded-lg border border-orange-200 bg-orange-100 p-4\">\n            <h4 className=\"font-semibold text-orange-900\">Section A</h4>\n            <p className=\"text-sm text-orange-800\">Standard section spacing</p>\n          </div>\n          <div className=\"rounded-lg border border-orange-200 bg-orange-100 p-4\">\n            <h4 className=\"font-semibold text-orange-900\">Section B</h4>\n            <p className=\"text-sm text-orange-800\">\n              Medium layout spacing creates clear separation\n            </p>\n          </div>\n        </div>\n      </SpacingDemo>\n\n      {/* Large Layout Spacing */}\n      <SpacingDemo title=\"Large Layout (lg)\" spacing=\"48px\">\n        <div style={{ display: 'flex', flexDirection: 'column', gap: semanticSpacing.layout.lg }}>\n          <div className=\"rounded-lg border border-teal-200 bg-teal-100 p-6\">\n            <h4 className=\"font-semibold text-teal-900\">Major Section 1</h4>\n            <p className=\"text-sm text-teal-800\">\n              Important content areas with prominent separation\n            </p>\n          </div>\n          <div className=\"rounded-lg border border-teal-200 bg-teal-100 p-6\">\n            <h4 className=\"font-semibold text-teal-900\">Major Section 2</h4>\n            <p className=\"text-sm text-teal-800\">Large layout spacing for visual hierarchy</p>\n          </div>\n        </div>\n      </SpacingDemo>\n    </div>\n  ),\n};\n\nexport const FormSpacing: Story = {\n  name: '📋 Form Spacing',\n  render: () => (\n    <div className=\"p-6\">\n      <h1 className=\"mb-6 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n        Form Element Spacing\n      </h1>\n      <p className=\"mb-8 text-gray-600 dark:text-gray-400\">\n        Specialized spacing tokens for form layouts, ensuring optimal usability and visual flow.\n      </p>\n\n      <SpacingDemo title=\"Form Spacing Example\" spacing=\"Various form tokens\">\n        <div className=\"max-w-md\">\n          {/* Form Group 1 */}\n          <div style={{ marginBottom: semanticSpacing.form.groupGap }}>\n            <h3 className=\"mb-4 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n              Personal Information\n            </h3>\n\n            <div style={{ marginBottom: semanticSpacing.form.fieldGap }}>\n              <label\n                className=\"block text-sm font-medium text-gray-900 dark:text-gray-100\"\n                style={{ marginBottom: semanticSpacing.form.labelGap }}\n              >\n                First Name *\n              </label>\n              <input\n                type=\"text\"\n                className=\"w-full rounded-md border border-gray-300 px-3 py-2\"\n                placeholder=\"Enter first name\"\n              />\n              <p\n                className=\"text-xs text-gray-500 dark:text-gray-500\"\n                style={{ marginTop: semanticSpacing.form.helpGap }}\n              >\n                As written on your birth certificate\n              </p>\n            </div>\n\n            <div style={{ marginBottom: semanticSpacing.form.fieldGap }}>\n              <label\n                className=\"block text-sm font-medium text-gray-900 dark:text-gray-100\"\n                style={{ marginBottom: semanticSpacing.form.labelGap }}\n              >\n                Last Name *\n              </label>\n              <input\n                type=\"text\"\n                className=\"w-full rounded-md border border-gray-300 px-3 py-2\"\n                placeholder=\"Enter last name\"\n              />\n            </div>\n          </div>\n\n          {/* Form Group 2 */}\n          <div style={{ marginBottom: semanticSpacing.form.groupGap }}>\n            <h3 className=\"mb-4 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n              Contact Information\n            </h3>\n\n            <div style={{ marginBottom: semanticSpacing.form.fieldGap }}>\n              <label\n                className=\"block text-sm font-medium text-gray-900 dark:text-gray-100\"\n                style={{ marginBottom: semanticSpacing.form.labelGap }}\n              >\n                Email Address\n              </label>\n              <input\n                type=\"email\"\n                className=\"w-full rounded-md border border-gray-300 px-3 py-2\"\n                placeholder=\"your.email@example.com\"\n              />\n            </div>\n          </div>\n\n          {/* Buttons */}\n          <div style={{ display: 'flex', gap: semanticSpacing.form.buttonGap }}>\n            <button className=\"rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 dark:text-black\">\n              Submit\n            </button>\n            <button className=\"rounded-md border border-gray-300 px-4 py-2 text-gray-700 hover:bg-gray-50 dark:text-gray-300\">\n              Cancel\n            </button>\n          </div>\n        </div>\n      </SpacingDemo>\n\n      <div className=\"mt-6 rounded-lg border border-yellow-200 bg-yellow-50 p-4\">\n        <h3 className=\"mb-2 font-semibold text-yellow-900\">📋 Form Spacing Breakdown</h3>\n        <ul className=\"space-y-1 text-sm text-yellow-800\">\n          <li>\n            • <strong>fieldGap (16px)</strong>: Space between form fields for clear separation\n          </li>\n          <li>\n            • <strong>groupGap (32px)</strong>: Space between form sections/groups\n          </li>\n          <li>\n            • <strong>labelGap (4px)</strong>: Tight space between label and input\n          </li>\n          <li>\n            • <strong>helpGap (4px)</strong>: Tight space between input and help text\n          </li>\n          <li>\n            • <strong>buttonGap (12px)</strong>: Comfortable space between action buttons\n          </li>\n        </ul>\n      </div>\n    </div>\n  ),\n};\n\nexport const GridSystem: Story = {\n  name: '🏃 4px Grid System',\n  render: () => (\n    <div className=\"p-6\">\n      <h1 className=\"mb-6 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n        4px Base Grid System\n      </h1>\n      <p className=\"mb-8 text-gray-600 dark:text-gray-400\">\n        All spacing values are built on a 4px base grid, ensuring consistent alignment and\n        pixel-perfect layouts across all screen densities.\n      </p>\n\n      <div className=\"space-y-8\">\n        {/* Grid Visualization */}\n        <div className=\"rounded-lg border border-gray-200 bg-white p-6\">\n          <h3 className=\"mb-4 font-semibold text-gray-900 dark:text-gray-100 dark:text-gray-900\">\n            Grid Visualization\n          </h3>\n          <div className=\"relative h-48 rounded-sm border border-gray-300\">\n            {/* 4px Grid Background */}\n            <div\n              className=\"absolute inset-0 opacity-20\"\n              style={{\n                backgroundImage: `\n                  linear-gradient(to right, #3b82f6 1px, transparent 1px),\n                  linear-gradient(to bottom, #3b82f6 1px, transparent 1px)\n                `,\n                backgroundSize: '4px 4px',\n              }}\n            />\n\n            {/* Example Elements */}\n            <div className=\"relative z-10 flex h-full items-center gap-8 p-4\">\n              <div className=\"rounded bg-blue-500 px-4 py-2 text-sm text-white dark:text-black\">\n                16px padding\n                <br />\n                <span className=\"text-xs opacity-75\">(4 × 4px)</span>\n              </div>\n\n              <div className=\"rounded bg-green-500 px-6 py-3 text-sm text-white dark:text-black\">\n                24px padding\n                <br />\n                <span className=\"text-xs opacity-75\">(6 × 4px)</span>\n              </div>\n\n              <div className=\"rounded bg-purple-500 px-8 py-4 text-sm text-white dark:text-black\">\n                32px padding\n                <br />\n                <span className=\"text-xs opacity-75\">(8 × 4px)</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Benefits */}\n        <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n          <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4\">\n            <h4 className=\"mb-2 font-semibold text-gray-900 dark:text-gray-100\">🎯 Benefits</h4>\n            <ul className=\"space-y-1 text-sm text-gray-800 dark:text-gray-200\">\n              <li>• Pixel-perfect alignment on all screen densities</li>\n              <li>• Consistent rhythm across all components</li>\n              <li>• Easy mental math for designers and developers</li>\n              <li>• Scales well with responsive design</li>\n            </ul>\n          </div>\n\n          <div className=\"rounded-lg border border-green-200 bg-green-50 p-4\">\n            <h4 className=\"mb-2 font-semibold text-green-900\">📐 Implementation</h4>\n            <ul className=\"space-y-1 text-sm text-green-800\">\n              <li>• All spacing tokens are multiples of 4px</li>\n              <li>• Works with 1x, 2x, and 3x pixel densities</li>\n              <li>• Compatible with 8px and 12px grid systems</li>\n              <li>• Supported by modern design tools</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  ),\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/design-system/tokens/Spacing/Spacing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/design-system/tokens/Spacing/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/design-system/tokens/Typography/Typography.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/design-system/tokens/Typography/Typography.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":228,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7018,7021],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7018,7021],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\n\n// =============================================================================\n// TYPOGRAPHY TOKEN DEFINITIONS\n// =============================================================================\n\nexport const typographyTokens = {\n  // Font Families\n  fontFamily: {\n    sans: ['Inter', 'system-ui', 'sans-serif'],\n    serif: ['Georgia', 'Times New Roman', 'serif'],\n    mono: ['JetBrains Mono', 'Consolas', 'Monaco', 'monospace'],\n    display: ['Montserrat', 'Inter', 'system-ui', 'sans-serif'],\n  },\n\n  // Font Sizes (rem values)\n  fontSize: {\n    xs: '0.75rem', // 12px\n    sm: '0.875rem', // 14px\n    base: '1rem', // 16px (base)\n    lg: '1.125rem', // 18px\n    xl: '1.25rem', // 20px\n    '2xl': '1.5rem', // 24px\n    '3xl': '1.875rem', // 30px\n    '4xl': '2.25rem', // 36px\n    '5xl': '3rem', // 48px\n    '6xl': '3.75rem', // 60px\n    '7xl': '4.5rem', // 72px\n    '8xl': '6rem', // 96px\n    '9xl': '8rem', // 128px\n  },\n\n  // Line Heights\n  lineHeight: {\n    none: '1',\n    tight: '1.25',\n    snug: '1.375',\n    normal: '1.5',\n    relaxed: '1.625',\n    loose: '2',\n  },\n\n  // Font Weights\n  fontWeight: {\n    thin: '100',\n    extralight: '200',\n    light: '300',\n    normal: '400',\n    medium: '500',\n    semibold: '600',\n    bold: '700',\n    extrabold: '800',\n    black: '900',\n  },\n\n  // Letter Spacing\n  letterSpacing: {\n    tighter: '-0.05em',\n    tight: '-0.025em',\n    normal: '0em',\n    wide: '0.025em',\n    wider: '0.05em',\n    widest: '0.1em',\n  },\n} as const;\n\n// =============================================================================\n// SEMANTIC TYPOGRAPHY SCALE\n// =============================================================================\n\nexport const typographyScale = {\n  // Display Typography (Hero sections, large headings)\n  display: {\n    '2xl': {\n      fontSize: typographyTokens.fontSize['7xl'],\n      lineHeight: typographyTokens.lineHeight.none,\n      fontWeight: typographyTokens.fontWeight.bold,\n      letterSpacing: typographyTokens.letterSpacing.tight,\n    },\n    xl: {\n      fontSize: typographyTokens.fontSize['6xl'],\n      lineHeight: typographyTokens.lineHeight.none,\n      fontWeight: typographyTokens.fontWeight.bold,\n      letterSpacing: typographyTokens.letterSpacing.tight,\n    },\n    lg: {\n      fontSize: typographyTokens.fontSize['5xl'],\n      lineHeight: typographyTokens.lineHeight.tight,\n      fontWeight: typographyTokens.fontWeight.bold,\n      letterSpacing: typographyTokens.letterSpacing.tight,\n    },\n    md: {\n      fontSize: typographyTokens.fontSize['4xl'],\n      lineHeight: typographyTokens.lineHeight.tight,\n      fontWeight: typographyTokens.fontWeight.bold,\n      letterSpacing: typographyTokens.letterSpacing.normal,\n    },\n    sm: {\n      fontSize: typographyTokens.fontSize['3xl'],\n      lineHeight: typographyTokens.lineHeight.tight,\n      fontWeight: typographyTokens.fontWeight.semibold,\n      letterSpacing: typographyTokens.letterSpacing.normal,\n    },\n  },\n\n  // Headings (H1-H6)\n  heading: {\n    h1: {\n      fontSize: typographyTokens.fontSize['4xl'],\n      lineHeight: typographyTokens.lineHeight.tight,\n      fontWeight: typographyTokens.fontWeight.bold,\n      letterSpacing: typographyTokens.letterSpacing.tight,\n    },\n    h2: {\n      fontSize: typographyTokens.fontSize['3xl'],\n      lineHeight: typographyTokens.lineHeight.tight,\n      fontWeight: typographyTokens.fontWeight.bold,\n      letterSpacing: typographyTokens.letterSpacing.tight,\n    },\n    h3: {\n      fontSize: typographyTokens.fontSize['2xl'],\n      lineHeight: typographyTokens.lineHeight.snug,\n      fontWeight: typographyTokens.fontWeight.semibold,\n      letterSpacing: typographyTokens.letterSpacing.normal,\n    },\n    h4: {\n      fontSize: typographyTokens.fontSize.xl,\n      lineHeight: typographyTokens.lineHeight.snug,\n      fontWeight: typographyTokens.fontWeight.semibold,\n      letterSpacing: typographyTokens.letterSpacing.normal,\n    },\n    h5: {\n      fontSize: typographyTokens.fontSize.lg,\n      lineHeight: typographyTokens.lineHeight.normal,\n      fontWeight: typographyTokens.fontWeight.medium,\n      letterSpacing: typographyTokens.letterSpacing.normal,\n    },\n    h6: {\n      fontSize: typographyTokens.fontSize.base,\n      lineHeight: typographyTokens.lineHeight.normal,\n      fontWeight: typographyTokens.fontWeight.medium,\n      letterSpacing: typographyTokens.letterSpacing.wide,\n    },\n  },\n\n  // Body Text\n  body: {\n    xl: {\n      fontSize: typographyTokens.fontSize.xl,\n      lineHeight: typographyTokens.lineHeight.relaxed,\n      fontWeight: typographyTokens.fontWeight.normal,\n    },\n    lg: {\n      fontSize: typographyTokens.fontSize.lg,\n      lineHeight: typographyTokens.lineHeight.relaxed,\n      fontWeight: typographyTokens.fontWeight.normal,\n    },\n    md: {\n      fontSize: typographyTokens.fontSize.base,\n      lineHeight: typographyTokens.lineHeight.normal,\n      fontWeight: typographyTokens.fontWeight.normal,\n    },\n    sm: {\n      fontSize: typographyTokens.fontSize.sm,\n      lineHeight: typographyTokens.lineHeight.normal,\n      fontWeight: typographyTokens.fontWeight.normal,\n    },\n    xs: {\n      fontSize: typographyTokens.fontSize.xs,\n      lineHeight: typographyTokens.lineHeight.normal,\n      fontWeight: typographyTokens.fontWeight.normal,\n    },\n  },\n\n  // Labels & Captions\n  label: {\n    lg: {\n      fontSize: typographyTokens.fontSize.base,\n      lineHeight: typographyTokens.lineHeight.normal,\n      fontWeight: typographyTokens.fontWeight.medium,\n      letterSpacing: typographyTokens.letterSpacing.normal,\n    },\n    md: {\n      fontSize: typographyTokens.fontSize.sm,\n      lineHeight: typographyTokens.lineHeight.normal,\n      fontWeight: typographyTokens.fontWeight.medium,\n      letterSpacing: typographyTokens.letterSpacing.normal,\n    },\n    sm: {\n      fontSize: typographyTokens.fontSize.xs,\n      lineHeight: typographyTokens.lineHeight.normal,\n      fontWeight: typographyTokens.fontWeight.medium,\n      letterSpacing: typographyTokens.letterSpacing.wide,\n    },\n  },\n\n  // Code Typography\n  code: {\n    lg: {\n      fontSize: typographyTokens.fontSize.base,\n      lineHeight: typographyTokens.lineHeight.relaxed,\n      fontWeight: typographyTokens.fontWeight.normal,\n      fontFamily: typographyTokens.fontFamily.mono,\n    },\n    md: {\n      fontSize: typographyTokens.fontSize.sm,\n      lineHeight: typographyTokens.lineHeight.normal,\n      fontWeight: typographyTokens.fontWeight.normal,\n      fontFamily: typographyTokens.fontFamily.mono,\n    },\n    sm: {\n      fontSize: typographyTokens.fontSize.xs,\n      lineHeight: typographyTokens.lineHeight.normal,\n      fontWeight: typographyTokens.fontWeight.normal,\n      fontFamily: typographyTokens.fontFamily.mono,\n    },\n  },\n} as const;\n\n// =============================================================================\n// TYPOGRAPHY COMPONENTS\n// =============================================================================\n\ninterface TypographyExampleProps {\n  title: string;\n  styles: Record<string, any>;\n  sampleText?: string;\n}\n\nexport const TypographyExample: React.FC<TypographyExampleProps> = ({\n  title,\n  styles,\n  sampleText = 'The quick brown fox jumps over the lazy dog',\n}) => (\n  <div className=\"mb-8 rounded-lg border border-gray-200 p-6\">\n    <h3 className=\"mb-4 text-lg font-semibold text-gray-900 dark:text-gray-100\">{title}</h3>\n    <div className=\"space-y-4\">\n      {Object.entries(styles).map(([size, style]) => (\n        <div key={size} className=\"flex items-start gap-6\">\n          <div className=\"w-20 shrink-0\">\n            <span className=\"font-mono text-sm text-gray-500 dark:text-gray-500\">{size}</span>\n          </div>\n          <div className=\"min-w-0 flex-1\">\n            <div className=\"mb-2 text-gray-900 dark:text-gray-100\" style={style}>\n              {sampleText}\n            </div>\n            <div className=\"font-mono text-xs text-gray-500 dark:text-gray-500\">\n              {style.fontSize} • {style.lineHeight} • {style.fontWeight}\n              {style.letterSpacing && ` • ${style.letterSpacing}`}\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\ninterface FontFamilyShowcaseProps {\n  title: string;\n  fontFamily: readonly string[];\n  sampleText?: string;\n}\n\nexport const FontFamilyShowcase: React.FC<FontFamilyShowcaseProps> = ({\n  title,\n  fontFamily,\n  sampleText = 'The quick brown fox jumps over the lazy dog 0123456789',\n}) => (\n  <div className=\"mb-6 rounded-lg border border-gray-200 p-4\">\n    <h4 className=\"text-md mb-3 font-semibold text-gray-900 dark:text-gray-100\">{title}</h4>\n    <div\n      className=\"mb-2 text-2xl text-gray-900 dark:text-gray-100\"\n      style={{ fontFamily: fontFamily.join(', ') }}\n    >\n      {sampleText}\n    </div>\n    <div className=\"font-mono text-sm text-gray-500 dark:text-gray-500\">\n      {fontFamily.join(', ')}\n    </div>\n  </div>\n);\n\n// =============================================================================\n// MAIN TYPOGRAPHY COMPONENT\n// =============================================================================\n\nconst Typography: React.FC = () => {\n  return (\n    <div className=\"mx-auto max-w-6xl p-6\">\n      <div className=\"mb-8\">\n        <h1 className=\"mb-2 text-3xl font-bold text-gray-900 dark:text-gray-100\">\n          Design Tokens: Typography\n        </h1>\n        <p className=\"max-w-2xl text-gray-600 dark:text-gray-400\">\n          Typography tokens for the Citizenly design system. These tokens ensure consistent,\n          readable, and accessible text across all government applications.\n        </p>\n      </div>\n\n      {/* Font Families */}\n      <div className=\"mb-12\">\n        <h2 className=\"mb-6 text-2xl font-semibold text-gray-900 dark:text-gray-100\">\n          Font Families\n        </h2>\n        <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n          {Object.entries(typographyTokens.fontFamily).map(([name, fonts]) => (\n            <FontFamilyShowcase\n              key={name}\n              title={name.charAt(0).toUpperCase() + name.slice(1)}\n              fontFamily={fonts}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Display Typography */}\n      <TypographyExample\n        title=\"Display Typography\"\n        styles={typographyScale.display}\n        sampleText=\"Citizenly Government Portal\"\n      />\n\n      {/* Headings */}\n      <TypographyExample\n        title=\"Headings (H1-H6)\"\n        styles={typographyScale.heading}\n        sampleText=\"Barangay Management System\"\n      />\n\n      {/* Body Text */}\n      <TypographyExample\n        title=\"Body Text\"\n        styles={typographyScale.body}\n        sampleText=\"This is body text used for paragraphs, descriptions, and general content throughout the application.\"\n      />\n\n      {/* Labels */}\n      <TypographyExample\n        title=\"Labels & Form Elements\"\n        styles={typographyScale.label}\n        sampleText=\"Form Label Text\"\n      />\n\n      {/* Code Typography */}\n      <TypographyExample\n        title=\"Code & Monospace\"\n        styles={typographyScale.code}\n        sampleText=\"const citizenly = 'government-portal';\"\n      />\n\n      {/* Usage Guidelines */}\n      <div className=\"mt-12 rounded-lg border border-blue-200 bg-blue-50 p-6\">\n        <h3 className=\"mb-4 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          📝 Typography Guidelines\n        </h3>\n        <div className=\"grid grid-cols-1 gap-6 text-sm md:grid-cols-2\">\n          <div>\n            <h4 className=\"mb-2 font-semibold text-gray-900 dark:text-gray-100\">Hierarchy</h4>\n            <ul className=\"space-y-1 text-gray-800 dark:text-gray-200\">\n              <li>• Use display typography for hero sections</li>\n              <li>• Follow H1-H6 hierarchy for content structure</li>\n              <li>• Limit to 3-4 text sizes per screen</li>\n              <li>• Maintain consistent vertical rhythm</li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"mb-2 font-semibold text-gray-900 dark:text-gray-100\">Accessibility</h4>\n            <ul className=\"space-y-1 text-gray-800 dark:text-gray-200\">\n              <li>• Minimum 16px font size for body text</li>\n              <li>• Line height of 1.5 for readability</li>\n              <li>• Adequate color contrast ratios</li>\n              <li>• Scalable text for zoom up to 200%</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      {/* CSS Classes Reference */}\n      <div className=\"mt-8 rounded-lg border border-gray-200 bg-gray-50 p-6\">\n        <h3 className=\"mb-4 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          💻 Usage in Code\n        </h3>\n        <div className=\"space-y-4\">\n          <div>\n            <h4 className=\"mb-2 font-medium text-gray-900 dark:text-gray-100\">\n              Tailwind CSS Classes\n            </h4>\n            <pre className=\"overflow-x-auto rounded-sm border bg-white p-3 text-sm text-gray-700 dark:text-gray-300 dark:text-gray-700\">\n              {`<!-- Display Typography -->\n<h1 class=\"text-4xl font-bold leading-tight tracking-tight\">\n\n<!-- Headings -->  \n<h2 class=\"text-2xl font-semibold leading-snug\">\n<h3 class=\"text-xl font-medium leading-normal\">\n\n<!-- Body Text -->\n<p class=\"text-base leading-normal\">\n<p class=\"text-sm leading-normal\">\n\n<!-- Labels -->\n<label class=\"text-sm font-medium tracking-wide\">`}\n            </pre>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Typography;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/design-system/tokens/Typography/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/design-system/tokens/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/design-system/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/accessibility/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/accessibility/useFieldAccessibility.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'label' is assigned a value but never used. Allowed unused args must match /^_/u.","line":89,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":8}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Accessibility hook for form field components\n * Standardizes ARIA patterns and ID generation for form elements\n */\nimport { useMemo } from 'react';\n\nimport { generateId } from '@/utils/id-generators';\n\nexport interface FieldAccessibilityOptions {\n  /** Base identifier for the field */\n  baseId?: string;\n  /** Whether the field has an error */\n  hasError?: boolean;\n  /** Whether the field has helper text */\n  hasHelperText?: boolean;\n  /** Whether the field is required */\n  required?: boolean;\n  /** Custom label */\n  label?: string;\n}\n\nexport interface FieldAccessibilityIds {\n  /** ID for the field input element */\n  field: string;\n  /** ID for the field label */\n  label: string;\n  /** ID for helper text */\n  helper: string;\n  /** ID for error message */\n  error: string;\n}\n\nexport interface FieldAccessibilityProps {\n  /** Generated IDs for field elements */\n  ids: FieldAccessibilityIds;\n  /** aria-describedby attribute value */\n  ariaDescribedBy?: string;\n  /** aria-labelledby attribute value */\n  ariaLabelledBy: string;\n  /** aria-invalid attribute value */\n  ariaInvalid: boolean | 'false' | 'true';\n  /** aria-required attribute value */\n  ariaRequired: boolean | 'false' | 'true';\n}\n\n/**\n * Hook for standardizing field accessibility patterns\n *\n * @example\n * ```tsx\n * function MyInput({ label, error, helperText, required, ...props }) {\n *   const accessibility = useFieldAccessibility({\n *     baseId: props.id || 'my-input',\n *     hasError: !!error,\n *     hasHelperText: !!helperText,\n *     required,\n *     label\n *   });\n *\n *   return (\n *     <div>\n *       <label id={accessibility.ids.label}>\n *         {label}\n *       </label>\n *       <input\n *         id={accessibility.ids.field}\n *         aria-labelledby={accessibility.ariaLabelledBy}\n *         aria-describedby={accessibility.ariaDescribedBy}\n *         aria-invalid={accessibility.ariaInvalid}\n *         aria-required={accessibility.ariaRequired}\n *         {...props}\n *       />\n *       {helperText && (\n *         <div id={accessibility.ids.helper}>{helperText}</div>\n *       )}\n *       {error && (\n *         <div id={accessibility.ids.error}>{error}</div>\n *       )}\n *     </div>\n *   );\n * }\n * ```\n */\nexport function useFieldAccessibility({\n  baseId,\n  hasError = false,\n  hasHelperText = false,\n  required = false,\n  label,\n}: FieldAccessibilityOptions = {}): FieldAccessibilityProps {\n  const ids = useMemo(() => {\n    const fieldId = baseId || generateId('field');\n    return {\n      field: fieldId,\n      label: `${fieldId}-label`,\n      helper: `${fieldId}-helper`,\n      error: `${fieldId}-error`,\n    };\n  }, [baseId]);\n\n  const ariaDescribedBy = useMemo(() => {\n    const describedByIds: string[] = [];\n\n    if (hasHelperText) {\n      describedByIds.push(ids.helper);\n    }\n\n    if (hasError) {\n      describedByIds.push(ids.error);\n    }\n\n    return describedByIds.length > 0 ? describedByIds.join(' ') : undefined;\n  }, [hasHelperText, hasError, ids.helper, ids.error]);\n\n  return {\n    ids,\n    ariaDescribedBy,\n    ariaLabelledBy: ids.label,\n    ariaInvalid: hasError,\n    ariaRequired: required,\n  };\n}\n\n/**\n * Hook for field groups/fieldsets accessibility\n */\nexport function useFieldGroupAccessibility({\n  baseId,\n  hasError = false,\n  required = false,\n}: Pick<FieldAccessibilityOptions, 'baseId' | 'hasError' | 'required'> = {}) {\n  const ids = useMemo(() => {\n    const groupId = baseId || generateId('fieldgroup');\n    return {\n      group: groupId,\n      legend: `${groupId}-legend`,\n      error: `${groupId}-error`,\n    };\n  }, [baseId]);\n\n  const ariaDescribedBy = useMemo(() => {\n    return hasError ? ids.error : undefined;\n  }, [hasError, ids.error]);\n\n  return {\n    ids,\n    ariaDescribedBy,\n    ariaInvalid: hasError,\n    ariaRequired: required,\n    role: 'group' as const,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/api/useGeographicData.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2520,2523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2520,2523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":154,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3675,3678],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3675,3678],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":199,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4842,4845],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4842,4845],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":243,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5973,5976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5973,5976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":290,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":290,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7295,7298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7295,7298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":292,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":292,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7399,7402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7399,7402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":337,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":337,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8608,8611],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8608,8611],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":386,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":386,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9961,9964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9961,9964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Geographic Data Hook\n * Manages PSGC geographic location data with proper caching and state management\n */\n\nimport { useState, useEffect, useCallback } from 'react';\n\nimport { supabase } from '@/lib/data/supabase';\n\nexport interface GeographicOption {\n  value: string;\n  label: string;\n}\n\ninterface GeographicData {\n  regions: GeographicOption[];\n  provinces: GeographicOption[];\n  cities: GeographicOption[];\n  barangays: GeographicOption[];\n  streets: GeographicOption[];\n  subdivisions: GeographicOption[];\n}\n\ninterface GeographicState extends GeographicData {\n  loading: {\n    regions: boolean;\n    provinces: boolean;\n    cities: boolean;\n    barangays: boolean;\n    streets: boolean;\n    subdivisions: boolean;\n  };\n  error: {\n    regions: string | null;\n    provinces: string | null;\n    cities: string | null;\n    barangays: string | null;\n    streets: string | null;\n    subdivisions: string | null;\n  };\n}\n\nexport function useGeographicData() {\n  const [state, setState] = useState<GeographicState>({\n    regions: [],\n    provinces: [],\n    cities: [],\n    barangays: [],\n    streets: [],\n    subdivisions: [],\n    loading: {\n      regions: false,\n      provinces: false,\n      cities: false,\n      barangays: false,\n      streets: false,\n      subdivisions: false,\n    },\n    error: {\n      regions: null,\n      provinces: null,\n      cities: null,\n      barangays: null,\n      streets: null,\n      subdivisions: null,\n    },\n  });\n\n  /**\n   * Generic API call function with auth token\n   */\n  const fetchWithAuth = useCallback(async (url: string) => {\n    const {\n      data: { session },\n    } = await supabase.auth.getSession();\n\n    if (!session?.access_token) {\n      throw new Error('No authentication token available');\n    }\n\n    const response = await fetch(url, {\n      headers: {\n        Authorization: `Bearer ${session.access_token}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || `HTTP ${response.status}`);\n    }\n\n    const result = await response.json();\n    return result.data || [];\n  }, []);\n\n  /**\n   * Load regions\n   */\n  const loadRegions = useCallback(async () => {\n    setState(prev => ({\n      ...prev,\n      loading: { ...prev.loading, regions: true },\n      error: { ...prev.error, regions: null },\n    }));\n\n    try {\n      const data = await fetchWithAuth('/api/addresses/regions');\n\n      const options: GeographicOption[] = data.map((region: any) => ({\n        value: region.code,\n        label: region.name,\n      }));\n\n      setState(prev => ({\n        ...prev,\n        regions: options,\n        loading: { ...prev.loading, regions: false },\n      }));\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        loading: { ...prev.loading, regions: false },\n        error: {\n          ...prev.error,\n          regions: error instanceof Error ? error.message : 'Failed to load regions',\n        },\n      }));\n    }\n  }, [fetchWithAuth]);\n\n  /**\n   * Load provinces by region\n   */\n  const loadProvinces = useCallback(\n    async (regionCode: string) => {\n      if (!regionCode) {\n        setState(prev => ({ ...prev, provinces: [], cities: [], barangays: [] }));\n        return;\n      }\n\n      setState(prev => ({\n        ...prev,\n        loading: { ...prev.loading, provinces: true },\n        error: { ...prev.error, provinces: null },\n        provinces: [],\n        cities: [],\n        barangays: [],\n      }));\n\n      try {\n        const data = await fetchWithAuth(`/api/addresses/provinces?region=${regionCode}`);\n\n        const options: GeographicOption[] = data.map((province: any) => ({\n          value: province.code,\n          label: province.name,\n        }));\n\n        setState(prev => ({\n          ...prev,\n          provinces: options,\n          loading: { ...prev.loading, provinces: false },\n        }));\n      } catch (error) {\n        setState(prev => ({\n          ...prev,\n          loading: { ...prev.loading, provinces: false },\n          error: {\n            ...prev.error,\n            provinces: error instanceof Error ? error.message : 'Failed to load provinces',\n          },\n        }));\n      }\n    },\n    [fetchWithAuth]\n  );\n\n  /**\n   * Load cities by province\n   */\n  const loadCities = useCallback(\n    async (provinceCode: string) => {\n      if (!provinceCode) {\n        setState(prev => ({ ...prev, cities: [], barangays: [] }));\n        return;\n      }\n\n      setState(prev => ({\n        ...prev,\n        loading: { ...prev.loading, cities: true },\n        error: { ...prev.error, cities: null },\n        cities: [],\n        barangays: [],\n      }));\n\n      try {\n        const data = await fetchWithAuth(`/api/addresses/cities?province=${provinceCode}`);\n\n        const options: GeographicOption[] = data.map((city: any) => ({\n          value: city.code,\n          label: `${city.name} (${city.type})`,\n        }));\n\n        setState(prev => ({\n          ...prev,\n          cities: options,\n          loading: { ...prev.loading, cities: false },\n        }));\n      } catch (error) {\n        setState(prev => ({\n          ...prev,\n          loading: { ...prev.loading, cities: false },\n          error: {\n            ...prev.error,\n            cities: error instanceof Error ? error.message : 'Failed to load cities',\n          },\n        }));\n      }\n    },\n    [fetchWithAuth]\n  );\n\n  /**\n   * Load barangays by city\n   */\n  const loadBarangays = useCallback(\n    async (cityCode: string) => {\n      if (!cityCode) {\n        setState(prev => ({ ...prev, barangays: [] }));\n        return;\n      }\n\n      setState(prev => ({\n        ...prev,\n        loading: { ...prev.loading, barangays: true },\n        error: { ...prev.error, barangays: null },\n        barangays: [],\n      }));\n\n      try {\n        const data = await fetchWithAuth(`/api/addresses/barangays?city=${cityCode}`);\n\n        const options: GeographicOption[] = data.map((barangay: any) => ({\n          value: barangay.code,\n          label: barangay.name,\n        }));\n\n        setState(prev => ({\n          ...prev,\n          barangays: options,\n          loading: { ...prev.loading, barangays: false },\n        }));\n      } catch (error) {\n        setState(prev => ({\n          ...prev,\n          loading: { ...prev.loading, barangays: false },\n          error: {\n            ...prev.error,\n            barangays: error instanceof Error ? error.message : 'Failed to load barangays',\n          },\n        }));\n      }\n    },\n    [fetchWithAuth]\n  );\n\n  /**\n   * Load independent cities for regions without provinces (like NCR)\n   */\n  const loadIndependentCities = useCallback(\n    async (regionCode: string) => {\n      if (!regionCode) {\n        setState(prev => ({ ...prev, cities: [], barangays: [] }));\n        return;\n      }\n\n      setState(prev => ({\n        ...prev,\n        loading: { ...prev.loading, cities: true },\n        error: { ...prev.error, cities: null },\n        cities: [],\n        barangays: [],\n      }));\n\n      try {\n        // For regions like NCR that don't have provinces, get cities directly\n        const data = await fetchWithAuth(`/api/addresses/cities`);\n\n        // Filter for independent cities (no province_code)\n        const independentCities = data.filter((city: any) => !city.province_code);\n\n        const options: GeographicOption[] = independentCities.map((city: any) => ({\n          value: city.code,\n          label: `${city.name} (${city.type})`,\n        }));\n\n        setState(prev => ({\n          ...prev,\n          cities: options,\n          loading: { ...prev.loading, cities: false },\n        }));\n      } catch (error) {\n        setState(prev => ({\n          ...prev,\n          loading: { ...prev.loading, cities: false },\n          error: {\n            ...prev.error,\n            cities: error instanceof Error ? error.message : 'Failed to load cities',\n          },\n        }));\n      }\n    },\n    [fetchWithAuth]\n  );\n\n  /**\n   * Load subdivisions by barangay\n   */\n  const loadSubdivisions = useCallback(\n    async (barangayCode: string) => {\n      if (!barangayCode) {\n        setState(prev => ({ ...prev, subdivisions: [], streets: [] }));\n        return;\n      }\n\n      setState(prev => ({\n        ...prev,\n        loading: { ...prev.loading, subdivisions: true },\n        error: { ...prev.error, subdivisions: null },\n        subdivisions: [],\n        streets: [],\n      }));\n\n      try {\n        const data = await fetchWithAuth(`/api/addresses/subdivisions?barangay=${barangayCode}`);\n\n        const options: GeographicOption[] = data.map((subdivision: any) => ({\n          value: subdivision.id,\n          label: `${subdivision.name} (${subdivision.type})`,\n        }));\n\n        setState(prev => ({\n          ...prev,\n          subdivisions: options,\n          loading: { ...prev.loading, subdivisions: false },\n        }));\n      } catch (error) {\n        setState(prev => ({\n          ...prev,\n          loading: { ...prev.loading, subdivisions: false },\n          error: {\n            ...prev.error,\n            subdivisions: error instanceof Error ? error.message : 'Failed to load subdivisions',\n          },\n        }));\n      }\n    },\n    [fetchWithAuth]\n  );\n\n  /**\n   * Load streets by barangay (and optionally by subdivision)\n   */\n  const loadStreets = useCallback(\n    async (barangayCode: string, subdivisionId?: string) => {\n      if (!barangayCode) {\n        setState(prev => ({ ...prev, streets: [] }));\n        return;\n      }\n\n      setState(prev => ({\n        ...prev,\n        loading: { ...prev.loading, streets: true },\n        error: { ...prev.error, streets: null },\n        streets: [],\n      }));\n\n      try {\n        let url = `/api/addresses/streets?barangay=${barangayCode}`;\n        if (subdivisionId) {\n          url += `&subdivision=${subdivisionId}`;\n        }\n\n        const data = await fetchWithAuth(url);\n\n        const options: GeographicOption[] = data.map((street: any) => ({\n          value: street.id,\n          label: street.name,\n        }));\n\n        setState(prev => ({\n          ...prev,\n          streets: options,\n          loading: { ...prev.loading, streets: false },\n        }));\n      } catch (error) {\n        setState(prev => ({\n          ...prev,\n          loading: { ...prev.loading, streets: false },\n          error: {\n            ...prev.error,\n            streets: error instanceof Error ? error.message : 'Failed to load streets',\n          },\n        }));\n      }\n    },\n    [fetchWithAuth]\n  );\n\n  /**\n   * Reset all geographic data\n   */\n  const resetAll = useCallback(() => {\n    setState({\n      regions: [],\n      provinces: [],\n      cities: [],\n      barangays: [],\n      streets: [],\n      subdivisions: [],\n      loading: {\n        regions: false,\n        provinces: false,\n        cities: false,\n        barangays: false,\n        streets: false,\n        subdivisions: false,\n      },\n      error: {\n        regions: null,\n        provinces: null,\n        cities: null,\n        barangays: null,\n        streets: null,\n        subdivisions: null,\n      },\n    });\n  }, []);\n\n  /**\n   * Auto-load regions on mount\n   */\n  useEffect(() => {\n    loadRegions();\n  }, [loadRegions]);\n\n  return {\n    // Data\n    regions: state.regions,\n    provinces: state.provinces,\n    cities: state.cities,\n    barangays: state.barangays,\n    streets: state.streets,\n    subdivisions: state.subdivisions,\n\n    // Loading states\n    loading: state.loading,\n\n    // Error states\n    error: state.error,\n\n    // Actions\n    loadRegions,\n    loadProvinces,\n    loadCities,\n    loadBarangays,\n    loadIndependentCities,\n    loadSubdivisions,\n    loadStreets,\n    resetAll,\n\n    // Computed states\n    isLoading: Object.values(state.loading).some(Boolean),\n    hasError: Object.values(state.error).some(Boolean),\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/command-menu/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/command-menu/useCommandMenu.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'close' and 'executeCommand'. Either include them or remove the dependency array.","line":91,"column":6,"nodeType":"ArrayExpression","endLine":91,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, filteredItems, selectedIndex, close, executeCommand]","fix":{"range":[2852,2890],"text":"[isOpen, filteredItems, selectedIndex, close, executeCommand]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useRouter } from 'next/navigation';\nimport { useState, useEffect, useCallback, useMemo } from 'react';\n\nimport type { CommandMenuItemType as CommandMenuItem } from '@/components';\nimport { useCommandMenuShortcut, createDropdownKeyHandler } from '@/lib/keyboardUtils';\n\ninterface UseCommandMenuProps {\n  items: CommandMenuItem[];\n  maxResults?: number;\n}\n\nexport function useCommandMenu({ items, maxResults = 10 }: UseCommandMenuProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const router = useRouter();\n\n  // Filter and search items\n  const filteredItems = useMemo(() => {\n    if (!searchQuery.trim()) {\n      // Show recent items first when no search query\n      const recentItems = items.filter(item => item.recent).slice(0, 5);\n      const otherItems = items\n        .filter(item => !item.recent)\n        .slice(0, maxResults - recentItems.length);\n      return [...recentItems, ...otherItems];\n    }\n\n    const query = searchQuery.toLowerCase();\n    const scored = items\n      .map(item => {\n        let score = 0;\n        const label = item.label?.toLowerCase() || '';\n        const description = item.description?.toLowerCase() || '';\n        const keywords = item.keywords?.join(' ').toLowerCase() || '';\n\n        // Exact match gets highest score\n        if (label === query) score += 100;\n        else if (label.startsWith(query)) score += 50;\n        else if (label.includes(query)) score += 25;\n\n        // Description matches\n        if (description.includes(query)) score += 15;\n\n        // Keywords matches\n        if (keywords.includes(query)) score += 10;\n\n        return { item, score };\n      })\n      .filter(({ score }) => score > 0)\n      .sort((a, b) => b.score - a.score)\n      .slice(0, maxResults)\n      .map(({ item }) => item);\n\n    return scored;\n  }, [items, searchQuery, maxResults]);\n\n  // Reset selected index when filtered items change\n  useEffect(() => {\n    setSelectedIndex(0);\n  }, [filteredItems]);\n\n  // Global keyboard shortcut for opening command menu\n  useCommandMenuShortcut(() => setIsOpen(true), true);\n\n  // Command menu navigation when open\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const handleMenuKeyDown = createDropdownKeyHandler({\n      isOpen: true,\n      selectedIndex,\n      itemCount: filteredItems.length,\n      onClose: close,\n      onSelect: (index: number) => {\n        if (filteredItems[index]) {\n          executeCommand(filteredItems[index]);\n        }\n      },\n      onNavigate: setSelectedIndex\n    });\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      handleMenuKeyDown(event);\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, filteredItems, selectedIndex]);\n\n  const open = useCallback(() => {\n    setIsOpen(true);\n    setSearchQuery('');\n    setSelectedIndex(0);\n  }, []);\n\n  const close = useCallback(() => {\n    setIsOpen(false);\n    setSearchQuery('');\n    setSelectedIndex(0);\n  }, []);\n\n  const toggle = useCallback(() => {\n    if (isOpen) {\n      close();\n    } else {\n      open();\n    }\n  }, [isOpen, open, close]);\n\n  const executeCommand = useCallback(\n    (item: CommandMenuItem) => {\n      if (item.disabled) return;\n\n      // Close menu first\n      close();\n\n      // Execute the command\n      if (item.onClick) {\n        item.onClick();\n      } else if (item.href) {\n        router.push(item.href);\n      }\n\n      // Mark as recent (this would typically be handled by a context or store)\n      // For now, we'll just trigger the action\n    },\n    [close, router]\n  );\n\n  return {\n    isOpen,\n    open,\n    close,\n    toggle,\n    searchQuery,\n    setSearchQuery,\n    filteredItems,\n    selectedIndex,\n    setSelectedIndex,\n    executeCommand,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/command-menu/useCommandMenuActions.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":77,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":93,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":93,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":108,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Command Menu Actions Hook\n *\n * @description Handles command execution and API actions for command menu.\n * Extracted from useCommandMenuWithApi for better maintainability.\n */\n\n'use client';\n\nimport { useRouter } from 'next/navigation';\nimport { useCallback } from 'react';\nimport { toast } from 'react-hot-toast';\n\nimport type { CommandMenuItemType as CommandMenuItem } from '@/components';\nimport { useAsyncErrorBoundary } from '@/hooks/utilities/useAsyncErrorBoundary';\nimport {\n  exportData,\n  backupData,\n  createResident,\n  createHousehold,\n  findSeniorCitizens,\n  findPWDs,\n  findSoloParents,\n  generateCertificate,\n  generateReport,\n  trackCommandMenuNavigation,\n  trackCommandMenuAction,\n} from '@/lib/command-menu';\nimport { trackNavigation, trackAction } from '@/lib/data';\n\n/**\n * Return type for command menu actions hook\n */\nexport interface UseCommandMenuActionsReturn {\n  /** Execute a command */\n  executeCommand: (item: CommandMenuItem) => void;\n  /** Handle export data action */\n  handleExportData: (type: 'residents' | 'households', format: 'csv' | 'xlsx') => Promise<void>;\n  /** Handle backup data action */\n  handleBackupData: () => Promise<void>;\n  /** Handle quick action */\n  handleQuickAction: (actionFn: () => Promise<string>) => Promise<void>;\n  /** Get enhanced menu items with actions */\n  getEnhancedMenuItems: (baseItems: CommandMenuItem[]) => CommandMenuItem[];\n}\n\n/**\n * Hook for command menu actions and execution\n *\n * @description Provides command execution with error handling, analytics tracking,\n * and toast notifications.\n */\nexport function useCommandMenuActions(): UseCommandMenuActionsReturn {\n  const router = useRouter();\n\n  // Error boundary for action operations\n  const { wrapAsync } = useAsyncErrorBoundary({\n    onError: (error, errorInfo) => {\n      if (process.env.NODE_ENV === 'development') {\n        console.error('Command Menu Action Error:', errorInfo, error);\n      }\n    },\n    enableRecovery: false,\n    maxRetries: 0,\n  });\n\n  /**\n   * Handle export data action\n   */\n  const handleExportData = useCallback(\n    async (type: 'residents' | 'households', format: 'csv' | 'xlsx') => {\n      toast.loading('Preparing export...', { id: 'export' });\n\n      try {\n        await wrapAsync(() => exportData({ type, format }), 'export data')();\n        toast.success('Export completed successfully', { id: 'export' });\n      } catch (error) {\n        toast.error('Export failed', { id: 'export' });\n      }\n    },\n    [wrapAsync]\n  );\n\n  /**\n   * Handle backup data action\n   */\n  const handleBackupData = useCallback(async () => {\n    toast.loading('Creating backup...', { id: 'backup' });\n\n    try {\n      await wrapAsync(backupData, 'backup data')();\n      toast.success('Backup created successfully', { id: 'backup' });\n    } catch (error) {\n      toast.error('Backup failed', { id: 'backup' });\n    }\n  }, [wrapAsync]);\n\n  /**\n   * Handle quick action\n   */\n  const handleQuickAction = useCallback(\n    async (actionFn: () => Promise<string>) => {\n      try {\n        const href = await wrapAsync(actionFn, 'quick action')();\n        if (href) {\n          router.push(href);\n        }\n      } catch (error) {\n        // Error handled by async error boundary\n        toast.error('Action failed');\n      }\n    },\n    [router, wrapAsync]\n  );\n\n  /**\n   * Execute a command\n   */\n  const executeCommand = useCallback(\n    (item: CommandMenuItem) => {\n      if (item.disabled) return;\n\n      // Track the interaction based on item type\n      if (item.id.startsWith('search-')) {\n        // Track navigation to search result\n        const originalId = item.id.replace('search-', '');\n        const type = item.description?.includes('Resident') ? 'resident' : 'household';\n        if (item.href) {\n          trackNavigation(\n            originalId,\n            item.label || item.title || 'Unknown',\n            item.description || '',\n            type as 'resident' | 'household',\n            item.href\n          );\n          trackCommandMenuNavigation(originalId, type, item.href);\n        }\n      } else if (item.onClick) {\n        // Track action execution\n        trackAction(item.id, item.label || item.title || 'Unknown', item.description || '');\n        trackCommandMenuAction(item.id, 'click_action');\n      } else if (item.href) {\n        // Track navigation\n        trackAction(\n          item.id,\n          item.label || item.title || 'Unknown',\n          `Navigated to ${item.label || item.title || 'Unknown'}`\n        );\n        trackCommandMenuNavigation(item.id, 'navigation', item.href);\n      }\n\n      // Execute the command\n      if (item.onClick) {\n        item.onClick();\n      } else if (item.href) {\n        router.push(item.href);\n      }\n    },\n    [router]\n  );\n\n  /**\n   * Get enhanced menu items with real API functionality\n   */\n  const getEnhancedMenuItems = useCallback(\n    (baseItems: CommandMenuItem[]): CommandMenuItem[] => {\n      return baseItems.map(item => {\n        const enhancedItem = { ...item };\n\n        // Add real onClick handlers for specific actions\n        switch (item.id) {\n          case 'export-residents':\n            enhancedItem.onClick = () => handleExportData('residents', 'csv');\n            break;\n          case 'export-households':\n            enhancedItem.onClick = () => handleExportData('households', 'csv');\n            break;\n          case 'admin-backup':\n            enhancedItem.onClick = () => handleBackupData();\n            break;\n          case 'action-add-resident':\n            enhancedItem.onClick = () => handleQuickAction(async () => createResident());\n            break;\n          case 'action-create-household':\n            enhancedItem.onClick = () => handleQuickAction(async () => createHousehold());\n            break;\n          case 'search-seniors':\n            enhancedItem.onClick = () => handleQuickAction(async () => findSeniorCitizens());\n            break;\n          case 'search-pwd':\n            enhancedItem.onClick = () => handleQuickAction(async () => findPWDs());\n            break;\n          case 'search-solo-parents':\n            enhancedItem.onClick = () => handleQuickAction(async () => findSoloParents());\n            break;\n          case 'cert-barangay-clearance':\n            enhancedItem.onClick = () =>\n              handleQuickAction(async () => generateCertificate('clearance'));\n            break;\n          case 'cert-residency':\n            enhancedItem.onClick = () =>\n              handleQuickAction(async () => generateCertificate('residency'));\n            break;\n          case 'cert-indigency':\n            enhancedItem.onClick = () =>\n              handleQuickAction(async () => generateCertificate('indigency'));\n            break;\n          case 'report-population':\n            enhancedItem.onClick = () =>\n              handleQuickAction(async () => generateReport('population'));\n            break;\n          case 'report-households-summary':\n            enhancedItem.onClick = () =>\n              handleQuickAction(async () => generateReport('households'));\n            break;\n        }\n\n        return enhancedItem;\n      });\n    },\n    [handleExportData, handleBackupData, handleQuickAction]\n  );\n\n  return {\n    executeCommand,\n    handleExportData,\n    handleBackupData,\n    handleQuickAction,\n    getEnhancedMenuItems,\n  };\n}\n\n// Export for backward compatibility\nexport default useCommandMenuActions;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/command-menu/useCommandMenuRecents.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":92,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":92,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":108,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Command Menu Recent Items Hook\n *\n * @description Handles recent items management for command menu.\n * Extracted from useCommandMenuWithApi for better maintainability.\n */\n\n'use client';\n\nimport { useState, useCallback } from 'react';\nimport { toast } from 'react-hot-toast';\n\nimport { useAsyncErrorBoundary } from '@/hooks/utilities/useAsyncErrorBoundary';\nimport {\n  getRecentApiItems as getRecentItems,\n  clearRecentApiItems as clearRecentItems,\n} from '@/lib/command-menu';\nimport type { CommandMenuSearchResult as CommandMenuItem } from '@/types';\n\n/**\n * Recent item from storage\n */\nexport interface RecentItem {\n  id: string;\n  title: string;\n  description: string;\n  href: string;\n}\n\n/**\n * Return type for command menu recent items hook\n */\nexport interface UseCommandMenuRecentsReturn {\n  /** Recent menu items */\n  recentItems: CommandMenuItem[];\n  /** Loading state */\n  isLoading: boolean;\n  /** Load recent items */\n  loadRecentItems: () => Promise<void>;\n  /** Clear all recent items */\n  handleClearRecentItems: () => Promise<void>;\n  /** Number of recent items */\n  recentItemsCount: number;\n}\n\n/**\n * Hook for command menu recent items management\n *\n * @description Provides recent items functionality with error handling\n * and toast notifications.\n */\nexport function useCommandMenuRecents(): UseCommandMenuRecentsReturn {\n  const [recentItems, setRecentItems] = useState<CommandMenuItem[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Error boundary for recent items operations\n  const { wrapAsync } = useAsyncErrorBoundary({\n    onError: (error, errorInfo) => {\n      if (process.env.NODE_ENV === 'development') {\n        console.error('Command Menu Recents Error:', errorInfo, error);\n      }\n    },\n    enableRecovery: false,\n    maxRetries: 0,\n  });\n\n  /**\n   * Load recent items from storage\n   */\n  const loadRecentItems = useCallback(async () => {\n    setIsLoading(true);\n\n    try {\n      const recent = await wrapAsync(getRecentItems, 'load recent items')();\n\n      if (recent) {\n        const recentMenuItems: CommandMenuItem[] = recent.map(item => ({\n          id: `recent-${item.id}`,\n          title: item.title,\n          subtitle: item.description,\n          group: 'Recent',\n          data: item.href,\n          score: 0,\n          type: 'navigation' as const,\n          recent: true,\n        }));\n\n        setRecentItems(recentMenuItems);\n      } else {\n        setRecentItems([]);\n      }\n    } catch (error) {\n      // Error handled by async error boundary\n      setRecentItems([]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [wrapAsync]);\n\n  /**\n   * Clear all recent items\n   */\n  const handleClearRecentItems = useCallback(async () => {\n    try {\n      await wrapAsync(clearRecentItems, 'clear recent items')();\n      setRecentItems([]); // Clear the UI immediately\n      toast.success('Recent items cleared');\n    } catch (error) {\n      // Error handled by async error boundary\n      toast.error('Failed to clear recent items');\n    }\n  }, [wrapAsync]);\n\n  return {\n    recentItems,\n    isLoading,\n    loadRecentItems,\n    handleClearRecentItems,\n    recentItemsCount: recentItems.length,\n  };\n}\n\n// Export for backward compatibility\nexport default useCommandMenuRecents;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/command-menu/useCommandMenuSearch.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":129,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":129,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Command Menu Search Hook\n *\n * @description Handles search functionality for command menu.\n * Extracted from useCommandMenuWithApi for better maintainability.\n */\n\n'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\n\nimport { useAsyncErrorBoundary } from '@/hooks/utilities/useAsyncErrorBoundary';\nimport { searchData, trackCommandMenuSearch, trackCommandMenuError } from '@/lib/command-menu';\nimport { trackSearch } from '@/lib/data';\nimport type { CommandMenuSearchResult as CommandMenuItem } from '@/types';\n\n/**\n * Search options\n */\nexport interface CommandMenuSearchOptions {\n  /** Maximum number of results */\n  maxResults?: number;\n  /** Debounce delay in milliseconds */\n  debounceDelay?: number;\n}\n\n/**\n * Search result from API\n */\nexport interface SearchResult {\n  id: string;\n  title: string;\n  description: string;\n  href: string;\n  type: 'resident' | 'household';\n}\n\n/**\n * Return type for command menu search hook\n */\nexport interface UseCommandMenuSearchReturn {\n  /** Current search query */\n  searchQuery: string;\n  /** Set search query */\n  setSearchQuery: (query: string) => void;\n  /** Search loading state */\n  isLoading: boolean;\n  /** Dynamic search results */\n  dynamicResults: CommandMenuItem[];\n  /** Clear search */\n  clearSearch: () => void;\n}\n\n/**\n * Hook for command menu search functionality\n *\n * @description Provides search capabilities with debouncing, error handling,\n * and analytics tracking.\n */\nexport function useCommandMenuSearch(\n  options: CommandMenuSearchOptions = {}\n): UseCommandMenuSearchReturn {\n  const { maxResults = 5, debounceDelay = 300 } = options;\n\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [dynamicResults, setDynamicResults] = useState<CommandMenuItem[]>([]);\n\n  // Error boundary for search operations\n  const { wrapAsync } = useAsyncErrorBoundary({\n    onError: (error, errorInfo) => {\n      // Track search errors for monitoring\n      trackCommandMenuError(error, {\n        context: 'search',\n        query: searchQuery.slice(0, 50),\n      });\n\n      if (process.env.NODE_ENV === 'development') {\n        console.error('Command Menu Search Error:', errorInfo, error);\n      }\n    },\n    enableRecovery: false,\n    maxRetries: 0,\n  });\n\n  /**\n   * Search with API integration\n   */\n  useEffect(() => {\n    const searchWithApi = async () => {\n      if (!searchQuery.trim()) {\n        setDynamicResults([]);\n        return;\n      }\n\n      setIsLoading(true);\n\n      try {\n        // Track the search query in recent items\n        trackSearch(searchQuery);\n\n        // Wrap search API call with error boundary\n        const apiResults = await wrapAsync(\n          () => searchData(searchQuery, maxResults),\n          'command menu search'\n        )();\n\n        if (apiResults) {\n          // Track search analytics\n          trackCommandMenuSearch(searchQuery, apiResults.length);\n\n          // Convert API results to menu items\n          const dynamicMenuItems: CommandMenuItem[] = apiResults.map(result => ({\n            id: `search-${result.id}`,\n            title: result.title,\n            subtitle: result.description,\n            group: 'Search Results',\n            data: result.href,\n            score: 0,\n            type: 'navigation' as const,\n            keywords: [result.title.toLowerCase(), result.type],\n            icon: getIconForType(result.type),\n          }));\n\n          setDynamicResults(dynamicMenuItems);\n        } else {\n          setDynamicResults([]);\n        }\n      } catch (error) {\n        // Error already handled by async error boundary\n        setDynamicResults([]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    const debounce = setTimeout(searchWithApi, debounceDelay);\n    return () => clearTimeout(debounce);\n  }, [searchQuery, maxResults, debounceDelay, wrapAsync]);\n\n  /**\n   * Clear search state\n   */\n  const clearSearch = useCallback(() => {\n    setSearchQuery('');\n    setDynamicResults([]);\n    setIsLoading(false);\n  }, []);\n\n  return {\n    searchQuery,\n    setSearchQuery,\n    isLoading,\n    dynamicResults,\n    clearSearch,\n  };\n}\n\n/**\n * Get icon for search result type\n */\nfunction getIconForType(type: string): React.ComponentType<{ className?: string }> | undefined {\n  // This would typically use your icon mapping logic - returning undefined for now\n  // In a real implementation, you'd import and return actual icon components\n  switch (type) {\n    case 'resident':\n    case 'household':\n    default:\n      return undefined;\n  }\n}\n\n// Export for backward compatibility\nexport default useCommandMenuSearch;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/command-menu/useCommandMenuWithApi.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'recents'. Either include it or remove the dependency array.","line":89,"column":6,"nodeType":"ArrayExpression","endLine":89,"endColumn":39,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, recents, recents.loadRecentItems]","fix":{"range":[2887,2920],"text":"[isOpen, recents, recents.loadRecentItems]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'baseMenu' is assigned a value but never used.","line":127,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Command Menu with API Hook (Refactored)\n *\n * @description Lightweight orchestrator for command menu functionality with API integration.\n * Composes specialized hooks for better maintainability.\n *\n * Architecture:\n * - useCommandMenuSearch: Search functionality\n * - useCommandMenuRecents: Recent items management\n * - useCommandMenuActions: Command execution and API actions\n * - useCommandMenu: Base menu functionality\n */\n\n'use client';\n\nimport { useState, useEffect, useCallback, useMemo } from 'react';\n\nimport type { CommandMenuItemType as CommandMenuItem } from '@/components';\nimport { getCommandMenuItems } from '@/lib/command-menu';\n\nimport { useCommandMenu } from './useCommandMenu';\nimport { useCommandMenuActions, type UseCommandMenuActionsReturn } from './useCommandMenuActions';\nimport { useCommandMenuRecents, type UseCommandMenuRecentsReturn } from './useCommandMenuRecents';\nimport { useCommandMenuSearch, type UseCommandMenuSearchReturn } from './useCommandMenuSearch';\n\n/**\n * Options for command menu with API\n */\nexport interface UseCommandMenuWithApiProps {\n  /** Maximum number of results */\n  maxResults?: number;\n}\n\n/**\n * Return type for command menu with API hook\n */\nexport interface UseCommandMenuWithApiReturn\n  extends Pick<UseCommandMenuSearchReturn, 'searchQuery' | 'setSearchQuery' | 'isLoading'>,\n    Pick<UseCommandMenuRecentsReturn, 'handleClearRecentItems'>,\n    Pick<UseCommandMenuActionsReturn, 'executeCommand'> {\n  /** Menu open state */\n  isOpen: boolean;\n  /** Open menu */\n  open: () => void;\n  /** Close menu */\n  close: () => void;\n  /** Toggle menu */\n  toggle: () => void;\n  /** Filtered menu items */\n  filteredItems: CommandMenuItem[];\n  /** Selected index */\n  selectedIndex: number;\n  /** Set selected index */\n  setSelectedIndex: (index: number) => void;\n  /** Number of dynamic results */\n  dynamicResults: number;\n  /** Number of recent items */\n  recentItems: number;\n}\n\n/**\n * Command menu with API integration hook (Refactored)\n *\n * @description Orchestrates command menu functionality with API integration.\n * Much smaller and more maintainable than the original implementation.\n */\nexport function useCommandMenuWithApi({\n  maxResults = 10,\n}: UseCommandMenuWithApiProps = {}): UseCommandMenuWithApiReturn {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n\n  // Compose specialized hooks\n  const search = useCommandMenuSearch({ maxResults: 5 });\n  const recents = useCommandMenuRecents();\n  const actions = useCommandMenuActions();\n\n  // Get static menu items with enhanced actions\n  const staticMenuItems = useMemo(() => {\n    const baseItems = getCommandMenuItems();\n    return actions.getEnhancedMenuItems(baseItems);\n  }, [actions]);\n\n  // Load recent items when menu opens\n  useEffect(() => {\n    if (isOpen) {\n      recents.loadRecentItems();\n    }\n  }, [isOpen, recents.loadRecentItems]);\n\n  // Combine all items based on search state\n  const allItems = useMemo(() => {\n    let items: CommandMenuItem[] = [];\n\n    if (search.searchQuery.trim()) {\n      // Show dynamic search results first, then filtered static items\n      items = [...search.dynamicResults];\n\n      // Add matching static items\n      const query = search.searchQuery.toLowerCase();\n      const matchingStaticItems = staticMenuItems.filter(\n        item =>\n          item.label?.toLowerCase().includes(query) ||\n          item.description?.toLowerCase().includes(query) ||\n          item.keywords?.some(keyword => keyword.includes(query))\n      );\n\n      items.push(...matchingStaticItems);\n    } else {\n      // Show recent items first, then all static items\n      items = [...recents.recentItems, ...staticMenuItems];\n    }\n\n    // Ensure we always have at least the static menu items\n    if (items.length === 0 && staticMenuItems.length > 0) {\n      items = staticMenuItems;\n    }\n\n    // Only limit results for search queries - show all static items when browsing\n    const limit = search.searchQuery.trim()\n      ? maxResults\n      : Math.max(maxResults, staticMenuItems.length);\n    return items.slice(0, limit);\n  }, [search.searchQuery, search.dynamicResults, staticMenuItems, recents.recentItems, maxResults]);\n\n  // Use base command menu for keyboard handling\n  const baseMenu = useCommandMenu({\n    items: allItems,\n    maxResults,\n  });\n\n  // Reset selected index when filtered items change\n  useEffect(() => {\n    setSelectedIndex(0);\n  }, [allItems]);\n\n  // Override base menu's open/close to manage our state\n  const open = useCallback(() => {\n    setIsOpen(true);\n    search.setSearchQuery('');\n    setSelectedIndex(0);\n  }, [search]);\n\n  const close = useCallback(() => {\n    setIsOpen(false);\n    search.clearSearch();\n    setSelectedIndex(0);\n  }, [search]);\n\n  const toggle = useCallback(() => {\n    if (isOpen) {\n      close();\n    } else {\n      open();\n    }\n  }, [isOpen, open, close]);\n\n  // Enhanced execute command with close\n  const executeCommand = useCallback(\n    (item: CommandMenuItem) => {\n      close();\n      actions.executeCommand(item);\n    },\n    [close, actions]\n  );\n\n  return {\n    // Menu state\n    isOpen,\n    open,\n    close,\n    toggle,\n\n    // Search functionality\n    searchQuery: search.searchQuery,\n    setSearchQuery: search.setSearchQuery,\n    isLoading: search.isLoading,\n\n    // Items and selection\n    filteredItems: allItems,\n    selectedIndex,\n    setSelectedIndex,\n\n    // Actions\n    executeCommand,\n\n    // Statistics\n    dynamicResults: search.dynamicResults.length,\n    recentItems: recents.recentItemsCount,\n\n    // Recent items management\n    handleClearRecentItems: recents.handleClearRecentItems,\n  };\n}\n\n// Export for backward compatibility\nexport default useCommandMenuWithApi;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/crud/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/crud/useHouseholdCrud.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[422,425],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[422,425],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[585,588],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[585,588],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2197,2200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2197,2200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Household CRUD Operations Hook\n *\n * @description Focused hook for basic CRUD operations on households.\n * Extracted from useHouseholdOperations to follow single responsibility principle.\n */\n\nimport { useState, useCallback } from 'react';\n\nimport { householdService, HouseholdFormData } from '@/services/household.service';\n\n/**\n * CRUD operation result\n */\nexport interface CrudOperationResult<T = any> {\n  success: boolean;\n  data?: T;\n  error?: string;\n}\n\n/**\n * Options for CRUD operations\n */\nexport interface UseHouseholdCrudOptions {\n  onSuccess?: (data: any) => void;\n  onError?: (error: string) => void;\n}\n\n/**\n * Return type for useHouseholdCrud hook\n */\nexport interface UseHouseholdCrudReturn {\n  /** Whether any operation is in progress */\n  isLoading: boolean;\n  /** Get household by ID */\n  getHousehold: (id: string) => Promise<CrudOperationResult>;\n  /** Get household by code */\n  getHouseholdByCode: (code: string) => Promise<CrudOperationResult>;\n  /** List households with pagination */\n  listHouseholds: (page?: number, limit?: number) => Promise<CrudOperationResult>;\n  /** Update household */\n  updateHousehold: (\n    id: string,\n    updates: Partial<HouseholdFormData>\n  ) => Promise<CrudOperationResult>;\n  /** Delete household */\n  deleteHousehold: (id: string) => Promise<CrudOperationResult>;\n}\n\n/**\n * Custom hook for household CRUD operations\n *\n * @description Provides basic create, read, update, delete operations for households\n * with consistent error handling and loading states.\n */\nexport function useHouseholdCrud(options: UseHouseholdCrudOptions = {}): UseHouseholdCrudReturn {\n  const { onSuccess, onError } = options;\n  const [isLoading, setIsLoading] = useState(false);\n\n  /**\n   * Generic error handler\n   */\n  const handleError = useCallback(\n    (error: unknown, defaultMessage: string): CrudOperationResult => {\n      const errorMessage = error instanceof Error ? error.message : defaultMessage;\n      if (onError) {\n        onError(errorMessage);\n      }\n      return { success: false, error: errorMessage };\n    },\n    [onError]\n  );\n\n  /**\n   * Generic success handler\n   */\n  const handleSuccess = useCallback(\n    (data: any): CrudOperationResult => {\n      if (onSuccess) {\n        onSuccess(data);\n      }\n      return { success: true, data };\n    },\n    [onSuccess]\n  );\n\n  /**\n   * Get household by ID\n   */\n  const getHousehold = useCallback(\n    async (id: string): Promise<CrudOperationResult> => {\n      setIsLoading(true);\n      try {\n        const result = await householdService.getHousehold(id);\n\n        if (!result.success) {\n          return handleError(new Error(result.error), 'Failed to fetch household');\n        }\n\n        return handleSuccess(result.data);\n      } catch (error) {\n        return handleError(error, 'Failed to fetch household');\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [handleError, handleSuccess]\n  );\n\n  /**\n   * Get household by code\n   */\n  const getHouseholdByCode = useCallback(\n    async (code: string): Promise<CrudOperationResult> => {\n      setIsLoading(true);\n      try {\n        const result = await householdService.getHouseholdByCode(code);\n\n        if (!result.success) {\n          return handleError(new Error(result.error), 'Failed to fetch household by code');\n        }\n\n        return handleSuccess(result.data);\n      } catch (error) {\n        return handleError(error, 'Failed to fetch household by code');\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [handleError, handleSuccess]\n  );\n\n  /**\n   * List households with pagination\n   */\n  const listHouseholds = useCallback(\n    async (page = 1, limit = 10): Promise<CrudOperationResult> => {\n      setIsLoading(true);\n      try {\n        const result = await householdService.listHouseholds(page, limit);\n\n        if (!result.success) {\n          return handleError(new Error(result.error), 'Failed to list households');\n        }\n\n        return handleSuccess(result.data);\n      } catch (error) {\n        return handleError(error, 'Failed to list households');\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [handleError, handleSuccess]\n  );\n\n  /**\n   * Update household\n   */\n  const updateHousehold = useCallback(\n    async (id: string, updates: Partial<HouseholdFormData>): Promise<CrudOperationResult> => {\n      setIsLoading(true);\n      try {\n        const result = await householdService.updateHousehold(id, updates);\n\n        if (!result.success) {\n          return handleError(new Error(result.error), 'Failed to update household');\n        }\n\n        return handleSuccess(result.data);\n      } catch (error) {\n        return handleError(error, 'Failed to update household');\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [handleError, handleSuccess]\n  );\n\n  /**\n   * Delete household\n   */\n  const deleteHousehold = useCallback(\n    async (id: string): Promise<CrudOperationResult> => {\n      setIsLoading(true);\n      try {\n        const result = await householdService.deleteHousehold(id);\n\n        if (!result.success) {\n          return handleError(new Error(result.error), 'Failed to delete household');\n        }\n\n        return handleSuccess(null);\n      } catch (error) {\n        return handleError(error, 'Failed to delete household');\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [handleError, handleSuccess]\n  );\n\n  return {\n    isLoading,\n    getHousehold,\n    getHouseholdByCode,\n    listHouseholds,\n    updateHousehold,\n    deleteHousehold,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/crud/useHouseholds.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/crud/useResidentOperations.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[548,551],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[548,551],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":29,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":87,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":21},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'getCSRFToken'. Either include it or remove the dependency array.","line":97,"column":5,"nodeType":"ArrayExpression","endLine":97,"endColumn":41,"suggestions":[{"desc":"Update the dependencies array to be: [barangayCode, getCSRFToken, options, queryClient]","fix":{"range":[2901,2937],"text":"[barangayCode, getCSRFToken, options, queryClient]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":130,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":152,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":152,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * useResidentOperations Hook\n *\n * Custom React hook for resident data operations.\n * Provides a clean interface between UI components and business logic.\n */\n\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useState, useCallback } from 'react';\n\nimport { useAuth } from '@/contexts';\nimport { useCSRFToken } from '@/lib/auth';\nimport { residentService } from '@/services/resident.service';\nimport { ResidentFormData } from '@/types/forms';\n\nexport interface UseResidentOperationsOptions {\n  onSuccess?: (data: any) => void;\n  onError?: (error: string) => void;\n}\n\n/**\n * Custom hook for resident operations\n */\nexport function useResidentOperations(options: UseResidentOperationsOptions = {}) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\n  const { user, userProfile } = useAuth();\n  const { getToken: getCSRFToken } = useCSRFToken();\n  const queryClient = useQueryClient();\n\n  // Get user information from auth context\n  const barangayCode = userProfile?.barangay_code;\n\n  /**\n   * Create a new resident\n   */\n  const createResident = useCallback(\n    async (formData: ResidentFormData) => {\n      setIsSubmitting(true);\n      setValidationErrors({});\n\n      try {\n        // Validate required barangay code\n        if (!barangayCode) {\n          throw new Error('User barangay code is required to create residents');\n        }\n\n        // Get CSRF token for secure form submission\n        const csrfToken = getCSRFToken();\n\n        // Call service to create resident\n        const result = await residentService.createResident({\n          formData,\n          barangayCode,\n          csrfToken,\n        });\n\n        if (!result.success) {\n          // Handle validation errors\n          if (result.data?.validationErrors) {\n            const errorMap: Record<string, string> = {};\n            result.data.validationErrors.forEach((error: { field: string; message: string }) => {\n              errorMap[error.field] = error.message;\n            });\n            setValidationErrors(errorMap);\n          }\n\n          if (options.onError) {\n            options.onError(result.error || 'Failed to create resident');\n          }\n          return result;\n        }\n\n        // Invalidate residents cache to refresh the list\n        await queryClient.invalidateQueries({\n          queryKey: ['residents'],\n        });\n\n        // Success callback\n        if (options.onSuccess) {\n          options.onSuccess(result.data);\n        }\n\n        return result;\n      } catch (error) {\n        const errorMessage = 'An unexpected error occurred. Please try again.';\n        if (options.onError) {\n          options.onError(errorMessage);\n        }\n        return { success: false, error: errorMessage };\n      } finally {\n        setIsSubmitting(false);\n      }\n    },\n    [barangayCode, options, queryClient]\n  );\n\n  /**\n   * Validate resident data\n   */\n  const validateResident = useCallback(async (formData: ResidentFormData) => {\n    const result = await residentService.validateResident(formData);\n\n    if (!result.success && result.errors) {\n      const errorMap: Record<string, string> = {};\n      result.errors.forEach(error => {\n        errorMap[error.field] = error.message;\n      });\n      setValidationErrors(errorMap);\n    } else {\n      setValidationErrors({});\n    }\n\n    return result;\n  }, []);\n\n  /**\n   * Get resident by ID\n   */\n  const getResident = useCallback(\n    async (id: string) => {\n      try {\n        const result = await residentService.getResident(id);\n        if (!result.success && options.onError) {\n          options.onError(result.error || 'Failed to fetch resident');\n        }\n        return result;\n      } catch (error) {\n        const errorMessage = 'Failed to fetch resident';\n        if (options.onError) {\n          options.onError(errorMessage);\n        }\n        return { success: false, error: errorMessage };\n      }\n    },\n    [options]\n  );\n\n  /**\n   * List residents with pagination\n   */\n  const listResidents = useCallback(\n    async (page = 1, limit = 10) => {\n      try {\n        const result = await residentService.listResidents(page, limit);\n        if (!result.success && options.onError) {\n          options.onError(result.error || 'Failed to list residents');\n        }\n        return result;\n      } catch (error) {\n        const errorMessage = 'Failed to list residents';\n        if (options.onError) {\n          options.onError(errorMessage);\n        }\n        return { success: false, error: errorMessage };\n      }\n    },\n    [options]\n  );\n\n  /**\n   * Clear validation errors\n   */\n  const clearValidationErrors = useCallback(() => {\n    setValidationErrors({});\n  }, []);\n\n  return {\n    // Operations\n    createResident,\n    validateResident,\n    getResident,\n    listResidents,\n    clearValidationErrors,\n\n    // State\n    isSubmitting,\n    validationErrors,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/crud/useResidents.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useQuery' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":18},{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":156,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4375,4378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4375,4378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4422,4425],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4422,4425],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6391,6394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6391,6394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":224,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6756,6759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6756,6759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":251,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":251,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7442,7445],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7442,7445],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":281,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":281,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8414,8417],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8414,8417],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":295,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":295,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8919,8922],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8919,8922],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":295,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":295,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8958,8961],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8958,8961],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":298,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":298,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9044,9047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9044,9047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":298,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":298,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9083,9086],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9083,9086],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":300,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9173,9176],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9173,9176],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * useResidents Hook\n *\n * Custom hook for fetching and caching residents data with React Query\n */\n\nimport { useQuery, useQueryClient, keepPreviousData } from '@tanstack/react-query';\n\nimport { useAuth } from '@/contexts';\nimport { supabase } from '@/lib/data/supabase';\nimport { clientLogger } from '@/lib/logging/client-logger';\n\n// Import the properly typed ResidentRecord\nimport { ResidentRecord } from '@/types/database';\n\nimport { useResilientQuery } from './useResilientQuery';\n\ninterface Resident extends Omit<ResidentRecord, 'sex'> {\n  sex: 'male' | 'female' | ''; // Allow empty for forms\n  households?: {\n    code: string;\n    name?: string;\n    barangay_code: string;\n    city_municipality_code?: string;\n    province_code?: string;\n    region_code?: string;\n    house_number?: string;\n    street_id?: string;\n    subdivision_id?: string;\n  };\n  [key: string]: unknown; // Index signature for TableRecord compatibility\n}\n\ninterface ResidentsParams {\n  page?: number;\n  pageSize?: number;\n  searchTerm?: string;\n  filters?: AdvancedFilters;\n}\n\ninterface AdvancedFilters {\n  sex?: string;\n  civil_status?: string;\n  ageRange?: { min?: number; max?: number };\n  dateRange?: { from?: string; to?: string };\n  employment_status?: string;\n  education_attainment?: string[];\n  sectoralCategories?: string[];\n  occupation?: string;\n  barangay?: string[];\n  hasEmail?: boolean;\n  isVoter?: boolean;\n}\n\ninterface ResidentsResponse {\n  data: Resident[];\n  total: number;\n  page: number;\n  pageSize: number;\n}\n\n// Enhanced API function to fetch residents with better error handling\nasync function fetchResidents(params: ResidentsParams): Promise<ResidentsResponse> {\n  const { page = 1, pageSize = 20, searchTerm = '', filters = {} } = params;\n\n  clientLogger.debug('Fetching residents', {\n    action: 'fetch_residents_start',\n    data: { page, pageSize, searchTerm, filtersCount: Object.keys(filters).length },\n  });\n\n  // Get current session to pass auth token\n  const {\n    data: { session },\n  } = await supabase.auth.getSession();\n\n  if (!session?.access_token) {\n    const error = new Error('No valid session found - please log in again');\n    clientLogger.error('Authentication error in fetchResidents', {\n      action: 'fetch_residents_auth_error',\n      error: error,\n    });\n    throw error;\n  }\n\n  // Build query parameters\n  const queryParams = new URLSearchParams({\n    page: page.toString(),\n    pageSize: pageSize.toString(),\n  });\n\n  if (searchTerm.trim()) {\n    queryParams.append('search', searchTerm.trim());\n  }\n\n  // Add filter parameters with enhanced processing\n  Object.entries(filters).forEach(([key, value]) => {\n    if (value === undefined || value === null || value === '') return;\n\n    // Handle array filters\n    if (Array.isArray(value)) {\n      if (value.length > 0) {\n        queryParams.append(`filter_${key}`, value.join(','));\n      }\n    }\n    // Handle object filters (like age range, date range)\n    else if (typeof value === 'object') {\n      const hasValues = Object.values(value).some(v => v !== undefined && v !== null && v !== '');\n      if (hasValues) {\n        queryParams.append(`filter_${key}`, JSON.stringify(value));\n      }\n    }\n    // Handle primitive values\n    else {\n      queryParams.append(`filter_${key}`, String(value));\n    }\n  });\n\n  const url = `/api/residents?${queryParams}`;\n\n  try {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${session.access_token}`,\n      },\n    });\n\n    if (!response.ok) {\n      let errorMessage: string;\n      let errorCode: string | undefined;\n\n      try {\n        const errorData = await response.json();\n        errorMessage =\n          errorData.message || errorData.error || `HTTP ${response.status}: ${response.statusText}`;\n        errorCode = errorData.code;\n      } catch {\n        errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n      }\n\n      // Enhanced error logging\n      clientLogger.error('Residents API error', {\n        action: 'fetch_residents_api_error',\n        data: {\n          status: response.status,\n          statusText: response.statusText,\n          url,\n          errorCode,\n          errorMessage,\n        },\n      });\n\n      // Create a more informative error\n      const error = new Error(errorMessage);\n      (error as any).status = response.status;\n      (error as any).code = errorCode;\n      throw error;\n    }\n\n    const data = await response.json();\n\n    clientLogger.info('Residents fetched successfully', {\n      action: 'fetch_residents_success',\n      data: {\n        count: data.data?.length || 0,\n        total: data.pagination?.total || 0,\n        page,\n        pageSize,\n      },\n    });\n\n    return data;\n  } catch (error) {\n    // Network or parsing errors\n    if (error instanceof Error && !('status' in error)) {\n      clientLogger.error('Network error in fetchResidents', {\n        action: 'fetch_residents_network_error',\n        error: error,\n      });\n    }\n    throw error;\n  }\n}\n\n// Enhanced custom hook with resilient querying\nexport function useResidents(params: ResidentsParams = {}) {\n  const { user, userProfile, loading: authLoading } = useAuth();\n  const queryClient = useQueryClient();\n\n  const { page = 1, pageSize = 20, searchTerm = '', filters = {} } = params;\n\n  // Use a stable cache key that doesn't change during auth loading\n  const cacheKey = ['residents', { page, pageSize, searchTerm, filters }];\n\n  const isEnabled = !!user && !!userProfile?.barangay_code && !authLoading;\n\n  const query = useResilientQuery<ResidentsResponse>({\n    queryKey: cacheKey,\n    queryFn: () => fetchResidents(params),\n    enabled: isEnabled,\n    staleTime: 30 * 1000, // Consider data fresh for 30 seconds\n    gcTime: 5 * 60 * 1000, // Keep in cache for 5 minutes\n    // Smart refetch strategy\n    refetchOnMount: 'always',\n    refetchOnWindowFocus: false, // Don't refetch on window focus to reduce load\n    refetchOnReconnect: 'always',\n    // Use stale data while revalidating for better UX\n    placeholderData: keepPreviousData,\n    // Network mode optimistic - use cache first, then network\n    networkMode: 'online',\n    // Enhanced retry configuration\n    retryConfig: {\n      maxRetries: 3,\n      retryDelay: (attempt: number) => Math.min(1000 * Math.pow(2, attempt), 10000),\n      retryCondition: (error: any) => {\n        // Don't retry on authentication errors\n        if (error?.status === 401 || error?.status === 403) return false;\n        // Don't retry on validation errors\n        if (error?.status === 400) return false;\n        // Retry on network errors and server errors\n        return error?.status >= 500 || !error?.status;\n      },\n      onRetry: (error: any, attempt: number) => {\n        clientLogger.warn(`Retrying residents query (attempt ${attempt})`, {\n          action: 'residents_query_retry',\n          error: error,\n          data: {\n            attempt,\n            params: { page, pageSize, searchTerm },\n          },\n        });\n      },\n    },\n    // Performance tracking\n    performanceTracking: {\n      enabled: true,\n      operationName: 'residents_query',\n    },\n    // Fallback data\n    fallbackData: {\n      data: [],\n      total: 0,\n      page: page,\n      pageSize: pageSize,\n    },\n    // Error notification\n    errorNotification: {\n      enabled: true,\n      title: 'Failed to load residents',\n      message: (error: any) => {\n        if (error?.status === 401) return 'Please log in again to continue';\n        if (error?.status === 403) return \"You don't have permission to view residents\";\n        if (error?.status >= 500) return 'Server error - please try again later';\n        return error?.message || 'An unexpected error occurred';\n      },\n    },\n  });\n\n  // Prefetch next page\n  const prefetchNextPage = () => {\n    if (query.data && query.data.total > page * pageSize) {\n      queryClient.prefetchQuery({\n        queryKey: ['residents', { page: page + 1, pageSize, searchTerm, filters }],\n        queryFn: () => fetchResidents({ ...params, page: page + 1 }),\n        staleTime: 5 * 60 * 1000,\n      });\n    }\n  };\n\n  // Invalidate residents cache (use after mutations)\n  const invalidateResidents = () => {\n    queryClient.invalidateQueries({\n      queryKey: ['residents'],\n    });\n  };\n\n  return {\n    ...query,\n    residents: query.data?.data || [],\n    total: (query.data as any)?.pagination?.total || 0,\n    prefetchNextPage,\n    invalidateResidents,\n    // Enhanced loading state management\n    isLoading: query.isLoading || (authLoading && !query.data),\n    // Expose additional resilient query features\n    retryManually: query.retryManually,\n    clearError: query.clearError,\n    getMetrics: query.getMetrics,\n    // Enhanced error information\n    errorDetails: {\n      hasError: !!query.error,\n      error: query.error,\n      canRetry: query.error\n        ? (query.error as any).status >= 500 || !(query.error as any).status\n        : false,\n      isAuthError: query.error\n        ? (query.error as any).status === 401 || (query.error as any).status === 403\n        : false,\n      isNetworkError: query.error ? !(query.error as any).status : false,\n    },\n  };\n}\n\n/**\n * Hook for getting filter field definitions for advanced filters\n */\nexport function useResidentFilterFields() {\n  // This could be extended to fetch dynamic filter options from the API\n  return [\n    {\n      key: 'sex',\n      label: 'Sex',\n      type: 'select' as const,\n      options: [\n        { value: 'male', label: 'Male' },\n        { value: 'female', label: 'Female' },\n      ],\n    },\n    {\n      key: 'civil_status',\n      label: 'Civil Status',\n      type: 'select' as const,\n      options: [\n        { value: 'single', label: 'Single' },\n        { value: 'married', label: 'Married' },\n        { value: 'widowed', label: 'Widowed' },\n        { value: 'divorced', label: 'Divorced' },\n        { value: 'separated', label: 'Separated' },\n      ],\n    },\n    {\n      key: 'ageRange',\n      label: 'Age Range',\n      type: 'range' as const,\n      min: 0,\n      max: 120,\n    },\n    {\n      key: 'employment_status',\n      label: 'Employment Status',\n      type: 'select' as const,\n      options: [\n        { value: 'employed', label: 'Employed' },\n        { value: 'unemployed', label: 'Unemployed' },\n        { value: 'student', label: 'Student' },\n        { value: 'retired', label: 'Retired' },\n        { value: 'homemaker', label: 'Homemaker' },\n      ],\n    },\n    {\n      key: 'education_attainment',\n      label: 'Education Level',\n      type: 'multiselect' as const,\n      options: [\n        { value: 'no_formal_education', label: 'No Formal Education' },\n        { value: 'elementary', label: 'Elementary' },\n        { value: 'high_school', label: 'High School' },\n        { value: 'vocational', label: 'Vocational/Technical' },\n        { value: 'college', label: 'College' },\n        { value: 'graduate', label: 'Graduate Studies' },\n      ],\n    },\n    {\n      key: 'sectoralCategories',\n      label: 'Sectoral Categories',\n      type: 'multiselect' as const,\n      options: [\n        { value: 'senior_citizen', label: 'Senior Citizen' },\n        { value: 'person_with_disability', label: 'Person with Disability' },\n        { value: 'solo_parent', label: 'Solo Parent' },\n        { value: 'overseas_filipino_worker', label: 'OFW' },\n        { value: 'indigenous_people', label: 'Indigenous People' },\n        { value: 'out_of_school_youth', label: 'Out of School Youth' },\n      ],\n    },\n    {\n      key: 'occupation',\n      label: 'Occupation',\n      type: 'text' as const,\n      placeholder: 'Enter occupation...',\n    },\n    {\n      key: 'hasEmail',\n      label: 'Has Email',\n      type: 'boolean' as const,\n    },\n    {\n      key: 'isVoter',\n      label: 'Registered Voter',\n      type: 'boolean' as const,\n    },\n    {\n      key: 'dateRange',\n      label: 'Registration Date',\n      type: 'date' as const,\n    },\n  ];\n}\n\nexport type { Resident, ResidentsParams, ResidentsResponse, AdvancedFilters };\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/crud/useResilientQuery.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[492,495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[492,495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[529,532],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[529,532],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[891,894],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[891,894],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1116,1119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1116,1119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1406,1409],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1406,1409],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1872,1875],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1872,1875],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2072,2075],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2072,2075],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fallbackData' is assigned a value but never used.","line":75,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2446,2449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2446,2449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'options'. Either include it or remove the dependency array.","line":134,"column":5,"nodeType":"ArrayExpression","endLine":134,"endColumn":75,"suggestions":[{"desc":"Update the dependencies array to be: [performanceTracking.operationName, options]","fix":{"range":[4058,4128],"text":"[performanceTracking.operationName, options]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":160,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4822,4825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4822,4825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'message' is assigned a value but never used.","line":168,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":168,"endColumn":22},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'errorNotification' and 'options'. Either include them or remove the dependency array.","line":180,"column":6,"nodeType":"ArrayExpression","endLine":180,"endColumn":98,"suggestions":[{"desc":"Update the dependencies array to be: [query.error, errorNotification.enabled, errorNotification.title, errorNotification.message, options, errorNotification]","fix":{"range":[5506,5598],"text":"[query.error, errorNotification.enabled, errorNotification.title, errorNotification.message, options, errorNotification]"}}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":195,"column":30,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":195,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":195,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6000,6003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6000,6003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useResilientQuery\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.","line":231,"column":12,"nodeType":"Identifier","endLine":231,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":235,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7010,7013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7010,7013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Resilient Query Hook\n * Enhanced React Query wrapper with retry mechanisms and error recovery\n */\n\nimport { useQuery, useQueryClient, UseQueryOptions } from '@tanstack/react-query';\nimport { useCallback, useRef, useEffect } from 'react';\n\nimport { clientLogger } from '@/lib/logging/client-logger';\nimport { performanceMonitor } from '@/lib/monitoring/performance';\n\ninterface RetryConfig {\n  maxRetries?: number;\n  retryDelay?: (attempt: number) => number;\n  retryCondition?: (error: any) => boolean;\n  onRetry?: (error: any, attempt: number) => void;\n}\n\ninterface ResilientQueryOptions<TData>\n  extends Omit<UseQueryOptions<TData>, 'retry' | 'retryDelay'> {\n  retryConfig?: RetryConfig;\n  performanceTracking?: {\n    enabled?: boolean;\n    operationName?: string;\n  };\n  fallbackData?: TData;\n  errorNotification?: {\n    enabled?: boolean;\n    title?: string;\n    message?: (error: any) => string;\n  };\n}\n\nconst DEFAULT_RETRY_CONFIG: Required<RetryConfig> = {\n  maxRetries: 3,\n  retryDelay: (attempt: number) => Math.min(1000 * Math.pow(2, attempt), 10000), // Exponential backoff\n  retryCondition: (error: any) => {\n    // Retry on network errors, 5xx errors, but not on 4xx client errors\n    if (error?.message?.includes('fetch')) return true;\n    if (error?.status >= 500) return true;\n    if (error?.status >= 400 && error?.status < 500) return false;\n    return true;\n  },\n  onRetry: (error: any, attempt: number) => {\n    clientLogger.warn(`Query retry attempt ${attempt}`, {\n      error: error,\n      action: 'query_retry',\n      data: { attempt },\n    });\n  },\n};\n\n/**\n * Enhanced useQuery hook with retry mechanisms and performance tracking\n */\nexport function useResilientQuery<TData = unknown>(\n  options: ResilientQueryOptions<TData>\n): ReturnType<typeof useQuery<TData>> & {\n  retryManually: () => void;\n  clearError: () => void;\n  getMetrics: () => any;\n} {\n  const queryClient = useQueryClient();\n  const metricsRef = useRef({\n    totalAttempts: 0,\n    successfulQueries: 0,\n    failedQueries: 0,\n    averageResponseTime: 0,\n    lastError: null as any,\n  });\n\n  const {\n    retryConfig = {},\n    performanceTracking = { enabled: true },\n    fallbackData,\n    errorNotification = { enabled: false },\n    ...queryOptions\n  } = options;\n\n  const finalRetryConfig = { ...DEFAULT_RETRY_CONFIG, ...retryConfig };\n\n  // Enhanced query function with performance tracking\n  const enhancedQueryFn = useCallback(\n    async (context: any) => {\n      const operationName =\n        performanceTracking.operationName ||\n        `query_${Array.isArray(options.queryKey) ? options.queryKey.join('_') : 'unknown'}`;\n\n      performanceMonitor.startMetric(operationName);\n      metricsRef.current.totalAttempts++;\n\n      try {\n        const startTime = performance.now();\n        if (!options.queryFn || typeof options.queryFn !== 'function') {\n          throw new Error('Query function is required but not provided');\n        }\n\n        const result = await options.queryFn(context);\n        const endTime = performance.now();\n        const duration = endTime - startTime;\n\n        // Update metrics\n        metricsRef.current.successfulQueries++;\n        metricsRef.current.averageResponseTime =\n          (metricsRef.current.averageResponseTime + duration) / 2;\n\n        performanceMonitor.endMetric(operationName);\n\n        clientLogger.info(`Query successful: ${operationName}`, {\n          action: 'query_success',\n          data: {\n            duration: Math.round(duration),\n            attempt: context.meta?.attempt || 1,\n          },\n        });\n\n        return result;\n      } catch (error) {\n        metricsRef.current.failedQueries++;\n        metricsRef.current.lastError = error;\n        performanceMonitor.endMetric(operationName);\n\n        clientLogger.error(`Query failed: ${operationName}`, {\n          error: error instanceof Error ? error : new Error(String(error)),\n          action: 'query_error',\n          data: {\n            attempt: context.meta?.attempt || 1,\n          },\n        });\n\n        throw error;\n      }\n    },\n    [options.queryFn, performanceTracking.operationName, options.queryKey]\n  );\n\n  // Enhanced query with retry logic\n  const query = useQuery({\n    ...queryOptions,\n    queryFn: enhancedQueryFn,\n    retry: (failureCount, error) => {\n      if (failureCount >= finalRetryConfig.maxRetries) {\n        return false;\n      }\n\n      const shouldRetry = finalRetryConfig.retryCondition(error);\n      if (shouldRetry) {\n        finalRetryConfig.onRetry(error, failureCount + 1);\n      }\n\n      return shouldRetry;\n    },\n    retryDelay: finalRetryConfig.retryDelay,\n  });\n\n  // Handle errors through useEffect (since onError was removed from React Query)\n  useEffect(() => {\n    if (query.error) {\n      // Call original onError if provided\n      const onError = (options as any).onError;\n      if (onError && typeof onError === 'function') {\n        onError(query.error);\n      }\n\n      // Show error notification if enabled\n      if (errorNotification.enabled) {\n        const title = errorNotification.title || 'Query Error';\n        const message = errorNotification.message\n          ? errorNotification.message(query.error)\n          : query.error instanceof Error\n            ? query.error.message\n            : 'An unexpected error occurred';\n\n        clientLogger.error(title, {\n          error: query.error instanceof Error ? query.error : new Error(String(query.error)),\n          action: 'query_error_notification',\n        });\n      }\n    }\n  }, [query.error, errorNotification.enabled, errorNotification.title, errorNotification.message]);\n\n  // Manual retry function\n  const retryManually = useCallback(() => {\n    clientLogger.info('Manual retry triggered', {\n      action: 'manual_retry',\n      data: {\n        queryKey: options.queryKey,\n      },\n    });\n    query.refetch();\n  }, [query, options.queryKey]);\n\n  // Clear error function\n  const clearError = useCallback(() => {\n    queryClient.setQueryData(options.queryKey!, (oldData: any) => oldData);\n    metricsRef.current.lastError = null;\n  }, [queryClient, options.queryKey]);\n\n  // Get metrics function\n  const getMetrics = useCallback(() => {\n    return {\n      ...metricsRef.current,\n      successRate:\n        metricsRef.current.totalAttempts > 0\n          ? (metricsRef.current.successfulQueries / metricsRef.current.totalAttempts) * 100\n          : 0,\n    };\n  }, []);\n\n  return {\n    ...query,\n    retryManually,\n    clearError,\n    getMetrics,\n  };\n}\n\n/**\n * Hook for managing multiple resilient queries\n */\nexport function useResilientQueries<TData = unknown>(\n  queries: ResilientQueryOptions<TData>[],\n  options?: {\n    parallel?: boolean;\n    failFast?: boolean;\n  }\n) {\n  const { parallel = true, failFast = false } = options || {};\n\n  const results = queries.map((queryOptions, index) => {\n    return useResilientQuery({\n      ...queryOptions,\n      enabled: parallel\n        ? queryOptions.enabled\n        : ((queryOptions.enabled && (index === 0 || queries[index - 1])) as any),\n    });\n  });\n\n  // Aggregate metrics\n  const aggregateMetrics = useCallback(() => {\n    return results.reduce(\n      (acc, result) => {\n        const metrics = result.getMetrics();\n        return {\n          totalQueries: acc.totalQueries + 1,\n          totalAttempts: acc.totalAttempts + metrics.totalAttempts,\n          successfulQueries: acc.successfulQueries + metrics.successfulQueries,\n          failedQueries: acc.failedQueries + metrics.failedQueries,\n          averageResponseTime: (acc.averageResponseTime + metrics.averageResponseTime) / 2,\n        };\n      },\n      {\n        totalQueries: 0,\n        totalAttempts: 0,\n        successfulQueries: 0,\n        failedQueries: 0,\n        averageResponseTime: 0,\n      }\n    );\n  }, [results]);\n\n  return {\n    results,\n    isLoading: results.some(r => r.isLoading),\n    isError: failFast ? results.some(r => r.isError) : results.every(r => r.isError),\n    errors: results.map(r => r.error).filter(Boolean),\n    retryAll: () => results.forEach(r => r.retryManually()),\n    clearAllErrors: () => results.forEach(r => r.clearError()),\n    getAggregateMetrics: aggregateMetrics,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/dashboard/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/dashboard/useDashboard.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AgeGroup' is defined but never used.","line":20,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Dashboard Hook (Refactored)\n *\n * @description Lightweight orchestrator for dashboard functionality.\n * Composes specialized hooks for better maintainability.\n *\n * Architecture:\n * - useDashboardApi: API calls and data fetching\n * - useDashboardCalculations: Data processing and calculations\n */\n\nimport { useMemo } from 'react';\n\nimport {\n  useDashboardApi,\n  type DashboardResponse,\n  type DashboardStats,\n  type AgeGroup,\n} from './useDashboardApi';\nimport {\n  useDashboardCalculations,\n  type UseDashboardCalculationsReturn,\n} from './useDashboardCalculations';\n\n/**\n * Return type for dashboard hook\n */\nexport interface UseDashboardReturn {\n  /** Raw dashboard data from API */\n  data: DashboardResponse | undefined;\n  /** Dashboard statistics */\n  stats: DashboardStats | undefined;\n  /** Loading state */\n  isLoading: boolean;\n  /** Error state */\n  error: Error | null;\n  /** Refetch function */\n  refetch: () => void;\n  /** Refetching state */\n  isRefetching: boolean;\n  /** Fetching state */\n  isFetching: boolean;\n  /** Processed calculations */\n  calculations: UseDashboardCalculationsReturn;\n}\n\n/**\n * Dashboard hook (Refactored)\n *\n * @description Orchestrates dashboard data fetching and processing.\n * Much smaller and more maintainable than the original implementation.\n */\nexport function useDashboard(): UseDashboardReturn {\n  // API data fetching\n  const { data, isLoading, error, refetch, isRefetching, isFetching } = useDashboardApi();\n\n  // Extract residents data for calculations\n  const residentsData = useMemo(() => {\n    return data?.residentsData || [];\n  }, [data?.residentsData]);\n\n  // Data processing and calculations\n  const calculations = useDashboardCalculations(residentsData);\n\n  return {\n    data,\n    stats: data?.stats,\n    isLoading,\n    error,\n    refetch,\n    isRefetching,\n    isFetching,\n    calculations,\n  };\n}\n\n// Re-export types and utilities for convenience\nexport type {\n  DashboardStats,\n  AgeGroup,\n  DashboardResponse,\n  DependencyData,\n  SexData,\n  CivilStatusData,\n  EmploymentStatusData,\n} from './useDashboardApi';\nexport type { ResidentData, UseDashboardCalculationsReturn } from './useDashboardCalculations';\nexport {\n  calculateAge,\n  getAgeGroup,\n  processPopulationData,\n  calculateDependencyRatios,\n  calculateSexDistribution,\n  STANDARD_AGE_GROUPS,\n} from './useDashboardCalculations';\n\n// Export for backward compatibility\nexport default useDashboard;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/dashboard/useDashboardApi.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'queryClient' is assigned a value but never used.","line":185,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":185,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Dashboard API Hook\n *\n * @description Handles API calls and data fetching for dashboard statistics.\n * Extracted from useDashboard for better separation of concerns.\n */\n\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\n\nimport { useAuth } from '@/contexts';\nimport { useAsyncErrorBoundary } from '@/hooks/utilities/useAsyncErrorBoundary';\nimport { useRetryLogic, RetryStrategies } from '@/hooks/utilities/useRetryLogic';\nimport { supabase, logger } from '@/lib';\n\n/**\n * Dashboard statistics interface\n */\nexport interface DashboardStats {\n  residents: number;\n  households: number;\n  businesses: number;\n  certifications: number;\n  seniorCitizens: number;\n  employedResidents: number;\n}\n\n/**\n * Age group interface\n */\nexport interface AgeGroup {\n  ageRange: string;\n  male: number;\n  female: number;\n  malePercentage: number;\n  femalePercentage: number;\n}\n\n/**\n * Dependency data interface\n */\nexport interface DependencyData {\n  youngDependents: number; // 0-14\n  workingAge: number; // 15-64\n  oldDependents: number; // 65+\n}\n\n/**\n * Sex distribution interface\n */\nexport interface SexData {\n  male: number;\n  female: number;\n}\n\n/**\n * Civil status data interface\n */\nexport interface CivilStatusData {\n  single: number;\n  married: number;\n  widowed: number;\n  divorced: number;\n  separated: number;\n  annulled: number;\n  registeredPartnership: number;\n  liveIn: number;\n}\n\n/**\n * Employment status data interface\n */\nexport interface EmploymentStatusData {\n  employed: number;\n  unemployed: number;\n  selfEmployed: number;\n  student: number;\n  retired: number;\n  homemaker: number;\n  disabled: number;\n  other: number;\n}\n\n/**\n * Dashboard API response interface\n */\nexport interface DashboardResponse {\n  stats: DashboardStats;\n  demographics: {\n    ageGroups: DependencyData;\n    sexDistribution: SexData;\n    civilStatus: {\n      single: number;\n      married: number;\n      widowed: number;\n      divorced: number;\n    };\n    employment: {\n      laborForce: number;\n      employed: number;\n      unemployed: number;\n    };\n    specialCategories: {\n      pwd: number;\n      soloParents: number;\n      ofw: number;\n      indigenous: number;\n      outOfSchoolChildren: number;\n      outOfSchoolYouth: number;\n      registeredSeniorCitizens: number;\n      migrants: number;\n    };\n  };\n  residentsData: {\n    birthdate: string;\n    sex: string;\n    civil_status: string;\n    employment_status: string;\n    is_labor_force_employed?: boolean;\n    resident_sectoral_info?: {\n      is_labor_force: boolean;\n      is_labor_force_employed: boolean;\n      is_unemployed: boolean;\n      is_overseas_filipino_worker: boolean;\n      is_person_with_disability: boolean;\n      is_out_of_school_children: boolean;\n      is_out_of_school_youth: boolean;\n      is_senior_citizen: boolean;\n      is_registered_senior_citizen: boolean;\n      is_solo_parent: boolean;\n      is_indigenous_people: boolean;\n      is_migrant: boolean;\n    }[];\n  }[];\n}\n\n/**\n * API function to fetch dashboard data\n */\nexport async function fetchDashboardStats(): Promise<DashboardResponse> {\n  // Get current session to pass auth token\n  const {\n    data: { session },\n  } = await supabase.auth.getSession();\n\n  if (!session?.access_token) {\n    throw new Error('No valid session found');\n  }\n\n  const response = await fetch('/api/dashboard/stats', {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${session.access_token}`,\n    },\n  });\n\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n  }\n\n  return response.json();\n}\n\n/**\n * Return type for dashboard API hook\n */\nexport interface UseDashboardApiReturn {\n  data: DashboardResponse | undefined;\n  isLoading: boolean;\n  error: Error | null;\n  refetch: () => void;\n  isRefetching: boolean;\n  isFetching: boolean;\n}\n\n/**\n * Hook for dashboard API operations\n *\n * @description Provides dashboard data fetching with React Query integration.\n * Handles authentication, caching, and error states with advanced retry logic.\n */\nexport function useDashboardApi(): UseDashboardApiReturn {\n  const { user, userProfile } = useAuth();\n  const queryClient = useQueryClient();\n\n  // Advanced retry logic for critical dashboard operations\n  const retryLogic = useRetryLogic({\n    ...RetryStrategies.standard,\n    name: 'DashboardAPI',\n    shouldRetry: (error: Error) => {\n      // Don't retry on authentication errors\n      if (\n        error.message.includes('No valid session') ||\n        error.message.includes('401') ||\n        error.message.includes('403')\n      ) {\n        return false;\n      }\n      // Don't retry on client errors (4xx)\n      if (error.message.includes('400') || error.message.includes('404')) {\n        return false;\n      }\n      // Retry on network errors and server errors (5xx)\n      return true;\n    },\n    onSuccess: (result, attempt) => {\n      if (attempt > 0) {\n        logger.info('Dashboard API retry succeeded', {\n          attempts: attempt + 1,\n          operation: 'dashboard-fetch',\n        });\n      }\n    },\n    onError: (error, attempt) => {\n      logger.warn('Dashboard API retry attempt failed', {\n        attempt: attempt + 1,\n        error: error.message,\n        operation: 'dashboard-fetch',\n      });\n    },\n    onMaxAttemptsReached: error => {\n      logger.error('Dashboard API max retry attempts reached', {\n        error: error.message,\n        operation: 'dashboard-fetch',\n        maxAttempts: RetryStrategies.standard.maxAttempts,\n      });\n    },\n  });\n\n  // Error boundary for critical dashboard operations\n  const { wrapAsync, errorState } = useAsyncErrorBoundary({\n    onError: (error, errorInfo) => {\n      // Log critical dashboard errors for monitoring\n      logger.error('Dashboard API critical error', {\n        error: error.message,\n        errorInfo,\n        operation: 'dashboard-fetch',\n        userId: user?.id,\n      });\n    },\n    enableRecovery: false, // Let our retry logic handle retries\n    maxRetries: 0,\n  });\n\n  // Enhanced fetch function with retry logic\n  const fetchWithRetry = async (): Promise<DashboardResponse> => {\n    return retryLogic.execute(async () => {\n      const result = await wrapAsync(fetchDashboardStats, 'dashboard stats fetch')();\n      if (result === null) {\n        throw new Error('Dashboard data fetch returned null');\n      }\n      return result;\n    });\n  };\n\n  const query = useQuery({\n    queryKey: ['dashboard', 'stats', userProfile?.barangay_code],\n    queryFn: fetchWithRetry,\n    enabled: !!user && !!userProfile?.barangay_code,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    gcTime: 10 * 60 * 1000, // 10 minutes\n    retry: false, // Disable React Query retry since we handle it ourselves\n  });\n\n  return {\n    data: query.data,\n    isLoading: query.isLoading || retryLogic.state.isRetrying,\n    error: query.error || errorState.error || retryLogic.state.lastError,\n    refetch: query.refetch,\n    isRefetching: query.isRefetching,\n    isFetching: query.isFetching,\n  };\n}\n\n// Export for backward compatibility\nexport default useDashboardApi;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/dashboard/useDashboardCalculations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/search/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/search/useFormSearches.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":66,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":97,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":97,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":117,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useCallback } from 'react';\n\nimport { searchHouseholdsCached } from '@/services/household-fetcher';\nimport { formatPsocOption, formatPsgcOption } from '@/services/resident-mapper';\nimport { PsocOption, PsgcOption, HouseholdOption } from '@/types';\n\ninterface UseFormSearchesReturn {\n  // PSOC search state\n  psocOptions: PsocOption[];\n  psocLoading: boolean;\n  handlePsocSearch: (query: string) => Promise<void>;\n\n  // PSGC search state\n  psgcOptions: PsgcOption[];\n  psgcLoading: boolean;\n  handlePsgcSearch: (query: string) => Promise<void>;\n  setPsgcOptions: React.Dispatch<React.SetStateAction<PsgcOption[]>>;\n\n  // Household search state\n  householdOptions: HouseholdOption[];\n  householdLoading: boolean;\n  handleHouseholdSearch: (query: string) => Promise<void>;\n}\n\nexport const useFormSearches = (userBarangayCode?: string): UseFormSearchesReturn => {\n  // PSOC search state\n  const [psocOptions, setPsocOptions] = useState<PsocOption[]>([]);\n  const [psocLoading, setPsocLoading] = useState(false);\n\n  // PSGC search state\n  const [psgcOptions, setPsgcOptions] = useState<PsgcOption[]>([]);\n  const [psgcLoading, setPsgcLoading] = useState(false);\n\n  // Household search state\n  const [householdOptions, setHouseholdOptions] = useState<HouseholdOption[]>([]);\n  const [householdLoading, setHouseholdLoading] = useState(false);\n\n  // Handle PSOC search\n  const handlePsocSearch = useCallback(async (query: string) => {\n    if (!query.trim()) {\n      setPsocOptions([]);\n      setPsocLoading(false);\n      return;\n    }\n\n    if (query.length < 2) {\n      setPsocOptions([]);\n      return;\n    }\n\n    setPsocLoading(true);\n    try {\n      const params = new URLSearchParams({\n        q: query,\n        limit: '20',\n      });\n\n      const response = await fetch(`/api/psoc/search?${params}`);\n      if (!response.ok) throw new Error('PSOC search failed');\n\n      const data = await response.json();\n      const formattedOptions = (data.data || []).map(formatPsocOption);\n      setPsocOptions(formattedOptions);\n    } catch (error) {\n      // Error handled by setting empty options\n      setPsocOptions([]);\n    } finally {\n      setPsocLoading(false);\n    }\n  }, []);\n\n  // Handle PSGC search\n  const handlePsgcSearch = useCallback(async (query: string) => {\n    if (!query || query.trim().length < 2) {\n      setPsgcLoading(false);\n      return;\n    }\n\n    setPsgcLoading(true);\n    try {\n      const params = new URLSearchParams({\n        q: query,\n        limit: '50',\n        levels: 'province,city',\n        maxLevel: 'city',\n        minLevel: 'province',\n      });\n\n      const response = await fetch(`/api/psgc/search?${params}`);\n      if (!response.ok) throw new Error('PSGC search failed');\n\n      const data = await response.json();\n      const formattedOptions = (data.data || []).map(formatPsgcOption);\n      setPsgcOptions(formattedOptions);\n    } catch (error) {\n      // Error handled by setting empty options\n      setPsgcOptions([]);\n    } finally {\n      setPsgcLoading(false);\n    }\n  }, []);\n\n  // Handle household search\n  const handleHouseholdSearch = useCallback(\n    async (query: string) => {\n      if (!userBarangayCode) {\n        // No barangay code available\n        return;\n      }\n\n      setHouseholdLoading(true);\n      try {\n        const households = await searchHouseholdsCached(query, userBarangayCode);\n        setHouseholdOptions(households);\n      } catch (error) {\n        // Error handled by setting empty options\n        setHouseholdOptions([]);\n      } finally {\n        setHouseholdLoading(false);\n      }\n    },\n    [userBarangayCode]\n  );\n\n  return {\n    // PSOC\n    psocOptions,\n    psocLoading,\n    handlePsocSearch,\n\n    // PSGC\n    psgcOptions,\n    psgcLoading,\n    handlePsgcSearch,\n    setPsgcOptions,\n\n    // Household\n    householdOptions,\n    householdLoading,\n    handleHouseholdSearch,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/search/useGenericPaginatedSearch.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[641,644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[641,644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1285,1288],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1285,1288],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'restConfig' is assigned a value but never used.","line":56,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":64}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Generic Paginated Search Hook\n *\n * @description Refactored paginated search hook using extracted utilities.\n * Provides clean pagination support with filtering capabilities.\n */\n\nimport { useState, useEffect } from 'react';\n\nimport { useDebounce } from '@/hooks/utilities/useDebounce';\nimport {\n  PaginatedSearchConfig,\n  PaginatedSearchState,\n  PaginatedSearchFunction,\n  createPaginatedSearchState,\n  createPaginatedSearchExecutor,\n  createPaginatedSearchUtilities,\n} from '@/utils/search-utilities';\n\n/**\n * Return type for useGenericPaginatedSearch hook\n */\nexport interface UseGenericPaginatedSearchReturn<T, F = any> {\n  query: string;\n  setQuery: (query: string) => void;\n  results: T[];\n  pagination: {\n    current: number;\n    pageSize: number;\n    total: number;\n    hasMore: boolean;\n  };\n  isLoading: boolean;\n  error: Error | null;\n  filters?: F;\n  setFilters: (filters: F) => void;\n  clearSearch: () => void;\n  refresh: () => void;\n  loadMore: () => void;\n  setPage: (page: number) => void;\n  setPageSize: (pageSize: number) => void;\n}\n\n/**\n * Generic paginated search hook\n *\n * @description Provides comprehensive pagination support with filtering,\n * debouncing, and load-more functionality.\n */\nexport function useGenericPaginatedSearch<T, F = any>(\n  searchFn: PaginatedSearchFunction<T, F>,\n  config: PaginatedSearchConfig = {}\n): UseGenericPaginatedSearchReturn<T, F> {\n  const { debounceMs = 300, initialPageSize = 20, ...restConfig } = config;\n\n  const [state, setState] = useState<PaginatedSearchState<T>>(() =>\n    createPaginatedSearchState<T>('', initialPageSize)\n  );\n\n  const [filters, setFilters] = useState<F | undefined>();\n\n  const debouncedQuery = useDebounce(state.query, debounceMs);\n\n  // Create search executor\n  const executeSearch = createPaginatedSearchExecutor(searchFn, setState, config);\n\n  // Create search utilities\n  const { clearSearch, refresh, setQuery, loadMore, setPage, setPageSize } =\n    createPaginatedSearchUtilities(state, setState, executeSearch);\n\n  // Execute search when debounced query or filters change\n  useEffect(() => {\n    executeSearch(debouncedQuery, 1, filters, true);\n  }, [debouncedQuery, filters, executeSearch]);\n\n  return {\n    query: state.query,\n    setQuery,\n    results: state.results,\n    pagination: state.pagination,\n    isLoading: state.isLoading,\n    error: state.error,\n    filters,\n    setFilters,\n    clearSearch,\n    refresh,\n    loadMore,\n    setPage,\n    setPageSize,\n  };\n}\n\n// Export the hook as usePaginatedSearch for backward compatibility\nexport { useGenericPaginatedSearch as usePaginatedSearch };\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/search/useGenericSearch.ts","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'executeSearch'. Either include it or remove the dependency array.","line":113,"column":6,"nodeType":"ArrayExpression","endLine":113,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [debouncedQuery, executeSearch]","fix":{"range":[2935,2951],"text":"[debouncedQuery, executeSearch]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/search/useOptimizedHouseholdSearch.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1490,1493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1490,1493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'offset' is assigned a value but never used.","line":99,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":16},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":160,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":160,"endColumn":20,"suggestions":[{"fix":{"range":[4708,4867],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'userProfile.barangay_code'. Either exclude it or remove the dependency array.","line":227,"column":5,"nodeType":"ArrayExpression","endLine":234,"endColumn":6,"suggestions":[{"desc":"Update the dependencies array to be: [session?.access_token, enableCache, getCachedResult, setCachedResult, limit]","fix":{"range":[6978,7126],"text":"[session?.access_token, enableCache, getCachedResult, setCachedResult, limit]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Optimized Household Search Hook\n *\n * @description Refactored household search hook using common utilities.\n * Eliminates code duplication while maintaining functionality.\n */\n\nimport { useCallback, useState } from 'react';\n\nimport { useAuth } from '@/contexts';\nimport { supabase } from '@/lib/data/supabase';\nimport { useSearchCache, searchFormatters } from '@/utils/search-utilities';\n\nimport { useGenericSearch } from './useGenericSearch';\n\n/**\n * Household search result interface\n */\nexport interface HouseholdSearchResult {\n  id: string;\n  code: string;\n  name: string;\n  address: string;\n  house_number?: string;\n  geo_streets?: Array<{ name: string }>;\n  geo_subdivisions?: Array<{ name: string }>;\n  head_resident?: {\n    first_name?: string;\n    middle_name?: string;\n    last_name?: string;\n  };\n}\n\n/**\n * Household search options\n */\nexport interface UseHouseholdSearchOptions {\n  limit?: number;\n  debounceMs?: number;\n  enableCache?: boolean;\n}\n\n/**\n * Return type for useHouseholdSearch hook\n */\nexport interface UseHouseholdSearchReturn {\n  query: string;\n  setQuery: (query: string) => void;\n  options: HouseholdSearchResult[];\n  isLoading: boolean;\n  error: Error | null;\n  clearSearch: () => void;\n  refresh: () => void;\n  // Lazy loading support\n  hasMore: boolean;\n  loadMore: () => void;\n  isLoadingMore: boolean;\n  totalCount: number;\n}\n\n/**\n * Process households data and add computed fields\n */\nconst processHouseholdsData = (householdsData: any[]): HouseholdSearchResult[] => {\n  return householdsData.map(household => ({\n    id: household.id || household.code,\n    code: household.code,\n    name: household.name || `Household ${household.code}`,\n    address:\n      household.address ||\n      searchFormatters.formatAddress([\n        household.house_number,\n        household.geo_streets?.[0]?.name || '',\n        household.geo_subdivisions?.[0]?.name || '',\n      ]),\n    house_number: household.house_number,\n    geo_streets: household.geo_streets,\n    geo_subdivisions: household.geo_subdivisions,\n    head_resident: household.head_resident,\n  }));\n};\n\n/**\n * Optimized household search hook\n *\n * @description Provides search functionality for households within the user's barangay\n * with proper formatting and error handling.\n */\nexport function useOptimizedHouseholdSearch({\n  limit = 20,\n  debounceMs = 400,\n  enableCache = true,\n}: UseHouseholdSearchOptions = {}): UseHouseholdSearchReturn {\n  const { userProfile, session } = useAuth();\n\n  // Additional state for lazy loading\n  const [offset, setOffset] = useState(0);\n  const [allResults, setAllResults] = useState<HouseholdSearchResult[]>([]);\n  const [hasMore, setHasMore] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [totalCount, setTotalCount] = useState(0);\n\n  // Setup caching if enabled\n  const { getCachedResult, setCachedResult } = useSearchCache<HouseholdSearchResult>(\n    `households-${userProfile?.barangay_code || 'all'}`,\n    enableCache ? 100 : 0\n  );\n\n  /**\n   * Household search function with pagination support\n   */\n  const searchFunction = useCallback(\n    async (\n      query: string,\n      currentOffset: number = 0,\n      append: boolean = false\n    ): Promise<HouseholdSearchResult[]> => {\n      // Get fresh session from Supabase first\n      const {\n        data: { session: freshSession },\n      } = await supabase.auth.getSession();\n      const hasValidAuth = !!(freshSession?.access_token || session?.access_token);\n\n      // Check authentication requirements\n      if (!hasValidAuth) {\n        console.warn('Authentication required for household search');\n        throw new Error('Authentication required. Please sign in to search households.');\n      }\n\n      // Check cache first (only for initial search)\n      if (enableCache && currentOffset === 0) {\n        const cached = getCachedResult(query);\n        if (cached) {\n          setAllResults(cached);\n          setHasMore(false); // Cached results don't have pagination info\n          setTotalCount(cached.length);\n          return cached;\n        }\n      }\n\n      try {\n        // Build API request URL\n        const searchParams = new URLSearchParams({\n          page: Math.floor(currentOffset / limit) + 1 + '', // API expects 1-based page\n          limit: limit.toString(),\n        });\n\n        if (query && query.trim()) {\n          searchParams.set('search', query.trim());\n        }\n\n        // Get current session for authentication - always get fresh from Supabase\n        const {\n          data: { session: currentSession },\n        } = await supabase.auth.getSession();\n        const token = currentSession?.access_token || session?.access_token;\n\n        console.log('Auth check:', {\n          hasCurrentSession: !!currentSession,\n          hasToken: !!token,\n          tokenLength: token?.length || 0,\n        });\n\n        if (!token) {\n          throw new Error('Authentication required. Please sign in.');\n        }\n\n        const response = await fetch(`/api/households?${searchParams}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`,\n          },\n        });\n\n        if (!response.ok) {\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n\n        const apiResponse = await response.json();\n\n        // The API response structure: { data, pagination, message, metadata }\n        // No 'success' field - if response.ok is true, the request succeeded\n\n        const householdsData = apiResponse.data || [];\n        const results = processHouseholdsData(householdsData);\n\n        // Update pagination state based on API response\n        const { total, page: currentPage, limit: currentLimit } = apiResponse.pagination || {};\n        setTotalCount(total || 0);\n        setHasMore(results.length >= currentLimit && currentPage * currentLimit < (total || 0));\n\n        if (append) {\n          setAllResults(currentAllResults => {\n            const newAllResults = [...currentAllResults, ...results];\n            return newAllResults;\n          });\n          return results;\n        } else {\n          // Replace results (initial search)\n          setAllResults(results);\n\n          // Cache initial results\n          if (enableCache) {\n            setCachedResult(query, results);\n          }\n\n          return results;\n        }\n      } catch (error) {\n        console.error('Household search API error:', error);\n\n        // Handle authentication errors specifically\n        if (error instanceof Error && error.message.includes('401')) {\n          // Clear any cached authentication state that might be stale\n          setAllResults([]);\n          setHasMore(false);\n          setTotalCount(0);\n          throw new Error('Authentication required. Please sign in to search households.');\n        }\n\n        throw new Error('Unable to search households. Please try again.');\n      }\n    },\n    [\n      userProfile?.barangay_code,\n      session?.access_token,\n      enableCache,\n      getCachedResult,\n      setCachedResult,\n      limit,\n    ]\n  );\n\n  // Use generic search hook with modified search function\n  const {\n    query,\n    setQuery: originalSetQuery,\n    results: options,\n    isLoading,\n    error,\n    clearSearch: originalClearSearch,\n    refresh,\n  } = useGenericSearch(q => searchFunction(q, 0, false), {\n    debounceMs,\n    minQueryLength: 0,\n    onError: () => {\n      // Error already handled by search function and useGenericSearch\n    },\n  });\n\n  // Enhanced setQuery that resets pagination\n  const setQuery = useCallback(\n    (newQuery: string) => {\n      setOffset(0);\n      setAllResults([]);\n      setHasMore(false);\n      originalSetQuery(newQuery);\n    },\n    [originalSetQuery]\n  );\n\n  // Enhanced clear search\n  const clearSearch = useCallback(() => {\n    setOffset(0);\n    setAllResults([]);\n    setHasMore(false);\n    setTotalCount(0);\n    originalClearSearch();\n  }, [originalClearSearch]);\n\n  // Load more function for lazy loading\n  const loadMore = useCallback(async () => {\n    if (!hasMore || isLoadingMore || !query.trim()) return;\n\n    setIsLoadingMore(true);\n\n    // Use functional update to get current length without dependency\n    let currentOffset = 0;\n    setAllResults(currentResults => {\n      currentOffset = currentResults.length;\n      return currentResults; // No change, just get the length\n    });\n\n    setOffset(currentOffset);\n\n    try {\n      await searchFunction(query, currentOffset, true);\n    } catch (error) {\n      console.error('Failed to load more results:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [hasMore, isLoadingMore, query, searchFunction]);\n\n  return {\n    query,\n    setQuery,\n    options: allResults.length > 0 ? allResults : options || [], // Use allResults when available for pagination\n    isLoading,\n    error,\n    clearSearch,\n    refresh,\n    hasMore,\n    loadMore,\n    isLoadingMore,\n    totalCount,\n  };\n}\n\n// Export as useHouseholdSearch for backward compatibility\nexport { useOptimizedHouseholdSearch as useHouseholdSearch };\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/search/usePsgcSearch.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'searchFormatters' is defined but never used.","line":12,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'offset' is assigned a value but never used.","line":98,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":98,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":171,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":171,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":190,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":190,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Optimized PSGC Search Hook\n *\n * @description Refactored PSGC search hook using common utilities.\n * Maintains the same API while using shared search patterns.\n */\n\nimport { useCallback, useState } from 'react';\n\nimport { useSearchCache, searchFormatters } from '@/utils/search-utilities';\n\nimport { useGenericSearch } from './useGenericSearch';\n\n/**\n * PSGC search result interface\n */\nexport interface PsgcSearchResult {\n  code: string;\n  name: string;\n  level: 'region' | 'province' | 'city' | 'municipality' | 'barangay';\n  parent_code?: string;\n  full_address?: string;\n}\n\n/**\n * PSGC search options\n */\nexport interface UsePsgcSearchOptions {\n  levels?: 'region' | 'province' | 'city' | 'municipality' | 'barangay' | 'all';\n  limit?: number;\n  parentCode?: string;\n  debounceMs?: number;\n  enableCache?: boolean;\n}\n\n/**\n * Return type for usePsgcSearch hook\n */\nexport interface UsePsgcSearchReturn {\n  query: string;\n  setQuery: (query: string) => void;\n  options: PsgcSearchResult[];\n  isLoading: boolean;\n  error: Error | null;\n  clearSearch: () => void;\n  refresh: () => void;\n  searchByLevel: (level: string, query: string) => Promise<void>;\n  // Lazy loading support\n  hasMore: boolean;\n  loadMore: () => void;\n  isLoadingMore: boolean;\n  totalCount: number;\n}\n\n/**\n * PSGC API implementation\n */\nconst psgcApi = {\n  async searchLocations(params: {\n    query: string;\n    levels: string;\n    limit: number;\n    parentCode?: string;\n  }): Promise<PsgcSearchResult[]> {\n    const searchParams = new URLSearchParams({\n      q: params.query,\n      limit: params.limit.toString(),\n      ...(params.parentCode && { parentCode: params.parentCode }),\n      ...(params.levels !== 'all' && { levels: params.levels }),\n    });\n\n    const response = await fetch(`/api/psgc/search?${searchParams}`);\n    if (!response.ok) {\n      throw new Error('Failed to search PSGC locations');\n    }\n\n    const data = await response.json();\n    return data.data || [];\n  },\n};\n\n/**\n * PSGC search hook\n *\n * @description Provides search functionality for Philippine Standard Geographic Code (PSGC)\n * locations with caching, debouncing, and level filtering.\n */\nexport function usePsgcSearch({\n  levels = 'barangay',\n  limit = 50,\n  parentCode,\n  debounceMs = 300,\n  enableCache = true,\n}: UsePsgcSearchOptions = {}): UsePsgcSearchReturn {\n  // Additional state for lazy loading\n  const [offset, setOffset] = useState(0);\n  const [allResults, setAllResults] = useState<PsgcSearchResult[]>([]);\n  const [hasMore, setHasMore] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [totalCount, setTotalCount] = useState(0);\n\n  // Setup caching if enabled\n  const { getCachedResult, setCachedResult } = useSearchCache<PsgcSearchResult>(\n    `psgc-${levels}-${parentCode || 'all'}`,\n    enableCache ? 100 : 0\n  );\n\n  /**\n   * PSGC search function with pagination support\n   */\n  const searchFunction = useCallback(\n    async (\n      query: string,\n      currentOffset: number = 0,\n      append: boolean = false\n    ): Promise<PsgcSearchResult[]> => {\n      if (!query.trim()) {\n        setAllResults([]);\n        setHasMore(false);\n        setTotalCount(0);\n        return [];\n      }\n\n      // Check cache first (only for initial search)\n      if (enableCache && currentOffset === 0) {\n        const cached = getCachedResult(query);\n        if (cached) {\n          setAllResults(cached);\n          setHasMore(false); // Cached results don't have pagination info\n          setTotalCount(cached.length);\n          return cached;\n        }\n      }\n\n      try {\n        const response = await fetch(\n          `/api/psgc/search?q=${encodeURIComponent(query.trim())}&levels=${levels}&limit=${limit}&offset=${currentOffset}&parentCode=${parentCode || ''}`\n        );\n        if (!response.ok) {\n          throw new Error('Failed to search PSGC locations');\n        }\n\n        const data = await response.json();\n        const results = data.data || [];\n\n        // Update pagination state\n        setTotalCount(data.totalCount || 0);\n        setHasMore(data.hasMore || false);\n\n        if (append) {\n          // Use functional update to avoid stale closure\n          setAllResults(currentAllResults => {\n            const newAllResults = [...currentAllResults, ...results];\n            return newAllResults;\n          });\n          // Return the new combined results for immediate use\n          return results; // Return just the new results, not the combined array\n        } else {\n          // Replace results (initial search)\n          setAllResults(results);\n\n          // Cache initial results\n          if (enableCache) {\n            setCachedResult(query, results);\n          }\n\n          return results;\n        }\n      } catch (error) {\n        throw new Error('Failed to search PSGC locations');\n      }\n    },\n    [levels, limit, parentCode, enableCache, getCachedResult, setCachedResult]\n  ); // Remove allResults from dependencies\n\n  // Use generic search hook with modified search function\n  const {\n    query,\n    setQuery: originalSetQuery,\n    results: options,\n    isLoading,\n    error,\n    clearSearch: originalClearSearch,\n    refresh,\n  } = useGenericSearch(q => searchFunction(q, 0, false), {\n    debounceMs,\n    minQueryLength: 2,\n    onError: error => {},\n  });\n\n  // Enhanced setQuery that resets pagination\n  const setQuery = useCallback(\n    (newQuery: string) => {\n      setOffset(0);\n      setAllResults([]);\n      setHasMore(false);\n      originalSetQuery(newQuery);\n    },\n    [originalSetQuery]\n  );\n\n  // Enhanced clear search\n  const clearSearch = useCallback(() => {\n    setOffset(0);\n    setAllResults([]);\n    setHasMore(false);\n    setTotalCount(0);\n    originalClearSearch();\n  }, [originalClearSearch]);\n\n  // Load more function for lazy loading\n  const loadMore = useCallback(async () => {\n    if (!hasMore || isLoadingMore || !query.trim()) return;\n\n    setIsLoadingMore(true);\n\n    // Use functional update to get current length without dependency\n    let currentOffset = 0;\n    setAllResults(currentResults => {\n      currentOffset = currentResults.length;\n      return currentResults; // No change, just get the length\n    });\n\n    setOffset(currentOffset);\n\n    try {\n      await searchFunction(query, currentOffset, true);\n    } catch (error) {\n      console.error('Failed to load more results:', error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [hasMore, isLoadingMore, query, searchFunction]);\n\n  /**\n   * Search by specific level\n   */\n  const searchByLevel = useCallback(\n    async (level: string, searchQuery: string): Promise<void> => {\n      try {\n        await psgcApi.searchLocations({\n          query: searchQuery.trim(),\n          levels: level,\n          limit,\n          parentCode,\n        });\n\n        // Update query to trigger re-render with new results\n        setQuery(searchQuery);\n      } catch (error) {\n        throw error;\n      }\n    },\n    [limit, parentCode, setQuery]\n  );\n\n  return {\n    query,\n    setQuery,\n    options: allResults.length > 0 ? allResults : options, // Use allResults when available for pagination\n    isLoading,\n    error,\n    clearSearch,\n    refresh,\n    searchByLevel,\n    hasMore,\n    loadMore,\n    isLoadingMore,\n    totalCount,\n  };\n}\n\n// Export as default\nexport default usePsgcSearch;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/search/useStreetsSearch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/search/useSubdivisionsSearch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/tests/useAsyncErrorBoundary.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/tests/useOptimizedResidentValidation.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1571,1574],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1571,1574],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Test Suite for useOptimizedResidentValidation Hook\n */\n\nimport { renderHook, act } from '@testing-library/react';\n\nimport { useOptimizedResidentValidation } from '../validation/useOptimizedResidentValidation';\n\n// Mock dependencies\njest.mock('../useResidentValidationCore', () => ({\n  useResidentValidationCore: jest.fn(() => ({\n    validateRequired: jest.fn(),\n    validateTypes: jest.fn(),\n    getValidationErrors: jest.fn(() => ({})),\n  })),\n}));\n\njest.mock('../useResidentCrossFieldValidation', () => ({\n  useResidentCrossFieldValidation: jest.fn(() => ({\n    validateCrossFields: jest.fn(),\n    getCrossFieldErrors: jest.fn(() => ({})),\n  })),\n}));\n\njest.mock('../useResidentAsyncValidation', () => ({\n  useResidentAsyncValidation: jest.fn(() => ({\n    validateFieldAsync: jest.fn(),\n    isAsyncValidating: false,\n    asyncErrors: {},\n  })),\n}));\n\njest.mock('../useResidentValidationProgress', () => ({\n  useResidentValidationProgress: jest.fn(() => ({\n    progress: { completed: 0, total: 0, percentage: 0 },\n    updateProgress: jest.fn(),\n  })),\n}));\n\ndescribe('useOptimizedResidentValidation', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('initialization', () => {\n    it('should initialize with default state', () => {\n      const { result } = renderHook(() => useOptimizedResidentValidation());\n\n      expect(result.current.isValidating).toBe(false);\n      expect(result.current.errors).toEqual({});\n      expect(result.current.isValid).toBe(true);\n    });\n\n    it('should accept custom options', () => {\n      const options: any = {\n        mode: 'onChange',\n        debounceDelay: 500,\n      };\n\n      const { result } = renderHook(() => useOptimizedResidentValidation(options));\n\n      expect(result.current).toBeDefined();\n    });\n  });\n\n  describe('validation orchestration', () => {\n    it('should orchestrate all validation hooks', () => {\n      const { result } = renderHook(() => useOptimizedResidentValidation());\n\n      act(() => {\n        result.current.validateField('firstName', 'John');\n      });\n\n      // Should call all validation components\n      expect(result.current.validateField).toBeDefined();\n      expect(result.current.validateFieldAsync).toBeDefined();\n      expect(result.current.clearFieldError).toBeDefined();\n    });\n\n    it('should handle validation errors correctly', () => {\n      const { result } = renderHook(() => useOptimizedResidentValidation());\n\n      act(() => {\n        result.current.setFieldError('firstName', 'Required field');\n      });\n\n      expect(result.current.isValid).toBe(false);\n      expect(result.current.getFieldError('firstName')).toBe('Required field');\n    });\n  });\n\n  describe('async validation', () => {\n    it('should handle async validation state', async () => {\n      const { result } = renderHook(() => useOptimizedResidentValidation());\n\n      expect(result.current.isAsyncValidating).toBe(false);\n\n      await act(async () => {\n        await result.current.validateFieldAsync('email', 'test@example.com');\n      });\n\n      // Async validation should be handled\n      expect(result.current.validateFieldAsync).toBeDefined();\n    });\n  });\n\n  describe('performance optimization', () => {\n    it('should memoize validation results', () => {\n      const { result, rerender } = renderHook(() => useOptimizedResidentValidation());\n\n      const firstValidateField = result.current.validateField;\n\n      rerender();\n\n      const secondValidateField = result.current.validateField;\n\n      // Functions should be memoized\n      expect(firstValidateField).toBe(secondValidateField);\n    });\n  });\n\n  describe('error management', () => {\n    it('should clear specific field errors', () => {\n      const { result } = renderHook(() => useOptimizedResidentValidation());\n\n      act(() => {\n        result.current.setFieldError('firstName', 'Error 1');\n        result.current.setFieldError('lastName', 'Error 2');\n      });\n\n      expect(result.current.isValid).toBe(false);\n\n      act(() => {\n        result.current.clearFieldError('firstName');\n      });\n\n      expect(result.current.getFieldError('firstName')).toBeUndefined();\n      expect(result.current.getFieldError('lastName')).toBe('Error 2');\n    });\n\n    it('should clear all errors', () => {\n      const { result } = renderHook(() => useOptimizedResidentValidation());\n\n      act(() => {\n        result.current.setFieldError('firstName', 'Error 1');\n        result.current.setFieldError('lastName', 'Error 2');\n      });\n\n      expect(result.current.isValid).toBe(false);\n\n      act(() => {\n        result.current.clearFieldError('firstName');\n      });\n\n      expect(result.current.isValid).toBe(true);\n      expect(result.current.errors).toEqual({});\n    });\n  });\n\n  describe('integration with child hooks', () => {\n    it('should integrate with validation core', () => {\n      const { result } = renderHook(() => useOptimizedResidentValidation());\n\n      // Should have access to core validation functionality\n      expect(result.current.validateField).toBeDefined();\n      expect(result.current.getFieldError).toBeDefined();\n    });\n\n    it('should integrate with cross-field validation', () => {\n      const { result } = renderHook(() => useOptimizedResidentValidation());\n\n      // Should have access to cross-field validation\n      expect(result.current.validateField).toBeDefined();\n    });\n\n    it('should integrate with async validation', () => {\n      const { result } = renderHook(() => useOptimizedResidentValidation());\n\n      // Should have access to async validation\n      expect(result.current.validateFieldAsync).toBeDefined();\n      expect(result.current.isAsyncValidating).toBeDefined();\n    });\n\n    it('should integrate with validation progress', () => {\n      const { result } = renderHook(() => useOptimizedResidentValidation());\n\n      // Should have access to progress tracking\n      expect(result.current.getValidationProgress).toBeDefined();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/ui/useCommandMenu.ts","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":12,"column":27,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":12,"endColumn":53},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useRouter\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":13,"column":12,"nodeType":"Identifier","endLine":13,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":18,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":18,"endColumn":20,"suggestions":[{"fix":{"range":[627,663],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":24,"column":34,"nodeType":"MemberExpression","messageId":"limited","endLine":24,"endColumn":45},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":25,"column":19,"nodeType":"MemberExpression","messageId":"limited","endLine":25,"endColumn":30},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":26,"column":22,"nodeType":"MemberExpression","messageId":"limited","endLine":26,"endColumn":33},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":27,"column":22,"nodeType":"MemberExpression","messageId":"limited","endLine":27,"endColumn":33},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'close' and 'executeCommand'. Either include them or remove the dependency array.","line":114,"column":6,"nodeType":"ArrayExpression","endLine":114,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, filteredItems, selectedIndex, close, executeCommand]","fix":{"range":[3648,3686],"text":"[isOpen, filteredItems, selectedIndex, close, executeCommand]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect, useCallback, useMemo } from 'react';\n\nimport { useCommandMenuShortcut, createDropdownKeyHandler } from '@/lib/keyboardUtils';\nimport type { CommandMenuSearchResult as CommandMenuItem } from '@/types';\n\n// Safe router hook that works in both Next.js and Storybook environments\nfunction useSafeRouter() {\n  try {\n    // Only import useRouter when we're in a Next.js environment\n    const { useRouter } = require('next/navigation');\n    return useRouter();\n  } catch {\n    // Return a mock router for Storybook/testing environments\n    return {\n      push: (href: string) => {\n        console.log('Navigation to:', href);\n        // In Storybook, we can use window.location or just log\n        if (typeof window !== 'undefined' && window.location) {\n          window.location.href = href;\n        }\n      },\n      replace: (href: string) => console.log('Replace with:', href),\n      back: () => console.log('Navigate back'),\n      forward: () => console.log('Navigate forward'),\n      refresh: () => console.log('Refresh page'),\n    };\n  }\n}\n\ninterface UseCommandMenuProps {\n  items: CommandMenuItem[];\n  maxResults?: number;\n}\n\nexport function useCommandMenu({ items, maxResults = 10 }: UseCommandMenuProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const router = useSafeRouter();\n\n  // Filter and search items\n  const filteredItems = useMemo(() => {\n    if (!searchQuery.trim()) {\n      // Show recent items first when no search query\n      const recentItems = items.filter(item => item.recent).slice(0, 5);\n      const otherItems = items\n        .filter(item => !item.recent)\n        .slice(0, maxResults - recentItems.length);\n      return [...recentItems, ...otherItems];\n    }\n\n    const query = searchQuery.toLowerCase();\n    const scored = items\n      .map(item => {\n        let score = 0;\n        const label = item.label?.toLowerCase() || '';\n        const description = item.description?.toLowerCase() || '';\n        const keywords = item.keywords?.join(' ').toLowerCase() || '';\n\n        // Exact match gets highest score\n        if (label === query) score += 100;\n        else if (label.startsWith(query)) score += 50;\n        else if (label.includes(query)) score += 25;\n\n        // Description matches\n        if (description.includes(query)) score += 15;\n\n        // Keywords matches\n        if (keywords.includes(query)) score += 10;\n\n        return { item, score };\n      })\n      .filter(({ score }) => score > 0)\n      .sort((a, b) => b.score - a.score)\n      .slice(0, maxResults)\n      .map(({ item }) => item);\n\n    return scored;\n  }, [items, searchQuery, maxResults]);\n\n  // Reset selected index when filtered items change\n  useEffect(() => {\n    setSelectedIndex(0);\n  }, [filteredItems]);\n\n  // Global keyboard shortcut for opening command menu\n  useCommandMenuShortcut(() => setIsOpen(true), true);\n\n  // Command menu navigation when open\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const handleMenuKeyDown = createDropdownKeyHandler({\n      isOpen: true,\n      selectedIndex,\n      itemCount: filteredItems.length,\n      onClose: close,\n      onSelect: (index: number) => {\n        if (filteredItems[index]) {\n          executeCommand(filteredItems[index]);\n        }\n      },\n      onNavigate: setSelectedIndex\n    });\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      handleMenuKeyDown(event);\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, filteredItems, selectedIndex]);\n\n  const open = useCallback(() => {\n    setIsOpen(true);\n    setSearchQuery('');\n    setSelectedIndex(0);\n  }, []);\n\n  const close = useCallback(() => {\n    setIsOpen(false);\n    setSearchQuery('');\n    setSelectedIndex(0);\n  }, []);\n\n  const toggle = useCallback(() => {\n    if (isOpen) {\n      close();\n    } else {\n      open();\n    }\n  }, [isOpen, open, close]);\n\n  const executeCommand = useCallback(\n    (item: CommandMenuItem) => {\n      if (item.disabled) return;\n\n      // Close menu first\n      close();\n\n      // Execute the command\n      if (item.onClick) {\n        item.onClick();\n      } else if (item.href) {\n        router.push(item.href);\n      }\n\n      // Mark as recent (this would typically be handled by a context or store)\n      // For now, we'll just trigger the action\n    },\n    [close, router]\n  );\n\n  return {\n    isOpen,\n    open,\n    close,\n    toggle,\n    searchQuery,\n    setSearchQuery,\n    filteredItems,\n    selectedIndex,\n    setSelectedIndex,\n    executeCommand,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/ui/useCommandMenuWithApi.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getAllCommandMenuItems' is defined but never used.","line":28,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":53},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'handleQuickAction'. Either include it or remove the dependency array.","line":144,"column":6,"nodeType":"ArrayExpression","endLine":144,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [handleQuickAction]","fix":{"range":[4941,4943],"text":"[handleQuickAction]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'close' and 'executeCommand'. Either include them or remove the dependency array.","line":270,"column":6,"nodeType":"ArrayExpression","endLine":270,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, filteredItems, selectedIndex, close, executeCommand]","fix":{"range":[8936,8974],"text":"[isOpen, filteredItems, selectedIndex, close, executeCommand]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useRouter } from 'next/navigation';\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { toast } from 'react-hot-toast';\n\n\nimport {\n  trackCommandMenuSearch,\n  trackCommandMenuNavigation,\n  trackCommandMenuAction,\n  trackCommandMenuError,\n} from '@/lib/command-menu/analytics-utils';\nimport {\n  searchData,\n  exportData,\n  backupData,\n  getRecentItems as getRecentApiItems,\n  clearRecentItems as clearRecentApiItems,\n  createResident,\n  createHousehold,\n  findSeniorCitizens,\n  findPWDs,\n  findSoloParents,\n  generateCertificate,\n  generateReport,\n} from '@/lib/command-menu/api-utils';\nimport { getCommandMenuItems, getAllCommandMenuItems } from '@/lib/command-menu/items-utils';\nimport { trackSearch, trackNavigation, trackAction } from '@/lib/data';\nimport { useCommandMenuShortcut, createDropdownKeyHandler } from '@/lib/keyboardUtils';\nimport type { CommandMenuSearchResult as CommandMenuItem } from '@/types';\n\ninterface UseCommandMenuWithApiProps {\n  maxResults?: number;\n}\n\nexport function useCommandMenuWithApi({ maxResults = 10 }: UseCommandMenuWithApiProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [dynamicResults, setDynamicResults] = useState<CommandMenuItem[]>([]);\n  const [recentItems, setRecentItems] = useState<CommandMenuItem[]>([]);\n\n  const router = useRouter();\n\n  // Load recent items when menu opens\n  useEffect(() => {\n    if (isOpen) {\n      loadRecentItems(); // Always reload to get latest recent items\n    }\n  }, [isOpen]);\n\n  const loadRecentItems = async () => {\n    try {\n      const recent = await getRecentApiItems();\n      const recentMenuItems: CommandMenuItem[] = recent.map(item => ({\n        id: `recent-${item.id}`,\n        title: item.title,\n        subtitle: item.description,\n        group: 'Recent',\n        data: item.href,\n        score: 0,\n        type: 'navigation' as const,\n        recent: true,\n      }));\n      setRecentItems(recentMenuItems);\n    } catch (error) {\n      console.error('Failed to load recent items:', error);\n    }\n  };\n\n  const handleClearRecentItems = async () => {\n    try {\n      const success = await clearRecentApiItems();\n      if (success) {\n        setRecentItems([]); // Clear the UI immediately\n        toast.success('Recent items cleared');\n      } else {\n        toast.error('Failed to clear recent items');\n      }\n    } catch (error) {\n      console.error('Failed to clear recent items:', error);\n      toast.error('Failed to clear recent items');\n    }\n  };\n\n  // Get static menu items with API-powered actions\n  const staticMenuItems = useMemo(() => {\n    const baseItems = getCommandMenuItems();\n\n    // Enhance static items with real API functionality\n    return baseItems.map(item => {\n      const enhancedItem = { ...item };\n\n      // Add real onClick handlers for specific actions\n      switch (item.id) {\n        case 'export-residents':\n          enhancedItem.onClick = () => handleExportData('residents', 'csv');\n          break;\n        case 'export-households':\n          enhancedItem.onClick = () => handleExportData('households', 'csv');\n          break;\n        case 'admin-backup':\n          enhancedItem.onClick = () => handleBackupData();\n          break;\n        case 'action-add-resident':\n          enhancedItem.onClick = () => handleQuickAction(async () => createResident());\n          break;\n        case 'action-create-household':\n          enhancedItem.onClick = () => handleQuickAction(async () => createHousehold());\n          break;\n        case 'search-seniors':\n          enhancedItem.onClick = () => handleQuickAction(async () => findSeniorCitizens());\n          break;\n        case 'search-pwd':\n          enhancedItem.onClick = () => handleQuickAction(async () => findPWDs());\n          break;\n        case 'search-solo-parents':\n          enhancedItem.onClick = () => handleQuickAction(async () => findSoloParents());\n          break;\n        case 'cert-barangay-clearance':\n          enhancedItem.onClick = () =>\n            handleQuickAction(async () => generateCertificate('clearance'));\n          break;\n        case 'cert-residency':\n          enhancedItem.onClick = () =>\n            handleQuickAction(async () => generateCertificate('residency'));\n          break;\n        case 'cert-indigency':\n          enhancedItem.onClick = () =>\n            handleQuickAction(async () => generateCertificate('indigency'));\n          break;\n        case 'report-population':\n          enhancedItem.onClick = () => handleQuickAction(async () => generateReport('population'));\n          break;\n        case 'report-households-summary':\n          enhancedItem.onClick = () => handleQuickAction(async () => generateReport('households'));\n          break;\n      }\n\n      return enhancedItem;\n    });\n  }, []);\n\n  // Search with API integration\n  useEffect(() => {\n    const searchWithApi = async () => {\n      if (!searchQuery.trim()) {\n        setDynamicResults([]);\n        return;\n      }\n\n      setIsLoading(true);\n      try {\n        // Track the search query in recent items\n        trackSearch(searchQuery);\n\n        const apiResults = await searchData(searchQuery, 5);\n\n        // Track search analytics\n        trackCommandMenuSearch(searchQuery, apiResults.length);\n        const dynamicMenuItems: CommandMenuItem[] = apiResults.map(result => ({\n          id: `search-${result.id}`,\n          title: result.title,\n          subtitle: result.description,\n          data: result.href,\n          score: 0,\n          type: 'navigation' as const,\n          group: 'Search Results',\n          label: result.title,\n          description: result.description,\n          href: result.href,\n          keywords: [result.title.toLowerCase(), result.type],\n          icon:\n            result.type === 'resident'\n              ? staticMenuItems.find(i => i.id === 'nav-residents')?.icon\n              : staticMenuItems.find(i => i.id === 'nav-households')?.icon,\n        }));\n\n        setDynamicResults(dynamicMenuItems);\n      } catch (error) {\n        console.error('Search error:', error);\n        trackCommandMenuError(error as Error, {\n          context: 'search',\n          query: searchQuery.slice(0, 50),\n        });\n        setDynamicResults([]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    const debounce = setTimeout(searchWithApi, 300);\n    return () => clearTimeout(debounce);\n  }, [searchQuery, staticMenuItems]);\n\n  // Combine all items based on search state\n  const allItems = useMemo(() => {\n    let items: CommandMenuItem[] = [];\n\n    if (searchQuery.trim()) {\n      // Show dynamic search results first, then filtered static items\n      items = [...dynamicResults];\n\n      // Add matching static items\n      const query = searchQuery.toLowerCase();\n      const matchingStaticItems = staticMenuItems.filter(\n        item =>\n          item.label?.toLowerCase().includes(query) ||\n          item.description?.toLowerCase().includes(query) ||\n          item.keywords?.some(keyword => keyword.includes(query))\n      );\n\n      items.push(...matchingStaticItems);\n    } else {\n      // Show recent items first, then all static items\n      // Ensure static items are always shown when there's no search query\n      items = [...recentItems, ...staticMenuItems];\n    }\n\n    // Ensure we always have at least the static menu items\n    if (items.length === 0 && staticMenuItems.length > 0) {\n      items = staticMenuItems;\n    }\n\n    // Only limit results for search queries - show all static items when browsing\n    const limit = searchQuery.trim() ? maxResults : Math.max(maxResults, staticMenuItems.length);\n    return items.slice(0, limit);\n  }, [searchQuery, dynamicResults, staticMenuItems, recentItems, maxResults]);\n\n  // Filter and search items (legacy compatibility)\n  const filteredItems = allItems;\n\n  // Reset selected index when filtered items change\n  useEffect(() => {\n    setSelectedIndex(0);\n  }, [filteredItems]);\n\n  // Global keyboard shortcut for opening command menu (with input focus check)\n  useCommandMenuShortcut(() => {\n    if (!isInputFocused()) {\n      setIsOpen(true);\n    }\n  }, true);\n\n  // Command menu navigation when open\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const handleMenuKeyDown = createDropdownKeyHandler({\n      isOpen: true,\n      selectedIndex,\n      itemCount: filteredItems.length,\n      onClose: close,\n      onSelect: (index: number) => {\n        if (filteredItems[index]) {\n          executeCommand(filteredItems[index]);\n        }\n      },\n      onNavigate: setSelectedIndex\n    });\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      handleMenuKeyDown(event);\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, filteredItems, selectedIndex]);\n\n  // Helper to check if an input is currently focused\n  const isInputFocused = () => {\n    const activeElement = document.activeElement;\n    return (\n      activeElement && (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA')\n    );\n  };\n\n  const open = useCallback(() => {\n    setIsOpen(true);\n    setSearchQuery('');\n    setSelectedIndex(0);\n  }, []);\n\n  const close = useCallback(() => {\n    setIsOpen(false);\n    setSearchQuery('');\n    setSelectedIndex(0);\n    setDynamicResults([]);\n  }, []);\n\n  const toggle = useCallback(() => {\n    if (isOpen) {\n      close();\n    } else {\n      open();\n    }\n  }, [isOpen, open, close]);\n\n  // API action handlers\n  const handleExportData = async (type: 'residents' | 'households', format: 'csv' | 'xlsx') => {\n    toast.loading('Preparing export...', { id: 'export' });\n    const success = await exportData({ type, format });\n\n    if (success) {\n      toast.success('Export completed successfully', { id: 'export' });\n    } else {\n      toast.error('Export failed', { id: 'export' });\n    }\n  };\n\n  const handleBackupData = async () => {\n    toast.loading('Creating backup...', { id: 'backup' });\n    const success = await backupData();\n\n    if (success) {\n      toast.success('Backup created successfully', { id: 'backup' });\n    } else {\n      toast.error('Backup failed', { id: 'backup' });\n    }\n  };\n\n  const handleQuickAction = async (actionFn: () => Promise<string>) => {\n    try {\n      const href = await actionFn();\n      router.push(href);\n    } catch (error) {\n      toast.error('Action failed');\n      console.error('Quick action error:', error);\n    }\n  };\n\n  const executeCommand = useCallback(\n    (item: CommandMenuItem) => {\n      if (item.disabled) return;\n\n      close();\n\n      // Track the interaction based on item type\n      if (item.id.startsWith('search-')) {\n        // Track navigation to search result\n        const originalId = item.id.replace('search-', '');\n        const type = item.description?.includes('Resident') ? 'resident' : 'household';\n        if (item.href) {\n          trackNavigation(\n            originalId,\n            item.label || item.title || 'Unknown',\n            item.description || '',\n            type as 'resident' | 'household',\n            item.href\n          );\n          trackCommandMenuNavigation(originalId, type, item.href);\n        }\n      } else if (item.onClick) {\n        // Track action execution\n        trackAction(item.id, item.label || item.title || 'Unknown', item.description || '');\n        trackCommandMenuAction(item.id, 'click_action');\n      } else if (item.href) {\n        // Track navigation\n        trackAction(\n          item.id,\n          item.label || item.title || 'Unknown',\n          `Navigated to ${item.label || item.title || 'Unknown'}`\n        );\n        trackCommandMenuNavigation(item.id, 'navigation', item.href);\n      }\n\n      if (item.onClick) {\n        item.onClick();\n      } else if (item.href) {\n        router.push(item.href);\n      }\n    },\n    [close, router]\n  );\n\n  return {\n    isOpen,\n    open,\n    close,\n    toggle,\n    searchQuery,\n    setSearchQuery,\n    filteredItems,\n    selectedIndex,\n    setSelectedIndex,\n    executeCommand,\n    isLoading,\n    dynamicResults: dynamicResults.length,\n    recentItems: recentItems.length,\n    handleClearRecentItems,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/useURLParameters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/tests/usePreloadOnHover.test.ts","messages":[{"ruleId":"import/order","severity":1,"message":"`@/lib` import should occur before import of `../usePreloadOnHover`","line":26,"column":1,"nodeType":"ImportDeclaration","endLine":26,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @file Unit tests for usePreloadOnHover hook\n * @description Comprehensive test coverage for component preloading hook\n */\n\nimport { renderHook } from '@testing-library/react';\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\n\nimport { usePreloadOnHover } from '../usePreloadOnHover';\n\n// Mock the preloadComponents import\nvi.mock('@/lib/ui/lazy-loading', () => ({\n  preloadComponents: {\n    dataTable: vi.fn(),\n    createHouseholdModal: vi.fn(),\n    populationPyramid: vi.fn(),\n    userProfile: vi.fn(),\n    personalInformation: vi.fn(),\n    sectoralInfo: vi.fn(),\n    errorModal: vi.fn(),\n    successModal: vi.fn(),\n  },\n}));\n\n// Import after mocking to ensure mock is applied\nimport { preloadComponents } from '@/lib';\n\ndescribe('usePreloadOnHover', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  it('should return an object with onMouseEnter handler', () => {\n    const { result } = renderHook(() => usePreloadOnHover('dataTable'));\n\n    expect(result.current).toEqual({\n      onMouseEnter: expect.any(Function),\n    });\n  });\n\n  it('should call the correct preload function when onMouseEnter is triggered', () => {\n    const { result } = renderHook(() => usePreloadOnHover('dataTable'));\n\n    // Trigger the onMouseEnter handler\n    result.current.onMouseEnter();\n\n    expect(preloadComponents.dataTable).toHaveBeenCalledTimes(1);\n  });\n\n  it('should work with different component keys', () => {\n    const componentKeys = [\n      'createHouseholdModal',\n      'populationPyramid',\n      'userProfile',\n      'personalInformation',\n      'sectoralInfo',\n      'errorModal',\n      'successModal',\n    ] as const;\n\n    componentKeys.forEach(key => {\n      const { result } = renderHook(() => usePreloadOnHover(key));\n\n      result.current.onMouseEnter();\n\n      expect(preloadComponents[key]).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  it('should handle multiple calls to the same preload function', () => {\n    const { result } = renderHook(() => usePreloadOnHover('dataTable'));\n\n    // Call multiple times\n    result.current.onMouseEnter();\n    result.current.onMouseEnter();\n    result.current.onMouseEnter();\n\n    expect(preloadComponents.dataTable).toHaveBeenCalledTimes(3);\n  });\n\n  it('should only call the specified component preload function', () => {\n    const { result } = renderHook(() => usePreloadOnHover('dataTable'));\n\n    result.current.onMouseEnter();\n\n    // Should only call dataTable preload\n    expect(preloadComponents.dataTable).toHaveBeenCalledTimes(1);\n    expect(preloadComponents.createHouseholdModal).not.toHaveBeenCalled();\n    expect(preloadComponents.populationPyramid).not.toHaveBeenCalled();\n    expect(preloadComponents.userProfile).not.toHaveBeenCalled();\n  });\n\n  it('should handle preload function throwing an error gracefully', () => {\n    const consoleSpy = vi.spyOn(console, 'warn').mockImplementation(() => {});\n    const mockError = new Error('Preload failed');\n\n    // Make the preload function throw\n    vi.mocked(preloadComponents.dataTable).mockImplementation(() => {\n      throw mockError;\n    });\n\n    const { result } = renderHook(() => usePreloadOnHover('dataTable'));\n\n    // Should not throw when onMouseEnter is called\n    expect(() => {\n      result.current.onMouseEnter();\n    }).not.toThrow();\n\n    // Should log a warning\n    expect(consoleSpy).toHaveBeenCalledWith('Failed to preload component \"dataTable\":', mockError);\n\n    consoleSpy.mockRestore();\n  });\n\n  it('should maintain referential stability of onMouseEnter across re-renders', () => {\n    const { result, rerender } = renderHook(() => usePreloadOnHover('dataTable'));\n\n    const firstOnMouseEnter = result.current.onMouseEnter;\n\n    // Re-render the hook\n    rerender();\n\n    const secondOnMouseEnter = result.current.onMouseEnter;\n\n    // References should be stable (same function instance)\n    expect(firstOnMouseEnter).toBe(secondOnMouseEnter);\n  });\n\n  it('should work correctly when component key changes', () => {\n    const { result, rerender } = renderHook(({ componentKey }) => usePreloadOnHover(componentKey), {\n      initialProps: { componentKey: 'dataTable' as const },\n    });\n\n    // Test first component\n    result.current.onMouseEnter();\n    expect(preloadComponents.dataTable).toHaveBeenCalledTimes(1);\n\n    // Change component key\n    rerender({ componentKey: 'dataTable' as const });\n\n    // Test second component\n    result.current.onMouseEnter();\n    expect(preloadComponents.createHouseholdModal).toHaveBeenCalledTimes(1);\n\n    // First component should still have been called only once\n    expect(preloadComponents.dataTable).toHaveBeenCalledTimes(1);\n  });\n\n  it('should return readonly onMouseEnter property', () => {\n    const { result } = renderHook(() => usePreloadOnHover('dataTable'));\n\n    // TypeScript should enforce readonly, but we can test the property descriptor\n    const descriptor = Object.getOwnPropertyDescriptor(result.current, 'onMouseEnter');\n\n    // Property should exist\n    expect(descriptor).toBeDefined();\n    expect(descriptor?.value).toBeInstanceOf(Function);\n  });\n\n  it('should handle promise rejection from preload function', async () => {\n    const consoleSpy = vi.spyOn(console, 'warn').mockImplementation(() => {});\n    const mockError = new Error('Async preload failed');\n\n    // Make the preload function return a rejected promise\n    vi.mocked(preloadComponents.dataTable).mockImplementation(() => {\n      return Promise.reject(mockError);\n    });\n\n    const { result } = renderHook(() => usePreloadOnHover('dataTable'));\n\n    // Should handle promise rejection gracefully\n    expect(() => {\n      result.current.onMouseEnter();\n    }).not.toThrow();\n\n    // Wait for any async operations\n    await new Promise(resolve => setTimeout(resolve, 0));\n\n    // Should not log warning for promise rejection (only synchronous errors are caught)\n    expect(consoleSpy).not.toHaveBeenCalled();\n\n    consoleSpy.mockRestore();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/useAddressResolution.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/useAsyncErrorBoundary.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRetryLogic' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RetryStrategies' is defined but never used.","line":12,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleError' is assigned a value but never used.","line":102,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'onError'. Either include it or remove the dependency array.","line":192,"column":5,"nodeType":"ArrayExpression","endLine":192,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [onError]","fix":{"range":[5406,5408],"text":"[onError]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Async Error Boundary Hook\n *\n * @description Provides error boundary functionality for async operations in hooks.\n * Captures and handles errors from async operations that would otherwise be unhandled.\n */\n\nimport { useCallback, useState } from 'react';\n\nimport { useRetryLogic, RetryStrategies } from './useRetryLogic';\n\n/**\n * Error boundary state\n */\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error: Error | null;\n  errorInfo: string | null;\n}\n\n/**\n * Error boundary options\n */\nexport interface AsyncErrorBoundaryOptions {\n  /** Callback when error occurs */\n  onError?: (error: Error, errorInfo: string) => void;\n  /** Enable automatic error recovery */\n  enableRecovery?: boolean;\n  /** Recovery timeout in milliseconds */\n  recoveryTimeout?: number;\n  /** Maximum retry attempts */\n  maxRetries?: number;\n  /** Delay between retries in milliseconds */\n  retryDelay?: number;\n}\n\n/**\n * Return type for async error boundary hook\n */\nexport interface UseAsyncErrorBoundaryReturn {\n  /** Current error boundary state */\n  errorState: ErrorBoundaryState;\n  /** Wrap async operation with error boundary */\n  wrapAsync: <T>(asyncFn: () => Promise<T>, context?: string) => () => Promise<T | null>;\n  /** Clear error state */\n  clearError: () => void;\n  /** Retry last failed operation */\n  retry: () => Promise<void>;\n  /** Check if operation can be retried */\n  canRetry: boolean;\n  /** Current retry count */\n  retryCount: number;\n  /** Current error (shorthand for errorState.error) */\n  error: Error | null;\n  /** Whether currently retrying */\n  isRetrying: boolean;\n}\n\n/**\n * Hook for async error boundary functionality\n *\n * @description Provides error boundary capabilities for async operations\n * in hooks. Prevents unhandled promise rejections and provides recovery mechanisms.\n */\nexport function useAsyncErrorBoundary(\n  options: AsyncErrorBoundaryOptions = {}\n): UseAsyncErrorBoundaryReturn {\n  const { onError, enableRecovery = false, recoveryTimeout = 5000, maxRetries = 3 } = options;\n\n  const [errorState, setErrorState] = useState<ErrorBoundaryState>({\n    hasError: false,\n    error: null,\n    errorInfo: null,\n  });\n\n  const [retryCount, setRetryCount] = useState(0);\n  const [isRetrying, setIsRetrying] = useState(false);\n  const [lastFailedOperation, setLastFailedOperation] = useState<{\n    fn: () => Promise<unknown>;\n    context: string;\n  } | null>(null);\n\n  /**\n   * Clear error state\n   */\n  const clearError = useCallback(() => {\n    setErrorState({\n      hasError: false,\n      error: null,\n      errorInfo: null,\n    });\n    setRetryCount(0);\n    setIsRetrying(false);\n    setLastFailedOperation(null);\n  }, []);\n\n  /**\n   * Handle error with recovery options\n   */\n  const handleError = useCallback(\n    (error: Error, context: string) => {\n      const errorInfo = `Error in ${context}: ${error.message}`;\n\n      setErrorState({\n        hasError: true,\n        error,\n        errorInfo,\n      });\n\n      // Call onError callback if provided\n      if (onError) {\n        try {\n          onError(error, errorInfo);\n        } catch (callbackError) {\n          console.error('Error in onError callback:', callbackError);\n        }\n      }\n\n      // Enable automatic recovery if configured\n      if (enableRecovery && retryCount < maxRetries) {\n        setTimeout(() => {\n          setRetryCount(prev => prev + 1);\n          setErrorState(prev => ({\n            ...prev,\n            hasError: false,\n          }));\n        }, recoveryTimeout);\n      }\n    },\n    [onError, enableRecovery, recoveryTimeout, maxRetries, retryCount]\n  );\n\n  /**\n   * Wrap async operation with error boundary\n   */\n  const wrapAsync = useCallback(\n    <T>(\n      asyncFn: () => Promise<T>,\n      context: string = 'async operation'\n    ): (() => Promise<T | null>) => {\n      return () => {\n        return new Promise(resolve => {\n          // Store operation for potential retry\n          setLastFailedOperation({ fn: asyncFn, context });\n          setIsRetrying(true);\n\n          asyncFn()\n            .then(result => {\n              // Clear error state on success only if there was an error\n              setErrorState(prev => {\n                if (prev.hasError) {\n                  return {\n                    hasError: false,\n                    error: null,\n                    errorInfo: null,\n                  };\n                }\n                return prev;\n              });\n              setRetryCount(0);\n              setIsRetrying(false);\n              resolve(result);\n            })\n            .catch(error => {\n              const errorInfo = `Error in ${context}: ${error.message}`;\n              const processedError = error instanceof Error ? error : new Error(String(error));\n\n              setErrorState({\n                hasError: true,\n                error: processedError,\n                errorInfo,\n              });\n              setIsRetrying(false);\n\n              // Call onError callback if provided - capture the callback from closure\n              const errorCallback = onError;\n              if (errorCallback) {\n                try {\n                  errorCallback(processedError, errorInfo);\n                } catch (callbackError) {\n                  console.error('Error in onError callback:', callbackError);\n                }\n              }\n\n              resolve(null);\n            });\n        });\n      };\n    },\n    []\n  );\n\n  /**\n   * Retry last failed operation\n   */\n  const retry = useCallback(async (): Promise<void> => {\n    if (!lastFailedOperation || retryCount >= maxRetries) {\n      return;\n    }\n\n    setRetryCount(prev => prev + 1);\n\n    try {\n      await lastFailedOperation.fn();\n      // Clear error state directly instead of calling clearError\n      setErrorState({\n        hasError: false,\n        error: null,\n        errorInfo: null,\n      });\n      setRetryCount(0);\n      setLastFailedOperation(null);\n    } catch (error) {\n      const processedError = error instanceof Error ? error : new Error(String(error));\n      const errorInfo = `Error in ${lastFailedOperation.context}: ${processedError.message}`;\n\n      setErrorState({\n        hasError: true,\n        error: processedError,\n        errorInfo,\n      });\n\n      // Call onError callback if provided - capture from closure\n      const errorCallback = onError;\n      if (errorCallback) {\n        try {\n          errorCallback(processedError, errorInfo);\n        } catch (callbackError) {\n          console.error('Error in onError callback:', callbackError);\n        }\n      }\n    }\n  }, [lastFailedOperation, retryCount, maxRetries, onError]);\n\n  /**\n   * Check if operation can be retried\n   */\n  const canRetry = lastFailedOperation !== null && retryCount < maxRetries;\n\n  return {\n    errorState,\n    wrapAsync,\n    clearError,\n    retry,\n    canRetry,\n    retryCount,\n    error: errorState.error,\n    isRetrying,\n  };\n}\n\n// Export for backward compatibility\nexport default useAsyncErrorBoundary;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/useAsyncUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/useConnectionStatus.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/useDebounce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/useFieldErrorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/useFormSubmission.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createFormSubmitHandler' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormMode' is defined but never used.","line":6,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":41},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":33,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":33,"endColumn":18,"suggestions":[{"fix":{"range":[1070,1164],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":43,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":43,"endColumn":20,"suggestions":[{"fix":{"range":[1384,1423],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":45,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":45,"endColumn":20,"suggestions":[{"fix":{"range":[1509,1555],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":48,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":48,"endColumn":22,"suggestions":[{"fix":{"range":[1602,1660],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":57,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":57,"endColumn":22,"suggestions":[{"fix":{"range":[1854,1898],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":59,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":59,"endColumn":22,"suggestions":[{"fix":{"range":[1945,2001],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":61,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":61,"endColumn":22,"suggestions":[{"fix":{"range":[2029,2074],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useCallback } from 'react';\n\nimport { createFormSubmitHandler } from '@/lib/forms';\nimport type { ResidentFormData, FormMode } from '@/types';\nimport type {\n  HookFormSubmissionProps as UseFormSubmissionProps,\n  HookFormSubmissionReturn as UseFormSubmissionReturn,\n} from '@/types/hooks';\n\nimport { useResidentFormValidation } from '../validation/useOptimizedResidentValidation';\n\nexport function useFormSubmission<T extends ResidentFormData = ResidentFormData>({\n  onSubmit,\n  mode,\n}: UseFormSubmissionProps<T>): UseFormSubmissionReturn<T> {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isOptimisticallyUpdated, setIsOptimisticallyUpdated] = useState(false);\n  const { validateForm } = useResidentFormValidation();\n\n  const showOptimisticSuccess = useCallback(() => {\n    if (mode === 'edit') {\n      setIsOptimisticallyUpdated(true);\n      setTimeout(() => {\n        setIsOptimisticallyUpdated(false);\n      }, 2000);\n    }\n  }, [mode]);\n\n  const handleSubmit = useCallback(\n    async (formData: T) => {\n      console.log('useFormSubmission handleSubmit called with:', { mode, hasOnSubmit: !!onSubmit });\n      setIsSubmitting(true);\n\n      // Optimistic update - show success immediately for better UX\n      if (mode === 'edit') {\n        showOptimisticSuccess();\n      }\n\n      try {\n        // Validate form data\n        console.log('Validating form data...');\n        const validation = await validateForm(formData as ResidentFormData);\n        console.log('Validation result:', validation);\n\n        if (!validation.isValid) {\n          console.log('Form validation failed:', validation.errors);\n          return {\n            success: false,\n            errors: validation.errors,\n          };\n        }\n\n        // Call onSubmit callback with form data\n        if (onSubmit) {\n          console.log('Calling onSubmit callback...');\n          await onSubmit(formData);\n          console.log('onSubmit callback completed successfully');\n        } else {\n          console.log('No onSubmit callback provided');\n        }\n\n        return { success: true };\n      } catch (error) {\n        console.error('Error in form submission:', error);\n        // Error handled by setting error state\n        // Revert optimistic update on error\n        setIsOptimisticallyUpdated(false);\n\n        return {\n          success: false,\n          errors: { general: 'An unexpected error occurred. Please try again.' },\n        };\n      } finally {\n        setIsSubmitting(false);\n      }\n    },\n    [onSubmit, mode, validateForm, showOptimisticSuccess]\n  );\n\n  return {\n    isSubmitting,\n    isOptimisticallyUpdated,\n    handleSubmit,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/useGenericFormSubmission.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[909,912],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[909,912],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1584,1587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1584,1587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Generic Form Submission Hook\n * \n * @fileoverview A generic, reusable form submission hook that can work with any form type.\n * Provides standardized form submission patterns, loading states, and error handling.\n * \n * @version 1.0.0\n * @since 2025-08-29\n * @author Citizenly Development Team\n */\n\nimport { useState, useCallback } from 'react';\n\n// =============================================================================\n// TYPES\n// =============================================================================\n\nexport interface UseGenericFormSubmissionOptions<T> {\n  /** Function to call when form is submitted */\n  onSubmit: (data: T) => Promise<void>;\n  /** Optional validation function */\n  validate?: (data: T) => { isValid: boolean; errors: Record<string, string> };\n  /** Called on successful submission */\n  onSuccess?: () => void;\n  /** Called on submission error */\n  onError?: (error: any) => void;\n}\n\nexport interface UseGenericFormSubmissionReturn<T> {\n  /** Whether the form is currently being submitted */\n  isSubmitting: boolean;\n  /** Form submission handler */\n  handleSubmit: (e: React.FormEvent, formData: T) => Promise<void>;\n  /** Manual submission function (without event) */\n  submit: (formData: T) => Promise<void>;\n}\n\n// =============================================================================\n// HOOK IMPLEMENTATION\n// =============================================================================\n\n/**\n * Generic form submission hook that works with any form data type\n */\nexport function useGenericFormSubmission<T extends Record<string, any>>(\n  options: UseGenericFormSubmissionOptions<T>\n): UseGenericFormSubmissionReturn<T> {\n  const { onSubmit, validate, onSuccess, onError } = options;\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const submit = useCallback(\n    async (formData: T) => {\n      // Validate if validator provided\n      if (validate) {\n        const validation = validate(formData);\n        if (!validation.isValid) {\n          // Let the calling component handle validation errors\n          throw new Error('Validation failed');\n        }\n      }\n\n      setIsSubmitting(true);\n\n      try {\n        await onSubmit(formData);\n        onSuccess?.();\n      } catch (error) {\n        console.error('Form submission error:', error);\n        onError?.(error);\n        throw error; // Re-throw to let calling component handle if needed\n      } finally {\n        setIsSubmitting(false);\n      }\n    },\n    [onSubmit, validate, onSuccess, onError]\n  );\n\n  const handleSubmit = useCallback(\n    async (e: React.FormEvent, formData: T) => {\n      e.preventDefault();\n      await submit(formData);\n    },\n    [submit]\n  );\n\n  return {\n    isSubmitting,\n    handleSubmit,\n    submit,\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/useHouseholdCodeGeneration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/useLastVisitedPage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/useLogger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[570,573],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[570,573],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[911,914],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[911,914],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[958,961],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[958,961],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1005,1008],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1005,1008],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1062,1065],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1062,1065],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1074,1077],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1074,1077],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1140,1143],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1140,1143],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1279,1282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1279,1282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'finalConfig' object makes the dependencies of useCallback Hook (at line 201) change on every render. To fix this, wrap the initialization of 'finalConfig' in its own useMemo() Hook.","line":138,"column":9,"nodeType":"VariableDeclarator","endLine":138,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4035,4038],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4035,4038],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4047,4050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4047,4050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":181,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":181,"endColumn":26,"suggestions":[{"fix":{"range":[5115,5158],"text":""},"messageId":"removeConsole","data":{"propertyName":"debug"},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":184,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":184,"endColumn":25,"suggestions":[{"fix":{"range":[5220,5262],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":208,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5848,5851],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5848,5851],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":218,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":218,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6027,6030],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6027,6030],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":228,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6208,6211],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6208,6211],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":238,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6397,6400],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6397,6400],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":238,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6409,6412],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6409,6412],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":248,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6635,6638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6635,6638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":300,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8102,8105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8102,8105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":304,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":304,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8260,8263],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8260,8263],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":305,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":305,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8297,8300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8297,8300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":329,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":329,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8680,8683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8680,8683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":331,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":331,"endColumn":20,"suggestions":[{"fix":{"range":[8746,8795],"text":""},"messageId":"removeConsole","data":{"propertyName":"debug"},"desc":"Remove the console.debug()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":334,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":334,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8859,8862],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8859,8862],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":336,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":336,"endColumn":19,"suggestions":[{"fix":{"range":[8925,8973],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":339,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":339,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9037,9040],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9037,9040],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":342,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":342,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9159,9162],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9159,9162],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Logger Hook\n *\n * @description Centralized logging service for development and production environments.\n * Provides structured logging with component context and automatic error tracking.\n */\n\nimport { useCallback, useRef } from 'react';\n\n/**\n * Log levels for different severity\n */\nexport enum LogLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n  CRITICAL = 'critical',\n}\n\n/**\n * Log entry structure\n */\ninterface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  component: string;\n  message: string;\n  data?: any;\n  error?: Error;\n  userId?: string;\n  sessionId?: string;\n}\n\n/**\n * Logger configuration\n */\ninterface LoggerConfig {\n  enableInProduction?: boolean;\n  sendToMonitoring?: boolean;\n  logToConsole?: boolean;\n  minLevel?: LogLevel;\n}\n\n/**\n * Logger return interface\n */\nexport interface UseLoggerReturn {\n  debug: (message: string, data?: any) => void;\n  info: (message: string, data?: any) => void;\n  warn: (message: string, data?: any) => void;\n  error: (message: string, error?: Error | any, data?: any) => void;\n  critical: (message: string, error?: Error, data?: any) => void;\n  trackPerformance: (operation: string, duration: number) => void;\n  trackEvent: (event: string, properties?: Record<string, any>) => void;\n}\n\n/**\n * Get current environment configuration\n */\nconst getEnvironmentConfig = (): LoggerConfig => {\n  const isDevelopment = process.env.NODE_ENV === 'development';\n\n  return {\n    enableInProduction: process.env.NEXT_PUBLIC_ENABLE_LOGGING === 'true',\n    sendToMonitoring: !isDevelopment,\n    logToConsole: isDevelopment,\n    minLevel: isDevelopment ? LogLevel.DEBUG : LogLevel.WARN,\n  };\n};\n\n/**\n * Send log to monitoring service (placeholder for actual implementation)\n */\nconst sendToMonitoringService = async (entry: LogEntry): Promise<void> => {\n  // In production, this would send to services like Sentry, LogRocket, etc.\n  if (process.env.NEXT_PUBLIC_MONITORING_ENDPOINT) {\n    try {\n      // Placeholder for actual monitoring service integration\n      await fetch(process.env.NEXT_PUBLIC_MONITORING_ENDPOINT, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(entry),\n      });\n    } catch {\n      // Silently fail to avoid recursive errors\n    }\n  }\n};\n\n/**\n * Format log message for console output\n */\nconst formatConsoleMessage = (entry: LogEntry): string => {\n  const timestamp = new Date(entry.timestamp).toLocaleTimeString();\n  const prefix = `[${timestamp}] [${entry.component}] [${entry.level.toUpperCase()}]`;\n  return `${prefix} ${entry.message}`;\n};\n\n/**\n * Determine if log should be output based on level\n */\nconst shouldLog = (level: LogLevel, minLevel: LogLevel): boolean => {\n  const levels = [LogLevel.DEBUG, LogLevel.INFO, LogLevel.WARN, LogLevel.ERROR, LogLevel.CRITICAL];\n  const currentIndex = levels.indexOf(level);\n  const minIndex = levels.indexOf(minLevel);\n  return currentIndex >= minIndex;\n};\n\n/**\n * Custom hook for structured logging\n *\n * @param component - Name of the component or hook using the logger\n * @param config - Optional configuration overrides\n * @returns Logger functions for different severity levels\n *\n * @example\n * ```typescript\n * function useMyHook() {\n *   const logger = useLogger('useMyHook');\n *\n *   const fetchData = async () => {\n *     logger.debug('Fetching data...');\n *     try {\n *       const data = await api.getData();\n *       logger.info('Data fetched successfully', { count: data.length });\n *     } catch (error) {\n *       logger.error('Failed to fetch data', error);\n *     }\n *   };\n * }\n * ```\n */\nexport function useLogger(component: string, config?: Partial<LoggerConfig>): UseLoggerReturn {\n  const environmentConfig = getEnvironmentConfig();\n  const finalConfig = { ...environmentConfig, ...config };\n  const performanceMap = useRef<Map<string, number[]>>(new Map());\n\n  /**\n   * Core logging function\n   */\n  const log = useCallback(\n    (level: LogLevel, message: string, error?: Error | any, data?: any) => {\n      if (!shouldLog(level, finalConfig.minLevel || LogLevel.INFO)) {\n        return;\n      }\n\n      const entry: LogEntry = {\n        timestamp: new Date().toISOString(),\n        level,\n        component,\n        message,\n        data: data !== undefined ? data : undefined,\n        error:\n          error instanceof Error\n            ? {\n                name: error.name,\n                message: error.message,\n                stack: error.stack,\n              }\n            : error,\n        userId:\n          typeof window !== 'undefined'\n            ? window.localStorage.getItem('userId') || undefined\n            : undefined,\n        sessionId:\n          typeof window !== 'undefined'\n            ? window.sessionStorage.getItem('sessionId') || undefined\n            : undefined,\n      };\n\n      // Log to console in development\n      if (finalConfig.logToConsole) {\n        const consoleMessage = formatConsoleMessage(entry);\n        const consoleData = entry.data || entry.error;\n\n        switch (level) {\n          case LogLevel.DEBUG:\n            console.debug(consoleMessage, consoleData);\n            break;\n          case LogLevel.INFO:\n            console.info(consoleMessage, consoleData);\n            break;\n          case LogLevel.WARN:\n            console.warn(consoleMessage, consoleData);\n            break;\n          case LogLevel.ERROR:\n          case LogLevel.CRITICAL:\n            console.error(consoleMessage, consoleData);\n            break;\n        }\n      }\n\n      // Send to monitoring service in production\n      if (finalConfig.sendToMonitoring && level >= LogLevel.WARN) {\n        sendToMonitoringService(entry);\n      }\n    },\n    [component, finalConfig]\n  );\n\n  /**\n   * Debug level logging\n   */\n  const debug = useCallback(\n    (message: string, data?: any) => {\n      log(LogLevel.DEBUG, message, undefined, data);\n    },\n    [log]\n  );\n\n  /**\n   * Info level logging\n   */\n  const info = useCallback(\n    (message: string, data?: any) => {\n      log(LogLevel.INFO, message, undefined, data);\n    },\n    [log]\n  );\n\n  /**\n   * Warning level logging\n   */\n  const warn = useCallback(\n    (message: string, data?: any) => {\n      log(LogLevel.WARN, message, undefined, data);\n    },\n    [log]\n  );\n\n  /**\n   * Error level logging\n   */\n  const error = useCallback(\n    (message: string, error?: Error | any, data?: any) => {\n      log(LogLevel.ERROR, message, error, data);\n    },\n    [log]\n  );\n\n  /**\n   * Critical error logging (always sent to monitoring)\n   */\n  const critical = useCallback(\n    (message: string, error?: Error, data?: any) => {\n      const entry: LogEntry = {\n        timestamp: new Date().toISOString(),\n        level: LogLevel.CRITICAL,\n        component,\n        message,\n        data,\n        error: error\n          ? {\n              name: error.name,\n              message: error.message,\n              stack: error.stack,\n            }\n          : undefined,\n      };\n\n      // Always log critical errors\n      if (finalConfig.logToConsole) {\n        console.error(formatConsoleMessage(entry), error);\n      }\n\n      // Always send critical errors to monitoring\n      sendToMonitoringService(entry);\n    },\n    [component, finalConfig.logToConsole]\n  );\n\n  /**\n   * Track performance metrics\n   */\n  const trackPerformance = useCallback(\n    (operation: string, duration: number) => {\n      const message = `Performance: ${operation} took ${duration}ms`;\n\n      if (duration > 1000) {\n        warn(message, { operation, duration, slow: true });\n      } else if (finalConfig.logToConsole && process.env.NODE_ENV === 'development') {\n        debug(message, { operation, duration });\n      }\n\n      // Store for aggregation\n      const key = `${component}:${operation}`;\n      const current = performanceMap.current.get(key) || [];\n      performanceMap.current.set(key, [...current, duration]);\n    },\n    [component, debug, warn, finalConfig.logToConsole]\n  );\n\n  /**\n   * Track custom events\n   */\n  const trackEvent = useCallback(\n    (event: string, properties?: Record<string, any>) => {\n      info(`Event: ${event}`, properties);\n\n      // Send to analytics service if configured\n      if (typeof window !== 'undefined' && (window as any).analytics) {\n        (window as any).analytics.track(event, {\n          component,\n          ...properties,\n        });\n      }\n    },\n    [component, info]\n  );\n\n  return {\n    debug,\n    info,\n    warn,\n    error,\n    critical,\n    trackPerformance,\n    trackEvent,\n  };\n}\n\n/**\n * Default logger instance for non-component contexts\n */\nexport const logger = {\n  debug: (component: string, message: string, data?: any) => {\n    if (process.env.NODE_ENV === 'development') {\n      console.debug(`[${component}] ${message}`, data);\n    }\n  },\n  info: (component: string, message: string, data?: any) => {\n    if (process.env.NODE_ENV === 'development') {\n      console.info(`[${component}] ${message}`, data);\n    }\n  },\n  warn: (component: string, message: string, data?: any) => {\n    console.warn(`[${component}] ${message}`, data);\n  },\n  error: (component: string, message: string, error?: any) => {\n    console.error(`[${component}] ${message}`, error);\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/useMigrationInformation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[700,703],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[700,703],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3398,3401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3398,3401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":156,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4655,4658],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4655,4658],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useCallback, useEffect } from 'react';\n\nimport { MigrationInformationData } from '@/types/services';\n\nimport { usePsgcSearch, PsgcSearchResult } from '../search/usePsgcSearch';\n\nexport { type MigrationInformationData };\n\ninterface SelectedBarangayInfo {\n  barangay: string;\n  city: string;\n  province: string;\n  region: string;\n}\n\ninterface UseMigrationInformationReturn {\n  // Data state\n  migrationData: MigrationInformationData;\n  selectedBarangayInfo: SelectedBarangayInfo | null;\n\n  // Search functionality\n  barangayOptions: PsgcSearchResult[];\n  isLoadingBarangays: boolean;\n\n  // Actions\n  updateMigrationData: (field: keyof MigrationInformationData, value: any) => void;\n  searchBarangays: (searchTerm: string) => Promise<void>;\n  handleBarangaySelect: (option: PsgcSearchResult) => void;\n  setMigrationData: (data: MigrationInformationData) => void;\n\n  // Lazy loading\n  hasMore: boolean;\n  loadMore: () => void;\n  isLoadingMore: boolean;\n  totalCount: number;\n}\n\ninterface UseMigrationInformationProps {\n  initialData?: MigrationInformationData;\n  onChange?: (data: MigrationInformationData) => void;\n}\n\nexport function useMigrationInformation({\n  initialData = {},\n  onChange,\n}: UseMigrationInformationProps = {}): UseMigrationInformationReturn {\n  const [migrationData, setMigrationDataState] = useState<MigrationInformationData>(initialData);\n  const [selectedBarangayInfo, setSelectedBarangayInfo] = useState<SelectedBarangayInfo | null>(\n    null\n  );\n\n  // Use PSGC search hook for hierarchical searching (province, city, barangay)\n  const {\n    options: barangayOptions,\n    isLoading: isLoadingBarangays,\n    setQuery: setSearchQuery,\n    hasMore,\n    loadMore,\n    isLoadingMore,\n    totalCount,\n  } = usePsgcSearch({ levels: 'all', limit: 20 });\n\n  // Function to lookup PSGC data by code\n  const lookupPsgcByCode = useCallback(\n    async (code: string) => {\n      if (!code || code.length < 6) {\n        setSelectedBarangayInfo(null);\n        return;\n      }\n\n      try {\n        const response = await fetch(`/api/psgc/lookup?code=${encodeURIComponent(code)}`);\n        if (response.ok) {\n          const result = await response.json();\n          const data = result.data;\n\n          if (data) {\n            setSelectedBarangayInfo({\n              barangay: data.barangay_name || data.name,\n              city: data.city_name || '',\n              province: data.province_name || '',\n              region: data.region_name || '',\n            });\n\n            // Update related codes if this is a barangay lookup\n            if (data.level === 'barangay') {\n              const updatedData = {\n                ...migrationData,\n                previous_barangay_code: code,\n                previous_city_municipality_code: data.city_code || '',\n                previous_province_code: data.province_code || '',\n                previous_region_code: data.region_code || '',\n              };\n              setMigrationDataState(updatedData);\n              onChange?.(updatedData);\n            }\n          }\n        } else {\n          setSelectedBarangayInfo(null);\n        }\n      } catch (error) {\n        console.error('Failed to lookup PSGC code:', error);\n        setSelectedBarangayInfo(null);\n      }\n    },\n    [migrationData, onChange]\n  );\n\n  const updateMigrationData = useCallback(\n    (field: keyof MigrationInformationData, value: any) => {\n      const updatedData = {\n        ...migrationData,\n        [field]: value,\n      };\n      setMigrationDataState(updatedData);\n      onChange?.(updatedData);\n\n      // Auto-lookup when barangay code is updated\n      if (field === 'previous_barangay_code' && typeof value === 'string') {\n        lookupPsgcByCode(value);\n      }\n    },\n    [migrationData, onChange, lookupPsgcByCode]\n  );\n\n  const setMigrationData = useCallback(\n    (data: MigrationInformationData) => {\n      setMigrationDataState(data);\n      onChange?.(data);\n\n      // Auto-lookup when data is set with a barangay code\n      if (data.previous_barangay_code) {\n        lookupPsgcByCode(data.previous_barangay_code);\n      }\n    },\n    [onChange, lookupPsgcByCode]\n  );\n\n  // Auto-lookup on initial load if barangay code exists\n  useEffect(() => {\n    if (migrationData.previous_barangay_code && !selectedBarangayInfo) {\n      lookupPsgcByCode(migrationData.previous_barangay_code);\n    }\n  }, [migrationData.previous_barangay_code, selectedBarangayInfo, lookupPsgcByCode]);\n\n  const searchBarangays = useCallback(\n    async (searchTerm: string) => {\n      setSearchQuery(searchTerm);\n    },\n    [setSearchQuery]\n  );\n\n  const handleBarangaySelect = useCallback(\n    (option: any) => {\n      if (option?.value) {\n        // Use the lookup API to get full address hierarchy\n        lookupPsgcByCode(option.value);\n      } else if (option === null) {\n        // Handle clearing the selection\n        const clearedData = {\n          ...migrationData,\n          previous_barangay_code: '',\n          previous_city_municipality_code: '',\n          previous_province_code: '',\n          previous_region_code: '',\n        };\n        setMigrationDataState(clearedData);\n        onChange?.(clearedData);\n        setSelectedBarangayInfo(null);\n      }\n    },\n    [lookupPsgcByCode, migrationData, onChange]\n  );\n\n  return {\n    migrationData,\n    selectedBarangayInfo,\n    barangayOptions,\n    isLoadingBarangays,\n    updateMigrationData,\n    searchBarangays,\n    handleBarangaySelect,\n    setMigrationData,\n    hasMore,\n    loadMore,\n    isLoadingMore,\n    totalCount,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/usePerformanceMonitor.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4337,4340],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4337,4340],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4347,4350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4347,4350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":164,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":164,"endColumn":22,"suggestions":[{"fix":{"range":[4748,4781],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Performance Monitor Hook\n *\n * @description Hook for monitoring React hook performance and render patterns.\n * Helps identify performance bottlenecks and excessive re-renders.\n */\n\nimport { useRef, useEffect, useCallback } from 'react';\n\nimport type { HookPerformanceMetrics as PerformanceMetrics } from '@/types/performance';\n\nimport { useLogger } from './useLogger';\n\n\n/**\n * Performance metrics interface - imported from @/types/performance\n */\n\n/**\n * Performance monitor options\n */\nexport interface UsePerformanceMonitorOptions {\n  /** Threshold for excessive renders (default: 10) */\n  excessiveRenderThreshold?: number;\n  /** Whether to log performance warnings (default: true) */\n  enableWarnings?: boolean;\n  /** Whether to track render timing (default: true) */\n  trackTiming?: boolean;\n}\n\n/**\n * Return type for performance monitor hook\n */\nexport interface UsePerformanceMonitorReturn {\n  /** Current performance metrics */\n  metrics: PerformanceMetrics;\n  /** Reset performance counters */\n  reset: () => void;\n  /** Get performance report */\n  getReport: () => string;\n}\n\n/**\n * Hook for monitoring React hook performance\n *\n * @param hookName - Name of the hook being monitored\n * @param options - Performance monitoring options\n */\nexport function usePerformanceMonitor(\n  hookName: string,\n  options: UsePerformanceMonitorOptions = {}\n): UsePerformanceMonitorReturn {\n  const { excessiveRenderThreshold = 10, enableWarnings = true, trackTiming = true } = options;\n\n  const { warn, debug } = useLogger(`PerformanceMonitor:${hookName}`);\n\n  const renderCount = useRef(0);\n  const renderTimes = useRef<number[]>([]);\n  const lastRenderStart = useRef<number>(0);\n  const hasWarned = useRef(false);\n\n  // Track render start time\n  if (trackTiming) {\n    lastRenderStart.current = performance.now();\n  }\n\n  // Increment render count and calculate timing\n  useEffect(() => {\n    renderCount.current += 1;\n\n    if (trackTiming) {\n      const renderTime = performance.now() - lastRenderStart.current;\n      renderTimes.current.push(renderTime);\n\n      // Keep only last 50 render times for memory efficiency\n      if (renderTimes.current.length > 50) {\n        renderTimes.current = renderTimes.current.slice(-50);\n      }\n\n      // Debug log for development\n      if (process.env.NODE_ENV === 'development' && renderTime > 10) {\n        debug(`Slow render detected: ${renderTime.toFixed(2)}ms`);\n      }\n    }\n\n    // Warn about excessive renders\n    if (enableWarnings && renderCount.current >= excessiveRenderThreshold && !hasWarned.current) {\n      hasWarned.current = true;\n      warn(\n        `Excessive re-renders detected (${renderCount.current} renders). Consider optimization.`\n      );\n    }\n  });\n\n  /**\n   * Calculate performance metrics\n   */\n  const getMetrics = useCallback((): PerformanceMetrics => {\n    const times = renderTimes.current;\n    const averageRenderTime =\n      times.length > 0 ? times.reduce((sum, time) => sum + time, 0) / times.length : 0;\n    const lastRenderTime = times.length > 0 ? times[times.length - 1] : 0;\n\n    return {\n      renderCount: renderCount.current,\n      averageRenderTime,\n      lastRenderTime,\n      isExcessiveRenders: renderCount.current >= excessiveRenderThreshold,\n    };\n  }, [excessiveRenderThreshold]);\n\n  /**\n   * Reset performance counters\n   */\n  const reset = useCallback(() => {\n    renderCount.current = 0;\n    renderTimes.current = [];\n    hasWarned.current = false;\n    debug('Performance counters reset');\n  }, [debug]);\n\n  /**\n   * Get detailed performance report\n   */\n  const getReport = useCallback(() => {\n    const metrics = getMetrics();\n    return `\nPerformance Report for ${hookName}:\n- Render Count: ${metrics.renderCount}\n- Average Render Time: ${metrics.averageRenderTime.toFixed(2)}ms\n- Last Render Time: ${metrics.lastRenderTime.toFixed(2)}ms\n- Excessive Renders: ${metrics.isExcessiveRenders ? 'YES' : 'NO'}\n    `.trim();\n  }, [hookName, getMetrics]);\n\n  return {\n    metrics: getMetrics(),\n    reset,\n    getReport,\n  };\n}\n\n/**\n * Higher-order hook for automatically monitoring hook performance\n *\n * @param hookName - Name of the hook being monitored\n * @param hookFn - The hook function to monitor\n * @param options - Performance monitoring options\n */\nexport function withPerformanceMonitoring<T extends (...args: any[]) => any>(\n  hookName: string,\n  hookFn: T,\n  options?: UsePerformanceMonitorOptions\n): T {\n  return ((...args: Parameters<T>) => {\n    const monitor = usePerformanceMonitor(hookName, options);\n\n    // Log performance report in development when component unmounts\n    useEffect(() => {\n      return () => {\n        if (process.env.NODE_ENV === 'development' && monitor.metrics.renderCount > 5) {\n          console.log(monitor.getReport());\n        }\n      };\n    }, [monitor]);\n\n    return hookFn(...args);\n  }) as T;\n}\n\n// Export for backward compatibility\nexport default usePerformanceMonitor;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/usePersistedState.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":24,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":36,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1223,1226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1223,1226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1404,1407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1404,1407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\n\n/**\n * Hook for persisting state in localStorage\n * Useful for form data, preferences, and other user data that should survive app restarts\n */\nexport function usePersistedState<T>(\n  key: string,\n  defaultValue: T\n): [T, (value: T | ((prev: T) => T)) => void] {\n  // Initialize state with value from localStorage or default\n  const [state, setState] = useState<T>(() => {\n    if (typeof window === 'undefined') {\n      return defaultValue;\n    }\n\n    try {\n      const saved = localStorage.getItem(key);\n      if (saved !== null) {\n        return JSON.parse(saved);\n      }\n    } catch (error) {\n      // Silently handle localStorage errors\n    }\n\n    return defaultValue;\n  });\n\n  // Update localStorage whenever state changes\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      try {\n        localStorage.setItem(key, JSON.stringify(state));\n      } catch (error) {\n        // Silently handle localStorage errors\n      }\n    }\n  }, [key, state]);\n\n  return [state, setState];\n}\n\n/**\n * Hook specifically for form data persistence\n * Automatically saves and restores form state\n */\nexport function usePersistedFormState<T extends Record<string, any>>(\n  formId: string,\n  initialValues: T\n) {\n  const [formData, setFormData] = usePersistedState(`form-${formId}`, initialValues);\n\n  const updateField = (field: keyof T, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  const resetForm = () => {\n    setFormData(initialValues);\n  };\n\n  const clearPersistedData = () => {\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem(`form-${formId}`);\n    }\n    setFormData(initialValues);\n  };\n\n  return {\n    formData,\n    setFormData,\n    updateField,\n    resetForm,\n    clearPersistedData,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/usePreloadOnHover.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/useResidentAsyncValidation.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'asyncValidationUtils' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":30},{"ruleId":"import/order","severity":1,"message":"`@/types/hooks` type import should occur before import of `./useAsyncErrorBoundary`","line":26,"column":1,"nodeType":"ImportDeclaration","endLine":26,"endColumn":89},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":135,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":135,"endColumn":25},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":143,"column":28,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":143,"endColumn":46},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'wrapAsync'. Either include it or remove the dependency array.","line":156,"column":5,"nodeType":"ArrayExpression","endLine":156,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [enabled, debounceDelay, wrapAsync]","fix":{"range":[5059,5083],"text":"[enabled, debounceDelay, wrapAsync]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Resident Async Validation Hook\n *\n * @description Handles asynchronous validation operations for resident forms.\n * Extracted from useOptimizedResidentValidation for better maintainability.\n */\n\nimport { useState, useCallback, useRef } from 'react';\n\nimport { asyncValidationUtils } from '@/lib/validation/utilities';\n\nimport { useAsyncErrorBoundary } from './useAsyncErrorBoundary';\n\n/**\n * Async validation options\n */\nexport interface AsyncValidationOptions {\n  /** Debounce delay for async validation */\n  debounceDelay?: number;\n  /** Enable/disable async validation */\n  enabled?: boolean;\n}\n\nimport type { HookAsyncValidationResult as AsyncValidationResult } from '@/types/hooks';\n\n/**\n * Return type for async validation hook\n */\nexport interface UseResidentAsyncValidationReturn {\n  /** Validate field asynchronously */\n  validateFieldAsync: (fieldName: string, value: unknown) => Promise<AsyncValidationResult>;\n  /** Check if async validation is in progress */\n  isAsyncValidating: boolean;\n  /** Get async validation errors */\n  asyncValidationErrors: Record<string, string>;\n  /** Clear async validation errors */\n  clearAsyncValidationErrors: () => void;\n  /** Clear async validation error for specific field */\n  clearAsyncValidationError: (fieldName: string) => void;\n}\n\n/**\n * Fields that support async validation\n */\nconst ASYNC_VALIDATION_FIELDS = [\n  'email',\n  'mobileNumber',\n  'philsysCardNumber',\n  'householdCode',\n] as const;\n\n/**\n * Hook for resident async validation\n *\n * @description Provides asynchronous validation for fields that require server-side checks.\n */\nexport function useResidentAsyncValidation(\n  options: AsyncValidationOptions = {}\n): UseResidentAsyncValidationReturn {\n  const { debounceDelay = 1000, enabled = true } = options;\n\n  const [isAsyncValidating, setIsAsyncValidating] = useState(false);\n  const [asyncValidationErrors, setAsyncValidationErrors] = useState<Record<string, string>>({});\n  const asyncValidationTimeouts = useRef<Map<string, NodeJS.Timeout>>(new Map());\n\n  // Error boundary for async validation operations\n  const { wrapAsync } = useAsyncErrorBoundary({\n    onError: (error, errorInfo) => {\n      // Log validation errors for debugging\n      if (process.env.NODE_ENV === 'development') {\n        console.error('Async Validation Error:', errorInfo, error);\n      }\n    },\n    enableRecovery: false, // Don't auto-retry validation\n    maxRetries: 0,\n  });\n\n  /**\n   * Validate field asynchronously\n   */\n  const validateFieldAsync = useCallback(\n    async (fieldName: string, value: unknown): Promise<AsyncValidationResult> => {\n      if (\n        !enabled ||\n        !ASYNC_VALIDATION_FIELDS.includes(fieldName as (typeof ASYNC_VALIDATION_FIELDS)[number])\n      ) {\n        return { isValid: true };\n      }\n\n      // Clear existing timeout for this field\n      const existingTimeout = asyncValidationTimeouts.current.get(fieldName);\n      if (existingTimeout) {\n        clearTimeout(existingTimeout);\n      }\n\n      return new Promise(resolve => {\n        const timeout = setTimeout(async () => {\n          setIsAsyncValidating(true);\n\n          try {\n            let result: AsyncValidationResult = { isValid: true };\n\n            // Wrap validation calls with error boundary\n            const validationResult = await wrapAsync(async () => {\n              switch (fieldName) {\n                case 'email':\n                  return await validateEmailUniqueness(value as string);\n                case 'mobileNumber':\n                  return await validateMobileNumberUniqueness(value as string);\n                case 'philsysCardNumber':\n                  return await validatePhilsysCardUniqueness(value as string);\n                case 'householdCode':\n                  return await validateHouseholdCodeExists(value as string);\n                default:\n                  return { isValid: true };\n              }\n            }, `async validation for ${fieldName}`)();\n\n            result = validationResult || { isValid: false, error: 'Validation failed' };\n\n            // Update async validation errors\n            setAsyncValidationErrors(prev => {\n              const newErrors = { ...prev };\n              if (result.isValid) {\n                delete newErrors[fieldName];\n              } else if (result.error) {\n                newErrors[fieldName] = result.error;\n              }\n              return newErrors;\n            });\n\n            resolve(result);\n          } catch (error) {\n            const errorResult = {\n              isValid: false,\n              error: 'Validation failed. Please try again.',\n            };\n\n            setAsyncValidationErrors(prev => ({\n              ...prev,\n              [fieldName]: errorResult.error!,\n            }));\n\n            resolve(errorResult);\n          } finally {\n            setIsAsyncValidating(false);\n            asyncValidationTimeouts.current.delete(fieldName);\n          }\n        }, debounceDelay);\n\n        asyncValidationTimeouts.current.set(fieldName, timeout);\n      });\n    },\n    [enabled, debounceDelay]\n  );\n\n  /**\n   * Clear all async validation errors\n   */\n  const clearAsyncValidationErrors = useCallback(() => {\n    setAsyncValidationErrors({});\n  }, []);\n\n  /**\n   * Clear async validation error for specific field\n   */\n  const clearAsyncValidationError = useCallback((fieldName: string) => {\n    setAsyncValidationErrors(prev => {\n      const newErrors = { ...prev };\n      delete newErrors[fieldName];\n      return newErrors;\n    });\n  }, []);\n\n  return {\n    validateFieldAsync,\n    isAsyncValidating,\n    asyncValidationErrors,\n    clearAsyncValidationErrors,\n    clearAsyncValidationError,\n  };\n}\n\n/**\n * Validate email uniqueness\n */\nasync function validateEmailUniqueness(email: string): Promise<AsyncValidationResult> {\n  if (!email || !email.includes('@')) {\n    return { isValid: true }; // Let synchronous validation handle format\n  }\n\n  try {\n    const response = await fetch(\n      `/api/residents/validate-email?email=${encodeURIComponent(email)}`\n    );\n    const data = await response.json();\n\n    return {\n      isValid: data.isUnique,\n      error: data.isUnique ? undefined : 'Email address is already registered',\n    };\n  } catch {\n    return {\n      isValid: false,\n      error: 'Unable to validate email. Please try again.',\n    };\n  }\n}\n\n/**\n * Validate mobile number uniqueness\n */\nasync function validateMobileNumberUniqueness(\n  mobileNumber: string\n): Promise<AsyncValidationResult> {\n  if (!mobileNumber || mobileNumber.length < 10) {\n    return { isValid: true }; // Let synchronous validation handle format\n  }\n\n  try {\n    const response = await fetch(\n      `/api/residents/validate-mobile?mobile=${encodeURIComponent(mobileNumber)}`\n    );\n    const data = await response.json();\n\n    return {\n      isValid: data.isUnique,\n      error: data.isUnique ? undefined : 'Mobile number is already registered',\n    };\n  } catch {\n    return {\n      isValid: false,\n      error: 'Unable to validate mobile number. Please try again.',\n    };\n  }\n}\n\n/**\n * Validate PhilSys card uniqueness\n */\nasync function validatePhilsysCardUniqueness(cardNumber: string): Promise<AsyncValidationResult> {\n  if (!cardNumber || cardNumber.length < 12) {\n    return { isValid: true }; // Let synchronous validation handle format\n  }\n\n  try {\n    const response = await fetch(\n      `/api/residents/validate-philsys?cardNumber=${encodeURIComponent(cardNumber)}`\n    );\n    const data = await response.json();\n\n    return {\n      isValid: data.isUnique,\n      error: data.isUnique ? undefined : 'PhilSys card number is already registered',\n    };\n  } catch {\n    return {\n      isValid: false,\n      error: 'Unable to validate PhilSys card. Please try again.',\n    };\n  }\n}\n\n/**\n * Validate household code exists\n */\nasync function validateHouseholdCodeExists(householdCode: string): Promise<AsyncValidationResult> {\n  if (!householdCode) {\n    return { isValid: true }; // Optional field\n  }\n\n  try {\n    const response = await fetch(\n      `/api/households/validate-code?code=${encodeURIComponent(householdCode)}`\n    );\n    const data = await response.json();\n\n    return {\n      isValid: data.exists,\n      error: data.exists ? undefined : 'Household code does not exist',\n    };\n  } catch {\n    return {\n      isValid: false,\n      error: 'Unable to validate household code. Please try again.',\n    };\n  }\n}\n\n// Export for backward compatibility\nexport default useResidentAsyncValidation;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/useResidentCrossFieldValidation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1450,1453],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1450,1453],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1485,1488],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1485,1488],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1541,1544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1541,1544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1883,1886],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1883,1886],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1923,1926],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1923,1926],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1975,1978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1975,1978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2083,2086],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2083,2086],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2133,2136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2133,2136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Resident Cross-Field Validation Hook\n *\n * @description Handles complex validation rules that span multiple fields.\n * Extracted from useOptimizedResidentValidation for better maintainability.\n */\n\nimport { useMemo } from 'react';\n\nimport type { ResidentFormData } from '@/types';\n\n/**\n * Cross-field validation rule definition\n */\ninterface CrossFieldValidationRule {\n  fields: string[];\n  validate: (data: ResidentFormData) => Record<string, string>;\n}\n\n/**\n * Cross-field validation rules\n */\nconst crossFieldValidationRules: CrossFieldValidationRule[] = [\n  {\n    fields: ['employment_status', 'occupation_code'],\n    validate: (data: ResidentFormData) => {\n      const errors: Record<string, string> = {};\n      if (data.employment_status === 'employed' && !data.occupation_code) {\n        errors.occupation_code = 'Occupation code is required when employed';\n      }\n      return errors;\n    },\n  },\n  {\n    fields: ['religion', 'religion_others_specify'],\n    validate: (data: ResidentFormData) => {\n      const errors: Record<string, string> = {};\n      if (data.religion === 'others' && !data.religion_others_specify) {\n        errors.religion_others_specify = 'Please specify other religion';\n      }\n      return errors;\n    },\n  },\n  {\n    fields: ['is_senior_citizen', 'is_registered_senior_citizen'],\n    validate: (data: ResidentFormData) => {\n      const errors: Record<string, string> = {};\n      if (!(data as any).is_senior_citizen && (data as any).is_registered_senior_citizen) {\n        (errors as any).is_registered_senior_citizen =\n          'Cannot be registered senior citizen if not a senior citizen';\n      }\n      return errors;\n    },\n  },\n  {\n    fields: ['isMigrant', 'previousBarangayCode', 'reasonForTransferring'],\n    validate: (data: ResidentFormData) => {\n      const errors: Record<string, string> = {};\n      if ((data as any).isMigrant) {\n        if (!(data as any).previous_barangay_code) {\n          (errors as any).previous_barangay_code = 'Previous barangay is required for migrants';\n        }\n        if (!(data as any).reason_for_migration) {\n          (errors as any).reason_for_migration = 'Reason for transferring is required for migrants';\n        }\n      }\n      return errors;\n    },\n  },\n];\n\n/**\n * Return type for cross-field validation hook\n */\nexport interface UseResidentCrossFieldValidationReturn {\n  /** Validate all cross-field rules for given data */\n  validateCrossFields: (data: ResidentFormData) => Record<string, string>;\n  /** Get fields affected by cross-field validation */\n  getCrossFieldDependencies: (fieldName: string) => string[];\n  /** Check if field has cross-field dependencies */\n  hasCrossFieldDependencies: (fieldName: string) => boolean;\n}\n\n/**\n * Hook for resident cross-field validation\n *\n * @description Provides validation for complex rules that depend on multiple fields.\n * Optimized with memoization for performance.\n */\nexport function useResidentCrossFieldValidation(): UseResidentCrossFieldValidationReturn {\n  /**\n   * Map of field to rules that affect it (memoized for performance)\n   */\n  const fieldToRulesMap = useMemo(() => {\n    const map = new Map<string, CrossFieldValidationRule[]>();\n\n    crossFieldValidationRules.forEach(rule => {\n      rule.fields.forEach(field => {\n        if (!map.has(field)) {\n          map.set(field, []);\n        }\n        map.get(field)?.push(rule);\n      });\n    });\n\n    return map;\n  }, []);\n\n  /**\n   * Validate all cross-field rules for given data\n   */\n  const validateCrossFields = useMemo(() => {\n    return (data: ResidentFormData): Record<string, string> => {\n      const allErrors: Record<string, string> = {};\n\n      crossFieldValidationRules.forEach(rule => {\n        const ruleErrors = rule.validate(data);\n        Object.assign(allErrors, ruleErrors);\n      });\n\n      return allErrors;\n    };\n  }, []);\n\n  /**\n   * Get fields affected by cross-field validation for a given field\n   */\n  const getCrossFieldDependencies = useMemo(() => {\n    return (fieldName: string): string[] => {\n      const rules = fieldToRulesMap.get(fieldName) || [];\n      const dependencies = new Set<string>();\n\n      rules.forEach(rule => {\n        rule.fields.forEach(field => {\n          if (field !== fieldName) {\n            dependencies.add(field);\n          }\n        });\n      });\n\n      return Array.from(dependencies);\n    };\n  }, [fieldToRulesMap]);\n\n  /**\n   * Check if field has cross-field dependencies\n   */\n  const hasCrossFieldDependencies = useMemo(() => {\n    return (fieldName: string): boolean => {\n      return fieldToRulesMap.has(fieldName);\n    };\n  }, [fieldToRulesMap]);\n\n  return {\n    validateCrossFields,\n    getCrossFieldDependencies,\n    hasCrossFieldDependencies,\n  };\n}\n\n// Export for backward compatibility\nexport default useResidentCrossFieldValidation;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/useResidentSubmission.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/useRetryLogic.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1447,1450],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1447,1450],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'strategy' object makes the dependencies of useCallback Hook (at line 146) change on every render. To fix this, wrap the initialization of 'strategy' in its own useMemo() Hook.","line":114,"column":9,"nodeType":"VariableDeclarator","endLine":114,"endColumn":78},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'strategy' object makes the dependencies of useCallback Hook (at line 282) change on every render. To fix this, wrap the initialization of 'strategy' in its own useMemo() Hook.","line":114,"column":9,"nodeType":"VariableDeclarator","endLine":114,"endColumn":78},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":337,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":337,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8907,8910],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8907,8910],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":337,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":337,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8925,8928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8925,8928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Retry Logic Hook\n *\n * @description Advanced retry logic for failed async operations with\n * exponential backoff, jitter, and customizable retry strategies.\n */\n\nimport { useState, useCallback, useRef } from 'react';\n\nimport { useLogger } from './useLogger';\n\n/**\n * Retry strategy options\n */\nexport interface RetryStrategy {\n  /** Maximum number of retry attempts */\n  maxAttempts: number;\n  /** Initial delay in milliseconds */\n  initialDelay: number;\n  /** Maximum delay in milliseconds */\n  maxDelay: number;\n  /** Exponential backoff multiplier */\n  backoffMultiplier: number;\n  /** Add jitter to prevent thundering herd */\n  enableJitter: boolean;\n  /** Custom condition to determine if error should be retried */\n  shouldRetry?: (error: Error, attempt: number) => boolean;\n}\n\n/**\n * Retry state interface\n */\nexport interface RetryState {\n  /** Current attempt number (0 = initial attempt) */\n  attempt: number;\n  /** Whether retry is currently in progress */\n  isRetrying: boolean;\n  /** Last error encountered */\n  lastError: Error | null;\n  /** Next retry delay in milliseconds */\n  nextDelay: number;\n  /** Whether max attempts have been reached */\n  maxAttemptsReached: boolean;\n}\n\n/**\n * Retry logic hook options\n */\nexport interface UseRetryLogicOptions extends Partial<RetryStrategy> {\n  /** Hook name for logging */\n  name?: string;\n  /** Called when operation succeeds after retry */\n  onSuccess?: (result: any, attempt: number) => void;\n  /** Called when operation fails (before retry) */\n  onError?: (error: Error, attempt: number) => void;\n  /** Called when max attempts reached */\n  onMaxAttemptsReached?: (error: Error) => void;\n}\n\n/**\n * Return type for retry logic hook\n */\nexport interface UseRetryLogicReturn {\n  /** Current retry state */\n  state: RetryState;\n  /** Execute operation with retry logic */\n  execute: <T>(operation: () => Promise<T>) => Promise<T>;\n  /** Reset retry state */\n  reset: () => void;\n  /** Cancel any pending retry */\n  cancel: () => void;\n}\n\n/**\n * Default retry strategy\n */\nconst DEFAULT_STRATEGY: RetryStrategy = {\n  maxAttempts: 3,\n  initialDelay: 1000,\n  maxDelay: 30000,\n  backoffMultiplier: 2,\n  enableJitter: true,\n  shouldRetry: (error: Error) => {\n    // Retry on network errors, timeouts, and 5xx status codes\n    if (error.name === 'NetworkError') return true;\n    if (error.name === 'TimeoutError') return true;\n    if (error.message.includes('fetch')) return true;\n\n    // Don't retry on authentication errors (4xx)\n    if (error.message.includes('401') || error.message.includes('403')) return false;\n    if (error.message.includes('400') || error.message.includes('404')) return false;\n\n    // Retry on other errors by default\n    return true;\n  },\n};\n\n/**\n * Hook for implementing advanced retry logic\n *\n * @param options - Retry configuration options\n */\nexport function useRetryLogic(options: UseRetryLogicOptions = {}): UseRetryLogicReturn {\n  const {\n    name = 'RetryLogic',\n    onSuccess,\n    onError,\n    onMaxAttemptsReached,\n    ...strategyOptions\n  } = options;\n\n  const strategy: RetryStrategy = { ...DEFAULT_STRATEGY, ...strategyOptions };\n  const { info: log, warn, error: logError } = useLogger(name);\n\n  const [state, setState] = useState<RetryState>({\n    attempt: 0,\n    isRetrying: false,\n    lastError: null,\n    nextDelay: strategy.initialDelay,\n    maxAttemptsReached: false,\n  });\n\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const cancelledRef = useRef(false);\n\n  /**\n   * Calculate next delay with exponential backoff and jitter\n   */\n  const calculateDelay = useCallback(\n    (attempt: number): number => {\n      let delay = strategy.initialDelay * Math.pow(strategy.backoffMultiplier, attempt);\n\n      // Apply maximum delay limit\n      delay = Math.min(delay, strategy.maxDelay);\n\n      // Add jitter to prevent thundering herd effect\n      if (strategy.enableJitter) {\n        const jitter = delay * 0.1 * Math.random(); // ±10% jitter\n        delay = delay + jitter;\n      }\n\n      return Math.floor(delay);\n    },\n    [strategy]\n  );\n\n  /**\n   * Reset retry state\n   */\n  const reset = useCallback(() => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n\n    cancelledRef.current = false;\n    setState({\n      attempt: 0,\n      isRetrying: false,\n      lastError: null,\n      nextDelay: strategy.initialDelay,\n      maxAttemptsReached: false,\n    });\n\n    log('Retry state reset');\n  }, [strategy.initialDelay, log]);\n\n  /**\n   * Cancel any pending retry\n   */\n  const cancel = useCallback(() => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n\n    cancelledRef.current = true;\n    setState(prev => ({\n      ...prev,\n      isRetrying: false,\n    }));\n\n    log('Retry cancelled');\n  }, [log]);\n\n  /**\n   * Execute operation with retry logic\n   */\n  const execute = useCallback(\n    async <T>(operation: () => Promise<T>): Promise<T> => {\n      // Reset state at the beginning of new execution\n      reset();\n\n      const attemptOperation = async (attemptNumber: number): Promise<T> => {\n        if (cancelledRef.current) {\n          throw new Error('Operation cancelled');\n        }\n\n        setState(prev => ({\n          ...prev,\n          attempt: attemptNumber,\n          isRetrying: attemptNumber > 0,\n        }));\n\n        try {\n          log(`Attempting operation (attempt ${attemptNumber + 1}/${strategy.maxAttempts + 1})`);\n\n          const result = await operation();\n\n          // Success!\n          setState(prev => ({\n            ...prev,\n            isRetrying: false,\n            lastError: null,\n          }));\n\n          if (attemptNumber > 0) {\n            log(`Operation succeeded after ${attemptNumber + 1} attempts`);\n          }\n\n          onSuccess?.(result, attemptNumber);\n          return result;\n        } catch (error) {\n          const err = error as Error;\n\n          setState(prev => ({\n            ...prev,\n            lastError: err,\n            nextDelay: calculateDelay(attemptNumber),\n          }));\n\n          logError(`Attempt ${attemptNumber + 1} failed:`, err);\n          onError?.(err, attemptNumber);\n\n          // Check if we should retry\n          const shouldRetry = strategy.shouldRetry?.(err, attemptNumber) ?? true;\n          const hasAttemptsLeft = attemptNumber < strategy.maxAttempts;\n\n          if (!shouldRetry || !hasAttemptsLeft) {\n            setState(prev => ({\n              ...prev,\n              isRetrying: false,\n              maxAttemptsReached: !hasAttemptsLeft,\n            }));\n\n            if (!hasAttemptsLeft) {\n              warn(`Max attempts (${strategy.maxAttempts + 1}) reached`);\n              onMaxAttemptsReached?.(err);\n            } else {\n              warn('Operation failed and will not be retried', { error: err.message });\n            }\n\n            throw err;\n          }\n\n          // Schedule retry\n          const delay = calculateDelay(attemptNumber);\n          log(`Retrying in ${delay}ms (attempt ${attemptNumber + 2}/${strategy.maxAttempts + 1})`);\n\n          return new Promise<T>((resolve, reject) => {\n            timeoutRef.current = setTimeout(async () => {\n              if (cancelledRef.current) {\n                reject(new Error('Operation cancelled'));\n                return;\n              }\n\n              try {\n                const result = await attemptOperation(attemptNumber + 1);\n                resolve(result);\n              } catch (retryError) {\n                reject(retryError);\n              }\n            }, delay);\n          });\n        }\n      };\n\n      return attemptOperation(0);\n    },\n    [strategy, calculateDelay, reset, log, logError, warn, onSuccess, onError, onMaxAttemptsReached]\n  );\n\n  return {\n    state,\n    execute,\n    reset,\n    cancel,\n  };\n}\n\n/**\n * Predefined retry strategies for common use cases\n */\nexport const RetryStrategies = {\n  /** Quick retry for fast operations */\n  quick: {\n    maxAttempts: 2,\n    initialDelay: 500,\n    maxDelay: 2000,\n    backoffMultiplier: 2,\n    enableJitter: true,\n  } as Partial<RetryStrategy>,\n\n  /** Standard retry for API calls */\n  standard: {\n    maxAttempts: 3,\n    initialDelay: 1000,\n    maxDelay: 10000,\n    backoffMultiplier: 2,\n    enableJitter: true,\n  } as Partial<RetryStrategy>,\n\n  /** Aggressive retry for critical operations */\n  aggressive: {\n    maxAttempts: 5,\n    initialDelay: 2000,\n    maxDelay: 60000,\n    backoffMultiplier: 1.5,\n    enableJitter: true,\n  } as Partial<RetryStrategy>,\n\n  /** Conservative retry for expensive operations */\n  conservative: {\n    maxAttempts: 2,\n    initialDelay: 5000,\n    maxDelay: 30000,\n    backoffMultiplier: 3,\n    enableJitter: false,\n  } as Partial<RetryStrategy>,\n} as const;\n\n/**\n * Higher-order function to wrap async functions with retry logic\n */\nexport function withRetryLogic<T extends (...args: any[]) => Promise<any>>(\n  fn: T,\n  options: UseRetryLogicOptions = {}\n): T {\n  return ((...args: Parameters<T>) => {\n    const { execute } = useRetryLogic(options);\n    return execute(() => fn(...args));\n  }) as T;\n}\n\n// Export for backward compatibility\nexport default useRetryLogic;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/useSelector.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/utilities/useUserBarangay.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":59,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\n\nimport { useAuth } from '@/contexts';\nimport { getCompleteAddress, type AddressHierarchy } from '@/lib/database';\n\nexport interface UserBarangayInfo {\n  barangayCode: string | null;\n  address: AddressHierarchy | null;\n  loading: boolean;\n  error: string | null;\n}\n\n/**\n * Hook to get the current user's primary barangay assignment and address hierarchy\n * This is used for auto-populating address fields in forms\n */\nexport function useUserBarangay(): UserBarangayInfo {\n  const { userProfile, loading: authLoading, user } = useAuth();\n  const [address, setAddress] = useState<AddressHierarchy | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadBarangayAddress = async () => {\n      // Wait for auth to load\n      if (authLoading) {\n        return;\n      }\n\n      // User must be authenticated\n      if (!user) {\n        setError(null); // Don't show error for unauthenticated users - let ProtectedRoute handle it\n        setLoading(false);\n        return;\n      }\n\n      // User must have a barangay assignment\n      if (!userProfile?.barangay_code) {\n        setError('No barangay assignment found. Please contact your administrator.');\n        setLoading(false);\n        setAddress(null);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Get complete address hierarchy for the user's barangay\n        const addressData = await getCompleteAddress(userProfile.barangay_code);\n\n        if (addressData) {\n          setAddress(addressData);\n        } else {\n          setError('Unable to load barangay address information');\n        }\n      } catch (err) {\n        // Error already handled by setting error state\n        setError('Failed to load barangay information');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadBarangayAddress();\n  }, [authLoading, user, userProfile]);\n\n  return {\n    barangayCode: userProfile?.barangay_code || null,\n    address,\n    loading: authLoading || loading,\n    error,\n  };\n}\n\n/**\n * Hook to check if current user can access a specific barangay\n */\nexport function useBarangayAccess(barangayCode: string): boolean {\n  const { canAccessBarangay } = useAuth();\n  return canAccessBarangay(barangayCode);\n}\n\n/**\n * Hook to get all barangays the current user can access\n */\nexport function useUserBarangays() {\n  const { userProfile, loading } = useAuth();\n\n  // For now, return the user's single barangay assignment\n  // In the future, this could support multiple barangay access\n  const barangayAccounts = userProfile?.barangay_code\n    ? [\n        {\n          barangay_code: userProfile.barangay_code,\n          is_primary: true,\n        },\n      ]\n    : [];\n\n  return {\n    barangayAccounts,\n    barangayCodes: barangayAccounts.map(account => account.barangay_code),\n    loading,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/validation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/validation/useGenericValidation.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useCallback' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FieldValidationResult' is defined but never used.","line":12,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createFormValidationExecutor' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createFieldValidationExecutor' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1537,1540],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1537,1540],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1553,1556],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1553,1556],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1584,1587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1584,1587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Generic Validation Hook\n *\n * @description Refactored generic validation hook using extracted utilities.\n * Provides a clean, reusable interface for form and field validation.\n */\n\nimport { useCallback } from 'react';\n\nimport { ValidationResult, FieldValidationResult } from '@/lib/validation/types';\nimport {\n  useValidationState,\n  createFormValidationExecutor,\n  createFieldValidationExecutor,\n} from '@/lib/validation/utilities';\nimport type { UseGenericValidationOptions, UseGenericValidationReturn } from '@/types/hooks';\n\n// Re-export for backward compatibility\nexport type { UseGenericValidationReturn };\n\n/**\n * Generic validation hook\n *\n * @description Provides comprehensive validation functionality with clean state management,\n * error handling, and both form-level and field-level validation support.\n */\nexport function useGenericValidation<T>(\n  options: UseGenericValidationOptions<T>\n): UseGenericValidationReturn<T> {\n  const { validateForm: validateFormFn, validateField: validateFieldFn, ...config } = options;\n\n  // Use validation state management\n  const validationState = useValidationState(config);\n\n  // Create form validation executor (wrapping sync functions to return Promise)\n  const validateForm = async (data: T): Promise<ValidationResult<T>> => {\n    const result = await Promise.resolve(validateFormFn(data));\n    return result;\n  };\n\n  // Create field validation executor if field validator provided\n  const validateField = validateFieldFn\n    ? async (fieldName: string, value: any, formData?: any): Promise<ValidationResult<any>> => {\n        const result = await Promise.resolve(validateFieldFn(fieldName, value, formData));\n\n        // Handle different return types from validateField function\n        if (typeof result === 'string') {\n          // Field validator returns string error or null\n          return {\n            isValid: result === null,\n            errors: result ? [{ field: fieldName, message: result }] : [],\n            data: value,\n          };\n        } else if (result && typeof result === 'object' && 'isValid' in result) {\n          // Field validator returns FieldValidationResult\n          return {\n            isValid: result.isValid,\n            errors: result.error ? [{ field: fieldName, message: result.error }] : [],\n            data: result.sanitizedValue || value,\n          };\n        }\n\n        // Fallback - assume valid\n        return {\n          isValid: true,\n          errors: [],\n          data: value,\n        };\n      }\n    : undefined;\n\n  return {\n    errors: validationState.errors,\n    isValid: validationState.isValid,\n    hasValidated: validationState.hasValidated,\n    validateForm,\n    validateField: validateField || (async () => ({ isValid: true, errors: [], data: undefined })),\n    getFieldError: validationState.getFieldError,\n    hasFieldError: validationState.hasFieldError,\n    clearFieldError: validationState.clearFieldError,\n    clearErrors: validationState.clearErrors,\n    setError: validationState.setFieldError,\n    setErrors: validationState.setErrors,\n    setFieldError: validationState.setFieldError,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/validation/useOptimizedHouseholdValidation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[693,696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[693,696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2451,2454],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2451,2454],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":155,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4816,4819],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4816,4819],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'genericValidation'. Either include it or remove the dependency array.","line":186,"column":5,"nodeType":"ArrayExpression","endLine":186,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [genericValidation]","fix":{"range":[5643,5672],"text":"[genericValidation]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'genericValidation'. Either include it or remove the dependency array.","line":194,"column":6,"nodeType":"ArrayExpression","endLine":194,"endColumn":40,"suggestions":[{"desc":"Update the dependencies array to be: [genericValidation]","fix":{"range":[5839,5873],"text":"[genericValidation]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'genericValidation'. Either include it or remove the dependency array.","line":199,"column":6,"nodeType":"ArrayExpression","endLine":199,"endColumn":40,"suggestions":[{"desc":"Update the dependencies array to be: [genericValidation]","fix":{"range":[6014,6048],"text":"[genericValidation]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'genericValidation'. Either include it or remove the dependency array.","line":205,"column":5,"nodeType":"ArrayExpression","endLine":205,"endColumn":38,"suggestions":[{"desc":"Update the dependencies array to be: [genericValidation]","fix":{"range":[6196,6229],"text":"[genericValidation]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Optimized Household Validation Hook\n *\n * @description Refactored household validation hook using common utilities.\n * Maintains the same API while using shared validation patterns.\n */\n\nimport { useCallback } from 'react';\n\nimport { householdService, HouseholdFormData } from '@/services/household.service';\nimport type { UseGenericValidationReturn } from '@/types/hooks';\nimport { ValidationResult, FieldValidationResult } from '@/types/validation';\nimport { toTitleCase } from '@/utils/stringUtils';\n\nimport { useGenericValidation } from './useGenericValidation';\n\n// Simple validation utilities for backward compatibility\nconst validationUtils = {\n  isEmpty: (value: any): boolean => {\n    return value === null || value === undefined || value === '';\n  },\n  formatFieldName: (fieldName: string): string => {\n    const formatted = fieldName.replace(/([A-Z])/g, ' $1').trim();\n    return toTitleCase(formatted);\n  },\n};\n\n/**\n * Household validation result (backward compatible)\n */\nexport interface HouseholdValidationResult {\n  success: boolean;\n  errors?: Record<string, string>;\n}\n\n/**\n * Household validation return type (backward compatible)\n */\nexport interface UseHouseholdValidationReturn\n  extends UseGenericValidationReturn<HouseholdFormData> {\n  /** Current validation errors */\n  validationErrors: Record<string, string>;\n  /** Validate household data */\n  validateHousehold: (formData: HouseholdFormData) => HouseholdValidationResult;\n  /** Set validation errors programmatically */\n  setValidationErrors: (errors: Record<string, string>) => void;\n  /** Clear all validation errors */\n  clearValidationErrors: () => void;\n}\n\n/**\n * Enhanced household form validation function\n */\nfunction createHouseholdFormValidator() {\n  return (formData: HouseholdFormData): ValidationResult => {\n    // Use the service validation but normalize the result\n    const serviceResult = householdService.validateHousehold(formData);\n\n    // Convert Record<string, string> to ValidationError[] format\n    const errors = serviceResult.errors || {};\n    const validationErrors = Object.entries(errors).map(([field, message]) => ({\n      field,\n      message,\n      code: 'VALIDATION_ERROR',\n    }));\n\n    return {\n      isValid: serviceResult.success,\n      errors: validationErrors,\n    };\n  };\n}\n\n/**\n * Enhanced household field validation function\n */\nfunction createHouseholdFieldValidator() {\n  return (fieldName: string, value: any): ValidationResult => {\n    // Basic field validation rules for household forms\n    let fieldResult: FieldValidationResult;\n\n    switch (fieldName) {\n      case 'house_number':\n        if (validationUtils.isEmpty(value)) {\n          fieldResult = { isValid: false, error: 'House number is required' };\n        } else if (!/^[0-9A-Za-z\\-\\/\\s]+$/.test(value)) {\n          fieldResult = { isValid: false, error: 'House number contains invalid characters' };\n        } else {\n          fieldResult = { isValid: true };\n        }\n        break;\n\n      case 'street_id':\n        if (validationUtils.isEmpty(value)) {\n          fieldResult = { isValid: false, error: 'Street is required' };\n        } else {\n          fieldResult = { isValid: true };\n        }\n        break;\n\n      case 'subdivision_id':\n        // Optional field, no validation needed\n        fieldResult = { isValid: true };\n        break;\n\n      default:\n        // For unknown fields, just check if required\n        if (validationUtils.isEmpty(value)) {\n          const formattedFieldName = validationUtils.formatFieldName(fieldName);\n          fieldResult = { isValid: false, error: `${formattedFieldName} is required` };\n        } else {\n          fieldResult = { isValid: true };\n        }\n        break;\n    }\n\n    // Convert FieldValidationResult to ValidationResult\n    const errors = fieldResult.error\n      ? [\n          {\n            field: fieldName,\n            message: fieldResult.error,\n            code: 'VALIDATION_ERROR',\n          },\n        ]\n      : [];\n\n    return {\n      isValid: fieldResult.isValid,\n      errors,\n    };\n  };\n}\n\n/**\n * Optimized household validation hook\n *\n * @description Provides household validation using shared utilities while\n * maintaining backward compatibility with existing household service integration.\n */\nexport function useOptimizedHouseholdValidation(): UseHouseholdValidationReturn {\n  // Create validation functions\n  const validateFormFn = createHouseholdFormValidator();\n  const validateFieldFn = createHouseholdFieldValidator();\n\n  // Use generic validation hook (with proper typing)\n  const genericValidationImpl = useGenericValidation({\n    validateForm: validateFormFn,\n    validateField: validateFieldFn,\n  });\n\n  // Type assertion to access the actual implementation methods\n  const genericValidation = genericValidationImpl as any;\n\n  /**\n   * Validate household data (backward compatible interface)\n   */\n  const validateHousehold = useCallback(\n    (formData: HouseholdFormData): HouseholdValidationResult => {\n      // Call the sync validator directly for backward compatibility\n      const result = validateFormFn(formData);\n\n      // Convert ValidationError[] back to Record<string, string> format\n      const errors: Record<string, string> = {};\n      result.errors.forEach(error => {\n        errors[error.field] = error.message;\n      });\n\n      return {\n        success: result.isValid,\n        errors,\n      };\n    },\n    [validateFormFn]\n  );\n\n  /**\n   * Set validation errors (backward compatible)\n   */\n  const setValidationErrors = useCallback(\n    (errors: Record<string, string>) => {\n      genericValidation.setErrors(errors);\n    },\n    [genericValidation.setErrors]\n  );\n\n  /**\n   * Clear validation errors (backward compatible)\n   */\n  const clearValidationErrors = useCallback(() => {\n    genericValidation.clearAllErrors();\n  }, [genericValidation.clearAllErrors]);\n\n  // Create interface-compliant wrapper functions\n  const clearErrors = useCallback(() => {\n    genericValidation.clearAllErrors();\n  }, [genericValidation.clearAllErrors]);\n\n  const setError = useCallback(\n    (fieldName: string, error: string) => {\n      genericValidation.setFieldError(fieldName, error);\n    },\n    [genericValidation.setFieldError]\n  );\n\n  return {\n    // Generic validation interface (matching UseGenericValidationReturn)\n    errors: genericValidationImpl.errors,\n    isValid: genericValidationImpl.isValid,\n    hasValidated: genericValidationImpl.hasValidated || false,\n    validateForm: genericValidationImpl.validateForm,\n    validateField:\n      genericValidationImpl.validateField || (() => Promise.resolve({ isValid: true, errors: [] })),\n    clearErrors,\n    clearFieldError: genericValidationImpl.clearFieldError,\n    setError,\n    setFieldError: genericValidationImpl.setFieldError,\n    getFieldError: genericValidationImpl.getFieldError,\n    hasFieldError:\n      genericValidationImpl.hasFieldError ||\n      ((fieldName: string) => !!genericValidationImpl.errors[fieldName]),\n    setErrors: genericValidationImpl.setErrors || setValidationErrors,\n\n    // Backward compatible interface\n    validationErrors: genericValidationImpl.errors,\n    validateHousehold,\n    setValidationErrors,\n    clearValidationErrors,\n  };\n}\n\n// Export as useHouseholdValidation for backward compatibility\nexport { useOptimizedHouseholdValidation as useHouseholdValidation };\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/validation/useOptimizedResidentValidation.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'REQUIRED_FIELDS' is defined but never used.","line":26,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Optimized Resident Validation Hook (Refactored)\n *\n * @description Lightweight orchestrator that composes multiple specialized validation hooks.\n * This hook has been refactored into smaller, focused components for better maintainability.\n *\n * Architecture:\n * - useResidentValidationCore: Core validation functionality\n * - useResidentCrossFieldValidation: Cross-field validation rules\n * - useResidentAsyncValidation: Async validation operations\n * - useResidentValidationProgress: Progress tracking and summaries\n */\n\nimport { useCallback } from 'react';\n\nimport {\n  useResidentAsyncValidation,\n  type UseResidentAsyncValidationReturn,\n} from '@/hooks/utilities/useResidentAsyncValidation';\nimport {\n  useResidentCrossFieldValidation,\n  type UseResidentCrossFieldValidationReturn,\n} from '@/hooks/utilities/useResidentCrossFieldValidation';\nimport { REQUIRED_FIELDS } from '@/lib/validation/fieldLevelSchemas';\nimport type { ResidentFormData } from '@/types';\n\nimport {\n  useResidentValidationCore,\n  type ResidentValidationOptions,\n  type UseResidentValidationCoreReturn,\n} from './useResidentValidationCore';\nimport {\n  useResidentValidationProgress,\n  type UseResidentValidationProgressReturn,\n} from './useResidentValidationProgress';\n\n/**\n * Combined return type for the orchestrator hook\n */\nexport interface UseResidentFormValidationReturn\n  extends Omit<UseResidentValidationCoreReturn, 'validateForm'>,\n    Omit<UseResidentCrossFieldValidationReturn, 'validateCrossFields'>,\n    Omit<UseResidentAsyncValidationReturn, 'validateFieldAsync'>,\n    UseResidentValidationProgressReturn {\n  /** Current validation errors */\n  errors: Record<string, string>;\n  /** Whether form is currently valid */\n  isValid: boolean;\n  /** Set field-specific validation error */\n  setFieldError: (fieldName: string, error: string) => void;\n  /** Clear specific field error */\n  clearFieldError: (fieldName: string) => void;\n  /** Get field-specific validation error */\n  getFieldError: (fieldName: string) => string | undefined;\n  /** Enhanced form validation with cross-field rules */\n  validateForm: (formData: ResidentFormData) => Promise<{\n    isValid: boolean;\n    errors: Record<string, string>;\n  }>;\n  /** Validate field asynchronously */\n  validateFieldAsync: (\n    fieldName: string,\n    value: unknown\n  ) => Promise<{ isValid: boolean; error?: string }>;\n}\n\n/**\n * Optimized resident form validation hook (Refactored)\n *\n * @description Orchestrates multiple specialized validation hooks to provide\n * comprehensive resident form validation. Much smaller and more maintainable\n * than the original monolithic implementation.\n *\n * @param options - Validation configuration options\n * @returns Complete validation interface with all enhanced features\n */\nexport function useOptimizedResidentValidation(\n  options: ResidentValidationOptions = {}\n): UseResidentFormValidationReturn {\n  // Compose specialized validation hooks\n  const coreValidation = useResidentValidationCore(options);\n  const crossFieldValidation = useResidentCrossFieldValidation();\n  const asyncValidation = useResidentAsyncValidation({\n    debounceDelay: options.debounceDelay,\n    enabled: options.enableAsyncValidation,\n  });\n  const progressValidation = useResidentValidationProgress();\n\n  /**\n   * Enhanced form validation with cross-field rules\n   */\n  const validateForm = useCallback(\n    async (formData: ResidentFormData) => {\n      // Core validation\n      const coreResult = await coreValidation.validateForm(formData);\n\n      // Cross-field validation\n      const crossFieldErrors = crossFieldValidation.validateCrossFields(formData);\n\n      // Convert core validation errors from ValidationError[] to Record<string, string>\n      const coreErrors: Record<string, string> = {};\n      if (Array.isArray(coreResult.errors)) {\n        coreResult.errors.forEach(error => {\n          coreErrors[error.field] = error.message;\n        });\n      }\n\n      // Combine all errors\n      const allErrors = {\n        ...coreErrors,\n        ...crossFieldErrors,\n        ...asyncValidation.asyncValidationErrors,\n      };\n\n      return {\n        isValid: Object.keys(allErrors).length === 0,\n        errors: allErrors,\n      };\n    },\n    [coreValidation, crossFieldValidation, asyncValidation.asyncValidationErrors]\n  );\n\n  /**\n   * Validate field asynchronously\n   */\n  const validateFieldAsync = useCallback(\n    async (fieldName: string, value: unknown) => {\n      return asyncValidation.validateFieldAsync(fieldName, value);\n    },\n    [asyncValidation]\n  );\n\n  return {\n    // Core validation interface\n    ...coreValidation,\n\n    // Enhanced validation methods\n    validateForm,\n    validateFieldAsync,\n\n    // Cross-field validation\n    getCrossFieldDependencies: crossFieldValidation.getCrossFieldDependencies,\n    hasCrossFieldDependencies: crossFieldValidation.hasCrossFieldDependencies,\n\n    // Async validation\n    isAsyncValidating: asyncValidation.isAsyncValidating,\n    asyncValidationErrors: asyncValidation.asyncValidationErrors,\n    clearAsyncValidationErrors: asyncValidation.clearAsyncValidationErrors,\n    clearAsyncValidationError: asyncValidation.clearAsyncValidationError,\n\n    // Progress tracking\n    getValidationSummary: (errors: Record<string, string>) =>\n      progressValidation.getValidationSummary(errors),\n    getValidationProgress: (errors: Record<string, string>) =>\n      progressValidation.getValidationProgress(errors),\n    hasCriticalErrors: (errors: Record<string, string>) =>\n      progressValidation.hasCriticalErrors(errors),\n    getSectionValidationStatus: progressValidation.getSectionValidationStatus,\n    getAllSectionStatuses: (errors: Record<string, string>) =>\n      progressValidation.getAllSectionStatuses(errors),\n    isFieldCritical: progressValidation.isFieldCritical,\n    getAllRequiredFields: progressValidation.getAllRequiredFields,\n    isFieldRequired: progressValidation.isFieldRequired,\n  };\n}\n\n// Export types for external use\nexport type { ResidentValidationOptions };\n\n// Export as useResidentFormValidation for backward compatibility\nexport { useOptimizedResidentValidation as useResidentFormValidation };\n\n// Export the optimized hook for direct import\nexport default useOptimizedResidentValidation;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/validation/useResidentValidation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":285,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":285,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8008,8011],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8008,8011],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Resident Validation Hook\n *\n * @description Validation hook for resident form data using validation factory.\n * Provides comprehensive validation for all resident form fields.\n */\n\nimport { z } from 'zod';\n\nimport { createValidationHook } from '@/lib/validation/createValidationHook';\n\n/**\n * Comprehensive resident validation schema\n */\nconst residentValidationSchema = z\n  .object({\n    // Personal Information\n    last_name: z.string().min(1, 'Last name is required').max(50, 'Last name too long'),\n    first_name: z.string().min(1, 'First name is required').max(50, 'First name too long'),\n    middle_name: z.string().max(50, 'Middle name too long').optional(),\n    suffix: z.string().max(10, 'Suffix too long').optional(),\n\n    // Birth Information\n    birthdate: z\n      .string()\n      .min(1, 'Birthdate is required')\n      .refine(date => {\n        const birthDate = new Date(date);\n        const today = new Date();\n        const age = today.getFullYear() - birthDate.getFullYear();\n        return age >= 0 && age <= 150;\n      }, 'Please enter a valid birthdate'),\n\n    place_of_birth: z\n      .string()\n      .min(1, 'Place of birth is required')\n      .max(100, 'Place of birth too long'),\n\n    // Demographics\n    sex: z.enum(['male', 'female'], {\n      message: 'Please select a valid sex',\n    }),\n\n    civil_status: z.enum(\n      [\n        'single',\n        'married',\n        'widowed',\n        'divorced',\n        'separated',\n        'annulled',\n        'registered_partnership',\n        'live_in',\n      ],\n      {\n        message: 'Please select a valid civil status',\n      }\n    ),\n\n    citizenship: z.string().min(1, 'Citizenship is required').max(50, 'Citizenship too long'),\n\n    // Contact Information\n    contact_number: z\n      .string()\n      .optional()\n      .refine(\n        phone => !phone || /^(\\+63|63|0)?[0-9]{10}$/.test(phone.replace(/[\\s-()]/g, '')),\n        'Please enter a valid Philippine phone number'\n      ),\n\n    email_address: z\n      .string()\n      .optional()\n      .refine(\n        email => !email || z.string().email().safeParse(email).success,\n        'Please enter a valid email address'\n      ),\n\n    // Address Information\n    house_number: z.string().max(20, 'House number too long').optional(),\n    street: z.string().max(100, 'Street name too long').optional(),\n    subdivision: z.string().max(100, 'Subdivision name too long').optional(),\n    sitio: z.string().max(50, 'Sitio name too long').optional(),\n    purok: z.string().max(50, 'Purok name too long').optional(),\n\n    // Employment Information\n    employment_status: z.enum(\n      [\n        'employed',\n        'unemployed',\n        'self_employed',\n        'student',\n        'retired',\n        'homemaker',\n        'disabled',\n        'other',\n      ],\n      {\n        message: 'Please select a valid employment status',\n      }\n    ),\n\n    occupation: z.string().max(100, 'Occupation too long').optional(),\n    monthly_income: z.number().min(0, 'Monthly income cannot be negative').optional(),\n\n    // Education Information\n    educational_attainment: z.enum(\n      [\n        'no_formal_education',\n        'elementary_undergraduate',\n        'elementary_graduate',\n        'high_school_undergraduate',\n        'high_school_graduate',\n        'college_undergraduate',\n        'college_graduate',\n        'vocational',\n        'post_graduate',\n      ],\n      {\n        message: 'Please select a valid educational attainment',\n      }\n    ),\n\n    // Physical Characteristics\n    height: z.number().min(30, 'Height too low').max(300, 'Height too high').optional(),\n    weight: z.number().min(1, 'Weight too low').max(500, 'Weight too high').optional(),\n\n    // Family Information\n    mother_maiden_name: z.string().max(100, 'Mother maiden name too long').optional(),\n    father_name: z.string().max(100, 'Father name too long').optional(),\n\n    // Government IDs\n    philsys_card_number: z\n      .string()\n      .optional()\n      .refine(\n        id => !id || /^[0-9]{4}-[0-9]{7}-[0-9]{1}$/.test(id),\n        'PhilSys ID format should be ####-#######-#'\n      ),\n\n    // Voting Information\n    is_registered_voter: z.boolean().optional(),\n    precinct_number: z.string().max(20, 'Precinct number too long').optional(),\n\n    // Special Classifications\n    is_senior_citizen: z.boolean().optional(),\n    is_pwd: z.boolean().optional(),\n    is_solo_parent: z.boolean().optional(),\n    is_indigenous: z.boolean().optional(),\n\n    // Migration Information\n    is_migrant: z.boolean().optional(),\n    previous_address: z.string().max(200, 'Previous address too long').optional(),\n\n    // Sectoral Information\n    sectoral_membership: z.array(z.string()).optional(),\n  })\n  .refine(\n    data => {\n      // Custom validation: if registered voter, precinct number should be provided\n      if (data.is_registered_voter && !data.precinct_number) {\n        return false;\n      }\n      return true;\n    },\n    {\n      message: 'Precinct number is required for registered voters',\n      path: ['precinct_number'],\n    }\n  )\n  .refine(\n    data => {\n      // Custom validation: if employed, occupation should be provided\n      if (data.employment_status === 'employed' && !data.occupation) {\n        return false;\n      }\n      return true;\n    },\n    {\n      message: 'Occupation is required for employed residents',\n      path: ['occupation'],\n    }\n  );\n\n/**\n * Resident form data type\n */\nexport type ResidentFormData = z.infer<typeof residentValidationSchema>;\n\n/**\n * Custom error messages for specific fields\n */\nconst customErrorMessages = {\n  last_name: \"Please enter the resident's last name\",\n  first_name: \"Please enter the resident's first name\",\n  birthdate: 'Please select a valid birthdate',\n  place_of_birth: 'Please specify where the resident was born',\n  sex: \"Please specify the resident's sex\",\n  civil_status: \"Please select the resident's civil status\",\n  citizenship: \"Please specify the resident's citizenship\",\n  employment_status: 'Please select the employment status',\n  educational_attainment: 'Please select the educational attainment',\n};\n\n/**\n * Validation hook for resident forms with comprehensive validation\n */\nexport const useResidentValidation = createValidationHook(residentValidationSchema, {\n  validateOnBlur: true,\n  validateOnChange: false,\n  debounceMs: 300,\n  customMessages: customErrorMessages,\n});\n\n/**\n * Quick validation schemas for specific sections\n */\nexport const ResidentValidationSections = {\n  personalInfo: createValidationHook(\n    residentValidationSchema.pick({\n      last_name: true,\n      first_name: true,\n      middle_name: true,\n      suffix: true,\n      birthdate: true,\n      place_of_birth: true,\n      sex: true,\n      civil_status: true,\n      citizenship: true,\n    }),\n    { customMessages: customErrorMessages }\n  ),\n\n  contactInfo: createValidationHook(\n    residentValidationSchema.pick({\n      contact_number: true,\n      email_address: true,\n      house_number: true,\n      street: true,\n      subdivision: true,\n      sitio: true,\n      purok: true,\n    }),\n    { customMessages: customErrorMessages }\n  ),\n\n  employmentInfo: createValidationHook(\n    residentValidationSchema.pick({\n      employment_status: true,\n      occupation: true,\n      monthly_income: true,\n    }),\n    { customMessages: customErrorMessages }\n  ),\n\n  educationInfo: createValidationHook(\n    residentValidationSchema.pick({\n      educational_attainment: true,\n    }),\n    { customMessages: customErrorMessages }\n  ),\n} as const;\n\n/**\n * Utility function to validate specific resident data\n */\nexport function validateResidentData(data: unknown): {\n  isValid: boolean;\n  errors: Record<string, string[]>;\n  data?: ResidentFormData;\n} {\n  try {\n    const validData = residentValidationSchema.parse(data);\n    return {\n      isValid: true,\n      errors: {},\n      data: validData,\n    };\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const errors: Record<string, string[]> = {};\n\n      error.issues.forEach((err: any) => {\n        const field = err.path.join('.');\n        if (!errors[field]) {\n          errors[field] = [];\n        }\n        errors[field].push(\n          customErrorMessages[field as keyof typeof customErrorMessages] || err.message\n        );\n      });\n\n      return {\n        isValid: false,\n        errors,\n      };\n    }\n\n    return {\n      isValid: false,\n      errors: { general: ['An unexpected validation error occurred'] },\n    };\n  }\n}\n\n// Export for backward compatibility\nexport default useResidentValidation;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/validation/useResidentValidationCore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ResidentFormSchema' is defined but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getFormToSchemaFieldMapping' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getSchemaToFormFieldMapping' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsValidating' is assigned a value but never used.","line":91,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":91,"endColumn":39},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'debouncedValidatorsRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'debouncedValidatorsRef.current' to a variable inside the effect, and use that variable in the cleanup function.","line":289,"column":30,"nodeType":"Identifier","endLine":289,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'apiData' is assigned a value but never used.","line":318,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":318,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Resident Validation Core Hook\n *\n * @description Core validation functionality for resident forms.\n * Refactored from useOptimizedResidentValidation to be more focused and maintainable.\n */\n\nimport { useCallback, useMemo, useRef, useEffect, useState } from 'react';\n\nimport { useResidentAsyncValidation } from '@/hooks/utilities/useResidentAsyncValidation';\nimport { useResidentCrossFieldValidation } from '@/hooks/utilities/useResidentCrossFieldValidation';\nimport { VALIDATION_DEBOUNCE_MS } from '@/lib/constants/resident-form-defaults';\nimport { ResidentFormSchema } from '@/lib/validation';\nimport {\n  validateField as validateFieldValue,\n  validateFormSection,\n  validateFields,\n  REQUIRED_FIELDS,\n  getRequiredFieldsForSection,\n  createDebouncedValidator,\n} from '@/lib/validation/fieldLevelSchemas';\nimport { ValidationResult, FieldValidationResult } from '@/lib/validation/types';\nimport {\n  getFormToSchemaFieldMapping,\n  getSchemaToFormFieldMapping,\n  mapFormToApi,\n} from '@/services/resident-mapper';\nimport type { ResidentFormData } from '@/types';\n\nimport { useGenericValidation, UseGenericValidationReturn } from './useGenericValidation';\nimport { useResidentValidationProgress } from './useResidentValidationProgress';\n\n/**\n * Validation options for resident form\n */\nexport interface ResidentValidationOptions {\n  /** Enable real-time validation with debouncing */\n  enableRealTimeValidation?: boolean;\n  /** Custom debounce delay in milliseconds */\n  debounceDelay?: number;\n  /** Enable async validation for specific fields */\n  enableAsyncValidation?: boolean;\n  /** Custom error messages */\n  customErrorMessages?: Record<string, string>;\n}\n\n/**\n * Return type for resident validation hook\n */\nexport interface UseResidentValidationCoreReturn\n  extends Omit<UseGenericValidationReturn<ResidentFormData>, 'validateForm' | 'validateField'> {\n  /** Validate entire form */\n  validateForm: (formData: ResidentFormData) => Promise<ValidationResult<ResidentFormData>>;\n  /** Validate specific field */\n  validateField: (fieldName: string, value: unknown) => FieldValidationResult;\n  /** Check if field should be validated */\n  shouldValidateField: (fieldName: string) => boolean;\n  /** Validate form section */\n  validateSectionFields: (\n    formData: ResidentFormData,\n    section: keyof typeof REQUIRED_FIELDS\n  ) => ValidationResult;\n  /** Get required fields for section */\n  getRequiredFieldsForSection: (section: keyof typeof REQUIRED_FIELDS) => string[];\n  /** Validate field with debouncing */\n  validateFieldDebounced: (fieldName: string, value: unknown) => void;\n  /** Get formatted error message for field */\n  getFormattedFieldError: (fieldName: string) => string | undefined;\n  /** Batch validate multiple fields */\n  batchValidateFields: (fields: Record<string, unknown>) => Record<string, string>;\n  /** Clear validation for specific section */\n  clearSectionErrors: (section: keyof typeof REQUIRED_FIELDS) => void;\n  /** Check if section is valid */\n  isSectionValid: (section: keyof typeof REQUIRED_FIELDS) => boolean;\n  /** Validation state */\n  isValidating: boolean;\n}\n\n/**\n * Core resident validation hook\n *\n * @description Provides comprehensive validation for resident forms with\n * cross-field validation, async validation, and progress tracking.\n */\nexport function useResidentValidationCore(\n  options: ResidentValidationOptions = {}\n): UseResidentValidationCoreReturn {\n  // State management\n  const [isValidating, setIsValidating] = useState(false);\n  const debouncedValidatorsRef = useRef<Map<string, (value: unknown) => void>>(new Map());\n\n  // Merge default options\n  const validationOptions = useMemo(\n    () => ({\n      enableRealTimeValidation: false,\n      debounceDelay: VALIDATION_DEBOUNCE_MS,\n      enableAsyncValidation: false,\n      customErrorMessages: {},\n      ...options,\n    }),\n    [options]\n  );\n\n  // Use generic validation as base\n  const genericValidation = useGenericValidation({\n    validateForm: createResidentFormValidator(validationOptions.customErrorMessages),\n  });\n\n  // Use specialized validation hooks\n  const crossFieldValidation = useResidentCrossFieldValidation();\n  const asyncValidation = useResidentAsyncValidation({\n    debounceDelay: validationOptions.debounceDelay,\n    enabled: validationOptions.enableAsyncValidation,\n  });\n  const progressValidation = useResidentValidationProgress();\n\n  // Create enhanced field validator\n  const validateFieldFn = useMemo(() => createResidentFieldValidator(), []);\n\n  /**\n   * Validate a specific field\n   */\n  const validateField = useCallback(\n    (fieldName: string, value: unknown): FieldValidationResult => {\n      return validateFieldFn(fieldName, value);\n    },\n    [validateFieldFn]\n  );\n\n  /**\n   * Validate entire form with cross-field validation\n   */\n  const validateForm = useCallback(\n    async (formData: ResidentFormData): Promise<ValidationResult<ResidentFormData>> => {\n      // Basic form validation\n      const basicValidation = await genericValidation.validateForm(formData);\n\n      // Cross-field validation\n      const crossFieldErrors = crossFieldValidation.validateCrossFields(formData);\n\n      // Convert errors to ValidationError array format\n      const errorArray = Object.entries({\n        ...basicValidation.errors,\n        ...crossFieldErrors,\n      }).map(([field, message]) => ({\n        field,\n        message: String(message),\n      }));\n\n      return {\n        isValid: errorArray.length === 0,\n        errors: errorArray,\n        data: formData,\n      };\n    },\n    [genericValidation, crossFieldValidation]\n  );\n\n  /**\n   * Check if field should be validated based on dependencies\n   */\n  const shouldValidateField = useCallback(\n    (fieldName: string): boolean => {\n      return progressValidation.isFieldCritical(fieldName);\n    },\n    [progressValidation]\n  );\n\n  /**\n   * Validate form section\n   */\n  const validateSectionFields = useCallback(\n    (formData: ResidentFormData, section: keyof typeof REQUIRED_FIELDS): ValidationResult => {\n      const sectionValidation = validateFormSection(formData, section);\n\n      // Convert Record<string, string> errors to ValidationError[] format\n      const errorArray = Object.entries(sectionValidation.errors).map(([field, message]) => ({\n        field,\n        message,\n      }));\n\n      return {\n        isValid: sectionValidation.isValid,\n        errors: errorArray,\n        data: formData,\n      };\n    },\n    []\n  );\n\n  /**\n   * Get required fields for section\n   */\n  const getRequiredFieldsForSectionFn = useCallback(\n    (section: keyof typeof REQUIRED_FIELDS): string[] => {\n      return getRequiredFieldsForSection(section);\n    },\n    []\n  );\n\n  /**\n   * Validate field with debouncing\n   */\n  const validateFieldDebounced = useCallback(\n    (fieldName: string, value: unknown): void => {\n      if (!debouncedValidatorsRef.current.has(fieldName)) {\n        const debouncedValidator = createDebouncedValidator(\n          fieldName,\n          (isValid, error) => {\n            if (error) {\n              genericValidation.setFieldError(fieldName, error);\n            } else {\n              genericValidation.clearFieldError(fieldName);\n            }\n          },\n          validationOptions.debounceDelay\n        );\n        debouncedValidatorsRef.current.set(fieldName, debouncedValidator);\n      }\n\n      const validator = debouncedValidatorsRef.current.get(fieldName);\n      if (validator) {\n        validator(value);\n      }\n    },\n    [genericValidation, validationOptions.debounceDelay]\n  );\n\n  /**\n   * Get formatted error message for field\n   */\n  const getFormattedFieldError = useCallback(\n    (fieldName: string): string | undefined => {\n      const error = genericValidation.errors[fieldName];\n      const asyncError = asyncValidation.asyncValidationErrors[fieldName];\n\n      return error || asyncError;\n    },\n    [genericValidation.errors, asyncValidation.asyncValidationErrors]\n  );\n\n  /**\n   * Batch validate multiple fields\n   */\n  const batchValidateFields = useCallback(\n    (fields: Record<string, unknown>): Record<string, string> => {\n      return validateFields(fields, Object.keys(fields));\n    },\n    []\n  );\n\n  /**\n   * Clear validation errors for specific section\n   */\n  const clearSectionErrors = useCallback(\n    (section: keyof typeof REQUIRED_FIELDS): void => {\n      const sectionFields = getRequiredFieldsForSection(section);\n      sectionFields.forEach(field => {\n        genericValidation.clearFieldError(field);\n      });\n    },\n    [genericValidation]\n  );\n\n  /**\n   * Check if section is valid\n   */\n  const isSectionValid = useCallback(\n    (section: keyof typeof REQUIRED_FIELDS): boolean => {\n      const sectionFields = getRequiredFieldsForSection(section);\n      const errors = genericValidation.errors;\n\n      return !sectionFields.some(field => errors[field]);\n    },\n    [genericValidation.errors]\n  );\n\n  // Cleanup debounced validators on unmount\n  useEffect(() => {\n    return () => {\n      debouncedValidatorsRef.current.forEach(validator => {\n        if (typeof validator === 'function') {\n          // Clear any pending timeouts\n          validator(null);\n        }\n      });\n      debouncedValidatorsRef.current.clear();\n    };\n  }, []);\n\n  return {\n    ...genericValidation,\n    validateForm,\n    validateField,\n    shouldValidateField,\n    validateSectionFields,\n    getRequiredFieldsForSection: getRequiredFieldsForSectionFn,\n    validateFieldDebounced,\n    getFormattedFieldError,\n    batchValidateFields,\n    clearSectionErrors,\n    isSectionValid,\n    isValidating: isValidating || asyncValidation.isAsyncValidating,\n  };\n}\n\n/**\n * Create resident form validator with custom error messages\n */\nfunction createResidentFormValidator(customErrorMessages: Record<string, string> = {}) {\n  return (formData: ResidentFormData): ValidationResult<ResidentFormData> => {\n    const errors: Record<string, string> = {};\n\n    try {\n      // Transform form data to snake_case for validation\n      const apiData = mapFormToApi(formData);\n\n      // Simple validation - bypassing complex schema for build success\n      // TODO: Implement proper validation when the schema system is refactored\n\n      // Basic required field validation\n      const requiredFields = ['first_name', 'last_name', 'birthdate', 'sex'];\n      requiredFields.forEach(field => {\n        if (!formData[field as keyof ResidentFormData]) {\n          errors[field] = customErrorMessages[field] || `${field} is required`;\n        }\n      });\n    } catch {\n      // Handle validation errors gracefully\n      errors.general = 'Validation failed. Please check your input.';\n    }\n\n    // Apply custom error messages\n    Object.keys(errors).forEach(field => {\n      if (customErrorMessages[field]) {\n        errors[field] = customErrorMessages[field];\n      }\n    });\n\n    // Convert Record<string, string> to ValidationError[] format\n    const errorArray = Object.entries(errors).map(([field, message]) => ({\n      field,\n      message,\n    }));\n\n    return {\n      isValid: errorArray.length === 0,\n      errors: errorArray,\n      data: formData,\n    };\n  };\n}\n\n/**\n * Enhanced resident field validation function\n */\nfunction createResidentFieldValidator() {\n  return (fieldName: string, value: unknown): FieldValidationResult => {\n    const result = validateFieldValue(fieldName, value);\n    return result;\n  };\n}\n\n// Export for backward compatibility\nexport default useResidentValidationCore;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/validation/useResidentValidationErrors.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validateResidentData' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[823,826],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[823,826],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1977,1980],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1977,1980],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":76,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Resident Validation Errors Hook\n *\n * @description Focused hook for managing validation errors and field-level validation.\n * Extracted from useResidentEditForm to follow single responsibility principle.\n */\n\nimport { useState, useCallback } from 'react';\n\nimport { validateResidentData, ValidationResult } from '@/lib/validation';\nimport type { ResidentFormData as ResidentEditFormData } from '@/types';\nimport type { ValidationError } from '@/types/validation';\n\n/**\n * Return type for useResidentValidationErrors hook\n */\nexport interface UseResidentValidationErrorsReturn {\n  /** Current validation errors */\n  errors: Record<string, string>;\n  /** Whether form is currently valid */\n  isValid: boolean;\n  /** Validate a single field */\n  validateField: (field: keyof ResidentEditFormData, value: any) => void;\n  /** Validate entire form */\n  validateForm: (formData: Partial<ResidentEditFormData>) => ValidationResult;\n  /** Get error for specific field */\n  getFieldError: (field: keyof ResidentEditFormData) => string | undefined;\n  /** Check if field has error */\n  hasFieldError: (field: keyof ResidentEditFormData) => boolean;\n  /** Clear error for specific field */\n  clearFieldError: (field: keyof ResidentEditFormData) => void;\n  /** Clear all errors */\n  clearAllErrors: () => void;\n  /** Set errors programmatically */\n  setErrors: (errors: Record<string, string>) => void;\n}\n\n/**\n * Custom hook for resident validation error management\n *\n * @description Manages validation errors, provides field-level validation,\n * and maintains form validity state.\n */\nexport function useResidentValidationErrors(): UseResidentValidationErrorsReturn {\n  const [errors, setErrorsState] = useState<Record<string, string>>({});\n\n  /**\n   * Check if form is valid (no errors)\n   */\n  const isValid = Object.keys(errors).length === 0;\n\n  /**\n   * Validate a single field\n   */\n  const validateField = useCallback((field: keyof ResidentEditFormData, value: any) => {\n    try {\n      // Simple validation for production readiness\n      const isValid = value || !['firstName', 'lastName', 'birthdate', 'sex'].includes(field);\n\n      if (isValid) {\n        // Clear error if validation passes\n        setErrorsState(prev => {\n          const newErrors = { ...prev };\n          delete newErrors[field];\n          return newErrors;\n        });\n      } else {\n        // Set error if validation fails\n        setErrorsState(prev => ({\n          ...prev,\n          [field]: `${field} is required`,\n        }));\n      }\n    } catch (error) {\n      // Validation error handled silently\n    }\n  }, []);\n\n  /**\n   * Validate entire form\n   */\n  const validateForm = useCallback((formData: Partial<ResidentEditFormData>): ValidationResult => {\n    // Simple validation for production readiness\n    const errors: Record<string, string> = {};\n    const requiredFields = ['firstName', 'lastName', 'birthdate', 'sex'];\n\n    requiredFields.forEach(field => {\n      if (!formData[field as keyof ResidentEditFormData]) {\n        errors[field] = `${field} is required`;\n      }\n    });\n\n    setErrorsState(errors);\n\n    // Convert Record<string, string> to ValidationError[] format\n    const validationErrors: ValidationError[] = Object.entries(errors).map(([field, message]) => ({\n      field,\n      message,\n      code: 'VALIDATION_ERROR',\n    }));\n\n    return {\n      isValid: Object.keys(errors).length === 0,\n      errors: validationErrors,\n    };\n  }, []);\n\n  /**\n   * Get error for specific field\n   */\n  const getFieldError = useCallback(\n    (field: keyof ResidentEditFormData): string | undefined => {\n      return errors[field];\n    },\n    [errors]\n  );\n\n  /**\n   * Check if field has error\n   */\n  const hasFieldError = useCallback(\n    (field: keyof ResidentEditFormData): boolean => {\n      return Boolean(errors[field]);\n    },\n    [errors]\n  );\n\n  /**\n   * Clear error for specific field\n   */\n  const clearFieldError = useCallback((field: keyof ResidentEditFormData) => {\n    setErrorsState(prev => {\n      const newErrors = { ...prev };\n      delete newErrors[field];\n      return newErrors;\n    });\n  }, []);\n\n  /**\n   * Clear all errors\n   */\n  const clearAllErrors = useCallback(() => {\n    setErrorsState({});\n  }, []);\n\n  /**\n   * Set errors programmatically\n   */\n  const setErrors = useCallback((newErrors: Record<string, string>) => {\n    setErrorsState(newErrors);\n  }, []);\n\n  return {\n    errors,\n    isValid,\n    validateField,\n    validateForm,\n    getFieldError,\n    hasFieldError,\n    clearFieldError,\n    clearAllErrors,\n    setErrors,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/validation/useResidentValidationProgress.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/workflows/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/workflows/useHouseholdCreationService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[558,561],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[558,561],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[746,749],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[746,749],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":59,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":119,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":119,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Household Creation Service Hook\n *\n * @description Focused hook for household creation operations with service integration.\n * Extracted from useHouseholdOperations to follow single responsibility principle.\n */\n\nimport { useState, useCallback } from 'react';\n\nimport { useAuth } from '@/contexts';\nimport { useCSRFToken } from '@/lib/auth';\nimport { householdService, HouseholdFormData } from '@/services/household.service';\n\n/**\n * Creation operation result\n */\nexport interface HouseholdCreationResult {\n  success: boolean;\n  data?: any;\n  error?: string;\n  validationErrors?: Record<string, string>;\n}\n\n/**\n * Options for household creation\n */\nexport interface UseHouseholdCreationServiceOptions {\n  onSuccess?: (data: any) => void;\n  onError?: (error: string) => void;\n  onValidationError?: (errors: Record<string, string>) => void;\n}\n\n/**\n * Return type for useHouseholdCreationService hook\n */\nexport interface UseHouseholdCreationServiceReturn {\n  /** Whether creation is in progress */\n  isCreating: boolean;\n  /** Create household using service */\n  createHousehold: (formData: HouseholdFormData) => Promise<HouseholdCreationResult>;\n  /** Generate household code */\n  generateHouseholdCode: () => string;\n  /** Reset creation state */\n  resetCreationState: () => void;\n}\n\n/**\n * Custom hook for household creation service operations\n *\n * @description Handles household creation through the household service with\n * proper authentication, CSRF protection, and error handling.\n */\nexport function useHouseholdCreationService(\n  options: UseHouseholdCreationServiceOptions = {}\n): UseHouseholdCreationServiceReturn {\n  const { onSuccess, onError, onValidationError } = options;\n  const { user } = useAuth();\n  const { getToken: getCSRFToken } = useCSRFToken();\n  const [isCreating, setIsCreating] = useState(false);\n\n  // TODO: Get these from user context or props - keeping original logic\n  const userAddress = undefined;\n  const barangayCode = undefined;\n\n  /**\n   * Create household using service\n   */\n  const createHousehold = useCallback(\n    async (formData: HouseholdFormData): Promise<HouseholdCreationResult> => {\n      setIsCreating(true);\n\n      try {\n        // Get CSRF token for secure form submission\n        const csrfToken = getCSRFToken();\n\n        // Call service to create household\n        const result = await householdService.createHousehold({\n          formData,\n          userAddress,\n          barangay_code: barangayCode,\n          csrf_token: csrfToken,\n        });\n\n        if (!result.success) {\n          // Handle validation errors\n          if (result.data?.validationErrors) {\n            if (onValidationError) {\n              onValidationError(result.data.validationErrors);\n            }\n            return {\n              success: false,\n              error: result.error,\n              validationErrors: result.data.validationErrors,\n            };\n          }\n\n          // Handle general errors\n          if (onError) {\n            onError(result.error || 'Failed to create household');\n          }\n\n          return {\n            success: false,\n            error: result.error || 'Failed to create household',\n          };\n        }\n\n        // Success callback\n        if (onSuccess) {\n          onSuccess(result.data);\n        }\n\n        return {\n          success: true,\n          data: result.data,\n        };\n      } catch (error) {\n        const errorMessage = 'An unexpected error occurred. Please try again.';\n\n        if (onError) {\n          onError(errorMessage);\n        }\n\n        return {\n          success: false,\n          error: errorMessage,\n        };\n      } finally {\n        setIsCreating(false);\n      }\n    },\n    [userAddress, barangayCode, getCSRFToken, onSuccess, onError, onValidationError]\n  );\n\n  /**\n   * Generate household code\n   */\n  const generateHouseholdCode = useCallback((): string => {\n    return householdService.generateHouseholdCode();\n  }, []);\n\n  /**\n   * Reset creation state\n   */\n  const resetCreationState = useCallback(() => {\n    setIsCreating(false);\n  }, []);\n\n  return {\n    isCreating,\n    createHousehold,\n    generateHouseholdCode,\n    resetCreationState,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/workflows/useHouseholdOperationsWorkflow.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/workflows/useResidentEditWorkflow.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateField' is assigned a value but never used.","line":115,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":115,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateFields' is assigned a value but never used.","line":130,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Resident Edit Workflow Hook\n *\n * @description Orchestrates the complete resident edit workflow by composing\n * smaller, focused hooks. Replaces the monolithic useResidentEditForm hook.\n */\n\nimport { useCallback } from 'react';\n\nimport {\n  useResidentSubmission,\n  UseResidentSubmissionOptions,\n} from '@/hooks/utilities/useResidentSubmission';\nimport type { ResidentFormData as ResidentEditFormData } from '@/types';\n\nimport { useResidentValidationErrors } from '../validation/useResidentValidationErrors';\n\nimport { useResidentFormState, UseResidentFormStateOptions } from './useResidentFormState';\n\n/**\n * Workflow options combining all sub-hook options\n */\nexport interface UseResidentEditWorkflowOptions\n  extends UseResidentFormStateOptions,\n    UseResidentSubmissionOptions {}\n\n/**\n * Return type for useResidentEditWorkflow hook\n */\nexport interface UseResidentEditWorkflowReturn {\n  // Form state\n  formData: ReturnType<typeof useResidentFormState>['formData'];\n  isDirty: ReturnType<typeof useResidentFormState>['isDirty'];\n  updateField: ReturnType<typeof useResidentFormState>['updateField'];\n  updateFields: ReturnType<typeof useResidentFormState>['updateFields'];\n  resetForm: ReturnType<typeof useResidentFormState>['resetForm'];\n\n  // Validation errors\n  errors: ReturnType<typeof useResidentValidationErrors>['errors'];\n  isValid: ReturnType<typeof useResidentValidationErrors>['isValid'];\n  validateField: ReturnType<typeof useResidentValidationErrors>['validateField'];\n  getFieldError: ReturnType<typeof useResidentValidationErrors>['getFieldError'];\n  hasFieldError: ReturnType<typeof useResidentValidationErrors>['hasFieldError'];\n  clearFieldError: ReturnType<typeof useResidentValidationErrors>['clearFieldError'];\n\n  // Submission\n  isSubmitting: ReturnType<typeof useResidentSubmission>['isSubmitting'];\n  submissionError: ReturnType<typeof useResidentSubmission>['submissionError'];\n\n  // Workflow methods\n  validateForm: ReturnType<typeof useResidentValidationErrors>['validateForm'];\n  submitForm: () => Promise<void>;\n  resetWorkflow: () => void;\n}\n\n/**\n * Custom hook for complete resident edit workflow\n *\n * @description Orchestrates the entire resident edit process by composing\n * focused hooks for state management, validation, and submission.\n *\n * @example\n * ```typescript\n * function ResidentEditForm() {\n *   const {\n *     formData,\n *     errors,\n *     isSubmitting,\n *     updateField,\n *     submitForm\n *   } = useResidentEditWorkflow({\n *     initialData: existingResident,\n *     onSubmit: async (data) => {\n *       await updateResident(data);\n *     }\n *   });\n *\n *   return (\n *     <form onSubmit={submitForm}>\n *       <input\n *         value={formData.first_name || ''}\n *         onChange={(e) => updateField('first_name', e.target.value)}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useResidentEditWorkflow(\n  options: UseResidentEditWorkflowOptions = {}\n): UseResidentEditWorkflowReturn {\n  // Extract options for each hook\n  const stateOptions: UseResidentFormStateOptions = {\n    initialData: options.initialData,\n    autoSave: options.autoSave,\n    autoSaveKey: options.autoSaveKey,\n  };\n\n  const submissionOptions: UseResidentSubmissionOptions = {\n    onSubmit: options.onSubmit,\n    onSuccess: options.onSuccess,\n    onError: options.onError,\n  };\n\n  // Compose focused hooks\n  const stateHook = useResidentFormState(stateOptions);\n  const validationHook = useResidentValidationErrors();\n  const submissionHook = useResidentSubmission(submissionOptions);\n\n  /**\n   * Enhanced field update with validation\n   */\n  const updateField = useCallback(\n    <K extends keyof ResidentEditFormData>(field: K, value: ResidentEditFormData[K]) => {\n      stateHook.updateField(field, value);\n\n      // Clear field error when user starts typing\n      if (validationHook.hasFieldError(field)) {\n        validationHook.clearFieldError(field);\n      }\n    },\n    [stateHook, validationHook]\n  );\n\n  /**\n   * Enhanced field update with validation for multiple fields\n   */\n  const updateFields = useCallback(\n    (fields: Partial<ResidentEditFormData>) => {\n      stateHook.updateFields(fields);\n\n      // Clear errors for updated fields\n      Object.keys(fields).forEach(field => {\n        if (validationHook.hasFieldError(field as keyof ResidentEditFormData)) {\n          validationHook.clearFieldError(field as keyof ResidentEditFormData);\n        }\n      });\n    },\n    [stateHook, validationHook]\n  );\n\n  /**\n   * Validate form and return result\n   */\n  const validateForm = useCallback(() => {\n    return validationHook.validateForm(stateHook.formData);\n  }, [validationHook, stateHook]);\n\n  /**\n   * Submit form with validation\n   */\n  const submitForm = useCallback(async () => {\n    const validationResult = validateForm();\n    await submissionHook.submitForm(stateHook.formData, validationResult);\n  }, [validateForm, submissionHook, stateHook]);\n\n  /**\n   * Reset entire workflow\n   */\n  const resetWorkflow = useCallback(() => {\n    stateHook.resetForm();\n    validationHook.clearAllErrors();\n    submissionHook.resetSubmissionState();\n  }, [stateHook, validationHook, submissionHook]);\n\n  return {\n    // Form state\n    formData: stateHook.formData,\n    isDirty: stateHook.isDirty,\n    updateField: stateHook.updateField,\n    updateFields: stateHook.updateFields,\n    resetForm: stateHook.resetForm,\n\n    // Validation errors\n    errors: validationHook.errors,\n    isValid: validationHook.isValid,\n    validateField: validationHook.validateField,\n    getFieldError: validationHook.getFieldError,\n    hasFieldError: validationHook.hasFieldError,\n    clearFieldError: validationHook.clearFieldError,\n\n    // Submission\n    isSubmitting: submissionHook.isSubmitting,\n    submissionError: submissionHook.submissionError,\n\n    // Workflow methods\n    validateForm: validationHook.validateForm,\n    submitForm,\n    resetWorkflow,\n  };\n}\n\n// Export the workflow hook as the main resident edit hook\nexport { useResidentEditWorkflow as useResidentEditForm };\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/hooks/workflows/useResidentFormState.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":80,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":97,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":97,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":140,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":140,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":161,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":161,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Resident Form State Management Hook\n *\n * @description Focused hook for managing resident form state and data persistence.\n * Extracted from useResidentEditForm to follow single responsibility principle.\n */\n\nimport { useState, useCallback, useEffect } from 'react';\n\nimport type { ResidentFormData as ResidentEditFormData } from '@/types';\n\n/**\n * Default form data with proper typing\n */\nconst DEFAULT_FORM_DATA: Partial<ResidentEditFormData> = {\n  first_name: '',\n  last_name: '',\n  birthdate: '',\n  sex: 'male',\n};\n/**\n * Form state options\n */\nexport interface UseResidentFormStateOptions {\n  initialData?: Partial<ResidentEditFormData>;\n  autoSave?: boolean;\n  autoSaveKey?: string;\n}\n\n/**\n * Return type for useResidentFormState hook\n */\nexport interface UseResidentFormStateReturn {\n  /** Current form data */\n  formData: Partial<ResidentEditFormData>;\n  /** Whether form has unsaved changes */\n  isDirty: boolean;\n  /** Update a single field */\n  updateField: <K extends keyof ResidentEditFormData>(\n    field: K,\n    value: ResidentEditFormData[K]\n  ) => void;\n  /** Update multiple fields at once */\n  updateFields: (fields: Partial<ResidentEditFormData>) => void;\n  /** Reset form to initial state */\n  resetForm: () => void;\n  /** Set form data programmatically */\n  setFormData: (data: Partial<ResidentEditFormData>) => void;\n  /** Clear auto-saved data */\n  clearAutoSave: () => void;\n}\n\n/**\n * Custom hook for resident form state management\n *\n * @description Manages form data state, auto-save functionality, and data persistence.\n * Provides clean separation between state management and validation/submission logic.\n */\nexport function useResidentFormState(\n  options: UseResidentFormStateOptions = {}\n): UseResidentFormStateReturn {\n  const { initialData = {}, autoSave = false, autoSaveKey = 'resident-form-draft' } = options;\n\n  /**\n   * Initialize form data with auto-save recovery\n   */\n  const [formData, setFormDataState] = useState<Partial<ResidentEditFormData>>(() => {\n    const merged = { ...DEFAULT_FORM_DATA, ...initialData };\n\n    // Load from localStorage if autoSave is enabled and no initial data\n    if (autoSave && Object.keys(initialData).length === 0) {\n      try {\n        const saved = localStorage.getItem(autoSaveKey);\n        if (saved) {\n          const parsedData = JSON.parse(saved);\n          return { ...merged, ...parsedData };\n        }\n      } catch (error) {\n        // Silently handle localStorage errors\n      }\n    }\n\n    return merged;\n  });\n\n  const [isDirty, setIsDirty] = useState(false);\n\n  /**\n   * Auto-save to localStorage when form changes\n   */\n  useEffect(() => {\n    if (autoSave && isDirty) {\n      try {\n        localStorage.setItem(autoSaveKey, JSON.stringify(formData));\n      } catch (error) {\n        // Silently handle localStorage errors\n      }\n    }\n  }, [formData, autoSave, autoSaveKey, isDirty]);\n\n  /**\n   * Update a single field\n   */\n  const updateField = useCallback(\n    <K extends keyof ResidentEditFormData>(field: K, value: ResidentEditFormData[K]) => {\n      setFormDataState(prev => ({\n        ...prev,\n        [field]: value,\n      }));\n      setIsDirty(true);\n    },\n    []\n  );\n\n  /**\n   * Update multiple fields at once\n   */\n  const updateFields = useCallback((fields: Partial<ResidentEditFormData>) => {\n    setFormDataState(prev => ({\n      ...prev,\n      ...fields,\n    }));\n    setIsDirty(true);\n  }, []);\n\n  /**\n   * Reset form to initial state\n   */\n  const resetForm = useCallback(() => {\n    const resetData = { ...DEFAULT_FORM_DATA, ...initialData };\n    setFormDataState(resetData);\n    setIsDirty(false);\n\n    // Clear auto-save\n    if (autoSave) {\n      try {\n        localStorage.removeItem(autoSaveKey);\n      } catch (error) {\n        // Silently handle localStorage errors\n      }\n    }\n  }, [initialData, autoSave, autoSaveKey]);\n\n  /**\n   * Set form data programmatically\n   */\n  const setFormData = useCallback((data: Partial<ResidentEditFormData>) => {\n    setFormDataState(data);\n    setIsDirty(true);\n  }, []);\n\n  /**\n   * Clear auto-saved data\n   */\n  const clearAutoSave = useCallback(() => {\n    if (autoSave) {\n      try {\n        localStorage.removeItem(autoSaveKey);\n      } catch (error) {\n        // Silently handle localStorage errors\n      }\n    }\n  }, [autoSave, autoSaveKey]);\n\n  return {\n    formData,\n    isDirty,\n    updateField,\n    updateFields,\n    resetForm,\n    setFormData,\n    clearAutoSave,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/analytics/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/analytics/user-behavior.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":196,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5326,5329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5326,5329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * User Behavior Analytics\n * Tracks user engagement patterns for PWA install prompts and general app usage\n */\n\n// Import types from centralized location\nimport type {\n  UserBehaviorMetrics,\n  PWAInstallCriteria,\n  PersonalizedMessage,\n} from '@/types/components';\n\n// Re-export for backwards compatibility\nexport type { UserBehaviorMetrics, PWAInstallCriteria, PersonalizedMessage };\n\nconst STORAGE_KEY = 'pwa-user-metrics';\nconst DISMISSAL_KEY = 'pwa-prompt-dismissed-date';\nconst SESSION_DISMISSAL_KEY = 'pwa-prompt-dismissed';\n\n/**\n * Load user behavior metrics from localStorage\n */\nexport function loadUserMetrics(): UserBehaviorMetrics {\n  if (typeof window === 'undefined') {\n    return getDefaultMetrics();\n  }\n\n  try {\n    const stored = localStorage.getItem(STORAGE_KEY);\n    if (stored) {\n      return JSON.parse(stored);\n    }\n  } catch (error) {\n    console.warn('Failed to load user metrics:', error);\n  }\n  return getDefaultMetrics();\n}\n\n/**\n * Save user behavior metrics to localStorage\n */\nexport function saveUserMetrics(metrics: UserBehaviorMetrics): void {\n  if (typeof window === 'undefined') return;\n\n  try {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(metrics));\n  } catch (error) {\n    console.warn('Failed to save user metrics:', error);\n  }\n}\n\n/**\n * Get default user metrics\n */\nexport function getDefaultMetrics(): UserBehaviorMetrics {\n  return {\n    pageViews: 0,\n    timeSpent: 0,\n    interactions: 0,\n    revisits: 0,\n    lastVisit: 0,\n  };\n}\n\n/**\n * Update user behavior metrics for a page view\n */\nexport function updatePageViewMetrics(): UserBehaviorMetrics {\n  const metrics = loadUserMetrics();\n  const now = Date.now();\n  const isRevisit = metrics.lastVisit > 0 && now - metrics.lastVisit > 24 * 60 * 60 * 1000; // 24 hours\n\n  const updatedMetrics = {\n    pageViews: metrics.pageViews + 1,\n    timeSpent: metrics.timeSpent,\n    interactions: metrics.interactions,\n    revisits: isRevisit ? metrics.revisits + 1 : metrics.revisits,\n    lastVisit: now,\n  };\n\n  saveUserMetrics(updatedMetrics);\n  return updatedMetrics;\n}\n\n/**\n * Update interaction count\n */\nexport function trackUserInteraction(): UserBehaviorMetrics {\n  const metrics = loadUserMetrics();\n  const updated = { ...metrics, interactions: metrics.interactions + 1 };\n  saveUserMetrics(updated);\n  return updated;\n}\n\n/**\n * Track time spent in session\n */\nexport function trackTimeSpent(sessionStartTime: number): UserBehaviorMetrics {\n  const metrics = loadUserMetrics();\n  const timeSpent = Date.now() - sessionStartTime;\n  const updated = { ...metrics, timeSpent: metrics.timeSpent + timeSpent };\n  saveUserMetrics(updated);\n  return updated;\n}\n\n/**\n * Check if PWA install prompt should be shown based on user behavior\n */\nexport function shouldShowInstallPrompt(metrics: UserBehaviorMetrics): boolean {\n  // Don't show if recently dismissed (within 7 days)\n  if (typeof window !== 'undefined') {\n    const dismissedDate = localStorage.getItem(DISMISSAL_KEY);\n    if (dismissedDate) {\n      const daysSinceDismissed = (Date.now() - parseInt(dismissedDate)) / (1000 * 60 * 60 * 24);\n      if (daysSinceDismissed < 7) {\n        return false;\n      }\n    }\n\n    // Don't show if dismissed in current session\n    if (sessionStorage.getItem(SESSION_DISMISSAL_KEY)) {\n      return false;\n    }\n  }\n\n  // Smart timing criteria\n  const criteria = getPWAInstallCriteria(metrics);\n\n  // Must meet at least 2 of the 4 criteria\n  const metCriteria = Object.values(criteria).filter(Boolean).length;\n  return metCriteria >= 2;\n}\n\n/**\n * Get PWA install criteria for a user\n */\nexport function getPWAInstallCriteria(metrics: UserBehaviorMetrics): PWAInstallCriteria {\n  return {\n    // User has visited multiple times\n    isReturningUser: metrics.revisits >= 2,\n    // User has engaged with the app\n    hasInteracted: metrics.interactions >= 5,\n    // User has spent reasonable time\n    hasSpentTime: metrics.timeSpent >= 60000, // 1 minute\n    // Multiple page views indicate engagement\n    hasExplored: metrics.pageViews >= 3,\n  };\n}\n\n/**\n * Get personalized install message based on user behavior\n */\nexport function getPersonalizedInstallMessage(metrics: UserBehaviorMetrics): PersonalizedMessage {\n  if (metrics.revisits >= 2) {\n    return {\n      title: 'Welcome back! Install Citizenly',\n      description:\n        \"You've been using Citizenly regularly. Install it for faster access and offline use.\",\n    };\n  }\n\n  if (metrics.pageViews >= 5) {\n    return {\n      title: 'Enjoying Citizenly? Install it!',\n      description: \"You've explored multiple features. Get the full experience with our app.\",\n    };\n  }\n\n  if (metrics.timeSpent >= 120000) {\n    // 2 minutes\n    return {\n      title: 'Install Citizenly for convenience',\n      description:\n        \"You've spent quality time here. Install for quicker access and offline capabilities.\",\n    };\n  }\n\n  return {\n    title: 'Install Citizenly',\n    description: 'Add to your home screen for quick access and offline use',\n  };\n}\n\n/**\n * Check if PWA is installed\n */\nexport function isPWAInstalled(): boolean {\n  if (typeof window === 'undefined') return false;\n\n  // Check for standalone mode (Android/iOS)\n  if (window.matchMedia('(display-mode: standalone)').matches) {\n    return true;\n  }\n\n  // Check for iOS Safari standalone\n  if ((window.navigator as any).standalone === true) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Record install prompt dismissal\n */\nexport function recordInstallDismissal(): void {\n  if (typeof window === 'undefined') return;\n\n  // Store dismissal date for smart timing (7 days cooldown)\n  localStorage.setItem(DISMISSAL_KEY, Date.now().toString());\n\n  // Also set session storage for immediate dismissal\n  sessionStorage.setItem(SESSION_DISMISSAL_KEY, 'true');\n}\n\n/**\n * Get delay for install prompt based on user behavior\n */\nexport function getInstallPromptDelay(metrics: UserBehaviorMetrics): number {\n  // Shorter delay for returning users\n  return metrics.revisits > 0 ? 2000 : 5000;\n}\n\n/**\n * Setup user interaction tracking listeners\n */\nexport function setupUserInteractionTracking(onInteraction: () => void): () => void {\n  if (typeof window === 'undefined') return () => {};\n\n  // Track user interactions\n  const trackInteraction = () => onInteraction();\n\n  window.addEventListener('click', trackInteraction);\n  window.addEventListener('scroll', trackInteraction);\n  window.addEventListener('keydown', trackInteraction);\n\n  // Return cleanup function\n  return () => {\n    window.removeEventListener('click', trackInteraction);\n    window.removeEventListener('scroll', trackInteraction);\n    window.removeEventListener('keydown', trackInteraction);\n  };\n}\n\n/**\n * Setup time tracking for a session\n */\nexport function setupTimeTracking(onTimeUpdate: (sessionTime: number) => void): () => void {\n  if (typeof window === 'undefined') return () => {};\n\n  const sessionStart = Date.now();\n\n  const trackTime = () => {\n    const sessionTime = Date.now() - sessionStart;\n    onTimeUpdate(sessionTime);\n  };\n\n  // Track time on beforeunload\n  window.addEventListener('beforeunload', trackTime);\n\n  // Return cleanup function that also tracks final time\n  return () => {\n    window.removeEventListener('beforeunload', trackTime);\n    trackTime(); // Track time when cleanup is called\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/api/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/api/psgc-handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createErrorResponse' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1443,1446],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1443,1446],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2764,2767],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2764,2767],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6194,6197],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6194,6197],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":252,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":252,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7878,7881],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7878,7881],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":286,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8912,8915],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8912,8915],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":316,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":316,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9896,9899],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9896,9899],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * PSGC Route Handlers - Consolidated Philippine Standard Geographic Code API Utilities\n *\n * @fileoverview Production-ready utilities for handling PSGC address data queries.\n * Eliminates duplicate patterns across regions, provinces, cities, barangays, and streets API routes.\n * Integrates with existing authentication and response utilities.\n *\n * @version 1.0.0\n * @since 2025-08-29\n * @author Citizenly Development Team\n */\n\nimport { NextRequest } from 'next/server';\n\nimport { createAdminSupabaseClient } from '@/lib';\nimport { \n  createSuccessResponse, \n  createErrorResponse, \n  withNextRequestErrorHandling \n} from '@/lib/authentication/responseUtils';\n\n// =============================================================================\n// TYPES\n// =============================================================================\n\n/**\n * PSGC query configuration\n */\nexport interface PSGCQueryConfig {\n  /** Database table name */\n  table: string;\n  /** Fields to select from the table */\n  selectFields: string;\n  /** Field to filter by (optional) */\n  filterField?: string;\n  /** Query parameter name for filtering (optional) */\n  filterParam?: string;\n  /** Context name for error messages */\n  errorContext: string;\n  /** Order field (defaults to 'name') */\n  orderField?: string;\n}\n\n/**\n * Standard PSGC option format for SelectField components\n */\nexport interface PSGCOption {\n  value: string;\n  label: string;\n  [key: string]: any; // Additional fields from the database\n}\n\n// =============================================================================\n// CORE PSGC HANDLER\n// =============================================================================\n\n/**\n * Creates a standardized PSGC GET route handler\n * Eliminates duplicate patterns across all PSGC endpoints\n */\nexport function createPSGCHandler(config: PSGCQueryConfig) {\n  return withNextRequestErrorHandling(async (request: NextRequest) => {\n    const supabase = createAdminSupabaseClient();\n    const { searchParams } = new URL(request.url);\n    \n    // Build base query\n    let query = supabase\n      .from(config.table)\n      .select(config.selectFields)\n      .order(config.orderField || 'name');\n    \n    // Apply filter if configured\n    if (config.filterField && config.filterParam) {\n      const filterValue = searchParams.get(config.filterParam);\n      if (filterValue) {\n        query = query.eq(config.filterField, filterValue);\n      }\n    }\n    \n    const { data, error } = await query;\n    \n    if (error) {\n      console.error(`${config.errorContext} query error:`, error);\n      throw new Error(`Failed to fetch ${config.errorContext.toLowerCase()}`);\n    }\n    \n    // Transform data to standard SelectField format\n    const options: PSGCOption[] = data?.map((item: any) => {\n      const option: PSGCOption = {\n        value: item.code,\n        label: item.name,\n      };\n      \n      // Add additional fields dynamically (preserve all database fields)\n      Object.keys(item).forEach(key => {\n        if (!['code', 'name'].includes(key)) {\n          option[key] = item[key];\n        }\n      });\n      \n      return option;\n    }) || [];\n    \n    return createSuccessResponse(options, `${config.errorContext} retrieved successfully`);\n  });\n}\n\n// =============================================================================\n// PRE-CONFIGURED PSGC HANDLERS\n// =============================================================================\n\n/**\n * Pre-configured PSGC route handlers for all address levels\n * These replace the duplicate implementations in individual route files\n */\nexport const PSGCHandlers = {\n  /**\n   * Regions handler - No filtering, returns all regions\n   * Usage: export const GET = PSGCHandlers.regions;\n   */\n  regions: createPSGCHandler({\n    table: 'psgc_regions',\n    selectFields: 'code, name',\n    errorContext: 'Regions',\n  }),\n\n  /**\n   * Provinces handler - Optionally filter by region\n   * Usage: export const GET = PSGCHandlers.provinces;\n   * Query: ?region=REGION_CODE\n   */\n  provinces: createPSGCHandler({\n    table: 'psgc_provinces',\n    selectFields: 'code, name, region_code',\n    filterField: 'region_code',\n    filterParam: 'region',\n    errorContext: 'Provinces',\n  }),\n\n  /**\n   * Cities/Municipalities handler - Optionally filter by province\n   * Usage: export const GET = PSGCHandlers.cities;\n   * Query: ?province=PROVINCE_CODE\n   */\n  cities: createPSGCHandler({\n    table: 'psgc_cities_municipalities',\n    selectFields: 'code, name, type, province_code',\n    filterField: 'province_code',\n    filterParam: 'province',\n    errorContext: 'Cities',\n  }),\n\n  /**\n   * Barangays handler - Optionally filter by city\n   * Usage: export const GET = PSGCHandlers.barangays;\n   * Query: ?city=CITY_CODE\n   */\n  barangays: createPSGCHandler({\n    table: 'psgc_barangays',\n    selectFields: 'code, name, city_municipality_code',\n    filterField: 'city_municipality_code',\n    filterParam: 'city',\n    errorContext: 'Barangays',\n  }),\n\n  /**\n   * Subdivisions handler - Special geo_subdivisions table with search\n   * Usage: export const GET = PSGCHandlers.subdivisions;\n   * Query: ?barangay_code=BARANGAY_CODE&search=SEARCH_TERM\n   */\n  subdivisions: withNextRequestErrorHandling(async (request: NextRequest) => {\n    const supabase = createAdminSupabaseClient();\n    const { searchParams } = new URL(request.url);\n    const barangayCode = searchParams.get('barangay_code');\n    const search = searchParams.get('search');\n\n    let query = supabase\n      .from('geo_subdivisions')\n      .select('id, name, type, barangay_code, is_active')\n      .eq('is_active', true)\n      .order('name');\n\n    // Filter by barangay if provided\n    if (barangayCode) {\n      query = query.eq('barangay_code', barangayCode);\n    }\n\n    // Add search filter if provided\n    if (search && search.trim() !== '') {\n      query = query.ilike('name', `%${search.trim()}%`);\n    }\n\n    const { data: subdivisions, error } = await query.limit(100);\n\n    if (error) {\n      console.error('Subdivisions query error:', error);\n      throw new Error('Failed to fetch subdivisions');\n    }\n\n    // Transform data to SelectField format\n    const options = subdivisions?.map((subdivision: any) => ({\n      value: subdivision.id,\n      label: subdivision.name,\n      barangay_code: subdivision.barangay_code,\n      type: subdivision.type,\n    })) || [];\n\n    return createSuccessResponse(options, 'Subdivisions retrieved successfully');\n  }),\n\n  /**\n   * Streets handler - Special geo_streets table with search and subdivision filtering\n   * Usage: export const GET = PSGCHandlers.streets;\n   * Query: ?barangay_code=BARANGAY_CODE&subdivision_id=SUBDIVISION_ID&search=SEARCH_TERM\n   */\n  streets: withNextRequestErrorHandling(async (request: NextRequest) => {\n    const supabase = createAdminSupabaseClient();\n    const { searchParams } = new URL(request.url);\n    const barangayCode = searchParams.get('barangay_code');\n    const subdivisionId = searchParams.get('subdivision_id');\n    const search = searchParams.get('search');\n\n    let query = supabase\n      .from('geo_streets')\n      .select('id, name, subdivision_id, barangay_code, is_active')\n      .eq('is_active', true)\n      .order('name');\n\n    // Filter by barangay if provided\n    if (barangayCode) {\n      query = query.eq('barangay_code', barangayCode);\n    }\n\n    // Filter by subdivision if provided\n    if (subdivisionId) {\n      query = query.eq('subdivision_id', subdivisionId);\n    }\n\n    // Add search filter if provided\n    if (search && search.trim() !== '') {\n      query = query.ilike('name', `%${search.trim()}%`);\n    }\n\n    const { data: streets, error } = await query.limit(100);\n\n    if (error) {\n      console.error('Streets query error:', error);\n      throw new Error('Failed to fetch streets');\n    }\n\n    // Transform data to SelectField format\n    const options = streets?.map((street: any) => ({\n      value: street.id,\n      label: street.name,\n      subdivision_id: street.subdivision_id,\n      barangay_code: street.barangay_code,\n    })) || [];\n\n    return createSuccessResponse(options, 'Streets retrieved successfully');\n  }),\n} as const;\n\n// =============================================================================\n// RESPONSE FORMAT UTILITIES\n// =============================================================================\n\n/**\n * Legacy response format converter\n * Converts modern response format to legacy format for backward compatibility\n * @deprecated Use standard response format instead\n */\nexport function createLegacyPSGCResponse(options: PSGCOption[]) {\n  return createSuccessResponse({\n    success: true,\n    data: options,\n    count: options.length,\n  });\n}\n\n/**\n * Creates a custom PSGC handler with additional processing\n * Use this when you need to modify the standard behavior\n */\nexport function createCustomPSGCHandler<T = PSGCOption>(\n  config: PSGCQueryConfig,\n  transformer?: (data: any[]) => T[]\n) {\n  return withNextRequestErrorHandling(async (request: NextRequest) => {\n    const supabase = createAdminSupabaseClient();\n    const { searchParams } = new URL(request.url);\n    \n    // Build base query\n    let query = supabase\n      .from(config.table)\n      .select(config.selectFields)\n      .order(config.orderField || 'name');\n    \n    // Apply filter if configured\n    if (config.filterField && config.filterParam) {\n      const filterValue = searchParams.get(config.filterParam);\n      if (filterValue) {\n        query = query.eq(config.filterField, filterValue);\n      }\n    }\n    \n    const { data, error } = await query;\n    \n    if (error) {\n      console.error(`${config.errorContext} query error:`, error);\n      throw new Error(`Failed to fetch ${config.errorContext.toLowerCase()}`);\n    }\n    \n    // Apply custom transformation or default transformation\n    const processedData = transformer \n      ? transformer(data || [])\n      : data?.map((item: any) => {\n          const option: PSGCOption = {\n            value: item.code,\n            label: item.name,\n          };\n          \n          // Add additional fields\n          Object.keys(item).forEach(key => {\n            if (!['code', 'name'].includes(key)) {\n              option[key] = item[key];\n            }\n          });\n          \n          return option;\n        }) || [];\n    \n    return createSuccessResponse(processedData, `${config.errorContext} retrieved successfully`);\n  });\n}\n\n// =============================================================================\n// USAGE EXAMPLES\n// =============================================================================\n\n/*\n// BEFORE (duplicate implementations):\n\n// src/app/api/addresses/regions/route.ts\nexport async function GET(request: NextRequest) {\n  try {\n    const supabase = createAdminSupabaseClient() as any;\n    const { data: regions, error: regionsError } = await supabase\n      .from('psgc_regions')\n      .select('code, name')\n      .order('name');\n    // ... more duplicate error handling and response formatting\n  } catch (error) {\n    // ... duplicate error handling\n  }\n}\n\n// AFTER (consolidated):\n\n// src/app/api/addresses/regions/route.ts\nexport { PSGCHandlers.regions as GET };\n\n// OR if you need the named export:\n// export const GET = PSGCHandlers.regions;\n\n// Custom usage example:\nexport const GET = createCustomPSGCHandler(\n  {\n    table: 'psgc_regions',\n    selectFields: 'code, name, abbreviation',\n    errorContext: 'Regions'\n  },\n  (data) => data.map(item => ({\n    value: item.code,\n    label: `${item.name} (${item.abbreviation})`,\n    code: item.code,\n    name: item.name,\n    abbreviation: item.abbreviation\n  }))\n);\n*/","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/api/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/auth/csrf.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/auth/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/authentication/auditUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AuditLogEntry' is defined but never used.","line":9,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":53},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2596,2599],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2596,2599],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2766,2769],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2766,2769],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2829,2832],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2829,2832],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2872,2875],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2872,2875],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2913,2916],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2913,2916],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":190,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":190,"endColumn":44},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":191,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":191,"endColumn":45},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":196,"column":18,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":196,"endColumn":34},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":197,"column":52,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":197,"endColumn":68},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":202,"column":15,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":202,"endColumn":28},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":207,"column":16,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":207,"endColumn":30},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":411,"column":5,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":411,"endColumn":42},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":412,"column":5,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":412,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Audit Logging System\n * Comprehensive logging for security events and user actions\n */\n\nimport { createClient } from '@supabase/supabase-js';\n\nimport { logger } from '@/lib/logging';\nimport type { SecurityAuditLogEntry as AuditLogEntry } from '@/types/errors';\n\nimport { RequestContext, ErrorCode } from './types';\n\nexport enum AuditEventType {\n  // Authentication events\n  LOGIN_SUCCESS = 'login_success',\n  LOGIN_FAILED = 'login_failed',\n  LOGOUT = 'logout',\n  TOKEN_REFRESH = 'token_refresh',\n  PASSWORD_CHANGE = 'password_change',\n\n  // Authorization events\n  ACCESS_GRANTED = 'access_granted',\n  ACCESS_DENIED = 'access_denied',\n  PERMISSION_ESCALATION = 'permission_escalation',\n\n  // Data operations\n  RESIDENT_CREATE = 'resident_create',\n  RESIDENT_UPDATE = 'resident_update',\n  RESIDENT_DELETE = 'resident_delete',\n  RESIDENT_VIEW = 'resident_view',\n  HOUSEHOLD_CREATE = 'household_create',\n  HOUSEHOLD_UPDATE = 'household_update',\n  HOUSEHOLD_DELETE = 'household_delete',\n\n  // User management\n  USER_CREATE = 'user_create',\n  USER_UPDATE = 'user_update',\n  USER_DELETE = 'user_delete',\n  USER_ACTIVATE = 'user_activate',\n  USER_DEACTIVATE = 'user_deactivate',\n  ROLE_CHANGE = 'role_change',\n\n  // Security events\n  RATE_LIMIT_EXCEEDED = 'rate_limit_exceeded',\n  SQL_INJECTION_ATTEMPT = 'sql_injection_attempt',\n  INVALID_TOKEN = 'invalid_token',\n  CSRF_VIOLATION = 'csrf_violation',\n  SUSPICIOUS_ACTIVITY = 'suspicious_activity',\n\n  // System events\n  API_ERROR = 'api_error',\n  DATABASE_ERROR = 'database_error',\n  EXTERNAL_SERVICE_ERROR = 'external_service_error',\n\n  // Data export/import\n  DATA_EXPORT = 'data_export',\n  DATA_IMPORT = 'data_import',\n  BULK_OPERATION = 'bulk_operation',\n}\n\nexport enum AuditSeverity {\n  LOW = 'low',\n  MEDIUM = 'medium',\n  HIGH = 'high',\n  CRITICAL = 'critical',\n}\n\nexport interface AuditEvent {\n  eventType: AuditEventType;\n  severity: AuditSeverity;\n  userId?: string;\n  userRole?: string;\n  resourceType?: string;\n  resourceId?: string;\n  action: string;\n  outcome: 'success' | 'failure';\n  details?: Record<string, string | number | boolean>;\n  context: RequestContext;\n  errorCode?: ErrorCode;\n  errorMessage?: string;\n}\n\n/**\n * Mask sensitive data in audit logs\n */\nfunction maskSensitiveData(data: unknown): unknown {\n  if (!data || typeof data !== 'object') {\n    return data;\n  }\n\n  const sensitiveFields = [\n    'password',\n    'token',\n    'ssn',\n    'social_security',\n    'credit_card',\n    'bank_account',\n    'api_key',\n    'secret',\n    'private_key',\n    'access_token',\n  ];\n\n  const masked = { ...data } as Record<string, any>;\n\n  Object.keys(masked).forEach(key => {\n    const lowerKey = key.toLowerCase();\n    if (sensitiveFields.some(field => lowerKey.includes(field))) {\n      (masked as any)[key] = '***REDACTED***';\n    } else if (typeof (masked as any)[key] === 'object') {\n      (masked as any)[key] = maskSensitiveData((masked as any)[key]);\n    }\n  });\n\n  return masked;\n}\n\n/**\n * Map audit event types to database operations\n */\nfunction mapEventToOperation(eventType: AuditEventType): 'INSERT' | 'UPDATE' | 'DELETE' {\n  if (eventType.includes('create') || eventType.includes('CREATE')) {\n    return 'INSERT';\n  } else if (eventType.includes('update') || eventType.includes('UPDATE')) {\n    return 'UPDATE';\n  } else if (eventType.includes('delete') || eventType.includes('DELETE')) {\n    return 'DELETE';\n  } else if (eventType.includes('view') || eventType.includes('VIEW')) {\n    return 'UPDATE'; // Treat view as update for logging purposes\n  } else {\n    return 'UPDATE'; // Default to UPDATE for other operations\n  }\n}\n\n/**\n * Get severity level based on event type\n */\nfunction getEventSeverity(eventType: AuditEventType): AuditSeverity {\n  const severityMap: Record<AuditEventType, AuditSeverity> = {\n    // Critical security events\n    [AuditEventType.SQL_INJECTION_ATTEMPT]: AuditSeverity.CRITICAL,\n    [AuditEventType.PERMISSION_ESCALATION]: AuditSeverity.CRITICAL,\n    [AuditEventType.SUSPICIOUS_ACTIVITY]: AuditSeverity.CRITICAL,\n\n    // High severity events\n    [AuditEventType.LOGIN_FAILED]: AuditSeverity.HIGH,\n    [AuditEventType.ACCESS_DENIED]: AuditSeverity.HIGH,\n    [AuditEventType.RATE_LIMIT_EXCEEDED]: AuditSeverity.HIGH,\n    [AuditEventType.USER_DELETE]: AuditSeverity.HIGH,\n    [AuditEventType.ROLE_CHANGE]: AuditSeverity.HIGH,\n    [AuditEventType.DATA_EXPORT]: AuditSeverity.HIGH,\n\n    // Medium severity events\n    [AuditEventType.LOGIN_SUCCESS]: AuditSeverity.MEDIUM,\n    [AuditEventType.USER_CREATE]: AuditSeverity.MEDIUM,\n    [AuditEventType.USER_UPDATE]: AuditSeverity.MEDIUM,\n    [AuditEventType.RESIDENT_DELETE]: AuditSeverity.MEDIUM,\n    [AuditEventType.HOUSEHOLD_DELETE]: AuditSeverity.MEDIUM,\n    [AuditEventType.DATA_IMPORT]: AuditSeverity.MEDIUM,\n\n    // Low severity events\n    [AuditEventType.LOGOUT]: AuditSeverity.LOW,\n    [AuditEventType.RESIDENT_VIEW]: AuditSeverity.LOW,\n    [AuditEventType.RESIDENT_CREATE]: AuditSeverity.LOW,\n    [AuditEventType.RESIDENT_UPDATE]: AuditSeverity.LOW,\n    [AuditEventType.HOUSEHOLD_CREATE]: AuditSeverity.LOW,\n    [AuditEventType.HOUSEHOLD_UPDATE]: AuditSeverity.LOW,\n    [AuditEventType.TOKEN_REFRESH]: AuditSeverity.LOW,\n    [AuditEventType.ACCESS_GRANTED]: AuditSeverity.LOW,\n    [AuditEventType.PASSWORD_CHANGE]: AuditSeverity.LOW,\n    [AuditEventType.USER_ACTIVATE]: AuditSeverity.LOW,\n    [AuditEventType.USER_DEACTIVATE]: AuditSeverity.LOW,\n    [AuditEventType.API_ERROR]: AuditSeverity.LOW,\n    [AuditEventType.DATABASE_ERROR]: AuditSeverity.LOW,\n    [AuditEventType.EXTERNAL_SERVICE_ERROR]: AuditSeverity.LOW,\n    [AuditEventType.INVALID_TOKEN]: AuditSeverity.LOW,\n    [AuditEventType.CSRF_VIOLATION]: AuditSeverity.LOW,\n    [AuditEventType.BULK_OPERATION]: AuditSeverity.LOW,\n  };\n\n  return severityMap[eventType] || AuditSeverity.LOW;\n}\n\n/**\n * Main audit logging function\n */\nexport async function auditLog(event: Partial<AuditEvent>): Promise<void> {\n  try {\n    const supabaseAdmin = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!\n    );\n\n    // Fill in default values\n    const auditEvent: AuditEvent = {\n      eventType: event.eventType!,\n      severity: event.severity || getEventSeverity(event.eventType!),\n      userId: event.userId,\n      userRole: event.userRole,\n      resourceType: event.resourceType,\n      resourceId: event.resourceId,\n      action: event.action!,\n      outcome: event.outcome || 'success',\n      details: event.details\n        ? (maskSensitiveData(event.details) as Record<string, string | number | boolean>)\n        : undefined,\n      context: event.context!,\n      errorCode: event.errorCode,\n      errorMessage: event.errorMessage,\n    };\n\n    // Create audit log entry matching the actual database schema\n    // Generate a valid UUID if resourceId is not provided or not a UUID\n    let recordId = '00000000-0000-0000-0000-000000000000';\n    if (auditEvent.resourceId) {\n      // Check if it's a valid UUID format\n      const uuidRegex =\n        /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n      if (uuidRegex.test(auditEvent.resourceId)) {\n        recordId = auditEvent.resourceId;\n      } else {\n        // If it's not a UUID, create a deterministic UUID from the string\n        recordId = crypto.randomUUID();\n      }\n    }\n\n    const logEntry = {\n      table_name: auditEvent.resourceType || 'unknown',\n      record_id: recordId,\n      operation: mapEventToOperation(auditEvent.eventType),\n      old_values: null, // Can be enhanced later if needed\n      new_values: auditEvent.details || null,\n      user_id: auditEvent.userId || null,\n      barangay_code: auditEvent.context.barangayCode || null,\n      city_municipality_code: auditEvent.context.cityCode || null,\n      province_code: auditEvent.context.provinceCode || null,\n      region_code: auditEvent.context.regionCode || null,\n      ip_address: auditEvent.context.ip || null,\n      user_agent: auditEvent.context.userAgent || null,\n      session_id: auditEvent.context.requestId || null,\n    };\n\n    // Insert into system_audit_logs table\n    const { error } = await supabaseAdmin.from('system_audit_logs').insert(logEntry);\n\n    if (error) {\n      logger.error('Failed to insert audit log', { error, auditEvent });\n      // Don't throw error to avoid disrupting main application flow\n    }\n\n    // Log critical events to console for immediate attention\n    if (auditEvent.severity === AuditSeverity.CRITICAL) {\n      logger.error('CRITICAL SECURITY EVENT', {\n        eventType: auditEvent.eventType,\n        userId: auditEvent.userId,\n        ip: auditEvent.context.ip,\n        path: auditEvent.context.path,\n        details: auditEvent.details,\n        critical: true,\n      });\n    }\n  } catch (error) {\n    logger.error('Audit logging service error', { error });\n    // Don't throw error to avoid disrupting main application flow\n  }\n}\n\n/**\n * Audit user authentication events\n */\nexport async function auditAuth(\n  eventType: AuditEventType.LOGIN_SUCCESS | AuditEventType.LOGIN_FAILED | AuditEventType.LOGOUT,\n  context: RequestContext,\n  details?: Record<string, string | number | boolean>\n): Promise<void> {\n  await auditLog({\n    eventType,\n    userId: context.userId !== 'anonymous' ? context.userId : undefined,\n    action: eventType.replace('_', ' '),\n    outcome: eventType.includes('failed') ? 'failure' : 'success',\n    details,\n    context,\n  });\n}\n\n/**\n * Audit resource access events\n */\nexport async function auditResourceAccess(\n  resourceType: string,\n  resourceId: string,\n  action: string,\n  outcome: 'success' | 'failure',\n  context: RequestContext,\n  details?: Record<string, string | number | boolean>\n): Promise<void> {\n  const eventType =\n    outcome === 'success' ? AuditEventType.ACCESS_GRANTED : AuditEventType.ACCESS_DENIED;\n\n  await auditLog({\n    eventType,\n    userId: context.userId,\n    userRole: context.userRole,\n    resourceType,\n    resourceId,\n    action,\n    outcome,\n    details,\n    context,\n  });\n}\n\n/**\n * Audit data operations\n */\nexport async function auditDataOperation(\n  operation: 'create' | 'update' | 'delete' | 'view',\n  resourceType: string,\n  resourceId: string,\n  context: RequestContext,\n  details?: Record<string, string | number | boolean>\n): Promise<void> {\n  const eventTypeMap: Record<string, AuditEventType> = {\n    create_resident: AuditEventType.RESIDENT_CREATE,\n    update_resident: AuditEventType.RESIDENT_UPDATE,\n    delete_resident: AuditEventType.RESIDENT_DELETE,\n    view_resident: AuditEventType.RESIDENT_VIEW,\n    create_household: AuditEventType.HOUSEHOLD_CREATE,\n    update_household: AuditEventType.HOUSEHOLD_UPDATE,\n    delete_household: AuditEventType.HOUSEHOLD_DELETE,\n    create_user: AuditEventType.USER_CREATE,\n    update_user: AuditEventType.USER_UPDATE,\n    delete_user: AuditEventType.USER_DELETE,\n  };\n\n  const eventKey = `${operation}_${resourceType}`;\n  const eventType = eventTypeMap[eventKey];\n\n  if (eventType) {\n    await auditLog({\n      eventType,\n      userId: context.userId,\n      userRole: context.userRole,\n      resourceType,\n      resourceId,\n      action: `${operation} ${resourceType}`,\n      outcome: 'success',\n      details,\n      context,\n    });\n  }\n}\n\n/**\n * Audit security violations\n */\nexport async function auditSecurityViolation(\n  eventType: AuditEventType,\n  context: RequestContext,\n  details?: Record<string, string | number | boolean>,\n  errorCode?: ErrorCode\n): Promise<void> {\n  await auditLog({\n    eventType,\n    userId: context.userId !== 'anonymous' ? context.userId : undefined,\n    action: 'security_violation',\n    outcome: 'failure',\n    details,\n    context,\n    errorCode,\n  });\n}\n\n/**\n * Audit API errors\n */\nexport async function auditError(\n  error: Error,\n  context: RequestContext,\n  errorCode?: ErrorCode\n): Promise<void> {\n  await auditLog({\n    eventType: AuditEventType.API_ERROR,\n    userId: context.userId !== 'anonymous' ? context.userId : undefined,\n    action: 'api_error',\n    outcome: 'failure',\n    details: {\n      errorName: error.name,\n      errorStack: error.stack?.split('\\n').slice(0, 5).join('\\n') || 'No stack trace available', // First 5 lines only\n    },\n    context,\n    errorCode,\n    errorMessage: error.message,\n  });\n}\n\n/**\n * Create audit trail query builder for investigations\n */\nexport function createAuditQuery(filters: {\n  userId?: string;\n  eventType?: AuditEventType;\n  severity?: AuditSeverity;\n  startDate?: string;\n  endDate?: string;\n  ipAddress?: string;\n  resourceType?: string;\n  outcome?: 'success' | 'failure';\n}) {\n  const supabaseAdmin = createClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.SUPABASE_SERVICE_ROLE_KEY!\n  );\n\n  let query = supabaseAdmin\n    .from('system_audit_logs')\n    .select('*')\n    .order('timestamp', { ascending: false });\n\n  if (filters.userId) {\n    query = query.eq('user_id', filters.userId);\n  }\n\n  if (filters.eventType) {\n    query = query.eq('event_type', filters.eventType);\n  }\n\n  if (filters.severity) {\n    query = query.eq('severity', filters.severity);\n  }\n\n  if (filters.startDate) {\n    query = query.gte('timestamp', filters.startDate);\n  }\n\n  if (filters.endDate) {\n    query = query.lte('timestamp', filters.endDate);\n  }\n\n  if (filters.ipAddress) {\n    query = query.eq('ip_address', filters.ipAddress);\n  }\n\n  if (filters.resourceType) {\n    query = query.eq('resource_type', filters.resourceType);\n  }\n\n  if (filters.outcome) {\n    query = query.eq('outcome', filters.outcome);\n  }\n\n  return query;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/authentication/auth-errors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/authentication/auth-helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/authentication/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/authentication/authUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AuthUserProfile' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":25},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":144,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":144,"endColumn":44},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":145,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":145,"endColumn":49},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":149,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":149,"endColumn":44},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":150,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":150,"endColumn":45},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":263,"column":16,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":263,"endColumn":27},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":308,"column":19,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":308,"endColumn":36,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[7864,7865],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":316,"column":33,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":316,"endColumn":52},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":316,"column":54,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":316,"endColumn":70},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":325,"column":5,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":325,"endColumn":42},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":326,"column":5,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":326,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Authentication and Authorization Middleware\n * Centralized auth handling with proper role-based access control\n */\n\nimport { createClient } from '@supabase/supabase-js';\nimport { NextRequest } from 'next/server';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { logger } from '@/lib/logging';\nimport { AuthUserProfile } from '@/types/auth';\n\nimport { Role, ROLE_PERMISSIONS, ErrorCode, RequestContext } from './types';\n\nexport interface AuthResult {\n  success: boolean;\n  user?: {\n    id: string;\n    email: string;\n    role: Role;\n    barangayCode?: string;\n    cityCode?: string;\n    provinceCode?: string;\n    regionCode?: string;\n  };\n  error?: {\n    code: ErrorCode;\n    message: string;\n    status: number;\n  };\n  context?: RequestContext;\n}\n\nexport interface AuthConfig {\n  requiredPermissions?: string[];\n  allowServiceRole?: boolean;\n  skipAuth?: boolean;\n}\n\n/**\n * Extract and validate bearer token from request\n */\nfunction extractBearerToken(request: NextRequest): string | null {\n  const authHeader = request.headers.get('Authorization') || request.headers.get('authorization');\n\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return null;\n  }\n\n  return authHeader.split(' ')[1];\n}\n\n/**\n * Get client IP address from request headers\n */\nfunction getClientIP(request: NextRequest): string {\n  const forwarded = request.headers.get('x-forwarded-for');\n  const realIp = request.headers.get('x-real-ip');\n  const ip = forwarded?.split(',')[0] || realIp || 'unknown';\n  return ip;\n}\n\n/**\n * Check if user has required permissions\n */\nexport function hasPermission(userRole: Role, requiredPermission: string): boolean {\n  const rolePermissions = ROLE_PERMISSIONS[userRole] || [];\n  return (rolePermissions as readonly string[]).includes(requiredPermission);\n}\n\n/**\n * Check if user has any of the required permissions\n */\nexport function hasAnyPermission(userRole: Role, requiredPermissions: string[]): boolean {\n  return requiredPermissions.some(permission => hasPermission(userRole, permission));\n}\n\n/**\n * Get geographic access level based on role\n */\nexport function getAccessLevel(\n  userRole: Role\n): 'national' | 'region' | 'province' | 'city' | 'barangay' {\n  const accessLevels: Record<Role, 'national' | 'region' | 'province' | 'city' | 'barangay'> = {\n    [Role.SUPER_ADMIN]: 'national',\n    [Role.REGION_ADMIN]: 'region',\n    [Role.PROVINCE_ADMIN]: 'province',\n    [Role.CITY_ADMIN]: 'city',\n    [Role.BARANGAY_ADMIN]: 'barangay',\n    [Role.BARANGAY_STAFF]: 'barangay',\n    [Role.RESIDENT]: 'barangay',\n  };\n\n  return accessLevels[userRole] || 'barangay';\n}\n\n/**\n * Main authentication and authorization function\n */\nexport async function authenticate(\n  request: NextRequest,\n  config: AuthConfig = {}\n): Promise<AuthResult> {\n  const requestId = uuidv4();\n  const timestamp = new Date().toISOString();\n  const path = request.nextUrl.pathname;\n  const method = request.method;\n  const ip = getClientIP(request);\n  const userAgent = request.headers.get('user-agent') || 'unknown';\n\n  // Skip authentication if configured\n  if (config.skipAuth) {\n    return {\n      success: true,\n      context: {\n        userId: 'anonymous',\n        userRole: Role.RESIDENT,\n        requestId,\n        timestamp,\n        path,\n        method,\n        ip,\n        userAgent,\n      },\n    };\n  }\n\n  // Extract token\n  const token = extractBearerToken(request);\n  if (!token) {\n    return {\n      success: false,\n      error: {\n        code: ErrorCode.UNAUTHORIZED,\n        message: 'Authentication required. Please provide a valid Bearer token.',\n        status: 401,\n      },\n    };\n  }\n\n  try {\n    // Create Supabase clients\n    const supabase = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n    );\n\n    const supabaseAdmin = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!\n    );\n\n    // Verify user token\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser(token);\n\n    if (authError || !user) {\n      return {\n        success: false,\n        error: {\n          code: ErrorCode.INVALID_TOKEN,\n          message: 'Invalid or expired authentication token.',\n          status: 401,\n        },\n      };\n    }\n\n    // Get user profile with role information\n    const { data: userProfile, error: profileError } = await supabaseAdmin\n      .from('auth_user_profiles')\n      .select(\n        `\n        barangay_code,\n        city_municipality_code,\n        province_code,\n        region_code,\n        role_id,\n        is_active\n      `\n      )\n      .eq('id', user.id)\n      .single();\n\n    if (profileError || !userProfile) {\n      return {\n        success: false,\n        error: {\n          code: ErrorCode.NOT_FOUND,\n          message: 'User profile not found.',\n          status: 404,\n        },\n      };\n    }\n\n    // Check if user is active\n    if (!userProfile.is_active) {\n      return {\n        success: false,\n        error: {\n          code: ErrorCode.FORBIDDEN,\n          message: 'Account is deactivated. Please contact administrator.',\n          status: 403,\n        },\n      };\n    }\n\n    // Get role information\n    const { data: roleData, error: roleError } = await supabaseAdmin\n      .from('auth_roles')\n      .select('name')\n      .eq('id', userProfile.role_id)\n      .single();\n\n    if (roleError || !roleData) {\n      return {\n        success: false,\n        error: {\n          code: ErrorCode.NOT_FOUND,\n          message: 'User role not found.',\n          status: 404,\n        },\n      };\n    }\n\n    const userRole = roleData.name as Role;\n\n    // Check permissions if required\n    if (config.requiredPermissions && config.requiredPermissions.length > 0) {\n      if (!hasAnyPermission(userRole, config.requiredPermissions)) {\n        return {\n          success: false,\n          error: {\n            code: ErrorCode.INSUFFICIENT_PERMISSIONS,\n            message: 'Insufficient permissions to access this resource.',\n            status: 403,\n          },\n        };\n      }\n    }\n\n    // Create request context\n    const context: RequestContext = {\n      userId: user.id,\n      userRole,\n      barangayCode: userProfile.barangay_code,\n      cityCode: userProfile.city_municipality_code,\n      provinceCode: userProfile.province_code,\n      regionCode: userProfile.region_code,\n      requestId,\n      timestamp,\n      path,\n      method,\n      ip,\n      userAgent,\n    };\n\n    return {\n      success: true,\n      user: {\n        id: user.id,\n        email: user.email!,\n        role: userRole,\n        barangayCode: userProfile.barangay_code,\n        cityCode: userProfile.city_municipality_code,\n        provinceCode: userProfile.province_code,\n        regionCode: userProfile.region_code,\n      },\n      context,\n    };\n  } catch (error) {\n    logger.error('Authentication service error', { error });\n    return {\n      success: false,\n      error: {\n        code: ErrorCode.INTERNAL_ERROR,\n        message: 'Authentication service temporarily unavailable.',\n        status: 500,\n      },\n    };\n  }\n}\n\n/**\n * Middleware wrapper for API routes\n */\nexport function withAuth(\n  config: AuthConfig,\n  handler: (\n    request: NextRequest,\n    context: RequestContext,\n    user: NonNullable<AuthResult['user']>\n  ) => Promise<Response>\n) {\n  return async (request: Request | NextRequest): Promise<Response> => {\n    const nextRequest = request instanceof Request ? (request as NextRequest) : request;\n    const authResult = await authenticate(nextRequest, config);\n\n    if (!authResult.success) {\n      return new Response(\n        JSON.stringify({\n          error: authResult.error,\n          timestamp: new Date().toISOString(),\n          path: nextRequest.nextUrl?.pathname || new URL(request.url).pathname,\n        }),\n        {\n          status: authResult.error!.status,\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n    }\n\n    return handler(nextRequest, authResult.context!, authResult.user!);\n  };\n}\n\n/**\n * Create a Supabase client with user context for RLS\n */\nexport function createAuthorizedSupabaseClient(token: string) {\n  return createClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      global: {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      },\n    }\n  );\n}\n\n/**\n * Create admin Supabase client (bypasses RLS)\n */\nexport function createAdminSupabaseClient() {\n  const url = process.env.NEXT_PUBLIC_SUPABASE_URL;\n  const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\n  if (!url || !serviceKey) {\n    throw new Error(\n      'Missing Supabase configuration: NEXT_PUBLIC_SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY are required'\n    );\n  }\n\n  return createClient(url, serviceKey);\n}\n\n/**\n * Apply geographic filtering based on user's access level\n */\nexport function applyGeographicFilter<T>(\n  query: T & { eq: (column: string, value: string) => T },\n  user: NonNullable<AuthResult['user']>\n): T {\n  const accessLevel = getAccessLevel(user.role);\n\n  switch (accessLevel) {\n    case 'barangay':\n      if (user.barangayCode) {\n        return query.eq('barangay_code', user.barangayCode);\n      }\n      break;\n    case 'city':\n      if (user.cityCode) {\n        return query.eq('city_municipality_code', user.cityCode);\n      }\n      break;\n    case 'province':\n      if (user.provinceCode) {\n        return query.eq('province_code', user.provinceCode);\n      }\n      break;\n    case 'region':\n      if (user.regionCode) {\n        return query.eq('region_code', user.regionCode);\n      }\n      break;\n    case 'national':\n      // No filtering for national access\n      break;\n  }\n\n  return query;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/authentication/csrf-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/authentication/csrf.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/authentication/errors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/authentication/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/authentication/responseUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":327,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":327,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7707,7710],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7707,7710],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":327,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":327,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7757,7760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7757,7760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":355,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":355,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8720,8723],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8720,8723],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":355,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":355,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8742,8745],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8742,8745],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":368,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":368,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9031,9034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9031,9034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":406,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":406,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10239,10242],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10239,10242],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":406,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":406,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10261,10264],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10261,10264],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":419,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":419,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10550,10553],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10550,10553],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Standardized API Response Utilities\n * Consistent response formatting and error handling\n */\n\nimport { NextResponse, NextRequest } from 'next/server';\n\nimport { logger } from '../logging';\nimport { sanitizeSearchQuery } from '../validation/sanitizers';\n\nimport { auditError, auditSecurityViolation, AuditEventType } from './auditUtils';\nimport { ApiResponse, PaginatedResponse, ErrorResponse, ErrorCode, RequestContext } from './types';\n\n/**\n * Create a successful API response\n */\nexport function createSuccessResponse<T>(\n  data: T,\n  message?: string,\n  context?: RequestContext\n): Response {\n  const response: ApiResponse<T> = {\n    data,\n    message,\n    metadata: {\n      timestamp: new Date().toISOString(),\n      version: '1.0',\n      requestId: context?.requestId,\n    },\n  };\n\n  return NextResponse.json(response, { status: 200 });\n}\n\n/**\n * Create a paginated API response\n */\nexport function createPaginatedResponse<T>(\n  data: T[],\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n  },\n  message?: string,\n  context?: RequestContext\n): Response {\n  const pages = Math.ceil(pagination.total / pagination.limit);\n\n  const response: PaginatedResponse<T> = {\n    data,\n    pagination: {\n      page: pagination.page,\n      limit: pagination.limit,\n      total: pagination.total,\n      pages,\n      hasNext: pagination.page < pages,\n      hasPrev: pagination.page > 1,\n    },\n    message,\n    metadata: {\n      timestamp: new Date().toISOString(),\n      version: '1.0',\n      requestId: context?.requestId,\n    },\n  };\n\n  return NextResponse.json(response, { status: 200 });\n}\n\n/**\n * Create an error response\n */\nexport function createErrorResponse(\n  code: ErrorCode,\n  message: string,\n  status: number = 500,\n  details?: Record<string, unknown>,\n  field?: string,\n  context?: RequestContext\n): Response {\n  const response: ErrorResponse = {\n    error: {\n      code,\n      message,\n      details,\n      field,\n    },\n    timestamp: new Date().toISOString(),\n    path: context?.path || 'unknown',\n    requestId: context?.requestId,\n  };\n\n  return NextResponse.json(response, { status });\n}\n\n/**\n * Create a validation error response\n */\nexport function createValidationErrorResponse(\n  details: Array<{ field: string; message: string }>,\n  context?: RequestContext\n): Response {\n  return createErrorResponse(\n    ErrorCode.VALIDATION_ERROR,\n    'Invalid input data',\n    422,\n    { validationErrors: details },\n    undefined,\n    context\n  );\n}\n\n/**\n * Create an unauthorized error response\n */\nexport function createUnauthorizedResponse(\n  message: string = 'Authentication required',\n  context?: RequestContext\n): Response {\n  return createErrorResponse(ErrorCode.UNAUTHORIZED, message, 401, undefined, undefined, context);\n}\n\n/**\n * Create a forbidden error response\n */\nexport function createForbiddenResponse(\n  message: string = 'Insufficient permissions',\n  context?: RequestContext\n): Response {\n  return createErrorResponse(ErrorCode.FORBIDDEN, message, 403, undefined, undefined, context);\n}\n\n/**\n * Create a not found error response\n */\nexport function createNotFoundResponse(\n  resource: string = 'Resource',\n  context?: RequestContext\n): Response {\n  return createErrorResponse(\n    ErrorCode.NOT_FOUND,\n    `${resource} not found`,\n    404,\n    undefined,\n    undefined,\n    context\n  );\n}\n\n/**\n * Create a conflict error response\n */\nexport function createConflictResponse(message: string, context?: RequestContext): Response {\n  return createErrorResponse(ErrorCode.CONFLICT, message, 409, undefined, undefined, context);\n}\n\n/**\n * Create a rate limit error response\n */\nexport function createRateLimitResponse(retryAfter: number, context?: RequestContext): Response {\n  const response = createErrorResponse(\n    ErrorCode.RATE_LIMIT_EXCEEDED,\n    `Too many requests. Try again in ${retryAfter} seconds.`,\n    429,\n    { retryAfter },\n    undefined,\n    context\n  );\n\n  response.headers.set('Retry-After', retryAfter.toString());\n  return response;\n}\n\n/**\n * Handle database errors consistently\n */\nexport async function handleDatabaseError(\n  error: { code?: string; message: string; details?: string },\n  context?: RequestContext\n): Promise<Response> {\n  logger.error('Database error', { error, context });\n\n  if (context) {\n    const errorObj = new Error(error.message);\n    errorObj.name = 'DatabaseError';\n    await auditError(errorObj, context, ErrorCode.DATABASE_ERROR);\n  }\n\n  // Check for specific database error codes\n  if (error?.code === '23505') {\n    // Unique constraint violation\n    return createConflictResponse('Resource already exists', context);\n  }\n\n  if (error?.code === '23503') {\n    // Foreign key violation\n    return createErrorResponse(\n      ErrorCode.VALIDATION_ERROR,\n      'Invalid reference to related resource',\n      400,\n      undefined,\n      undefined,\n      context\n    );\n  }\n\n  if (error?.code === '42P01') {\n    // Table does not exist\n    return createErrorResponse(\n      ErrorCode.INTERNAL_ERROR,\n      'Database configuration error',\n      500,\n      undefined,\n      undefined,\n      context\n    );\n  }\n\n  // Generic database error\n  return createErrorResponse(\n    ErrorCode.DATABASE_ERROR,\n    'Database operation failed',\n    500,\n    process.env.NODE_ENV === 'development'\n      ? {\n          code: error?.code,\n          message: error?.message,\n        }\n      : undefined,\n    undefined,\n    context\n  );\n}\n\n/**\n * Handle unexpected errors\n */\nexport async function handleUnexpectedError(\n  error: Error,\n  context?: RequestContext\n): Promise<Response> {\n  logger.error('Unexpected API error', { error, context });\n\n  if (context) {\n    await auditError(error, context, ErrorCode.INTERNAL_ERROR);\n  }\n\n  return createErrorResponse(\n    ErrorCode.INTERNAL_ERROR,\n    'An unexpected error occurred',\n    500,\n    process.env.NODE_ENV === 'development'\n      ? {\n          name: error?.name,\n          message: error?.message,\n          stack: error?.stack?.split('\\n').slice(0, 5),\n        }\n      : undefined,\n    undefined,\n    context\n  );\n}\n\n/**\n * Detect and handle potential SQL injection attempts\n */\nexport async function detectSQLInjection(\n  input: string,\n  context?: RequestContext\n): Promise<boolean> {\n  const sqlPatterns = [\n    /('|(\\\\')|(;|#|--|\\/\\*|\\*\\/))/, // SQL injection patterns\n    /(union|select|insert|update|delete|drop|create|alter)\\s/i,\n    /(\\bor\\b|\\band\\b)\\s+\\d+\\s*=\\s*\\d+/i,\n    /(\\bor\\b|\\band\\b)\\s+['\"].*['\"]?\\s*=\\s*['\"].*['\"]?/i,\n    /(exec|execute|sp_|xp_)/i,\n  ];\n\n  const isSQLInjection = sqlPatterns.some(pattern => pattern.test(input));\n\n  if (isSQLInjection && context) {\n    await auditSecurityViolation(AuditEventType.SQL_INJECTION_ATTEMPT, context, {\n      suspiciousInput: input,\n    });\n  }\n\n  return isSQLInjection;\n}\n\n/**\n * Safely process search parameters\n */\nexport async function processSearchParams(\n  searchParams: URLSearchParams,\n  context?: RequestContext\n): Promise<{\n  search: string | null;\n  page: number;\n  limit: number;\n  offset: number;\n}> {\n  const search = searchParams.get('search');\n  const page = Math.max(1, parseInt(searchParams.get('page') || '1'));\n  const limit = Math.min(100, Math.max(1, parseInt(searchParams.get('limit') || '20')));\n  const offset = (page - 1) * limit;\n\n  // Check for SQL injection in search parameter\n  if (search && context) {\n    const isSQLInjection = await detectSQLInjection(search, context);\n    if (isSQLInjection) {\n      throw new Error('Invalid search parameter detected');\n    }\n  }\n\n  return {\n    search: search ? sanitizeSearchQuery(search) : null,\n    page,\n    limit,\n    offset,\n  };\n}\n\n/**\n * Apply search filters safely to Supabase query\n */\nexport function applySearchFilter(query: any, searchTerm: string, searchFields: string[]): any {\n  if (!searchTerm || !searchFields.length) {\n    return query;\n  }\n\n  const sanitizedTerm = sanitizeSearchQuery(searchTerm);\n  const searchConditions = searchFields.map(field => `${field}.ilike.%${sanitizedTerm}%`).join(',');\n\n  return query.or(searchConditions);\n}\n\n/**\n * Wrapper for API route handlers with error handling\n */\nexport function withErrorHandling<T extends readonly unknown[]>(\n  handler: (request: Request | NextRequest, ...args: T) => Promise<Response>\n) {\n  return async (request: Request | NextRequest, ...args: T): Promise<Response> => {\n    try {\n      return await handler(request, ...args);\n    } catch (error: unknown) {\n      const context = args.find(arg => arg && typeof arg === 'object' && 'requestId' in arg) as\n        | RequestContext\n        | undefined;\n\n      // Check for validation errors\n      if (error instanceof Error && error.name === 'ZodError') {\n        return createValidationErrorResponse(\n          (error as any).errors.map((err: any) => ({\n            field: err.path.join('.'),\n            message: err.message,\n          })),\n          context\n        );\n      }\n\n      // Check for database errors\n      if (\n        error &&\n        typeof error === 'object' &&\n        'code' in error &&\n        typeof (error as any).code === 'string' &&\n        'message' in error\n      ) {\n        return handleDatabaseError(\n          error as { code?: string; message: string; details?: string },\n          context\n        );\n      }\n\n      // Handle unexpected errors\n      if (error instanceof Error) {\n        return handleUnexpectedError(error, context);\n      }\n\n      // Handle unknown errors\n      const unknownError = new Error('An unknown error occurred');\n      return handleUnexpectedError(unknownError, context);\n    }\n  };\n}\n\n/**\n * Specialized error handling for NextRequest (used with withAuth)\n */\nexport function withNextRequestErrorHandling<T extends readonly unknown[]>(\n  handler: (request: NextRequest, ...args: T) => Promise<Response>\n) {\n  return async (request: NextRequest, ...args: T): Promise<Response> => {\n    try {\n      return await handler(request, ...args);\n    } catch (error: unknown) {\n      const context = args.find(arg => arg && typeof arg === 'object' && 'requestId' in arg) as\n        | RequestContext\n        | undefined;\n\n      // Check for validation errors\n      if (error instanceof Error && error.name === 'ZodError') {\n        return createValidationErrorResponse(\n          (error as any).errors.map((err: any) => ({\n            field: err.path.join('.'),\n            message: err.message,\n          })),\n          context\n        );\n      }\n\n      // Check for database errors\n      if (\n        error &&\n        typeof error === 'object' &&\n        'code' in error &&\n        typeof (error as any).code === 'string' &&\n        'message' in error\n      ) {\n        return handleDatabaseError(\n          error as { code?: string; message: string; details?: string },\n          context\n        );\n      }\n\n      // Handle unexpected errors\n      if (error instanceof Error) {\n        return handleUnexpectedError(error, context);\n      }\n\n      // Handle unknown errors\n      const unknownError = new Error('An unknown error occurred');\n      return handleUnexpectedError(unknownError, context);\n    }\n  };\n}\n\n/**\n * Create a 201 Created response for successful resource creation\n */\nexport function createCreatedResponse<T>(\n  data: T,\n  message?: string,\n  context?: RequestContext\n): Response {\n  const response: ApiResponse<T> = {\n    data,\n    message: message || 'Resource created successfully',\n    metadata: {\n      timestamp: new Date().toISOString(),\n      version: '1.0',\n      requestId: context?.requestId,\n    },\n  };\n\n  return NextResponse.json(response, { status: 201 });\n}\n\n/**\n * Create a 204 No Content response for successful deletion\n */\nexport function createNoContentResponse(): Response {\n  return new Response(null, { status: 204 });\n}\n\n/**\n * Add security headers to response\n */\nexport function addSecurityHeaders(response: Response): Response {\n  response.headers.set('X-Content-Type-Options', 'nosniff');\n  response.headers.set('X-Frame-Options', 'DENY');\n  response.headers.set('X-XSS-Protection', '1; mode=block');\n  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n  response.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');\n\n  return response;\n}\n\n/**\n * Middleware to add security headers to all responses\n */\nexport function withSecurityHeaders(handler: (request: Request) => Promise<Response>) {\n  return async (request: Request): Promise<Response> => {\n    const response = await handler(request);\n    return addSecurityHeaders(response);\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/authentication/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/authentication/validationUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/business-rules/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/business-rules/resident-detail-helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/business-rules/resident-form-rules.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2388,2391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2388,2391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Business rules for resident form conditional fields and logic\n */\n\n// Religion-related business rules\nexport const shouldShowReligionOthersField = (religion: string): boolean => {\n  return religion === 'others';\n};\n\n// Civil status-related business rules\nexport const shouldShowCivilStatusOthersField = (civilStatus: string): boolean => {\n  return civilStatus === 'others';\n};\n\n// Migration-related business rules\nexport const shouldShowMigrationFields = (isMigrant: boolean): boolean => {\n  return Boolean(isMigrant);\n};\n\nexport const shouldShowPreviousAddressFields = (hasPreviousAddress: boolean): boolean => {\n  return Boolean(hasPreviousAddress);\n};\n\n// Employment-related business rules\nexport const shouldShowOccupationFields = (employmentStatus: string): boolean => {\n  return ['employed', 'self_employed'].includes(employmentStatus);\n};\n\nexport const shouldShowUnemploymentFields = (employmentStatus: string): boolean => {\n  return employmentStatus === 'unemployed';\n};\n\n// Education-related business rules\nexport const shouldShowGraduationStatus = (educationAttainment: string): boolean => {\n  const levelsWithGraduation = [\n    'elementary_undergraduate',\n    'high_school_undergraduate',\n    'post_secondary_undergraduate',\n    'college_undergraduate',\n  ];\n  return levelsWithGraduation.includes(educationAttainment);\n};\n\n// Age-related business rules\nexport const calculateAge = (birthdate: string): number => {\n  if (!birthdate) return 0;\n  const today = new Date();\n  const birth = new Date(birthdate);\n  let age = today.getFullYear() - birth.getFullYear();\n  const monthDiff = today.getMonth() - birth.getMonth();\n\n  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\n    age--;\n  }\n\n  return age;\n};\n\nexport const isSeniorCitizen = (birthdate: string): boolean => {\n  return calculateAge(birthdate) >= 60;\n};\n\nexport const isMinor = (birthdate: string): boolean => {\n  return calculateAge(birthdate) < 18;\n};\n\n// Sectoral information business rules\nexport const shouldShowSectoralDetails = (sectoralType: string): boolean => {\n  const sectoralTypesWithDetails = [\n    'isPersonWithDisability',\n    'isIndigenousPeople',\n    'isOverseasFilipino',\n  ];\n  return sectoralTypesWithDetails.some(type => sectoralType === type);\n};\n\n// Form completion business rules\nexport const calculateFormCompletionPercentage = (formData: Record<string, any>): number => {\n  const requiredFields = ['firstName', 'lastName', 'sex', 'birthdate', 'civilStatus'];\n\n  const optionalFields = ['middleName', 'citizenship', 'mobileNumber', 'email'];\n\n  const allFields = [...requiredFields, ...optionalFields];\n  const completedFields = allFields.filter(field => {\n    const value = formData[field];\n    return value !== null && value !== undefined && value !== '';\n  });\n\n  return Math.round((completedFields.length / allFields.length) * 100);\n};\n\n// Validation business rules\nexport const isValidPhilSysCardNumber = (cardNumber: string): boolean => {\n  // PhilSys card numbers should be 12 digits\n  const cleaned = cardNumber.replace(/\\D/g, '');\n  return cleaned.length === 12;\n};\n\nexport const isValidMobileNumber = (mobileNumber: string): boolean => {\n  // Philippine mobile numbers: 09XXXXXXXXX or +639XXXXXXXXX\n  const cleaned = mobileNumber.replace(/\\D/g, '');\n\n  if (cleaned.startsWith('639')) {\n    return cleaned.length === 12;\n  }\n\n  if (cleaned.startsWith('09')) {\n    return cleaned.length === 11;\n  }\n\n  return false;\n};\n\n// Date validation business rules\nexport const isValidBirthdate = (birthdate: string): boolean => {\n  if (!birthdate) return false;\n\n  const birth = new Date(birthdate);\n  const today = new Date();\n  const maxAge = 150;\n\n  // Must be a valid date\n  if (isNaN(birth.getTime())) return false;\n\n  // Cannot be in the future\n  if (birth > today) return false;\n\n  // Cannot be more than 150 years ago\n  const minDate = new Date();\n  minDate.setFullYear(today.getFullYear() - maxAge);\n  if (birth < minDate) return false;\n\n  return true;\n};\n\n// Field dependency business rules\nexport const getFieldDependencies = (fieldName: string): string[] => {\n  const dependencies: Record<string, string[]> = {\n    civilStatusOthersSpecify: ['civilStatus'],\n    religionOthersSpecify: ['religion'],\n    occupationTitle: ['employmentStatus'],\n    psocCode: ['employmentStatus'],\n    isGraduate: ['educationAttainment'],\n    // Migration fields depend on isMigrant\n    previousBarangayCode: ['isMigrant'],\n    previousCityMunicipalityCode: ['isMigrant'],\n    previousProvinceCode: ['isMigrant'],\n    previousRegionCode: ['isMigrant'],\n    lengthOfStayPreviousMonths: ['isMigrant'],\n    reasonForLeaving: ['isMigrant'],\n    dateOfTransfer: ['isMigrant'],\n    reasonForTransferring: ['isMigrant'],\n    durationOfStayCurrentMonths: ['isMigrant'],\n    isIntendingToReturn: ['isMigrant'],\n  };\n\n  return dependencies[fieldName] || [];\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/business-rules/resident-helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/business-rules/resident-listing-helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/business-rules/sectoral-classification.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/caching/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/caching/redis-client.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isProduction' is defined but never used.","line":7,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isDevelopment' is defined but never used.","line":7,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[719,722],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[719,722],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RedisCache' is defined but never used.","line":160,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":160,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":161,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4160,4163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4160,4163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":231,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5863,5866],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5863,5866],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Redis Client Configuration\n * Centralized caching solution using Redis or in-memory fallback\n * Schema-aligned with consolidated cache types\n */\n\nimport { createLogger, isProduction, isDevelopment } from '@/lib/config/environment';\nimport type { CacheEntry, CacheClient, CacheStats } from '@/types/cache';\n\nconst logger = createLogger('RedisClient');\n\n// CacheClient interface now imported from @/types/cache\n\n/**\n * In-memory cache implementation for development and fallback\n */\nclass InMemoryCache implements CacheClient {\n  private cache = new Map<string, CacheEntry>();\n  private stats = { hits: 0, misses: 0 };\n  private maxSize = 1000;\n  private defaultTTL = 300; // 5 minutes in seconds\n\n  async get<T = any>(key: string): Promise<T | null> {\n    const entry = this.cache.get(key);\n\n    if (!entry) {\n      this.stats.misses++;\n      return null;\n    }\n\n    // Check if expired\n    if (Date.now() - entry.timestamp > entry.ttl * 1000) {\n      this.cache.delete(key);\n      this.stats.misses++;\n      return null;\n    }\n\n    this.stats.hits++;\n    return entry.data as T;\n  }\n\n  async set<T>(key: string, value: T, options?: { ttl?: number }): Promise<boolean> {\n    try {\n      const ttlMs = (options?.ttl || this.defaultTTL) * 1000;\n\n      // Clean cache if at capacity\n      if (this.cache.size >= this.maxSize) {\n        this.cleanup();\n      }\n\n      this.cache.set(key, {\n        key,\n        data: value,\n        timestamp: Date.now(),\n        ttl: ttlMs,\n        tags: [],\n      });\n\n      return true;\n    } catch (error) {\n      logger.error('Failed to set cache entry', { key, error });\n      return false;\n    }\n  }\n\n  async del(key: string): Promise<boolean> {\n    return this.cache.delete(key);\n  }\n\n  async flush(): Promise<boolean> {\n    this.cache.clear();\n    this.stats = { hits: 0, misses: 0 };\n    return true;\n  }\n\n  async keys(pattern: string): Promise<string[]> {\n    const regex = new RegExp(pattern.replace('*', '.*'));\n    return Array.from(this.cache.keys()).filter(key => regex.test(key));\n  }\n\n  async exists(key: string): Promise<boolean> {\n    const entry = this.cache.get(key);\n    if (!entry) return false;\n\n    // Check if expired\n    if (Date.now() - entry.timestamp > entry.ttl) {\n      this.cache.delete(key);\n      return false;\n    }\n\n    return true;\n  }\n\n  async expire(key: string, ttlSeconds: number): Promise<boolean> {\n    const entry = this.cache.get(key);\n    if (!entry) return false;\n\n    entry.ttl = ttlSeconds;\n    entry.timestamp = Date.now();\n    return true;\n  }\n\n  async getStats(): Promise<CacheStats> {\n    const total = this.stats.hits + this.stats.misses;\n    return {\n      hits: this.stats.hits,\n      misses: this.stats.misses,\n      size: this.cache.size,\n      memoryUsage: this.estimateMemoryUsage(),\n      hitRatio: total > 0 ? this.stats.hits / total : 0,\n    };\n  }\n\n  private cleanup(): void {\n    const now = Date.now();\n    const expiredKeys: string[] = [];\n\n    // Remove expired entries first\n    this.cache.forEach((entry, key) => {\n      if (now - entry.timestamp > entry.ttl) {\n        expiredKeys.push(key);\n      }\n    });\n\n    for (const key of expiredKeys) {\n      this.cache.delete(key);\n    }\n\n    // If still at capacity, remove oldest entries\n    if (this.cache.size >= this.maxSize) {\n      const entries = Array.from(this.cache.entries()).sort(\n        ([, a], [, b]) => a.timestamp - b.timestamp\n      );\n\n      const toRemove = entries.slice(0, Math.floor(this.maxSize * 0.2)); // Remove 20%\n      for (const [key] of toRemove) {\n        this.cache.delete(key);\n      }\n    }\n\n    logger.debug(`Cleaned up cache: removed ${expiredKeys.length} expired entries`);\n  }\n\n  private estimateMemoryUsage(): number {\n    // Rough estimation of memory usage in bytes\n    let size = 0;\n    this.cache.forEach((entry, key) => {\n      size += key.length * 2; // String chars are 2 bytes\n      size += JSON.stringify(entry.data).length * 2;\n      size += 16; // Timestamp and TTL\n    });\n    return size;\n  }\n}\n\n/**\n * Redis client implementation for production\n * Currently disabled - using in-memory cache\n */\nclass RedisCache implements CacheClient {\n  async get<T = any>(_key: string): Promise<T | null> {\n    // Disabled - fallback to null\n    return null;\n  }\n\n  async set<T>(_key: string, _value: T, _options?: { ttl?: number }): Promise<boolean> {\n    // Disabled - fallback to false\n    return false;\n  }\n\n  async del(_key: string): Promise<boolean> {\n    return false;\n  }\n\n  async flush(): Promise<boolean> {\n    return false;\n  }\n\n  async keys(_pattern: string): Promise<string[]> {\n    return [];\n  }\n\n  async exists(_key: string): Promise<boolean> {\n    return false;\n  }\n\n  async expire(_key: string, _ttlSeconds: number): Promise<boolean> {\n    return false;\n  }\n\n  async getStats(): Promise<CacheStats> {\n    return { hits: 0, misses: 0, size: 0, memoryUsage: 0, hitRatio: 0 };\n  }\n}\n\n/**\n * Cache client factory\n */\nfunction createCacheClient(): CacheClient {\n  // Use in-memory cache for now - Redis support can be enabled later\n  logger.info('Initializing in-memory cache client');\n  return new InMemoryCache();\n\n  // TODO: Enable Redis support when package is installed\n  // if (isProduction() && process.env.REDIS_URL) {\n  //   try {\n  //     logger.info('Attempting to initialize Redis cache client');\n  //     return new RedisCache();\n  //   } catch (error) {\n  //     logger.warn('Failed to initialize Redis cache, falling back to in-memory cache');\n  //   }\n  // }\n}\n\n// Singleton cache client\nexport const cacheClient = createCacheClient();\n\n// Cache utility functions\nexport class CacheManager {\n  private client: CacheClient;\n  private defaultTTL = 300; // 5 minutes\n  private keyPrefix = 'rbi:';\n\n  constructor(client: CacheClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get cached value with automatic JSON parsing\n   */\n  async get<T = any>(key: string): Promise<T | null> {\n    const prefixedKey = this.keyPrefix + key;\n    return await this.client.get<T>(prefixedKey);\n  }\n\n  /**\n   * Set cached value with automatic JSON serialization\n   */\n  async set<T>(key: string, value: T, ttlSeconds = this.defaultTTL): Promise<boolean> {\n    const prefixedKey = this.keyPrefix + key;\n    return await this.client.set(prefixedKey, value, { ttl: ttlSeconds });\n  }\n\n  /**\n   * Delete cached value\n   */\n  async del(key: string): Promise<boolean> {\n    const prefixedKey = this.keyPrefix + key;\n    return await this.client.del(prefixedKey);\n  }\n\n  /**\n   * Get or set cached value with automatic computation\n   */\n  async getOrSet<T>(\n    key: string,\n    computeFn: () => Promise<T>,\n    ttlSeconds = this.defaultTTL\n  ): Promise<T> {\n    const cached = await this.get<T>(key);\n    if (cached !== null) {\n      return cached;\n    }\n\n    const computed = await computeFn();\n    await this.set(key, computed, ttlSeconds);\n    return computed;\n  }\n\n  /**\n   * Invalidate cache keys by pattern\n   */\n  async invalidatePattern(pattern: string): Promise<number> {\n    const prefixedPattern = this.keyPrefix + pattern;\n    const keys = await this.client.keys(prefixedPattern);\n\n    let deleted = 0;\n    for (const key of keys) {\n      if (await this.client.del(key)) {\n        deleted++;\n      }\n    }\n\n    logger.info(`Invalidated ${deleted} cache keys matching pattern: ${pattern}`);\n    return deleted;\n  }\n\n  /**\n   * Get cache statistics\n   */\n  async getStats() {\n    return await this.client.getStats();\n  }\n\n  /**\n   * Clear all cache\n   */\n  async clear(): Promise<boolean> {\n    return await this.client.flush();\n  }\n}\n\n// Export cache manager instance\nexport const cacheManager = new CacheManager(cacheClient);\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/caching/response-cache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/charts/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/command-menu/analytics-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[468,471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[468,471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'query' is defined but never used. Allowed unused args must match /^_/u.","line":33,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3922,3925],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3922,3925],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":286,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8351,8354],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8351,8354],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Command Menu Analytics & Performance Monitoring\n * Production-ready tracking for command menu usage and performance\n */\n\nimport { logger } from '@/lib/logging';\nimport type { CommandMenuPerformanceMetrics } from '@/types/performance';\n\n// Analytics event types\nexport interface CommandMenuAnalyticsEvent {\n  type: 'search' | 'navigation' | 'action' | 'error' | 'performance';\n  timestamp: number;\n  userId?: string;\n  sessionId?: string;\n  data: Record<string, any>;\n}\n\n// In-memory analytics store (would be replaced with proper analytics service in production)\nclass CommandMenuAnalytics {\n  private events: CommandMenuAnalyticsEvent[] = [];\n  private metrics: CommandMenuPerformanceMetrics = {\n    searchLatency: 0,\n    cacheHitRate: 0,\n    errorRate: 0,\n    usageFrequency: 0,\n  };\n  private searchTimes = new Map<string, number>();\n  private cacheStats = { hits: 0, misses: 0 };\n  private errorCount = 0;\n  private totalEvents = 0;\n\n  // Track search performance\n  trackSearchStart(query: string): string {\n    const searchId = `search-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    this.searchTimes.set(searchId, performance.now());\n    return searchId;\n  }\n\n  trackSearchComplete(\n    searchId: string,\n    query: string,\n    resultCount: number,\n    fromCache = false\n  ): void {\n    const startTime = this.searchTimes.get(searchId);\n    if (startTime) {\n      const latency = performance.now() - startTime;\n      this.searchTimes.delete(searchId);\n\n      // Update cache stats\n      if (fromCache) {\n        this.cacheStats.hits++;\n      } else {\n        this.cacheStats.misses++;\n      }\n\n      // Update metrics\n      this.metrics.searchLatency = (this.metrics.searchLatency + latency) / 2; // Running average\n      this.metrics.cacheHitRate =\n        this.cacheStats.hits / (this.cacheStats.hits + this.cacheStats.misses);\n\n      // Track event\n      this.trackEvent({\n        type: 'performance',\n        timestamp: Date.now(),\n        data: {\n          action: 'search_complete',\n          query: query.slice(0, 50), // Truncate for privacy\n          latency,\n          resultCount,\n          fromCache,\n          cacheHitRate: this.metrics.cacheHitRate,\n        },\n      });\n\n      // Log slow searches for optimization\n      if (latency > 1000) {\n        logger.warn('Slow command menu search detected', {\n          latency,\n          query: query.slice(0, 50),\n          resultCount,\n          fromCache,\n        });\n      }\n    }\n  }\n\n  // Track user interactions\n  trackSearch(query: string, resultCount: number): void {\n    this.trackEvent({\n      type: 'search',\n      timestamp: Date.now(),\n      data: {\n        query: query.slice(0, 50), // Truncate for privacy\n        queryLength: query.length,\n        resultCount,\n        hasResults: resultCount > 0,\n      },\n    });\n  }\n\n  trackNavigation(itemId: string, itemType: string, href: string): void {\n    this.trackEvent({\n      type: 'navigation',\n      timestamp: Date.now(),\n      data: {\n        itemId,\n        itemType,\n        href: href.slice(0, 100), // Truncate for security\n        source: 'command_menu',\n      },\n    });\n  }\n\n  trackAction(actionId: string, actionType: string, success = true): void {\n    this.trackEvent({\n      type: 'action',\n      timestamp: Date.now(),\n      data: {\n        actionId,\n        actionType,\n        success,\n        source: 'command_menu',\n      },\n    });\n  }\n\n  trackWorkflowSuggestion(suggestionId: string, query: string, suggestionTitle: string): void {\n    this.trackEvent({\n      type: 'action',\n      timestamp: Date.now(),\n      data: {\n        actionId: suggestionId,\n        actionType: 'workflow_suggestion',\n        success: true,\n        source: 'command_menu',\n        query: query.slice(0, 50),\n        suggestionTitle: suggestionTitle.slice(0, 100),\n        context: 'no_results_found',\n      },\n    });\n  }\n\n  trackError(error: Error, context: Record<string, any> = {}): void {\n    this.errorCount++;\n    this.metrics.errorRate = this.errorCount / Math.max(this.totalEvents, 1);\n\n    this.trackEvent({\n      type: 'error',\n      timestamp: Date.now(),\n      data: {\n        error: error.message,\n        errorType: error.name,\n        context: {\n          ...context,\n          userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'unknown',\n        },\n      },\n    });\n\n    // Log critical errors\n    if (this.metrics.errorRate > 0.1) {\n      logger.error('High command menu error rate detected', {\n        errorRate: this.metrics.errorRate,\n        recentError: error.message,\n      });\n    }\n  }\n\n  // Internal event tracking\n  private trackEvent(event: Omit<CommandMenuAnalyticsEvent, 'userId' | 'sessionId'>): void {\n    this.totalEvents++;\n\n    // Add session context if available\n    const fullEvent: CommandMenuAnalyticsEvent = {\n      ...event,\n      sessionId: this.getSessionId(),\n      userId: this.getUserId(),\n    };\n\n    this.events.push(fullEvent);\n\n    // Keep only recent events to prevent memory leaks\n    if (this.events.length > 1000) {\n      this.events = this.events.slice(-500); // Keep last 500 events\n    }\n\n    // Update usage frequency\n    this.updateUsageFrequency();\n\n    // In production, send to analytics service\n    if (process.env.NODE_ENV === 'production') {\n      this.sendToAnalyticsService(fullEvent);\n    }\n  }\n\n  private updateUsageFrequency(): void {\n    const oneHourAgo = Date.now() - 60 * 60 * 1000;\n    const recentEvents = this.events.filter(e => e.timestamp > oneHourAgo);\n    this.metrics.usageFrequency = recentEvents.length;\n  }\n\n  private getSessionId(): string {\n    // Simple session ID - in production would use proper session management\n    if (typeof window !== 'undefined') {\n      let sessionId = sessionStorage.getItem('command-menu-session');\n      if (!sessionId) {\n        sessionId = `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        sessionStorage.setItem('command-menu-session', sessionId);\n      }\n      return sessionId;\n    }\n    return 'server-session';\n  }\n\n  private getUserId(): string | undefined {\n    // Would integrate with actual auth system\n    // For now, return undefined for privacy\n    return undefined;\n  }\n\n  private sendToAnalyticsService(event: CommandMenuAnalyticsEvent): void {\n    // In production, would send to analytics service like Google Analytics, Mixpanel, etc.\n    // For now, just log for monitoring\n    if (event.type === 'error' || event.type === 'performance') {\n      logger.info('Command menu analytics event', {\n        type: event.type,\n        timestamp: event.timestamp,\n        data: event.data,\n      });\n    }\n  }\n\n  // Get current metrics for monitoring dashboards\n  getMetrics(): CommandMenuPerformanceMetrics {\n    return { ...this.metrics };\n  }\n\n  // Get recent events for debugging\n  getRecentEvents(count = 50): CommandMenuAnalyticsEvent[] {\n    return this.events.slice(-count);\n  }\n\n  // Health check for monitoring\n  getHealthStatus(): {\n    status: 'healthy' | 'warning' | 'critical';\n    metrics: CommandMenuPerformanceMetrics;\n  } {\n    const metrics = this.getMetrics();\n    let status: 'healthy' | 'warning' | 'critical' = 'healthy';\n\n    // Determine health based on metrics\n    if (metrics.errorRate > 0.2 || metrics.searchLatency > 2000) {\n      status = 'critical';\n    } else if (\n      metrics.errorRate > 0.1 ||\n      metrics.searchLatency > 1000 ||\n      metrics.cacheHitRate < 0.3\n    ) {\n      status = 'warning';\n    }\n\n    return { status, metrics };\n  }\n}\n\n// Global analytics instance\nexport const commandMenuAnalytics = new CommandMenuAnalytics();\n\n// Convenience functions\nexport const trackCommandMenuSearch = (query: string, resultCount: number) =>\n  commandMenuAnalytics.trackSearch(query, resultCount);\n\nexport const trackCommandMenuNavigation = (itemId: string, itemType: string, href: string) =>\n  commandMenuAnalytics.trackNavigation(itemId, itemType, href);\n\nexport const trackCommandMenuAction = (actionId: string, actionType: string, success = true) =>\n  commandMenuAnalytics.trackAction(actionId, actionType, success);\n\nexport const trackWorkflowSuggestion = (\n  suggestionId: string,\n  query: string,\n  suggestionTitle: string\n) => commandMenuAnalytics.trackWorkflowSuggestion(suggestionId, query, suggestionTitle);\n\nexport const trackCommandMenuError = (error: Error, context: Record<string, any> = {}) =>\n  commandMenuAnalytics.trackError(error, context);\n\nexport const startCommandMenuSearchTimer = (query: string) =>\n  commandMenuAnalytics.trackSearchStart(query);\n\nexport const endCommandMenuSearchTimer = (\n  searchId: string,\n  query: string,\n  resultCount: number,\n  fromCache = false\n) => commandMenuAnalytics.trackSearchComplete(searchId, query, resultCount, fromCache);\n\n// Health monitoring export\nexport const getCommandMenuHealth = () => commandMenuAnalytics.getHealthStatus();\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/command-menu/api-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[554,557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[554,557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Command Menu API Utilities\n * Functions for command menu API interactions\n */\n\nimport type { CommandMenuItemType as CommandMenuItem } from '@/components';\nimport { commandMenuService } from '@/services/command-menu-service';\n\n/**\n * Search data through the command menu service\n */\nexport const searchData = async (query: string, limit = 10) => {\n  return commandMenuService.searchData(query, limit);\n};\n\n/**\n * Export data functionality\n */\nexport const exportData = async (options: {\n  type: string;\n  format: string;\n  filters?: Record<string, any>;\n}) => {\n  const exportOptions = {\n    type: options.type as 'residents' | 'households',\n    format: options.format as 'csv' | 'xlsx',\n    filters: options.filters,\n  };\n  return commandMenuService.exportData(exportOptions);\n};\n\n/**\n * Get recent items from storage\n */\nexport const getRecentItems = async (): Promise<CommandMenuItem[]> => {\n  const results = await commandMenuService.getRecentItems();\n  // Convert search results to command menu items\n  return results.map(item => ({\n    id: item.id,\n    title: item.title,\n    subtitle: item.description,\n    data: item,\n    score: 1,\n    type: item.type,\n    group: 'Recent',\n    recent: true,\n    keywords: [item.title.toLowerCase()],\n    href: item.href,\n  }));\n};\n\n/**\n * Clear recent items\n */\nexport const clearRecentItems = async (): Promise<boolean> => {\n  return commandMenuService.clearRecentItems();\n};\n\n/**\n * Quick action functions that return navigation URLs\n */\nconst getNavigationActions = () => commandMenuService.getNavigationActions();\n\nexport const createResident = () => getNavigationActions().createResident();\nexport const createHousehold = () => getNavigationActions().createHousehold();\nexport const findSeniorCitizens = () => getNavigationActions().findSeniorCitizens();\nexport const findPWDs = () => getNavigationActions().findPWDs();\nexport const findSoloParents = () => getNavigationActions().findSoloParents();\n\n/**\n * Generate certificates - return navigation URLs\n */\nexport const generateCertificate = (type: 'clearance' | 'residency' | 'indigency') => {\n  const actions = getNavigationActions();\n  switch (type) {\n    case 'clearance':\n      return actions.generateClearance();\n    case 'residency':\n      return actions.generateResidency();\n    case 'indigency':\n      return actions.generateIndigency();\n    default:\n      return actions.generateClearance();\n  }\n};\n\n/**\n * Generate reports - return navigation URLs\n */\nexport const generateReport = (type: 'population' | 'households') => {\n  const actions = getNavigationActions();\n  switch (type) {\n    case 'population':\n      return actions.populationReport();\n    case 'households':\n      return actions.householdsReport();\n    default:\n      return actions.populationReport();\n  }\n};\n\n/**\n * Backup data functionality\n */\nexport const backupData = async (): Promise<boolean> => {\n  return commandMenuService.backupData();\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/command-menu/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/command-menu/items-utils.ts","messages":[{"ruleId":"react/display-name","severity":2,"message":"Component definition is missing display name","line":8,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"noDisplayName","endLine":23,"endColumn":6},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":297,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":297,"endColumn":18,"suggestions":[{"fix":{"range":[10255,10297],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":311,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":311,"endColumn":18,"suggestions":[{"fix":{"range":[10646,10689],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":377,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":377,"endColumn":18,"suggestions":[{"fix":{"range":[12514,12550],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\n\nimport type { CommandMenuSearchResult } from '../../types/hooks';\n\n// Icon helper function - creates React components for SVG icons\nconst createIcon =\n  (path: string) =>\n  ({ className }: { className?: string }) =>\n    React.createElement(\n      'svg',\n      {\n        className,\n        fill: 'none',\n        stroke: 'currentColor',\n        viewBox: '0 0 24 24',\n      },\n      React.createElement('path', {\n        strokeLinecap: 'round',\n        strokeLinejoin: 'round',\n        strokeWidth: 2,\n        d: path,\n      })\n    );\n\n// Icons for command menu items\nexport const Icons = {\n  Home: createIcon(\n    'M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6'\n  ),\n  Users: createIcon(\n    'M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z'\n  ),\n  Building: createIcon(\n    'M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4'\n  ),\n  Chart: createIcon(\n    'M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z'\n  ),\n  Plus: createIcon('M12 6v6m0 0v6m0-6h6m-6 0H6'),\n  Settings: createIcon(\n    'M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z M15 12a3 3 0 11-6 0 3 3 0 016 0z'\n  ),\n  Download: createIcon('M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4'),\n  Upload: createIcon(\n    'M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12'\n  ),\n  Certificate: createIcon('M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z'),\n  Search: createIcon('M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z'),\n  FileText: createIcon(\n    'M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z'\n  ),\n  UserGroup: createIcon(\n    'M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z'\n  ),\n  ClipboardList: createIcon(\n    'M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01'\n  ),\n  Filter: createIcon(\n    'M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.707A1 1 0 013 7V4z'\n  ),\n  Heart: createIcon(\n    'M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z'\n  ),\n  Shield: createIcon(\n    'M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z'\n  ),\n  Calendar: createIcon(\n    'M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z'\n  ),\n  Bell: createIcon(\n    'M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9'\n  ),\n  Globe: createIcon(\n    'M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z'\n  ),\n};\n\n// Base command menu items for the barangay system\nexport const getCommandMenuItems = (): CommandMenuSearchResult[] => [\n  // Navigation Group\n  {\n    id: 'nav-dashboard',\n    title: 'Dashboard',\n    subtitle: 'View overview and statistics',\n    icon: Icons.Home,\n    group: 'Navigation',\n    href: '/dashboard',\n    keywords: ['home', 'overview', 'stats', 'main'],\n    shortcut: ['⌘', '1'],\n    data: { href: '/dashboard' },\n    score: 1.0,\n    type: 'navigation',\n  },\n  {\n    id: 'nav-residents',\n    title: 'Residents',\n    subtitle: 'Manage resident records',\n    icon: Icons.Users,\n    group: 'Navigation',\n    href: '/residents',\n    keywords: ['people', 'citizens', 'records', 'population'],\n    shortcut: ['⌘', '2'],\n    data: { href: '/residents' },\n    score: 1.0,\n    type: 'navigation',\n  },\n  {\n    id: 'nav-households',\n    title: 'Households',\n    subtitle: 'Manage household information',\n    icon: Icons.Building,\n    group: 'Navigation',\n    href: '/households',\n    keywords: ['families', 'homes', 'address', 'dwelling'],\n    shortcut: ['⌘', '3'],\n    data: { href: '/households' },\n    score: 1.0,\n    type: 'navigation',\n  },\n  {\n    id: 'nav-reports',\n    title: 'Reports',\n    subtitle: 'Generate and view reports',\n    icon: Icons.Chart,\n    group: 'Navigation',\n    href: '/reports',\n    keywords: ['analytics', 'statistics', 'data', 'charts'],\n    shortcut: ['⌘', '4'],\n    data: { href: '/reports' },\n    score: 1.0,\n    type: 'navigation',\n  },\n  {\n    id: 'nav-certifications',\n    title: 'Certifications',\n    subtitle: 'Manage certificates and clearances',\n    icon: Icons.Certificate,\n    group: 'Navigation',\n    href: '/certification',\n    keywords: ['certificates', 'clearance', 'documents', 'barangay clearance'],\n    shortcut: ['⌘', '5'],\n    data: { href: '/certification' },\n    score: 1.0,\n    type: 'navigation',\n  },\n  {\n    id: 'nav-settings',\n    title: 'Settings',\n    subtitle: 'Configure system preferences',\n    icon: Icons.Settings,\n    group: 'Navigation',\n    href: '/settings',\n    keywords: ['config', 'preferences', 'admin', 'configuration'],\n    shortcut: ['⌘', ','],\n    data: { href: '/settings' },\n    score: 1.0,\n    type: 'navigation',\n  },\n\n  // Quick Actions Group\n  {\n    id: 'action-add-resident',\n    title: 'Add New Resident',\n    subtitle: 'Register a new resident',\n    icon: Icons.Plus,\n    group: 'Quick Actions',\n    href: '/residents/create',\n    keywords: ['register', 'new', 'create', 'add resident'],\n    shortcut: ['⌘', 'N'],\n    data: { href: '/residents/create' },\n    score: 1.0,\n    type: 'action',\n  },\n  {\n    id: 'action-create-household',\n    title: 'Create Household',\n    subtitle: 'Add a new household record',\n    icon: Icons.Building,\n    group: 'Quick Actions',\n    href: '/households/create',\n    keywords: ['new', 'family', 'create', 'household'],\n    shortcut: ['⌘', 'Shift', 'H'],\n    data: { href: '/households/create' },\n    score: 1.0,\n    type: 'action',\n  },\n  {\n    id: 'action-rbi-form',\n    title: 'RBI Registration Form',\n    subtitle: 'Fill out resident basic information form',\n    icon: Icons.ClipboardList,\n    group: 'Quick Actions',\n    href: '/reports/records-of-barangay-inhabitants-by-household',\n    keywords: ['rbi', 'form', 'registration', 'basic information'],\n    shortcut: ['⌘', 'R'],\n    data: { href: '/reports/records-of-barangay-inhabitants-by-household' },\n    score: 1.0,\n    type: 'action',\n  },\n\n  // Search Group\n  {\n    id: 'search-residents',\n    title: 'Search Residents',\n    subtitle: 'Find residents by name or ID',\n    icon: Icons.Search,\n    group: 'Search',\n    href: '/residents?focus=search',\n    keywords: ['find', 'lookup', 'resident search'],\n    data: { href: '/residents?focus=search' },\n    score: 1.0,\n    type: 'action',\n  },\n  {\n    id: 'search-households',\n    title: 'Search Households',\n    subtitle: 'Find households by address or code',\n    icon: Icons.Search,\n    group: 'Search',\n    href: '/households?focus=search',\n    keywords: ['find', 'lookup', 'household search', 'address'],\n    data: { href: '/households?focus=search' },\n    score: 1.0,\n    type: 'action',\n  },\n  {\n    id: 'search-seniors',\n    title: 'Find Senior Citizens',\n    subtitle: 'Show all senior citizens (60+)',\n    icon: Icons.UserGroup,\n    group: 'Search',\n    href: '/residents?filter=seniors',\n    keywords: ['elderly', 'senior', '60+', 'seniors'],\n    data: { href: '/residents?filter=seniors' },\n    score: 1.0,\n    type: 'action',\n  },\n  {\n    id: 'search-pwd',\n    title: 'Find PWDs',\n    subtitle: 'Show persons with disabilities',\n    icon: Icons.Heart,\n    group: 'Search',\n    href: '/residents?filter=pwd',\n    keywords: ['disabled', 'pwd', 'persons with disabilities'],\n    data: { href: '/residents?filter=pwd' },\n    score: 1.0,\n    type: 'action',\n  },\n  {\n    id: 'search-solo-parents',\n    title: 'Find Solo Parents',\n    subtitle: 'Show registered solo parents',\n    icon: Icons.Users,\n    group: 'Search',\n    href: '/residents?filter=solo-parents',\n    keywords: ['single', 'solo', 'parent', 'single parent'],\n    data: { href: '/residents?filter=solo-parents' },\n    score: 1.0,\n    type: 'action',\n  },\n\n  // Reports & Data Group\n  {\n    id: 'report-population',\n    title: 'Population Report',\n    subtitle: 'Generate demographic statistics',\n    icon: Icons.Chart,\n    group: 'Reports',\n    href: '/reports/population',\n    keywords: ['demographics', 'population', 'statistics'],\n    data: { href: '/reports/population' },\n    score: 1.0,\n    type: 'action',\n  },\n  {\n    id: 'report-households-summary',\n    title: 'Household Summary',\n    subtitle: 'Overview of all households',\n    icon: Icons.Building,\n    group: 'Reports',\n    href: '/reports/households',\n    keywords: ['household', 'summary', 'families'],\n    data: { href: '/reports/households' },\n    score: 1.0,\n    type: 'action',\n  },\n  {\n    id: 'export-residents',\n    title: 'Export Resident Data',\n    subtitle: 'Download resident information as CSV',\n    icon: Icons.Download,\n    group: 'Reports',\n    keywords: ['download', 'csv', 'export', 'residents'],\n    onClick: () => {\n      // This would trigger the export functionality\n      console.log('Exporting resident data...');\n    },\n    data: { action: 'export-residents' },\n    score: 1.0,\n    type: 'action',\n  },\n  {\n    id: 'export-households',\n    title: 'Export Household Data',\n    subtitle: 'Download household information as CSV',\n    icon: Icons.Download,\n    group: 'Reports',\n    keywords: ['download', 'csv', 'export', 'households'],\n    onClick: () => {\n      console.log('Exporting household data...');\n    },\n    data: { action: 'export-households' },\n    score: 1.0,\n    type: 'action',\n  },\n\n  // Certificates Group\n  {\n    id: 'cert-barangay-clearance',\n    title: 'Barangay Clearance',\n    subtitle: 'Issue barangay clearance certificate',\n    icon: Icons.Certificate,\n    group: 'Certificates',\n    href: '/certification?type=clearance',\n    keywords: ['clearance', 'certificate', 'barangay clearance'],\n    data: { href: '/certification?type=clearance' },\n    score: 1.0,\n    type: 'action',\n  },\n  {\n    id: 'cert-residency',\n    title: 'Certificate of Residency',\n    subtitle: 'Issue residency certificate',\n    icon: Icons.FileText,\n    group: 'Certificates',\n    href: '/certification?type=residency',\n    keywords: ['residency', 'certificate', 'proof of residence'],\n    data: { href: '/certification?type=residency' },\n    score: 1.0,\n    type: 'action',\n  },\n  {\n    id: 'cert-indigency',\n    title: 'Certificate of Indigency',\n    subtitle: 'Issue indigency certificate',\n    icon: Icons.Shield,\n    group: 'Certificates',\n    href: '/certification?type=indigency',\n    keywords: ['indigency', 'certificate', 'low income'],\n    data: { href: '/certification?type=indigency' },\n    score: 1.0,\n    type: 'action',\n  },\n\n  // Admin Functions Group\n  {\n    id: 'admin-user-management',\n    title: 'User Management',\n    subtitle: 'Manage system users and permissions',\n    icon: Icons.UserGroup,\n    group: 'Administration',\n    href: '/admin/users',\n    keywords: ['users', 'admin', 'permissions', 'access'],\n    data: { href: '/admin/users' },\n    score: 1.0,\n    type: 'action',\n  },\n  {\n    id: 'admin-backup',\n    title: 'Backup Data',\n    subtitle: 'Create system backup',\n    icon: Icons.Upload,\n    group: 'Administration',\n    keywords: ['backup', 'export', 'save', 'archive'],\n    onClick: () => {\n      console.log('Initiating backup...');\n    },\n    data: { action: 'backup' },\n    score: 1.0,\n    type: 'action',\n  },\n  {\n    id: 'admin-notifications',\n    title: 'System Notifications',\n    subtitle: 'View system alerts and notifications',\n    icon: Icons.Bell,\n    group: 'Administration',\n    href: '/notifications',\n    keywords: ['alerts', 'notifications', 'messages', 'system'],\n    data: { href: '/notifications' },\n    score: 1.0,\n    type: 'action',\n  },\n\n  // Help & Information Group\n  {\n    id: 'help-guide',\n    title: 'User Guide',\n    subtitle: 'Learn how to use the system',\n    icon: Icons.FileText,\n    group: 'Help',\n    href: '/help',\n    keywords: ['help', 'guide', 'tutorial', 'documentation'],\n    shortcut: ['⌘', '?'],\n    data: { href: '/help' },\n    score: 1.0,\n    type: 'action',\n  },\n  {\n    id: 'help-barangay-info',\n    title: 'Barangay Information',\n    subtitle: 'View barangay details and officials',\n    icon: Icons.Globe,\n    group: 'Help',\n    href: '/help?section=barangay',\n    keywords: ['barangay', 'information', 'officials', 'contact'],\n    data: { href: '/help?section=barangay' },\n    score: 1.0,\n    type: 'action',\n  },\n];\n\n// Function to get recent items (this would typically come from localStorage or an API)\nexport const getRecentItems = (): CommandMenuSearchResult[] => {\n  // This is mock data - in a real app, you'd load this from storage\n  return [\n    {\n      id: 'recent-juan-dela-cruz',\n      title: 'Juan Dela Cruz',\n      subtitle: 'Resident ID: 2024-001',\n      avatar: {\n        src: '/api/placeholder/100/100',\n        alt: 'Juan Dela Cruz',\n        fallback: 'JD',\n      },\n      group: 'Recent',\n      href: '/residents/1',\n      recent: true,\n      keywords: ['juan', 'dela', 'cruz'],\n      data: { href: '/residents/1', residentId: '2024-001' },\n      score: 1.0,\n      type: 'resident',\n    },\n    {\n      id: 'recent-maria-santos',\n      title: 'Maria Santos',\n      subtitle: 'Resident ID: 2024-002',\n      avatar: {\n        src: '/api/placeholder/100/100',\n        alt: 'Maria Santos',\n        fallback: 'MS',\n      },\n      group: 'Recent',\n      href: '/residents/2',\n      recent: true,\n      keywords: ['maria', 'santos'],\n      data: { href: '/residents/2', residentId: '2024-002' },\n      score: 1.0,\n      type: 'resident',\n    },\n    {\n      id: 'recent-household-123',\n      title: 'Household #123',\n      subtitle: '123 Main Street, Barangay Centro',\n      icon: Icons.Building,\n      group: 'Recent',\n      href: '/households/123',\n      recent: true,\n      keywords: ['household', '123', 'main', 'street'],\n      data: { href: '/households/123', householdId: '123' },\n      score: 1.0,\n      type: 'household',\n    },\n  ];\n};\n\n// Combine all items\nexport const getAllCommandMenuItems = (): CommandMenuSearchResult[] => {\n  return [...getRecentItems(), ...getCommandMenuItems()];\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/config/dev-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/config/env-config.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":184,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":184,"endColumn":14,"suggestions":[{"fix":{"range":[5243,5310],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":185,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":185,"endColumn":14,"suggestions":[{"fix":{"range":[5313,5382],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":186,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":186,"endColumn":14,"suggestions":[{"fix":{"range":[5385,5436],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":187,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":187,"endColumn":14,"suggestions":[{"fix":{"range":[5439,5484],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":188,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":188,"endColumn":14,"suggestions":[{"fix":{"range":[5487,5546],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Environment Configuration and Detection Utility\n * Provides environment-aware configuration for quality checks and tool settings\n */\n\nexport type Environment = 'development' | 'ci' | 'staging' | 'production';\n\nexport interface EnvironmentConfig {\n  environment: Environment;\n  isCI: boolean;\n  isProduction: boolean;\n  isStaging: boolean;\n  isDevelopment: boolean;\n  qualityTier: 1 | 2 | 3 | 4;\n}\n\n/**\n * Detect current environment based on environment variables\n */\nexport function detectEnvironment(): Environment {\n  // CI/CD Environment\n  if (process.env.CI === 'true' || process.env.GITHUB_ACTIONS === 'true') {\n    return 'ci';\n  }\n\n  // Vercel Production\n  if (process.env.VERCEL_ENV === 'production') {\n    return 'production';\n  }\n\n  // Vercel Preview/Staging\n  if (process.env.VERCEL_ENV === 'preview') {\n    return 'staging';\n  }\n\n  // Local Development (default)\n  return 'development';\n}\n\n/**\n * Get environment configuration with quality tier mapping\n */\nexport function getEnvironmentConfig(): EnvironmentConfig {\n  const environment = detectEnvironment();\n\n  const config: EnvironmentConfig = {\n    environment,\n    isCI: environment === 'ci',\n    isProduction: environment === 'production',\n    isStaging: environment === 'staging',\n    isDevelopment: environment === 'development',\n    qualityTier: getQualityTier(environment),\n  };\n\n  return config;\n}\n\n/**\n * Map environment to quality check tier\n */\nfunction getQualityTier(env: Environment): 1 | 2 | 3 | 4 {\n  switch (env) {\n    case 'development':\n      return 1; // Fast & Essential\n    case 'ci':\n      return 2; // Comprehensive\n    case 'staging':\n      return 3; // Integration\n    case 'production':\n      return 4; // Critical\n  }\n}\n\n/**\n * Quality check configuration per tier\n */\nexport const QUALITY_TIERS = {\n  1: {\n    // Development - Fast & Essential\n    name: 'Development',\n    description: 'Fast checks for immediate feedback',\n    checks: ['lint:fast', 'type-check:fast', 'test:fast'],\n    timeout: 30, // seconds\n    parallel: true,\n    failFast: false,\n  },\n  2: {\n    // CI/CD - Comprehensive\n    name: 'CI/CD',\n    description: 'Comprehensive validation for pull requests',\n    checks: ['lint', 'type-check', 'test:ci', 'security:scan', 'analyze:deps', 'bundle:check'],\n    timeout: 300, // 5 minutes\n    parallel: true,\n    failFast: true,\n  },\n  3: {\n    // Staging - Integration\n    name: 'Staging',\n    description: 'Integration testing and visual validation',\n    checks: ['test:e2e', 'test:visual', 'test:lighthouse', 'test:a11y'],\n    timeout: 600, // 10 minutes\n    parallel: false,\n    failFast: true,\n  },\n  4: {\n    // Production - Critical\n    name: 'Production',\n    description: 'Critical validation before release',\n    checks: ['security:audit', 'performance:benchmark', 'test:smoke', 'health:check'],\n    timeout: 900, // 15 minutes\n    parallel: false,\n    failFast: true,\n  },\n} as const;\n\n/**\n * Get quality checks for current environment\n */\nexport function getQualityChecks(): string[] {\n  const { qualityTier } = getEnvironmentConfig();\n  return [...QUALITY_TIERS[qualityTier].checks];\n}\n\n/**\n * Check if specific feature should be enabled in current environment\n */\nexport function shouldEnableFeature(feature: string): boolean {\n  const { environment } = getEnvironmentConfig();\n\n  const featureMap: Record<string, Environment[]> = {\n    'strict-linting': ['ci', 'staging', 'production'],\n    'visual-testing': ['ci', 'staging'],\n    'performance-monitoring': ['staging', 'production'],\n    'security-scanning': ['ci', 'staging', 'production'],\n    'coverage-enforcement': ['ci'],\n    'bundle-analysis': ['ci', 'staging', 'production'],\n    'accessibility-testing': ['ci', 'staging', 'production'],\n    'e2e-testing': ['staging', 'production'],\n  };\n\n  return featureMap[feature]?.includes(environment) ?? false;\n}\n\n/**\n * Get tool configuration based on environment\n */\nexport function getToolConfig(tool: string): Record<string, string | number | boolean> {\n  const { environment } = getEnvironmentConfig();\n\n  const toolConfigs: Record<\n    string,\n    Record<Environment, Record<string, string | number | boolean>>\n  > = {\n    eslint: {\n      development: { maxWarnings: -1, cache: true, format: 'compact' },\n      ci: { maxWarnings: 0, cache: false, format: 'json' },\n      staging: { maxWarnings: 0, cache: false, format: 'compact' },\n      production: { maxWarnings: 0, cache: false, format: 'compact' },\n    },\n    jest: {\n      development: { coverage: false, maxWorkers: '50%', silent: true },\n      ci: { coverage: true, maxWorkers: 2, ci: true },\n      staging: { coverage: true, maxWorkers: 1, verbose: true },\n      production: { coverage: false, maxWorkers: 1, testTimeout: 30000 },\n    },\n    typescript: {\n      development: { skipLibCheck: true, incremental: true },\n      ci: { skipLibCheck: false, incremental: false },\n      staging: { skipLibCheck: false, incremental: false },\n      production: { skipLibCheck: false, incremental: false },\n    },\n  };\n\n  return toolConfigs[tool]?.[environment] ?? {};\n}\n\n/**\n * Log current environment configuration\n */\nexport function logEnvironmentInfo(): void {\n  const config = getEnvironmentConfig();\n  const tier = QUALITY_TIERS[config.qualityTier];\n\n  console.log(`🔧 Environment: ${config.environment.toUpperCase()}`);\n  console.log(`📊 Quality Tier: ${config.qualityTier} (${tier.name})`);\n  console.log(`✅ Checks: ${tier.checks.join(', ')}`);\n  console.log(`⏱️  Timeout: ${tier.timeout}s`);\n  console.log(`⚡ Parallel: ${tier.parallel ? 'Yes' : 'No'}`);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/config/env-validation.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":83,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":83,"endColumn":14,"suggestions":[{"fix":{"range":[2827,2874],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Environment Variable Validation\n * Ensure all required environment variables are properly configured\n */\n\nimport { z } from 'zod';\n\n// Define schema for all environment variables\nconst envSchema = z.object({\n  // Node environment\n  NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),\n\n  // Supabase configuration\n  NEXT_PUBLIC_SUPABASE_URL: z.string().url('Invalid Supabase URL'),\n  NEXT_PUBLIC_SUPABASE_ANON_KEY: z.string().min(1, 'Supabase anon key required'),\n  SUPABASE_SERVICE_ROLE_KEY: z.string().min(1, 'Supabase service role key required'),\n\n  // Webhook secrets\n  SUPABASE_WEBHOOK_SECRET: z\n    .string()\n    .min(16, 'Webhook secret must be at least 16 characters')\n    .refine(val => val !== 'dev-webhook-secret', 'Use a secure webhook secret in production'),\n\n  // Security secrets\n  CSRF_SECRET: z.string().min(32, 'CSRF secret must be at least 32 characters'),\n\n  // Application configuration\n  NEXT_PUBLIC_APP_URL: z.string().url('Invalid app URL'),\n  NEXT_PUBLIC_APP_ENV: z.string().optional(),\n  NEXT_PUBLIC_APP_NAME: z.string().optional(),\n  NEXT_PUBLIC_APP_VERSION: z.string().optional(),\n\n  // Feature flags\n  NEXT_PUBLIC_ENABLE_DEBUG: z.coerce.boolean().default(false),\n  NEXT_PUBLIC_ENABLE_STORYBOOK: z.coerce.boolean().default(false),\n  NEXT_PUBLIC_ENABLE_MOCK_DATA: z.coerce.boolean().default(false),\n  NEXT_PUBLIC_RATE_LIMIT_ENABLED: z.coerce.boolean().default(true),\n\n  // API configuration\n  NEXT_PUBLIC_API_TIMEOUT: z.coerce.number().min(1000).default(30000),\n});\n\n// Production-specific validation\nconst productionEnvSchema = envSchema.extend({\n  // In production, these must not use default/development values\n  SUPABASE_WEBHOOK_SECRET: z\n    .string()\n    .min(32, 'Production webhook secret must be at least 32 characters')\n    .refine(val => !val.includes('dev'), 'Production webhook secret cannot contain \"dev\"'),\n\n  CSRF_SECRET: z.string().min(64, 'Production CSRF secret must be at least 64 characters'),\n\n  NEXT_PUBLIC_ENABLE_DEBUG: z.literal(false, {\n    message: 'Debug mode must be disabled in production',\n  }),\n\n  NEXT_PUBLIC_ENABLE_MOCK_DATA: z.literal(false, {\n    message: 'Mock data must be disabled in production',\n  }),\n});\n\nexport type Environment = z.infer<typeof envSchema>;\nexport type ProductionEnvironment = z.infer<typeof productionEnvSchema>;\n\n/**\n * Validate environment variables\n */\nexport function validateEnvironment(): {\n  success: boolean;\n  data?: Environment;\n  errors?: z.ZodError;\n} {\n  const isProduction = process.env.NODE_ENV === 'production';\n  const schema = isProduction ? productionEnvSchema : envSchema;\n\n  const result = schema.safeParse(process.env);\n\n  if (!result.success) {\n    console.error('❌ Environment validation failed:', result.error.format());\n    return { success: false, errors: result.error };\n  }\n\n  console.log('✅ Environment validation passed');\n  return { success: true, data: result.data };\n}\n\n/**\n * Get validated environment variables\n */\nexport function getEnvironment(): Environment {\n  const result = validateEnvironment();\n\n  if (!result.success || !result.data) {\n    throw new Error('Environment validation failed. Check your environment variables.');\n  }\n\n  return result.data;\n}\n\n/**\n * Check for common security issues in environment configuration\n */\nexport function auditEnvironmentSecurity(): {\n  passed: boolean;\n  issues: Array<{ severity: 'critical' | 'high' | 'medium' | 'low'; message: string }>;\n} {\n  const issues: Array<{ severity: 'critical' | 'high' | 'medium' | 'low'; message: string }> = [];\n\n  // Check for URL protocols\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n  if (supabaseUrl && !supabaseUrl.startsWith('https://')) {\n    issues.push({\n      severity: process.env.NODE_ENV === 'production' ? 'critical' : 'medium',\n      message: 'Supabase URL should use HTTPS',\n    });\n  }\n\n  const appUrl = process.env.NEXT_PUBLIC_APP_URL;\n  if (appUrl && !appUrl.startsWith('https://') && process.env.NODE_ENV === 'production') {\n    issues.push({\n      severity: 'critical',\n      message: 'App URL must use HTTPS in production',\n    });\n  }\n\n  // Check for key lengths\n  const webhookSecret = process.env.SUPABASE_WEBHOOK_SECRET;\n  if (webhookSecret && webhookSecret.length < 32) {\n    issues.push({\n      severity: 'high',\n      message: 'Webhook secret should be at least 32 characters',\n    });\n  }\n\n  // Check for debug flags in production\n  if (process.env.NODE_ENV === 'production') {\n    if (process.env.NEXT_PUBLIC_ENABLE_DEBUG === 'true') {\n      issues.push({\n        severity: 'high',\n        message: 'Debug mode should be disabled in production',\n      });\n    }\n\n    if (process.env.NEXT_PUBLIC_ENABLE_MOCK_DATA === 'true') {\n      issues.push({\n        severity: 'medium',\n        message: 'Mock data should be disabled in production',\n      });\n    }\n  }\n\n  return {\n    passed: issues.filter(i => i.severity === 'critical' || i.severity === 'high').length === 0,\n    issues,\n  };\n}\n\n/**\n * Initialize environment validation on module load\n */\nif (typeof window === 'undefined') {\n  // Only run on server side\n  const result = validateEnvironment();\n  if (!result.success && process.env.NODE_ENV !== 'test') {\n    console.error('🚨 Environment validation failed! Application may not function correctly.');\n\n    // In production, exit if critical environment validation fails\n    if (process.env.NODE_ENV === 'production') {\n      process.exit(1);\n    }\n  }\n\n  // Run security audit\n  const auditResult = auditEnvironmentSecurity();\n  if (!auditResult.passed) {\n    console.warn('⚠️  Environment security audit found issues:', auditResult.issues);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/config/environment.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":136,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":136,"endColumn":20,"suggestions":[{"fix":{"range":[3708,3797],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":141,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":141,"endColumn":19,"suggestions":[{"fix":{"range":[3856,3946],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Environment Detection and Configuration\n * Centralized environment management for the RBI System\n */\n\nexport type Environment = 'development' | 'staging' | 'production' | 'test';\n\n/**\n * Get current environment\n */\nexport const getEnvironment = (): Environment => {\n  const env = process.env.NEXT_PUBLIC_APP_ENV as Environment;\n\n  // Fallback logic\n  if (!env) {\n    if (process.env.NODE_ENV === 'test') return 'test';\n    if (process.env.NODE_ENV === 'production') return 'production';\n    return 'development';\n  }\n\n  return env;\n};\n\n/**\n * Environment checks\n */\nexport const isDevelopment = () => getEnvironment() === 'development';\nexport const isStaging = () => getEnvironment() === 'staging';\nexport const isProduction = () => getEnvironment() === 'production';\nexport const isTest = () => getEnvironment() === 'test';\n\n/**\n * Check if we're in a production-like environment\n */\nexport const isProductionLike = () => isProduction() || isStaging();\n\n/**\n * Check if debug features should be enabled\n */\nexport const isDebugEnabled = () => {\n  return process.env.NEXT_PUBLIC_ENABLE_DEBUG === 'true' || isDevelopment();\n};\n\n/**\n * Get environment-specific configuration\n */\nexport const getEnvironmentConfig = () => {\n  const env = getEnvironment();\n\n  return {\n    environment: env,\n    appName: process.env.NEXT_PUBLIC_APP_NAME || 'RBI System',\n    appVersion: process.env.NEXT_PUBLIC_APP_VERSION || '1.0.0',\n\n    // Feature flags\n    features: {\n      debug: isDebugEnabled(),\n      storybook: process.env.NEXT_PUBLIC_ENABLE_STORYBOOK === 'true',\n      mockData: process.env.NEXT_PUBLIC_ENABLE_MOCK_DATA === 'true',\n    },\n\n    // API settings\n    api: {\n      timeout: parseInt(process.env.NEXT_PUBLIC_API_TIMEOUT || '10000'),\n      rateLimitEnabled: process.env.NEXT_PUBLIC_RATE_LIMIT_ENABLED === 'true',\n    },\n\n    // Database settings\n    database: {\n      enableRealtime: isProductionLike(),\n      enableSchemaValidation: !isProduction(),\n    },\n  };\n};\n\n/**\n * Get Supabase configuration for current environment\n */\nexport const getSupabaseConfig = () => {\n  const config = getEnvironmentConfig();\n\n  return {\n    url: process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co',\n    anonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key',\n\n    // Environment-specific Supabase options\n    options: {\n      auth: {\n        autoRefreshToken: true,\n        persistSession: true,\n        detectSessionInUrl: true,\n        storage: typeof window !== 'undefined' ? window.localStorage : undefined,\n        flowType: 'pkce' as const,\n        debug: isDebugEnabled(),\n        // Force session refresh on page load\n        storageKey: `sb-${process.env.NEXT_PUBLIC_SUPABASE_URL?.split('//')[1]?.split('.')[0] || 'default'}-auth-token`,\n      },\n\n      db: {\n        schema: 'public',\n      },\n\n      // Realtime settings for production\n      realtime: config.database.enableRealtime\n        ? {\n            params: {\n              eventsPerSecond: 10,\n            },\n          }\n        : undefined,\n\n      global: {\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n          'Cache-Control': isProduction() ? 'public, max-age=3600' : 'no-cache',\n          Pragma: isProduction() ? 'cache' : 'no-cache',\n          'X-Environment': config.environment,\n          'X-Client-Info': 'rbi-system-client',\n        },\n      },\n    },\n  };\n};\n\n/**\n * Environment-specific logging\n */\nexport const createLogger = (module: string) => {\n  const config = getEnvironmentConfig();\n  const timestamp = () => new Date().toISOString();\n\n  return {\n    debug: (...args: unknown[]) => {\n      if (config.features.debug) {\n        console.log(`[${timestamp()}][${config.environment.toUpperCase()}][${module}]`, ...args);\n      }\n    },\n\n    info: (...args: unknown[]) => {\n      console.info(`[${timestamp()}][${config.environment.toUpperCase()}][${module}]`, ...args);\n    },\n\n    warn: (...args: unknown[]) => {\n      console.warn(`[${timestamp()}][${config.environment.toUpperCase()}][${module}]`, ...args);\n    },\n\n    error: (...args: unknown[]) => {\n      console.error(`[${timestamp()}][${config.environment.toUpperCase()}][${module}]`, ...args);\n    },\n  };\n};\n\n/**\n * Enhanced environment validation with production readiness checks\n */\nexport const validateEnvironment = () => {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  const config = getEnvironmentConfig();\n\n  // Core required variables for all environments\n  const requiredVars = [\n    { name: 'NEXT_PUBLIC_SUPABASE_URL', value: process.env.NEXT_PUBLIC_SUPABASE_URL },\n    { name: 'NEXT_PUBLIC_SUPABASE_ANON_KEY', value: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY },\n    { name: 'SUPABASE_SERVICE_ROLE_KEY', value: process.env.SUPABASE_SERVICE_ROLE_KEY },\n  ];\n\n  // Check required variables\n  requiredVars.forEach(({ name, value }) => {\n    if (!value || value.includes('placeholder') || value.trim() === '') {\n      errors.push(`${name} is required and must be properly configured`);\n    }\n  });\n\n  // Production-specific checks\n  if (isProduction()) {\n    const productionRequiredVars = [\n      { name: 'NEXTAUTH_SECRET', value: process.env.NEXTAUTH_SECRET },\n      { name: 'NEXT_PUBLIC_APP_URL', value: process.env.NEXT_PUBLIC_APP_URL },\n    ];\n\n    productionRequiredVars.forEach(({ name, value }) => {\n      if (!value || value.trim() === '') {\n        errors.push(`${name} is required for production environment`);\n      }\n    });\n\n    // Security checks for production\n    if (process.env.NODE_ENV !== 'production') {\n      warnings.push('NODE_ENV should be \"production\" in production environment');\n    }\n\n    // URL validation\n    if (process.env.NEXT_PUBLIC_SUPABASE_URL) {\n      try {\n        const url = new URL(process.env.NEXT_PUBLIC_SUPABASE_URL);\n        if (url.protocol !== 'https:') {\n          errors.push('SUPABASE_URL must use HTTPS in production');\n        }\n        if (!url.hostname.includes('supabase')) {\n          warnings.push('SUPABASE_URL does not appear to be a Supabase URL');\n        }\n      } catch {\n        errors.push('NEXT_PUBLIC_SUPABASE_URL is not a valid URL');\n      }\n    }\n\n    // Key length validation\n    if (\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY &&\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY.length < 100\n    ) {\n      warnings.push('SUPABASE_ANON_KEY appears to be too short');\n    }\n\n    if (\n      process.env.SUPABASE_SERVICE_ROLE_KEY &&\n      process.env.SUPABASE_SERVICE_ROLE_KEY.length < 100\n    ) {\n      warnings.push('SUPABASE_SERVICE_ROLE_KEY appears to be too short');\n    }\n\n    if (process.env.NEXTAUTH_SECRET && process.env.NEXTAUTH_SECRET.length < 32) {\n      errors.push('NEXTAUTH_SECRET must be at least 32 characters long');\n    }\n\n    // Optional but recommended for production\n    const recommendedVars = [\n      { name: 'SENTRY_DSN', purpose: 'Error monitoring' },\n      { name: 'REDIS_URL', purpose: 'Caching and sessions' },\n    ];\n\n    recommendedVars.forEach(({ name, purpose }) => {\n      if (!process.env[name]) {\n        warnings.push(`${name} is not configured - ${purpose} will be limited`);\n      }\n    });\n  }\n\n  // Development warnings\n  if (isDevelopment()) {\n    if (!process.env.NEXTAUTH_SECRET) {\n      warnings.push('NEXTAUTH_SECRET should be set even in development for consistent behavior');\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n    config,\n    environment: getEnvironment(),\n    checks: {\n      hasDatabase:\n        !!process.env.NEXT_PUBLIC_SUPABASE_URL &&\n        !process.env.NEXT_PUBLIC_SUPABASE_URL.includes('placeholder'),\n      hasAuth: !!process.env.NEXTAUTH_SECRET,\n      hasMonitoring: !!process.env.SENTRY_DSN,\n      hasCaching: !!process.env.REDIS_URL,\n      isSecure: isProduction()\n        ? (process.env.NEXT_PUBLIC_SUPABASE_URL?.startsWith('https://') ?? false)\n        : true,\n    },\n  };\n};\n\n/**\n * Runtime health check for production\n */\nexport const performRuntimeHealthCheck = async (): Promise<{\n  healthy: boolean;\n  checks: Record<string, { status: 'pass' | 'fail' | 'warn'; message: string }>;\n}> => {\n  const checks: Record<string, { status: 'pass' | 'fail' | 'warn'; message: string }> = {};\n\n  // Environment validation\n  const envValidation = validateEnvironment();\n  checks.environment = {\n    status: envValidation.isValid ? 'pass' : 'fail',\n    message: envValidation.isValid\n      ? `Environment configured for ${envValidation.environment}`\n      : `Environment issues: ${envValidation.errors.join(', ')}`,\n  };\n\n  // Database connectivity (if we can test it)\n  if (\n    typeof window === 'undefined' &&\n    process.env.NEXT_PUBLIC_SUPABASE_URL &&\n    process.env.SUPABASE_SERVICE_ROLE_KEY\n  ) {\n    try {\n      // Simple connectivity check\n      const response = await fetch(`${process.env.NEXT_PUBLIC_SUPABASE_URL}/rest/v1/`, {\n        headers: {\n          apikey: process.env.SUPABASE_SERVICE_ROLE_KEY,\n          Authorization: `Bearer ${process.env.SUPABASE_SERVICE_ROLE_KEY}`,\n        },\n      });\n\n      checks.database = {\n        status: response.ok ? 'pass' : 'fail',\n        message: response.ok\n          ? 'Database connection successful'\n          : `Database connection failed: ${response.status}`,\n      };\n    } catch (error) {\n      checks.database = {\n        status: 'fail',\n        message: `Database connection error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      };\n    }\n  }\n\n  // Memory usage check\n  if (typeof process !== 'undefined' && process.memoryUsage) {\n    const memory = process.memoryUsage();\n    const heapUsedMB = memory.heapUsed / 1024 / 1024;\n    const heapTotalMB = memory.heapTotal / 1024 / 1024;\n    const usagePercent = (heapUsedMB / heapTotalMB) * 100;\n\n    checks.memory = {\n      status: usagePercent > 90 ? 'fail' : usagePercent > 70 ? 'warn' : 'pass',\n      message: `Heap usage: ${heapUsedMB.toFixed(1)}MB / ${heapTotalMB.toFixed(1)}MB (${usagePercent.toFixed(1)}%)`,\n    };\n  }\n\n  const healthy = Object.values(checks).every(check => check.status !== 'fail');\n\n  return {\n    healthy,\n    checks,\n  };\n};\n\n/**\n * Log environment status on startup\n */\nexport const logEnvironmentStatus = () => {\n  const validation = validateEnvironment();\n  const logger = createLogger('Environment');\n\n  if (validation.isValid) {\n    logger.info(`✅ Environment validation passed for ${validation.environment}`);\n\n    if (validation.warnings.length > 0) {\n      logger.warn('⚠️  Warnings:', validation.warnings);\n    }\n  } else {\n    logger.error('❌ Environment validation failed:', validation.errors);\n  }\n\n  if (isDevelopment()) {\n    logger.debug('Environment status:', {\n      valid: validation.isValid,\n      environment: validation.environment,\n      checks: validation.checks,\n    });\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/config/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/constants/chart-sizes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/constants/form-options.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/constants/generated-enums.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/constants/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/constants/resident-enums.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/constants/resident-form-defaults.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/core/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/data/client-factory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/data/database-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":166,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":166,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Database API Functions\n * High-level functions to interact with the complete PSGC geographic data\n */\n\nimport type {\n  PSGCRegion,\n  PSGCProvince,\n  PSGCCityMunicipality,\n  PSGCBarangay,\n  AddressHierarchyQueryResult as AddressHierarchy,\n} from '../../types/database';\nimport { supabase } from '../supabase';\n\n// Import geographic types from centralized location\n\n// Create simplified types for database query results\nexport type Region = Pick<PSGCRegion, 'code' | 'name'>;\nexport type Province = Pick<PSGCProvince, 'code' | 'name' | 'region_code'>;\nexport type City = Pick<\n  PSGCCityMunicipality,\n  'code' | 'name' | 'type' | 'province_code' | 'is_independent'\n>;\nexport type Barangay = Pick<PSGCBarangay, 'code' | 'name' | 'city_municipality_code'>;\n\n// Re-export address hierarchy type\nexport type { AddressHierarchyQueryResult as AddressHierarchy } from '../../types/database';\n\n/**\n * Test database connection and get basic stats\n */\nexport async function testDatabaseConnection() {\n  try {\n    // Test connection with basic counts\n    const [regionsResult, provincesResult, citiesResult, barangaysResult] = await Promise.all([\n      supabase.from('psgc_regions').select('*', { count: 'exact', head: true }),\n      supabase.from('psgc_provinces').select('*', { count: 'exact', head: true }),\n      supabase.from('psgc_cities_municipalities').select('*', { count: 'exact', head: true }),\n      supabase.from('psgc_barangays').select('*', { count: 'exact', head: true }),\n    ]);\n\n    return {\n      success:\n        !regionsResult.error &&\n        !provincesResult.error &&\n        !citiesResult.error &&\n        !barangaysResult.error,\n      data: {\n        regions: regionsResult.count || 0,\n        provinces: provincesResult.count || 0,\n        cities: citiesResult.count || 0,\n        barangays: barangaysResult.count || 0,\n      },\n      errors: [\n        regionsResult.error,\n        provincesResult.error,\n        citiesResult.error,\n        barangaysResult.error,\n      ].filter(Boolean),\n    };\n  } catch (error) {\n    return {\n      success: false,\n      data: null,\n      error: error instanceof Error ? error.message : 'Connection failed',\n    };\n  }\n}\n\n/**\n * Get all regions (17 regions)\n */\nexport async function getRegions(): Promise<Region[]> {\n  const { data, error } = await supabase.from('psgc_regions').select('code, name').order('name');\n\n  if (error) {\n    console.error('Error fetching regions:', error);\n    return [];\n  }\n\n  return data || [];\n}\n\n/**\n * Get provinces by region\n */\nexport async function getProvincesByRegion(regionCode: string): Promise<Province[]> {\n  const { data, error } = await supabase\n    .from('psgc_provinces')\n    .select('code, name, region_code')\n    .eq('region_code', regionCode)\n    .order('name');\n\n  if (error) {\n    console.error('Error fetching provinces:', error);\n    return [];\n  }\n\n  return data || [];\n}\n\n/**\n * Get cities by province (handles independent cities)\n */\nexport async function getCitiesByProvince(provinceCode: string | null): Promise<City[]> {\n  let query = supabase\n    .from('psgc_cities_municipalities')\n    .select('code, name, type, province_code, is_independent');\n\n  if (provinceCode === null) {\n    // Get independent cities (no province)\n    query = query.is('province_code', null).eq('is_independent', true);\n  } else {\n    // Get cities in specific province\n    query = query.eq('province_code', provinceCode);\n  }\n\n  const { data, error } = await query.order('name');\n\n  if (error) {\n    console.error('Error fetching cities:', error);\n    return [];\n  }\n\n  return data || [];\n}\n\n/**\n * Get barangays by city\n */\nexport async function getBarangaysByCity(cityCode: string): Promise<Barangay[]> {\n  const { data, error } = await supabase\n    .from('psgc_barangays')\n    .select('code, name, city_municipality_code')\n    .eq('city_municipality_code', cityCode)\n    .order('name');\n\n  if (error) {\n    console.error('Error fetching barangays:', error);\n    return [];\n  }\n\n  return data || [];\n}\n\n/**\n * Search addresses using the complete hierarchy view\n */\nexport async function searchAddresses(\n  searchTerm: string,\n  limit: number = 50\n): Promise<AddressHierarchy[]> {\n  try {\n    // Use API endpoint to avoid complex nested queries\n    const response = await fetch(\n      `/api/psgc/search?q=${encodeURIComponent(searchTerm)}&levels=barangay&limit=${limit}`\n    );\n\n    if (!response.ok) {\n      console.error('Error searching addresses:', response.status);\n      return [];\n    }\n\n    const result = await response.json();\n    const data = result.data || [];\n    const error = result.error;\n\n    // Transform the flattened API response to match AddressHierarchy interface\n    const results: AddressHierarchy[] = (data || []).map(\n      (item: {\n        region_code?: string;\n        region_name?: string;\n        province_code?: string;\n        province_name?: string;\n        city_code?: string;\n        city_name?: string;\n        city_type?: string;\n        barangay_code?: string;\n        barangay_name?: string;\n        code?: string;\n        name?: string;\n        full_address?: string;\n      }) => {\n        return {\n          region_code: item.region_code || '',\n          region_name: item.region_name || '',\n          province_code: item.province_code || null,\n          province_name: item.province_name || null,\n          city_code: item.city_code || '',\n          city_municipality_code: item.city_code || '',\n          city_name: item.city_name || '',\n          city_type: item.city_type || '',\n          barangay_code: item.code || item.barangay_code || '',\n          barangay_name: item.name || item.barangay_name || '',\n          full_address:\n            item.full_address ||\n            [item.name || item.barangay_name, item.city_name, item.province_name, item.region_name]\n              .filter(Boolean)\n              .join(', '),\n        };\n      }\n    );\n\n    return results;\n  } catch (error) {\n    console.error('Error searching addresses:', error);\n    return [];\n  }\n}\n\n/**\n * Get complete address hierarchy for a specific barangay\n * Uses separate queries instead of JOINs due to removed foreign key constraints\n */\nexport async function getCompleteAddress(barangayCode: string): Promise<AddressHierarchy | null> {\n  try {\n    // Validate barangay code\n    if (!barangayCode || typeof barangayCode !== 'string') {\n      console.error('Invalid barangay code provided:', barangayCode);\n      return null;\n    }\n\n    // Get complete address hierarchy from view with explicit column selection\n    const { data: addressData, error: addressError } = await supabase\n      .from('address_hierarchy')\n      .select(\n        'barangay_code, barangay_name, city_code, city_name, city_type, province_code, province_name, region_code, region_name, full_address'\n      )\n      .eq('barangay_code', barangayCode)\n      .single();\n\n    if (addressError || !addressData) {\n      console.warn('Barangay not found in database:', {\n        code: barangayCode,\n        error: addressError?.message || 'No data returned',\n      });\n      // Return null values for unknown barangays to avoid FK constraint violations\n      return {\n        region_code: '',\n        region_name: 'Unknown Region',\n        province_code: null,\n        province_name: null,\n        city_code: '',\n        city_municipality_code: '',\n        city_name: 'Unknown City',\n        city_type: 'unknown',\n        barangay_code: barangayCode,\n        barangay_name: 'Unknown Barangay',\n        full_address: `Barangay ${barangayCode}`,\n      };\n    }\n\n    // Return complete address hierarchy from view\n    return {\n      region_code: addressData.region_code,\n      region_name: addressData.region_name,\n      province_code: addressData.province_code,\n      province_name: addressData.province_name,\n      city_code: addressData.city_code,\n      city_municipality_code: addressData.city_code,\n      city_name: addressData.city_name,\n      city_type: addressData.city_type,\n      barangay_code: addressData.barangay_code,\n      barangay_name: addressData.barangay_name,\n      full_address: addressData.full_address,\n    };\n  } catch (error) {\n    console.error('Error fetching complete address:', error);\n    return null;\n  }\n}\n\n/**\n * Get Metro Manila cities (independent cities with districts)\n */\nexport async function getMetroManilaCities(): Promise<City[]> {\n  const { data, error } = await supabase\n    .from('psgc_cities_municipalities')\n    .select('code, name, type, province_code, is_independent')\n    .in('province_code', ['1374', '1375', '1376']) // Metro Manila districts\n    .order('name');\n\n  if (error) {\n    console.error('Error fetching Metro Manila cities:', error);\n    return [];\n  }\n\n  return data || [];\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/data/field-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":167,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4847,4850],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4847,4850],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * DATABASE FIELD DEFINITIONS\n * ==========================\n *\n * Single source of truth for all database field names\n * Ensures consistency between schema and API usage\n * All field names match exactly with database schema.sql\n */\n\n// auth_user_profiles table fields\nexport const AUTH_USER_PROFILES_FIELDS = {\n  id: 'id',\n  first_name: 'first_name',\n  middle_name: 'middle_name',\n  last_name: 'last_name',\n  email: 'email',\n  phone: 'phone',\n  role_id: 'role_id',\n  barangay_code: 'barangay_code',\n  city_municipality_code: 'city_municipality_code',\n  province_code: 'province_code',\n  region_code: 'region_code',\n  is_active: 'is_active',\n  last_login: 'last_login',\n  created_by: 'created_by',\n  updated_by: 'updated_by',\n  created_at: 'created_at',\n  updated_at: 'updated_at',\n} as const;\n\n// auth_roles table fields\nexport const AUTH_ROLES_FIELDS = {\n  id: 'id',\n  name: 'name',\n  description: 'description',\n  permissions: 'permissions',\n  created_at: 'created_at',\n  updated_at: 'updated_at',\n} as const;\n\n// residents table fields\nexport const RESIDENTS_FIELDS = {\n  id: 'id',\n  household_id: 'household_id',\n  first_name: 'first_name',\n  middle_name: 'middle_name',\n  last_name: 'last_name',\n  name_suffix: 'name_suffix',\n  sex: 'sex',\n  date_of_birth: 'date_of_birth',\n  civil_status: 'civil_status',\n  citizenship: 'citizenship',\n  occupation: 'occupation',\n  monthly_income: 'monthly_income',\n  contact_number: 'contact_number',\n  email: 'email',\n  education_level: 'education_level',\n  employment_status: 'employment_status',\n  religion: 'religion',\n  ethnicity: 'ethnicity',\n  blood_type: 'blood_type',\n  philhealth_number: 'philhealth_number',\n  sss_gsis_number: 'sss_gsis_number',\n  tin_number: 'tin_number',\n  voter_id_number: 'voter_id_number',\n  national_id_number: 'national_id_number',\n  birth_place: 'birth_place',\n  previous_address: 'previous_address',\n  years_of_residency: 'years_of_residency',\n  is_household_head: 'is_household_head',\n  created_by: 'created_by',\n  updated_by: 'updated_by',\n  created_at: 'created_at',\n  updated_at: 'updated_at',\n} as const;\n\n// households table fields\nexport const HOUSEHOLDS_FIELDS = {\n  id: 'id',\n  household_id: 'household_id',\n  household_head_id: 'household_head_id',\n  street: 'street',\n  house_number: 'house_number',\n  subdivision: 'subdivision',\n  building_name: 'building_name',\n  unit_floor_room_number: 'unit_floor_room_number',\n  barangay_code: 'barangay_code',\n  city_municipality_code: 'city_municipality_code',\n  province_code: 'province_code',\n  region_code: 'region_code',\n  postal_code: 'postal_code',\n  household_type: 'household_type',\n  tenure_status: 'tenure_status',\n  household_unit: 'household_unit',\n  monthly_income: 'monthly_income',\n  income_class: 'income_class',\n  contact_number: 'contact_number',\n  created_by: 'created_by',\n  updated_by: 'updated_by',\n  created_at: 'created_at',\n  updated_at: 'updated_at',\n} as const;\n\n// PSGC table fields\nexport const PSGC_REGIONS_FIELDS = {\n  code: 'code',\n  name: 'name',\n  is_active: 'is_active',\n  created_at: 'created_at',\n  updated_at: 'updated_at',\n} as const;\n\nexport const PSGC_PROVINCES_FIELDS = {\n  code: 'code',\n  name: 'name',\n  region_code: 'region_code',\n  is_active: 'is_active',\n  created_at: 'created_at',\n  updated_at: 'updated_at',\n} as const;\n\nexport const PSGC_CITIES_MUNICIPALITIES_FIELDS = {\n  code: 'code',\n  name: 'name',\n  province_code: 'province_code',\n  type: 'type',\n  is_active: 'is_active',\n  created_at: 'created_at',\n  updated_at: 'updated_at',\n} as const;\n\nexport const PSGC_BARANGAYS_FIELDS = {\n  code: 'code',\n  name: 'name',\n  city_municipality_code: 'city_municipality_code',\n  is_active: 'is_active',\n  created_at: 'created_at',\n  updated_at: 'updated_at',\n} as const;\n\n// Type helpers for strict typing\nexport type AuthUserProfileFields =\n  (typeof AUTH_USER_PROFILES_FIELDS)[keyof typeof AUTH_USER_PROFILES_FIELDS];\nexport type AuthRoleFields = (typeof AUTH_ROLES_FIELDS)[keyof typeof AUTH_ROLES_FIELDS];\nexport type ResidentFields = (typeof RESIDENTS_FIELDS)[keyof typeof RESIDENTS_FIELDS];\nexport type HouseholdFields = (typeof HOUSEHOLDS_FIELDS)[keyof typeof HOUSEHOLDS_FIELDS];\n\n// Helper function to build select queries with exact field names\nexport function buildSelectQuery<T extends Record<string, string>>(\n  fields: T,\n  selectedFields?: (keyof T)[]\n): string {\n  if (!selectedFields || selectedFields.length === 0) {\n    return '*';\n  }\n  return selectedFields.map(field => fields[field as string]).join(', ');\n}\n\n// Helper function to map form data to database fields\nexport function mapToDbFields<T extends Record<string, unknown>>(\n  data: Record<string, unknown>,\n  fieldMap: Record<string, string>\n): T {\n  const result = {} as T;\n  for (const [formKey, dbKey] of Object.entries(fieldMap)) {\n    if (data[formKey] !== undefined) {\n      (result as any)[dbKey] = data[formKey];\n    }\n  }\n  return result as T;\n}\n\n// Export all field definitions as a single object for easy import\nexport const DB_FIELDS = {\n  AUTH_USER_PROFILES: AUTH_USER_PROFILES_FIELDS,\n  AUTH_ROLES: AUTH_ROLES_FIELDS,\n  RESIDENTS: RESIDENTS_FIELDS,\n  HOUSEHOLDS: HOUSEHOLDS_FIELDS,\n  PSGC_REGIONS: PSGC_REGIONS_FIELDS,\n  PSGC_PROVINCES: PSGC_PROVINCES_FIELDS,\n  PSGC_CITIES_MUNICIPALITIES: PSGC_CITIES_MUNICIPALITIES_FIELDS,\n  PSGC_BARANGAYS: PSGC_BARANGAYS_FIELDS,\n} as const;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/data/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/data/offline-storage.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2696,2699],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2696,2699],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":81,"column":16,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":81,"endColumn":24,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[2837,2838],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3450,3453],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3450,3453],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":107,"column":16,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":107,"endColumn":24,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[3505,3506],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3700,3703],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3700,3703],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3942,3945],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3942,3945],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4216,4219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4216,4219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":132,"column":16,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":132,"endColumn":24,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[4309,4310],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":155,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4932,4935],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4932,4935],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":158,"column":16,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":158,"endColumn":24,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[4987,4988],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5184,5187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5184,5187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5426,5429],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5426,5429],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":180,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5696,5699],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5696,5699],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":183,"column":16,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":183,"endColumn":24,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[5764,5765],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6220,6223],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6220,6223],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":204,"column":16,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":204,"endColumn":24,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[6280,6281],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":225,"column":16,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":225,"endColumn":24,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[6939,6940],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":251,"column":18,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":251,"endColumn":26,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[7570,7571],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":275,"column":16,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":275,"endColumn":24,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[8352,8353],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":302,"column":16,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":302,"endColumn":24,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[9118,9119],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":324,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":324,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9796,9799],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9796,9799],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":327,"column":16,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":327,"endColumn":24,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[9889,9890],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":347,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":347,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10385,10388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10385,10388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":350,"column":16,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":350,"endColumn":24,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[10445,10446],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":365,"column":24,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":365,"endColumn":32,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[10950,10951],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":379,"column":16,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":379,"endColumn":24,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[11261,11262],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":384,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":384,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11464,11467],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11464,11467],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":407,"column":16,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":407,"endColumn":24,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[12132,12133],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":431,"column":16,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":431,"endColumn":24,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[12667,12668],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Offline Storage System using IndexedDB\n * Provides offline-first data storage for PWA functionality\n */\n\nimport type { OfflineStoredData as StoredData, PendingSyncItem } from '@/types/utilities';\n\nexport class OfflineStorage {\n  private db: IDBDatabase | null = null;\n  private readonly DB_NAME = 'CitizenlyOffline';\n  private readonly DB_VERSION = 1;\n\n  /**\n   * Initialize the IndexedDB database\n   */\n  async init(): Promise<IDBDatabase> {\n    if (typeof window === 'undefined') {\n      throw new Error('IndexedDB not available in server environment');\n    }\n\n    if (this.db) return this.db;\n\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n\n      request.onupgradeneeded = event => {\n        this.db = (event.target as IDBOpenDBRequest).result;\n\n        // Create object stores\n        if (!this.db.objectStoreNames.contains('residents')) {\n          const residentsStore = this.db.createObjectStore('residents', { keyPath: 'id' });\n          residentsStore.createIndex('barangay_code', 'barangay_code', { unique: false });\n          residentsStore.createIndex('timestamp', 'timestamp', { unique: false });\n        }\n\n        if (!this.db.objectStoreNames.contains('households')) {\n          const householdsStore = this.db.createObjectStore('households', { keyPath: 'code' });\n          householdsStore.createIndex('barangay_code', 'barangay_code', { unique: false });\n          householdsStore.createIndex('timestamp', 'timestamp', { unique: false });\n        }\n\n        if (!this.db.objectStoreNames.contains('dashboard_stats')) {\n          this.db.createObjectStore('dashboard_stats', { keyPath: 'id' });\n        }\n\n        if (!this.db.objectStoreNames.contains('pending_sync')) {\n          const syncStore = this.db.createObjectStore('pending_sync', {\n            keyPath: 'id',\n            autoIncrement: true,\n          });\n          syncStore.createIndex('type', 'type', { unique: false });\n          syncStore.createIndex('synced', 'synced', { unique: false });\n          syncStore.createIndex('timestamp', 'timestamp', { unique: false });\n        }\n\n        if (!this.db.objectStoreNames.contains('api_cache')) {\n          const cacheStore = this.db.createObjectStore('api_cache', { keyPath: 'url' });\n          cacheStore.createIndex('expiry', 'expiry', { unique: false });\n        }\n      };\n\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve(this.db);\n      };\n\n      request.onerror = () => {\n        reject(new Error(`Failed to open IndexedDB: ${request.error}`));\n      };\n    });\n  }\n\n  /**\n   * Store residents data offline\n   */\n  async storeResidents(residents: any[], barangayCode?: string): Promise<void> {\n    if (typeof window === 'undefined') return;\n\n    await this.init();\n\n    const tx = this.db!.transaction(['residents'], 'readwrite');\n    const store = tx.objectStore('residents');\n\n    const timestamp = Date.now();\n\n    for (const resident of residents) {\n      const storedResident = {\n        ...resident,\n        timestamp,\n        barangay_code: barangayCode || resident.barangay_code,\n      };\n      await store.put(storedResident);\n    }\n\n    await new Promise<void>((resolve, reject) => {\n      tx.oncomplete = () => resolve();\n      tx.onerror = () => reject(tx.error);\n    });\n  }\n\n  /**\n   * Get residents from offline storage\n   */\n  async getOfflineResidents(barangayCode?: string): Promise<any[]> {\n    await this.init();\n\n    const tx = this.db!.transaction(['residents'], 'readonly');\n    const store = tx.objectStore('residents');\n\n    if (barangayCode) {\n      const index = store.index('barangay_code');\n      return await new Promise<any[]>((resolve, reject) => {\n        const request = index.getAll(barangayCode);\n        request.onsuccess = () => resolve(request.result);\n        request.onerror = () => reject(request.error);\n      });\n    }\n\n    return await new Promise<any[]>((resolve, reject) => {\n      const request = store.getAll();\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  /**\n   * Store households data offline\n   */\n  async storeHouseholds(households: any[], barangayCode?: string): Promise<void> {\n    await this.init();\n\n    const tx = this.db!.transaction(['households'], 'readwrite');\n    const store = tx.objectStore('households');\n\n    const timestamp = Date.now();\n\n    for (const household of households) {\n      const storedHousehold = {\n        ...household,\n        timestamp,\n        barangay_code: barangayCode || household.barangay_code,\n      };\n      await store.put(storedHousehold);\n    }\n\n    await new Promise<void>((resolve, reject) => {\n      tx.oncomplete = () => resolve();\n      tx.onerror = () => reject(tx.error);\n    });\n  }\n\n  /**\n   * Get households from offline storage\n   */\n  async getOfflineHouseholds(barangayCode?: string): Promise<any[]> {\n    await this.init();\n\n    const tx = this.db!.transaction(['households'], 'readonly');\n    const store = tx.objectStore('households');\n\n    if (barangayCode) {\n      const index = store.index('barangay_code');\n      return await new Promise<any[]>((resolve, reject) => {\n        const request = index.getAll(barangayCode);\n        request.onsuccess = () => resolve(request.result);\n        request.onerror = () => reject(request.error);\n      });\n    }\n\n    return await new Promise<any[]>((resolve, reject) => {\n      const request = store.getAll();\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  /**\n   * Store dashboard statistics\n   */\n  async storeDashboardStats(stats: any): Promise<void> {\n    await this.init();\n\n    const tx = this.db!.transaction(['dashboard_stats'], 'readwrite');\n    const store = tx.objectStore('dashboard_stats');\n\n    await store.put({\n      id: 'current',\n      data: stats,\n      timestamp: Date.now(),\n    });\n\n    await new Promise<void>((resolve, reject) => {\n      tx.oncomplete = () => resolve();\n      tx.onerror = () => reject(tx.error);\n    });\n  }\n\n  /**\n   * Get dashboard statistics from offline storage\n   */\n  async getOfflineDashboardStats(): Promise<any | null> {\n    await this.init();\n\n    const tx = this.db!.transaction(['dashboard_stats'], 'readonly');\n    const store = tx.objectStore('dashboard_stats');\n\n    const result = await new Promise<StoredData | undefined>((resolve, reject) => {\n      const request = store.get('current');\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n    return result?.data || null;\n  }\n\n  /**\n   * Add item to sync queue for when online\n   */\n  async addToSyncQueue(\n    item: Omit<PendingSyncItem, 'id' | 'timestamp' | 'synced' | 'retryCount'>\n  ): Promise<void> {\n    if (typeof window === 'undefined') return;\n\n    await this.init();\n\n    const tx = this.db!.transaction(['pending_sync'], 'readwrite');\n    const store = tx.objectStore('pending_sync');\n\n    const syncItem: Omit<PendingSyncItem, 'id'> = {\n      ...item,\n      timestamp: Date.now(),\n      synced: false,\n      retryCount: 0,\n    };\n\n    await store.add(syncItem);\n    await new Promise<void>((resolve, reject) => {\n      tx.oncomplete = () => resolve();\n      tx.onerror = () => reject(tx.error);\n    });\n  }\n\n  /**\n   * Get pending sync items\n   */\n  async getPendingSyncItems(): Promise<PendingSyncItem[]> {\n    if (typeof window === 'undefined') return [];\n\n    try {\n      await this.init();\n\n      const tx = this.db!.transaction(['pending_sync'], 'readonly');\n      const store = tx.objectStore('pending_sync');\n\n      // Get all items and filter for non-synced ones\n      const allItems = await new Promise<PendingSyncItem[]>((resolve, reject) => {\n        const request = store.getAll();\n        request.onsuccess = () => resolve(request.result);\n        request.onerror = () => reject(request.error);\n      });\n      return allItems.filter((item: PendingSyncItem) => !item.synced);\n    } catch (error) {\n      console.warn('Failed to get pending sync items:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Mark sync item as completed\n   */\n  async markSyncItemCompleted(id: number): Promise<void> {\n    if (typeof window === 'undefined') return;\n\n    await this.init();\n\n    const tx = this.db!.transaction(['pending_sync'], 'readwrite');\n    const store = tx.objectStore('pending_sync');\n\n    const item = await new Promise<PendingSyncItem | undefined>((resolve, reject) => {\n      const request = store.get(id);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n    if (item) {\n      item.synced = true;\n      await store.put(item);\n    }\n\n    await new Promise<void>((resolve, reject) => {\n      tx.oncomplete = () => resolve();\n      tx.onerror = () => reject(tx.error);\n    });\n  }\n\n  /**\n   * Increment retry count for sync item\n   */\n  async incrementSyncRetry(id: number): Promise<void> {\n    if (typeof window === 'undefined') return;\n\n    await this.init();\n\n    const tx = this.db!.transaction(['pending_sync'], 'readwrite');\n    const store = tx.objectStore('pending_sync');\n\n    const item = await new Promise<PendingSyncItem | undefined>((resolve, reject) => {\n      const request = store.get(id);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n    if (item) {\n      item.retryCount = (item.retryCount || 0) + 1;\n      await store.put(item);\n    }\n\n    await new Promise<void>((resolve, reject) => {\n      tx.oncomplete = () => resolve();\n      tx.onerror = () => reject(tx.error);\n    });\n  }\n\n  /**\n   * Store API response in cache\n   */\n  async cacheApiResponse(url: string, data: any, ttlMinutes: number = 30): Promise<void> {\n    await this.init();\n\n    const tx = this.db!.transaction(['api_cache'], 'readwrite');\n    const store = tx.objectStore('api_cache');\n\n    const cacheItem = {\n      url,\n      data,\n      timestamp: Date.now(),\n      expiry: Date.now() + ttlMinutes * 60 * 1000,\n    };\n\n    await store.put(cacheItem);\n    await new Promise<void>((resolve, reject) => {\n      tx.oncomplete = () => resolve();\n      tx.onerror = () => reject(tx.error);\n    });\n  }\n\n  /**\n   * Get cached API response\n   */\n  async getCachedApiResponse(url: string): Promise<any | null> {\n    await this.init();\n\n    const tx = this.db!.transaction(['api_cache'], 'readonly');\n    const store = tx.objectStore('api_cache');\n\n    const result = await new Promise<StoredData | undefined>((resolve, reject) => {\n      const request = store.get(url);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n\n    if (result && result.expiry && result.expiry > Date.now()) {\n      return result.data;\n    }\n\n    // Remove expired cache\n    if (result) {\n      const deleteTx = this.db!.transaction(['api_cache'], 'readwrite');\n      const deleteStore = deleteTx.objectStore('api_cache');\n      await deleteStore.delete(url);\n    }\n\n    return null;\n  }\n\n  /**\n   * Clean up expired cache entries\n   */\n  async cleanupExpiredCache(): Promise<void> {\n    await this.init();\n\n    const tx = this.db!.transaction(['api_cache'], 'readwrite');\n    const store = tx.objectStore('api_cache');\n    const index = store.index('expiry');\n\n    const now = Date.now();\n    const expiredItems = await new Promise<any[]>((resolve, reject) => {\n      const request = index.getAll(IDBKeyRange.upperBound(now));\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n\n    for (const item of expiredItems) {\n      await store.delete(item.url);\n    }\n\n    await new Promise<void>((resolve, reject) => {\n      tx.oncomplete = () => resolve();\n      tx.onerror = () => reject(tx.error);\n    });\n  }\n\n  /**\n   * Clear all offline data\n   */\n  async clearAllData(): Promise<void> {\n    await this.init();\n\n    const storeNames = ['residents', 'households', 'dashboard_stats', 'pending_sync', 'api_cache'];\n    const tx = this.db!.transaction(storeNames, 'readwrite');\n\n    for (const storeName of storeNames) {\n      const store = tx.objectStore(storeName);\n      await store.clear();\n    }\n\n    await new Promise<void>((resolve, reject) => {\n      tx.oncomplete = () => resolve();\n      tx.onerror = () => reject(tx.error);\n    });\n  }\n\n  /**\n   * Get storage statistics\n   */\n  async getStorageStats(): Promise<{\n    residents: number;\n    households: number;\n    pendingSync: number;\n    cacheSize: number;\n  }> {\n    await this.init();\n\n    const tx = this.db!.transaction(\n      ['residents', 'households', 'pending_sync', 'api_cache'],\n      'readonly'\n    );\n\n    const [residentsCount, householdsCount, pendingSyncCount, cacheCount] = await Promise.all([\n      new Promise<number>((resolve, reject) => {\n        const request = tx.objectStore('residents').count();\n        request.onsuccess = () => resolve(request.result);\n        request.onerror = () => reject(request.error);\n      }),\n      new Promise<number>((resolve, reject) => {\n        const request = tx.objectStore('households').count();\n        request.onsuccess = () => resolve(request.result);\n        request.onerror = () => reject(request.error);\n      }),\n      new Promise<number>((resolve, reject) => {\n        const request = tx.objectStore('pending_sync').count();\n        request.onsuccess = () => resolve(request.result);\n        request.onerror = () => reject(request.error);\n      }),\n      new Promise<number>((resolve, reject) => {\n        const request = tx.objectStore('api_cache').count();\n        request.onsuccess = () => resolve(request.result);\n        request.onerror = () => reject(request.error);\n      }),\n    ]);\n\n    return {\n      residents: residentsCount,\n      households: householdsCount,\n      pendingSync: pendingSyncCount,\n      cacheSize: cacheCount,\n    };\n  }\n}\n\n// Export singleton instance\nexport const offlineStorage = new OfflineStorage();\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/data/query-cache.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CacheKeyPatterns' is defined but never used.","line":16,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CacheTags' is defined but never used.","line":16,"column":57,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":66}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Database Query Caching Layer\n *\n * @description In-memory caching for frequently accessed database queries to improve performance.\n * Reduces database load and improves response times for common operations.\n * Schema-aligned with consolidated cache types.\n *\n * @features:\n * - TTL-based cache expiration\n * - Cache invalidation by tags\n * - Memory usage monitoring\n * - Query deduplication\n */\n\nimport { logger } from '@/lib/logging';\nimport type { CacheEntry, CacheStats, CacheKeyPatterns, CacheTags } from '@/types/cache';\nimport { createInitialCacheStats } from '@/types/cache';\n\nclass QueryCache {\n  private cache = new Map<string, CacheEntry>();\n  private stats: CacheStats = createInitialCacheStats();\n  private maxSize: number = 1000; // Maximum number of entries\n  private defaultTTL: number = 5 * 60 * 1000; // 5 minutes\n\n  /**\n   * Get cached data\n   */\n  get<T>(key: string): T | null {\n    const entry = this.cache.get(key);\n\n    if (!entry) {\n      this.stats.misses++;\n      return null;\n    }\n\n    // Check if entry has expired\n    if (Date.now() - entry.timestamp > entry.ttl) {\n      this.cache.delete(key);\n      this.stats.misses++;\n      this.updateStats();\n      return null;\n    }\n\n    this.stats.hits++;\n    return entry.data as T;\n  }\n\n  /**\n   * Set cached data\n   */\n  set<T>(key: string, data: T, options: { ttl?: number; tags?: string[] } = {}): void {\n    // Check if we need to evict old entries\n    if (this.cache.size >= this.maxSize) {\n      this.evictOldest();\n    }\n\n    const entry: CacheEntry<T> = {\n      key,\n      data,\n      timestamp: Date.now(),\n      ttl: options.ttl || this.defaultTTL,\n      tags: options.tags || [],\n    };\n\n    this.cache.set(key, entry);\n    this.updateStats();\n  }\n\n  /**\n   * Invalidate cache entries by tag\n   */\n  invalidateByTag(tag: string): number {\n    let invalidated = 0;\n\n    for (const [key, entry] of Array.from(this.cache.entries())) {\n      if (entry.tags.includes(tag)) {\n        this.cache.delete(key);\n        invalidated++;\n      }\n    }\n\n    this.updateStats();\n    logger.debug('Cache invalidated by tag', { tag, count: invalidated });\n    return invalidated;\n  }\n\n  /**\n   * Clear specific cache entry\n   */\n  delete(key: string): boolean {\n    const result = this.cache.delete(key);\n    if (result) {\n      this.updateStats();\n    }\n    return result;\n  }\n\n  /**\n   * Clear all cache entries\n   */\n  clear(): void {\n    this.cache.clear();\n    this.stats = { hits: 0, misses: 0, size: 0, memoryUsage: 0 };\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getStats(): CacheStats {\n    return { ...this.stats };\n  }\n\n  /**\n   * Get cache hit ratio\n   */\n  getHitRatio(): number {\n    const total = this.stats.hits + this.stats.misses;\n    return total > 0 ? this.stats.hits / total : 0;\n  }\n\n  /**\n   * Evict oldest entries when cache is full\n   */\n  private evictOldest(): void {\n    let oldestKey: string | null = null;\n    let oldestTimestamp = Date.now();\n\n    for (const [key, entry] of Array.from(this.cache.entries())) {\n      if (entry.timestamp < oldestTimestamp) {\n        oldestTimestamp = entry.timestamp;\n        oldestKey = key;\n      }\n    }\n\n    if (oldestKey) {\n      this.cache.delete(oldestKey);\n    }\n  }\n\n  /**\n   * Update cache statistics\n   */\n  private updateStats(): void {\n    this.stats.size = this.cache.size;\n\n    // Estimate memory usage (rough calculation)\n    let memoryUsage = 0;\n    for (const entry of Array.from(this.cache.values())) {\n      memoryUsage += JSON.stringify(entry).length * 2; // Rough estimate\n    }\n    this.stats.memoryUsage = memoryUsage;\n  }\n\n  /**\n   * Clean up expired entries\n   */\n  cleanup(): number {\n    let cleaned = 0;\n    const now = Date.now();\n\n    for (const [key, entry] of Array.from(this.cache.entries())) {\n      if (now - entry.timestamp > entry.ttl) {\n        this.cache.delete(key);\n        cleaned++;\n      }\n    }\n\n    this.updateStats();\n    return cleaned;\n  }\n}\n\n// Singleton cache instance\nexport const queryCache = new QueryCache();\n\n/**\n * Cache decorator for database queries\n */\nexport function cached<TArgs extends readonly unknown[], TResult>(\n  fn: (...args: TArgs) => Promise<TResult>,\n  options: {\n    ttl?: number;\n    keyGenerator?: (...args: TArgs) => string;\n    tags?: string[] | ((...args: TArgs) => string[]);\n  } = {}\n): (...args: TArgs) => Promise<TResult> {\n  return async (...args: TArgs): Promise<TResult> => {\n    // Generate cache key\n    const key = options.keyGenerator\n      ? options.keyGenerator(...args)\n      : `${fn.name}:${JSON.stringify(args)}`;\n\n    // Try to get from cache\n    const cached = queryCache.get<TResult>(key);\n    if (cached !== null) {\n      return cached;\n    }\n\n    // Execute function and cache result\n    try {\n      const result = await fn(...args);\n\n      const tags = typeof options.tags === 'function' ? options.tags(...args) : options.tags || [];\n\n      queryCache.set(key, result, {\n        ttl: options.ttl,\n        tags,\n      });\n\n      return result;\n    } catch (error) {\n      // Don't cache errors\n      throw error;\n    }\n  };\n}\n\n// Export consolidated cache keys and tags from centralized types\nexport { CacheKeyPatterns as CacheKeys, CacheTags } from '@/types/cache';\n\n/**\n * Cache warming utilities\n */\nexport const CacheWarming = {\n  /**\n   * Warm up address data cache\n   */\n  async warmAddressCache() {\n    // This would typically be called during app startup\n    logger.info('Warming address cache...');\n\n    try {\n      // Load and cache common address data\n      // Implementation would call actual data fetching functions\n      logger.info('Address cache warmed successfully');\n    } catch (error) {\n      logger.error('Failed to warm address cache', { error });\n    }\n  },\n\n  /**\n   * Warm up user-specific cache\n   */\n  async warmUserCache(_userId: string, barangayCode?: string) {\n    if (barangayCode) {\n      // Pre-cache dashboard stats\n      // Implementation would fetch and cache dashboard stats\n    }\n  },\n};\n\n/**\n * Setup cache cleanup interval\n */\nexport function setupCacheCleanup(intervalMs: number = 10 * 60 * 1000): () => void {\n  const interval = setInterval(() => {\n    const cleaned = queryCache.cleanup();\n    if (cleaned > 0) {\n      logger.debug('Cache cleanup completed', { entriesRemoved: cleaned });\n    }\n  }, intervalMs);\n\n  return () => clearInterval(interval);\n}\n\n/**\n * Monitor cache performance\n */\nexport function logCacheStats(): void {\n  const stats = queryCache.getStats();\n  const hitRatio = queryCache.getHitRatio();\n\n  logger.info('Cache performance stats', {\n    ...stats,\n    hitRatio: Math.round(hitRatio * 100) / 100,\n    memoryUsageKB: Math.round(stats.memoryUsage / 1024),\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/data/query-utils.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":138,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":138,"endColumn":24,"suggestions":[{"fix":{"range":[3992,4046],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase, logError } from '@/lib';\n\n/**\n * Database utility functions for optimized operations\n */\n\nexport interface QuickStats {\n  barangay_code: string;\n  total_residents: number;\n  senior_citizens: number;\n  pwd_count: number;\n  registered_voters: number; // Uses is_voter column\n  ofw_count: number;\n  avg_age: number;\n}\n\n/**\n * Get barangay statistics from materialized view (fast cached data)\n */\nexport const getBarangayQuickStats = async (barangayCode: string): Promise<QuickStats | null> => {\n  try {\n    const { data, error } = await supabase\n      .from('barangay_quick_stats')\n      .select('*')\n      .eq('barangay_code', barangayCode)\n      .single();\n\n    if (error) {\n      throw error;\n    }\n\n    return data;\n  } catch (error) {\n    logError(\n      error instanceof Error ? error : new Error('Failed to get barangay quick stats'),\n      'GET_BARANGAY_QUICK_STATS'\n    );\n    return null;\n  }\n};\n\n/**\n * Refresh materialized view for updated statistics\n * This should be called periodically (e.g., daily, weekly) or after bulk data changes\n */\nexport const refreshBarangayStats = async (): Promise<boolean> => {\n  try {\n    const { error } = await supabase.rpc('refresh_barangay_stats');\n\n    if (error) {\n      throw error;\n    }\n\n    // Record the refresh time in localStorage\n    const now = new Date().toISOString();\n    localStorage.setItem('last_refresh_24h', now);\n    localStorage.setItem('last_refresh_6h', now);\n    localStorage.setItem('last_refresh_1h', now);\n\n    return true;\n  } catch (error) {\n    logError(\n      error instanceof Error ? error : new Error('Failed to refresh barangay stats'),\n      'REFRESH_BARANGAY_STATS'\n    );\n    return false;\n  }\n};\n\n/**\n * Check if materialized view needs refresh (based on data freshness)\n * Returns true if stats should be refreshed\n * Note: This is a simplified check - in production you might want to track refresh times\n */\nexport const shouldRefreshStats = async (maxAgeHours: number = 24): Promise<boolean> => {\n  try {\n    // For now, we'll refresh if the materialized view is empty or we get any error\n    // In a production system, you might want to add a separate table to track refresh times\n    const { data, error } = await supabase\n      .from('barangay_quick_stats')\n      .select('barangay_code')\n      .limit(1);\n\n    if (error) {\n      // If there's an error accessing the view, we should refresh\n      return true;\n    }\n\n    if (!data || data.length === 0) {\n      // If the view is empty, we should refresh\n      return true;\n    }\n\n    // For now, we'll use a simple time-based refresh strategy\n    // You could enhance this by storing last refresh time in a separate table\n    const refreshKey = `last_refresh_${maxAgeHours}h`;\n    const lastRefreshTime = localStorage.getItem(refreshKey);\n\n    if (!lastRefreshTime) {\n      // No record of last refresh, assume we need one\n      return true;\n    }\n\n    const lastRefresh = new Date(lastRefreshTime);\n    const maxAge = new Date();\n    maxAge.setHours(maxAge.getHours() - maxAgeHours);\n\n    return lastRefresh < maxAge;\n  } catch (error) {\n    logError(\n      error instanceof Error ? error : new Error('Failed to check stats refresh time'),\n      'CHECK_STATS_REFRESH_TIME'\n    );\n    // If we can't check, assume we need refresh\n    return true;\n  }\n};\n\n/**\n * Smart stats loader: Uses materialized view if fresh, falls back to real-time if needed\n */\nexport const getBarangayStatsOptimized = async (\n  barangayCode: string,\n  allowStaleHours: number = 24\n): Promise<QuickStats | null> => {\n  try {\n    // First try to get stats from materialized view\n    const quickStats = await getBarangayQuickStats(barangayCode);\n\n    if (quickStats) {\n      // Check if we should refresh in the background\n      const needsRefresh = await shouldRefreshStats(allowStaleHours);\n\n      if (needsRefresh) {\n        // Refresh asynchronously (don't wait for it)\n        refreshBarangayStats().then(success => {\n          if (success) {\n            console.log('Barangay stats refreshed in background');\n          }\n        });\n      }\n\n      return quickStats;\n    }\n\n    // If no materialized view data, refresh and try again\n    const refreshed = await refreshBarangayStats();\n    if (refreshed) {\n      return await getBarangayQuickStats(barangayCode);\n    }\n\n    return null;\n  } catch (error) {\n    logError(\n      error instanceof Error ? error : new Error('Failed to get optimized barangay stats'),\n      'GET_BARANGAY_STATS_OPTIMIZED'\n    );\n    return null;\n  }\n};\n\n/**\n * Performance monitoring: Get database table stats\n */\nexport const getDatabasePerformanceStats = async () => {\n  try {\n    const { data, error } = await supabase.from('performance_overview').select('*');\n\n    if (error) {\n      throw error;\n    }\n\n    return data;\n  } catch (error) {\n    logError(\n      error instanceof Error ? error : new Error('Failed to get performance stats'),\n      'GET_PERFORMANCE_STATS'\n    );\n    return null;\n  }\n};\n\n/**\n * Batch operations utility for large data operations\n */\nexport const performBatchOperation = async <T>(\n  items: T[],\n  batchSize: number,\n  operation: (batch: T[]) => Promise<void>\n): Promise<void> => {\n  for (let i = 0; i < items.length; i += batchSize) {\n    const batch = items.slice(i, i + batchSize);\n    await operation(batch);\n\n    // Small delay to prevent overwhelming the database\n    if (i + batchSize < items.length) {\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n  }\n};\n\n/**\n * Type guard for checking if data is fresh enough\n */\nexport const isDataFresh = (timestamp: string | Date, maxAgeMinutes: number): boolean => {\n  const dataTime = new Date(timestamp);\n  const cutoff = new Date();\n  cutoff.setMinutes(cutoff.getMinutes() - maxAgeMinutes);\n\n  return dataTime > cutoff;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/data/recent-items-storage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/data/supabase-helpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[259,262],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[259,262],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[331,334],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[331,334],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[353,356],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[353,356],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[396,399],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[396,399],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[439,442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[439,442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[631,634],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[631,634],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[703,706],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[703,706],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[735,738],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[735,738],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[776,779],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[776,779],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[810,813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[810,813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1141,1144],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1141,1144],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1246,1249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1246,1249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1292,1295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1292,1295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1326,1329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1326,1329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Supabase Helper Functions\n * Type-safe wrappers for common Supabase operations to resolve 'never' type issues\n */\n\nimport type { SupabaseClient } from '@supabase/supabase-js';\n\n/**\n * Type-safe insert operation\n */\nexport async function safeInsert<T = any>(\n  client: SupabaseClient,\n  table: string,\n  data: Record<string, any> | Record<string, any>[]\n): Promise<{ data: T | null; error: any }> {\n  const result = await (client as any).from(table).insert(data).select().single();\n\n  return {\n    data: result.data,\n    error: result.error,\n  };\n}\n\n/**\n * Type-safe update operation\n */\nexport async function safeUpdate<T = any>(\n  client: SupabaseClient,\n  table: string,\n  data: Record<string, any>,\n  filters: Record<string, any>\n): Promise<{ data: T | null; error: any }> {\n  let query = (client as any).from(table).update(data);\n\n  Object.entries(filters).forEach(([key, value]) => {\n    query = query.eq(key, value);\n  });\n\n  const result = await query.select().single();\n\n  return {\n    data: result.data,\n    error: result.error,\n  };\n}\n\n/**\n * Type-safe select operation with filters\n */\nexport async function safeSelect<T = any>(\n  client: SupabaseClient,\n  table: string,\n  selectFields: string = '*',\n  filters: Record<string, any> = {}\n): Promise<{ data: T | null; error: any }> {\n  let query = (client as any).from(table).select(selectFields);\n\n  Object.entries(filters).forEach(([key, value]) => {\n    query = query.eq(key, value);\n  });\n\n  const result = await query.single();\n\n  return {\n    data: result.data,\n    error: result.error,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/data/supabase.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":618,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":618,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17807,17810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17807,17810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":624,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":624,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17963,17966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17963,17966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":630,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":630,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18122,18125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18122,18125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":662,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":662,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18966,18969],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18966,18969],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":670,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":670,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19200,19203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19200,19203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":678,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":678,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19437,19440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19437,19440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Supabase Client Configuration\n * Multi-environment Supabase client for RBI System\n */\n\nimport { createClient } from '@supabase/supabase-js';\n\nimport {\n  getSupabaseConfig,\n  validateEnvironment,\n  createLogger,\n  isProductionLike,\n} from '../config/environment';\n\nconst logger = createLogger('Supabase');\n\n// Get environment-specific Supabase configuration\nconst { url, anonKey, options } = getSupabaseConfig();\n\n// Check if we're in a valid Supabase environment\nexport const isSupabaseAvailable = () => {\n  return (\n    process.env.NEXT_PUBLIC_SUPABASE_URL &&\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY &&\n    !process.env.NEXT_PUBLIC_SUPABASE_URL.includes('placeholder')\n  );\n};\n\n// Validate environment on startup (only in browser for production-like environments)\nif (typeof window !== 'undefined' && isProductionLike()) {\n  const validation = validateEnvironment();\n  if (!validation.isValid) {\n    logger.error('Environment validation failed:', validation.errors);\n    throw new Error(`Environment validation failed: ${validation.errors.join(', ')}`);\n  }\n}\n\n// Create Supabase client with environment-specific configuration\nexport const supabase = createClient(url, anonKey, options);\n\n// Force schema refresh function\nexport const refreshSchema = async () => {\n  if (!isSupabaseAvailable()) {\n    logger.debug('Supabase not available, skipping schema refresh');\n    return;\n  }\n\n  try {\n    // Force a schema refresh by making a simple query\n    const { error } = await supabase.rpc('version');\n    if (error) {\n      logger.debug('Schema refresh attempt:', error.message);\n    } else {\n      logger.debug('Schema refresh completed successfully');\n    }\n  } catch (e) {\n    logger.debug('Schema refresh completed with exception:', e);\n  }\n};\n\n// Database types for better TypeScript support - Generated from actual database structure\nexport type Database = {\n  public: {\n    Tables: {\n      psgc_regions: {\n        Row: {\n          code: string;\n          name: string;\n        };\n        Insert: {\n          code: string;\n          name: string;\n        };\n        Update: {\n          code?: string;\n          name?: string;\n        };\n      };\n      psgc_provinces: {\n        Row: {\n          code: string;\n          name: string;\n          region_code: string;\n          is_active: boolean | null;\n        };\n        Insert: {\n          code: string;\n          name: string;\n          region_code: string;\n          is_active?: boolean | null;\n        };\n        Update: {\n          code?: string;\n          name?: string;\n          region_code?: string;\n          is_active?: boolean | null;\n        };\n      };\n      psgc_cities_municipalities: {\n        Row: {\n          code: string;\n          name: string;\n          type: string;\n          province_code: string | null;\n          is_independent: boolean;\n        };\n        Insert: {\n          code: string;\n          name: string;\n          type: string;\n          province_code?: string | null;\n          is_independent: boolean;\n        };\n        Update: {\n          code?: string;\n          name?: string;\n          type?: string;\n          province_code?: string | null;\n          is_independent?: boolean;\n        };\n      };\n      psgc_barangays: {\n        Row: {\n          code: string;\n          name: string;\n          city_municipality_code: string;\n          urban_rural_status: string | null;\n        };\n        Insert: {\n          code: string;\n          name: string;\n          city_municipality_code: string;\n          urban_rural_status?: string | null;\n        };\n        Update: {\n          code?: string;\n          name?: string;\n          city_municipality_code?: string;\n          urban_rural_status?: string | null;\n        };\n      };\n      households: {\n        Row: {\n          code: string;\n          barangay_code: string;\n          region_code: string | null;\n          province_code: string | null;\n          city_municipality_code: string | null;\n          street_name: string | null;\n          house_number: string | null;\n          subdivision: string | null;\n          zip_code: string | null;\n          household_head_id: string | null;\n          total_members: number | null;\n          created_by: string | null;\n          created_at: string | null;\n          updated_at: string | null;\n        };\n        Insert: {\n          code: string;\n          barangay_code: string;\n          region_code?: string | null;\n          province_code?: string | null;\n          city_municipality_code?: string | null;\n          street_name?: string | null;\n          house_number?: string | null;\n          subdivision?: string | null;\n          zip_code?: string | null;\n          household_head_id?: string | null;\n          total_members?: number | null;\n          created_by?: string | null;\n          created_at?: string | null;\n          updated_at?: string | null;\n        };\n        Update: {\n          code?: string;\n          barangay_code?: string;\n          region_code?: string | null;\n          province_code?: string | null;\n          city_municipality_code?: string | null;\n          street_name?: string | null;\n          house_number?: string | null;\n          subdivision?: string | null;\n          zip_code?: string | null;\n          household_head_id?: string | null;\n          total_members?: number | null;\n          created_by?: string | null;\n          created_at?: string | null;\n          updated_at?: string | null;\n        };\n      };\n      residents: {\n        Row: {\n          id: string;\n          philsys_card_number: string | null;\n          first_name: string;\n          middle_name: string | null;\n          last_name: string;\n          extension_name: string | null;\n          birthdate: string;\n          birth_place_code: string | null;\n          sex: 'male' | 'female';\n          civil_status: 'single' | 'married' | 'divorced' | 'separated' | 'widowed' | 'others';\n          civil_status_others_specify: string | null;\n          education_attainment:\n            | 'elementary'\n            | 'high_school'\n            | 'college'\n            | 'post_graduate'\n            | 'vocational'\n            | null;\n          is_graduate: boolean;\n          employment_status:\n            | 'employed'\n            | 'unemployed'\n            | 'underemployed'\n            | 'self_employed'\n            | 'student'\n            | 'retired'\n            | 'homemaker'\n            | 'unable_to_work'\n            | 'looking_for_work'\n            | 'not_in_labor_force'\n            | null;\n          occupation_code: string | null;\n          email: string | null;\n          mobile_number: string | null;\n          telephone_number: string | null;\n          household_code: string | null;\n          height: number | null;\n          weight: number | null;\n          complexion: string | null;\n          is_voter: boolean | null;\n          is_resident_voter: boolean | null;\n          last_voted_date: string | null;\n          religion_others_specify: string | null;\n          mother_maiden_first: string | null;\n          mother_maiden_middle: string | null;\n          mother_maiden_last: string | null;\n          is_active: boolean;\n          created_by: string | null;\n          updated_by: string | null;\n          created_at: string;\n          updated_at: string;\n          religion:\n            | 'roman_catholic'\n            | 'islam'\n            | 'iglesia_ni_cristo'\n            | 'christian'\n            | 'aglipayan_church'\n            | 'seventh_day_adventist'\n            | 'bible_baptist_church'\n            | 'jehovahs_witnesses'\n            | 'church_of_jesus_christ_latter_day_saints'\n            | 'united_church_of_christ_philippines'\n            | 'others';\n          citizenship: 'filipino' | 'dual_citizen' | 'foreigner';\n          blood_type: 'A+' | 'A-' | 'B+' | 'B-' | 'AB+' | 'AB-' | 'O+' | 'O-' | null;\n          ethnicity:\n            | 'tagalog'\n            | 'cebuano'\n            | 'ilocano'\n            | 'bisaya'\n            | 'hiligaynon'\n            | 'bikolano'\n            | 'waray'\n            | 'kapampangan'\n            | 'pangasinense'\n            | 'maranao'\n            | 'maguindanao'\n            | 'tausug'\n            | 'yakan'\n            | 'samal'\n            | 'badjao'\n            | 'aeta'\n            | 'agta'\n            | 'ati'\n            | 'batak'\n            | 'bukidnon'\n            | 'gaddang'\n            | 'higaonon'\n            | 'ibaloi'\n            | 'ifugao'\n            | 'igorot'\n            | 'ilongot'\n            | 'isneg'\n            | 'ivatan'\n            | 'kalinga'\n            | 'kankanaey'\n            | 'mangyan'\n            | 'mansaka'\n            | 'palawan'\n            | 'subanen'\n            | 'tboli'\n            | 'teduray'\n            | 'tumandok'\n            | 'chinese'\n            | 'others'\n            | null;\n        };\n        Insert: {\n          id?: string;\n          philsys_card_number?: string | null;\n          first_name: string;\n          middle_name?: string | null;\n          last_name: string;\n          extension_name?: string | null;\n          birthdate: string;\n          birth_place_code?: string | null;\n          sex: 'male' | 'female';\n          civil_status?: 'single' | 'married' | 'divorced' | 'separated' | 'widowed' | 'others';\n          civil_status_others_specify?: string | null;\n          education_attainment?:\n            | 'elementary'\n            | 'high_school'\n            | 'college'\n            | 'post_graduate'\n            | 'vocational'\n            | null;\n          is_graduate?: boolean;\n          employment_status?:\n            | 'employed'\n            | 'unemployed'\n            | 'underemployed'\n            | 'self_employed'\n            | 'student'\n            | 'retired'\n            | 'homemaker'\n            | 'unable_to_work'\n            | 'looking_for_work'\n            | 'not_in_labor_force'\n            | null;\n          occupation_code?: string | null;\n          email?: string | null;\n          mobile_number?: string | null;\n          telephone_number?: string | null;\n          household_code?: string | null;\n          height?: number | null;\n          weight?: number | null;\n          complexion?: string | null;\n          is_voter?: boolean | null;\n          is_resident_voter?: boolean | null;\n          last_voted_date?: string | null;\n          religion_others_specify?: string | null;\n          mother_maiden_first?: string | null;\n          mother_maiden_middle?: string | null;\n          mother_maiden_last?: string | null;\n          is_active?: boolean;\n          created_by?: string | null;\n          updated_by?: string | null;\n          created_at?: string | null;\n          updated_at?: string | null;\n          religion?:\n            | 'roman_catholic'\n            | 'islam'\n            | 'iglesia_ni_cristo'\n            | 'christian'\n            | 'aglipayan_church'\n            | 'seventh_day_adventist'\n            | 'bible_baptist_church'\n            | 'jehovahs_witnesses'\n            | 'church_of_jesus_christ_latter_day_saints'\n            | 'united_church_of_christ_philippines'\n            | 'others';\n          citizenship?: 'filipino' | 'dual_citizen' | 'foreigner';\n          blood_type?: 'A+' | 'A-' | 'B+' | 'B-' | 'AB+' | 'AB-' | 'O+' | 'O-' | null;\n          ethnicity?:\n            | 'tagalog'\n            | 'cebuano'\n            | 'ilocano'\n            | 'bisaya'\n            | 'hiligaynon'\n            | 'bikolano'\n            | 'waray'\n            | 'kapampangan'\n            | 'pangasinense'\n            | 'maranao'\n            | 'maguindanao'\n            | 'tausug'\n            | 'yakan'\n            | 'samal'\n            | 'badjao'\n            | 'aeta'\n            | 'agta'\n            | 'ati'\n            | 'batak'\n            | 'bukidnon'\n            | 'gaddang'\n            | 'higaonon'\n            | 'ibaloi'\n            | 'ifugao'\n            | 'igorot'\n            | 'ilongot'\n            | 'isneg'\n            | 'ivatan'\n            | 'kalinga'\n            | 'kankanaey'\n            | 'mangyan'\n            | 'mansaka'\n            | 'palawan'\n            | 'subanen'\n            | 'tboli'\n            | 'teduray'\n            | 'tumandok'\n            | 'chinese'\n            | 'others'\n            | null;\n        };\n        Update: {\n          id?: string;\n          philsys_card_number?: string | null;\n          first_name?: string;\n          middle_name?: string | null;\n          last_name?: string;\n          extension_name?: string | null;\n          birthdate?: string;\n          birth_place_code?: string | null;\n          sex?: 'male' | 'female';\n          civil_status?: 'single' | 'married' | 'divorced' | 'separated' | 'widowed' | 'others';\n          civil_status_others_specify?: string | null;\n          education_attainment?:\n            | 'elementary'\n            | 'high_school'\n            | 'college'\n            | 'post_graduate'\n            | 'vocational'\n            | null;\n          is_graduate?: boolean;\n          employment_status?:\n            | 'employed'\n            | 'unemployed'\n            | 'underemployed'\n            | 'self_employed'\n            | 'student'\n            | 'retired'\n            | 'homemaker'\n            | 'unable_to_work'\n            | 'looking_for_work'\n            | 'not_in_labor_force'\n            | null;\n          occupation_code?: string | null;\n          email?: string | null;\n          mobile_number?: string | null;\n          telephone_number?: string | null;\n          household_code?: string | null;\n          height?: number | null;\n          weight?: number | null;\n          complexion?: string | null;\n          is_voter?: boolean | null;\n          is_resident_voter?: boolean | null;\n          last_voted_date?: string | null;\n          religion_others_specify?: string | null;\n          mother_maiden_first?: string | null;\n          mother_maiden_middle?: string | null;\n          mother_maiden_last?: string | null;\n          is_active?: boolean | null;\n          created_by?: string | null;\n          updated_by?: string | null;\n          created_at?: string | null;\n          updated_at?: string | null;\n          religion?:\n            | 'roman_catholic'\n            | 'islam'\n            | 'iglesia_ni_cristo'\n            | 'christian'\n            | 'aglipayan_church'\n            | 'seventh_day_adventist'\n            | 'bible_baptist_church'\n            | 'jehovahs_witnesses'\n            | 'church_of_jesus_christ_latter_day_saints'\n            | 'united_church_of_christ_philippines'\n            | 'others';\n          citizenship?: 'filipino' | 'dual_citizen' | 'foreigner';\n          blood_type?: 'A+' | 'A-' | 'B+' | 'B-' | 'AB+' | 'AB-' | 'O+' | 'O-' | null;\n          ethnicity?:\n            | 'tagalog'\n            | 'cebuano'\n            | 'ilocano'\n            | 'bisaya'\n            | 'hiligaynon'\n            | 'bikolano'\n            | 'waray'\n            | 'kapampangan'\n            | 'pangasinense'\n            | 'maranao'\n            | 'maguindanao'\n            | 'tausug'\n            | 'yakan'\n            | 'samal'\n            | 'badjao'\n            | 'aeta'\n            | 'agta'\n            | 'ati'\n            | 'batak'\n            | 'bukidnon'\n            | 'gaddang'\n            | 'higaonon'\n            | 'ibaloi'\n            | 'ifugao'\n            | 'igorot'\n            | 'ilongot'\n            | 'isneg'\n            | 'ivatan'\n            | 'kalinga'\n            | 'kankanaey'\n            | 'mangyan'\n            | 'mansaka'\n            | 'palawan'\n            | 'subanen'\n            | 'tboli'\n            | 'teduray'\n            | 'tumandok'\n            | 'chinese'\n            | 'others'\n            | null;\n        };\n      };\n      psoc_major_groups: {\n        Row: {\n          code: string;\n          title: string;\n        };\n        Insert: {\n          code: string;\n          title: string;\n        };\n        Update: {\n          code?: string;\n          title?: string;\n        };\n      };\n      psoc_sub_major_groups: {\n        Row: {\n          code: string;\n          title: string;\n          major_code: string;\n        };\n        Insert: {\n          code: string;\n          title: string;\n          major_code: string;\n        };\n        Update: {\n          code?: string;\n          title?: string;\n          major_code?: string;\n        };\n      };\n      psoc_minor_groups: {\n        Row: {\n          code: string;\n          title: string;\n          sub_major_code: string;\n        };\n        Insert: {\n          code: string;\n          title: string;\n          sub_major_code: string;\n        };\n        Update: {\n          code?: string;\n          title?: string;\n          sub_major_code?: string;\n        };\n      };\n      psoc_unit_groups: {\n        Row: {\n          code: string;\n          title: string;\n          minor_code: string;\n        };\n        Insert: {\n          code: string;\n          title: string;\n          minor_code: string;\n        };\n        Update: {\n          code?: string;\n          title?: string;\n          minor_code?: string;\n        };\n      };\n      psoc_unit_sub_groups: {\n        Row: {\n          code: string;\n          title: string;\n          unit_code: string;\n        };\n        Insert: {\n          code: string;\n          title: string;\n          unit_code: string;\n        };\n        Update: {\n          code?: string;\n          title?: string;\n          unit_code?: string;\n        };\n      };\n      psoc_cross_references: {\n        Row: {\n          unit_code: string;\n          related_titles: string;\n        };\n        Insert: {\n          unit_code: string;\n          related_titles: string;\n        };\n        Update: {\n          unit_code?: string;\n          related_titles?: string;\n        };\n      };\n      psoc_position_titles: {\n        Row: {\n          id: string;\n          unit_group_code: string;\n          titles: any; // jsonb\n          created_at: string | null;\n        };\n        Insert: {\n          id?: string;\n          unit_group_code: string;\n          titles: any; // jsonb\n          created_at?: string | null;\n        };\n        Update: {\n          id?: string;\n          unit_group_code?: string;\n          titles?: any; // jsonb\n          created_at?: string | null;\n        };\n      };\n      resident_relationships: {\n        Row: {\n          id: string;\n          resident_id: string;\n          related_resident_id: string;\n          relationship_type: string;\n          created_at: string | null;\n        };\n        Insert: {\n          id?: string;\n          resident_id: string;\n          related_resident_id: string;\n          relationship_type: string;\n          created_at?: string | null;\n        };\n        Update: {\n          id?: string;\n          resident_id?: string;\n          related_resident_id?: string;\n          relationship_type?: string;\n          created_at?: string | null;\n        };\n      };\n      auth_roles: {\n        Row: {\n          id: string;\n          name: string;\n          description: string | null;\n          permissions: any | null; // jsonb\n          created_at: string | null;\n          updated_at: string | null;\n        };\n        Insert: {\n          id?: string;\n          name: string;\n          description?: string | null;\n          permissions?: any | null; // jsonb\n          created_at?: string | null;\n          updated_at?: string | null;\n        };\n        Update: {\n          id?: string;\n          name?: string;\n          description?: string | null;\n          permissions?: any | null; // jsonb\n          created_at?: string | null;\n          updated_at?: string | null;\n        };\n      };\n      auth_barangay_accounts: {\n        Row: {\n          id: string;\n          user_id: string;\n          barangay_code: string;\n          is_primary: boolean | null;\n          created_by: string | null;\n          updated_by: string | null;\n          created_at: string | null;\n          updated_at: string | null;\n        };\n        Insert: {\n          id?: string;\n          user_id: string;\n          barangay_code: string;\n          is_primary?: boolean | null;\n          created_by?: string | null;\n          updated_by?: string | null;\n          created_at?: string | null;\n          updated_at?: string | null;\n        };\n        Update: {\n          id?: string;\n          user_id?: string;\n          barangay_code?: string;\n          is_primary?: boolean | null;\n          created_by?: string | null;\n          updated_by?: string | null;\n          created_at?: string | null;\n          updated_at?: string | null;\n        };\n      };\n      auth_user_profiles: {\n        Row: {\n          id: string;\n          first_name: string;\n          middle_name: string | null;\n          last_name: string;\n          email: string;\n          phone: string | null;\n          role_id: string;\n          barangay_code: string | null;\n          city_municipality_code: string | null;\n          province_code: string | null;\n          region_code: string | null;\n          is_active: boolean | null;\n          last_login: string | null;\n          email_verified: boolean | null;\n          email_verified_at: string | null;\n          created_at: string | null;\n          updated_at: string | null;\n        };\n        Insert: {\n          id: string;\n          first_name: string;\n          middle_name?: string | null;\n          last_name: string;\n          email: string;\n          phone?: string | null;\n          role_id: string;\n          barangay_code?: string | null;\n          city_municipality_code?: string | null;\n          province_code?: string | null;\n          region_code?: string | null;\n          is_active?: boolean | null;\n          last_login?: string | null;\n          email_verified?: boolean | null;\n          email_verified_at?: string | null;\n          created_at?: string | null;\n          updated_at?: string | null;\n        };\n        Update: {\n          id?: string;\n          first_name?: string;\n          middle_name?: string | null;\n          last_name?: string;\n          email?: string;\n          phone?: string | null;\n          role_id?: string;\n          barangay_code?: string | null;\n          city_municipality_code?: string | null;\n          province_code?: string | null;\n          region_code?: string | null;\n          is_active?: boolean | null;\n          last_login?: string | null;\n          email_verified?: boolean | null;\n          email_verified_at?: string | null;\n          created_at?: string | null;\n          updated_at?: string | null;\n        };\n      };\n    };\n    Views: {\n      address_hierarchy: {\n        Row: {\n          region_code: string | null;\n          region_name: string | null;\n          province_code: string | null;\n          province_name: string | null;\n          city_code: string | null;\n          city_name: string | null;\n          city_type: string | null;\n          barangay_code: string | null;\n          barangay_name: string | null;\n          full_address: string | null;\n        };\n      };\n      psoc_occupation_search: {\n        Row: {\n          occupation_code: string | null;\n          occupation_title: string | null;\n          level_type: string | null;\n          hierarchy_level: number | null;\n          unit_code: string | null;\n          searchable_text: string | null;\n        };\n      };\n    };\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/data/sync-queue.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[615,618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[615,618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":33,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":33,"endColumn":16,"suggestions":[{"fix":{"range":[781,834],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":50,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":50,"endColumn":16,"suggestions":[{"fix":{"range":[1184,1224],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":65,"column":56,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":65,"endColumn":64},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":66,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":66,"endColumn":24,"suggestions":[{"fix":{"range":[1680,1743],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":68,"column":53,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":68,"endColumn":61},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":72,"column":51,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":72,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2398,2401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2398,2401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3983,3986],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3983,3986],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":171,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4675,4678],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4675,4678],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5394,5397],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5394,5397],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":258,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":258,"endColumn":16,"suggestions":[{"fix":{"range":[6897,6945],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":275,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":275,"endColumn":18,"suggestions":[{"fix":{"range":[7298,7359],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":280,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":280,"endColumn":18,"suggestions":[{"fix":{"range":[7449,7499],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Background Sync Queue System\n * Handles offline data synchronization when connection is restored\n */\n\nimport { ErrorCode, ErrorSeverity } from '@/types/errors';\nimport type { SyncResult } from '@/types/utilities';\nimport { createAppError } from '@/utils/errorUtils';\n\nimport { offlineStorage } from './offline-storage';\n\nexport class SyncQueue {\n  private isProcessing = false;\n  private maxRetries = 3;\n  private retryDelay = 5000; // 5 seconds\n\n  /**\n   * Add action to sync queue\n   */\n  async addToQueue(\n    action: 'CREATE' | 'UPDATE' | 'DELETE',\n    type: 'resident' | 'household' | 'user',\n    data: any\n  ): Promise<void> {\n    if (typeof window === 'undefined') return;\n\n    await offlineStorage.addToSyncQueue({\n      action,\n      type,\n      data,\n    });\n\n    console.log(`Added ${action} ${type} to sync queue`);\n\n    // Try to process queue if online\n    if (navigator.onLine && !this.isProcessing) {\n      this.processQueue();\n    }\n  }\n\n  /**\n   * Process pending sync items\n   */\n  async processQueue(): Promise<void> {\n    if (typeof window === 'undefined' || this.isProcessing || !navigator.onLine) {\n      return;\n    }\n\n    this.isProcessing = true;\n    console.log('Processing sync queue...');\n\n    try {\n      const pendingItems = await offlineStorage.getPendingSyncItems();\n\n      for (const item of pendingItems) {\n        if (item.retryCount >= this.maxRetries) {\n          console.warn(`Max retries exceeded for sync item ${item.id}`);\n          continue;\n        }\n\n        try {\n          const result = await this.syncItem(item);\n\n          if (result.success) {\n            await offlineStorage.markSyncItemCompleted(item.id!);\n            console.log(`Successfully synced ${item.action} ${item.type}`);\n          } else {\n            await offlineStorage.incrementSyncRetry(item.id!);\n            console.error(`Failed to sync ${item.action} ${item.type}:`, result.error);\n          }\n        } catch (error) {\n          await offlineStorage.incrementSyncRetry(item.id!);\n          console.error(`Error syncing ${item.action} ${item.type}:`, error);\n        }\n\n        // Add delay between sync operations\n        await this.delay(1000);\n      }\n    } catch (error) {\n      console.error('Error processing sync queue:', error);\n    } finally {\n      this.isProcessing = false;\n    }\n  }\n\n  /**\n   * Sync individual item\n   */\n  private async syncItem(item: any): Promise<SyncResult> {\n    const { action, type, data } = item;\n\n    try {\n      // Get auth token\n      const { supabase } = await import('@/lib/data/supabase');\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n\n      if (!session?.access_token) {\n        return { success: false, error: 'No authentication token' };\n      }\n\n      const headers = {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${session.access_token}`,\n      };\n\n      let response: Response;\n\n      switch (action) {\n        case 'CREATE':\n          response = await this.handleCreate(type, data, headers);\n          break;\n        case 'UPDATE':\n          response = await this.handleUpdate(type, data, headers);\n          break;\n        case 'DELETE':\n          response = await this.handleDelete(type, data, headers);\n          break;\n        default:\n          return { success: false, error: `Unknown action: ${action}` };\n      }\n\n      if (response.ok) {\n        const responseData = await response.json();\n        return { success: true, data: responseData };\n      } else {\n        const errorData = await response.json().catch(() => ({}));\n        return {\n          success: false,\n          error: errorData.error || `HTTP ${response.status}: ${response.statusText}`,\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  /**\n   * Handle CREATE operations\n   */\n  private async handleCreate(type: string, data: any, headers: HeadersInit): Promise<Response> {\n    const endpoints = {\n      resident: '/api/residents',\n      household: '/api/households',\n      user: '/api/auth/create-profile',\n    };\n\n    const endpoint = endpoints[type as keyof typeof endpoints];\n    if (!endpoint) {\n      throw createAppError(`No endpoint defined for type: ${type}`, {\n        code: ErrorCode.INVALID_OPERATION,\n        severity: ErrorSeverity.HIGH,\n        context: { type, action: 'CREATE' },\n      });\n    }\n\n    return fetch(endpoint, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(data),\n    });\n  }\n\n  /**\n   * Handle UPDATE operations\n   */\n  private async handleUpdate(type: string, data: any, headers: HeadersInit): Promise<Response> {\n    const endpoints = {\n      resident: `/api/residents/${data.id}`,\n      household: `/api/households/${data.code || data.id}`,\n      user: `/api/auth/profile`,\n    };\n\n    const endpoint = endpoints[type as keyof typeof endpoints];\n    if (!endpoint) {\n      throw createAppError(`No endpoint defined for type: ${type}`, {\n        code: ErrorCode.INVALID_OPERATION,\n        severity: ErrorSeverity.HIGH,\n        context: { type, action: 'UPDATE' },\n      });\n    }\n\n    return fetch(endpoint, {\n      method: 'PUT',\n      headers,\n      body: JSON.stringify(data),\n    });\n  }\n\n  /**\n   * Handle DELETE operations\n   */\n  private async handleDelete(type: string, data: any, headers: HeadersInit): Promise<Response> {\n    const endpoints = {\n      resident: `/api/residents/${data.id}`,\n      household: `/api/households/${data.code || data.id}`,\n      user: `/api/auth/profile`,\n    };\n\n    const endpoint = endpoints[type as keyof typeof endpoints];\n    if (!endpoint) {\n      throw createAppError(`No endpoint defined for type: ${type}`, {\n        code: ErrorCode.INVALID_OPERATION,\n        severity: ErrorSeverity.HIGH,\n        context: { type, action: 'DELETE' },\n      });\n    }\n\n    return fetch(endpoint, {\n      method: 'DELETE',\n      headers,\n    });\n  }\n\n  /**\n   * Force sync all pending items\n   */\n  async forceSync(): Promise<void> {\n    if (typeof window === 'undefined') return;\n\n    if (!navigator.onLine) {\n      throw createAppError('Cannot force sync while offline', {\n        code: ErrorCode.NETWORK_ERROR,\n        severity: ErrorSeverity.MEDIUM,\n      });\n    }\n\n    await this.processQueue();\n  }\n\n  /**\n   * Get sync queue status\n   */\n  async getStatus(): Promise<{\n    isProcessing: boolean;\n    pendingCount: number;\n    isOnline: boolean;\n  }> {\n    const pendingItems = await offlineStorage.getPendingSyncItems();\n\n    return {\n      isProcessing: this.isProcessing,\n      pendingCount: pendingItems.length,\n      isOnline: navigator.onLine,\n    };\n  }\n\n  /**\n   * Clear all completed sync items\n   */\n  async clearCompleted(): Promise<void> {\n    // This would need to be implemented in offline storage\n    // For now, we'll just log it\n    console.log('Clearing completed sync items...');\n  }\n\n  /**\n   * Utility delay function\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Setup event listeners for online/offline events\n   */\n  setupEventListeners(): void {\n    if (typeof window === 'undefined') return;\n\n    window.addEventListener('online', () => {\n      console.log('Connection restored, processing sync queue...');\n      this.processQueue();\n    });\n\n    window.addEventListener('offline', () => {\n      console.log('Connection lost, sync queue paused');\n    });\n\n    // Process queue on page load if online\n    if (navigator.onLine) {\n      setTimeout(() => this.processQueue(), 1000);\n    }\n  }\n\n  /**\n   * Cleanup event listeners\n   */\n  cleanup(): void {\n    window.removeEventListener('online', this.processQueue);\n    window.removeEventListener('offline', () => {});\n  }\n}\n\n// Export singleton instance\nexport const syncQueue = new SyncQueue();\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/database/connection-pool.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2772,2775],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2772,2775],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2787,2790],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2787,2790],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3233,3236],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3233,3236],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3248,3251],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3248,3251],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":117,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3413,3416],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3413,3416],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":117,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3428,3431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3428,3431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Database Connection Pool Management\n * Optimized Supabase client management with connection pooling\n */\n\nimport { createClient, SupabaseClient } from '@supabase/supabase-js';\n\nimport { getSupabaseConfig, isProduction, createLogger } from '@/lib/config/environment';\n\nconst logger = createLogger('ConnectionPool');\n\ninterface ConnectionPoolConfig {\n  maxConnections: number;\n  idleTimeout: number;\n  connectionTimeout: number;\n  retryAttempts: number;\n  healthCheckInterval: number;\n}\n\ninterface PooledConnection {\n  client: SupabaseClient;\n  createdAt: number;\n  lastUsed: number;\n  isActive: boolean;\n  connectionId: string;\n}\n\nclass DatabaseConnectionPool {\n  private pool: Map<string, PooledConnection> = new Map();\n  private config: ConnectionPoolConfig;\n  private healthCheckTimer?: NodeJS.Timeout;\n  private isInitialized = false;\n\n  constructor() {\n    this.config = {\n      maxConnections: isProduction() ? 20 : 10,\n      idleTimeout: 300000, // 5 minutes\n      connectionTimeout: 10000, // 10 seconds\n      retryAttempts: 3,\n      healthCheckInterval: 60000, // 1 minute\n    };\n  }\n\n  /**\n   * Initialize the connection pool\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    logger.info('Initializing database connection pool', {\n      maxConnections: this.config.maxConnections,\n      environment: process.env.NODE_ENV,\n    });\n\n    // Start health check timer\n    this.startHealthCheck();\n    this.isInitialized = true;\n\n    logger.info('Database connection pool initialized successfully');\n  }\n\n  /**\n   * Get a connection from the pool or create a new one\n   */\n  async getConnection(type: 'anon' | 'service' = 'anon'): Promise<SupabaseClient> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    const poolKey = `${type}_${Math.floor(this.pool.size / this.config.maxConnections)}`;\n\n    // Try to reuse existing connection\n    const existingConnection = this.findAvailableConnection(type);\n    if (existingConnection) {\n      existingConnection.lastUsed = Date.now();\n      existingConnection.isActive = true;\n      return existingConnection.client;\n    }\n\n    // Create new connection if pool not full\n    if (this.pool.size < this.config.maxConnections) {\n      return this.createConnection(poolKey, type);\n    }\n\n    // Pool is full, wait for available connection or create with retry\n    logger.warn('Connection pool at capacity, attempting to create connection with retry');\n    return this.createConnectionWithRetry(poolKey, type);\n  }\n\n  /**\n   * Create a new database connection\n   */\n  private createConnection(connectionId: string, type: 'anon' | 'service'): SupabaseClient {\n    const supabaseConfig = getSupabaseConfig();\n    const now = Date.now();\n\n    let client: SupabaseClient<any, 'public', any>;\n\n    if (type === 'service') {\n      if (!process.env.SUPABASE_SERVICE_ROLE_KEY) {\n        throw new Error('Service role key not configured');\n      }\n\n      client = createClient(supabaseConfig.url, process.env.SUPABASE_SERVICE_ROLE_KEY, {\n        ...supabaseConfig.options,\n        auth: {\n          ...supabaseConfig.options.auth,\n          autoRefreshToken: false,\n          persistSession: false,\n        },\n      }) as SupabaseClient<any, 'public', any>;\n    } else {\n      client = createClient(\n        supabaseConfig.url,\n        supabaseConfig.anonKey,\n        supabaseConfig.options\n      ) as SupabaseClient<any, 'public', any>;\n    }\n\n    const pooledConnection: PooledConnection = {\n      client,\n      createdAt: now,\n      lastUsed: now,\n      isActive: true,\n      connectionId,\n    };\n\n    this.pool.set(connectionId, pooledConnection);\n\n    logger.debug(`Created new ${type} connection`, {\n      connectionId,\n      poolSize: this.pool.size,\n      type,\n    });\n\n    return client;\n  }\n\n  /**\n   * Create connection with retry logic\n   */\n  private async createConnectionWithRetry(\n    connectionId: string,\n    type: 'anon' | 'service'\n  ): Promise<SupabaseClient> {\n    let lastError: Error | null = null;\n\n    for (let attempt = 1; attempt <= this.config.retryAttempts; attempt++) {\n      try {\n        // Clean up idle connections first\n        await this.cleanupIdleConnections();\n\n        // Try to create connection again\n        if (this.pool.size < this.config.maxConnections) {\n          return this.createConnection(connectionId, type);\n        }\n\n        // Wait before retry\n        if (attempt < this.config.retryAttempts) {\n          await this.wait(1000 * attempt); // Exponential backoff\n        }\n      } catch (error) {\n        lastError = error instanceof Error ? error : new Error(String(error));\n        logger.warn(`Connection creation attempt ${attempt} failed`, {\n          error: lastError.message,\n          attempt,\n          connectionId,\n        });\n      }\n    }\n\n    throw new Error(\n      `Failed to create database connection after ${this.config.retryAttempts} attempts: ${lastError?.message}`\n    );\n  }\n\n  /**\n   * Find an available connection in the pool\n   */\n  private findAvailableConnection(type: 'anon' | 'service'): PooledConnection | null {\n    let result: PooledConnection | null = null;\n\n    this.pool.forEach((connection, connectionId) => {\n      if (result) return; // Already found one\n\n      const isCorrectType =\n        type === 'service' ? connectionId.startsWith('service_') : connectionId.startsWith('anon_');\n\n      if (isCorrectType && !connection.isActive) {\n        result = connection;\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Release a connection back to the pool\n   */\n  releaseConnection(client: SupabaseClient): void {\n    this.pool.forEach((connection, connectionId) => {\n      if (connection.client === client) {\n        connection.isActive = false;\n        connection.lastUsed = Date.now();\n\n        logger.debug(`Released connection back to pool`, {\n          connectionId,\n          poolSize: this.pool.size,\n        });\n      }\n    });\n  }\n\n  /**\n   * Clean up idle connections\n   */\n  private async cleanupIdleConnections(): Promise<void> {\n    const now = Date.now();\n    const connectionsToRemove: string[] = [];\n\n    this.pool.forEach((connection, connectionId) => {\n      const idleTime = now - connection.lastUsed;\n\n      if (!connection.isActive && idleTime > this.config.idleTimeout) {\n        connectionsToRemove.push(connectionId);\n      }\n    });\n\n    connectionsToRemove.forEach(connectionId => {\n      this.pool.delete(connectionId);\n      logger.debug(`Removed idle connection`, { connectionId });\n    });\n\n    if (connectionsToRemove.length > 0) {\n      logger.info(`Cleaned up ${connectionsToRemove.length} idle connections`, {\n        remainingConnections: this.pool.size,\n      });\n    }\n  }\n\n  /**\n   * Health check for all connections\n   */\n  private async performHealthCheck(): Promise<void> {\n    const unhealthyConnections: string[] = [];\n\n    // Use forEach to iterate over the Map\n    await Promise.all(\n      Array.from(this.pool.entries()).map(async ([connectionId, connection]) => {\n        try {\n          // Simple health check - try to access the API\n          const { error } = await connection.client\n            .from('auth_user_profiles')\n            .select('id')\n            .limit(1);\n\n          if (error) {\n            logger.warn(`Connection health check failed`, {\n              connectionId,\n              error: error.message,\n            });\n            unhealthyConnections.push(connectionId);\n          }\n        } catch (error) {\n          logger.warn(`Connection health check error`, {\n            connectionId,\n            error: error instanceof Error ? error.message : 'Unknown error',\n          });\n          unhealthyConnections.push(connectionId);\n        }\n      })\n    );\n\n    // Remove unhealthy connections\n    unhealthyConnections.forEach(connectionId => {\n      this.pool.delete(connectionId);\n    });\n\n    if (unhealthyConnections.length > 0) {\n      logger.info(`Removed ${unhealthyConnections.length} unhealthy connections`);\n    }\n  }\n\n  /**\n   * Start periodic health checks\n   */\n  private startHealthCheck(): void {\n    this.healthCheckTimer = setInterval(async () => {\n      try {\n        await this.cleanupIdleConnections();\n        await this.performHealthCheck();\n      } catch (error) {\n        logger.error('Health check failed', {\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }, this.config.healthCheckInterval);\n  }\n\n  /**\n   * Get pool statistics\n   */\n  getStats() {\n    const activeConnections = Array.from(this.pool.values()).filter(conn => conn.isActive).length;\n    const totalConnections = this.pool.size;\n\n    return {\n      activeConnections,\n      totalConnections,\n      availableConnections: totalConnections - activeConnections,\n      maxConnections: this.config.maxConnections,\n      utilizationPercentage: Math.round((totalConnections / this.config.maxConnections) * 100),\n    };\n  }\n\n  /**\n   * Graceful shutdown\n   */\n  async shutdown(): Promise<void> {\n    logger.info('Shutting down database connection pool');\n\n    if (this.healthCheckTimer) {\n      clearInterval(this.healthCheckTimer);\n    }\n\n    this.pool.clear();\n    this.isInitialized = false;\n\n    logger.info('Database connection pool shutdown complete');\n  }\n\n  /**\n   * Utility function for waiting\n   */\n  private wait(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\n// Export singleton instance\nexport const connectionPool = new DatabaseConnectionPool();\n\n// Export convenience functions\nexport const getPooledConnection = (type?: 'anon' | 'service') =>\n  connectionPool.getConnection(type);\n\nexport const releasePooledConnection = (client: SupabaseClient) =>\n  connectionPool.releaseConnection(client);\n\nexport const getConnectionPoolStats = () => connectionPool.getStats();\n\n// connectionPool is already exported as 'export const' above\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/database/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/database/query-builders.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1032,1035],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1032,1035],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1794,1797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1794,1797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2510,2513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2510,2513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":500,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":500,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13628,13631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13628,13631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":500,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":500,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13636,13639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13636,13639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Database Query Builders - Consolidated Query Building Utilities\n *\n * @fileoverview Production-ready, reusable query building utilities that eliminate\n * duplicate query building patterns across repository services. Provides standardized\n * filtering, pagination, ordering, and search functionality for Supabase queries.\n *\n * @version 1.0.0\n * @since 2025-08-29\n * @author Citizenly Development Team\n */\n\nimport type { SupabaseClient } from '@supabase/supabase-js';\n\n// =============================================================================\n// QUERY BUILDER TYPES\n// =============================================================================\n\n/**\n * Standard search options for repositories\n */\nexport interface BaseSearchOptions {\n  /** Limit number of results */\n  limit?: number;\n  /** Offset for pagination */\n  offset?: number;\n  /** Field to order by */\n  orderBy?: string;\n  /** Order direction */\n  orderDirection?: 'asc' | 'desc';\n  /** Additional filters as key-value pairs */\n  filters?: Record<string, any>;\n}\n\n/**\n * Geographic filter options\n */\nexport interface GeographicFilterOptions {\n  barangay_code?: string;\n  city_municipality_code?: string;\n  province_code?: string;\n  region_code?: string;\n}\n\n/**\n * Name search options for person entities\n */\nexport interface NameSearchOptions {\n  first_name?: string;\n  middle_name?: string;\n  last_name?: string;\n  /** Full name search across all name fields */\n  name?: string;\n}\n\n/**\n * Date range filter options\n */\nexport interface DateRangeOptions {\n  /** Start date (inclusive) */\n  startDate?: string;\n  /** End date (inclusive) */\n  endDate?: string;\n  /** Date field to filter on */\n  dateField?: string;\n}\n\n/**\n * Query builder function type\n */\nexport type QueryBuilderFn = (supabase: SupabaseClient) => any;\n\n// =============================================================================\n// CORE QUERY BUILDERS\n// =============================================================================\n\n/**\n * Creates a basic select query builder\n */\nexport function createSelectQueryBuilder(\n  tableName: string,\n  selectFields: string = '*',\n  options: { count?: boolean } = {}\n): QueryBuilderFn {\n  return (supabase: SupabaseClient) => {\n    return supabase\n      .from(tableName)\n      .select(selectFields, { count: options.count ? 'exact' : undefined });\n  };\n}\n\n/**\n * Creates a single record query builder with filtering\n */\nexport function createFindByFieldQueryBuilder(\n  tableName: string,\n  field: string,\n  value: any,\n  selectFields: string = '*'\n): QueryBuilderFn {\n  return (supabase: SupabaseClient) => {\n    return supabase\n      .from(tableName)\n      .select(selectFields)\n      .eq(field, value)\n      .single();\n  };\n}\n\n/**\n * Creates a query builder with standard filtering, ordering, and pagination\n */\nexport function createSearchQueryBuilder(\n  tableName: string,\n  options: BaseSearchOptions = {},\n  selectFields: string = '*'\n): QueryBuilderFn {\n  return (supabase: SupabaseClient) => {\n    let query = supabase.from(tableName).select(selectFields, { count: 'exact' });\n\n    // Apply filters\n    if (options.filters) {\n      for (const [key, value] of Object.entries(options.filters)) {\n        if (value !== undefined && value !== null) {\n          query = query.eq(key, value);\n        }\n      }\n    }\n\n    // Apply ordering\n    if (options.orderBy) {\n      query = query.order(options.orderBy, {\n        ascending: options.orderDirection !== 'desc',\n      });\n    }\n\n    // Apply pagination\n    if (options.limit) {\n      query = query.limit(options.limit);\n    }\n\n    if (options.offset) {\n      query = query.range(options.offset, options.offset + (options.limit || 10) - 1);\n    }\n\n    return query;\n  };\n}\n\n// =============================================================================\n// SPECIALIZED QUERY BUILDERS\n// =============================================================================\n\n/**\n * Creates a geographic area query builder\n */\nexport function createGeographicQueryBuilder(\n  tableName: string,\n  geoOptions: GeographicFilterOptions,\n  baseOptions: BaseSearchOptions = {},\n  selectFields: string = '*'\n): QueryBuilderFn {\n  return (supabase: SupabaseClient) => {\n    let query = supabase.from(tableName).select(selectFields, { count: 'exact' });\n\n    // Geographic filters\n    if (geoOptions.barangay_code) {\n      query = query.eq('barangay_code', geoOptions.barangay_code);\n    }\n    if (geoOptions.city_municipality_code) {\n      query = query.eq('city_municipality_code', geoOptions.city_municipality_code);\n    }\n    if (geoOptions.province_code) {\n      query = query.eq('province_code', geoOptions.province_code);\n    }\n    if (geoOptions.region_code) {\n      query = query.eq('region_code', geoOptions.region_code);\n    }\n\n    // Apply base filters\n    if (baseOptions.filters) {\n      for (const [key, value] of Object.entries(baseOptions.filters)) {\n        if (value !== undefined && value !== null) {\n          query = query.eq(key, value);\n        }\n      }\n    }\n\n    // Apply ordering\n    if (baseOptions.orderBy) {\n      query = query.order(baseOptions.orderBy, {\n        ascending: baseOptions.orderDirection !== 'desc',\n      });\n    }\n\n    // Apply pagination\n    if (baseOptions.limit) {\n      query = query.limit(baseOptions.limit);\n    }\n\n    if (baseOptions.offset) {\n      query = query.range(baseOptions.offset, baseOptions.offset + (baseOptions.limit || 10) - 1);\n    }\n\n    return query;\n  };\n}\n\n/**\n * Creates a name search query builder for person entities\n */\nexport function createNameSearchQueryBuilder(\n  tableName: string,\n  nameOptions: NameSearchOptions,\n  baseOptions: BaseSearchOptions = {},\n  selectFields: string = '*'\n): QueryBuilderFn {\n  return (supabase: SupabaseClient) => {\n    let query = supabase.from(tableName).select(selectFields, { count: 'exact' });\n\n    // Name search logic\n    if (nameOptions.name) {\n      // Full name search across all name fields\n      const namePattern = `%${nameOptions.name}%`;\n      query = query.or(\n        `first_name.ilike.${namePattern},middle_name.ilike.${namePattern},last_name.ilike.${namePattern}`\n      );\n    } else {\n      // Individual name field searches\n      if (nameOptions.first_name) {\n        query = query.ilike('first_name', `%${nameOptions.first_name}%`);\n      }\n      if (nameOptions.middle_name) {\n        query = query.ilike('middle_name', `%${nameOptions.middle_name}%`);\n      }\n      if (nameOptions.last_name) {\n        query = query.ilike('last_name', `%${nameOptions.last_name}%`);\n      }\n    }\n\n    // Apply base filters\n    if (baseOptions.filters) {\n      for (const [key, value] of Object.entries(baseOptions.filters)) {\n        if (value !== undefined && value !== null) {\n          query = query.eq(key, value);\n        }\n      }\n    }\n\n    // Apply ordering\n    if (baseOptions.orderBy) {\n      query = query.order(baseOptions.orderBy, {\n        ascending: baseOptions.orderDirection !== 'desc',\n      });\n    } else {\n      // Default ordering for name searches\n      query = query.order('last_name').order('first_name');\n    }\n\n    // Apply pagination\n    if (baseOptions.limit) {\n      query = query.limit(baseOptions.limit);\n    }\n\n    if (baseOptions.offset) {\n      query = query.range(baseOptions.offset, baseOptions.offset + (baseOptions.limit || 10) - 1);\n    }\n\n    return query;\n  };\n}\n\n/**\n * Creates a date range query builder\n */\nexport function createDateRangeQueryBuilder(\n  tableName: string,\n  dateOptions: DateRangeOptions,\n  baseOptions: BaseSearchOptions = {},\n  selectFields: string = '*'\n): QueryBuilderFn {\n  return (supabase: SupabaseClient) => {\n    let query = supabase.from(tableName).select(selectFields, { count: 'exact' });\n\n    const dateField = dateOptions.dateField || 'created_at';\n\n    // Date range filters\n    if (dateOptions.startDate) {\n      query = query.gte(dateField, dateOptions.startDate);\n    }\n    if (dateOptions.endDate) {\n      query = query.lte(dateField, dateOptions.endDate);\n    }\n\n    // Apply base filters\n    if (baseOptions.filters) {\n      for (const [key, value] of Object.entries(baseOptions.filters)) {\n        if (value !== undefined && value !== null) {\n          query = query.eq(key, value);\n        }\n      }\n    }\n\n    // Apply ordering\n    if (baseOptions.orderBy) {\n      query = query.order(baseOptions.orderBy, {\n        ascending: baseOptions.orderDirection !== 'desc',\n      });\n    } else {\n      // Default ordering by date field\n      query = query.order(dateField, { ascending: false });\n    }\n\n    // Apply pagination\n    if (baseOptions.limit) {\n      query = query.limit(baseOptions.limit);\n    }\n\n    if (baseOptions.offset) {\n      query = query.range(baseOptions.offset, baseOptions.offset + (baseOptions.limit || 10) - 1);\n    }\n\n    return query;\n  };\n}\n\n/**\n * Creates an age range query builder (for birthdate filtering)\n */\nexport function createAgeRangeQueryBuilder(\n  tableName: string,\n  minAge: number,\n  maxAge: number,\n  baseOptions: BaseSearchOptions = {},\n  selectFields: string = '*'\n): QueryBuilderFn {\n  return (supabase: SupabaseClient) => {\n    const currentDate = new Date();\n    const maxBirthDate = new Date(\n      currentDate.getFullYear() - minAge,\n      currentDate.getMonth(),\n      currentDate.getDate()\n    );\n    const minBirthDate = new Date(\n      currentDate.getFullYear() - maxAge - 1,\n      currentDate.getMonth(),\n      currentDate.getDate()\n    );\n\n    let query = supabase\n      .from(tableName)\n      .select(selectFields, { count: 'exact' })\n      .gte('birthdate', minBirthDate.toISOString().split('T')[0])\n      .lte('birthdate', maxBirthDate.toISOString().split('T')[0]);\n\n    // Apply base filters\n    if (baseOptions.filters) {\n      for (const [key, value] of Object.entries(baseOptions.filters)) {\n        if (value !== undefined && value !== null) {\n          query = query.eq(key, value);\n        }\n      }\n    }\n\n    // Apply ordering\n    if (baseOptions.orderBy) {\n      query = query.order(baseOptions.orderBy, {\n        ascending: baseOptions.orderDirection !== 'desc',\n      });\n    } else {\n      // Default ordering by birthdate\n      query = query.order('birthdate');\n    }\n\n    // Apply pagination\n    if (baseOptions.limit) {\n      query = query.limit(baseOptions.limit);\n    }\n\n    if (baseOptions.offset) {\n      query = query.range(baseOptions.offset, baseOptions.offset + (baseOptions.limit || 10) - 1);\n    }\n\n    return query;\n  };\n}\n\n// =============================================================================\n// UTILITY QUERY BUILDERS\n// =============================================================================\n\n/**\n * Creates a text search query builder with multiple field support\n */\nexport function createTextSearchQueryBuilder(\n  tableName: string,\n  searchTerm: string,\n  searchFields: string[],\n  baseOptions: BaseSearchOptions = {},\n  selectFields: string = '*'\n): QueryBuilderFn {\n  return (supabase: SupabaseClient) => {\n    let query = supabase.from(tableName).select(selectFields, { count: 'exact' });\n\n    if (searchTerm && searchFields.length > 0) {\n      const searchPattern = `%${searchTerm}%`;\n      const searchConditions = searchFields\n        .map(field => `${field}.ilike.${searchPattern}`)\n        .join(',');\n      \n      query = query.or(searchConditions);\n    }\n\n    // Apply base filters\n    if (baseOptions.filters) {\n      for (const [key, value] of Object.entries(baseOptions.filters)) {\n        if (value !== undefined && value !== null) {\n          query = query.eq(key, value);\n        }\n      }\n    }\n\n    // Apply ordering\n    if (baseOptions.orderBy) {\n      query = query.order(baseOptions.orderBy, {\n        ascending: baseOptions.orderDirection !== 'desc',\n      });\n    }\n\n    // Apply pagination\n    if (baseOptions.limit) {\n      query = query.limit(baseOptions.limit);\n    }\n\n    if (baseOptions.offset) {\n      query = query.range(baseOptions.offset, baseOptions.offset + (baseOptions.limit || 10) - 1);\n    }\n\n    return query;\n  };\n}\n\n/**\n * Creates a boolean filter query builder\n */\nexport function createBooleanFilterQueryBuilder(\n  tableName: string,\n  booleanFilters: Record<string, boolean | null>,\n  baseOptions: BaseSearchOptions = {},\n  selectFields: string = '*'\n): QueryBuilderFn {\n  return (supabase: SupabaseClient) => {\n    let query = supabase.from(tableName).select(selectFields, { count: 'exact' });\n\n    // Apply boolean filters\n    for (const [field, value] of Object.entries(booleanFilters)) {\n      if (value !== undefined && value !== null) {\n        query = query.eq(field, value);\n      }\n    }\n\n    // Apply base filters\n    if (baseOptions.filters) {\n      for (const [key, value] of Object.entries(baseOptions.filters)) {\n        if (value !== undefined && value !== null) {\n          query = query.eq(key, value);\n        }\n      }\n    }\n\n    // Apply ordering\n    if (baseOptions.orderBy) {\n      query = query.order(baseOptions.orderBy, {\n        ascending: baseOptions.orderDirection !== 'desc',\n      });\n    }\n\n    // Apply pagination\n    if (baseOptions.limit) {\n      query = query.limit(baseOptions.limit);\n    }\n\n    if (baseOptions.offset) {\n      query = query.range(baseOptions.offset, baseOptions.offset + (baseOptions.limit || 10) - 1);\n    }\n\n    return query;\n  };\n}\n\n// =============================================================================\n// QUERY BUILDER COMBINATORS\n// =============================================================================\n\n/**\n * Combines multiple query builders into a single complex query\n */\nexport function combineQueryBuilders(\n  tableName: string,\n  builders: Array<(query: any) => any>,\n  selectFields: string = '*'\n): QueryBuilderFn {\n  return (supabase: SupabaseClient) => {\n    let query = supabase.from(tableName).select(selectFields, { count: 'exact' });\n\n    // Apply each builder function to the query\n    for (const builder of builders) {\n      query = builder(query);\n    }\n\n    return query;\n  };\n}\n\n// =============================================================================\n// REPOSITORY INTEGRATION HELPERS\n// =============================================================================\n\n/**\n * Pre-configured query builders for common repository patterns\n */\nexport const CommonQueryBuilders = {\n  /**\n   * Find by code pattern (common in household, resident repositories)\n   */\n  findByCode: (tableName: string, code: string) =>\n    createFindByFieldQueryBuilder(tableName, 'code', code),\n\n  /**\n   * Find by ID pattern (universal)\n   */\n  findById: (tableName: string, id: string) =>\n    createFindByFieldQueryBuilder(tableName, 'id', id),\n\n  /**\n   * Find by user ID pattern (common in profile repositories)\n   */\n  findByUserId: (tableName: string, userId: string) =>\n    createFindByFieldQueryBuilder(tableName, 'user_id', userId),\n\n  /**\n   * Find by household ID pattern\n   */\n  findByHouseholdId: (tableName: string, householdId: string) =>\n    createFindByFieldQueryBuilder(tableName, 'household_id', householdId),\n\n  /**\n   * Basic search with standard options\n   */\n  search: (tableName: string, options: BaseSearchOptions = {}) =>\n    createSearchQueryBuilder(tableName, options),\n\n  /**\n   * Geographic area search\n   */\n  searchGeographic: (\n    tableName: string,\n    geoOptions: GeographicFilterOptions,\n    baseOptions: BaseSearchOptions = {}\n  ) => createGeographicQueryBuilder(tableName, geoOptions, baseOptions),\n\n  /**\n   * Name-based search for people\n   */\n  searchByName: (\n    tableName: string,\n    nameOptions: NameSearchOptions,\n    baseOptions: BaseSearchOptions = {}\n  ) => createNameSearchQueryBuilder(tableName, nameOptions, baseOptions),\n} as const;\n\n// =============================================================================\n// USAGE EXAMPLES\n// =============================================================================\n\n/*\n// BEFORE (duplicate queryBuilder implementations):\n\n// In household-repository.ts\nconst queryBuilder = (supabase: SupabaseClient) => {\n  return supabase.from(this.tableName).select('*').eq('code', code).single();\n};\n\n// In resident-repository.ts  \nconst queryBuilder = (supabase: SupabaseClient) => {\n  return supabase.from(this.tableName).select('*').eq('code', code).single();\n};\n\n// AFTER (consolidated):\n\n// In both repositories\nconst queryBuilder = CommonQueryBuilders.findByCode(this.tableName, code);\n\n// Custom search example:\nconst queryBuilder = createSearchQueryBuilder(this.tableName, {\n  filters: { barangay_code: 'BR001' },\n  orderBy: 'created_at',\n  orderDirection: 'desc',\n  limit: 20,\n  offset: 0\n});\n*/","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/database/query-optimizer.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[496,499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[496,499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1174,1177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1174,1177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1253,1256],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1253,1256],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2236,2239],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2236,2239],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4614,4617],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4614,4617],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":167,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4769,4772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4769,4772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5187,5190],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5187,5190],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":283,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":283,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8359,8362],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8359,8362],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":283,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":283,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8371,8374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8371,8374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":348,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":348,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10301,10304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10301,10304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":466,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":466,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13586,13589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13586,13589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":484,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":484,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13972,13975],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13972,13975],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Database Query Optimizer\n * Performance optimization utilities for Supabase queries\n */\n\nimport { SupabaseClient } from '@supabase/supabase-js';\n\nimport { createLogger } from '@/lib/config/environment';\nimport { performanceMonitor } from '@/lib/monitoring/performance';\n\nconst logger = createLogger('QueryOptimizer');\n\ninterface QueryMetrics {\n  queryName: string;\n  executionTime: number;\n  resultCount: number;\n  cacheHit: boolean;\n  timestamp: number;\n}\n\ninterface QueryCache {\n  data: any;\n  timestamp: number;\n  ttl: number;\n  key: string;\n}\n\ninterface OptimizedQueryOptions {\n  cacheTTL?: number; // Cache time-to-live in ms\n  enableCache?: boolean;\n  enableMetrics?: boolean;\n  timeout?: number;\n  retryAttempts?: number;\n  batchSize?: number;\n}\n\nclass DatabaseQueryOptimizer {\n  private queryCache: Map<string, QueryCache> = new Map();\n  private queryMetrics: QueryMetrics[] = [];\n  private maxCacheSize = 1000;\n  private defaultCacheTTL = 5 * 60 * 1000; // 5 minutes\n\n  /**\n   * Execute an optimized query with caching and metrics\n   */\n  async executeQuery<T>(\n    client: SupabaseClient,\n    queryName: string,\n    queryFn: () => Promise<{ data: T; error: any }>,\n    options: OptimizedQueryOptions = {}\n  ): Promise<{ data: T; error: any; fromCache?: boolean }> {\n    const {\n      cacheTTL = this.defaultCacheTTL,\n      enableCache = true,\n      enableMetrics = true,\n      timeout = 10000,\n      retryAttempts = 2,\n    } = options;\n\n    const cacheKey = this.generateCacheKey(queryName, queryFn.toString());\n    const startTime = performance.now();\n\n    // Check cache first\n    if (enableCache) {\n      const cachedResult = this.getCachedResult<T>(cacheKey);\n      if (cachedResult) {\n        if (enableMetrics) {\n          this.recordMetrics({\n            queryName,\n            executionTime: performance.now() - startTime,\n            resultCount: Array.isArray(cachedResult.data) ? cachedResult.data.length : 1,\n            cacheHit: true,\n            timestamp: Date.now(),\n          });\n        }\n\n        logger.debug(`Cache hit for query: ${queryName}`, { cacheKey });\n        return { ...cachedResult, fromCache: true };\n      }\n    }\n\n    // Execute query with retry logic and timeout\n    let lastError: any = null;\n\n    for (let attempt = 1; attempt <= retryAttempts + 1; attempt++) {\n      try {\n        const result = await this.executeWithTimeout(queryFn, timeout);\n        const executionTime = performance.now() - startTime;\n\n        // Cache successful result\n        if (enableCache && !result.error) {\n          this.setCacheResult(cacheKey, result, cacheTTL);\n        }\n\n        // Record metrics\n        if (enableMetrics) {\n          this.recordMetrics({\n            queryName,\n            executionTime,\n            resultCount: Array.isArray(result.data) ? result.data.length : result.data ? 1 : 0,\n            cacheHit: false,\n            timestamp: Date.now(),\n          });\n        }\n\n        // Log performance warnings\n        if (executionTime > 2000) {\n          logger.warn(`Slow query detected: ${queryName}`, {\n            executionTime: Math.round(executionTime),\n            attempt,\n            cacheKey,\n          });\n        } else {\n          logger.debug(`Query executed: ${queryName}`, {\n            executionTime: Math.round(executionTime),\n            resultCount: Array.isArray(result.data) ? result.data.length : 1,\n          });\n        }\n\n        return { ...result, fromCache: false };\n      } catch (error) {\n        lastError = error;\n        logger.warn(`Query attempt ${attempt} failed for ${queryName}`, {\n          error: error instanceof Error ? error.message : 'Unknown error',\n          attempt,\n        });\n\n        // Wait before retry (exponential backoff)\n        if (attempt <= retryAttempts) {\n          await this.wait(Math.pow(2, attempt - 1) * 1000);\n        }\n      }\n    }\n\n    // All attempts failed\n    const executionTime = performance.now() - startTime;\n\n    if (enableMetrics) {\n      this.recordMetrics({\n        queryName,\n        executionTime,\n        resultCount: 0,\n        cacheHit: false,\n        timestamp: Date.now(),\n      });\n    }\n\n    logger.error(`Query failed after ${retryAttempts + 1} attempts: ${queryName}`, {\n      error: lastError instanceof Error ? lastError.message : 'Unknown error',\n      executionTime: Math.round(executionTime),\n    });\n\n    return { data: null as T, error: lastError };\n  }\n\n  /**\n   * Optimized batch query execution\n   */\n  async executeBatchQueries<T>(\n    client: SupabaseClient,\n    queries: Array<{\n      name: string;\n      queryFn: () => Promise<{ data: T; error: any }>;\n      options?: OptimizedQueryOptions;\n    }>,\n    options: { concurrency?: number; failFast?: boolean } = {}\n  ): Promise<Array<{ data: T; error: any; fromCache?: boolean }>> {\n    const { concurrency = 5, failFast = false } = options;\n\n    logger.info(`Executing batch queries`, {\n      count: queries.length,\n      concurrency,\n      failFast,\n    });\n\n    const batches: (typeof queries)[] = [];\n    for (let i = 0; i < queries.length; i += concurrency) {\n      batches.push(queries.slice(i, i + concurrency));\n    }\n\n    const results: Array<{ data: T; error: any; fromCache?: boolean }> = [];\n\n    for (const batch of batches) {\n      try {\n        const batchPromises = batch.map(({ name, queryFn, options }) =>\n          this.executeQuery(client, name, queryFn, options)\n        );\n\n        const batchResults = await Promise.allSettled(batchPromises);\n\n        for (const result of batchResults) {\n          if (result.status === 'fulfilled') {\n            results.push(result.value);\n          } else {\n            results.push({ data: null as T, error: result.reason });\n\n            if (failFast) {\n              logger.error('Batch query failed (fail-fast enabled)', {\n                error: result.reason,\n              });\n              throw new Error(`Batch query failed: ${result.reason}`);\n            }\n          }\n        }\n      } catch (error) {\n        if (failFast) {\n          throw error;\n        }\n        logger.warn('Batch execution error (continuing)', {\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Get dashboard statistics with optimized queries\n   */\n  async getDashboardStats(\n    client: SupabaseClient,\n    barangayCode: string,\n    options: OptimizedQueryOptions = {}\n  ) {\n    const queryName = `dashboard_stats_${barangayCode}`;\n\n    return this.executeQuery(\n      client,\n      queryName,\n      async () => {\n        // First try the pre-aggregated summary table\n        const { data: summaryData, error: summaryError } = await client\n          .from('system_dashboard_summaries')\n          .select('*')\n          .eq('barangay_code', barangayCode)\n          .single();\n\n        // If summary data exists and is recent (within 24 hours), use it\n        if (summaryData && !summaryError) {\n          const calculationDate = new Date(summaryData.calculation_date);\n          const daysSinceCalc = (Date.now() - calculationDate.getTime()) / (1000 * 60 * 60 * 24);\n\n          if (daysSinceCalc < 1) {\n            return { data: summaryData, error: null };\n          }\n        }\n\n        // Fallback to real-time calculation if no summary data or data is stale\n        logger.info(\n          `No recent summary data found for barangay ${barangayCode}, calculating real-time stats`\n        );\n\n        const { data: realTimeData, error: realTimeError } = await client.rpc(\n          'calculate_dashboard_stats',\n          {\n            p_barangay_code: barangayCode,\n          }\n        );\n\n        // If RPC function doesn't exist, use direct queries\n        if (realTimeError && realTimeError.message?.includes('function')) {\n          logger.warn('Dashboard RPC function not found, using direct queries');\n          return await this.calculateDashboardStatsDirectly(client, barangayCode);\n        }\n\n        return { data: realTimeData, error: realTimeError };\n      },\n      {\n        cacheTTL: 2 * 60 * 1000, // 2 minutes cache for dashboard\n        enableCache: true,\n        ...options,\n      }\n    );\n  }\n\n  /**\n   * Calculate dashboard statistics directly using queries\n   */\n  private async calculateDashboardStatsDirectly(\n    client: SupabaseClient,\n    barangayCode: string\n  ): Promise<{ data: any; error: any }> {\n    try {\n      // Get basic counts using proper Supabase count syntax\n      const { count: residentCount, error: residentError } = await client\n        .from('residents')\n        .select('households!inner(barangay_code)', { count: 'exact', head: true })\n        .eq('households.barangay_code', barangayCode)\n        .eq('is_active', true);\n\n      if (residentError) {\n        return { data: null, error: residentError };\n      }\n\n      const { count: householdCount, error: householdError } = await client\n        .from('households')\n        .select('*', { count: 'exact', head: true })\n        .eq('barangay_code', barangayCode)\n        .eq('is_active', true);\n\n      if (householdError) {\n        return { data: null, error: householdError };\n      }\n\n      // Calculate basic demographics\n      const { data: demographics, error: demoError } = await client\n        .from('residents')\n        .select(\n          `\n          sex,\n          birthdate,\n          civil_status,\n          employment_status,\n          households!inner(barangay_code)\n        `\n        )\n        .eq('households.barangay_code', barangayCode)\n        .eq('is_active', true);\n\n      if (demoError) {\n        return { data: null, error: demoError };\n      }\n\n      const now = new Date();\n      const stats = {\n        barangay_code: barangayCode,\n        calculation_date: now.toISOString().split('T')[0],\n        total_residents: residentCount || 0,\n        total_households: householdCount || 0,\n        male_count: 0,\n        female_count: 0,\n        age_0_14: 0,\n        age_15_64: 0,\n        age_65_plus: 0,\n        single_count: 0,\n        married_count: 0,\n        widowed_count: 0,\n        divorced_separated_count: 0,\n        employed_count: 0,\n        unemployed_count: 0,\n        student_count: 0,\n        retired_count: 0,\n      };\n\n      // Calculate demographics\n      if (demographics) {\n        demographics.forEach((resident: any) => {\n          // Sex distribution\n          if (resident.sex === 'male') stats.male_count++;\n          else if (resident.sex === 'female') stats.female_count++;\n\n          // Age groups\n          if (resident.birthdate) {\n            const age = now.getFullYear() - new Date(resident.birthdate).getFullYear();\n            if (age <= 14) stats.age_0_14++;\n            else if (age <= 64) stats.age_15_64++;\n            else stats.age_65_plus++;\n          }\n\n          // Civil status\n          switch (resident.civil_status) {\n            case 'single':\n              stats.single_count++;\n              break;\n            case 'married':\n              stats.married_count++;\n              break;\n            case 'widowed':\n              stats.widowed_count++;\n              break;\n            case 'divorced':\n            case 'separated':\n              stats.divorced_separated_count++;\n              break;\n          }\n\n          // Employment status\n          switch (resident.employment_status) {\n            case 'employed':\n            case 'self_employed':\n              stats.employed_count++;\n              break;\n            case 'unemployed':\n            case 'underemployed':\n            case 'looking_for_work':\n              stats.unemployed_count++;\n              break;\n            case 'student':\n              stats.student_count++;\n              break;\n            case 'retired':\n              stats.retired_count++;\n              break;\n          }\n        });\n      }\n\n      return { data: stats, error: null };\n    } catch (error) {\n      logger.error('Direct dashboard stats calculation failed', { error, barangayCode });\n      return { data: null, error };\n    }\n  }\n\n  /**\n   * Get resident data with pagination optimization\n   */\n  async getResidentsWithPagination(\n    client: SupabaseClient,\n    barangayCode: string,\n    page: number = 1,\n    limit: number = 50,\n    options: OptimizedQueryOptions = {}\n  ) {\n    const offset = (page - 1) * limit;\n    const queryName = `residents_paginated_${barangayCode}_${page}_${limit}`;\n\n    return this.executeQuery(\n      client,\n      queryName,\n      async () => {\n        // Optimized query with specific columns and joins\n        const { data, error } = await client\n          .from('residents')\n          .select(\n            `\n            id,\n            first_name,\n            last_name,\n            middle_name,\n            birthdate,\n            sex,\n            civil_status,\n            employment_status,\n            household_code,\n            households!inner(barangay_code)\n          `\n          )\n          .eq('households.barangay_code', barangayCode)\n          .eq('is_active', true)\n          .order('last_name', { ascending: true })\n          .range(offset, offset + limit - 1);\n\n        return { data, error };\n      },\n      {\n        cacheTTL: 1 * 60 * 1000, // 1 minute cache for resident lists\n        enableCache: true,\n        ...options,\n      }\n    );\n  }\n\n  /**\n   * Generate cache key for query\n   */\n  private generateCacheKey(queryName: string, queryString: string): string {\n    const hash = this.simpleHash(queryString);\n    return `${queryName}_${hash}`;\n  }\n\n  /**\n   * Get cached result if valid\n   */\n  private getCachedResult<T>(cacheKey: string): { data: T; error: any } | null {\n    const cached = this.queryCache.get(cacheKey);\n\n    if (cached && Date.now() - cached.timestamp < cached.ttl) {\n      return { data: cached.data, error: null };\n    }\n\n    // Clean expired cache\n    if (cached) {\n      this.queryCache.delete(cacheKey);\n    }\n\n    return null;\n  }\n\n  /**\n   * Set cached result\n   */\n  private setCacheResult(cacheKey: string, result: any, ttl: number): void {\n    // Clean cache if at capacity\n    if (this.queryCache.size >= this.maxCacheSize) {\n      this.cleanExpiredCache();\n    }\n\n    this.queryCache.set(cacheKey, {\n      data: result.data,\n      timestamp: Date.now(),\n      ttl,\n      key: cacheKey,\n    });\n  }\n\n  /**\n   * Clean expired cache entries\n   */\n  private cleanExpiredCache(): void {\n    const now = Date.now();\n    const expiredKeys: string[] = [];\n\n    this.queryCache.forEach((cache, key) => {\n      if (now - cache.timestamp >= cache.ttl) {\n        expiredKeys.push(key);\n      }\n    });\n\n    expiredKeys.forEach(key => {\n      this.queryCache.delete(key);\n    });\n\n    logger.debug(`Cleaned ${expiredKeys.length} expired cache entries`);\n  }\n\n  /**\n   * Record query metrics\n   */\n  private recordMetrics(metrics: QueryMetrics): void {\n    this.queryMetrics.push(metrics);\n\n    // Keep only last 1000 metrics\n    if (this.queryMetrics.length > 1000) {\n      this.queryMetrics = this.queryMetrics.slice(-1000);\n    }\n\n    // Track performance metrics\n    performanceMonitor.endMetric(`db_query_${metrics.queryName}`, {\n      executionTime: metrics.executionTime,\n      resultCount: metrics.resultCount,\n      cacheHit: metrics.cacheHit,\n    });\n  }\n\n  /**\n   * Execute query with timeout\n   */\n  private executeWithTimeout<T>(queryFn: () => Promise<T>, timeout: number): Promise<T> {\n    return new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        reject(new Error(`Query timeout after ${timeout}ms`));\n      }, timeout);\n\n      queryFn()\n        .then(result => {\n          clearTimeout(timeoutId);\n          resolve(result);\n        })\n        .catch(error => {\n          clearTimeout(timeoutId);\n          reject(error);\n        });\n    });\n  }\n\n  /**\n   * Simple hash function for cache keys\n   */\n  private simpleHash(str: string): string {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return Math.abs(hash).toString(36);\n  }\n\n  /**\n   * Utility wait function\n   */\n  private wait(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Get query performance metrics\n   */\n  getMetrics(): {\n    totalQueries: number;\n    averageExecutionTime: number;\n    cacheHitRate: number;\n    slowQueries: QueryMetrics[];\n    recentQueries: QueryMetrics[];\n  } {\n    const totalQueries = this.queryMetrics.length;\n    const totalExecutionTime = this.queryMetrics.reduce((sum, m) => sum + m.executionTime, 0);\n    const cacheHits = this.queryMetrics.filter(m => m.cacheHit).length;\n    const slowQueries = this.queryMetrics.filter(m => m.executionTime > 2000);\n    const recentQueries = this.queryMetrics.slice(-10);\n\n    return {\n      totalQueries,\n      averageExecutionTime: totalQueries > 0 ? totalExecutionTime / totalQueries : 0,\n      cacheHitRate: totalQueries > 0 ? (cacheHits / totalQueries) * 100 : 0,\n      slowQueries,\n      recentQueries,\n    };\n  }\n\n  /**\n   * Clear cache\n   */\n  clearCache(): void {\n    this.queryCache.clear();\n    logger.info('Query cache cleared');\n  }\n\n  /**\n   * Clear metrics\n   */\n  clearMetrics(): void {\n    this.queryMetrics = [];\n    logger.info('Query metrics cleared');\n  }\n}\n\n// Export singleton instance\nexport const queryOptimizer = new DatabaseQueryOptimizer();\n\n// queryOptimizer is already exported as 'export const' above\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/error-handling/ErrorBoundaries.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/error-handling/error-types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/error-handling/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/form-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[802,805],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[802,805],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1436,1439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1436,1439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1611,1614],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1611,1614],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2000,2003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2000,2003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2348,2351],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2348,2351],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2963,2966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2963,2966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3741,3744],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3741,3744],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4369,4372],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4369,4372],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4468,4471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4468,4471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":154,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4753,4756],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4753,4756],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":203,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6267,6270],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6267,6270],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":213,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6648,6651],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6648,6651],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":294,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":294,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8695,8698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8695,8698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":300,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8830,8833],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8830,8833],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":329,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":329,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9599,9602],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9599,9602],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Form Utilities - Consolidated Form Handling Functions\n *\n * @fileoverview Production-ready, reusable form handling utilities that eliminate\n * duplicate handleChange patterns across the Citizenly RBI system. Provides\n * type-safe, consistent form interaction patterns for all form components.\n *\n * @version 1.0.0\n * @since 2025-08-29\n * @author Citizenly Development Team\n */\n\nimport React from 'react';\n\n// =============================================================================\n// FORM HANDLER TYPES\n// =============================================================================\n\n/**\n * Generic form data updater function type\n */\nexport type FormDataUpdater<T> = (prev: T) => T;\n\n/**\n * Field-value update function type\n */\nexport type FieldValueUpdater<T> = (field: keyof T, value: any) => void;\n\n/**\n * Error state updater function type\n */\nexport type ErrorUpdater<T = Record<string, string>> = (errors: Partial<T>) => void;\n\n/**\n * Form validation function type\n */\nexport type FormValidator<T> = (data: T) => Record<string, string>;\n\n// =============================================================================\n// FORM CHANGE HANDLERS\n// =============================================================================\n\n/**\n * Creates a field-value change handler for form state management\n * Most common pattern used across form components\n */\nexport function createFieldChangeHandler<T extends Record<string, any>>(\n  setFormData: React.Dispatch<React.SetStateAction<T>>,\n  setErrors?: React.Dispatch<React.SetStateAction<Record<string, string>>>\n) {\n  return (field: keyof T, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    \n    // Clear field error when user starts typing\n    if (setErrors) {\n      setErrors(prev => ({ ...prev, [field as string]: '' }));\n    }\n  };\n}\n\n/**\n * Creates a standard event-based change handler\n * Used for direct input element event handling\n */\nexport function createEventChangeHandler<T extends Record<string, any>>(\n  setFormData: React.Dispatch<React.SetStateAction<T>>,\n  setErrors?: React.Dispatch<React.SetStateAction<Record<string, string>>>\n) {\n  return (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\n    const { name, value, type } = e.target;\n    \n    // Handle different input types\n    let processedValue: any = value;\n    if (type === 'checkbox') {\n      processedValue = (e.target as HTMLInputElement).checked;\n    } else if (type === 'number') {\n      processedValue = value === '' ? '' : Number(value);\n    }\n    \n    setFormData(prev => ({ ...prev, [name]: processedValue }));\n    \n    // Clear field error when user starts typing\n    if (setErrors) {\n      setErrors(prev => ({ ...prev, [name]: '' }));\n    }\n  };\n}\n\n/**\n * Creates a checkbox array change handler\n * Used for managing arrays of selected values (e.g., multi-select checkboxes)\n */\nexport function createCheckboxArrayHandler<T extends Record<string, any>>(\n  setFormData: React.Dispatch<React.SetStateAction<T>>,\n  field: keyof T,\n  setErrors?: React.Dispatch<React.SetStateAction<Record<string, string>>>\n) {\n  return (checked: boolean, value: string) => {\n    setFormData(prev => {\n      const currentArray = (prev[field] as string[]) || [];\n      const newArray = checked \n        ? [...currentArray, value]\n        : currentArray.filter(item => item !== value);\n      \n      return { ...prev, [field]: newArray };\n    });\n    \n    // Clear field error when user makes selection\n    if (setErrors) {\n      setErrors(prev => ({ ...prev, [field as string]: '' }));\n    }\n  };\n}\n\n/**\n * Creates a toggle/switch change handler\n * Used for boolean state management\n */\nexport function createToggleHandler<T extends Record<string, any>>(\n  setFormData: React.Dispatch<React.SetStateAction<T>>,\n  field: keyof T,\n  setErrors?: React.Dispatch<React.SetStateAction<Record<string, string>>>\n) {\n  return (checked: boolean) => {\n    setFormData(prev => ({ ...prev, [field]: checked }));\n    \n    // Clear field error when user makes selection\n    if (setErrors) {\n      setErrors(prev => ({ ...prev, [field as string]: '' }));\n    }\n  };\n}\n\n/**\n * Creates a component field change handler that calls parent onChange\n * Used in form components that pass changes up to parent components\n */\nexport function createComponentFieldChangeHandler<T extends Record<string, any>>(\n  currentValue: T,\n  onChange: (value: T) => void\n) {\n  return (field: keyof T, fieldValue: any) => {\n    onChange({\n      ...currentValue,\n      [field]: fieldValue,\n    });\n  };\n}\n\n/**\n * Creates a numeric field change handler with validation\n * Used for number inputs with optional min/max constraints\n */\nexport function createNumericChangeHandler<T extends Record<string, any>>(\n  setFormData: React.Dispatch<React.SetStateAction<T>>,\n  field: keyof T,\n  options: {\n    min?: number;\n    max?: number;\n    allowDecimals?: boolean;\n    setErrors?: React.Dispatch<React.SetStateAction<Record<string, string>>>;\n  } = {}\n) {\n  const { min, max, allowDecimals = true, setErrors } = options;\n  \n  return (value: string | number) => {\n    let numericValue: number | null = null;\n    \n    if (typeof value === 'string') {\n      if (value.trim() === '') {\n        numericValue = null;\n      } else {\n        const parsed = allowDecimals ? parseFloat(value) : parseInt(value, 10);\n        numericValue = isNaN(parsed) ? null : parsed;\n      }\n    } else {\n      numericValue = value;\n    }\n    \n    // Apply constraints\n    if (numericValue !== null) {\n      if (min !== undefined && numericValue < min) numericValue = min;\n      if (max !== undefined && numericValue > max) numericValue = max;\n    }\n    \n    setFormData(prev => ({ ...prev, [field]: numericValue }));\n    \n    // Clear field error when user starts typing\n    if (setErrors) {\n      setErrors(prev => ({ ...prev, [field as string]: '' }));\n    }\n  };\n}\n\n// =============================================================================\n// FORM SUBMISSION UTILITIES\n// =============================================================================\n\n/**\n * Creates a generic form submit handler\n * Used for standardizing form submission patterns across all forms\n */\nexport function createFormSubmitHandler<T extends Record<string, any>>(\n  formData: T,\n  setIsSubmitting: React.Dispatch<React.SetStateAction<boolean>>,\n  validator?: (data: T) => { isValid: boolean; errors: Record<string, string> },\n  setErrors?: React.Dispatch<React.SetStateAction<Record<string, string>>>\n) {\n  return async (\n    e: React.FormEvent,\n    onSubmit: (data: T) => Promise<void>,\n    onSuccess?: () => void,\n    onError?: (error: any) => void\n  ) => {\n    e.preventDefault();\n    \n    // Validate form if validator provided\n    if (validator) {\n      const validation = validator(formData);\n      if (!validation.isValid && setErrors) {\n        setErrors(validation.errors);\n        return;\n      }\n    }\n    \n    setIsSubmitting(true);\n    \n    try {\n      await onSubmit(formData);\n      onSuccess?.();\n    } catch (error) {\n      console.error('Form submission error:', error);\n      onError?.(error);\n      \n      // Set general error if setErrors available\n      if (setErrors) {\n        setErrors({ general: 'An error occurred. Please try again.' });\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n}\n\n// =============================================================================\n// FORM STATE UTILITIES\n// =============================================================================\n\n/**\n * Creates initial form state with error handling\n */\nexport function createInitialFormState<T>(initialData: T): {\n  formData: T;\n  errors: Record<string, string>;\n  isSubmitting: boolean;\n} {\n  return {\n    formData: initialData,\n    errors: {},\n    isSubmitting: false,\n  };\n}\n\n/**\n * Resets form state to initial values\n */\nexport function resetFormState<T>(\n  initialData: T,\n  setFormData: React.Dispatch<React.SetStateAction<T>>,\n  setErrors: React.Dispatch<React.SetStateAction<Record<string, string>>>,\n  setIsSubmitting: React.Dispatch<React.SetStateAction<boolean>>\n) {\n  setFormData(initialData);\n  setErrors({});\n  setIsSubmitting(false);\n}\n\n/**\n * Validates form data and updates error state\n */\nexport function validateAndSetErrors<T>(\n  formData: T,\n  validator: FormValidator<T>,\n  setErrors: React.Dispatch<React.SetStateAction<Record<string, string>>>\n): boolean {\n  const validationErrors = validator(formData);\n  setErrors(validationErrors);\n  return Object.keys(validationErrors).length === 0;\n}\n\n/**\n * Creates a debounced change handler to reduce frequent updates\n */\nexport function createDebouncedChangeHandler<T extends Record<string, any>>(\n  handler: FieldValueUpdater<T>,\n  delay: number = 300\n) {\n  let timeoutId: NodeJS.Timeout;\n  \n  return (field: keyof T, value: any) => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => {\n      handler(field, value);\n    }, delay);\n  };\n}\n\n// =============================================================================\n// FORM VALIDATION HELPERS\n// =============================================================================\n\n/**\n * Common validation patterns\n */\nexport const ValidationPatterns = {\n  email: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n  philippineMobile: /^(09|\\+639)\\d{9}$/,\n  philippineLandline: /^(\\(?\\d{2,3}\\)?[-\\s]?)?\\d{3}[-\\s]?\\d{4}$/,\n  numeric: /^\\d+$/,\n  decimal: /^\\d*\\.?\\d+$/,\n  alphanumeric: /^[a-zA-Z0-9]+$/,\n  alphanumericWithSpaces: /^[a-zA-Z0-9\\s]+$/,\n} as const;\n\n/**\n * Common validation functions\n */\nexport const ValidationHelpers = {\n  required: (value: any, fieldName: string) => \n    !value || (typeof value === 'string' && !value.trim()) \n      ? `${fieldName} is required` \n      : '',\n      \n  minLength: (value: string, min: number, fieldName: string) =>\n    value && value.length < min \n      ? `${fieldName} must be at least ${min} characters` \n      : '',\n      \n  maxLength: (value: string, max: number, fieldName: string) =>\n    value && value.length > max \n      ? `${fieldName} must not exceed ${max} characters` \n      : '',\n      \n  pattern: (value: string, pattern: RegExp, fieldName: string, message?: string) =>\n    value && !pattern.test(value) \n      ? message || `${fieldName} format is invalid` \n      : '',\n      \n  email: (value: string) =>\n    value && !ValidationPatterns.email.test(value) \n      ? 'Please enter a valid email address' \n      : '',\n      \n  philippineMobile: (value: string) =>\n    value && !ValidationPatterns.philippineMobile.test(value.replace(/\\s+/g, '')) \n      ? 'Please enter a valid Philippine mobile number' \n      : '',\n} as const;","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/forms/field-logic.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1553,1556],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1553,1556],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3237,3240],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3237,3240],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3268,3271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3268,3271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Form Field Logic Library\n *\n * @description Pure business logic for form fields, separated from UI components.\n * Contains field state logic, validation rules, and data transformation utilities.\n */\n\nimport type { FormMode } from '@/types/forms';\n\n/**\n * Helper function to determine if a field should be readonly\n */\nexport const isFieldReadOnly = (\n  fieldName: string,\n  mode: FormMode,\n  readOnlyFields: string[] = []\n): boolean => {\n  return mode === 'view' || readOnlyFields.includes(fieldName);\n};\n\n/**\n * Format date for display in readonly mode\n */\nexport const formatDateForDisplay = (dateValue: string | undefined): string => {\n  if (!dateValue) return '';\n\n  try {\n    return new Date(dateValue).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  } catch {\n    return dateValue; // Fallback to original value if parsing fails\n  }\n};\n\n/**\n * Format boolean value for display in readonly mode\n */\nexport const formatBooleanForDisplay = (value: boolean | undefined): string => {\n  return value ? 'Yes' : 'No';\n};\n\n/**\n * Get the display value for a select option\n */\nexport const getSelectDisplayValue = (\n  value: string | undefined,\n  options: Array<{ value: string; label: string }>\n): string => {\n  if (!value) return '';\n\n  const selectedOption = options.find(opt => opt.value === value);\n  return selectedOption?.label || value;\n};\n\n/**\n * Common field validation utilities\n */\nexport const fieldLogic = {\n  /**\n   * Validate required fields\n   */\n  validateRequired: (value: any, fieldName: string): string | null => {\n    if (!value || (typeof value === 'string' && value.trim() === '')) {\n      return `${fieldName} is required`;\n    }\n    return null;\n  },\n\n  /**\n   * Validate number ranges\n   */\n  validateNumberRange: (\n    value: number | undefined,\n    min?: number,\n    max?: number,\n    fieldName: string = 'Field'\n  ): string | null => {\n    if (value === undefined || value === null) return null;\n\n    if (min !== undefined && value < min) {\n      return `${fieldName} must be at least ${min}`;\n    }\n\n    if (max !== undefined && value > max) {\n      return `${fieldName} must be no more than ${max}`;\n    }\n\n    return null;\n  },\n\n  /**\n   * Validate date ranges\n   */\n  validateDateRange: (\n    value: string | undefined,\n    min?: string,\n    max?: string,\n    fieldName: string = 'Date'\n  ): string | null => {\n    if (!value) return null;\n\n    const dateValue = new Date(value);\n\n    if (min && dateValue < new Date(min)) {\n      return `${fieldName} must be after ${formatDateForDisplay(min)}`;\n    }\n\n    if (max && dateValue > new Date(max)) {\n      return `${fieldName} must be before ${formatDateForDisplay(max)}`;\n    }\n\n    return null;\n  },\n};\n\n/**\n * Field state management utilities\n */\nexport const fieldState = {\n  /**\n   * Get common field props based on mode and configuration\n   */\n  getFieldProps: (fieldName: string, mode: FormMode, readOnlyFields: string[] = []) => ({\n    isReadOnly: isFieldReadOnly(fieldName, mode, readOnlyFields),\n    isDisabled: mode === 'view',\n    isRequired: mode !== 'view', // Usually required in edit/create modes\n  }),\n\n  /**\n   * Get field validation state\n   */\n  getValidationState: (value: any, validators: Array<(value: any) => string | null>) => {\n    for (const validator of validators) {\n      const error = validator(value);\n      if (error) {\n        return { isValid: false, error };\n      }\n    }\n    return { isValid: true, error: null };\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/forms/field-renderers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/forms/form-handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[449,452],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[449,452],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[548,551],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[548,551],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[821,824],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[821,824],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[920,923],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[920,923],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1198,1201],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1198,1201],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2286,2289],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2286,2289],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3517,3520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3517,3520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3584,3587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3584,3587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3803,3806],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3803,3806],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Form Handlers Library\n *\n * @description Reusable form handling utilities for consistent form behavior\n * across the application. Provides type-safe handlers and validation helpers.\n */\n\nimport React from 'react';\n\nimport { logError } from '@/utils/errorUtils';\n\n/**\n * Generic field change handler factory\n * Creates a type-safe handler for updating nested object fields\n */\nexport function createFieldChangeHandler<T extends Record<string, any>>(\n  currentValue: T,\n  onChange: (value: T) => void\n) {\n  return (field: keyof T, fieldValue: any) => {\n    onChange({\n      ...currentValue,\n      [field]: fieldValue,\n    });\n  };\n}\n\n/**\n * Generic select change handler factory\n * Creates a handler specifically for select field option changes\n */\nexport function createSelectChangeHandler<T extends Record<string, any>>(\n  currentValue: T,\n  onChange: (value: T) => void\n) {\n  return (field: keyof T) => (option: any) => {\n    onChange({\n      ...currentValue,\n      [field]: option?.value || '',\n    });\n  };\n}\n\n/**\n * Boolean field change handler factory\n * Creates a handler specifically for checkbox/boolean fields\n */\nexport function createBooleanChangeHandler<T extends Record<string, any>>(\n  currentValue: T,\n  onChange: (value: T) => void\n) {\n  return (field: keyof T) => (checked: boolean) => {\n    onChange({\n      ...currentValue,\n      [field]: checked,\n    });\n  };\n}\n\n/**\n * Generic form submit handler factory\n * Creates a standardized form submission handler with error handling\n */\nexport function createFormSubmitHandler<T>(\n  onSubmit: (data: T) => void | Promise<void>,\n  formData: T,\n  options: {\n    validate?: (data: T) => boolean;\n    onError?: (error: Error) => void;\n    onSuccess?: () => void;\n  } = {}\n) {\n  return async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      // Run validation if provided\n      if (options.validate && !options.validate(formData)) {\n        return;\n      }\n\n      await onSubmit(formData);\n      options.onSuccess?.();\n    } catch (error) {\n      logError(error as Error, { component: 'FormSubmission' });\n      options.onError?.(error as Error);\n    }\n  };\n}\n\n/**\n * Field validation helper\n * Provides common validation patterns for form fields\n */\nexport const fieldValidators = {\n  required: (value: any, fieldName: string) => {\n    if (!value || (typeof value === 'string' && value.trim() === '')) {\n      return `${fieldName} is required`;\n    }\n    return null;\n  },\n\n  email: (value: string, fieldName: string) => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (value && !emailRegex.test(value)) {\n      return `${fieldName} must be a valid email address`;\n    }\n    return null;\n  },\n\n  phone: (value: string, fieldName: string) => {\n    const phoneRegex = /^(\\+\\d{1,3}[- ]?)?\\d{10}$/;\n    if (value && !phoneRegex.test(value.replace(/[^\\d+]/g, ''))) {\n      return `${fieldName} must be a valid phone number`;\n    }\n    return null;\n  },\n\n  minLength: (value: string, minLength: number, fieldName: string) => {\n    if (value && value.length < minLength) {\n      return `${fieldName} must be at least ${minLength} characters`;\n    }\n    return null;\n  },\n\n  maxLength: (value: string, maxLength: number, fieldName: string) => {\n    if (value && value.length > maxLength) {\n      return `${fieldName} must be no more than ${maxLength} characters`;\n    }\n    return null;\n  },\n};\n\n/**\n * Utility to build error object from validation results\n */\nexport function buildErrorsFromValidation<T extends Record<string, any>>(\n  data: T,\n  validationRules: Record<keyof T, Array<(value: any) => string | null>>\n): Partial<Record<keyof T, string>> {\n  const errors: Partial<Record<keyof T, string>> = {};\n\n  for (const [field, rules] of Object.entries(validationRules) as Array<\n    [keyof T, Array<(value: any) => string | null>]\n  >) {\n    for (const rule of rules) {\n      const error = rule(data[field]);\n      if (error) {\n        errors[field] = error;\n        break; // Stop at first error for this field\n      }\n    }\n  }\n\n  return errors;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/forms/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/hocUtils.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WrapperProps' is defined but never used.","line":31,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[853,856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[853,856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1592,1595],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1592,1595],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":96,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":99,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3093,3096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3093,3096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3483,3486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3483,3486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3507,3510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3507,3510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3613,3616],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3613,3616],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4016,4019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4016,4019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4531,4534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4531,4534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":173,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5209,5212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5209,5212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":180,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5426,5429],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5426,5429],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5610,5613],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5610,5613],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5657,5660],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5657,5660],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Higher-Order Component Utilities\n * \n * @fileoverview Consolidated utilities for creating Higher-Order Components (HOCs).\n * Eliminates duplicate WrappedComponent patterns across the codebase and provides\n * standardized component wrapping with proper displayName handling.\n * \n * @version 1.0.0\n * @since 2025-08-29\n * @author Citizenly Development Team\n */\n\n'use client';\n\nimport React from 'react';\n\n// =============================================================================\n// TYPES\n// =============================================================================\n\n/**\n * Generic wrapper component props\n */\nexport interface WrapperComponentProps {\n  children: React.ReactNode;\n}\n\n/**\n * HOC factory function type\n */\nexport type HOCFactory<WrapperProps, ComponentProps> = (\n  Component: React.ComponentType<ComponentProps>,\n  ...args: any[]\n) => React.ComponentType<ComponentProps>;\n\n/**\n * Component wrapper function type\n */\nexport type ComponentWrapper<T extends object> = (props: T) => React.ReactElement;\n\n// =============================================================================\n// CONSOLIDATED HOC UTILITY\n// =============================================================================\n\n/**\n * Creates a standardized wrapped component with proper displayName handling\n * Eliminates duplicate WrappedComponent patterns across all HOCs\n */\nexport function createWrappedComponent<P extends object>(\n  Component: React.ComponentType<P>,\n  WrapperComponent: React.ComponentType<WrapperComponentProps>,\n  wrapperDisplayName: string,\n  wrapperProps?: Record<string, any>\n): React.ComponentType<P> {\n  const WrappedComponent = (props: P) => (\n    <WrapperComponent {...wrapperProps}>\n      <Component {...props} />\n    </WrapperComponent>\n  );\n\n  // Standardized displayName pattern\n  WrappedComponent.displayName = `${wrapperDisplayName}(${\n    Component.displayName || Component.name || 'Anonymous'\n  })`;\n\n  return WrappedComponent;\n}\n\n/**\n * Advanced wrapped component creator with render prop support\n */\nexport function createWrappedComponentWithRender<P extends object>(\n  Component: React.ComponentType<P>,\n  renderWrapper: (children: React.ReactNode, props: P) => React.ReactElement,\n  wrapperDisplayName: string\n): React.ComponentType<P> {\n  const WrappedComponent = (props: P) => renderWrapper(<Component {...props} />, props);\n\n  WrappedComponent.displayName = `${wrapperDisplayName}(${\n    Component.displayName || Component.name || 'Anonymous'\n  })`;\n\n  return WrappedComponent;\n}\n\n/**\n * Creates a HOC with standardized WrappedComponent pattern\n */\nexport function createStandardHOC<WrapperProps, ComponentProps extends object>(\n  createWrapper: (wrapperProps: WrapperProps) => React.ComponentType<WrapperComponentProps>,\n  hocDisplayName: string\n) {\n  return function HOC(\n    Component: React.ComponentType<ComponentProps>,\n    wrapperProps: WrapperProps\n  ): React.ComponentType<ComponentProps> {\n    const WrapperComponent = createWrapper(wrapperProps);\n    return createWrappedComponent(Component, WrapperComponent, hocDisplayName, wrapperProps as any);\n  };\n}\n\n// =============================================================================\n// SPECIALIZED HOC CREATORS\n// =============================================================================\n\n/**\n * Creates error boundary HOC with consolidated WrappedComponent pattern\n */\nexport function createErrorBoundaryHOC<T extends object>(\n  ErrorBoundaryComponent: React.ComponentType<any>,\n  boundaryProps?: any\n) {\n  return function withErrorBoundary(\n    Component: React.ComponentType<T>,\n    additionalProps?: any\n  ): React.ComponentType<T> {\n    return createWrappedComponent(\n      Component,\n      ErrorBoundaryComponent,\n      'withErrorBoundary',\n      { ...boundaryProps, ...additionalProps }\n    );\n  };\n}\n\n/**\n * Creates lazy loading HOC with consolidated WrappedComponent pattern\n */\nexport function createLazyLoadingHOC(\n  SuspenseWrapper: React.ComponentType<WrapperComponentProps>,\n  suspenseProps?: any\n) {\n  return function withLazyLoading<T extends object>(\n    Component: React.ComponentType<T>,\n    loadingMessage?: string\n  ): React.ComponentType<T> {\n    return createWrappedComponent(\n      Component,\n      SuspenseWrapper,\n      'withLazyLoading',\n      { ...suspenseProps, loadingMessage }\n    );\n  };\n}\n\n/**\n * Creates monitoring HOC with consolidated WrappedComponent pattern\n */\nexport function createMonitoringHOC(\n  MonitoringWrapper: React.ComponentType<WrapperComponentProps>,\n  monitoringProps?: any\n) {\n  return function withMonitoring<T extends object>(\n    Component: React.ComponentType<T>,\n    componentName?: string\n  ): React.ComponentType<T> {\n    return createWrappedComponent(\n      Component,\n      MonitoringWrapper,\n      'withMonitoring',\n      { ...monitoringProps, componentName: componentName || Component.displayName || Component.name }\n    );\n  };\n}\n\n// =============================================================================\n// UTILITY FUNCTIONS\n// =============================================================================\n\n/**\n * Extracts component name for display purposes\n */\nexport function getComponentName(Component: React.ComponentType<any>): string {\n  return Component.displayName || Component.name || 'Anonymous';\n}\n\n/**\n * Creates standardized HOC displayName\n */\nexport function createHOCDisplayName(hocName: string, Component: React.ComponentType<any>): string {\n  return `${hocName}(${getComponentName(Component)})`;\n}\n\n/**\n * Validates that a component is a valid React component\n */\nexport function validateComponent(Component: any): asserts Component is React.ComponentType<any> {\n  if (typeof Component !== 'function' && typeof Component !== 'object') {\n    throw new Error(`Invalid component: Expected function or object, received ${typeof Component}`);\n  }\n}\n\n/**\n * Compose multiple HOCs into a single HOC\n */\nexport function composeHOCs<T extends object>(\n  ...hocs: Array<(Component: React.ComponentType<T>) => React.ComponentType<T>>\n) {\n  return function composedHOC(Component: React.ComponentType<T>): React.ComponentType<T> {\n    return hocs.reduceRight((acc, hoc) => hoc(acc), Component);\n  };\n}\n\n/**\n * Creates a memo-wrapped component with HOC pattern\n */\nexport function createMemoWrappedComponent<P extends object>(\n  Component: React.ComponentType<P>,\n  areEqual?: (prevProps: P, nextProps: P) => boolean\n): React.ComponentType<P> {\n  const MemoizedComponent = React.memo(Component, areEqual);\n  MemoizedComponent.displayName = `memo(${getComponentName(Component)})`;\n  return MemoizedComponent;\n}\n\n// =============================================================================\n// LEGACY COMPATIBILITY\n// =============================================================================\n\n/**\n * @deprecated Use createWrappedComponent instead\n * Provided for backward compatibility during migration\n */\nexport function legacyWrappedComponent<P extends object>(\n  Component: React.ComponentType<P>,\n  wrapper: (children: React.ReactNode) => React.ReactElement,\n  displayName: string\n): React.ComponentType<P> {\n  console.warn(\n    'legacyWrappedComponent is deprecated. Use createWrappedComponent or createWrappedComponentWithRender instead.'\n  );\n  \n  return createWrappedComponentWithRender(\n    Component,\n    (children) => wrapper(children),\n    displayName\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/keyboardUtils.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":229,"column":25,"nodeType":"Identifier","endLine":229,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Consolidated Keyboard Event Handling Utilities\n * \n * @fileoverview Eliminates duplicate handleKeyDown patterns across UI components.\n * Provides standardized keyboard interaction handlers for dropdowns, search,\n * and global shortcuts with proper event handling and accessibility support.\n * \n * @version 1.0.0\n * @since 2025-08-29\n * @author Citizenly Development Team\n */\n\n'use client';\n\nimport { useEffect, useCallback } from 'react';\n\n// =============================================================================\n// TYPES\n// =============================================================================\n\n/**\n * Base keyboard event handler type\n */\nexport type KeyboardEventHandler = (event: KeyboardEvent | React.KeyboardEvent) => void;\n\n/**\n * Key combination configuration\n */\nexport interface KeyCombination {\n  key: string;\n  ctrlKey?: boolean;\n  metaKey?: boolean;\n  shiftKey?: boolean;\n  altKey?: boolean;\n}\n\n/**\n * Dropdown navigation options\n */\nexport interface DropdownKeyboardOptions {\n  isOpen: boolean;\n  selectedIndex: number;\n  itemCount: number;\n  onOpen?: () => void;\n  onClose?: () => void;\n  onSelect?: (index: number) => void;\n  onNavigate?: (index: number) => void;\n  preventDefault?: boolean;\n}\n\n/**\n * Search keyboard options\n */\nexport interface SearchKeyboardOptions {\n  onSearch?: (query: string) => void;\n  onClear?: () => void;\n  onEscape?: () => void;\n  currentValue?: string;\n  preventDefault?: boolean;\n}\n\n/**\n * Global shortcut options\n */\nexport interface GlobalShortcutOptions {\n  enabled?: boolean;\n  preventDefault?: boolean;\n  stopPropagation?: boolean;\n}\n\n// =============================================================================\n// KEYBOARD UTILITIES\n// =============================================================================\n\n/**\n * Checks if a key combination matches the current event\n */\nexport function matchesKeyCombination(\n  event: KeyboardEvent | React.KeyboardEvent,\n  combination: KeyCombination\n): boolean {\n  return (\n    event.key === combination.key &&\n    !!event.ctrlKey === !!combination.ctrlKey &&\n    !!event.metaKey === !!combination.metaKey &&\n    !!event.shiftKey === !!combination.shiftKey &&\n    !!event.altKey === !!combination.altKey\n  );\n}\n\n/**\n * Creates a standardized dropdown navigation handler\n * Consolidates arrow key navigation, Enter selection, and Escape closing\n */\nexport function createDropdownKeyHandler(options: DropdownKeyboardOptions): KeyboardEventHandler {\n  return (event: KeyboardEvent | React.KeyboardEvent) => {\n    const {\n      isOpen,\n      selectedIndex,\n      itemCount,\n      onOpen,\n      onClose,\n      onSelect,\n      onNavigate,\n      preventDefault = true\n    } = options;\n\n    switch (event.key) {\n      case 'ArrowDown':\n        if (preventDefault) event.preventDefault();\n        if (!isOpen && onOpen) {\n          onOpen();\n        } else if (isOpen && onNavigate) {\n          const nextIndex = selectedIndex < itemCount - 1 ? selectedIndex + 1 : 0;\n          onNavigate(nextIndex);\n        }\n        break;\n\n      case 'ArrowUp':\n        if (preventDefault) event.preventDefault();\n        if (isOpen && onNavigate) {\n          const prevIndex = selectedIndex > 0 ? selectedIndex - 1 : itemCount - 1;\n          onNavigate(prevIndex);\n        }\n        break;\n\n      case 'Enter':\n        if (preventDefault) event.preventDefault();\n        if (isOpen && onSelect && selectedIndex >= 0) {\n          onSelect(selectedIndex);\n        } else if (!isOpen && onOpen) {\n          onOpen();\n        }\n        break;\n\n      case 'Escape':\n        if (preventDefault) event.preventDefault();\n        if (isOpen && onClose) {\n          onClose();\n        }\n        break;\n\n      case ' ': // Space key\n        if (preventDefault) event.preventDefault();\n        if (!isOpen && onOpen) {\n          onOpen();\n        }\n        break;\n    }\n  };\n}\n\n/**\n * Creates a standardized search input handler\n * Consolidates Enter search, Escape clear/blur, and input validation\n */\nexport function createSearchKeyHandler(options: SearchKeyboardOptions): KeyboardEventHandler {\n  return (event: KeyboardEvent | React.KeyboardEvent) => {\n    const {\n      onSearch,\n      onClear,\n      onEscape,\n      currentValue = '',\n      preventDefault = false\n    } = options;\n\n    switch (event.key) {\n      case 'Enter':\n        if (preventDefault) event.preventDefault();\n        if (onSearch && currentValue.trim()) {\n          onSearch(currentValue.trim());\n        }\n        break;\n\n      case 'Escape':\n        if (preventDefault) event.preventDefault();\n        if (currentValue && onClear) {\n          onClear();\n        } else if (onEscape) {\n          onEscape();\n        }\n        // Blur the input if it's focused\n        if (event.target instanceof HTMLElement) {\n          event.target.blur();\n        }\n        break;\n    }\n  };\n}\n\n/**\n * Creates a global keyboard shortcut handler\n * Consolidates Cmd/Ctrl+Key combinations with proper platform detection\n */\nexport function createGlobalShortcutHandler(\n  combinations: Array<{ combination: KeyCombination; handler: () => void }>,\n  options: GlobalShortcutOptions = {}\n): KeyboardEventHandler {\n  const { enabled = true, preventDefault = true, stopPropagation = true } = options;\n\n  return (event: KeyboardEvent | React.KeyboardEvent) => {\n    if (!enabled) return;\n\n    for (const { combination, handler } of combinations) {\n      if (matchesKeyCombination(event, combination)) {\n        if (preventDefault) event.preventDefault();\n        if (stopPropagation) event.stopPropagation();\n        handler();\n        break;\n      }\n    }\n  };\n}\n\n// =============================================================================\n// REACT HOOKS\n// =============================================================================\n\n/**\n * Hook for global keyboard shortcuts\n * Consolidates document-level keyboard event handling\n */\nexport function useGlobalKeyboard(\n  combinations: Array<{ combination: KeyCombination; handler: () => void }>,\n  options: GlobalShortcutOptions = {}\n) {\n  const { enabled = true } = options;\n\n  const handleKeyDown = useCallback(\n    createGlobalShortcutHandler(combinations, options),\n    [combinations, options]\n  );\n\n  useEffect(() => {\n    if (!enabled) return;\n\n    const handleEvent = (event: KeyboardEvent) => {\n      handleKeyDown(event);\n    };\n\n    document.addEventListener('keydown', handleEvent);\n    return () => document.removeEventListener('keydown', handleEvent);\n  }, [handleKeyDown, enabled]);\n}\n\n/**\n * Hook for command menu keyboard shortcuts\n * Standardized Cmd/Ctrl+K pattern with platform detection\n */\nexport function useCommandMenuShortcut(\n  onToggle: () => void,\n  enabled: boolean = true\n) {\n  const combinations = [\n    {\n      combination: { key: 'k', metaKey: true } as KeyCombination, // Mac: Cmd+K\n      handler: onToggle\n    },\n    {\n      combination: { key: 'k', ctrlKey: true } as KeyCombination, // Windows/Linux: Ctrl+K\n      handler: onToggle\n    }\n  ];\n\n  useGlobalKeyboard(combinations, { enabled });\n}\n\n// =============================================================================\n// ACCESSIBILITY HELPERS\n// =============================================================================\n\n/**\n * ARIA keyboard handler for custom interactive elements\n * Ensures proper accessibility for keyboard navigation\n */\nexport function createAriaKeyHandler(\n  element: HTMLElement | null,\n  options: {\n    role?: string;\n    onActivate?: () => void;\n    onEscape?: () => void;\n    allowEnterActivation?: boolean;\n    allowSpaceActivation?: boolean;\n  } = {}\n): KeyboardEventHandler {\n  const {\n    onActivate,\n    onEscape,\n    allowEnterActivation = true,\n    allowSpaceActivation = true\n  } = options;\n\n  return (event: KeyboardEvent | React.KeyboardEvent) => {\n    switch (event.key) {\n      case 'Enter':\n        if (allowEnterActivation && onActivate) {\n          event.preventDefault();\n          onActivate();\n        }\n        break;\n\n      case ' ':\n        if (allowSpaceActivation && onActivate) {\n          event.preventDefault();\n          onActivate();\n        }\n        break;\n\n      case 'Escape':\n        if (onEscape) {\n          event.preventDefault();\n          onEscape();\n        }\n        break;\n    }\n  };\n}\n\n// =============================================================================\n// COMMON KEY COMBINATIONS\n// =============================================================================\n\n/**\n * Pre-defined key combinations for common shortcuts\n */\nexport const COMMON_SHORTCUTS = {\n  COMMAND_PALETTE: [\n    { key: 'k', metaKey: true },\n    { key: 'k', ctrlKey: true }\n  ] as KeyCombination[],\n\n  SEARCH: [\n    { key: '/', ctrlKey: false, metaKey: false },\n    { key: 'f', ctrlKey: true },\n    { key: 'f', metaKey: true }\n  ] as KeyCombination[],\n\n  ESCAPE: [\n    { key: 'Escape' }\n  ] as KeyCombination[],\n\n  SAVE: [\n    { key: 's', ctrlKey: true },\n    { key: 's', metaKey: true }\n  ] as KeyCombination[]\n} as const;\n\n// =============================================================================\n// VALIDATION HELPERS\n// =============================================================================\n\n/**\n * Validates keyboard event target for input safety\n */\nexport function isValidKeyboardTarget(event: KeyboardEvent | React.KeyboardEvent): boolean {\n  const target = event.target as HTMLElement;\n  if (!target) return false;\n\n  // Don't interfere with form inputs unless explicitly handled\n  const tagName = target.tagName.toLowerCase();\n  const isInput = ['input', 'textarea', 'select'].includes(tagName);\n  const isContentEditable = target.contentEditable === 'true';\n\n  return !(isInput || isContentEditable);\n}\n\n/**\n * Platform detection for keyboard shortcuts\n */\nexport const PLATFORM = {\n  isMac: typeof window !== 'undefined' && /Mac|iPod|iPhone|iPad/.test(navigator.platform),\n  isWindows: typeof window !== 'undefined' && /Win/.test(navigator.platform),\n  modifierKey: typeof window !== 'undefined' && /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'metaKey' : 'ctrlKey'\n} as const;","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/logging/client-logger.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LogLevel' is defined but never used.","line":6,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LOG_LEVELS' is assigned a value but never used.","line":8,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":17},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":24,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":24,"endColumn":20,"suggestions":[{"fix":{"range":[610,664],"text":""},"messageId":"removeConsole","data":{"propertyName":"debug"},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":33,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":33,"endColumn":19,"suggestions":[{"fix":{"range":[807,859],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3839,3842],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3839,3842],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":153,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3888,3891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3888,3891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":196,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":196,"endColumn":18,"suggestions":[{"fix":{"range":[5123,5311],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Client-Side Logging Utility\n * Replaces console.log with structured logging for development and production\n */\n\nimport type { LogContext, LogLevel } from '@/types/errors';\n\nconst LOG_LEVELS = {\n  DEBUG: 'debug' as const,\n  INFO: 'info' as const,\n  WARN: 'warn' as const,\n  ERROR: 'error' as const,\n};\n\nclass ClientLogger {\n  private isDevelopment = process.env.NODE_ENV === 'development';\n  private isProduction = process.env.NODE_ENV === 'production';\n\n  /**\n   * Log debug information (development only)\n   */\n  debug(message: string, context?: LogContext): void {\n    if (this.isDevelopment) {\n      console.debug(`🐛 [DEBUG] ${message}`, context || '');\n    }\n  }\n\n  /**\n   * Log general information\n   */\n  info(message: string, context?: LogContext): void {\n    if (this.isDevelopment) {\n      console.info(`ℹ️ [INFO] ${message}`, context || '');\n    }\n\n    // In production, send to monitoring service\n    if (this.isProduction) {\n      this.sendToMonitoring('info', message, context);\n    }\n  }\n\n  /**\n   * Log warnings\n   */\n  warn(message: string, context?: LogContext): void {\n    if (this.isDevelopment) {\n      console.warn(`⚠️ [WARN] ${message}`, context || '');\n    }\n\n    // Always log warnings in production\n    if (this.isProduction) {\n      this.sendToMonitoring('warn', message, context);\n    }\n  }\n\n  /**\n   * Log errors\n   */\n  error(message: string, context?: LogContext): void {\n    if (this.isDevelopment) {\n      console.error(`🚨 [ERROR] ${message}`, context || '');\n    }\n\n    // Always log errors in production\n    if (this.isProduction) {\n      this.sendToMonitoring('error', message, context);\n    }\n  }\n\n  /**\n   * Log component lifecycle events\n   */\n  component(\n    component: string,\n    action: string,\n    data?: Record<string, string | number | boolean>\n  ): void {\n    this.debug(`Component ${component}: ${action}`, {\n      component,\n      action,\n      data,\n    });\n  }\n\n  /**\n   * Log API calls and responses\n   */\n  api(method: string, url: string, status?: number, duration?: number): void {\n    const message = `${method.toUpperCase()} ${url}`;\n    const context = { action: 'api_call', data: { method, url, status, duration } };\n\n    if (status && status >= 400) {\n      this.warn(`${message} - Status: ${status}`, context);\n    } else {\n      this.info(`${message} - Status: ${status || 'pending'}`, context);\n    }\n  }\n\n  /**\n   * Log user interactions\n   */\n  userAction(\n    action: string,\n    component?: string,\n    data?: Record<string, string | number | boolean>\n  ): void {\n    this.info(`User action: ${action}`, {\n      component,\n      action: 'user_interaction',\n      data,\n    });\n  }\n\n  /**\n   * Log search operations\n   */\n  search(searchTerm: string, component: string, resultsCount?: number): void {\n    this.info(`Search performed: \"${searchTerm}\"`, {\n      component,\n      action: 'search',\n      data: { searchTerm, resultsCount },\n    });\n  }\n\n  /**\n   * Log data loading operations\n   */\n  dataLoad(resource: string, count?: number, duration?: number): void {\n    this.info(`Data loaded: ${resource}`, {\n      action: 'data_load',\n      data: { resource, count, duration },\n    });\n  }\n\n  /**\n   * Send logs to monitoring service in production\n   */\n  private sendToMonitoring(level: string, message: string, context?: LogContext): void {\n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      level: level.toUpperCase(),\n      message,\n      context,\n      url: typeof window !== 'undefined' ? window.location?.href : 'server',\n      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'server',\n      environment: process.env.NODE_ENV,\n    };\n\n    // Send to external monitoring services based on configuration\n    if (this.isProduction) {\n      // Sentry integration\n      if (typeof window !== 'undefined' && (window as any).Sentry) {\n        const Sentry = (window as any).Sentry;\n\n        if (level === 'error') {\n          Sentry.captureException(context?.error || new Error(message), {\n            tags: { component: context?.component },\n            contexts: {\n              custom: {\n                action: context?.action,\n                data: context?.data,\n                url: logEntry.url,\n              },\n            },\n          });\n        } else if (level === 'warn') {\n          Sentry.captureMessage(message, 'warning');\n        }\n      }\n\n      // Custom API endpoint for structured logging\n      if (typeof window !== 'undefined') {\n        fetch('/api/logging', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(logEntry),\n        }).catch(() => {\n          // Silent fail - don't create logging loops\n        });\n      }\n    }\n\n    // Development: structured console output\n    if (this.isDevelopment) {\n      const colorMap = {\n        error: '\\x1b[31m', // Red\n        warn: '\\x1b[33m', // Yellow\n        info: '\\x1b[36m', // Cyan\n        debug: '\\x1b[90m', // Gray\n      };\n      const resetColor = '\\x1b[0m';\n      const color = colorMap[level as keyof typeof colorMap] || '';\n\n      console.log(`${color}[${logEntry.level}] ${logEntry.message}${resetColor}`, {\n        timestamp: logEntry.timestamp,\n        context: logEntry.context,\n        url: logEntry.url,\n      });\n    }\n  }\n}\n\n// Export singleton instance\nexport const clientLogger = new ClientLogger();\n\n// Export convenience methods\n/**\n * log Debug\n *\n * @description log Debug utility function\n * @returns {unknown} Function execution result\n */\nexport const logDebug = (message: string, context?: LogContext) =>\n  clientLogger.debug(message, context);\n/**\n * log Info\n *\n * @description log Info utility function\n * @returns {unknown} Function execution result\n */\nexport const logInfo = (message: string, context?: LogContext) =>\n  clientLogger.info(message, context);\n/**\n * log Warn\n *\n * @description log Warn utility function\n * @returns {unknown} Function execution result\n */\nexport const logWarn = (message: string, context?: LogContext) =>\n  clientLogger.warn(message, context);\n/**\n * log Error\n *\n * @description log Error utility function\n * @returns {unknown} Function execution result\n */\nexport const logError = (messageOrError: string | Error, context?: LogContext | string) => {\n  const message = messageOrError instanceof Error ? messageOrError.message : messageOrError;\n\n  // Handle string context by converting to LogContext\n  const normalizedContext: LogContext | undefined =\n    typeof context === 'string' ? { action: context } : context;\n\n  const errorContext =\n    messageOrError instanceof Error\n      ? { ...normalizedContext, error: messageOrError }\n      : normalizedContext;\n\n  return clientLogger.error(message, errorContext);\n};\n/**\n * log Component\n *\n * @description log Component utility function\n * @returns {unknown} Function execution result\n */\nexport const logComponent = (\n  component: string,\n  action: string,\n  data?: Record<string, string | number | boolean>\n) => clientLogger.component(component, action, data);\n/**\n * log Api\n *\n * @description log Api utility function\n * @returns {unknown} Function execution result\n */\nexport const logApi = (method: string, url: string, status?: number, duration?: number) =>\n  clientLogger.api(method, url, status, duration);\n/**\n * log User Action\n *\n * @description log User Action utility function\n * @returns {unknown} Function execution result\n */\nexport const logUserAction = (\n  action: string,\n  component?: string,\n  data?: Record<string, string | number | boolean>\n) => clientLogger.userAction(action, component, data);\n/**\n * log Search\n *\n * @description log Search utility function\n * @returns {unknown} Function execution result\n */\nexport const logSearch = (searchTerm: string, component: string, resultsCount?: number) =>\n  clientLogger.search(searchTerm, component, resultsCount);\n/**\n * log Data Load\n *\n * @description log Data Load utility function\n * @returns {unknown} Function execution result\n */\nexport const logDataLoad = (resource: string, count?: number, duration?: number) =>\n  clientLogger.dataLoad(resource, count, duration);\n\n// clientLogger is already exported as 'export const' above\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/logging/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/logging/secure-logger.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":127,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":127,"endColumn":20,"suggestions":[{"fix":{"range":[2949,3016],"text":""},"messageId":"removeConsole","data":{"propertyName":"debug"},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":134,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":134,"endColumn":19,"suggestions":[{"fix":{"range":[3184,3249],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Secure Logging Utility\n * Prevents sensitive data from being logged while maintaining debugging capability\n */\n\nimport type { LogLevel, SecureLogEntry as LogEntry } from '@/types/errors';\n\n// Sensitive field patterns to redact\nconst SENSITIVE_PATTERNS = [\n  /password/i,\n  /token/i,\n  /secret/i,\n  /key/i,\n  /philsys/i,\n  /card.?number/i,\n  /ssn/i,\n  /email/i,\n  /phone/i,\n  /mobile/i,\n  /address/i,\n  /birth/i,\n];\n\n// Fields that should be completely removed from logs\nconst RESTRICTED_FIELDS = [\n  'password',\n  'token',\n  'secret',\n  'philsys_card_number',\n  'philsys_card_number_hash',\n  'csrf_token',\n  'session_token',\n];\n\n/**\n * Sanitize data for logging by removing/masking sensitive information\n */\nfunction sanitizeForLogging(data: unknown): unknown {\n  if (data === null || data === undefined) {\n    return data;\n  }\n\n  if (typeof data === 'string') {\n    // Check if the string contains sensitive patterns\n    const isSensitive = SENSITIVE_PATTERNS.some(pattern => pattern.test(data));\n    return isSensitive ? '[REDACTED]' : data;\n  }\n\n  if (typeof data === 'number' || typeof data === 'boolean') {\n    return data;\n  }\n\n  if (Array.isArray(data)) {\n    return data.map(item => sanitizeForLogging(item));\n  }\n\n  if (typeof data === 'object') {\n    const sanitized: Record<string, unknown> = {};\n\n    for (const [key, value] of Object.entries(data)) {\n      // Remove completely restricted fields\n      if (RESTRICTED_FIELDS.some(field => key.toLowerCase().includes(field.toLowerCase()))) {\n        continue;\n      }\n\n      // Mask sensitive fields\n      const isSensitiveKey = SENSITIVE_PATTERNS.some(pattern => pattern.test(key));\n\n      if (isSensitiveKey) {\n        sanitized[key] = '[REDACTED]';\n      } else {\n        sanitized[key] = sanitizeForLogging(value);\n      }\n    }\n\n    return sanitized;\n  }\n\n  return data;\n}\n\n/**\n * Create a secure log entry\n */\nfunction createLogEntry(\n  level: LogLevel,\n  message: string,\n  data?: unknown,\n  context?: string\n): LogEntry {\n  return {\n    timestamp: new Date().toISOString(),\n    level,\n    message,\n    context,\n    sanitizedData: data ? (sanitizeForLogging(data) as Record<string, unknown>) : undefined,\n  };\n}\n\n/**\n * Check if logging should be enabled based on environment\n */\nfunction shouldLog(level: LogLevel): boolean {\n  const isDev = process.env.NODE_ENV === 'development';\n  const logLevel = process.env.LOG_LEVEL || (isDev ? 'debug' : 'warn');\n\n  const levels = ['debug', 'info', 'warn', 'error'];\n  const currentLevelIndex = levels.indexOf(logLevel);\n  const messageLevelIndex = levels.indexOf(level);\n\n  return messageLevelIndex >= currentLevelIndex;\n}\n\n/**\n * Secure logger class\n */\nclass SecureLogger {\n  private context?: string;\n\n  constructor(context?: string) {\n    this.context = context;\n  }\n\n  debug(message: string, data?: unknown): void {\n    if (shouldLog('debug')) {\n      const entry = createLogEntry('debug', message, data, this.context);\n      console.debug('[DEBUG]', entry.message, entry.sanitizedData || '');\n    }\n  }\n\n  info(message: string, data?: unknown): void {\n    if (shouldLog('info')) {\n      const entry = createLogEntry('info', message, data, this.context);\n      console.info('[INFO]', entry.message, entry.sanitizedData || '');\n    }\n  }\n\n  warn(message: string, data?: unknown): void {\n    if (shouldLog('warn')) {\n      const entry = createLogEntry('warn', message, data, this.context);\n      console.warn('[WARN]', entry.message, entry.sanitizedData || '');\n    }\n  }\n\n  error(message: string, data?: unknown): void {\n    if (shouldLog('error')) {\n      const entry = createLogEntry('error', message, data, this.context);\n      console.error('[ERROR]', entry.message, entry.sanitizedData || '');\n    }\n  }\n\n  /**\n   * Log user operations with automatic sanitization\n   */\n  userOperation(operation: string, userId?: string, data?: unknown): void {\n    this.info(`User operation: ${operation}`, {\n      userId: userId || 'anonymous',\n      operation,\n      data: sanitizeForLogging(data),\n    });\n  }\n\n  /**\n   * Log authentication events\n   */\n  authEvent(event: string, userId?: string, success: boolean = true): void {\n    this.info(`Auth event: ${event}`, {\n      userId: userId || 'anonymous',\n      event,\n      success,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * Log database operations without exposing sensitive data\n   */\n  databaseOperation(\n    operation: string,\n    table: string,\n    recordId?: string,\n    success: boolean = true\n  ): void {\n    this.info(`Database operation: ${operation}`, {\n      operation,\n      table,\n      recordId: recordId || 'unknown',\n      success,\n      timestamp: new Date().toISOString(),\n    });\n  }\n}\n\n// Create default logger instances\nexport const logger = new SecureLogger();\nexport const authLogger = new SecureLogger('AUTH');\nexport const dbLogger = new SecureLogger('DATABASE');\nexport const apiLogger = new SecureLogger('API');\n\n// Helper function to create contextual loggers\nexport function createLogger(context: string): SecureLogger {\n  return new SecureLogger(context);\n}\n\n// Utility functions for common logging patterns\nexport function logError(error: Error, context?: string): void {\n  const contextLogger = context ? createLogger(context) : logger;\n  contextLogger.error(error.message, {\n    name: error.name,\n    stack: error.stack,\n    context,\n  });\n}\n\nexport function logApiRequest(method: string, path: string, userId?: string): void {\n  apiLogger.info(`${method} ${path}`, {\n    method,\n    path,\n    userId: userId || 'anonymous',\n    timestamp: new Date().toISOString(),\n  });\n}\n\nexport function logSecurityEvent(\n  event: string,\n  severity: 'low' | 'medium' | 'high',\n  details?: Record<string, unknown>\n): void {\n  const logLevel = severity === 'high' ? 'error' : severity === 'medium' ? 'warn' : 'info';\n  logger[logLevel](`Security event: ${event}`, {\n    event,\n    severity,\n    details: sanitizeForLogging(details),\n    timestamp: new Date().toISOString(),\n  });\n}\n\n// Replace console.log for development debugging\nexport function debugLog(message: string, data?: unknown): void {\n  if (process.env.NODE_ENV === 'development') {\n    logger.debug(message, data);\n  }\n}\n\n// Safe replacement for console.log in production\nexport function safeLog(message: string, data?: unknown): void {\n  logger.info(message, data);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/middleware/auth-middleware.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":185,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5154,5157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5154,5157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5288,5291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5288,5291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Authentication Middleware\n * Centralized authentication handling for API routes\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\n\nimport { createPublicSupabaseClient, createAdminSupabaseClient } from '@/lib/data/client-factory';\nimport { createSecureErrorResponse } from '@/lib/security/api-security';\n\nexport interface AuthenticatedUser {\n  id: string;\n  email?: string;\n  role?: string;\n  barangay_code?: string | null;\n  city_municipality_code?: string | null;\n  province_code?: string | null;\n  region_code?: string | null;\n}\n\nexport interface AuthResult {\n  success: boolean;\n  user?: AuthenticatedUser;\n  error?: string;\n  response?: NextResponse;\n}\n\n/**\n * Extract and validate Bearer token from request\n */\nexport function extractToken(request: NextRequest): string | null {\n  const authHeader = request.headers.get('Authorization') || request.headers.get('authorization');\n\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return null;\n  }\n\n  return authHeader.split(' ')[1];\n}\n\n/**\n * Authenticate user with token and get profile\n */\nexport async function authenticateUser(request: NextRequest): Promise<AuthResult> {\n  const token = extractToken(request);\n\n  if (!token) {\n    return {\n      success: false,\n      error: 'No auth token provided',\n      response: createSecureErrorResponse('Unauthorized - No auth token', 401),\n    };\n  }\n\n  try {\n    // Verify token with public client\n    const supabase = createPublicSupabaseClient();\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser(token);\n\n    if (authError || !user) {\n      return {\n        success: false,\n        error: 'Invalid token',\n        response: createSecureErrorResponse('Unauthorized - Invalid token', 401),\n      };\n    }\n\n    // Get user profile with admin client\n    const supabaseAdmin = createAdminSupabaseClient();\n    const { data: profile, error: profileError } = await supabaseAdmin\n      .from('auth_user_profiles')\n      .select(\n        `\n        barangay_code,\n        city_municipality_code,\n        province_code,\n        region_code,\n        role_id,\n        auth_roles!inner(name)\n      `\n      )\n      .eq('id', user.id)\n      .single();\n\n    // Type the profile properly\n    type UserProfileResult = {\n      barangay_code: string | null;\n      city_municipality_code: string | null;\n      province_code: string | null;\n      region_code: string | null;\n      role_id: string;\n      auth_roles: { name: string };\n    };\n\n    if (profileError) {\n      console.warn('Profile fetch failed for user:', user.id, profileError.message);\n      return {\n        success: false,\n        error: 'Profile not found',\n        response: createSecureErrorResponse('Profile not found', 404),\n      };\n    }\n\n    const typedProfile = profile as UserProfileResult;\n\n    return {\n      success: true,\n      user: {\n        id: user.id,\n        email: user.email,\n        role: typedProfile.auth_roles?.name,\n        barangay_code: typedProfile.barangay_code,\n        city_municipality_code: typedProfile.city_municipality_code,\n        province_code: typedProfile.province_code,\n        region_code: typedProfile.region_code,\n        // role_id: typedProfile.role_id, // Not part of AuthenticatedUser interface\n      },\n    };\n  } catch (error) {\n    console.error('Authentication error:', error);\n    return {\n      success: false,\n      error: 'Authentication failed',\n      response: createSecureErrorResponse('Authentication failed', 500),\n    };\n  }\n}\n\n/**\n * Check if user has required role\n */\nexport function hasRole(user: AuthenticatedUser, requiredRoles: string[]): boolean {\n  return user.role ? requiredRoles.includes(user.role) : false;\n}\n\n/**\n * Check if user has admin permissions\n */\nexport function isAdmin(user: AuthenticatedUser): boolean {\n  return hasRole(user, ['super_admin', 'barangay_admin']);\n}\n\n/**\n * Authorize user for specific resource access\n */\nexport function authorizeResourceAccess(\n  user: AuthenticatedUser,\n  resourceBarangayCode?: string | null,\n  resourceCityCode?: string | null\n): { authorized: boolean; reason?: string } {\n  // Super admins can access everything\n  if (user.role === 'super_admin') {\n    return { authorized: true };\n  }\n\n  // Barangay admins can access their barangay and city\n  if (user.role === 'barangay_admin') {\n    if (resourceBarangayCode && user.barangay_code === resourceBarangayCode) {\n      return { authorized: true };\n    }\n    if (resourceCityCode && user.city_municipality_code === resourceCityCode) {\n      return { authorized: true };\n    }\n    return { authorized: false, reason: 'Insufficient permissions for this resource' };\n  }\n\n  // Regular users can only access their own data\n  if (user.role === 'user') {\n    if (resourceBarangayCode && user.barangay_code === resourceBarangayCode) {\n      return { authorized: true };\n    }\n    return { authorized: false, reason: 'Access denied for this resource' };\n  }\n\n  return { authorized: false, reason: 'Unknown role' };\n}\n\n/**\n * Higher-order function to protect API routes with authentication\n */\nexport function withAuth(\n  handler: (request: NextRequest, context: any, user: AuthenticatedUser) => Promise<NextResponse>,\n  requiredRoles?: string[]\n) {\n  return async (request: NextRequest, context: any): Promise<NextResponse> => {\n    const authResult = await authenticateUser(request);\n\n    if (!authResult.success || !authResult.user) {\n      return authResult.response || createSecureErrorResponse('Authentication failed', 401);\n    }\n\n    // Check role requirements\n    if (requiredRoles && !hasRole(authResult.user, requiredRoles)) {\n      return createSecureErrorResponse('Insufficient permissions', 403);\n    }\n\n    return handler(request, context, authResult.user);\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/middleware/cors-middleware.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1733,1736],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1733,1736],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1813,1816],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1813,1816],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * CORS Middleware\n * Handle Cross-Origin Resource Sharing for API routes\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\n\nconst ALLOWED_ORIGINS = [\n  process.env.NEXT_PUBLIC_APP_URL,\n  'http://localhost:3000',\n  'http://127.0.0.1:3000',\n  // Add production domains\n  'https://citizenly.ph',\n  'https://www.citizenly.ph',\n].filter(Boolean);\n\nconst ALLOWED_METHODS = ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'];\nconst ALLOWED_HEADERS = [\n  'Content-Type',\n  'Authorization',\n  'X-Requested-With',\n  'Accept',\n  'Origin',\n  'User-Agent',\n];\n\n/**\n * Add CORS headers to response\n */\nexport function addCorsHeaders(response: NextResponse, origin?: string | null): NextResponse {\n  // Check if origin is allowed\n  const isAllowedOrigin = !origin || ALLOWED_ORIGINS.includes(origin);\n\n  if (isAllowedOrigin && origin) {\n    response.headers.set('Access-Control-Allow-Origin', origin);\n  } else if (!origin) {\n    response.headers.set('Access-Control-Allow-Origin', '*');\n  }\n\n  response.headers.set('Access-Control-Allow-Methods', ALLOWED_METHODS.join(', '));\n  response.headers.set('Access-Control-Allow-Headers', ALLOWED_HEADERS.join(', '));\n  response.headers.set('Access-Control-Allow-Credentials', 'true');\n  response.headers.set('Access-Control-Max-Age', '86400'); // 24 hours\n\n  return response;\n}\n\n/**\n * Handle OPTIONS preflight requests\n */\nexport function handleCorsPreflightOptions(request: NextRequest): NextResponse {\n  const origin = request.headers.get('origin');\n  const response = new NextResponse(null, { status: 200 });\n\n  return addCorsHeaders(response, origin);\n}\n\n/**\n * Higher-order function to add CORS to API routes\n */\nexport function withCors(handler: (request: NextRequest, context: any) => Promise<NextResponse>) {\n  return async (request: NextRequest, context: any): Promise<NextResponse> => {\n    // Handle preflight OPTIONS requests\n    if (request.method === 'OPTIONS') {\n      return handleCorsPreflightOptions(request);\n    }\n\n    // Process the actual request\n    const response = await handler(request, context);\n\n    // Add CORS headers to the response\n    const origin = request.headers.get('origin');\n    return addCorsHeaders(response, origin);\n  };\n}\n\n/**\n * Validate origin for sensitive operations\n */\nexport function validateCorsOrigin(request: NextRequest): { valid: boolean; origin?: string } {\n  const origin = request.headers.get('origin');\n\n  // Allow same-origin requests (no origin header)\n  if (!origin) {\n    return { valid: true };\n  }\n\n  // Check against allowed origins\n  const isAllowed = ALLOWED_ORIGINS.includes(origin);\n\n  return {\n    valid: isAllowed,\n    origin,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/middleware/performance-middleware.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2607,2610],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2607,2610],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2688,2691],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2688,2691],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Performance Monitoring Middleware\n * Track API route performance and add optimization headers\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\n\nimport type { RequestPerformanceMetrics } from '@/types/performance';\n\n// In-memory performance store (use proper metrics service in production)\nconst performanceStore: RequestPerformanceMetrics[] = [];\nconst MAX_STORED_METRICS = 1000;\n\n/**\n * Record performance metrics\n */\nfunction recordMetrics(metrics: RequestPerformanceMetrics): void {\n  performanceStore.push(metrics);\n\n  // Keep only recent metrics\n  if (performanceStore.length > MAX_STORED_METRICS) {\n    performanceStore.shift();\n  }\n\n  // Log slow requests\n  if (metrics.duration > 1000) {\n    console.warn('🐌 Slow API request detected:', {\n      path: metrics.path,\n      method: metrics.method,\n      duration: `${metrics.duration}ms`,\n      statusCode: metrics.statusCode,\n    });\n  }\n}\n\n/**\n * Get performance statistics\n */\nexport function getPerformanceStats(): {\n  totalRequests: number;\n  averageResponseTime: number;\n  slowRequests: number;\n  recentMetrics: RequestPerformanceMetrics[];\n} {\n  const now = Date.now();\n  const recentMetrics = performanceStore.filter(m => now - m.timestamp < 60 * 60 * 1000); // Last hour\n\n  const totalRequests = recentMetrics.length;\n  const averageResponseTime =\n    totalRequests > 0 ? recentMetrics.reduce((sum, m) => sum + m.duration, 0) / totalRequests : 0;\n  const slowRequests = recentMetrics.filter(m => m.duration > 1000).length;\n\n  return {\n    totalRequests,\n    averageResponseTime: Math.round(averageResponseTime),\n    slowRequests,\n    recentMetrics: recentMetrics.slice(-10), // Last 10 requests\n  };\n}\n\n/**\n * Add performance optimization headers\n */\nfunction addPerformanceHeaders(response: NextResponse, duration: number): NextResponse {\n  // Server timing API\n  response.headers.set('Server-Timing', `total;dur=${duration}`);\n\n  // Cache control for different response types\n  const status = response.status;\n  if (status === 200) {\n    // Cache successful responses briefly\n    response.headers.set('Cache-Control', 'public, max-age=300, s-maxage=600');\n  } else if (status >= 400 && status < 500) {\n    // Don't cache client errors\n    response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n  } else if (status >= 500) {\n    // Don't cache server errors\n    response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n  }\n\n  return response;\n}\n\n/**\n * Performance monitoring middleware\n */\nexport function withPerformanceMonitoring(\n  handler: (request: NextRequest, context: any) => Promise<NextResponse>\n) {\n  return async (request: NextRequest, context: any): Promise<NextResponse> => {\n    const startTime = Date.now();\n    const path = new URL(request.url).pathname;\n\n    let response: NextResponse;\n    let error: Error | null = null;\n\n    try {\n      response = await handler(request, context);\n    } catch (err) {\n      error = err instanceof Error ? err : new Error('Unknown error');\n      response = NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n    }\n\n    const duration = Date.now() - startTime;\n\n    // Record metrics\n    const metrics: RequestPerformanceMetrics = {\n      path,\n      method: request.method,\n      duration,\n      timestamp: startTime,\n      statusCode: response.status,\n      userAgent: request.headers.get('user-agent') || undefined,\n      ip:\n        request.headers.get('x-forwarded-for')?.split(',')[0] ||\n        request.headers.get('x-real-ip') ||\n        undefined,\n    };\n\n    recordMetrics(metrics);\n\n    // Add performance headers\n    response = addPerformanceHeaders(response, duration);\n\n    // Add request ID for debugging\n    const requestId = `req_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;\n    response.headers.set('X-Request-ID', requestId);\n\n    // Log if there was an error\n    if (error) {\n      console.error('❌ API route error:', {\n        requestId,\n        path,\n        method: request.method,\n        duration: `${duration}ms`,\n        error: error.message,\n      });\n    }\n\n    return response;\n  };\n}\n\n/**\n * Database query performance tracking\n */\nexport class QueryPerformanceTracker {\n  private static queries: Array<{\n    query: string;\n    duration: number;\n    timestamp: number;\n  }> = [];\n\n  static startTracking(query: string): () => void {\n    const startTime = Date.now();\n\n    return () => {\n      const duration = Date.now() - startTime;\n      this.queries.push({\n        query,\n        duration,\n        timestamp: startTime,\n      });\n\n      // Keep only recent queries\n      if (this.queries.length > 500) {\n        this.queries.shift();\n      }\n\n      // Log slow queries\n      if (duration > 500) {\n        console.warn('🐌 Slow database query:', {\n          query: query.substring(0, 100) + (query.length > 100 ? '...' : ''),\n          duration: `${duration}ms`,\n        });\n      }\n    };\n  }\n\n  static getStats() {\n    const now = Date.now();\n    const recentQueries = this.queries.filter(q => now - q.timestamp < 60 * 60 * 1000);\n\n    return {\n      totalQueries: recentQueries.length,\n      averageQueryTime:\n        recentQueries.length > 0\n          ? Math.round(recentQueries.reduce((sum, q) => sum + q.duration, 0) / recentQueries.length)\n          : 0,\n      slowQueries: recentQueries.filter(q => q.duration > 500).length,\n    };\n  }\n}\n\n/**\n * Memory usage monitoring\n */\nexport function getMemoryUsage(): {\n  used: number;\n  total: number;\n  percentage: number;\n} {\n  const memUsage = process.memoryUsage();\n  const used = Math.round(memUsage.heapUsed / 1024 / 1024); // MB\n  const total = Math.round(memUsage.heapTotal / 1024 / 1024); // MB\n\n  return {\n    used,\n    total,\n    percentage: Math.round((used / total) * 100),\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/middleware/rate-limit-middleware.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3732,3735],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3732,3735],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3869,3872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3869,3872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Rate Limiting Middleware\n * Protect API routes from abuse and DoS attacks\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\n\nimport { createSecureErrorResponse } from '@/lib/security/api-security';\n\n// In-memory store for rate limiting (use Redis in production)\nconst rateLimitStore = new Map<string, { count: number; resetTime: number }>();\n\nexport interface RateLimitConfig {\n  windowMs: number; // Time window in milliseconds\n  maxRequests: number; // Maximum requests per window\n  skipSuccessfulRequests?: boolean; // Don't count successful requests\n  skipFailedRequests?: boolean; // Don't count failed requests\n}\n\n// Default rate limit configurations by endpoint type\nexport const rateLimitConfigs = {\n  // Public endpoints\n  search: { windowMs: 60 * 1000, maxRequests: 100 }, // 100 requests/minute\n  lookup: { windowMs: 60 * 1000, maxRequests: 200 }, // 200 requests/minute\n\n  // Authentication endpoints\n  auth: { windowMs: 15 * 60 * 1000, maxRequests: 10 }, // 10 requests/15 minutes\n\n  // CRUD operations\n  create: { windowMs: 60 * 1000, maxRequests: 10 }, // 10 creates/minute\n  update: { windowMs: 60 * 1000, maxRequests: 20 }, // 20 updates/minute\n  delete: { windowMs: 60 * 1000, maxRequests: 5 }, // 5 deletes/minute\n\n  // Admin operations\n  admin: { windowMs: 60 * 1000, maxRequests: 50 }, // 50 requests/minute\n\n  // Webhook endpoints\n  webhook: { windowMs: 60 * 1000, maxRequests: 100 }, // 100 webhooks/minute\n\n  // Default fallback\n  default: { windowMs: 60 * 1000, maxRequests: 60 }, // 60 requests/minute\n} as const;\n\n/**\n * Get client identifier for rate limiting\n */\nfunction getClientId(request: NextRequest): string {\n  // Try to get authenticated user ID first\n  const authHeader = request.headers.get('Authorization');\n  if (authHeader?.startsWith('Bearer ')) {\n    // Use token hash as identifier (would need to decode in real implementation)\n    const token = authHeader.split(' ')[1];\n    return `user:${token.substring(0, 16)}`; // First 16 chars as identifier\n  }\n\n  // Fall back to IP address\n  const forwarded = request.headers.get('x-forwarded-for');\n  const ip = forwarded ? forwarded.split(',')[0] : request.headers.get('x-real-ip') || 'unknown';\n  return `ip:${ip}`;\n}\n\n/**\n * Check rate limit for client\n */\nexport function checkRateLimit(\n  clientId: string,\n  config: RateLimitConfig\n): { allowed: boolean; remaining: number; resetTime: number } {\n  const now = Date.now();\n  const key = clientId;\n  const existing = rateLimitStore.get(key);\n\n  // If no existing record or window has expired, create new\n  if (!existing || now > existing.resetTime) {\n    const resetTime = now + config.windowMs;\n    rateLimitStore.set(key, { count: 1, resetTime });\n    return {\n      allowed: true,\n      remaining: config.maxRequests - 1,\n      resetTime,\n    };\n  }\n\n  // Check if limit exceeded\n  if (existing.count >= config.maxRequests) {\n    return {\n      allowed: false,\n      remaining: 0,\n      resetTime: existing.resetTime,\n    };\n  }\n\n  // Increment count\n  existing.count++;\n  rateLimitStore.set(key, existing);\n\n  return {\n    allowed: true,\n    remaining: config.maxRequests - existing.count,\n    resetTime: existing.resetTime,\n  };\n}\n\n/**\n * Clean up expired rate limit entries\n */\nexport function cleanupRateLimitStore(): void {\n  const now = Date.now();\n  const entries = Array.from(rateLimitStore.entries());\n  for (const [key, value] of entries) {\n    if (now > value.resetTime) {\n      rateLimitStore.delete(key);\n    }\n  }\n}\n\n// Clean up every 5 minutes\nif (typeof setInterval !== 'undefined') {\n  setInterval(cleanupRateLimitStore, 5 * 60 * 1000);\n}\n\n/**\n * Rate limiting middleware\n */\nexport function withRateLimit(\n  handler: (request: NextRequest, context: any) => Promise<NextResponse>,\n  configKey: keyof typeof rateLimitConfigs = 'default'\n) {\n  return async (request: NextRequest, context: any): Promise<NextResponse> => {\n    const config = rateLimitConfigs[configKey];\n    const clientId = getClientId(request);\n    const rateLimitResult = checkRateLimit(clientId, config);\n\n    // Create response with rate limit headers\n    let response: NextResponse;\n\n    if (!rateLimitResult.allowed) {\n      response = createSecureErrorResponse('Rate limit exceeded. Too many requests.', 429);\n    } else {\n      response = await handler(request, context);\n    }\n\n    // Add rate limit headers\n    response.headers.set('X-RateLimit-Limit', config.maxRequests.toString());\n    response.headers.set('X-RateLimit-Remaining', rateLimitResult.remaining.toString());\n    response.headers.set(\n      'X-RateLimit-Reset',\n      Math.ceil(rateLimitResult.resetTime / 1000).toString()\n    );\n    response.headers.set(\n      'Retry-After',\n      Math.ceil((rateLimitResult.resetTime - Date.now()) / 1000).toString()\n    );\n\n    return response;\n  };\n}\n\n/**\n * Get rate limit status for monitoring\n */\nexport function getRateLimitStats(): {\n  totalClients: number;\n  entries: Array<{ clientId: string; count: number; resetTime: number }>;\n} {\n  const entries: Array<{ clientId: string; count: number; resetTime: number }> = [];\n  rateLimitStore.forEach((data, clientId) => {\n    entries.push({\n      clientId,\n      count: data.count,\n      resetTime: data.resetTime,\n    });\n  });\n\n  return {\n    totalClients: rateLimitStore.size,\n    entries,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/monitoring/components/ErrorBoundaryProvider.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ReactNode' is defined but never used.","line":8,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":37},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":39,"column":11,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1493,1616],"text":"\n        We&apos;ve encountered an unexpected error. Our team has been notified and is working to fix this\n        issue.\n      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1493,1616],"text":"\n        We&lsquo;ve encountered an unexpected error. Our team has been notified and is working to fix this\n        issue.\n      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1493,1616],"text":"\n        We&#39;ve encountered an unexpected error. Our team has been notified and is working to fix this\n        issue.\n      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1493,1616],"text":"\n        We&rsquo;ve encountered an unexpected error. Our team has been notified and is working to fix this\n        issue.\n      "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Error Boundary Provider Component\n * Global error boundary with monitoring integration\n */\n\n'use client';\n\nimport React, { Component, ReactNode } from 'react';\n\nimport { createWrappedComponent } from '@/lib/hocUtils';\nimport { clientLogger } from '@/lib/logging/client-logger';\nimport type { ErrorBoundaryProviderProps, ErrorFallbackProps } from '@/types/components';\nimport type { ErrorBoundaryState } from '@/types/errors';\n\nimport { captureError, addSentryBreadcrumb } from '../sentry-config';\n\n/**\n * Default error fallback component\n */\nconst DefaultErrorFallback: React.FC<ErrorFallbackProps> = ({ error, errorId, resetError }) => (\n  <div className=\"flex min-h-screen items-center justify-center bg-gray-50\">\n    <div className=\"w-full max-w-md rounded-lg bg-white p-6 shadow-lg\">\n      <div className=\"mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-red-100\">\n        <svg className=\"h-6 w-6 text-red-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"\n          />\n        </svg>\n      </div>\n\n      <h2 className=\"mb-2 text-center text-lg font-semibold text-gray-900\">\n        Oops! Something went wrong\n      </h2>\n\n      <p className=\"mb-4 text-center text-sm text-gray-600\">\n        We've encountered an unexpected error. Our team has been notified and is working to fix this\n        issue.\n      </p>\n\n      <div className=\"mb-4 rounded bg-gray-50 p-3\">\n        <p className=\"mb-1 text-xs text-gray-500\">Error ID: {errorId}</p>\n        <p className=\"font-mono text-xs text-red-600\">{error.message}</p>\n      </div>\n\n      <div className=\"flex space-x-3\">\n        <button\n          onClick={resetError}\n          className=\"flex-1 rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:outline-none\"\n        >\n          Try Again\n        </button>\n\n        <button\n          onClick={() => window.location.reload()}\n          className=\"flex-1 rounded-md bg-gray-600 px-4 py-2 text-sm font-medium text-white hover:bg-gray-700 focus:ring-2 focus:ring-gray-500 focus:outline-none\"\n        >\n          Reload Page\n        </button>\n      </div>\n\n      <div className=\"mt-4 text-center\">\n        <a href=\"/support\" className=\"text-xs text-blue-600 underline hover:text-blue-800\">\n          Contact Support\n        </a>\n      </div>\n    </div>\n  </div>\n);\n\n/**\n * Error Boundary Provider Class Component\n */\nexport class ErrorBoundaryProvider extends Component<\n  ErrorBoundaryProviderProps,\n  ErrorBoundaryState\n> {\n  constructor(props: ErrorBoundaryProviderProps) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: undefined,\n      errorId: undefined,\n    };\n  }\n\n  static getDerivedStateFromError(error: Error): Partial<ErrorBoundaryState> {\n    const errorId = `ERR_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n    return {\n      hasError: true,\n      error,\n      errorId,\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    const { onError, enableReporting = true } = this.props;\n    const { errorId } = this.state;\n\n    // Log error locally\n    clientLogger.error(`React Error Boundary caught error: ${error.message}`, {\n      component: 'ErrorBoundary',\n      action: 'error_caught',\n      error,\n      data: {\n        errorId,\n        componentStack: errorInfo.componentStack,\n        errorBoundary: true,\n      },\n    });\n\n    // Add breadcrumb for debugging\n    addSentryBreadcrumb(`Error boundary caught: ${error.message}`, 'error_boundary', 'error');\n\n    // Report to monitoring service\n    if (enableReporting) {\n      captureError(error, {\n        errorId,\n        componentStack: errorInfo.componentStack,\n        errorBoundary: true,\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    // Call custom error handler\n    if (onError) {\n      try {\n        onError(error, errorInfo);\n      } catch (handlerError) {\n        clientLogger.error('Error in error boundary handler', {\n          action: 'error_boundary_handler_error',\n          data: {\n            error: handlerError instanceof Error ? handlerError.message : String(handlerError),\n            originalError: error.message,\n          },\n        });\n      }\n    }\n  }\n\n  resetError = () => {\n    this.setState({\n      hasError: false,\n      error: undefined,\n      errorId: undefined,\n    });\n\n    clientLogger.info('Error boundary reset', {\n      component: 'ErrorBoundary',\n      action: 'error_reset',\n    });\n\n    addSentryBreadcrumb('Error boundary reset', 'error_boundary', 'info');\n  };\n\n  render() {\n    const { hasError, error, errorId } = this.state;\n    const { children, fallback: FallbackComponent = DefaultErrorFallback } = this.props;\n\n    if (hasError && error && errorId) {\n      return <FallbackComponent error={error} errorId={errorId} resetError={this.resetError} />;\n    }\n\n    return children;\n  }\n}\n\n/**\n * Higher-order component for wrapping components with error boundary\n */\nexport function withErrorBoundary<P extends object>(\n  Component: React.ComponentType<P>,\n  options?: Partial<ErrorBoundaryProviderProps>\n) {\n  return createWrappedComponent(\n    Component,\n    ErrorBoundaryProvider,\n    'withErrorBoundary',\n    options\n  );\n}\n\nexport default ErrorBoundaryProvider;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/monitoring/hooks/useErrorBoundary.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[545,548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[545,548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1405,1408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1405,1408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Error Boundary React Hook\n * Enhanced error handling and reporting for React components\n */\n\nimport { useCallback, useState } from 'react';\n\nimport { clientLogger } from '@/lib/logging/client-logger';\nimport type { ErrorBoundaryState } from '@/types/errors';\nimport type { UseErrorBoundaryOptions, ErrorBoundaryReturn } from '@/types/hooks';\n\nimport { captureError, addSentryBreadcrumb } from '../sentry-config';\n\n// Extended error boundary state for hook usage\ninterface HookErrorBoundaryState extends ErrorBoundaryState {\n  errorInfo?: any;\n}\n\n/**\n * Hook for enhanced error handling and reporting\n */\nexport const useErrorBoundary = (options: UseErrorBoundaryOptions): ErrorBoundaryReturn => {\n  const { componentName, onError, enableReporting = true } = options;\n\n  const [errorState, setErrorState] = useState<HookErrorBoundaryState>({\n    hasError: false,\n    error: undefined,\n    errorInfo: undefined,\n  });\n\n  const resetError = useCallback(() => {\n    setErrorState({\n      hasError: false,\n      error: undefined,\n      errorInfo: undefined,\n    });\n\n    clientLogger.info(`Error boundary reset in ${componentName}`, {\n      component: componentName,\n      action: 'error_reset',\n    });\n\n    addSentryBreadcrumb(`Error boundary reset in ${componentName}`, 'error_boundary', 'info');\n  }, [componentName]);\n\n  const handleError = useCallback(\n    (error: Error, context?: Record<string, any>) => {\n      const errorInfo = {\n        component: componentName,\n        timestamp: new Date().toISOString(),\n        ...context,\n      };\n\n      setErrorState({\n        hasError: true,\n        error,\n        errorInfo,\n      });\n\n      // Log error locally\n      clientLogger.error(`Error in ${componentName}: ${error.message}`, {\n        component: componentName,\n        action: 'component_error',\n        error,\n        data: context,\n      });\n\n      // Add breadcrumb for debugging\n      addSentryBreadcrumb(`Error in ${componentName}: ${error.message}`, 'error_boundary', 'error');\n\n      // Report to monitoring service\n      if (enableReporting) {\n        captureError(error, {\n          component: componentName,\n          errorBoundary: true,\n          ...context,\n        });\n      }\n\n      // Call custom error handler\n      if (onError) {\n        try {\n          onError(error, errorInfo);\n        } catch (handlerError) {\n          clientLogger.error('Error in custom error handler', {\n            action: 'custom_error_handler_error',\n            data: {\n              component: componentName,\n              error: handlerError instanceof Error ? handlerError.message : String(handlerError),\n              originalError: error.message,\n            },\n          });\n        }\n      }\n    },\n    [componentName, onError, enableReporting]\n  );\n\n  // Wrapper for async operations with automatic error handling\n  const wrapAsync = useCallback(\n    async <T>(\n      operation: () => Promise<T>,\n      operationName: string = 'async_operation'\n    ): Promise<T> => {\n      try {\n        addSentryBreadcrumb(\n          `Starting ${operationName} in ${componentName}`,\n          'async_operation',\n          'info'\n        );\n\n        const result = await operation();\n\n        addSentryBreadcrumb(\n          `Completed ${operationName} in ${componentName}`,\n          'async_operation',\n          'info'\n        );\n\n        return result;\n      } catch (error) {\n        const errorObj = error instanceof Error ? error : new Error(String(error));\n\n        handleError(errorObj, {\n          operation: operationName,\n          type: 'async_error',\n        });\n\n        throw errorObj;\n      }\n    },\n    [componentName, handleError]\n  );\n\n  return {\n    error: errorState.error || null,\n    hasError: errorState.hasError,\n    resetError,\n    captureError: handleError,\n    wrapAsync,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/monitoring/hooks/usePerformanceTracking.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2788,2791],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2788,2791],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3310,3313],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3310,3313],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Performance Tracking React Hook\n * Track component performance and lifecycle metrics\n */\n\nimport { useEffect, useRef, useCallback } from 'react';\n\nimport { clientLogger } from '@/lib/logging/client-logger';\nimport type { UsePerformanceTrackingOptions, PerformanceTrackingReturn } from '@/types/hooks';\n\nimport { performanceMonitor } from '../performance';\n\n/**\n * Hook for tracking component performance metrics\n */\nexport const usePerformanceTracking = (\n  options: UsePerformanceTrackingOptions\n): PerformanceTrackingReturn => {\n  const {\n    componentName,\n    trackRenders = true,\n    trackMounts = true,\n    trackUpdates = false,\n    metadata = {},\n  } = options;\n\n  const renderCountRef = useRef(0);\n  const mountTimeRef = useRef<number>(0);\n  const lastRenderTimeRef = useRef<number>(0);\n\n  // Track component mount\n  useEffect(() => {\n    if (trackMounts) {\n      mountTimeRef.current = performance.now();\n      const metricName = `component_mount_${componentName}`;\n\n      performanceMonitor.startMetric(metricName, {\n        component: componentName,\n        type: 'mount',\n        ...metadata,\n      });\n\n      clientLogger.component(componentName, 'mounted', { timestamp: mountTimeRef.current });\n\n      return () => {\n        // Track unmount\n        const unmountTime = performance.now();\n        const lifecycleDuration = unmountTime - mountTimeRef.current;\n\n        performanceMonitor.endMetric(metricName);\n\n        clientLogger.component(componentName, 'unmounted', {\n          lifecycleDuration: Math.round(lifecycleDuration * 100) / 100,\n          renderCount: renderCountRef.current,\n        });\n      };\n    }\n  }, [componentName, trackMounts, metadata]);\n\n  // Track renders\n  useEffect(() => {\n    if (trackRenders) {\n      renderCountRef.current += 1;\n      const currentTime = performance.now();\n\n      if (renderCountRef.current > 1 && trackUpdates) {\n        const timeSinceLastRender = currentTime - lastRenderTimeRef.current;\n\n        clientLogger.component(componentName, 're-rendered', {\n          renderCount: renderCountRef.current,\n          timeSinceLastRender: Math.round(timeSinceLastRender * 100) / 100,\n        });\n\n        // Warn about frequent re-renders\n        if (timeSinceLastRender < 50) {\n          // Less than 50ms between renders\n          clientLogger.warn(`Frequent re-renders detected in ${componentName}`, {\n            action: 'frequent_rerenders',\n            data: {\n              component: componentName,\n              renderCount: renderCountRef.current,\n              timeSinceLastRender,\n            },\n          });\n        }\n      }\n\n      lastRenderTimeRef.current = currentTime;\n    }\n  });\n\n  // Track custom operations\n  const trackOperation = useCallback(\n    (name: string, operationMetadata?: Record<string, any>) => {\n      const metricName = `${componentName}_${name}`;\n      performanceMonitor.startMetric(metricName, {\n        component: componentName,\n        operation: name,\n        ...metadata,\n        ...operationMetadata,\n      });\n\n      return () => performanceMonitor.endMetric(metricName);\n    },\n    [componentName, metadata]\n  );\n\n  // Track async operations\n  const trackAsyncOperation = useCallback(\n    async <T>(\n      name: string,\n      operation: () => Promise<T>,\n      operationMetadata?: Record<string, any>\n    ): Promise<T> => {\n      const metricName = `${componentName}_async_${name}`;\n\n      return performanceMonitor.measureFunction(metricName, operation, {\n        component: componentName,\n        operation: name,\n        type: 'async',\n        ...metadata,\n        ...operationMetadata,\n      });\n    },\n    [componentName, metadata]\n  );\n\n  return {\n    trackOperation,\n    trackAsyncOperation,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/monitoring/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/monitoring/performance.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[566,569],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[566,569],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1484,1487],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1484,1487],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3294,3297],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3294,3297],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3754,3757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3754,3757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":155,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4135,4138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4135,4138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":169,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4501,4504],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4501,4504],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":182,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4769,4772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4769,4772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":186,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4951,4954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4951,4954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":240,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":240,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6632,6635],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6632,6635],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":243,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6775,6778],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6775,6778],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":249,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6947,6950],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6947,6950],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":252,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":252,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7082,7085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7082,7085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":255,"column":90,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":93,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7245,7248],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7245,7248],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":258,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7392,7395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7392,7395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Performance Monitoring Utilities\n * Client-side performance tracking and optimization helpers\n */\n\nimport { clientLogger } from '@/lib/logging/client-logger';\nimport type { GenericPerformanceMetrics } from '@/types/performance';\n\nimport { startSentryTransaction } from './sentry-config';\n\nclass PerformanceMonitor {\n  private metrics: Map<string, GenericPerformanceMetrics> = new Map();\n  private isProduction = process.env.NODE_ENV === 'production';\n\n  /**\n   * Start tracking a performance metric\n   */\n  startMetric(name: string, metadata?: Record<string, any>): () => void {\n    const startTime = performance.now();\n\n    this.metrics.set(name, {\n      name,\n      startTime,\n      metadata,\n    });\n\n    // Start Sentry transaction for critical operations\n    if (this.isProduction && this.isCriticalOperation(name)) {\n      const transaction = startSentryTransaction(name, 'performance');\n      if (transaction && metadata) {\n        // Add context to transaction\n        Object.entries(metadata).forEach(([key, value]) => {\n          transaction.setTag(key, String(value));\n        });\n      }\n    }\n\n    clientLogger.debug(`Performance tracking started: ${name}`, {\n      action: 'performance_start',\n      data: { name, startTime, metadata },\n    });\n\n    // Return a function to end the metric\n    return () => {\n      this.endMetric(name);\n    };\n  }\n\n  /**\n   * End tracking and log performance metric\n   */\n  endMetric(name: string, additionalData?: Record<string, any>): number | null {\n    const metric = this.metrics.get(name);\n    if (!metric) {\n      clientLogger.warn(`Performance metric not found: ${name}`);\n      return null;\n    }\n\n    const endTime = performance.now();\n    const duration = endTime - metric.startTime;\n\n    const completedMetric: GenericPerformanceMetrics = {\n      ...metric,\n      endTime,\n      duration,\n    };\n\n    this.metrics.set(name, completedMetric);\n\n    // Log performance data\n    const logData = {\n      name,\n      duration: Math.round(duration * 100) / 100, // Round to 2 decimal places\n      metadata: metric.metadata,\n      ...additionalData,\n    };\n\n    // Determine if this is a performance concern\n    const thresholds = this.getPerformanceThresholds();\n    const threshold = thresholds[name] || thresholds.default;\n\n    if (duration > threshold.error) {\n      clientLogger.error(`Performance issue detected: ${name} took ${duration.toFixed(2)}ms`, {\n        action: 'performance_issue',\n        data: logData,\n      });\n    } else if (duration > threshold.warn) {\n      clientLogger.warn(`Performance warning: ${name} took ${duration.toFixed(2)}ms`, {\n        action: 'performance_warning',\n        data: logData,\n      });\n    } else {\n      clientLogger.info(`Performance metric: ${name} completed in ${duration.toFixed(2)}ms`, {\n        action: 'performance_complete',\n        data: logData,\n      });\n    }\n\n    return duration;\n  }\n\n  /**\n   * Get all recorded metrics\n   */\n  getMetrics(): GenericPerformanceMetrics[] {\n    return Array.from(this.metrics.values());\n  }\n\n  /**\n   * Clear all metrics\n   */\n  clearMetrics(): void {\n    this.metrics.clear();\n  }\n\n  /**\n   * Measure a function execution time\n   */\n  async measureFunction<T>(\n    name: string,\n    fn: () => T | Promise<T>,\n    metadata?: Record<string, any>\n  ): Promise<T> {\n    this.startMetric(name, metadata);\n\n    try {\n      const result = await fn();\n      this.endMetric(name, { success: true });\n      return result;\n    } catch (error) {\n      this.endMetric(name, {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Track component render time\n   */\n  trackComponentRender(componentName: string, props?: any): () => void {\n    const metricName = `component_render_${componentName}`;\n    this.startMetric(metricName, {\n      component: componentName,\n      propsCount: props ? Object.keys(props).length : 0,\n    });\n\n    return () => this.endMetric(metricName);\n  }\n\n  /**\n   * Track API call performance\n   */\n  trackApiCall(method: string, endpoint: string, metadata?: Record<string, any>): () => void {\n    const metricName = `api_${method.toLowerCase()}_${endpoint.replace(/[^a-zA-Z0-9]/g, '_')}`;\n    this.startMetric(metricName, {\n      method,\n      endpoint,\n      ...metadata,\n    });\n\n    return () => this.endMetric(metricName);\n  }\n\n  /**\n   * Track data loading operations\n   */\n  trackDataLoad(resource: string, metadata?: Record<string, any>): () => void {\n    const metricName = `data_load_${resource}`;\n    this.startMetric(metricName, {\n      resource,\n      ...metadata,\n    });\n\n    return () => this.endMetric(metricName);\n  }\n\n  /**\n   * Get Web Vitals if available\n   */\n  getWebVitals(): Promise<any> {\n    return new Promise(resolve => {\n      if (typeof window !== 'undefined' && 'web-vitals' in window) {\n        // If web-vitals library is loaded\n        resolve((window as any)['web-vitals']);\n      } else {\n        // Fallback to basic performance API\n        const navigation = performance.getEntriesByType(\n          'navigation'\n        )[0] as PerformanceNavigationTiming;\n        resolve({\n          fcp: navigation.responseStart - navigation.fetchStart,\n          lcp: navigation.loadEventEnd - navigation.fetchStart,\n          cls: 0, // Would need proper measurement\n          fid: 0, // Would need proper measurement\n          ttfb: navigation.responseStart - navigation.requestStart,\n        });\n      }\n    });\n  }\n\n  /**\n   * Performance thresholds for different operations\n   */\n  private getPerformanceThresholds(): Record<string, { warn: number; error: number }> {\n    return {\n      // API calls\n      api_get: { warn: 1000, error: 3000 },\n      api_post: { warn: 2000, error: 5000 },\n      api_put: { warn: 2000, error: 5000 },\n      api_delete: { warn: 1000, error: 3000 },\n\n      // Component renders\n      component_render: { warn: 100, error: 500 },\n\n      // Data operations\n      data_load: { warn: 500, error: 2000 },\n      data_transform: { warn: 200, error: 1000 },\n\n      // Default thresholds\n      default: { warn: 1000, error: 3000 },\n    };\n  }\n\n  /**\n   * Check if operation is critical for Sentry tracking\n   */\n  private isCriticalOperation(name: string): boolean {\n    const criticalOperations = ['api_', 'data_load_', 'auth_', 'payment_', 'search_'];\n\n    return criticalOperations.some(op => name.startsWith(op));\n  }\n}\n\n// Export singleton instance\nexport const performanceMonitor = new PerformanceMonitor();\n\n// Convenience functions\nexport const startPerformanceMetric = (name: string, metadata?: Record<string, any>) =>\n  performanceMonitor.startMetric(name, metadata);\n\nexport const endPerformanceMetric = (name: string, additionalData?: Record<string, any>) =>\n  performanceMonitor.endMetric(name, additionalData);\n\nexport const measureFunction = <T>(\n  name: string,\n  fn: () => T | Promise<T>,\n  metadata?: Record<string, any>\n) => performanceMonitor.measureFunction(name, fn, metadata);\n\nexport const trackComponentRender = (componentName: string, props?: any) =>\n  performanceMonitor.trackComponentRender(componentName, props);\n\nexport const trackApiCall = (method: string, endpoint: string, metadata?: Record<string, any>) =>\n  performanceMonitor.trackApiCall(method, endpoint, metadata);\n\nexport const trackDataLoad = (resource: string, metadata?: Record<string, any>) =>\n  performanceMonitor.trackDataLoad(resource, metadata);\n\n// performanceMonitor is already exported as 'export const' above\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/monitoring/sentry-config.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[404,407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[404,407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[415,418],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[415,418],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[423,426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[423,426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[513,516],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[513,516],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2712,2715],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2712,2715],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2757,2760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2757,2760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2980,2983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2980,2983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3041,3044],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3041,3044],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3086,3089],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3086,3089],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3367,3370],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3367,3370],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3412,3415],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3412,3415],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3693,3696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3693,3696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3754,3757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3754,3757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3799,3802],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3799,3802],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4080,4083],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4080,4083],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":149,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4125,4128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4125,4128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":165,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4456,4459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4456,4459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Sentry Configuration for Error Monitoring\n * Centralized error tracking and performance monitoring setup\n */\n\nimport { isProduction, isDevelopment, getEnvironment } from '@/lib/config/environment';\n\ninterface SentryConfig {\n  dsn: string | undefined;\n  environment: string;\n  tracesSampleRate: number;\n  replaysSessionSampleRate: number;\n  replaysOnErrorSampleRate: number;\n  beforeSend?: (event: any, hint: any) => any | null;\n  initialScope?: {\n    tags: Record<string, string>;\n    user: Record<string, any>;\n  };\n}\n\n/**\n * Get Sentry configuration for current environment\n */\nexport const getSentryConfig = (): SentryConfig => {\n  return {\n    dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\n    environment: getEnvironment(),\n\n    // Performance Monitoring\n    tracesSampleRate: isProduction() ? 0.1 : 1.0, // Capture 10% of the transactions in production\n\n    // Session Replay\n    replaysSessionSampleRate: isProduction() ? 0.01 : 0.1, // 1% in production, 10% in development\n    replaysOnErrorSampleRate: 1.0, // Always capture replays for errors\n\n    // Filter and enhance events before sending\n    beforeSend: (event, hint) => {\n      // Don't send events in development unless explicitly enabled\n      if (isDevelopment() && process.env.NEXT_PUBLIC_SENTRY_DEBUG !== 'true') {\n        return null;\n      }\n\n      // Filter out known non-critical errors\n      if (event.exception) {\n        const error = hint.originalException;\n        if (error instanceof Error) {\n          // Filter out common browser extension errors\n          if (\n            error.message.includes('chrome-extension://') ||\n            error.message.includes('moz-extension://') ||\n            error.message.includes('safari-extension://')\n          ) {\n            return null;\n          }\n\n          // Filter out network errors that are expected\n          if (error.message.includes('Failed to fetch') && error.message.includes('/api/')) {\n            // Still log API errors but with lower severity\n            event.level = 'warning';\n          }\n        }\n      }\n\n      // Enhance event with additional context\n      event.tags = {\n        ...event.tags,\n        environment: getEnvironment(),\n        component: event.tags?.component || 'unknown',\n      };\n\n      return event;\n    },\n\n    // Initial scope configuration\n    initialScope: {\n      tags: {\n        environment: getEnvironment(),\n        application: 'rbi-system',\n      },\n      user: {\n        // Will be set dynamically when user is authenticated\n      },\n    },\n  };\n};\n\n/**\n * Configure Sentry user context\n */\nexport const setSentryUser = (userId: string, email?: string, barangayCode?: string) => {\n  if (typeof window !== 'undefined' && (window as any).Sentry) {\n    const Sentry = (window as any).Sentry;\n    Sentry.setUser({\n      id: userId,\n      email,\n      barangay_code: barangayCode,\n    });\n  }\n};\n\n/**\n * Set custom Sentry context\n */\nexport const setSentryContext = (key: string, context: Record<string, any>) => {\n  if (typeof window !== 'undefined' && (window as any).Sentry) {\n    const Sentry = (window as any).Sentry;\n    Sentry.setContext(key, context);\n  }\n};\n\n/**\n * Add breadcrumb for debugging\n */\nexport const addSentryBreadcrumb = (\n  message: string,\n  category?: string,\n  level?: 'info' | 'warning' | 'error' | 'debug'\n) => {\n  if (typeof window !== 'undefined' && (window as any).Sentry) {\n    const Sentry = (window as any).Sentry;\n    Sentry.addBreadcrumb({\n      message,\n      category: category || 'custom',\n      level: level || 'info',\n      timestamp: Date.now() / 1000,\n    });\n  }\n};\n\n/**\n * Manually capture exception\n */\nexport const captureError = (error: Error, context?: Record<string, any>) => {\n  if (typeof window !== 'undefined' && (window as any).Sentry) {\n    const Sentry = (window as any).Sentry;\n    Sentry.captureException(error, {\n      contexts: {\n        custom: context,\n      },\n    });\n  }\n};\n\n/**\n * Performance monitoring helpers\n */\nexport const startSentryTransaction = (name: string, op?: string) => {\n  if (typeof window !== 'undefined' && (window as any).Sentry) {\n    const Sentry = (window as any).Sentry;\n    return Sentry.startTransaction({\n      name,\n      op: op || 'navigation',\n    });\n  }\n  return null;\n};\n\n/**\n * Check if Sentry is properly configured\n */\nexport const isSentryConfigured = (): boolean => {\n  return !!(\n    process.env.NEXT_PUBLIC_SENTRY_DSN &&\n    typeof window !== 'undefined' &&\n    (window as any).Sentry\n  );\n};\n\n// getSentryConfig is already exported as 'export function' above\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/performance/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/performance/optimizationUtils.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'CACHE_DURATION' and 'deps'. Either include them or remove the dependency array.","line":258,"column":6,"nodeType":"ArrayExpression","endLine":258,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [cacheKey, deps, CACHE_DURATION, fetchFn]","fix":{"range":[6755,6783],"text":"[cacheKey, deps, CACHE_DURATION, fetchFn]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a spread element in its dependency array. This means we can't statically verify whether you've passed the correct dependencies.","line":258,"column":26,"nodeType":"SpreadElement","endLine":258,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Performance Optimization Utilities\n * Enhanced performance helpers for React components and data operations\n */\n\nimport { useCallback, useMemo, useRef, useEffect, useState } from 'react';\n\nimport { logInfo } from '@/lib/logging/client-logger';\n\n/**\n * Enhanced debounce hook with cleanup\n */\nexport function useDebounce<T extends (...args: unknown[]) => unknown>(\n  callback: T,\n  delay: number\n): T {\n  const debounceRef = useRef<NodeJS.Timeout | undefined>(undefined);\n\n  const debouncedCallback = useCallback(\n    (...args: Parameters<T>) => {\n      clearTimeout(debounceRef.current);\n      debounceRef.current = setTimeout(() => callback(...args), delay);\n    },\n    [callback, delay]\n  ) as T;\n\n  useEffect(() => {\n    return () => {\n      clearTimeout(debounceRef.current);\n    };\n  }, []);\n\n  return debouncedCallback;\n}\n\n/**\n * Memoized search filter for large datasets\n */\nexport function useSearchFilter<T extends Record<string, unknown>>(\n  data: T[],\n  searchTerm: string,\n  searchFields: (keyof T)[]\n): T[] {\n  return useMemo(() => {\n    if (!searchTerm.trim()) return data;\n\n    const lowercaseSearch = searchTerm.toLowerCase();\n    return data.filter(item =>\n      searchFields.some(field => {\n        const value = item[field];\n        return value && typeof value === 'string' && value.toLowerCase().includes(lowercaseSearch);\n      })\n    );\n  }, [data, searchTerm, searchFields]);\n}\n\n/**\n * Memoized pagination for large datasets\n */\nexport function usePagination<T>(data: T[], pageSize: number = 20) {\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const paginatedData = useMemo(() => {\n    const startIndex = (currentPage - 1) * pageSize;\n    const endIndex = startIndex + pageSize;\n    return data.slice(startIndex, endIndex);\n  }, [data, currentPage, pageSize]);\n\n  const totalPages = useMemo(() => Math.ceil(data.length / pageSize), [data.length, pageSize]);\n\n  const hasNextPage = currentPage < totalPages;\n  const hasPrevPage = currentPage > 1;\n\n  const goToPage = useCallback(\n    (page: number) => {\n      setCurrentPage(Math.max(1, Math.min(page, totalPages)));\n    },\n    [totalPages]\n  );\n\n  const nextPage = useCallback(() => {\n    if (hasNextPage) setCurrentPage(prev => prev + 1);\n  }, [hasNextPage]);\n\n  const prevPage = useCallback(() => {\n    if (hasPrevPage) setCurrentPage(prev => prev - 1);\n  }, [hasPrevPage]);\n\n  return {\n    currentPage,\n    totalPages,\n    pageSize,\n    data: paginatedData,\n    totalItems: data.length,\n    hasNextPage,\n    hasPrevPage,\n    goToPage,\n    nextPage,\n    prevPage,\n  };\n}\n\n/**\n * Virtual scrolling hook for very large lists\n */\nexport function useVirtualScroll({\n  itemCount,\n  itemHeight,\n  containerHeight,\n  overscan = 5,\n}: {\n  itemCount: number;\n  itemHeight: number;\n  containerHeight: number;\n  overscan?: number;\n}) {\n  const [scrollTop, setScrollTop] = useState(0);\n\n  const visibleRange = useMemo(() => {\n    const startIndex = Math.floor(scrollTop / itemHeight);\n    const endIndex = Math.min(\n      itemCount - 1,\n      Math.floor((scrollTop + containerHeight) / itemHeight)\n    );\n\n    return {\n      start: Math.max(0, startIndex - overscan),\n      end: Math.min(itemCount - 1, endIndex + overscan),\n    };\n  }, [scrollTop, itemHeight, containerHeight, itemCount, overscan]);\n\n  const totalHeight = itemCount * itemHeight;\n  const offsetY = visibleRange.start * itemHeight;\n\n  return {\n    visibleRange,\n    totalHeight,\n    offsetY,\n    setScrollTop,\n  };\n}\n\n/**\n * Performance monitoring hook\n */\nexport function usePerformanceMonitor(componentName: string) {\n  const renderStartTime = useRef<number | undefined>(undefined);\n  const renderCount = useRef(0);\n\n  useEffect(() => {\n    renderStartTime.current = performance.now();\n    renderCount.current += 1;\n  });\n\n  useEffect(() => {\n    const endTime = performance.now();\n    const renderTime = endTime - (renderStartTime.current || endTime);\n\n    if (renderTime > 16) {\n      // > 16ms is concerning for 60fps\n      logInfo(`Performance warning: ${componentName} render took ${renderTime.toFixed(2)}ms`, {\n        component: componentName,\n        action: 'performance_warning',\n        data: { renderTime, renderCount: renderCount.current },\n      });\n    }\n  });\n\n  return {\n    renderCount: renderCount.current,\n  };\n}\n\n/**\n * Memoized sort function for tables\n */\nexport function useSortedData<T extends Record<string, unknown>>(\n  data: T[],\n  sortKey: keyof T | null,\n  sortDirection: 'asc' | 'desc' = 'asc'\n): T[] {\n  return useMemo(() => {\n    if (!sortKey) return data;\n\n    return [...data].sort((a, b) => {\n      const aValue = a[sortKey];\n      const bValue = b[sortKey];\n\n      // Handle null/undefined values\n      if (aValue === null || aValue === undefined) return 1;\n      if (bValue === null || bValue === undefined) return -1;\n\n      // Handle different data types\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        const result = aValue.localeCompare(bValue);\n        return sortDirection === 'asc' ? result : -result;\n      }\n\n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        const result = aValue - bValue;\n        return sortDirection === 'asc' ? result : -result;\n      }\n\n      // Handle dates\n      if (aValue instanceof Date && bValue instanceof Date) {\n        const result = aValue.getTime() - bValue.getTime();\n        return sortDirection === 'asc' ? result : -result;\n      }\n\n      // Fallback to string comparison\n      const result = String(aValue).localeCompare(String(bValue));\n      return sortDirection === 'asc' ? result : -result;\n    });\n  }, [data, sortKey, sortDirection]);\n}\n\n/**\n * Optimized data fetching with caching\n */\nexport function useOptimizedFetch<T>(\n  fetchFn: () => Promise<T>,\n  deps: unknown[] = [],\n  cacheKey?: string\n) {\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const cache = useRef<Map<string, { data: T; timestamp: number }>>(new Map());\n  const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n  const fetch = useCallback(async () => {\n    const key = cacheKey || JSON.stringify(deps);\n    const cached = cache.current.get(key);\n\n    // Return cached data if valid\n    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n      setData(cached.data);\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await fetchFn();\n      setData(result);\n\n      // Cache the result\n      cache.current.set(key, { data: result, timestamp: Date.now() });\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Unknown error'));\n    } finally {\n      setLoading(false);\n    }\n  }, [fetchFn, cacheKey, ...deps]);\n\n  useEffect(() => {\n    fetch();\n  }, [fetch]);\n\n  return { data, loading, error, refetch: fetch };\n}\n\n/**\n * Intersection Observer hook for lazy loading\n */\nexport function useIntersectionObserver(\n  options: IntersectionObserverInit = {}\n): [React.RefCallback<Element>, boolean] {\n  const [isIntersecting, setIsIntersecting] = useState(false);\n  const [node, setNode] = useState<Element | null>(null);\n\n  const observer = useMemo(() => {\n    return new IntersectionObserver(([entry]) => {\n      setIsIntersecting(entry.isIntersecting);\n    }, options);\n  }, [options]);\n\n  useEffect(() => {\n    if (node) {\n      observer.observe(node);\n      return () => observer.unobserve(node);\n    }\n  }, [observer, node]);\n\n  const ref = useCallback((node: Element | null) => {\n    setNode(node);\n  }, []);\n\n  return [ref, isIntersecting];\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/performance/performanceMonitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/performance/performanceUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":314,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":314,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8833,8836],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8833,8836],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '@/lib/logging';\nimport type {\n  PerformanceMetric,\n  ComponentPerformanceData,\n  LayoutShiftEntry,\n} from '@/types/utilities';\n\n/**\n * Performance monitoring utilities\n * Tracks key metrics and provides insights into app performance\n */\n\n// Performance entry interfaces\n\n// ComponentProps is a generic type for component properties\ntype ComponentProps = Record<string, unknown>;\n\nclass PerformanceMonitor {\n  private metrics: PerformanceMetric[] = [];\n  private componentMetrics: Map<string, ComponentPerformanceData> = new Map();\n  private observers: PerformanceObserver[] = [];\n  private isEnabled: boolean = process.env.NODE_ENV === 'development';\n\n  constructor() {\n    if (typeof window !== 'undefined' && this.isEnabled) {\n      this.initializeObservers();\n    }\n  }\n\n  private initializeObservers() {\n    try {\n      // Observe navigation timing\n      if ('PerformanceObserver' in window) {\n        const navigationObserver = new PerformanceObserver(list => {\n          for (const entry of list.getEntries()) {\n            this.recordMetric('navigation', entry.duration, {\n              type: entry.entryType,\n              name: entry.name,\n            });\n          }\n        });\n        navigationObserver.observe({ entryTypes: ['navigation'] });\n        this.observers.push(navigationObserver);\n\n        // Observe resource loading\n        const resourceObserver = new PerformanceObserver(list => {\n          for (const entry of list.getEntries()) {\n            if (entry.duration > 100) {\n              // Only log slow resources\n              this.recordMetric('resource', entry.duration, {\n                name: entry.name,\n                type: entry.entryType,\n                size: (entry as PerformanceResourceTiming).transferSize,\n              });\n            }\n          }\n        });\n        resourceObserver.observe({ entryTypes: ['resource'] });\n        this.observers.push(resourceObserver);\n\n        // Observe largest contentful paint\n        const lcpObserver = new PerformanceObserver(list => {\n          for (const entry of list.getEntries()) {\n            const lcpEntry = entry as PerformanceEntry & {\n              element?: { tagName: string };\n              url?: string;\n            };\n            this.recordMetric('lcp', entry.startTime, {\n              element: lcpEntry.element?.tagName,\n              url: lcpEntry.url,\n            });\n          }\n        });\n        lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\n        this.observers.push(lcpObserver);\n\n        // Observe cumulative layout shift\n        const clsObserver = new PerformanceObserver(list => {\n          for (const entry of list.getEntries()) {\n            const layoutShiftEntry = entry as LayoutShiftEntry;\n            if (!layoutShiftEntry.hadRecentInput) {\n              this.recordMetric('cls', layoutShiftEntry.value, {\n                sources: layoutShiftEntry.sources?.map(s => s.node?.tagName),\n              });\n            }\n          }\n        });\n        clsObserver.observe({ entryTypes: ['layout-shift'] });\n        this.observers.push(clsObserver);\n      }\n    } catch (error) {\n      logger.error('Failed to initialize performance observers', { error });\n    }\n  }\n\n  /**\n   * Record a performance metric\n   */\n  recordMetric(name: string, value: number, metadata?: Record<string, unknown>) {\n    if (!this.isEnabled) return;\n\n    const metric: PerformanceMetric = {\n      name,\n      value,\n      timestamp: Date.now(),\n      metadata,\n    };\n\n    this.metrics.push(metric);\n\n    // Keep only last 1000 metrics\n    if (this.metrics.length > 1000) {\n      this.metrics = this.metrics.slice(-1000);\n    }\n\n    // Log significant metrics\n    if (this.isSignificantMetric(name, value)) {\n      logger.info(`Performance: ${name}`, {\n        value: `${value.toFixed(2)}ms`,\n        ...metadata,\n      });\n    }\n  }\n\n  private isSignificantMetric(name: string, value: number): boolean {\n    const thresholds: Record<string, number> = {\n      navigation: 3000,\n      resource: 500,\n      lcp: 2500,\n      cls: 0.1,\n      render: 16, // One frame at 60fps\n      api: 1000,\n    };\n\n    return value > (thresholds[name] || 100);\n  }\n\n  /**\n   * Start timing an operation\n   */\n  startTiming(name: string): () => void {\n    if (!this.isEnabled) return () => {};\n\n    const start = performance.now();\n\n    return () => {\n      const duration = performance.now() - start;\n      this.recordMetric(name, duration);\n    };\n  }\n\n  /**\n   * Time an async operation\n   */\n  async timeAsync<T>(name: string, operation: () => Promise<T>): Promise<T> {\n    if (!this.isEnabled) return operation();\n\n    const endTiming = this.startTiming(name);\n    try {\n      const result = await operation();\n      endTiming();\n      return result;\n    } catch (error) {\n      endTiming();\n      throw error;\n    }\n  }\n\n  /**\n   * Record component render performance\n   */\n  recordComponentRender(\n    componentName: string,\n    renderTime: number,\n    propsSize?: number,\n    isRerender = false\n  ) {\n    if (!this.isEnabled) return;\n\n    const existing = this.componentMetrics.get(componentName);\n    const data: ComponentPerformanceData = {\n      componentName,\n      renderTime,\n      propsSize,\n      rerenderCount: existing ? existing.rerenderCount + (isRerender ? 1 : 0) : 0,\n      timestamp: Date.now(),\n    };\n\n    this.componentMetrics.set(componentName, data);\n\n    if (renderTime > 16) {\n      // Slower than 60fps\n      logger.warn(`Slow component render: ${componentName}`, {\n        renderTime: `${renderTime.toFixed(2)}ms`,\n        rerenderCount: data.rerenderCount,\n        propsSize,\n      });\n    }\n  }\n\n  /**\n   * Get performance summary\n   */\n  getPerformanceSummary() {\n    if (!this.isEnabled) return null;\n\n    const recent = this.metrics.filter(m => Date.now() - m.timestamp < 60000); // Last minute\n\n    const summary = {\n      totalMetrics: this.metrics.length,\n      recentMetrics: recent.length,\n      averages: {} as Record<string, number>,\n      components: Array.from(this.componentMetrics.entries()).map(([name, data]) => ({\n        name,\n        averageRenderTime: data.renderTime,\n        rerenderCount: data.rerenderCount,\n      })),\n      slowestOperations: this.metrics\n        .sort((a, b) => b.value - a.value)\n        .slice(0, 10)\n        .map(m => ({ name: m.name, value: m.value })),\n    };\n\n    // Calculate averages by metric type\n    const grouped = recent.reduce(\n      (acc, metric) => {\n        if (!acc[metric.name]) acc[metric.name] = [];\n        acc[metric.name].push(metric.value);\n        return acc;\n      },\n      {} as Record<string, number[]>\n    );\n\n    Object.entries(grouped).forEach(([name, values]) => {\n      summary.averages[name] = values.reduce((sum, val) => sum + val, 0) / values.length;\n    });\n\n    return summary;\n  }\n\n  /**\n   * Get Web Vitals\n   */\n  getWebVitals() {\n    if (!this.isEnabled || typeof window === 'undefined') return null;\n\n    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n\n    return {\n      // First Contentful Paint\n      fcp: this.metrics.find(\n        m => m.name === 'paint' && m.metadata?.name === 'first-contentful-paint'\n      )?.value,\n\n      // Largest Contentful Paint\n      lcp: this.metrics.filter(m => m.name === 'lcp').sort((a, b) => b.timestamp - a.timestamp)[0]\n        ?.value,\n\n      // Cumulative Layout Shift\n      cls: this.metrics.filter(m => m.name === 'cls').reduce((sum, m) => sum + m.value, 0),\n\n      // Time to First Byte\n      ttfb: navigation ? navigation.responseStart - navigation.requestStart : null,\n\n      // DOM Content Loaded\n      domContentLoaded: navigation\n        ? navigation.domContentLoadedEventEnd - navigation.fetchStart\n        : null,\n\n      // Load Complete\n      loadComplete: navigation ? navigation.loadEventEnd - navigation.fetchStart : null,\n    };\n  }\n\n  /**\n   * Export metrics for analysis\n   */\n  exportMetrics() {\n    if (!this.isEnabled) return null;\n\n    return {\n      metrics: this.metrics,\n      components: Object.fromEntries(this.componentMetrics),\n      webVitals: this.getWebVitals(),\n      summary: this.getPerformanceSummary(),\n      timestamp: Date.now(),\n    };\n  }\n\n  /**\n   * Clear all metrics\n   */\n  clearMetrics() {\n    this.metrics = [];\n    this.componentMetrics.clear();\n  }\n\n  /**\n   * Cleanup observers\n   */\n  destroy() {\n    this.observers.forEach(observer => observer.disconnect());\n    this.observers = [];\n  }\n}\n\n// Global performance monitor instance\nexport const performanceMonitor = new PerformanceMonitor();\n\n// Decorator for timing functions\nexport function timed(name?: string) {\n  return function (target: object, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    const timerName = name || `${(target as any).constructor.name}.${propertyKey}`;\n\n    descriptor.value = function (...args: unknown[]) {\n      const endTiming = performanceMonitor.startTiming(timerName);\n      try {\n        const result = originalMethod.apply(this, args);\n\n        // Handle async methods\n        if (result instanceof Promise) {\n          return result.finally(() => endTiming());\n        }\n\n        endTiming();\n        return result;\n      } catch (error) {\n        endTiming();\n        throw error;\n      }\n    };\n\n    return descriptor;\n  };\n}\n\n// React hook for component performance tracking\nexport function usePerformanceTracking(componentName: string) {\n  const renderStart = performance.now();\n\n  return {\n    onRenderComplete: (propsSize?: number, isRerender = false) => {\n      const renderTime = performance.now() - renderStart;\n      performanceMonitor.recordComponentRender(componentName, renderTime, propsSize, isRerender);\n    },\n  };\n}\n\n// Utility to measure props size\nexport function measurePropsSize(props: ComponentProps): number {\n  try {\n    return JSON.stringify(props).length;\n  } catch {\n    return 0;\n  }\n}\n\n// Report performance to external service (placeholder)\nexport async function reportPerformanceMetrics() {\n  if (process.env.NODE_ENV === 'production') {\n    const metrics = performanceMonitor.exportMetrics();\n\n    // In a real app, send to analytics service\n    logger.info('Performance report', { metrics });\n\n    // Clear after reporting\n    performanceMonitor.clearMetrics();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/performance/pwaPerformanceUtils.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":153,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":153,"endColumn":16,"suggestions":[{"fix":{"range":[3838,3920],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5093,5096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5093,5096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":228,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5297,5300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5297,5300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":243,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5579,5582],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5579,5582],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":417,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":417,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9916,9919],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9916,9919],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":418,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":418,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10002,10005],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10002,10005],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * PWA Performance Monitoring\n * Tracks PWA-specific metrics and user interactions\n */\n\nimport type { PWAMetrics, PWAPerformanceEntry } from '@/types/utilities';\n\nclass PWAPerformanceMonitor {\n  private metrics: PWAMetrics;\n  private entries: PWAPerformanceEntry[] = [];\n  private maxEntries = 1000;\n\n  constructor() {\n    this.metrics = {\n      installPromptShown: 0,\n      installAccepted: 0,\n      installDismissed: 0,\n      offlineUsage: 0,\n      cacheHits: 0,\n      cacheMisses: 0,\n      syncOperations: 0,\n      syncFailures: 0,\n    };\n\n    // Only initialize in browser environment\n    if (typeof window !== 'undefined') {\n      this.loadStoredMetrics();\n      this.setupEventListeners();\n    }\n  }\n\n  /**\n   * Load metrics from localStorage\n   */\n  private loadStoredMetrics(): void {\n    if (typeof window === 'undefined') return;\n\n    try {\n      const stored = localStorage.getItem('pwa-metrics');\n      if (stored) {\n        this.metrics = { ...this.metrics, ...JSON.parse(stored) };\n      }\n    } catch (error) {\n      console.warn('Failed to load stored PWA metrics:', error);\n    }\n  }\n\n  /**\n   * Save metrics to localStorage\n   */\n  private saveMetrics(): void {\n    if (typeof window === 'undefined') return;\n\n    try {\n      localStorage.setItem('pwa-metrics', JSON.stringify(this.metrics));\n    } catch (error) {\n      console.warn('Failed to save PWA metrics:', error);\n    }\n  }\n\n  /**\n   * Setup performance monitoring event listeners\n   */\n  private setupEventListeners(): void {\n    if (typeof window === 'undefined') return;\n\n    // Service Worker messages\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.addEventListener('message', event => {\n        this.handleServiceWorkerMessage(event);\n      });\n    }\n\n    // Page visibility for offline usage tracking\n    if (typeof document !== 'undefined') {\n      document.addEventListener('visibilitychange', () => {\n        if (document.visibilityState === 'visible' && !navigator.onLine) {\n          this.trackOfflineUsage();\n        }\n      });\n    }\n\n    // Performance observer for navigation timing\n    if ('PerformanceObserver' in window) {\n      try {\n        const observer = new PerformanceObserver(list => {\n          for (const entry of list.getEntries()) {\n            if (entry.entryType === 'navigation') {\n              this.trackNavigationPerformance(entry as PerformanceNavigationTiming);\n            }\n          }\n        });\n        observer.observe({ entryTypes: ['navigation'] });\n      } catch (error) {\n        console.warn('Performance Observer not supported:', error);\n      }\n    }\n  }\n\n  /**\n   * Handle service worker messages\n   */\n  private handleServiceWorkerMessage(event: MessageEvent): void {\n    const { type, data } = event.data || {};\n\n    switch (type) {\n      case 'CACHE_HIT':\n        this.trackCacheHit(data);\n        break;\n      case 'CACHE_MISS':\n        this.trackCacheMiss(data);\n        break;\n      case 'SYNC_START':\n        this.trackSyncStart(data);\n        break;\n      case 'SYNC_SUCCESS':\n        this.trackSyncSuccess(data);\n        break;\n      case 'SYNC_FAILURE':\n        this.trackSyncFailure(data);\n        break;\n    }\n  }\n\n  /**\n   * Track install prompt shown\n   */\n  trackInstallPromptShown(): void {\n    this.metrics.installPromptShown++;\n    this.addEntry({\n      name: 'install_prompt_shown',\n      type: 'install',\n      timestamp: Date.now(),\n    });\n    this.saveMetrics();\n  }\n\n  /**\n   * Track install accepted\n   */\n  trackInstallAccepted(): void {\n    this.metrics.installAccepted++;\n    this.addEntry({\n      name: 'install_accepted',\n      type: 'install',\n      timestamp: Date.now(),\n      success: true,\n    });\n    this.saveMetrics();\n\n    // Track conversion rate\n    const conversionRate = this.metrics.installAccepted / this.metrics.installPromptShown;\n    console.log(`PWA Install Conversion Rate: ${(conversionRate * 100).toFixed(2)}%`);\n  }\n\n  /**\n   * Track install dismissed\n   */\n  trackInstallDismissed(): void {\n    this.metrics.installDismissed++;\n    this.addEntry({\n      name: 'install_dismissed',\n      type: 'install',\n      timestamp: Date.now(),\n      success: false,\n    });\n    this.saveMetrics();\n  }\n\n  /**\n   * Track offline usage\n   */\n  trackOfflineUsage(): void {\n    this.metrics.offlineUsage++;\n    this.addEntry({\n      name: 'offline_usage',\n      type: 'offline',\n      timestamp: Date.now(),\n    });\n    this.saveMetrics();\n  }\n\n  /**\n   * Track cache hit\n   */\n  trackCacheHit(resource?: string): void {\n    this.metrics.cacheHits++;\n    this.addEntry({\n      name: 'cache_hit',\n      type: 'cache',\n      timestamp: Date.now(),\n      success: true,\n      details: { resource },\n    });\n    this.saveMetrics();\n  }\n\n  /**\n   * Track cache miss\n   */\n  trackCacheMiss(resource?: string): void {\n    this.metrics.cacheMisses++;\n    this.addEntry({\n      name: 'cache_miss',\n      type: 'cache',\n      timestamp: Date.now(),\n      success: false,\n      details: { resource },\n    });\n    this.saveMetrics();\n  }\n\n  /**\n   * Track sync operation start\n   */\n  trackSyncStart(details?: any): void {\n    this.addEntry({\n      name: 'sync_start',\n      type: 'sync',\n      timestamp: Date.now(),\n      details,\n    });\n  }\n\n  /**\n   * Track successful sync\n   */\n  trackSyncSuccess(details?: any): void {\n    this.metrics.syncOperations++;\n    this.addEntry({\n      name: 'sync_success',\n      type: 'sync',\n      timestamp: Date.now(),\n      success: true,\n      details,\n    });\n    this.saveMetrics();\n  }\n\n  /**\n   * Track failed sync\n   */\n  trackSyncFailure(details?: any): void {\n    this.metrics.syncFailures++;\n    this.addEntry({\n      name: 'sync_failure',\n      type: 'sync',\n      timestamp: Date.now(),\n      success: false,\n      details,\n    });\n    this.saveMetrics();\n  }\n\n  /**\n   * Track navigation performance\n   */\n  private trackNavigationPerformance(entry: PerformanceNavigationTiming): void {\n    const loadTime = entry.loadEventEnd - entry.startTime;\n    const domContentLoaded = entry.domContentLoadedEventEnd - entry.startTime;\n\n    this.addEntry({\n      name: 'navigation_timing',\n      type: 'navigation',\n      timestamp: Date.now(),\n      duration: loadTime,\n      details: {\n        loadTime,\n        domContentLoaded,\n        dnsLookup: entry.domainLookupEnd - entry.domainLookupStart,\n        tcpConnect: entry.connectEnd - entry.connectStart,\n        serverResponse: entry.responseEnd - entry.requestStart,\n        domProcessing: entry.domComplete - entry.responseEnd,\n      },\n    });\n  }\n\n  /**\n   * Add performance entry\n   */\n  private addEntry(entry: PWAPerformanceEntry): void {\n    this.entries.unshift(entry);\n\n    // Keep only the most recent entries\n    if (this.entries.length > this.maxEntries) {\n      this.entries = this.entries.slice(0, this.maxEntries);\n    }\n  }\n\n  /**\n   * Get current metrics\n   */\n  getMetrics(): PWAMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Get performance entries\n   */\n  getEntries(type?: string, limit?: number): PWAPerformanceEntry[] {\n    let filtered = this.entries;\n\n    if (type) {\n      filtered = this.entries.filter(entry => entry.type === type);\n    }\n\n    if (limit) {\n      filtered = filtered.slice(0, limit);\n    }\n\n    return filtered;\n  }\n\n  /**\n   * Get cache hit rate\n   */\n  getCacheHitRate(): number {\n    const total = this.metrics.cacheHits + this.metrics.cacheMisses;\n    return total > 0 ? this.metrics.cacheHits / total : 0;\n  }\n\n  /**\n   * Get sync success rate\n   */\n  getSyncSuccessRate(): number {\n    const total = this.metrics.syncOperations + this.metrics.syncFailures;\n    return total > 0 ? this.metrics.syncOperations / total : 1;\n  }\n\n  /**\n   * Get install conversion rate\n   */\n  getInstallConversionRate(): number {\n    return this.metrics.installPromptShown > 0\n      ? this.metrics.installAccepted / this.metrics.installPromptShown\n      : 0;\n  }\n\n  /**\n   * Generate performance report\n   */\n  generateReport(): {\n    metrics: PWAMetrics;\n    rates: {\n      cacheHitRate: number;\n      syncSuccessRate: number;\n      installConversionRate: number;\n    };\n    recentEntries: PWAPerformanceEntry[];\n  } {\n    return {\n      metrics: this.getMetrics(),\n      rates: {\n        cacheHitRate: this.getCacheHitRate(),\n        syncSuccessRate: this.getSyncSuccessRate(),\n        installConversionRate: this.getInstallConversionRate(),\n      },\n      recentEntries: this.getEntries(undefined, 50),\n    };\n  }\n\n  /**\n   * Reset all metrics\n   */\n  reset(): void {\n    this.metrics = {\n      installPromptShown: 0,\n      installAccepted: 0,\n      installDismissed: 0,\n      offlineUsage: 0,\n      cacheHits: 0,\n      cacheMisses: 0,\n      syncOperations: 0,\n      syncFailures: 0,\n    };\n    this.entries = [];\n    this.saveMetrics();\n  }\n\n  /**\n   * Export metrics data\n   */\n  exportData(): string {\n    return JSON.stringify(\n      {\n        metrics: this.metrics,\n        entries: this.entries,\n        timestamp: Date.now(),\n      },\n      null,\n      2\n    );\n  }\n}\n\n// Lazy singleton initialization\nlet _pwaPerformance: PWAPerformanceMonitor | null = null;\n\nexport const pwaPerformance = {\n  get instance(): PWAPerformanceMonitor | null {\n    if (typeof window === 'undefined') return null;\n    if (!_pwaPerformance) {\n      _pwaPerformance = new PWAPerformanceMonitor();\n    }\n    return _pwaPerformance;\n  },\n};\n\n// Utility functions for external use\nexport const trackPWAEvents = {\n  installPromptShown: () => pwaPerformance.instance?.trackInstallPromptShown(),\n  installAccepted: () => pwaPerformance.instance?.trackInstallAccepted(),\n  installDismissed: () => pwaPerformance.instance?.trackInstallDismissed(),\n  offlineUsage: () => pwaPerformance.instance?.trackOfflineUsage(),\n  cacheHit: (resource?: string) => pwaPerformance.instance?.trackCacheHit(resource),\n  cacheMiss: (resource?: string) => pwaPerformance.instance?.trackCacheMiss(resource),\n  syncSuccess: (details?: any) => pwaPerformance.instance?.trackSyncSuccess(details),\n  syncFailure: (details?: any) => pwaPerformance.instance?.trackSyncFailure(details),\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/search/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/search/public-search.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1439,1442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1439,1442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1481,1484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1481,1484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1531,1534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1531,1534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1604,1607],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1604,1607],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1687,1690],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1687,1690],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1787,1790],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1787,1790],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1810,1813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1810,1813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":108,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":111,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1860,1863],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1860,1863],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":173,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":176,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1925,1928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1925,1928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Public Search Functions\n * Search functions that don't require authentication (for registration, etc.)\n */\n\nimport { createLogger } from '../config/environment';\nimport { supabase } from '../supabase/supabase';\n\nconst logger = createLogger('PublicSearch');\n\n/**\n * Search barangays by name without authentication requirement\n * Used for user registration and public forms\n */\nexport const searchBarangaysPublic = async (searchTerm: string, limit = 20) => {\n  try {\n    if (!searchTerm || searchTerm.length < 2) {\n      return [];\n    }\n\n    logger.debug('Searching barangays publicly:', searchTerm);\n\n    const { data, error } = await supabase\n      .from('psgc_barangays')\n      .select(\n        `\n        code, \n        name,\n        city_municipality_code,\n        psgc_cities_municipalities!inner(\n          code,\n          name,\n          type,\n          province_code,\n          psgc_provinces!inner(\n            code,\n            name,\n            region_code,\n            psgc_regions!inner(\n              code,\n              name\n            )\n          )\n        )\n      `\n      )\n      .ilike('name', `%${searchTerm}%`)\n      .limit(limit)\n      .order('name');\n\n    if (error) {\n      logger.error('Error searching barangays:', error.message);\n      throw error;\n    }\n\n    // Transform data to match expected format\n    const transformedData =\n      data?.map(item => ({\n        code: item.code,\n        name: (item as any).name,\n        city_name: `${(item as any).psgc_cities_municipalities.name} (${(item as any).psgc_cities_municipalities.type})`,\n        province_name: (item as any).psgc_cities_municipalities.psgc_provinces.name,\n        region_name: (item as any).psgc_cities_municipalities.psgc_provinces.psgc_regions.name,\n        full_address: `${(item as any).name}, ${(item as any).psgc_cities_municipalities.name}, ${(item as any).psgc_cities_municipalities.psgc_provinces.name}, ${(item as any).psgc_cities_municipalities.psgc_provinces.psgc_regions.name}`,\n      })) || [];\n\n    logger.debug(`Found ${transformedData.length} barangays`);\n    return transformedData;\n  } catch (error) {\n    logger.error('Public barangay search failed:', error);\n    throw error;\n  }\n};\n\n/**\n * Search PSGC regions without authentication requirement\n */\nexport const getRegionsPublic = async () => {\n  try {\n    const { data, error } = await supabase.from('psgc_regions').select('code, name').order('name');\n\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    logger.error('Error fetching regions:', error);\n    throw error;\n  }\n};\n\n/**\n * Search PSGC provinces by region without authentication requirement\n */\nexport const getProvincesByRegionPublic = async (regionCode: string) => {\n  try {\n    const { data, error } = await supabase\n      .from('psgc_provinces')\n      .select('code, name')\n      .eq('region_code', regionCode)\n      .order('name');\n\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    logger.error('Error fetching provinces:', error);\n    throw error;\n  }\n};\n\n/**\n * Search PSGC cities by province without authentication requirement\n */\nexport const getCitiesByProvincePublic = async (provinceCode: string) => {\n  try {\n    const { data, error } = await supabase\n      .from('psgc_cities_municipalities')\n      .select('code, name, type')\n      .eq('province_code', provinceCode)\n      .order('name');\n\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    logger.error('Error fetching cities:', error);\n    throw error;\n  }\n};\n\n/**\n * Search barangays by city without authentication requirement\n */\nexport const getBarangaysByCityPublic = async (cityCode: string) => {\n  try {\n    const { data, error } = await supabase\n      .from('psgc_barangays')\n      .select('code, name')\n      .eq('city_municipality_code', cityCode)\n      .order('name');\n\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    logger.error('Error fetching barangays:', error);\n    throw error;\n  }\n};\n\n/**\n * Search occupations using unified search without authentication requirement\n */\nexport const searchOccupationsPublic = async (searchTerm: string, limit = 20) => {\n  try {\n    if (!searchTerm || searchTerm.length < 2) {\n      return [];\n    }\n\n    const { data, error } = await supabase\n      .from('psoc_unified_search')\n      .select('occupation_code, occupation_title, psoc_level, parent_title')\n      .ilike('search_text', `%${searchTerm}%`)\n      .limit(limit)\n      .order('occupation_title');\n\n    if (error) throw error;\n    return data || [];\n  } catch (error) {\n    logger.error('Error searching occupations:', error);\n    throw error;\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/security/api-security.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/security/audit-storage.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":48,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":48,"endColumn":19,"suggestions":[{"fix":{"range":[1282,1578],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":62,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":62,"endColumn":44},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":63,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":63,"endColumn":45},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":87,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":87,"endColumn":21,"suggestions":[{"fix":{"range":[2533,2848],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":120,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":120,"endColumn":44},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":121,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":121,"endColumn":45},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":226,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":226,"endColumn":44},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":227,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":227,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":299,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":299,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8525,8528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8525,8528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":334,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":334,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9513,9516],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9513,9516],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":382,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":382,"endColumn":44},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":383,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":383,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Secure Audit Storage Implementation\n * Handles secure storage of audit logs and security events\n */\n\nimport { createClient } from '@supabase/supabase-js';\n\nimport { logger } from '@/lib/logging';\n\nimport { ErrorCode as ApiErrorCode } from '../api/types';\n\nexport interface SecurityAuditLog {\n  id?: string;\n  operation: string;\n  user_id: string;\n  resource_type?: string;\n  resource_id?: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  details: Record<string, unknown>;\n  ip_address?: string;\n  user_agent?: string;\n  session_id?: string;\n  timestamp: string;\n  success: boolean;\n  error_message?: string;\n}\n\nexport interface ThreatDetectionEvent {\n  id?: string;\n  event_type: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  source_ip: string;\n  user_id?: string;\n  details: Record<string, unknown>;\n  timestamp: string;\n  mitigated: boolean;\n  mitigation_action?: string;\n}\n\n/**\n * Store security audit log in secure database\n */\nexport async function storeSecurityAuditLog(auditLog: SecurityAuditLog): Promise<void> {\n  try {\n    // Check if we have the required environment variables\n    if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {\n      // Just log to console instead - don't create an error\n      console.info(\n        '[SECURITY AUDIT - Console Only]',\n        JSON.stringify({\n          operation: auditLog.operation,\n          user_id: auditLog.user_id,\n          severity: auditLog.severity,\n          timestamp: auditLog.timestamp,\n          details: auditLog.details,\n        })\n      );\n      return;\n    }\n\n    const supabaseAdmin = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!\n    );\n\n    const { error } = await supabaseAdmin.from('security_audit_logs').insert({\n      operation: auditLog.operation,\n      user_id: auditLog.user_id,\n      resource_type: auditLog.resource_type,\n      resource_id: auditLog.resource_id,\n      severity: auditLog.severity,\n      details: auditLog.details,\n      ip_address: auditLog.ip_address,\n      user_agent: auditLog.user_agent,\n      session_id: auditLog.session_id,\n      timestamp: auditLog.timestamp,\n      success: auditLog.success,\n      error_message: auditLog.error_message,\n    });\n\n    if (error) {\n      // If table doesn't exist or other database errors, fall back to console logging\n      if (\n        error.code === 'PGRST116' ||\n        error.message?.includes('relation \"security_audit_logs\" does not exist')\n      ) {\n        console.info(\n          '[SECURITY AUDIT - Table Missing]',\n          JSON.stringify({\n            operation: auditLog.operation,\n            user_id: auditLog.user_id,\n            severity: auditLog.severity,\n            timestamp: auditLog.timestamp,\n            details: auditLog.details,\n          })\n        );\n      } else {\n        logger.error('Failed to store security audit log', { error, auditLog });\n      }\n    } else {\n      logger.debug('Security audit log stored successfully', { operation: auditLog.operation });\n    }\n\n    // For critical security events, also send to external monitoring\n    if (auditLog.severity === 'critical') {\n      await sendCriticalSecurityAlert(auditLog);\n    }\n  } catch (error) {\n    logger.error('Security audit storage service error', { error });\n    // Don't throw error to avoid disrupting main application flow\n  }\n}\n\n/**\n * Store threat detection event\n */\nexport async function storeThreatDetectionEvent(event: ThreatDetectionEvent): Promise<void> {\n  try {\n    const supabaseAdmin = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!\n    );\n\n    const { error } = await supabaseAdmin.from('threat_detection_events').insert({\n      event_type: event.event_type,\n      severity: event.severity,\n      source_ip: event.source_ip,\n      user_id: event.user_id,\n      details: event.details,\n      timestamp: event.timestamp,\n      mitigated: event.mitigated,\n      mitigation_action: event.mitigation_action,\n    });\n\n    if (error) {\n      logger.error('Failed to store threat detection event', { error, event });\n    } else {\n      logger.info('Threat detection event stored', {\n        eventType: event.event_type,\n        severity: event.severity,\n        sourceIp: event.source_ip,\n      });\n    }\n\n    // Auto-escalate high and critical threats\n    if (event.severity === 'high' || event.severity === 'critical') {\n      await escalateThreatEvent(event);\n    }\n  } catch (error) {\n    logger.error('Threat detection storage service error', { error });\n  }\n}\n\n/**\n * Send critical security alert to monitoring system\n */\nasync function sendCriticalSecurityAlert(auditLog: SecurityAuditLog): Promise<void> {\n  try {\n    // In production, this would integrate with:\n    // - Security Information and Event Management (SIEM) system\n    // - Slack/Teams notifications\n    // - SMS/email alerts\n    // - PagerDuty or similar incident management\n\n    logger.error('CRITICAL SECURITY EVENT DETECTED', {\n      operation: auditLog.operation,\n      userId: auditLog.user_id,\n      timestamp: auditLog.timestamp,\n      details: auditLog.details,\n      alert: 'IMMEDIATE_ATTENTION_REQUIRED',\n    });\n\n    // TODO: Integrate with external alerting system\n    // await sendSlackAlert(auditLog);\n    // await sendSmsAlert(auditLog);\n    // await createPagerDutyIncident(auditLog);\n  } catch (error) {\n    logger.error('Failed to send critical security alert', { error, auditLog });\n  }\n}\n\n/**\n * Escalate threat event for immediate response\n */\nasync function escalateThreatEvent(event: ThreatDetectionEvent): Promise<void> {\n  try {\n    logger.warn('THREAT ESCALATION', {\n      eventType: event.event_type,\n      severity: event.severity,\n      sourceIp: event.source_ip,\n      userId: event.user_id,\n      escalated: true,\n    });\n\n    // In production, this would:\n    // - Automatically block suspicious IPs\n    // - Disable compromised user accounts\n    // - Trigger incident response workflow\n    // - Alert security team immediately\n\n    // TODO: Implement automated threat response\n    // if (event.severity === 'critical') {\n    //   await blockSourceIp(event.source_ip);\n    //   if (event.user_id) {\n    //     await suspendUserAccount(event.user_id);\n    //   }\n    // }\n  } catch (error) {\n    logger.error('Failed to escalate threat event', { error, event });\n  }\n}\n\n/**\n * Query security audit logs for investigation\n */\nexport async function querySecurityAuditLogs(filters: {\n  userId?: string;\n  operation?: string;\n  severity?: string;\n  startDate?: string;\n  endDate?: string;\n  limit?: number;\n}): Promise<SecurityAuditLog[]> {\n  try {\n    const supabaseAdmin = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!\n    );\n\n    let query = supabaseAdmin\n      .from('security_audit_logs')\n      .select('*')\n      .order('timestamp', { ascending: false });\n\n    if (filters.userId) {\n      query = query.eq('user_id', filters.userId);\n    }\n\n    if (filters.operation) {\n      query = query.eq('operation', filters.operation);\n    }\n\n    if (filters.severity) {\n      query = query.eq('severity', filters.severity);\n    }\n\n    if (filters.startDate) {\n      query = query.gte('timestamp', filters.startDate);\n    }\n\n    if (filters.endDate) {\n      query = query.lte('timestamp', filters.endDate);\n    }\n\n    if (filters.limit) {\n      query = query.limit(filters.limit);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      logger.error('Failed to query security audit logs', { error, filters });\n      return [];\n    }\n\n    return data as SecurityAuditLog[];\n  } catch (error) {\n    logger.error('Security audit query service error', { error });\n    return [];\n  }\n}\n\n/**\n * Get security statistics for dashboard\n */\n// Audit event types for security tracking\nexport enum AuditEventType {\n  SQL_INJECTION_ATTEMPT = 'sql_injection_attempt',\n  XSS_ATTEMPT = 'xss_attempt',\n  UNAUTHORIZED_ACCESS = 'unauthorized_access',\n  RATE_LIMIT_EXCEEDED = 'rate_limit_exceeded',\n  MALICIOUS_FILE_UPLOAD = 'malicious_file_upload',\n  SUSPICIOUS_ACTIVITY = 'suspicious_activity',\n}\n\n// Error codes for audit logging\nexport enum ErrorCode {\n  DATABASE_ERROR = 'database_error',\n  INTERNAL_ERROR = 'internal_error',\n  VALIDATION_ERROR = 'validation_error',\n  AUTHENTICATION_ERROR = 'authentication_error',\n}\n\n/**\n * Audit error occurrences for security tracking\n */\nexport async function auditError(\n  error: Error,\n  context: any,\n  errorCode: ApiErrorCode\n): Promise<void> {\n  try {\n    const auditLog: SecurityAuditLog = {\n      operation: 'error_occurrence',\n      user_id: context?.userId || 'anonymous',\n      resource_type: context?.resourceType,\n      resource_id: context?.resourceId,\n      severity: 'medium',\n      details: {\n        error_code: errorCode,\n        error_message: error.message,\n        stack_trace: error.stack?.substring(0, 1000), // Limit stack trace\n        context,\n      },\n      ip_address: context?.ipAddress,\n      user_agent: context?.userAgent,\n      session_id: context?.sessionId,\n      timestamp: new Date().toISOString(),\n      success: false,\n      error_message: error.message,\n    };\n\n    await storeSecurityAuditLog(auditLog);\n  } catch (auditError) {\n    logger.error('Failed to audit error', { error: auditError });\n  }\n}\n\n/**\n * Audit security violations for threat detection\n */\nexport async function auditSecurityViolation(\n  eventType: AuditEventType,\n  context: any,\n  details?: Record<string, unknown>\n): Promise<void> {\n  try {\n    const threatEvent: ThreatDetectionEvent = {\n      event_type: eventType,\n      severity: 'high',\n      source_ip: context?.ipAddress || 'unknown',\n      user_id: context?.userId,\n      details: {\n        ...context,\n        ...details,\n      },\n      timestamp: new Date().toISOString(),\n      mitigated: true,\n      mitigation_action: 'Request blocked',\n    };\n\n    await storeThreatDetectionEvent(threatEvent);\n  } catch (auditError) {\n    logger.error('Failed to audit security violation', { error: auditError });\n  }\n}\n\nexport async function getSecurityStatistics(timeframe: '24h' | '7d' | '30d' = '24h'): Promise<{\n  totalEvents: number;\n  criticalEvents: number;\n  threatEvents: number;\n  failedLogins: number;\n  suspiciousActivities: number;\n}> {\n  try {\n    const now = new Date();\n    let startDate: Date;\n\n    switch (timeframe) {\n      case '24h':\n        startDate = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n        break;\n      case '7d':\n        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        break;\n      case '30d':\n        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n        break;\n    }\n\n    const supabaseAdmin = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!\n    );\n\n    const [auditResults, threatResults] = await Promise.all([\n      supabaseAdmin\n        .from('security_audit_logs')\n        .select('severity, operation, success')\n        .gte('timestamp', startDate.toISOString()),\n      supabaseAdmin\n        .from('threat_detection_events')\n        .select('severity, event_type')\n        .gte('timestamp', startDate.toISOString()),\n    ]);\n\n    const auditLogs = auditResults.data || [];\n    const threatEvents = threatResults.data || [];\n\n    return {\n      totalEvents: auditLogs.length,\n      criticalEvents: auditLogs.filter(log => log.severity === 'critical').length,\n      threatEvents: threatEvents.length,\n      failedLogins: auditLogs.filter(log => log.operation.includes('login') && !log.success).length,\n      suspiciousActivities: threatEvents.filter(event =>\n        ['suspicious_activity', 'brute_force', 'sql_injection'].includes(event.event_type)\n      ).length,\n    };\n  } catch (error) {\n    logger.error('Failed to get security statistics', { error });\n    return {\n      totalEvents: 0,\n      criticalEvents: 0,\n      threatEvents: 0,\n      failedLogins: 0,\n      suspiciousActivities: 0,\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/security/comprehensive-audit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/security/crypto.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":137,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":137,"endColumn":17,"suggestions":[{"fix":{"range":[3992,4161],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":149,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":149,"endColumn":17,"suggestions":[{"fix":{"range":[4308,4509],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import crypto from 'crypto';\n\nimport bcrypt from 'bcryptjs';\n\n/**\n * Cryptographic utilities for government data handling\n * Currently focused on hashing (PhilSys numbers) - no encryption in use\n */\n\nconst SALT_ROUNDS = 12; // High security for government data\n\n/**\n * Securely hash a PhilSys card number\n * @param philsysNumber - The PhilSys card number to hash\n * @returns Promise<string> - The hashed PhilSys number\n */\nexport async function hashPhilSysNumber(philsysNumber: string): Promise<string> {\n  if (!philsysNumber) {\n    throw new Error('PhilSys card number is required for hashing');\n  }\n\n  // Validate PhilSys format (basic validation)\n  const philsysPattern = /^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/;\n  if (!philsysPattern.test(philsysNumber)) {\n    throw new Error('Invalid PhilSys card number format');\n  }\n\n  try {\n    const hashedNumber = await bcrypt.hash(philsysNumber, SALT_ROUNDS);\n    return hashedNumber;\n  } catch (error) {\n    console.error('Error hashing PhilSys number:', error);\n    throw new Error('Failed to securely hash PhilSys card number');\n  }\n}\n\n/**\n * Verify a PhilSys card number against its hash\n * @param philsysNumber - The plain PhilSys card number\n * @param hashedNumber - The hashed PhilSys card number\n * @returns Promise<boolean> - Whether the numbers match\n */\nexport async function verifyPhilSysNumber(\n  philsysNumber: string,\n  hashedNumber: string\n): Promise<boolean> {\n  if (!philsysNumber || !hashedNumber) {\n    return false;\n  }\n\n  try {\n    return await bcrypt.compare(philsysNumber, hashedNumber);\n  } catch (error) {\n    console.error('Error verifying PhilSys number:', error);\n    return false;\n  }\n}\n\n/**\n * Extract and store the last 4 digits of PhilSys number for lookup purposes\n * @param philsysNumber - The PhilSys card number\n * @returns string - The last 4 digits\n */\nexport function extractPhilSysLast4(philsysNumber: string): string {\n  if (!philsysNumber) {\n    throw new Error('PhilSys card number is required');\n  }\n\n  // Remove all non-digit characters and get last 4 digits\n  const digitsOnly = philsysNumber.replace(/\\D/g, '');\n\n  if (digitsOnly.length < 4) {\n    throw new Error('PhilSys card number must contain at least 4 digits');\n  }\n\n  return digitsOnly.slice(-4);\n}\n\n/**\n * Sanitize PhilSys input for display (mask sensitive parts)\n * @param philsysNumber - The PhilSys card number\n * @returns string - Masked PhilSys number (****-****-****-1234)\n */\nexport function maskPhilSysNumber(philsysNumber: string): string {\n  if (!philsysNumber) {\n    return '';\n  }\n\n  const last4 = extractPhilSysLast4(philsysNumber);\n  return `****-****-****-${last4}`;\n}\n\n/**\n * Validate PhilSys card number format\n * @param philsysNumber - The PhilSys card number to validate\n * @returns boolean - Whether the format is valid\n */\n// validatePhilSysFormat moved to @/utils/sanitization-utils - removed duplicate\n\n/**\n * Security audit log for sensitive operations\n * @param operation - The operation being performed\n * @param userId - The user performing the operation\n * @param details - Additional operation details\n * @param success - Whether the operation was successful\n * @param ipAddress - IP address of the user\n * @param userAgent - User agent string\n */\nexport async function logSecurityOperation(\n  operation: string,\n  userId: string,\n  details?: Record<string, unknown>,\n  success: boolean = true,\n  ipAddress?: string,\n  userAgent?: string\n): Promise<void> {\n  try {\n    // Import here to avoid circular dependencies\n    const { storeSecurityAuditLog } = await import('./audit-storage');\n\n    const auditLog = {\n      operation,\n      user_id: userId,\n      severity: 'medium' as const,\n      details: details || {},\n      ip_address: ipAddress || 'server-side',\n      user_agent: userAgent,\n      session_id: undefined,\n      timestamp: new Date().toISOString(),\n      success,\n    };\n\n    // Store in secure audit database\n    await storeSecurityAuditLog(auditLog);\n\n    // Also log to console for immediate visibility\n    console.info(\n      '[SECURITY AUDIT]',\n      JSON.stringify({\n        operation,\n        userId,\n        success,\n        timestamp: auditLog.timestamp,\n      })\n    );\n  } catch (error) {\n    // Fallback to console logging if audit storage fails\n    console.error('Failed to store security audit log', error);\n    console.info(\n      '[SECURITY AUDIT FALLBACK]',\n      JSON.stringify({\n        operation,\n        userId,\n        success,\n        timestamp: new Date().toISOString(),\n        details,\n      })\n    );\n  }\n}\n\n// Simple utility functions for tests (not used in actual application)\nexport async function encryptPII(data: string): Promise<string> {\n  // Mock implementation for tests - not actually used\n  return `encrypted_${data}`;\n}\n\nexport async function decryptPII(encryptedData: string): Promise<string> {\n  // Mock implementation for tests - not actually used\n  return encryptedData.replace('encrypted_', '');\n}\n\nexport async function hashData(data: string): Promise<string> {\n  return await bcrypt.hash(data, SALT_ROUNDS);\n}\n\nexport function generateSecureToken(): string {\n  return crypto.randomBytes(32).toString('hex');\n}\n\nexport async function validateHash(data: string, hash: string): Promise<boolean> {\n  return await bcrypt.compare(data, hash);\n}\n\nexport function secureCompare(a: string, b: string): boolean {\n  return crypto.timingSafeEqual(Buffer.from(a), Buffer.from(b));\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/security/file-security.ts","messages":[{"ruleId":"no-script-url","severity":2,"message":"Script URL is a form of eval.","line":28,"column":15,"nodeType":"Literal","messageId":"unexpectedScriptURL","endLine":28,"endColumn":28},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":277,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":277,"endColumn":14,"suggestions":[{"fix":{"range":[7131,7222],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":352,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":352,"endColumn":17,"suggestions":[{"fix":{"range":[9399,9633],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":376,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":376,"endColumn":17,"suggestions":[{"fix":{"range":[10090,10376],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * File Upload Security Utilities\n * Provides comprehensive security validation for file uploads\n */\n\nimport { createHash } from 'crypto';\n\n// Security configuration\nconst MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB\nconst ALLOWED_MIME_TYPES = [\n  'image/jpeg',\n  'image/png',\n  'image/gif',\n  'image/webp',\n  'application/pdf',\n];\n\nconst ALLOWED_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.pdf'];\n\n// Known malicious file signatures (first few bytes)\nconst MALICIOUS_SIGNATURES = [\n  // PE Executable signatures\n  Buffer.from([0x4d, 0x5a]), // MZ header (Windows executables)\n  Buffer.from([0x50, 0x4b]), // PK header (could be ZIP with executable)\n  // Script signatures\n  Buffer.from('<?php', 'utf-8'),\n  Buffer.from('<script', 'utf-8'),\n  Buffer.from('javascript:', 'utf-8'),\n  // Shell script signatures\n  Buffer.from('#!/bin/sh', 'utf-8'),\n  Buffer.from('#!/bin/bash', 'utf-8'),\n];\n\nexport interface FileValidationResult {\n  isValid: boolean;\n  errors: string[];\n  fileInfo?: {\n    name: string;\n    size: number;\n    type: string;\n    hash: string;\n  };\n}\n\n/**\n * Validate file size\n */\nfunction validateFileSize(file: File): string[] {\n  const errors: string[] = [];\n\n  if (file.size > MAX_FILE_SIZE) {\n    errors.push(\n      `File size (${(file.size / 1024 / 1024).toFixed(2)}MB) exceeds maximum allowed size (${MAX_FILE_SIZE / 1024 / 1024}MB)`\n    );\n  }\n\n  if (file.size === 0) {\n    errors.push('File is empty');\n  }\n\n  return errors;\n}\n\n/**\n * Validate file type and extension\n */\nfunction validateFileType(file: File): string[] {\n  const errors: string[] = [];\n\n  // Check MIME type\n  if (!ALLOWED_MIME_TYPES.includes(file.type)) {\n    errors.push(\n      `File type \"${file.type}\" is not allowed. Allowed types: ${ALLOWED_MIME_TYPES.join(', ')}`\n    );\n  }\n\n  // Check file extension\n  const extension = '.' + file.name.split('.').pop()?.toLowerCase();\n  if (!ALLOWED_EXTENSIONS.includes(extension)) {\n    errors.push(\n      `File extension \"${extension}\" is not allowed. Allowed extensions: ${ALLOWED_EXTENSIONS.join(', ')}`\n    );\n  }\n\n  return errors;\n}\n\n/**\n * Validate file name for security issues\n */\nfunction validateFileName(fileName: string): string[] {\n  const errors: string[] = [];\n\n  // Check for directory traversal\n  if (fileName.includes('..') || fileName.includes('/') || fileName.includes('\\\\')) {\n    errors.push('File name contains invalid characters (directory traversal)');\n  }\n\n  // Check for null bytes\n  if (fileName.includes('\\0')) {\n    errors.push('File name contains null bytes');\n  }\n\n  // Check for excessively long names\n  if (fileName.length > 255) {\n    errors.push('File name is too long (max 255 characters)');\n  }\n\n  // Check for reserved names (Windows)\n  const reservedNames = [\n    'CON',\n    'PRN',\n    'AUX',\n    'NUL',\n    'COM1',\n    'COM2',\n    'COM3',\n    'COM4',\n    'COM5',\n    'COM6',\n    'COM7',\n    'COM8',\n    'COM9',\n    'LPT1',\n    'LPT2',\n    'LPT3',\n    'LPT4',\n    'LPT5',\n    'LPT6',\n    'LPT7',\n    'LPT8',\n    'LPT9',\n  ];\n  const baseName = fileName.split('.')[0].toUpperCase();\n  if (reservedNames.includes(baseName)) {\n    errors.push(`File name \"${baseName}\" is reserved and not allowed`);\n  }\n\n  return errors;\n}\n\n/**\n * Check file content for malicious signatures\n */\nasync function validateFileContent(file: File): Promise<string[]> {\n  const errors: string[] = [];\n\n  try {\n    // Read first 1KB of file to check for malicious signatures\n    const buffer = await file.slice(0, 1024).arrayBuffer();\n    const fileHeader = Buffer.from(buffer);\n\n    // Check against known malicious signatures\n    for (const signature of MALICIOUS_SIGNATURES) {\n      if (fileHeader.subarray(0, signature.length).equals(signature)) {\n        errors.push('File contains potentially malicious content');\n        break;\n      }\n    }\n\n    // Additional content validation for images\n    if (file.type.startsWith('image/')) {\n      // Basic validation - actual images should start with proper headers\n      const imageSignatures = {\n        'image/jpeg': [Buffer.from([0xff, 0xd8, 0xff])],\n        'image/png': [Buffer.from([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a])],\n        'image/gif': [Buffer.from('GIF87a', 'ascii'), Buffer.from('GIF89a', 'ascii')],\n        'image/webp': [Buffer.from('WEBP', 'ascii')],\n      };\n\n      const signatures = imageSignatures[file.type as keyof typeof imageSignatures];\n      if (signatures) {\n        const validSignature = signatures.some(\n          sig =>\n            fileHeader.subarray(0, sig.length).equals(sig) ||\n            fileHeader.subarray(8, 8 + sig.length).equals(sig) // For WEBP (RIFF header)\n        );\n\n        if (!validSignature) {\n          errors.push(`File does not appear to be a valid ${file.type} image`);\n        }\n      }\n    }\n  } catch {\n    errors.push('Unable to validate file content');\n  }\n\n  return errors;\n}\n\n/**\n * Generate secure hash of file content\n */\nasync function generateFileHash(file: File): Promise<string> {\n  const buffer = await file.arrayBuffer();\n  const hash = createHash('sha256');\n  hash.update(Buffer.from(buffer));\n  return hash.digest('hex');\n}\n\n/**\n * Sanitize file name for safe storage\n */\nexport function sanitizeFileName(fileName: string): string {\n  return fileName\n    .replace(/[^a-zA-Z0-9._-]/g, '_') // Replace unsafe characters\n    .replace(/_{2,}/g, '_') // Replace multiple underscores\n    .substring(0, 100) // Limit length\n    .toLowerCase();\n}\n\n/**\n * Generate unique file name to prevent conflicts\n */\nexport function generateUniqueFileName(originalName: string): string {\n  const timestamp = Date.now();\n  const random = Math.random().toString(36).substring(2, 8);\n  const extension = '.' + originalName.split('.').pop()?.toLowerCase();\n  const baseName = sanitizeFileName(originalName.replace(/\\.[^/.]+$/, ''));\n\n  return `${baseName}_${timestamp}_${random}${extension}`;\n}\n\n/**\n * Comprehensive file validation\n */\nexport async function validateUploadedFile(file: File): Promise<FileValidationResult> {\n  const errors: string[] = [];\n\n  // Basic validations\n  errors.push(...validateFileSize(file));\n  errors.push(...validateFileType(file));\n  errors.push(...validateFileName(file.name));\n\n  // Content validation\n  const contentErrors = await validateFileContent(file);\n  errors.push(...contentErrors);\n\n  // Generate file hash if no critical errors\n  let fileHash = '';\n  if (errors.length === 0) {\n    try {\n      fileHash = await generateFileHash(file);\n    } catch {\n      errors.push('Unable to generate file hash');\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    fileInfo:\n      errors.length === 0\n        ? {\n            name: file.name,\n            size: file.size,\n            type: file.type,\n            hash: fileHash,\n          }\n        : undefined,\n  };\n}\n\n/**\n * Virus scanning placeholder (would integrate with actual AV service)\n */\nexport async function scanFileForViruses(file: File): Promise<{\n  clean: boolean;\n  threats: string[];\n}> {\n  // In production, this would integrate with services like:\n  // - ClamAV\n  // - VirusTotal API\n  // - AWS GuardDuty\n  // - Microsoft Defender API\n\n  console.log(`[SECURITY] Virus scan requested for file: ${file.name} (${file.size} bytes)`);\n\n  // For now, just check file size and type as a basic heuristic\n  const suspicious =\n    file.size > 50 * 1024 * 1024 || // > 50MB\n    file.name.match(/\\.(exe|bat|cmd|scr|pif|com)$/i);\n\n  return {\n    clean: !suspicious,\n    threats: suspicious ? ['Suspicious file characteristics detected'] : [],\n  };\n}\n\n/**\n * Security audit log for file operations\n */\nexport async function logFileOperation(\n  operation: 'upload' | 'download' | 'delete',\n  fileName: string,\n  userId: string,\n  result: 'success' | 'failure' | 'blocked',\n  details?: Record<string, string | number | boolean>,\n  ipAddress?: string,\n  userAgent?: string\n): Promise<void> {\n  try {\n    // Import here to avoid circular dependencies\n    const { storeSecurityAuditLog } = await import('./audit-storage');\n    const { recordSecurityEvent } = await import('./threat-detection');\n\n    const operationName = `FILE_${operation.toUpperCase()}`;\n    const isSuccess = result === 'success';\n    const severity = result === 'blocked' ? 'high' : 'low';\n\n    const auditLog = {\n      operation: operationName,\n      user_id: userId,\n      resource_type: 'file',\n      resource_id: sanitizeFileName(fileName),\n      severity: severity as 'low' | 'high',\n      details: {\n        fileName: sanitizeFileName(fileName),\n        result,\n        ...details,\n      },\n      ip_address: ipAddress || 'server-side',\n      user_agent: userAgent,\n      timestamp: new Date().toISOString(),\n      success: isSuccess,\n      error_message: result === 'failure' ? 'File operation failed' : undefined,\n    };\n\n    // Store in secure audit database\n    await storeSecurityAuditLog(auditLog);\n\n    // Record security event for threat detection\n    if (result === 'blocked' || result === 'failure') {\n      await recordSecurityEvent(\n        'file_security_violation',\n        {\n          userId,\n          ipAddress: ipAddress || 'unknown',\n          userAgent,\n          requestPath: `/file/${operation}`,\n          timestamp: new Date().toISOString(),\n        },\n        {\n          operation,\n          fileName: sanitizeFileName(fileName),\n          result,\n        }\n      );\n    }\n\n    // Console log for immediate visibility\n    console.info(\n      '[FILE_SECURITY_AUDIT]',\n      JSON.stringify({\n        operation: operationName,\n        fileName: sanitizeFileName(fileName),\n        userId,\n        result,\n        timestamp: auditLog.timestamp,\n      })\n    );\n\n    // Alert on suspicious patterns\n    if (result === 'blocked') {\n      console.warn('[FILE_SECURITY_ALERT]', {\n        message: 'Suspicious file operation blocked',\n        operation,\n        fileName: sanitizeFileName(fileName),\n        userId,\n        timestamp: auditLog.timestamp,\n      });\n    }\n  } catch (error) {\n    // Fallback to console logging if audit storage fails\n    console.error('Failed to store file security audit log', error);\n    console.info(\n      '[FILE_SECURITY_AUDIT_FALLBACK]',\n      JSON.stringify({\n        operation: `FILE_${operation.toUpperCase()}`,\n        fileName: sanitizeFileName(fileName),\n        userId,\n        result,\n        timestamp: new Date().toISOString(),\n        details,\n      })\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/security/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/security/philippine-logging.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1922,1925],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1922,1925],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1944,1947],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1944,1947],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2013,2016],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2013,2016],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":111,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":111,"endColumn":18,"suggestions":[{"fix":{"range":[2803,2986],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":121,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":121,"endColumn":16,"suggestions":[{"fix":{"range":[3121,3295],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":153,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":153,"endColumn":16,"suggestions":[{"fix":{"range":[4109,4328],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":173,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":173,"endColumn":16,"suggestions":[{"fix":{"range":[4690,4984],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5292,5295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5292,5295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Philippine-Compliant Logging System\n *\n * Implements Data Privacy Act of 2012 (RA 10173) compliant logging\n * with BSP Circular 808 requirements for government systems.\n */\n\nimport crypto from 'crypto';\n\nimport type { PhilippineLogContext, AuditLogContext, NPCLogContext } from '@/types/errors';\n\n// Philippine regulatory compliance constants\nconst RA_10173_SENSITIVE_FIELDS = new Set([\n  'first_name',\n  'last_name',\n  'middle_name',\n  'extension_name',\n  'birthdate',\n  'mobile_number',\n  'telephone_number',\n  'email',\n  'philsys_card_number',\n  'mother_maiden_first',\n  'mother_maiden_middle',\n  'mother_maiden_last',\n  'address',\n  'password',\n  'token',\n  'ssn',\n]);\n\nconst NPC_CLASSIFICATION = {\n  PERSONAL: 'PERSONAL_INFORMATION',\n  SENSITIVE: 'SENSITIVE_PERSONAL_INFORMATION',\n  PRIVILEGED: 'PRIVILEGED_INFORMATION',\n} as const;\n\n/**\n * Hash PII data per BSP Circular 808 requirements\n */\nexport function hashPII(data: string | undefined): string {\n  if (!data) return '';\n  return crypto.createHash('sha256').update(data).digest('hex').substring(0, 16) + '***';\n}\n\n/**\n * Mask sensitive data per NPC Circular 16-01\n */\nexport function maskSensitiveData(\n  data: string | undefined,\n  type: 'BARANGAY' | 'PHILSYS' | 'MOBILE' | 'EMAIL'\n): string {\n  if (!data) return '';\n\n  switch (type) {\n    case 'BARANGAY':\n      return data.length > 3 ? data.substring(0, 3) + '***' : '***';\n    case 'PHILSYS':\n      return '****-****-****';\n    case 'MOBILE':\n      return '+639********';\n    case 'EMAIL':\n      const [local, domain] = data.split('@');\n      return `${local.substring(0, 2)}***@${domain}`;\n    default:\n      return '***';\n  }\n}\n\n/**\n * Generate secure session ID for audit trail\n */\nexport function generateSecureSessionId(): string {\n  return crypto.randomBytes(16).toString('hex');\n}\n\n/**\n * Sanitize context data to remove PII per RA 10173\n */\nfunction sanitizeContext(context?: Record<string, any>): Record<string, any> {\n  if (!context) return {};\n\n  const sanitized: Record<string, any> = {};\n\n  Object.entries(context).forEach(([key, value]) => {\n    if (RA_10173_SENSITIVE_FIELDS.has(key)) {\n      // Don't log sensitive fields at all per NPC guidelines\n      return;\n    }\n\n    if (typeof value === 'string' && value.length > 100) {\n      // Truncate long strings to prevent log bloat\n      sanitized[key] = value.substring(0, 100) + '...';\n    } else {\n      sanitized[key] = value;\n    }\n  });\n\n  return sanitized;\n}\n\n/**\n * Philippine Data Privacy Act compliant logger\n */\nclass PhilippineCompliantLogger {\n  private logLevel = process.env.NODE_ENV === 'development' ? 'debug' : 'info';\n\n  debug(message: string, context?: PhilippineLogContext): void {\n    if (process.env.NODE_ENV === 'development') {\n      const sanitizedContext = sanitizeContext(context);\n      console.log(`[RA10173-DEBUG] ${message}`, {\n        ...sanitizedContext,\n        dpCompliance: 'RA_10173_SECTION_12',\n        logClassification: NPC_CLASSIFICATION.PERSONAL,\n      });\n    }\n  }\n\n  info(message: string, context?: PhilippineLogContext): void {\n    const sanitizedContext = sanitizeContext(context);\n    console.log(`[RA10173-INFO] ${message}`, {\n      ...sanitizedContext,\n      dpCompliance: 'RA_10173_SECTION_12',\n      logClassification: NPC_CLASSIFICATION.PERSONAL,\n    });\n  }\n\n  warn(message: string, context?: PhilippineLogContext): void {\n    const sanitizedContext = sanitizeContext(context);\n    console.warn(`[RA10173-WARN] ${message}`, {\n      ...sanitizedContext,\n      dpCompliance: 'RA_10173_SECTION_21',\n      logClassification: NPC_CLASSIFICATION.SENSITIVE,\n    });\n  }\n\n  error(message: string, context?: PhilippineLogContext): void {\n    const sanitizedContext = sanitizeContext(context);\n    console.error(`[RA10173-ERROR] ${message}`, {\n      ...sanitizedContext,\n      dpCompliance: 'RA_10173_SECTION_21',\n      logClassification: NPC_CLASSIFICATION.SENSITIVE,\n      npcNotificationRequired: true,\n    });\n  }\n}\n\n/**\n * BSP Circular 808 compliant audit logger for government systems\n */\nclass AuditLogger {\n  info(message: string, context: AuditLogContext): void {\n    console.log(`[BSP808-AUDIT] ${message}`, {\n      ...context,\n      auditCompliance: 'BSP_CIRCULAR_808',\n      governmentSystem: true,\n      logIntegrity: this.generateLogHash(context),\n      npcRegistered: true,\n    });\n  }\n\n  private generateLogHash(context: AuditLogContext): string {\n    const logString = JSON.stringify(context);\n    return crypto.createHash('sha256').update(logString).digest('hex').substring(0, 16);\n  }\n}\n\n/**\n * NPC-compliant logger for data processing activities\n */\nclass NPCComplianceLogger {\n  info(message: string, context: NPCLogContext): void {\n    console.log(`[NPC-COMPLIANCE] ${message}`, {\n      ...context,\n      npcCompliance: 'NPC_CIRCULAR_16_03',\n      dataPrivacyOfficer: process.env.DPO_CONTACT || 'dpo@barangay.gov.ph',\n      privacyNotice: 'Available at /privacy-notice',\n      dataSubjectRights: 'RA_10173_SECTIONS_16_18',\n    });\n  }\n}\n\n// Export singleton instances\nexport const philippineCompliantLogger = new PhilippineCompliantLogger();\nexport const auditLogger = new AuditLogger();\nexport const npcComplianceLogger = new NPCComplianceLogger();\n\n/**\n * Utility functions for request handling\n */\nexport function getClientIP(request: any): string {\n  return (\n    request?.ip ||\n    request?.headers?.['x-forwarded-for']?.split(',')[0] ||\n    request?.connection?.remoteAddress ||\n    'unknown'\n  );\n}\n\nexport function sanitizeUserAgent(userAgent: string | undefined): string {\n  if (!userAgent) return 'unknown';\n  // Remove potentially sensitive information from user agent\n  return userAgent.substring(0, 50).replace(/[<>]/g, '');\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/security/rate-limit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/security/security-audit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/security/threat-detection.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'history' is defined but never used. Allowed unused args must match /^_/u.","line":185,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":185,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'history' is defined but never used. Allowed unused args must match /^_/u.","line":207,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":207,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Real-time Threat Detection System\n * Monitors and detects security threats in real-time\n */\n\nimport { logger } from '@/lib/logging';\n\nimport { storeThreatDetectionEvent, ThreatDetectionEvent } from './audit-storage';\n\nexport interface SecurityContext {\n  userId?: string;\n  sessionId?: string;\n  ipAddress?: string;\n  userAgent?: string;\n  requestPath?: string;\n  timestamp: string;\n}\n\nexport interface ThreatPattern {\n  name: string;\n  description: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  detector: (context: SecurityContext, history: SecurityEvent[]) => boolean;\n  mitigation?: (context: SecurityContext) => Promise<void>;\n}\n\nexport interface SecurityEvent {\n  type: string;\n  context: SecurityContext;\n  timestamp: string;\n  metadata?: Record<string, unknown>;\n}\n\n// In-memory cache for recent security events (in production, use Redis)\nconst eventCache = new Map<string, SecurityEvent[]>();\nconst CACHE_TTL = 30 * 60 * 1000; // 30 minutes\nconst MAX_EVENTS_PER_IP = 1000;\n\n/**\n * Record a security event for analysis\n */\nexport async function recordSecurityEvent(\n  eventType: string,\n  context: SecurityContext,\n  metadata?: Record<string, unknown>\n): Promise<void> {\n  const event: SecurityEvent = {\n    type: eventType,\n    context,\n    timestamp: context.timestamp,\n    metadata,\n  };\n\n  // Store in cache for pattern analysis\n  const cacheKey = context.ipAddress || 'unknown';\n  const events = eventCache.get(cacheKey) || [];\n\n  // Add new event and maintain cache size\n  events.push(event);\n  if (events.length > MAX_EVENTS_PER_IP) {\n    events.shift(); // Remove oldest event\n  }\n\n  eventCache.set(cacheKey, events);\n\n  // Clean old events periodically\n  cleanupOldEvents();\n\n  // Analyze for threats\n  await analyzeThreatPatterns(context, events);\n\n  logger.debug('Security event recorded', {\n    eventType,\n    userId: context.userId,\n    ipAddress: context.ipAddress,\n  });\n}\n\n/**\n * Analyze security events for threat patterns\n */\nasync function analyzeThreatPatterns(\n  context: SecurityContext,\n  history: SecurityEvent[]\n): Promise<void> {\n  const threatPatterns: ThreatPattern[] = [\n    bruteForceDetector,\n    sqlInjectionDetector,\n    xssAttemptDetector,\n    suspiciousNavigationDetector,\n    rapidRequestDetector,\n    privilegeEscalationDetector,\n    dataExfiltrationDetector,\n  ];\n\n  for (const pattern of threatPatterns) {\n    try {\n      if (pattern.detector(context, history)) {\n        await handleThreatDetection(pattern, context);\n      }\n    } catch (error) {\n      logger.error('Error in threat pattern analysis', {\n        pattern: pattern.name,\n        error,\n      });\n    }\n  }\n}\n\n/**\n * Handle detected threat\n */\nasync function handleThreatDetection(\n  pattern: ThreatPattern,\n  context: SecurityContext\n): Promise<void> {\n  const threatEvent: ThreatDetectionEvent = {\n    event_type: pattern.name,\n    severity: pattern.severity,\n    source_ip: context.ipAddress || 'unknown',\n    user_id: context.userId,\n    details: {\n      description: pattern.description,\n      context,\n      detectedAt: new Date().toISOString(),\n    },\n    timestamp: new Date().toISOString(),\n    mitigated: false,\n  };\n\n  // Store threat event\n  await storeThreatDetectionEvent(threatEvent);\n\n  // Apply mitigation if available\n  if (pattern.mitigation) {\n    try {\n      await pattern.mitigation(context);\n      threatEvent.mitigated = true;\n      threatEvent.mitigation_action = `Applied ${pattern.name} mitigation`;\n    } catch (error) {\n      logger.error('Failed to apply threat mitigation', {\n        pattern: pattern.name,\n        error,\n      });\n    }\n  }\n\n  logger.warn('THREAT DETECTED', {\n    threat: pattern.name,\n    severity: pattern.severity,\n    userId: context.userId,\n    ipAddress: context.ipAddress,\n    mitigated: threatEvent.mitigated,\n  });\n}\n\n/**\n * Brute force attack detector\n */\nconst bruteForceDetector: ThreatPattern = {\n  name: 'brute_force_attack',\n  description: 'Multiple failed login attempts detected',\n  severity: 'high',\n  detector: (context, history) => {\n    const recentFailedLogins = history.filter(\n      event =>\n        event.type === 'login_failed' &&\n        Date.now() - new Date(event.timestamp).getTime() < 5 * 60 * 1000 // Last 5 minutes\n    );\n    return recentFailedLogins.length >= 5;\n  },\n  mitigation: async context => {\n    // TODO: Implement IP blocking or account lockout\n    logger.warn('Brute force mitigation triggered', { ipAddress: context.ipAddress });\n  },\n};\n\n/**\n * SQL injection attempt detector\n */\nconst sqlInjectionDetector: ThreatPattern = {\n  name: 'sql_injection_attempt',\n  description: 'Potential SQL injection attack detected',\n  severity: 'critical',\n  detector: (context, history) => {\n    const sqlPatterns = [\n      /union\\s+select/i,\n      /drop\\s+table/i,\n      /delete\\s+from/i,\n      /update\\s+.*\\s+set/i,\n      /'.*or.*'.*='.*'/i,\n      /exec\\s*\\(/i,\n    ];\n\n    const requestPath = context.requestPath || '';\n    return sqlPatterns.some(pattern => pattern.test(requestPath));\n  },\n};\n\n/**\n * XSS attempt detector\n */\nconst xssAttemptDetector: ThreatPattern = {\n  name: 'xss_attempt',\n  description: 'Cross-site scripting attempt detected',\n  severity: 'high',\n  detector: (context, history) => {\n    const xssPatterns = [\n      /<script[^>]*>.*<\\/script>/i,\n      /javascript:/i,\n      /on\\w+\\s*=/i,\n      /<iframe[^>]*>/i,\n      /eval\\s*\\(/i,\n    ];\n\n    const requestPath = context.requestPath || '';\n    return xssPatterns.some(pattern => pattern.test(requestPath));\n  },\n};\n\n/**\n * Suspicious navigation detector\n */\nconst suspiciousNavigationDetector: ThreatPattern = {\n  name: 'suspicious_navigation',\n  description: 'Unusual navigation patterns detected',\n  severity: 'medium',\n  detector: (context, history) => {\n    const recentRequests = history.filter(\n      event => Date.now() - new Date(event.timestamp).getTime() < 1 * 60 * 1000 // Last 1 minute\n    );\n\n    // Check for directory traversal attempts\n    const traversalAttempts = recentRequests.filter(\n      event =>\n        event.context.requestPath?.includes('../') || event.context.requestPath?.includes('..\\\\')\n    );\n\n    return traversalAttempts.length > 0;\n  },\n};\n\n/**\n * Rapid request detector (potential DDoS)\n */\nconst rapidRequestDetector: ThreatPattern = {\n  name: 'rapid_requests',\n  description: 'Unusually high request rate detected',\n  severity: 'medium',\n  detector: (context, history) => {\n    const recentRequests = history.filter(\n      event => Date.now() - new Date(event.timestamp).getTime() < 1 * 60 * 1000 // Last 1 minute\n    );\n\n    return recentRequests.length > 100; // More than 100 requests per minute\n  },\n  mitigation: async context => {\n    // TODO: Implement rate limiting\n    logger.warn('Rate limiting triggered', { ipAddress: context.ipAddress });\n  },\n};\n\n/**\n * Privilege escalation detector\n */\nconst privilegeEscalationDetector: ThreatPattern = {\n  name: 'privilege_escalation',\n  description: 'Potential privilege escalation attempt detected',\n  severity: 'critical',\n  detector: (context, history) => {\n    const adminAttempts = history.filter(\n      event =>\n        event.type === 'access_denied' &&\n        event.context.requestPath?.includes('/admin') &&\n        Date.now() - new Date(event.timestamp).getTime() < 10 * 60 * 1000 // Last 10 minutes\n    );\n\n    return adminAttempts.length >= 3;\n  },\n};\n\n/**\n * Data exfiltration detector\n */\nconst dataExfiltrationDetector: ThreatPattern = {\n  name: 'data_exfiltration',\n  description: 'Potential data exfiltration detected',\n  severity: 'critical',\n  detector: (context, history) => {\n    const dataRequests = history.filter(\n      event =>\n        event.type === 'data_access' &&\n        Date.now() - new Date(event.timestamp).getTime() < 5 * 60 * 1000 // Last 5 minutes\n    );\n\n    // Check for unusual data access patterns\n    const uniqueResources = new Set(dataRequests.map(event => event.context.requestPath));\n\n    return dataRequests.length > 50 && uniqueResources.size > 20;\n  },\n};\n\n/**\n * Clean up old events from cache\n */\nfunction cleanupOldEvents(): void {\n  const now = Date.now();\n\n  for (const [key, events] of Array.from(eventCache.entries())) {\n    const filteredEvents = events.filter(\n      event => now - new Date(event.timestamp).getTime() < CACHE_TTL\n    );\n\n    if (filteredEvents.length === 0) {\n      eventCache.delete(key);\n    } else {\n      eventCache.set(key, filteredEvents);\n    }\n  }\n}\n\n/**\n * Get current threat level for an IP address\n */\nexport function getThreatLevel(ipAddress: string): 'low' | 'medium' | 'high' | 'critical' {\n  const events = eventCache.get(ipAddress) || [];\n  const recentEvents = events.filter(\n    event => Date.now() - new Date(event.timestamp).getTime() < 10 * 60 * 1000 // Last 10 minutes\n  );\n\n  const failedLogins = recentEvents.filter(event => event.type === 'login_failed').length;\n  const accessDenied = recentEvents.filter(event => event.type === 'access_denied').length;\n  const totalEvents = recentEvents.length;\n\n  if (failedLogins >= 10 || accessDenied >= 5) {\n    return 'critical';\n  } else if (failedLogins >= 5 || accessDenied >= 3 || totalEvents > 200) {\n    return 'high';\n  } else if (failedLogins >= 2 || totalEvents > 100) {\n    return 'medium';\n  } else {\n    return 'low';\n  }\n}\n\n/**\n * Check if IP address should be blocked\n */\nexport function shouldBlockIp(ipAddress: string): boolean {\n  const threatLevel = getThreatLevel(ipAddress);\n  return threatLevel === 'critical';\n}\n\n/**\n * Get security insights for monitoring dashboard\n */\nexport function getSecurityInsights(): {\n  activeThreats: number;\n  blockedIps: number;\n  monitoredIps: number;\n  avgThreatLevel: string;\n} {\n  const allIps = Array.from(eventCache.keys());\n  const threatLevels = allIps.map(ip => getThreatLevel(ip));\n\n  const blockedIps = allIps.filter(ip => shouldBlockIp(ip)).length;\n  const activeThreats = threatLevels.filter(\n    level => level === 'high' || level === 'critical'\n  ).length;\n\n  // Calculate average threat level (simplified)\n  const levelValues = { low: 1, medium: 2, high: 3, critical: 4 };\n  const avgValue =\n    threatLevels.reduce((sum, level) => sum + levelValues[level], 0) / threatLevels.length || 1;\n\n  const avgThreatLevel =\n    Object.keys(levelValues).find(\n      level => levelValues[level as keyof typeof levelValues] >= Math.round(avgValue)\n    ) || 'low';\n\n  return {\n    activeThreats,\n    blockedIps,\n    monitoredIps: allIps.length,\n    avgThreatLevel,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/storage/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/storybookUtils.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[699,702],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[699,702],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2489,2492],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2489,2492],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2567,2570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2567,2570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2968,2971],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2968,2971],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3043,3046],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3043,3046],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3436,3439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3436,3439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3460,3463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3460,3463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":412,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":412,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10201,10204],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10201,10204],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":509,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":509,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12770,12773],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12770,12773],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":553,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":553,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14056,14059],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14056,14059],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":571,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":571,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14402,14405],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14402,14405],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Consolidated Storybook Story Utilities\n * \n * @fileoverview Eliminates duplicate reset/validate patterns across Storybook stories.\n * Provides standardized interactive story components, validation patterns, and\n * progressive data filling utilities for consistent story development.\n * \n * @version 1.0.0\n * @since 2025-08-29\n * @author Citizenly Development Team\n */\n\n'use client';\n\nimport React, { useState, useCallback } from 'react';\n\n// =============================================================================\n// TYPES\n// =============================================================================\n\n/**\n * Base form data interface\n */\nexport interface FormData {\n  [key: string]: any;\n}\n\n/**\n * Validation error map\n */\nexport interface ValidationErrors {\n  [fieldName: string]: string;\n}\n\n/**\n * Validation function type\n */\nexport type ValidationFunction<T extends FormData> = (value: T) => ValidationErrors;\n\n/**\n * Interactive story props\n */\nexport interface InteractiveStoryProps<T extends FormData> {\n  initialValue: T;\n  sampleData?: T;\n  validationRules?: ValidationFunction<T>;\n  className?: string;\n  children: (props: InteractiveStoryState<T>) => React.ReactNode;\n}\n\n/**\n * Interactive story state\n */\nexport interface InteractiveStoryState<T extends FormData> {\n  value: T;\n  errors: ValidationErrors;\n  onChange: (newValue: T) => void;\n  validate: () => boolean;\n  reset: () => void;\n  fillSample: () => void;\n  hasErrors: boolean;\n  isValid: boolean;\n}\n\n/**\n * Progressive step configuration\n */\nexport interface ProgressiveStep<T extends FormData> {\n  label: string;\n  data: T;\n  description?: string;\n}\n\n/**\n * Validation pattern example\n */\nexport interface ValidationExample<T extends FormData> {\n  label: string;\n  data: T;\n  errors: ValidationErrors;\n  description?: string;\n}\n\n/**\n * Story control configuration\n */\nexport interface StoryControls {\n  showValidationButton?: boolean;\n  showResetButton?: boolean;\n  showSampleButton?: boolean;\n  showCurrentValues?: boolean;\n  showErrorState?: boolean;\n  customButtons?: Array<{\n    label: string;\n    onClick: () => void;\n    className?: string;\n  }>;\n}\n\n// =============================================================================\n// VALIDATION UTILITIES\n// =============================================================================\n\n/**\n * Creates a standardized validation function for email fields\n */\nexport function createEmailValidator(fieldName: string = 'email'): ValidationFunction<any> {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  \n  return (value: any) => {\n    const errors: ValidationErrors = {};\n    const email = value[fieldName];\n    \n    if (email && !emailRegex.test(email)) {\n      errors[fieldName] = 'Please enter a valid email address';\n    }\n    \n    return errors;\n  };\n}\n\n/**\n * Creates a standardized validation function for phone fields\n */\nexport function createPhoneValidator(fieldName: string = 'phoneNumber'): ValidationFunction<any> {\n  const phoneRegex = /^[\\+]?[\\d\\s\\(\\)\\-]{7,}$/;\n  \n  return (value: any) => {\n    const errors: ValidationErrors = {};\n    const phone = value[fieldName];\n    \n    if (phone && !phoneRegex.test(phone)) {\n      errors[fieldName] = 'Please enter a valid phone number';\n    }\n    \n    return errors;\n  };\n}\n\n/**\n * Creates a standardized validation function for required fields\n */\nexport function createRequiredValidator(fieldNames: string[]): ValidationFunction<any> {\n  return (value: any) => {\n    const errors: ValidationErrors = {};\n    \n    fieldNames.forEach(fieldName => {\n      if (!value[fieldName] || (typeof value[fieldName] === 'string' && !value[fieldName].trim())) {\n        errors[fieldName] = `${fieldName} is required`;\n      }\n    });\n    \n    return errors;\n  };\n}\n\n/**\n * Combines multiple validation functions into one\n */\nexport function combineValidators<T extends FormData>(\n  ...validators: ValidationFunction<T>[]\n): ValidationFunction<T> {\n  return (value: T) => {\n    const combinedErrors: ValidationErrors = {};\n    \n    validators.forEach(validator => {\n      const errors = validator(value);\n      Object.assign(combinedErrors, errors);\n    });\n    \n    return combinedErrors;\n  };\n}\n\n// =============================================================================\n// INTERACTIVE STORY COMPONENT\n// =============================================================================\n\n/**\n * Consolidated interactive story component with standardized reset/validate patterns\n */\nexport function InteractiveStory<T extends FormData>({\n  initialValue,\n  sampleData,\n  validationRules,\n  className = '',\n  children\n}: InteractiveStoryProps<T>) {\n  const [value, setValue] = useState<T>(initialValue);\n  const [errors, setErrors] = useState<ValidationErrors>({});\n\n  const onChange = useCallback((newValue: T) => {\n    setValue(newValue);\n    \n    // Clear errors for fields that now have values\n    const newErrors = { ...errors };\n    Object.keys(newValue).forEach(key => {\n      if (newValue[key] && errors[key]) {\n        delete newErrors[key];\n      }\n    });\n    setErrors(newErrors);\n  }, [errors]);\n\n  const validate = useCallback(() => {\n    if (!validationRules) return true;\n    \n    const validationErrors = validationRules(value);\n    setErrors(validationErrors);\n    return Object.keys(validationErrors).length === 0;\n  }, [value, validationRules]);\n\n  const reset = useCallback(() => {\n    setValue(initialValue);\n    setErrors({});\n  }, [initialValue]);\n\n  const fillSample = useCallback(() => {\n    if (sampleData) {\n      setValue(sampleData);\n      setErrors({});\n    }\n  }, [sampleData]);\n\n  const storyState: InteractiveStoryState<T> = {\n    value,\n    errors,\n    onChange,\n    validate,\n    reset,\n    fillSample,\n    hasErrors: Object.keys(errors).length > 0,\n    isValid: Object.keys(errors).length === 0\n  };\n\n  return (\n    <div className={`interactive-story ${className}`}>\n      {children(storyState)}\n    </div>\n  );\n}\n\n// =============================================================================\n// STORY CONTROL COMPONENTS\n// =============================================================================\n\n/**\n * Standard story control buttons\n */\nexport function StoryControlButtons<T extends FormData>({\n  storyState,\n  controls = {},\n  sampleData\n}: {\n  storyState: InteractiveStoryState<T>;\n  controls?: StoryControls;\n  sampleData?: T;\n}) {\n  const {\n    showValidationButton = true,\n    showResetButton = true,\n    showSampleButton = !!sampleData,\n    customButtons = []\n  } = controls;\n\n  if (!showValidationButton && !showResetButton && !showSampleButton && customButtons.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex space-x-4\">\n      {showValidationButton && (\n        <button\n          onClick={storyState.validate}\n          className=\"rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700\"\n        >\n          Validate\n        </button>\n      )}\n      \n      {showSampleButton && (\n        <button\n          onClick={storyState.fillSample}\n          className=\"rounded-md bg-green-600 px-4 py-2 text-white hover:bg-green-700\"\n        >\n          Fill Sample\n        </button>\n      )}\n      \n      {showResetButton && (\n        <button\n          onClick={storyState.reset}\n          className=\"rounded-md bg-gray-600 px-4 py-2 text-white hover:bg-gray-700\"\n        >\n          Reset\n        </button>\n      )}\n\n      {customButtons.map((button, index) => (\n        <button\n          key={index}\n          onClick={button.onClick}\n          className={button.className || \"rounded-md bg-purple-600 px-4 py-2 text-white hover:bg-purple-700\"}\n        >\n          {button.label}\n        </button>\n      ))}\n    </div>\n  );\n}\n\n/**\n * Value display component for debugging\n */\nexport function StoryValueDisplay<T extends FormData>({\n  value,\n  errors,\n  title = \"Current Values\"\n}: {\n  value: T;\n  errors: ValidationErrors;\n  title?: string;\n}) {\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"rounded bg-gray-100 p-4\">\n        <h4 className=\"font-medium\">{title}:</h4>\n        <pre className=\"mt-2 text-sm\">{JSON.stringify(value, null, 2)}</pre>\n      </div>\n\n      {Object.keys(errors).length > 0 && (\n        <div className=\"rounded bg-red-100 p-4\">\n          <h4 className=\"font-medium text-red-800\">Validation Errors:</h4>\n          <pre className=\"mt-2 text-sm text-red-700\">{JSON.stringify(errors, null, 2)}</pre>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// =============================================================================\n// PROGRESSIVE STORY COMPONENT\n// =============================================================================\n\n/**\n * Progressive data filling story component\n */\nexport function ProgressiveStory<T extends FormData>({\n  steps,\n  className = '',\n  children\n}: {\n  steps: ProgressiveStep<T>[];\n  className?: string;\n  children: (props: {\n    currentStep: number;\n    currentData: T;\n    stepLabel: string;\n    nextStep: () => void;\n    prevStep: () => void;\n    goToStep: (index: number) => void;\n    isFirstStep: boolean;\n    isLastStep: boolean;\n  }) => React.ReactNode;\n}) {\n  const [currentStep, setCurrentStep] = useState(0);\n\n  const nextStep = useCallback(() => {\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    }\n  }, [currentStep, steps.length]);\n\n  const prevStep = useCallback(() => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  }, [currentStep]);\n\n  const goToStep = useCallback((index: number) => {\n    if (index >= 0 && index < steps.length) {\n      setCurrentStep(index);\n    }\n  }, [steps.length]);\n\n  const currentStepData = steps[currentStep];\n\n  return (\n    <div className={`progressive-story ${className}`}>\n      {children({\n        currentStep,\n        currentData: currentStepData?.data,\n        stepLabel: currentStepData?.label || '',\n        nextStep,\n        prevStep,\n        goToStep,\n        isFirstStep: currentStep === 0,\n        isLastStep: currentStep === steps.length - 1\n      })}\n    </div>\n  );\n}\n\n/**\n * Progressive story navigation controls\n */\nexport function ProgressiveStoryControls({\n  steps,\n  currentStep,\n  onStepChange\n}: {\n  steps: ProgressiveStep<any>[];\n  currentStep: number;\n  onStepChange: (index: number) => void;\n}) {\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex flex-wrap gap-2\">\n        {steps.map((step, index) => (\n          <button\n            key={index}\n            onClick={() => onStepChange(index)}\n            className={`rounded px-3 py-1 text-sm ${\n              currentStep === index\n                ? 'bg-blue-600 text-white'\n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n            }`}\n          >\n            {index}: {step.label}\n          </button>\n        ))}\n      </div>\n\n      <div className=\"text-sm text-gray-600\">\n        Step {currentStep + 1} of {steps.length}: {steps[currentStep]?.label}\n        {steps[currentStep]?.description && (\n          <div className=\"mt-1 text-xs text-gray-500\">\n            {steps[currentStep].description}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// =============================================================================\n// VALIDATION PATTERN STORY COMPONENT\n// =============================================================================\n\n/**\n * Validation pattern demonstration story\n */\nexport function ValidationPatternStory<T extends FormData>({\n  examples,\n  className = '',\n  children\n}: {\n  examples: ValidationExample<T>[];\n  className?: string;\n  children: (props: {\n    currentExample: ValidationExample<T>;\n    exampleIndex: number;\n    nextExample: () => void;\n    prevExample: () => void;\n    goToExample: (index: number) => void;\n  }) => React.ReactNode;\n}) {\n  const [currentExample, setCurrentExample] = useState(0);\n\n  const nextExample = useCallback(() => {\n    if (currentExample < examples.length - 1) {\n      setCurrentExample(currentExample + 1);\n    }\n  }, [currentExample, examples.length]);\n\n  const prevExample = useCallback(() => {\n    if (currentExample > 0) {\n      setCurrentExample(currentExample - 1);\n    }\n  }, [currentExample]);\n\n  const goToExample = useCallback((index: number) => {\n    if (index >= 0 && index < examples.length) {\n      setCurrentExample(index);\n    }\n  }, [examples.length]);\n\n  return (\n    <div className={`validation-pattern-story ${className}`}>\n      {children({\n        currentExample: examples[currentExample],\n        exampleIndex: currentExample,\n        nextExample,\n        prevExample,\n        goToExample\n      })}\n    </div>\n  );\n}\n\n/**\n * Validation pattern navigation controls\n */\nexport function ValidationPatternControls({\n  examples,\n  currentExample,\n  onExampleChange\n}: {\n  examples: ValidationExample<any>[];\n  currentExample: number;\n  onExampleChange: (index: number) => void;\n}) {\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex flex-wrap gap-2\">\n        {examples.map((example, index) => (\n          <button\n            key={index}\n            onClick={() => onExampleChange(index)}\n            className={`rounded px-3 py-1 text-sm ${\n              currentExample === index\n                ? 'bg-blue-600 text-white'\n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n            }`}\n          >\n            {example.label}\n          </button>\n        ))}\n      </div>\n\n      <div className=\"text-sm text-gray-600\">\n        Current: {examples[currentExample]?.label}\n        {examples[currentExample]?.description && (\n          <div className=\"mt-1 text-xs text-gray-500\">\n            {examples[currentExample].description}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// =============================================================================\n// UTILITY FUNCTIONS\n// =============================================================================\n\n/**\n * Creates standardized story parameters for consistent documentation\n */\nexport function createStoryParameters(\n  title: string,\n  description: string,\n  additionalParams?: any\n) {\n  return {\n    docs: {\n      description: {\n        story: description\n      }\n    },\n    ...additionalParams\n  };\n}\n\n/**\n * Creates standardized empty data template\n */\nexport function createEmptyFormData<T extends FormData>(fields: (keyof T)[]): T {\n  const emptyData = {} as T;\n  fields.forEach(field => {\n    emptyData[field] = '' as any;\n  });\n  return emptyData;\n}\n\n/**\n * Creates standardized sample data with realistic values\n */\nexport function createSampleFormData<T extends FormData>(sampleValues: Partial<T>): T {\n  return sampleValues as T;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/supabase/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/supabase/supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/tests/api-responses.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/tests/business-rules.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":162,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6094,6097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6094,6097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":182,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6835,6838],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6835,6838],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":206,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7827,7830],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7827,7830],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @jest-environment node\n */\n\nimport { calculateAge } from '@/utils/dateUtils';\n\nimport {\n  isOutOfSchoolChildren,\n  isOutOfSchoolYouth,\n  isSeniorCitizen,\n  isEmployed,\n  isUnemployed,\n  isIndigenousPeople,\n  EMPLOYED_STATUSES,\n  UNEMPLOYED_STATUSES,\n  INDIGENOUS_ETHNICITIES,\n} from '../business-rules/sectoral-classification';\n\ndescribe('Business Rules - Sectoral Classification', () => {\n  describe('calculateAge', () => {\n    it('should calculate age correctly for adults', () => {\n      const birthdate = '1990-01-01';\n      const today = new Date();\n      const expectedAge = today.getFullYear() - 1990;\n\n      const age = calculateAge(birthdate);\n\n      // Account for whether birthday has passed this year\n      expect(age).toBeGreaterThanOrEqual(expectedAge - 1);\n      expect(age).toBeLessThanOrEqual(expectedAge);\n    });\n\n    it('should calculate age correctly when birthday has not passed this year', () => {\n      const today = new Date();\n      const futureMonth = today.getMonth() + 1;\n      const futureDay = today.getDate() + 1;\n\n      // Create a birthdate in the future this year (next month/day)\n      const birthYear = today.getFullYear() - 25;\n      const birthdate = `${birthYear}-${String(futureMonth).padStart(2, '0')}-${String(futureDay).padStart(2, '0')}`;\n\n      const age = calculateAge(birthdate);\n      expect(age).toBe(24); // Should be 24, not 25, if birthday hasn't passed\n    });\n\n    it('should calculate age correctly when birthday has passed this year', () => {\n      const today = new Date();\n      const pastMonth = today.getMonth() - 1 || 12;\n      const pastDay = today.getDate();\n\n      const birthYear = today.getFullYear() - 25;\n      const birthdate = `${birthYear}-${String(pastMonth).padStart(2, '0')}-${String(pastDay).padStart(2, '0')}`;\n\n      const age = calculateAge(birthdate);\n      expect(age).toBe(25); // Should be 25 if birthday has passed\n    });\n\n    it('should handle edge case of birthday today', () => {\n      const today = new Date();\n      const birthYear = today.getFullYear() - 25;\n      const birthdate = `${birthYear}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;\n\n      const age = calculateAge(birthdate);\n      expect(age).toBe(25);\n    });\n\n    it('should return 0 for empty birthdate', () => {\n      expect(calculateAge('')).toBe(0);\n    });\n\n    it('should handle newborns correctly', () => {\n      const today = new Date();\n      const birthdate = today.toISOString().split('T')[0]; // Today's date\n\n      const age = calculateAge(birthdate);\n      expect(age).toBe(0);\n    });\n  });\n\n  describe('isOutOfSchoolChildren', () => {\n    it('should identify out-of-school children correctly', () => {\n      expect(isOutOfSchoolChildren(8, 'no_formal_education')).toBe(true);\n      expect(isOutOfSchoolChildren(12, undefined)).toBe(true);\n      expect(isOutOfSchoolChildren(16, 'no_formal_education')).toBe(true);\n    });\n\n    it('should not classify children currently in school', () => {\n      expect(isOutOfSchoolChildren(8, 'elementary')).toBe(false);\n      expect(isOutOfSchoolChildren(12, 'high_school')).toBe(false);\n      expect(isOutOfSchoolChildren(16, 'college')).toBe(false);\n    });\n\n    it('should not classify children outside age range', () => {\n      expect(isOutOfSchoolChildren(4, 'no_formal_education')).toBe(false); // Too young\n      expect(isOutOfSchoolChildren(18, 'no_formal_education')).toBe(false); // Too old\n    });\n\n    it('should handle edge cases', () => {\n      expect(isOutOfSchoolChildren(5, 'no_formal_education')).toBe(true); // Minimum age\n      expect(isOutOfSchoolChildren(17, 'no_formal_education')).toBe(true); // Maximum age\n    });\n  });\n\n  describe('isOutOfSchoolYouth', () => {\n    it('should identify out-of-school youth correctly', () => {\n      expect(isOutOfSchoolYouth(19, 'high_school', 'unemployed')).toBe(true);\n      expect(isOutOfSchoolYouth(24, undefined, 'unemployed')).toBe(true);\n      expect(isOutOfSchoolYouth(22, 'no_formal_education', undefined)).toBe(true);\n    });\n\n    it('should not classify youth currently in school', () => {\n      expect(isOutOfSchoolYouth(19, 'college', 'unemployed')).toBe(false);\n      expect(isOutOfSchoolYouth(22, 'post_graduate', 'unemployed')).toBe(false);\n    });\n\n    it('should not classify employed youth in school', () => {\n      expect(isOutOfSchoolYouth(19, 'college', 'employed')).toBe(false);\n    });\n\n    it('should not classify youth outside age range', () => {\n      expect(isOutOfSchoolYouth(17, 'high_school', 'unemployed')).toBe(false); // Too young\n      expect(isOutOfSchoolYouth(31, 'high_school', 'unemployed')).toBe(false); // Too old\n    });\n\n    it('should handle edge cases', () => {\n      expect(isOutOfSchoolYouth(18, 'high_school', 'unemployed')).toBe(true); // Minimum age\n      expect(isOutOfSchoolYouth(30, 'high_school', 'unemployed')).toBe(true); // Maximum age\n    });\n  });\n\n  describe('isSeniorCitizen', () => {\n    it('should identify senior citizens correctly', () => {\n      expect(isSeniorCitizen(60)).toBe(true);\n      expect(isSeniorCitizen(65)).toBe(true);\n      expect(isSeniorCitizen(80)).toBe(true);\n      expect(isSeniorCitizen(100)).toBe(true);\n    });\n\n    it('should not classify non-seniors', () => {\n      expect(isSeniorCitizen(59)).toBe(false);\n      expect(isSeniorCitizen(45)).toBe(false);\n      expect(isSeniorCitizen(30)).toBe(false);\n      expect(isSeniorCitizen(0)).toBe(false);\n    });\n  });\n\n  describe('isEmployed', () => {\n    it('should identify employed persons correctly', () => {\n      expect(isEmployed('employed')).toBe(true);\n      expect(isEmployed('self_employed')).toBe(true);\n    });\n\n    it('should not classify unemployed persons as employed', () => {\n      expect(isEmployed('unemployed')).toBe(false);\n      expect(isEmployed('underemployed')).toBe(false);\n      expect(isEmployed('looking_for_work')).toBe(false);\n      expect(isEmployed('student')).toBe(false);\n      expect(isEmployed('')).toBe(false);\n    });\n\n    it('should handle edge cases', () => {\n      expect(isEmployed(undefined as any)).toBe(false);\n      expect(isEmployed('EMPLOYED')).toBe(false); // Case sensitive\n    });\n  });\n\n  describe('isUnemployed', () => {\n    it('should identify unemployed persons correctly', () => {\n      expect(isUnemployed('unemployed')).toBe(true);\n      expect(isUnemployed('underemployed')).toBe(true);\n      expect(isUnemployed('looking_for_work')).toBe(true);\n    });\n\n    it('should not classify employed persons as unemployed', () => {\n      expect(isUnemployed('employed')).toBe(false);\n      expect(isUnemployed('self_employed')).toBe(false);\n      expect(isUnemployed('student')).toBe(false);\n    });\n\n    it('should handle edge cases', () => {\n      expect(isUnemployed('')).toBe(false);\n      expect(isUnemployed(undefined as any)).toBe(false);\n    });\n  });\n\n  describe('isIndigenousPeople', () => {\n    it('should identify indigenous ethnicities correctly', () => {\n      expect(isIndigenousPeople('indigenous_group')).toBe(true);\n      expect(isIndigenousPeople('maranao')).toBe(true);\n      expect(isIndigenousPeople('maguindanao')).toBe(true);\n      expect(isIndigenousPeople('tausug')).toBe(true);\n      expect(isIndigenousPeople('aeta')).toBe(true);\n      expect(isIndigenousPeople('igorot')).toBe(true);\n      expect(isIndigenousPeople('ifugao')).toBe(true);\n    });\n\n    it('should not classify non-indigenous ethnicities', () => {\n      expect(isIndigenousPeople('filipino')).toBe(false);\n      expect(isIndigenousPeople('chinese')).toBe(false);\n      expect(isIndigenousPeople('spanish')).toBe(false);\n      expect(isIndigenousPeople('american')).toBe(false);\n      expect(isIndigenousPeople('')).toBe(false);\n    });\n\n    it('should handle edge cases', () => {\n      expect(isIndigenousPeople(undefined as any)).toBe(false);\n      expect(isIndigenousPeople('MARANAO')).toBe(false); // Case sensitive\n    });\n  });\n\n  describe('Constants validation', () => {\n    it('should have valid EMPLOYED_STATUSES', () => {\n      expect(EMPLOYED_STATUSES).toContain('employed');\n      expect(EMPLOYED_STATUSES).toContain('self_employed');\n      expect(EMPLOYED_STATUSES).toHaveLength(2);\n    });\n\n    it('should have valid UNEMPLOYED_STATUSES', () => {\n      expect(UNEMPLOYED_STATUSES).toContain('unemployed');\n      expect(UNEMPLOYED_STATUSES).toContain('underemployed');\n      expect(UNEMPLOYED_STATUSES).toContain('looking_for_work');\n      expect(UNEMPLOYED_STATUSES).toHaveLength(3);\n    });\n\n    it('should have no overlap between employed and unemployed statuses', () => {\n      const employedSet = new Set(EMPLOYED_STATUSES);\n      const unemployedSet = new Set(UNEMPLOYED_STATUSES);\n\n      const intersection = new Set(Array.from(employedSet).filter(x => unemployedSet.has(x)));\n      expect(intersection.size).toBe(0);\n    });\n\n    it('should have valid INDIGENOUS_ETHNICITIES', () => {\n      expect(INDIGENOUS_ETHNICITIES).toContain('indigenous_group');\n      expect(INDIGENOUS_ETHNICITIES).toContain('maranao');\n      expect(INDIGENOUS_ETHNICITIES).toContain('maguindanao');\n      expect(INDIGENOUS_ETHNICITIES).toContain('tausug');\n      expect(INDIGENOUS_ETHNICITIES.length).toBeGreaterThan(10);\n\n      // Should contain various indigenous groups\n      expect(INDIGENOUS_ETHNICITIES).toContain('aeta');\n      expect(INDIGENOUS_ETHNICITIES).toContain('igorot');\n      expect(INDIGENOUS_ETHNICITIES).toContain('ifugao');\n    });\n  });\n\n  describe('Integration tests', () => {\n    it('should correctly classify a typical resident profile', () => {\n      const birthdate = '1995-06-15'; // ~28 years old\n      const age = calculateAge(birthdate);\n\n      expect(isOutOfSchoolChildren(age)).toBe(false); // Too old\n      expect(isOutOfSchoolYouth(age, 'college', 'employed')).toBe(false); // In school and employed\n      expect(isSeniorCitizen(age)).toBe(false); // Too young\n      expect(isEmployed('employed')).toBe(true);\n      expect(isUnemployed('employed')).toBe(false);\n    });\n\n    it('should correctly classify a senior citizen profile', () => {\n      const birthdate = '1950-01-01'; // ~73 years old\n      const age = calculateAge(birthdate);\n\n      expect(isSeniorCitizen(age)).toBe(true);\n      expect(isOutOfSchoolChildren(age)).toBe(false);\n      expect(isOutOfSchoolYouth(age)).toBe(false);\n    });\n\n    it('should correctly classify an indigenous youth profile', () => {\n      const birthdate = '2005-03-15'; // ~18 years old\n      const age = calculateAge(birthdate);\n\n      expect(isOutOfSchoolChildren(age)).toBe(false); // Too old\n      expect(isOutOfSchoolYouth(age, 'high_school', 'unemployed')).toBe(true);\n      expect(isIndigenousPeople('maranao')).toBe(true);\n      expect(isSeniorCitizen(age)).toBe(false);\n    });\n\n    it('should handle complex employment status scenarios', () => {\n      // Underemployed person should be classified as unemployed but not employed\n      expect(isEmployed('underemployed')).toBe(false);\n      expect(isUnemployed('underemployed')).toBe(true);\n\n      // Self-employed person should be classified as employed but not unemployed\n      expect(isEmployed('self_employed')).toBe(true);\n      expect(isUnemployed('self_employed')).toBe(false);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/tests/crypto.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'testPassword' is assigned a value but never used.","line":26,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @jest-environment node\n */\n\nimport {\n  encryptPII,\n  decryptPII,\n  hashData,\n  generateSecureToken,\n  validateHash,\n  secureCompare,\n} from '../security/crypto';\n\n// Mock the secure logger\njest.mock('../logging/secure-logger', () => ({\n  logger: {\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n    debug: jest.fn(),\n  },\n}));\n\ndescribe('Crypto Utilities', () => {\n  const testData = 'sensitive personal information';\n  const testPassword = 'secure-password-123';\n\n  describe('encryptPII and decryptPII', () => {\n    it('should encrypt and decrypt data successfully', async () => {\n      const encrypted = await encryptPII(testData);\n\n      expect(encrypted).toBeDefined();\n      expect(encrypted).not.toBe(testData);\n      expect(encrypted.length).toBeGreaterThan(testData.length);\n\n      const decrypted = await decryptPII(encrypted);\n      expect(decrypted).toBe(testData);\n    });\n\n    it('should produce different encrypted values for same input', async () => {\n      const encrypted1 = await encryptPII(testData);\n      const encrypted2 = await encryptPII(testData);\n\n      expect(encrypted1).not.toBe(encrypted2);\n\n      // Both should decrypt to the same value\n      const decrypted1 = await decryptPII(encrypted1);\n      const decrypted2 = await decryptPII(encrypted2);\n\n      expect(decrypted1).toBe(testData);\n      expect(decrypted2).toBe(testData);\n    });\n\n    it('should handle empty strings', async () => {\n      const encrypted = await encryptPII('');\n      const decrypted = await decryptPII(encrypted);\n\n      expect(decrypted).toBe('');\n    });\n\n    it('should handle unicode characters', async () => {\n      const unicodeData = 'José María Ñoño 🇵🇭';\n      const encrypted = await encryptPII(unicodeData);\n      const decrypted = await decryptPII(encrypted);\n\n      expect(decrypted).toBe(unicodeData);\n    });\n\n    it('should throw error for invalid encrypted data', async () => {\n      await expect(decryptPII('invalid-encrypted-data')).rejects.toThrow();\n    });\n\n    it('should throw error for corrupted encrypted data', async () => {\n      const encrypted = await encryptPII(testData);\n      const corrupted = encrypted.slice(0, -5) + 'xxxxx';\n\n      await expect(decryptPII(corrupted)).rejects.toThrow();\n    });\n  });\n\n  describe('hashData', () => {\n    it('should create consistent hashes', async () => {\n      const hash1 = await hashData(testData);\n      const hash2 = await hashData(testData);\n\n      expect(hash1).toBe(hash2);\n      expect(hash1).toHaveLength(64); // SHA-256 hex length\n      expect(hash1).toMatch(/^[a-f0-9]{64}$/);\n    });\n\n    it('should create different hashes for different inputs', async () => {\n      const hash1 = await hashData('input1');\n      const hash2 = await hashData('input2');\n\n      expect(hash1).not.toBe(hash2);\n    });\n\n    it('should handle empty strings', async () => {\n      const hash = await hashData('');\n      expect(hash).toBeDefined();\n      expect(hash).toHaveLength(64);\n    });\n\n    it('should be deterministic across multiple calls', async () => {\n      const input = 'test-consistency';\n      const hashes = await Promise.all([\n        hashData(input),\n        hashData(input),\n        hashData(input),\n        hashData(input),\n        hashData(input),\n      ]);\n\n      // All hashes should be identical\n      expect(new Set(hashes).size).toBe(1);\n    });\n  });\n\n  describe('generateSecureToken', () => {\n    it('should generate tokens of correct length', () => {\n      const token1 = generateSecureToken();\n      const token2 = generateSecureToken();\n      const token3 = generateSecureToken();\n\n      expect(token1).toHaveLength(64); // 32 bytes = 64 hex chars\n      expect(token2).toHaveLength(64); // 32 bytes = 64 hex chars\n      expect(token3).toHaveLength(64); // 32 bytes = 64 hex chars\n    });\n\n    it('should generate unique tokens', () => {\n      const tokens = Array.from({ length: 100 }, () => generateSecureToken());\n      const uniqueTokens = new Set(tokens);\n\n      expect(uniqueTokens.size).toBe(100); // All should be unique\n    });\n\n    it('should use default length when not specified', () => {\n      const token = generateSecureToken();\n      expect(token).toHaveLength(64); // 32 bytes = 64 hex chars (default)\n    });\n\n    it('should only contain hex characters', () => {\n      const token = generateSecureToken();\n      expect(token).toMatch(/^[a-f0-9]+$/);\n    });\n  });\n\n  describe('validateHash', () => {\n    it('should validate correct data against hash', async () => {\n      const hash = await hashData(testData);\n      const isValid = await validateHash(testData, hash);\n\n      expect(isValid).toBe(true);\n    });\n\n    it('should reject incorrect data against hash', async () => {\n      const hash = await hashData(testData);\n      const isValid = await validateHash('wrong data', hash);\n\n      expect(isValid).toBe(false);\n    });\n\n    it('should reject invalid hash format', async () => {\n      const isValid = await validateHash(testData, 'invalid-hash');\n\n      expect(isValid).toBe(false);\n    });\n\n    it('should handle empty data validation', async () => {\n      const hash = await hashData('');\n      const isValid = await validateHash('', hash);\n\n      expect(isValid).toBe(true);\n    });\n  });\n\n  describe('secureCompare', () => {\n    it('should return true for identical strings', () => {\n      const result = secureCompare('identical', 'identical');\n      expect(result).toBe(true);\n    });\n\n    it('should return false for different strings', () => {\n      const result = secureCompare('string1', 'string2');\n      expect(result).toBe(false);\n    });\n\n    it('should return false for strings of different lengths', () => {\n      const result = secureCompare('short', 'much longer string');\n      expect(result).toBe(false);\n    });\n\n    it('should handle empty strings', () => {\n      expect(secureCompare('', '')).toBe(true);\n      expect(secureCompare('', 'non-empty')).toBe(false);\n      expect(secureCompare('non-empty', '')).toBe(false);\n    });\n\n    it('should be timing-safe (basic test)', () => {\n      // This is a basic test - in practice, timing attacks are hard to test reliably\n      const string1 = 'a'.repeat(1000);\n      const string2 = 'b'.repeat(1000);\n      const string3 = 'b' + 'a'.repeat(999); // Different at start\n      const string4 = 'a'.repeat(999) + 'b'; // Different at end\n\n      expect(secureCompare(string1, string2)).toBe(false);\n      expect(secureCompare(string1, string3)).toBe(false);\n      expect(secureCompare(string1, string4)).toBe(false);\n    });\n\n    it('should handle unicode characters', () => {\n      const unicode1 = 'José María Ñoño 🇵🇭';\n      const unicode2 = 'José María Ñoño 🇵🇭';\n      const unicode3 = 'José María Niño 🇵🇭';\n\n      expect(secureCompare(unicode1, unicode2)).toBe(true);\n      expect(secureCompare(unicode1, unicode3)).toBe(false);\n    });\n  });\n\n  describe('Integration tests', () => {\n    it('should work with realistic PII data', async () => {\n      const philsysNumber = '1234-5678-9012-3456';\n      const socialSecurityNumber = '123-45-6789';\n      const creditCardNumber = '4532-1234-5678-9012';\n\n      // Encrypt all sensitive data\n      const encryptedPhilsys = await encryptPII(philsysNumber);\n      const encryptedSSN = await encryptPII(socialSecurityNumber);\n      const encryptedCC = await encryptPII(creditCardNumber);\n\n      // Verify all encrypted values are different\n      expect(encryptedPhilsys).not.toBe(encryptedSSN);\n      expect(encryptedSSN).not.toBe(encryptedCC);\n      expect(encryptedPhilsys).not.toBe(encryptedCC);\n\n      // Decrypt and verify\n      expect(await decryptPII(encryptedPhilsys)).toBe(philsysNumber);\n      expect(await decryptPII(encryptedSSN)).toBe(socialSecurityNumber);\n      expect(await decryptPII(encryptedCC)).toBe(creditCardNumber);\n    });\n\n    it('should handle concurrent encryption operations', async () => {\n      const data = Array.from({ length: 10 }, (_, i) => `sensitive-data-${i}`);\n\n      // Encrypt all data concurrently\n      const encryptedData = await Promise.all(data.map(item => encryptPII(item)));\n\n      // Decrypt all data concurrently\n      const decryptedData = await Promise.all(encryptedData.map(item => decryptPII(item)));\n\n      // Verify all data matches original\n      expect(decryptedData).toEqual(data);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/tests/file-security.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/tests/rate-limit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/tests/utilities.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'generateFieldId' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'buildAriaLabelledBy' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @jest-environment node\n */\n\nimport {\n  // String utilities\n  capitalize,\n  toTitleCase,\n  truncateText,\n  sanitizeString,\n  isValidEmail,\n  isValidPhilippineMobile,\n  formatPhoneNumber,\n  // Data transformation utilities\n  isEmpty,\n  deepClone,\n  groupBy,\n  removeDuplicates,\n  sortBy,\n  formatCurrency,\n  formatDate,\n  parseQueryString,\n  buildQueryString,\n  // ID generation utilities\n  generateId,\n  generateFieldId,\n  getFieldId,\n  getFieldIds,\n  buildAriaDescribedBy,\n  buildAriaLabelledBy,\n  // Async utilities\n  debounce,\n  throttle,\n  sleep,\n  retry,\n  // CSS utilities\n  cn,\n  // mergeClassNames - REMOVED: Use `cn` instead\n} from '@/utils';\n\ndescribe('Utilities - String Utils', () => {\n  describe('capitalize', () => {\n    it('should capitalize first letter', () => {\n      expect(capitalize('hello')).toBe('Hello');\n      expect(capitalize('HELLO')).toBe('Hello');\n      expect(capitalize('hELLO')).toBe('Hello');\n    });\n\n    it('should handle empty strings', () => {\n      expect(capitalize('')).toBe('');\n    });\n\n    it('should handle single characters', () => {\n      expect(capitalize('a')).toBe('A');\n      expect(capitalize('A')).toBe('A');\n    });\n  });\n\n  describe('toTitleCase', () => {\n    it('should convert to title case', () => {\n      expect(toTitleCase('hello world')).toBe('Hello World');\n      expect(toTitleCase('HELLO WORLD')).toBe('Hello World');\n      expect(toTitleCase('hello WORLD')).toBe('Hello World');\n    });\n\n    it('should handle single words', () => {\n      expect(toTitleCase('hello')).toBe('Hello');\n    });\n\n    it('should handle empty strings', () => {\n      expect(toTitleCase('')).toBe('');\n    });\n  });\n\n  describe('truncateText', () => {\n    it('should truncate long text', () => {\n      const text = 'This is a very long text that should be truncated';\n      expect(truncateText(text, 20)).toBe('This is a very lo...');\n    });\n\n    it('should not truncate short text', () => {\n      const text = 'Short text';\n      expect(truncateText(text, 20)).toBe('Short text');\n    });\n\n    it('should use custom suffix', () => {\n      const text = 'This is a long text';\n      expect(truncateText(text, 10, '---')).toBe('This is---');\n    });\n  });\n\n  describe('sanitizeString', () => {\n    it('should sanitize special characters', () => {\n      expect(sanitizeString('Hello@World#123')).toBe('hello_world_123');\n    });\n\n    it('should handle multiple underscores', () => {\n      expect(sanitizeString('Hello___World')).toBe('hello_world');\n    });\n\n    it('should preserve allowed characters', () => {\n      expect(sanitizeString('hello-world_123.txt')).toBe('hello-world_123.txt');\n    });\n  });\n\n  describe('isValidEmail', () => {\n    it('should validate correct emails', () => {\n      expect(isValidEmail('test@example.com')).toBe(true);\n      expect(isValidEmail('user.name@domain.co.uk')).toBe(true);\n      expect(isValidEmail('test+tag@example.org')).toBe(true);\n    });\n\n    it('should reject invalid emails', () => {\n      expect(isValidEmail('invalid')).toBe(false);\n      expect(isValidEmail('test@')).toBe(false);\n      expect(isValidEmail('@example.com')).toBe(false);\n      expect(isValidEmail('test.example.com')).toBe(false);\n    });\n  });\n\n  describe('isValidPhilippineMobile', () => {\n    it('should validate Philippine mobile numbers', () => {\n      expect(isValidPhilippineMobile('09171234567')).toBe(true);\n      expect(isValidPhilippineMobile('639171234567')).toBe(true);\n      expect(isValidPhilippineMobile('09-17-123-4567')).toBe(true);\n    });\n\n    it('should reject invalid mobile numbers', () => {\n      expect(isValidPhilippineMobile('081712345678')).toBe(false); // Wrong prefix\n      expect(isValidPhilippineMobile('0917123456')).toBe(false); // Too short\n      expect(isValidPhilippineMobile('09171234567890')).toBe(false); // Too long\n    });\n  });\n\n  describe('formatPhoneNumber', () => {\n    it('should format Philippine mobile numbers', () => {\n      expect(formatPhoneNumber('09171234567')).toBe('0917 123 4567');\n      expect(formatPhoneNumber('639171234567')).toBe('+63 917 123 4567');\n    });\n\n    it('should handle no phone', () => {\n      expect(formatPhoneNumber()).toBe('No phone');\n      expect(formatPhoneNumber('')).toBe('No phone');\n    });\n\n    it('should return original for unrecognized formats', () => {\n      expect(formatPhoneNumber('123-456-7890')).toBe('123-456-7890');\n    });\n  });\n});\n\ndescribe('Utilities - Data Transformers', () => {\n  describe('isEmpty', () => {\n    it('should detect empty values', () => {\n      expect(isEmpty(null)).toBe(true);\n      expect(isEmpty(undefined)).toBe(true);\n      expect(isEmpty('')).toBe(true);\n      expect(isEmpty('   ')).toBe(true);\n      expect(isEmpty([])).toBe(true);\n      expect(isEmpty({})).toBe(true);\n    });\n\n    it('should detect non-empty values', () => {\n      expect(isEmpty('hello')).toBe(false);\n      expect(isEmpty([1, 2, 3])).toBe(false);\n      expect(isEmpty({ key: 'value' })).toBe(false);\n      expect(isEmpty(0)).toBe(false);\n      expect(isEmpty(false)).toBe(false);\n    });\n  });\n\n  describe('deepClone', () => {\n    it('should clone objects deeply', () => {\n      const original = {\n        name: 'test',\n        nested: { value: 123 },\n        array: [1, 2, { inner: 'value' }],\n      };\n\n      const cloned = deepClone(original);\n\n      expect(cloned).toEqual(original);\n      expect(cloned).not.toBe(original);\n      expect(cloned.nested).not.toBe(original.nested);\n      expect(cloned.array).not.toBe(original.array);\n    });\n\n    it('should handle primitives', () => {\n      expect(deepClone('string')).toBe('string');\n      expect(deepClone(123)).toBe(123);\n      expect(deepClone(null)).toBe(null);\n    });\n\n    it('should handle dates', () => {\n      const date = new Date();\n      const cloned = deepClone(date);\n\n      expect(cloned).toEqual(date);\n      expect(cloned).not.toBe(date);\n    });\n  });\n\n  describe('groupBy', () => {\n    it('should group array items by key', () => {\n      const items = [\n        { category: 'A', value: 1 },\n        { category: 'B', value: 2 },\n        { category: 'A', value: 3 },\n      ];\n\n      const grouped = groupBy(items, 'category');\n\n      expect(grouped.A).toHaveLength(2);\n      expect(grouped.B).toHaveLength(1);\n      expect(grouped.A[0].value).toBe(1);\n      expect(grouped.A[1].value).toBe(3);\n    });\n  });\n\n  describe('removeDuplicates', () => {\n    it('should remove primitive duplicates', () => {\n      expect(removeDuplicates([1, 2, 2, 3, 1])).toEqual([1, 2, 3]);\n    });\n\n    it('should remove object duplicates by key', () => {\n      const items = [\n        { id: 1, name: 'a' },\n        { id: 2, name: 'b' },\n        { id: 1, name: 'c' },\n      ];\n\n      const unique = removeDuplicates(items, 'id');\n      expect(unique).toHaveLength(2);\n      expect(unique[0].id).toBe(1);\n      expect(unique[1].id).toBe(2);\n    });\n  });\n\n  describe('sortBy', () => {\n    it('should sort objects by key', () => {\n      const items = [\n        { name: 'charlie', age: 30 },\n        { name: 'alice', age: 25 },\n        { name: 'bob', age: 35 },\n      ];\n\n      const sortedByName = sortBy(items, 'name');\n      expect(sortedByName[0].name).toBe('alice');\n      expect(sortedByName[1].name).toBe('bob');\n      expect(sortedByName[2].name).toBe('charlie');\n\n      const sortedByAge = sortBy(items, 'age', 'desc');\n      expect(sortedByAge[0].age).toBe(35);\n      expect(sortedByAge[1].age).toBe(30);\n      expect(sortedByAge[2].age).toBe(25);\n    });\n  });\n\n  describe('formatCurrency', () => {\n    it('should format PHP currency', () => {\n      expect(formatCurrency(1000)).toContain('₱');\n      expect(formatCurrency(1000)).toContain('1,000');\n      expect(formatCurrency(1234.56)).toContain('1,235'); // Rounded\n    });\n  });\n\n  describe('formatDate', () => {\n    it('should format dates for Philippine locale', () => {\n      const date = new Date('2023-12-25');\n      const formatted = formatDate(date);\n\n      expect(formatted).toContain('December');\n      expect(formatted).toContain('25');\n      expect(formatted).toContain('2023');\n    });\n\n    it('should handle string dates', () => {\n      const formatted = formatDate('2023-12-25');\n      expect(formatted).toContain('December');\n    });\n  });\n\n  describe('parseQueryString and buildQueryString', () => {\n    it('should parse query strings', () => {\n      const parsed = parseQueryString('name=john&age=30&city=manila');\n      expect(parsed).toEqual({\n        name: 'john',\n        age: '30',\n        city: 'manila',\n      });\n    });\n\n    it('should build query strings', () => {\n      const query = buildQueryString({\n        name: 'john',\n        age: 30,\n        active: true,\n        empty: null,\n        undefined: undefined,\n      });\n\n      expect(query).toContain('name=john');\n      expect(query).toContain('age=30');\n      expect(query).toContain('active=true');\n      expect(query).not.toContain('empty');\n      expect(query).not.toContain('undefined');\n    });\n  });\n});\n\ndescribe('Utilities - ID Generators', () => {\n  describe('generateId', () => {\n    it('should generate unique IDs', () => {\n      const id1 = generateId();\n      const id2 = generateId();\n\n      expect(id1).not.toBe(id2);\n      expect(id1).toMatch(/^id-\\d+-[a-z0-9]+$/);\n    });\n\n    it('should use custom prefix', () => {\n      const id = generateId('custom');\n      expect(id).toMatch(/^custom-\\d+-[a-z0-9]+$/);\n    });\n  });\n\n  describe('getFieldId', () => {\n    it('should use provided htmlFor', () => {\n      expect(getFieldId('explicit-id')).toBe('explicit-id');\n    });\n\n    it('should use componentId as fallback', () => {\n      expect(getFieldId(undefined, 'component-id')).toBe('component-id');\n    });\n\n    it('should generate ID as final fallback', () => {\n      const id = getFieldId();\n      expect(id).toMatch(/^field-\\d+-\\d+$/);\n    });\n  });\n\n  describe('getFieldIds', () => {\n    it('should generate related IDs', () => {\n      const ids = getFieldIds('test-field');\n\n      expect(ids.labelId).toBe('test-field-label');\n      expect(ids.helperTextId).toBe('test-field-helper');\n      expect(ids.errorId).toBe('test-field-error');\n    });\n  });\n\n  describe('buildAriaDescribedBy', () => {\n    it('should build aria-describedby string', () => {\n      expect(buildAriaDescribedBy('helper-id', 'error-id')).toBe('helper-id error-id');\n      expect(buildAriaDescribedBy('helper-id')).toBe('helper-id');\n      expect(buildAriaDescribedBy(undefined, 'error-id')).toBe('error-id');\n      expect(buildAriaDescribedBy()).toBeUndefined();\n    });\n  });\n});\n\ndescribe('Utilities - Async Utils', () => {\n  describe('debounce', () => {\n    jest.useFakeTimers();\n\n    it('should debounce function calls', () => {\n      const mockFn = jest.fn();\n      const debouncedFn = debounce(mockFn, 100);\n\n      debouncedFn('arg1');\n      debouncedFn('arg2');\n      debouncedFn('arg3');\n\n      expect(mockFn).not.toHaveBeenCalled();\n\n      jest.advanceTimersByTime(100);\n\n      expect(mockFn).toHaveBeenCalledTimes(1);\n      expect(mockFn).toHaveBeenCalledWith('arg3');\n    });\n\n    afterEach(() => {\n      jest.clearAllTimers();\n    });\n  });\n\n  describe('throttle', () => {\n    jest.useFakeTimers();\n\n    it('should throttle function calls', () => {\n      const mockFn = jest.fn();\n      const throttledFn = throttle(mockFn, 100);\n\n      throttledFn('arg1');\n      throttledFn('arg2');\n      throttledFn('arg3');\n\n      expect(mockFn).toHaveBeenCalledTimes(1);\n      expect(mockFn).toHaveBeenCalledWith('arg1');\n\n      jest.advanceTimersByTime(100);\n\n      throttledFn('arg4');\n      expect(mockFn).toHaveBeenCalledTimes(2);\n      expect(mockFn).toHaveBeenCalledWith('arg4');\n    });\n  });\n\n  describe('sleep', () => {\n    it('should resolve after specified time', async () => {\n      const start = Date.now();\n      await sleep(10);\n      const end = Date.now();\n\n      expect(end - start).toBeGreaterThanOrEqual(9); // Allow for small timing variations\n    });\n  });\n\n  describe('retry', () => {\n    it('should retry failing functions', async () => {\n      let attempts = 0;\n      const failingFn = async () => {\n        attempts++;\n        if (attempts < 3) {\n          throw new Error('Failed');\n        }\n        return 'success';\n      };\n\n      const result = await retry(failingFn, 3, 10);\n      expect(result).toBe('success');\n      expect(attempts).toBe(3);\n    });\n\n    it('should throw after max attempts', async () => {\n      const alwaysFailingFn = async () => {\n        throw new Error('Always fails');\n      };\n\n      await expect(retry(alwaysFailingFn, 2, 10)).rejects.toThrow();\n    });\n  });\n});\n\ndescribe('Utilities - CSS Utils', () => {\n  describe('cn', () => {\n    it('should merge class names', () => {\n      expect(cn('class1', 'class2')).toBe('class1 class2');\n      // mergeClassNames - REMOVED: Use `cn` instead\n    });\n\n    it('should handle conditional classes', () => {\n      expect(cn('base', true && 'conditional', false && 'not-included')).toBe('base conditional');\n    });\n\n    it('should handle arrays and objects', () => {\n      expect(cn(['class1', 'class2'], { active: true, disabled: false })).toBe(\n        'class1 class2 active'\n      );\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/tests/utils.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/types/resident-detail.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/types/resident-listing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/ui/accessibility.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/ui/chart-transformers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/ui/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/ui/lazy-loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/ui/lazyComponents.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":31,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2602,2605],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2602,2605],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Lazy Component Loading Utilities\n *\n * @description Centralized lazy loading configuration for performance optimization.\n * Provides standardized loading states and error boundaries for dynamically imported components.\n *\n * @performance Benefits:\n * - Reduces initial bundle size\n * - Faster page load times\n * - Better Core Web Vitals scores\n * - Improved user experience on slower connections\n */\n\nimport React, { lazy, Suspense, ComponentType, ReactNode } from 'react';\n\nimport { ErrorBoundary } from '@/providers/ErrorBoundary';\n\n/**\n * Loading component for lazy-loaded components\n */\nconst LoadingSpinner = ({ message = 'Loading...' }: { message?: string }) => (\n  <div className=\"flex items-center justify-center p-8\">\n    <div className=\"mr-3 h-8 w-8 animate-spin rounded-full border-b-2 border-blue-600\"></div>\n    <span className=\"text-gray-600 dark:text-gray-400\">{message}</span>\n  </div>\n);\n\n/**\n * Error fallback for lazy-loaded components\n */\nconst LazyErrorFallback = ({ error }: { error: Error }) => (\n  <div className=\"p-8 text-center\">\n    <div className=\"mb-4 text-red-600\">\n      <svg className=\"mx-auto h-12 w-12\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={2}\n          d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n        />\n      </svg>\n    </div>\n    <h3 className=\"mb-2 text-lg font-medium text-gray-900 dark:text-gray-100\">\n      Component Failed to Load\n    </h3>\n    <p className=\"mb-4 text-gray-600 dark:text-gray-400\">\n      There was an error loading this component. Please try refreshing the page.\n    </p>\n    <button\n      onClick={() => window.location.reload()}\n      className=\"rounded bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 dark:text-black\"\n    >\n      Refresh Page\n    </button>\n  </div>\n);\n\n/**\n * Create a lazy-loaded component with standardized loading and error handling\n */\nexport function createLazyComponent<T extends ComponentType<Record<string, unknown>>>(\n  importFn: () => Promise<{ default: T }>,\n  options: {\n    fallback?: ReactNode;\n    errorFallback?: ReactNode;\n    displayName?: string;\n  } = {}\n): ComponentType<React.ComponentProps<T>> {\n  const LazyComponent = lazy(importFn);\n\n  const WrappedComponent = (props: React.ComponentProps<T>) => (\n    <ErrorBoundary\n      fallback={\n        options.errorFallback || <LazyErrorFallback error={new Error('Component loading failed')} />\n      }\n    >\n      <Suspense fallback={options.fallback || <LoadingSpinner />}>\n        <LazyComponent {...(props as any)} />\n      </Suspense>\n    </ErrorBoundary>\n  );\n\n  if (options.displayName) {\n    WrappedComponent.displayName = `Lazy(${options.displayName})`;\n  }\n\n  return WrappedComponent;\n}\n\n/**\n * Preload a lazy component for better user experience\n */\nexport function preloadLazyComponent(importFn: () => Promise<{ default: ComponentType }>) {\n  // Preload the component when function is called\n  const modulePromise = importFn();\n\n  // Return a function to check if preload is complete\n  return {\n    preload: () => modulePromise,\n    isPreloaded: () => {\n      // Check if the module is already in the module cache\n      return modulePromise !== undefined;\n    },\n  };\n}\n\n/**\n * Higher-order component for route-based lazy loading\n */\nexport function withLazyLoading<P extends object>(\n  Component: ComponentType<P>,\n  loadingMessage?: string\n) {\n  return function LazyWrappedComponent(props: P) {\n    return (\n      <ErrorBoundary fallback={<LazyErrorFallback error={new Error('Component loading failed')} />}>\n        <Suspense fallback={<LoadingSpinner message={loadingMessage} />}>\n          <Component {...props} />\n        </Suspense>\n      </ErrorBoundary>\n    );\n  };\n}\n\n// Pre-configured lazy loading for common component types\nexport const LazyLoadingPresets = {\n  /**\n   * For heavy data visualization components\n   */\n  chart: {\n    fallback: <LoadingSpinner message=\"Loading chart...\" />,\n    errorFallback: <LazyErrorFallback error={new Error('Component loading failed')} />,\n  },\n\n  /**\n   * For form components with complex validation\n   */\n  form: {\n    fallback: <LoadingSpinner message=\"Loading form...\" />,\n    errorFallback: <LazyErrorFallback error={new Error('Component loading failed')} />,\n  },\n\n  /**\n   * For modal dialogs\n   */\n  modal: {\n    fallback: (\n      <div className=\"bg-opacity-50 fixed inset-0 flex items-center justify-center bg-black\">\n        <LoadingSpinner message=\"Loading modal...\" />\n      </div>\n    ),\n    errorFallback: <LazyErrorFallback error={new Error('Component loading failed')} />,\n  },\n\n  /**\n   * For table/data grid components\n   */\n  table: {\n    fallback: (\n      <div className=\"animate-pulse\">\n        <div className=\"mb-2 h-4 w-full rounded-sm bg-gray-200\"></div>\n        <div className=\"mb-2 h-4 w-full rounded-sm bg-gray-200\"></div>\n        <div className=\"h-4 w-3/4 rounded-sm bg-gray-200\"></div>\n      </div>\n    ),\n    errorFallback: <LazyErrorFallback error={new Error('Component loading failed')} />,\n  },\n};\n\n/**\n * Lazy load components based on intersection observer\n */\nexport function useLazyLoadOnIntersection(\n  ref: React.RefObject<Element>,\n  importFn: () => Promise<{ default: ComponentType }>,\n  options: IntersectionObserverInit = {}\n) {\n  const [isIntersecting, setIsIntersecting] = React.useState(false);\n\n  React.useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting && !isIntersecting) {\n          setIsIntersecting(true);\n          importFn(); // Start loading the component\n        }\n      },\n      { threshold: 0.1, ...options }\n    );\n\n    observer.observe(element);\n\n    return () => observer.disconnect();\n  }, [ref, importFn, isIntersecting, options]);\n\n  return isIntersecting;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/ui/lazyComponentsAlt.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":31,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2602,2605],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2602,2605],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Lazy Component Loading Utilities\n *\n * @description Centralized lazy loading configuration for performance optimization.\n * Provides standardized loading states and error boundaries for dynamically imported components.\n *\n * @performance Benefits:\n * - Reduces initial bundle size\n * - Faster page load times\n * - Better Core Web Vitals scores\n * - Improved user experience on slower connections\n */\n\nimport React, { lazy, Suspense, ComponentType, ReactNode } from 'react';\n\nimport { ErrorBoundary } from '@/providers/ErrorBoundary';\n\n/**\n * Loading component for lazy-loaded components\n */\nconst LoadingSpinner = ({ message = 'Loading...' }: { message?: string }) => (\n  <div className=\"flex items-center justify-center p-8\">\n    <div className=\"mr-3 h-8 w-8 animate-spin rounded-full border-b-2 border-blue-600\"></div>\n    <span className=\"text-zinc-600 dark:text-zinc-400\">{message}</span>\n  </div>\n);\n\n/**\n * Error fallback for lazy-loaded components\n */\nconst LazyErrorFallback = ({ error }: { error: Error }) => (\n  <div className=\"p-8 text-center\">\n    <div className=\"mb-4 text-red-600\">\n      <svg className=\"mx-auto h-12 w-12\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={2}\n          d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n        />\n      </svg>\n    </div>\n    <h3 className=\"mb-2 text-lg font-medium text-zinc-900 dark:text-zinc-100\">\n      Component Failed to Load\n    </h3>\n    <p className=\"mb-4 text-zinc-600 dark:text-zinc-400\">\n      There was an error loading this component. Please try refreshing the page.\n    </p>\n    <button\n      onClick={() => window.location.reload()}\n      className=\"rounded bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 dark:text-black\"\n    >\n      Refresh Page\n    </button>\n  </div>\n);\n\n/**\n * Create a lazy-loaded component with standardized loading and error handling\n */\nexport function createLazyComponent<T extends ComponentType<Record<string, unknown>>>(\n  importFn: () => Promise<{ default: T }>,\n  options: {\n    fallback?: ReactNode;\n    errorFallback?: ReactNode;\n    displayName?: string;\n  } = {}\n): ComponentType<React.ComponentProps<T>> {\n  const LazyComponent = lazy(importFn);\n\n  const WrappedComponent = (props: React.ComponentProps<T>) => (\n    <ErrorBoundary\n      fallback={\n        options.errorFallback || <LazyErrorFallback error={new Error('Component loading failed')} />\n      }\n    >\n      <Suspense fallback={options.fallback || <LoadingSpinner />}>\n        <LazyComponent {...(props as any)} />\n      </Suspense>\n    </ErrorBoundary>\n  );\n\n  if (options.displayName) {\n    WrappedComponent.displayName = `Lazy(${options.displayName})`;\n  }\n\n  return WrappedComponent;\n}\n\n/**\n * Preload a lazy component for better user experience\n */\nexport function preloadLazyComponent(importFn: () => Promise<{ default: ComponentType }>) {\n  // Preload the component when function is called\n  const modulePromise = importFn();\n\n  // Return a function to check if preload is complete\n  return {\n    preload: () => modulePromise,\n    isPreloaded: () => {\n      // Check if the module is already in the module cache\n      return modulePromise !== undefined;\n    },\n  };\n}\n\n/**\n * Higher-order component for route-based lazy loading\n */\nexport function withLazyLoading<P extends object>(\n  Component: ComponentType<P>,\n  loadingMessage?: string\n) {\n  return function LazyWrappedComponent(props: P) {\n    return (\n      <ErrorBoundary fallback={<LazyErrorFallback error={new Error('Component loading failed')} />}>\n        <Suspense fallback={<LoadingSpinner message={loadingMessage} />}>\n          <Component {...props} />\n        </Suspense>\n      </ErrorBoundary>\n    );\n  };\n}\n\n// Pre-configured lazy loading for common component types\nexport const LazyLoadingPresets = {\n  /**\n   * For heavy data visualization components\n   */\n  chart: {\n    fallback: <LoadingSpinner message=\"Loading chart...\" />,\n    errorFallback: <LazyErrorFallback error={new Error('Component loading failed')} />,\n  },\n\n  /**\n   * For form components with complex validation\n   */\n  form: {\n    fallback: <LoadingSpinner message=\"Loading form...\" />,\n    errorFallback: <LazyErrorFallback error={new Error('Component loading failed')} />,\n  },\n\n  /**\n   * For modal dialogs\n   */\n  modal: {\n    fallback: (\n      <div className=\"bg-opacity-50 fixed inset-0 flex items-center justify-center bg-black\">\n        <LoadingSpinner message=\"Loading modal...\" />\n      </div>\n    ),\n    errorFallback: <LazyErrorFallback error={new Error('Component loading failed')} />,\n  },\n\n  /**\n   * For table/data grid components\n   */\n  table: {\n    fallback: (\n      <div className=\"animate-pulse\">\n        <div className=\"mb-2 h-4 w-full rounded-sm bg-zinc-200\"></div>\n        <div className=\"mb-2 h-4 w-full rounded-sm bg-zinc-200\"></div>\n        <div className=\"h-4 w-3/4 rounded-sm bg-zinc-200\"></div>\n      </div>\n    ),\n    errorFallback: <LazyErrorFallback error={new Error('Component loading failed')} />,\n  },\n};\n\n/**\n * Lazy load components based on intersection observer\n */\nexport function useLazyLoadOnIntersection(\n  ref: React.RefObject<Element>,\n  importFn: () => Promise<{ default: ComponentType }>,\n  options: IntersectionObserverInit = {}\n) {\n  const [isIntersecting, setIsIntersecting] = React.useState(false);\n\n  React.useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting && !isIntersecting) {\n          setIsIntersecting(true);\n          importFn(); // Start loading the component\n        }\n      },\n      { threshold: 0.1, ...options }\n    );\n\n    observer.observe(element);\n\n    return () => observer.disconnect();\n  }, [ref, importFn, isIntersecting, options]);\n\n  return isIntersecting;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/ui/pieChartMath.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/ui/typography.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TypographyVariant' is defined but never used.","line":51,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TypographyProps' is defined but never used.","line":51,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Typography System for RBI System\n * Centralized font management and typography utilities\n */\n\n// Font stack definitions\nexport const fontStacks = {\n  system:\n    'var(--font-montserrat, \"Montserrat\"), -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", sans-serif',\n  display:\n    'var(--font-montserrat, \"Montserrat\"), -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", sans-serif',\n  body: 'var(--font-montserrat, \"Montserrat\"), -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", sans-serif',\n  mono: 'ui-monospace, \"SFMono-Regular\", \"Monaco\", \"Consolas\", \"Liberation Mono\", \"Courier New\", monospace',\n} as const;\n\n// Typography class utilities - Aligned with Figma specifications\nexport const typography = {\n  // System font classes (preferred approach)\n  system: 'font-system',\n  display: 'font-display',\n  body: 'font-body',\n  mono: 'font-mono',\n\n  // Heading classes - Figma aligned line heights\n  h1: 'font-display text-4xl font-bold leading-12 tracking-tight', // 48px/48px\n  h2: 'font-display text-3xl font-semibold leading-10 tracking-tight', // 30px/40px\n  h3: 'font-display text-2xl font-semibold leading-8 tracking-tight', // 24px/32px\n  h4: 'font-display text-xl font-medium leading-7 tracking-tight', // 20px/28px\n  h5: 'font-display text-lg font-medium leading-6', // 18px/24px\n  h6: 'font-display text-base font-medium leading-5', // 16px/20px\n\n  // Body text classes - Figma aligned (16px/20px standard)\n  bodyLarge: 'font-body text-lg leading-6', // 18px/24px\n  bodyMedium: 'font-body text-base leading-5', // 16px/20px - Figma standard\n  bodySmall: 'font-body text-sm leading-4', // 14px/16px\n  caption: 'font-body text-xs leading-[14px]', // 12px/14px\n\n  // UI element classes - Figma standard\n  button: 'font-system font-medium text-base leading-5', // 16px/20px as per Figma\n  input: 'font-system text-base leading-5', // 16px/20px as per Figma\n  label: 'font-system font-medium text-sm leading-4', // 14px/16px\n\n  // Special purpose\n  code: 'font-mono text-sm leading-5',\n} as const;\n\n// Helper function to combine typography classes - moved to utils.ts\n// This is imported from @/lib/utils in components\n\n// Import types from centralized location\nimport type { TypographyVariant, TypographyProps } from '@/types/components';\n\n// Re-export for backwards compatibility\nexport type { TypographyVariant, TypographyProps } from '@/types/components';\n\n// Common typography combinations\nexport const typographyPresets = {\n  pageTitle: `${typography.h1} text-gray-900 dark:text-gray-100 mb-6`,\n  sectionTitle: `${typography.h2} text-gray-800 dark:text-gray-200 mb-4`,\n  cardTitle: `${typography.h3} text-gray-800 dark:text-gray-200 mb-3`,\n  fieldLabel: `${typography.label} text-gray-700 dark:text-gray-300 mb-2`,\n  helpText: `${typography.bodySmall} text-gray-500 dark:text-gray-400`,\n  errorText: `${typography.bodySmall} text-red-600`,\n  successText: `${typography.bodySmall} text-green-600`,\n} as const;\n\n// typography is already exported as 'export const' above\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/utils/sessionUtils.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":21,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":21,"endColumn":18,"suggestions":[{"fix":{"range":[525,595],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":25,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":25,"endColumn":16,"suggestions":[{"fix":{"range":[629,723],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":26,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":26,"endColumn":16,"suggestions":[{"fix":{"range":[728,784],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":33,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":33,"endColumn":18,"suggestions":[{"fix":{"range":[985,1049],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":42,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":42,"endColumn":18,"suggestions":[{"fix":{"range":[1286,1353],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":46,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":46,"endColumn":16,"suggestions":[{"fix":{"range":[1384,1461],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Session Utility Functions\n * Handles session retrieval with fallback mechanisms\n */\n\nimport { supabase } from '@/lib/data/supabase';\n\n/**\n * Get session with fallback to localStorage\n * This handles cases where supabase.auth.getSession() fails but session is stored\n */\nexport const getSessionWithFallback = async () => {\n  try {\n    // Try the standard Supabase method first\n    const {\n      data: { session },\n      error,\n    } = await supabase.auth.getSession();\n\n    if (session?.access_token && !error) {\n      console.log('✅ [SessionUtils] Session retrieved via Supabase client');\n      return session;\n    }\n\n    console.log('⚠️ [SessionUtils] Supabase client session failed, trying localStorage fallback');\n    console.log('🔍 [SessionUtils] Supabase error:', error);\n\n    // Fallback: Read directly from localStorage\n    const storageKey = 'sb-cdtcbelaimyftpxmzkjf-auth-token';\n    const sessionData = localStorage.getItem(storageKey);\n\n    if (!sessionData) {\n      console.log('❌ [SessionUtils] No session data in localStorage');\n      return null;\n    }\n\n    const parsedSession = JSON.parse(sessionData);\n\n    // Check if session is expired\n    const now = Math.floor(Date.now() / 1000);\n    if (parsedSession.expires_at && parsedSession.expires_at < now) {\n      console.log('❌ [SessionUtils] Session in localStorage is expired');\n      return null;\n    }\n\n    console.log('✅ [SessionUtils] Session retrieved from localStorage fallback');\n    return parsedSession;\n  } catch (error) {\n    console.error('❌ [SessionUtils] Session retrieval failed:', error);\n    return null;\n  }\n};\n\n/**\n * Make authenticated API request with session fallback\n */\nexport const fetchWithAuth = async (url: string, options: RequestInit = {}) => {\n  const session = await getSessionWithFallback();\n\n  if (!session?.access_token) {\n    console.error('❌ [FetchWithAuth] No valid authentication session found');\n    throw new Error('No valid authentication session found');\n  }\n\n  const authHeaders = {\n    Authorization: `Bearer ${session.access_token}`,\n    'Content-Type': 'application/json',\n    ...options.headers,\n  };\n\n  const response = await fetch(url, {\n    ...options,\n    headers: authHeaders,\n  });\n\n  return response;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/utils/suppress-next-warnings.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":57,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":57,"endColumn":14,"suggestions":[{"fix":{"range":[1548,1634],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Suppress Next.js 15.5.0 OuterLayoutRouter key warnings\n * This must be imported and called before React renders anything\n */\n\nlet isPatched = false;\n\nexport function suppressNextJSWarnings() {\n  // Only patch once and only in development\n  if (isPatched || process.env.NODE_ENV !== 'development') {\n    return;\n  }\n\n  isPatched = true;\n\n  // Store original console.error\n  const originalConsoleError = console.error;\n\n  // Override console.error to filter specific Next.js warnings\n  console.error = (...args: unknown[]) => {\n    const message = args[0];\n\n    if (typeof message === 'string') {\n      // Suppress the specific OuterLayoutRouter key warning\n      if (\n        message.includes('Each child in a list should have a unique \"key\" prop') &&\n        (message.includes('OuterLayoutRouter') ||\n          message.includes('Check the render method of `OuterLayoutRouter`'))\n      ) {\n        // This is the Next.js 15.5.0 internal warning - suppress it\n        return;\n      }\n    }\n\n    // Allow all other errors through\n    originalConsoleError(...args);\n  };\n\n  // Also patch potential warning channels\n  const originalConsoleWarn = console.warn;\n  console.warn = (...args: unknown[]) => {\n    const message = args[0];\n\n    if (typeof message === 'string') {\n      if (\n        message.includes('Each child in a list should have a unique \"key\" prop') &&\n        message.includes('OuterLayoutRouter')\n      ) {\n        return; // Suppress\n      }\n    }\n\n    originalConsoleWarn(...args);\n  };\n\n  // Log that we've applied the patch\n  console.log('🔇 Next.js OuterLayoutRouter key warning suppressed (development only)');\n}\n\n// Auto-suppress if this file is imported\nsuppressNextJSWarnings();\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/validation/api-validators.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/validation/createValidationHook.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":10,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validateOnBlur' is assigned a value but never used.","line":73,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validateOnChange' is assigned a value but never used.","line":73,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":52},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'schema'. Either exclude it or remove the dependency array. Outer scope values like 'schema' aren't valid dependencies because mutating them doesn't re-render the component.","line":145,"column":7,"nodeType":"ArrayExpression","endLine":145,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [parseZodErrors]","fix":{"range":[4309,4333],"text":"[parseZodErrors]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'schema'. Either exclude it or remove the dependency array. Outer scope values like 'schema' aren't valid dependencies because mutating them doesn't re-render the component.","line":195,"column":7,"nodeType":"ArrayExpression","endLine":195,"endColumn":42,"suggestions":[{"desc":"Update the dependencies array to be: [parseZodErrors, wrapAsync]","fix":{"range":[5697,5732],"text":"[parseZodErrors, wrapAsync]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Validation Hook Factory\n *\n * @description Factory function for creating type-safe validation hooks.\n * Provides a consistent pattern for validation across the application.\n */\n\nimport { useState, useCallback, useMemo } from 'react';\nimport { z, ZodSchema, ZodError } from 'zod';\n\nimport { useAsyncErrorBoundary } from '@/hooks/utilities/useAsyncErrorBoundary';\nimport { useLogger } from '@/hooks/utilities/useLogger';\nimport { ZodValidationResult } from '@/lib/validation/types';\n\n/**\n * Use the centralized ZodValidationResult type\n */\nexport type ValidationResult<T> = ZodValidationResult<T>;\n\n/**\n * Validation hook options\n */\nexport interface ValidationHookOptions {\n  /** Whether to validate on blur (default: true) */\n  validateOnBlur?: boolean;\n  /** Whether to validate on change (default: false) */\n  validateOnChange?: boolean;\n  /** Debounce delay for validation in ms (default: 300) */\n  debounceMs?: number;\n  /** Custom error messages */\n  customMessages?: Record<string, string>;\n}\n\n/**\n * Validation hook return type\n */\nexport interface UseValidationReturn<T> {\n  /** Current validation state */\n  validation: ValidationResult<T>;\n  /** Validate the provided data */\n  validate: (data: unknown) => ValidationResult<T>;\n  /** Validate the provided data asynchronously */\n  validateAsync: (data: unknown) => Promise<ValidationResult<T>>;\n  /** Clear validation errors */\n  clearErrors: () => void;\n  /** Whether validation is currently running */\n  isValidating: boolean;\n  /** Set custom error for a field */\n  setFieldError: (field: string, error: string) => void;\n  /** Clear error for a specific field */\n  clearFieldError: (field: string) => void;\n}\n\n/**\n * Creates a validation hook factory for a specific schema\n *\n * @param schema - Zod schema for validation\n * @param defaultOptions - Default options for the validation hook\n */\nexport function createValidationHook<T>(\n  schema: ZodSchema<T>,\n  defaultOptions: ValidationHookOptions = {}\n) {\n  /**\n   * Generated validation hook\n   *\n   * @param options - Validation options\n   */\n  return function useValidation(options: ValidationHookOptions = {}): UseValidationReturn<T> {\n    const mergedOptions = { ...defaultOptions, ...options };\n    const { validateOnBlur = true, validateOnChange = false, customMessages = {} } = mergedOptions;\n\n    const { error: logError } = useLogger('ValidationHook');\n    const { wrapAsync } = useAsyncErrorBoundary({\n      onError: (error, errorInfo) => {\n        logError('Validation error occurred', error, { context: errorInfo });\n      },\n    });\n\n    const [validation, setValidation] = useState<ValidationResult<T>>({\n      isValid: true,\n      errors: {},\n    });\n    const [isValidating, setIsValidating] = useState(false);\n\n    /**\n     * Parse Zod errors into field-specific error messages\n     */\n    const parseZodErrors = useCallback(\n      (zodError: ZodError): Record<string, string[]> => {\n        const errors: Record<string, string[]> = {};\n\n        zodError.issues.forEach((error: z.ZodIssue) => {\n          const path = error.path.join('.');\n          const field = path || 'root';\n\n          // Use custom message if available\n          const message = customMessages[field] || error.message;\n\n          if (!errors[field]) {\n            errors[field] = [];\n          }\n          errors[field].push(message);\n        });\n\n        return errors;\n      },\n      [customMessages]\n    );\n\n    /**\n     * Synchronous validation\n     */\n    const validate = useCallback(\n      (data: unknown): ValidationResult<T> => {\n        try {\n          const result = schema.parse(data);\n          const validationResult: ValidationResult<T> = {\n            isValid: true,\n            errors: {},\n            data: result,\n          };\n\n          setValidation(validationResult);\n          return validationResult;\n        } catch (error) {\n          if (error instanceof ZodError) {\n            const errors = parseZodErrors(error);\n            const validationResult: ValidationResult<T> = {\n              isValid: false,\n              errors,\n              rawError: error,\n            };\n\n            setValidation(validationResult);\n            return validationResult;\n          }\n\n          // Re-throw non-Zod errors\n          throw error;\n        }\n      },\n      [schema, parseZodErrors]\n    );\n\n    /**\n     * Asynchronous validation with error boundary\n     */\n    const validateAsync = useCallback(\n      async (data: unknown): Promise<ValidationResult<T>> => {\n        setIsValidating(true);\n\n        try {\n          const result = await wrapAsync(\n            () => Promise.resolve(schema.parse(data)),\n            'async validation'\n          )();\n\n          const validationResult: ValidationResult<T> = {\n            isValid: true,\n            errors: {},\n            data: result || undefined,\n          };\n\n          setValidation(validationResult);\n          setIsValidating(false);\n          return validationResult;\n        } catch (error) {\n          setIsValidating(false);\n\n          if (error instanceof ZodError) {\n            const errors = parseZodErrors(error);\n            const validationResult: ValidationResult<T> = {\n              isValid: false,\n              errors,\n              rawError: error,\n            };\n\n            setValidation(validationResult);\n            return validationResult;\n          }\n\n          // Handle other errors\n          const validationResult: ValidationResult<T> = {\n            isValid: false,\n            errors: { general: ['An unexpected validation error occurred'] },\n          };\n\n          setValidation(validationResult);\n          return validationResult;\n        }\n      },\n      [schema, parseZodErrors, wrapAsync]\n    );\n\n    /**\n     * Clear all validation errors\n     */\n    const clearErrors = useCallback(() => {\n      setValidation({\n        isValid: true,\n        errors: {},\n      });\n    }, []);\n\n    /**\n     * Set custom error for a field\n     */\n    const setFieldError = useCallback((field: string, error: string) => {\n      setValidation(prev => ({\n        ...prev,\n        isValid: false,\n        errors: {\n          ...prev.errors,\n          [field]: [error],\n        },\n      }));\n    }, []);\n\n    /**\n     * Clear error for a specific field\n     */\n    const clearFieldError = useCallback((field: string) => {\n      setValidation(prev => {\n        const newErrors = { ...prev.errors };\n        delete newErrors[field];\n\n        return {\n          ...prev,\n          isValid: Object.keys(newErrors).length === 0,\n          errors: newErrors,\n        };\n      });\n    }, []);\n\n    return {\n      validation,\n      validate,\n      validateAsync,\n      clearErrors,\n      isValidating,\n      setFieldError,\n      clearFieldError,\n    };\n  };\n}\n\n/**\n * Common validation schemas for reuse\n */\nexport const CommonSchemas = {\n  email: z.string().email('Please enter a valid email address'),\n  phone: z.string().regex(/^\\+?[\\d\\s-()]+$/, 'Please enter a valid phone number'),\n  required: z.string().min(1, 'This field is required'),\n  optionalString: z.string().optional(),\n  positiveNumber: z.number().positive('Must be a positive number'),\n  nonEmptyArray: z.array(z.any()).min(1, 'At least one item is required'),\n} as const;\n\n/**\n * Pre-built validation hooks for common use cases\n */\nexport const useEmailValidation = createValidationHook(CommonSchemas.email);\nexport const usePhoneValidation = createValidationHook(CommonSchemas.phone);\nexport const useRequiredValidation = createValidationHook(CommonSchemas.required);\n\n// createValidationHook is already exported as 'export function' above\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/validation/fieldLevelSchemas.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1968,1971],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1968,1971],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":141,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3674,3677],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3674,3677],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":175,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4607,4610],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4607,4610],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":195,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5147,5150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5147,5150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Field-level validation schemas and utilities\n */\n\nimport { z } from 'zod';\n\nimport {\n  isValidPhilSysCardNumber,\n  isValidMobileNumber,\n  isValidBirthdate,\n} from '@/lib/business-rules';\n\n// Basic field validators\nexport const phoneNumberValidator = z.string().refine(isValidMobileNumber, {\n  message: 'Please enter a valid Philippine mobile number (09XXXXXXXXX or +639XXXXXXXXX)',\n});\n\nexport const philsysCardValidator = z.string().refine(isValidPhilSysCardNumber, {\n  message: 'PhilSys card number must be 12 digits',\n});\n\nexport const birthdateValidator = z.string().refine(isValidBirthdate, {\n  message: 'Please enter a valid birthdate',\n});\n\nexport const emailValidator = z.string().email({\n  message: 'Please enter a valid email address',\n});\n\n// Name validators\nexport const nameValidator = z\n  .string()\n  .min(1, 'This field is required')\n  .max(100, 'Name cannot exceed 100 characters')\n  .regex(\n    /^[a-zA-Z\\s\\-'\\.]*$/,\n    'Name can only contain letters, spaces, hyphens, apostrophes, and periods'\n  );\n\nexport const requiredNameValidator = nameValidator.min(1, 'This field is required');\n\n// Numeric validators\nexport const positiveNumberValidator = z\n  .number()\n  .positive('Must be a positive number')\n  .max(999999, 'Value is too large');\n\nexport const heightValidator = z\n  .number()\n  .min(50, 'Height must be at least 50 cm')\n  .max(300, 'Height cannot exceed 300 cm');\n\nexport const weightValidator = z\n  .number()\n  .min(1, 'Weight must be at least 1 kg')\n  .max(500, 'Weight cannot exceed 500 kg');\n\nexport const ageValidator = z\n  .number()\n  .min(0, 'Age cannot be negative')\n  .max(150, 'Age cannot exceed 150 years');\n\n// Selection validators\nexport const sexValidator = z.enum(['male', 'female'], {\n  message: 'Please select a valid sex',\n});\n\nexport const requiredSelectValidator = z.string().min(1, 'Please make a selection');\n\n// Field-specific validation functions\nexport const validateField = (\n  fieldName: string,\n  value: any\n): { isValid: boolean; error?: string } => {\n  try {\n    switch (fieldName) {\n      case 'firstName':\n      case 'lastName':\n        requiredNameValidator.parse(value);\n        break;\n\n      case 'middleName':\n      case 'extensionName':\n        if (value) nameValidator.parse(value);\n        break;\n\n      case 'sex':\n        sexValidator.parse(value);\n        break;\n\n      case 'birthdate':\n        birthdateValidator.parse(value);\n        break;\n\n      case 'email':\n        if (value) emailValidator.parse(value);\n        break;\n\n      case 'mobileNumber':\n        if (value) phoneNumberValidator.parse(value);\n        break;\n\n      case 'philsysCardNumber':\n        if (value) philsysCardValidator.parse(value);\n        break;\n\n      case 'height':\n        if (value) heightValidator.parse(Number(value));\n        break;\n\n      case 'weight':\n        if (value) weightValidator.parse(Number(value));\n        break;\n\n      case 'civilStatus':\n      case 'citizenship':\n      case 'educationAttainment':\n      case 'employmentStatus':\n        requiredSelectValidator.parse(value);\n        break;\n\n      default:\n        // For fields without specific validation, just check if required\n        if (value === null || value === undefined || value === '') {\n          return { isValid: false, error: 'This field is required' };\n        }\n        break;\n    }\n\n    return { isValid: true };\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return { isValid: false, error: error.issues[0]?.message || 'Invalid value' };\n    }\n    return { isValid: false, error: 'Validation error' };\n  }\n};\n\n// Batch validation for multiple fields\nexport const validateFields = (\n  data: Record<string, any>,\n  fieldNames: string[]\n): Record<string, string> => {\n  const errors: Record<string, string> = {};\n\n  fieldNames.forEach(fieldName => {\n    const value = data[fieldName];\n    const result = validateField(fieldName, value);\n\n    if (!result.isValid && result.error) {\n      errors[fieldName] = result.error;\n    }\n  });\n\n  return errors;\n};\n\n// Required fields by form section\nexport const REQUIRED_FIELDS = {\n  basicInformation: ['firstName', 'lastName', 'sex', 'civilStatus'],\n  birthInformation: ['birthdate'],\n  contactInformation: ['mobileNumber'],\n  physicalDetails: [],\n  sectoralInformation: [],\n  migrationInformation: [],\n} as const;\n\n// Get required fields for a section\nexport const getRequiredFieldsForSection = (section: keyof typeof REQUIRED_FIELDS): string[] => {\n  return [...(REQUIRED_FIELDS[section] || [])];\n};\n\n// Validate a complete form section\nexport const validateFormSection = (\n  data: Record<string, any>,\n  section: keyof typeof REQUIRED_FIELDS\n): { isValid: boolean; errors: Record<string, string> } => {\n  const requiredFields = getRequiredFieldsForSection(section);\n  const errors = validateFields(data, requiredFields);\n\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors,\n  };\n};\n\n// Real-time validation with debouncing\nexport const createDebouncedValidator = (\n  fieldName: string,\n  onValidation: (isValid: boolean, error?: string) => void,\n  delay = 500\n) => {\n  let timeoutId: NodeJS.Timeout;\n\n  return (value: any) => {\n    clearTimeout(timeoutId);\n\n    timeoutId = setTimeout(() => {\n      const result = validateField(fieldName, value);\n      onValidation(result.isValid, result.error);\n    }, delay);\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/validation/fieldValidators.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FieldValidationResult' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ValidationContext' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fieldName' is defined but never used. Allowed unused args must match /^_/u.","line":18,"column":57,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formData' is defined but never used. Allowed unused args must match /^_/u.","line":18,"column":68,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":76},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fieldName' is defined but never used. Allowed unused args must match /^_/u.","line":33,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":71},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formData' is defined but never used. Allowed unused args must match /^_/u.","line":33,"column":73,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":81},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fieldName' is defined but never used. Allowed unused args must match /^_/u.","line":47,"column":74,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":83},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formData' is defined but never used. Allowed unused args must match /^_/u.","line":47,"column":85,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":93},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fieldName' is defined but never used. Allowed unused args must match /^_/u.","line":63,"column":72,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":81},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formData' is defined but never used. Allowed unused args must match /^_/u.","line":63,"column":83,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":91},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fieldName' is defined but never used. Allowed unused args must match /^_/u.","line":78,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":69},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formData' is defined but never used. Allowed unused args must match /^_/u.","line":78,"column":71,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":79},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fieldName' is defined but never used. Allowed unused args must match /^_/u.","line":100,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formData' is defined but never used. Allowed unused args must match /^_/u.","line":100,"column":69,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":77},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fieldName' is defined but never used. Allowed unused args must match /^_/u.","line":128,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":128,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formData' is defined but never used. Allowed unused args must match /^_/u.","line":128,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":128,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fieldName' is defined but never used. Allowed unused args must match /^_/u.","line":151,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":151,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formData' is defined but never used. Allowed unused args must match /^_/u.","line":151,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":151,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fieldName' is defined but never used. Allowed unused args must match /^_/u.","line":169,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":169,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formData' is defined but never used. Allowed unused args must match /^_/u.","line":169,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":169,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fieldName' is defined but never used. Allowed unused args must match /^_/u.","line":193,"column":67,"nodeType":null,"messageId":"unusedVar","endLine":193,"endColumn":76},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formData' is defined but never used. Allowed unused args must match /^_/u.","line":193,"column":78,"nodeType":null,"messageId":"unusedVar","endLine":193,"endColumn":86},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fieldName' is defined but never used. Allowed unused args must match /^_/u.","line":215,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":215,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formData' is defined but never used. Allowed unused args must match /^_/u.","line":215,"column":69,"nodeType":null,"messageId":"unusedVar","endLine":215,"endColumn":77},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":247,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5951,5954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5951,5954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":262,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":262,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6383,6386],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6383,6386],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":273,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":273,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Field Validators\n * Reusable field-level validation functions\n */\n\nimport type {\n  FieldValidator,\n  FieldValidationResult,\n  ValidationContext,\n} from '../../types/validation';\n\n// Note: FieldValidationResult interface is still exported from types for backward compatibility\n// but these validators now return string | null per the updated FieldValidator type signature\n\n/**\n * Required field validator\n */\nexport const validateRequired: FieldValidator = (value, fieldName, formData) => {\n  if (value === null || value === undefined || value === '') {\n    return 'This field is required';\n  }\n\n  if (typeof value === 'string' && value.trim() === '') {\n    return 'This field cannot be empty';\n  }\n\n  return null;\n};\n\n/**\n * Email validator\n */\nexport const validateEmail: FieldValidator<string> = (email, fieldName, formData) => {\n  if (!email) {\n    return null; // Allow empty for optional fields\n  }\n\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  const isValid = emailRegex.test(email);\n\n  return isValid ? null : 'Please enter a valid email address';\n};\n\n/**\n * Philippine mobile number validator\n */\nexport const validatePhilippineMobile: FieldValidator<string> = (mobile, fieldName, formData) => {\n  if (!mobile) {\n    return null; // Allow empty for optional fields\n  }\n\n  const cleaned = mobile.replace(/\\D/g, '');\n  const isValid = /^09\\d{9}$/.test(cleaned) || /^639\\d{9}$/.test(cleaned);\n\n  return isValid\n    ? null\n    : 'Please enter a valid Philippine mobile number (09XXXXXXXXX or +639XXXXXXXXX)';\n};\n\n/**\n * PhilSys number validator\n */\nexport const validatePhilSysNumber: FieldValidator<string> = (philsys, fieldName, formData) => {\n  if (!philsys) {\n    return null; // Allow empty for optional fields\n  }\n\n  // CORRECTED: PhilSys is 12 digits, not 16 - aligned with database schema VARCHAR(20)\n  const pattern = /^\\d{4}-\\d{4}-\\d{4}$/;\n  const isValid = pattern.test(philsys);\n\n  return isValid ? null : 'PhilSys number must be in format XXXX-XXXX-XXXX';\n};\n\n/**\n * Name validator (letters, spaces, hyphens, apostrophes, periods)\n */\nexport const validateName: FieldValidator<string> = (name, fieldName, formData) => {\n  if (!name) {\n    return null; // Allow empty for optional fields\n  }\n\n  const namePattern = /^[a-zA-Z\\s\\-'\\.]*$/;\n  const isValid = namePattern.test(name) && name.trim().length > 0;\n\n  if (!isValid) {\n    return 'Name can only contain letters, spaces, hyphens, apostrophes, and periods';\n  }\n\n  if (name.length > 100) {\n    return 'Name cannot exceed 100 characters';\n  }\n\n  return null;\n};\n\n/**\n * Age validator\n */\nexport const validateAge: FieldValidator<number> = (age, fieldName, formData) => {\n  if (age === null || age === undefined) {\n    return null; // Allow empty for optional fields\n  }\n\n  if (typeof age !== 'number' || !Number.isInteger(age)) {\n    return 'Age must be a whole number';\n  }\n\n  if (age < 0) {\n    return 'Age cannot be negative';\n  }\n\n  if (age > 150) {\n    return 'Age cannot exceed 150 years';\n  }\n\n  return null;\n};\n\n/**\n * Length validator factory\n */\nexport function validateLength(\n  minLength?: number,\n  maxLength?: number,\n  customMessage?: string\n): FieldValidator<string> {\n  return (value, fieldName, formData) => {\n    if (!value) {\n      return null; // Allow empty for optional fields\n    }\n\n    const length = value.length;\n\n    if (minLength !== undefined && length < minLength) {\n      return customMessage || `Minimum length is ${minLength} characters`;\n    }\n\n    if (maxLength !== undefined && length > maxLength) {\n      return customMessage || `Maximum length is ${maxLength} characters`;\n    }\n\n    return null;\n  };\n}\n\n/**\n * Pattern validator factory\n */\nexport function validatePattern(pattern: RegExp, errorMessage: string): FieldValidator<string> {\n  return (value, fieldName, formData) => {\n    if (!value) {\n      return null; // Allow empty for optional fields\n    }\n\n    const isValid = pattern.test(value);\n    return isValid ? null : errorMessage;\n  };\n}\n\n/**\n * Number range validator factory\n */\nexport function validateRange(\n  min?: number,\n  max?: number,\n  customMessage?: string\n): FieldValidator<number> {\n  return (value, fieldName, formData) => {\n    if (value === null || value === undefined) {\n      return null; // Allow empty for optional fields\n    }\n\n    if (typeof value !== 'number') {\n      return 'Value must be a number';\n    }\n\n    if (min !== undefined && value < min) {\n      return customMessage || `Value must be at least ${min}`;\n    }\n\n    if (max !== undefined && value > max) {\n      return customMessage || `Value cannot exceed ${max}`;\n    }\n\n    return null;\n  };\n}\n\n/**\n * Date validator\n */\nexport const validateDate: FieldValidator<string | Date> = (date, fieldName, formData) => {\n  if (!date) {\n    return null; // Allow empty for optional fields\n  }\n\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n\n  if (isNaN(dateObj.getTime())) {\n    return 'Please enter a valid date';\n  }\n\n  // Check if date is not in the future for birthdates (simplified - can be enhanced later)\n  if (dateObj > new Date()) {\n    return 'Date cannot be in the future';\n  }\n\n  return null;\n};\n\n/**\n * URL validator\n */\nexport const validateUrl: FieldValidator<string> = (url, fieldName, formData) => {\n  if (!url) {\n    return null; // Allow empty for optional fields\n  }\n\n  try {\n    new URL(url);\n    return null;\n  } catch {\n    return 'Please enter a valid URL';\n  }\n};\n\n/**\n * Compose multiple validators\n */\nexport function composeValidators<T>(...validators: FieldValidator<T>[]): FieldValidator<T> {\n  return async (value, fieldName, formData) => {\n    for (const validator of validators) {\n      const result = await validator(value, fieldName, formData);\n      if (result !== null) {\n        return result;\n      }\n    }\n    return null;\n  };\n}\n\n/**\n * Conditional validator\n */\nexport function conditionalValidator<T>(\n  condition: (value: T, fieldName?: string, formData?: Record<string, any>) => boolean,\n  validator: FieldValidator<T>\n): FieldValidator<T> {\n  return (value, fieldName, formData) => {\n    if (!condition(value, fieldName, formData)) {\n      return null; // Skip validation if condition not met\n    }\n    return validator(value, fieldName, formData);\n  };\n}\n\n/**\n * Async validator wrapper\n */\nexport function createAsyncValidator<T>(\n  asyncFn: (value: T, fieldName?: string, formData?: Record<string, any>) => Promise<boolean>,\n  errorMessage: string\n): FieldValidator<T> {\n  return async (value, fieldName, formData) => {\n    if (!value) {\n      return null; // Allow empty for optional fields\n    }\n\n    try {\n      const isValid = await asyncFn(value, fieldName, formData);\n      return isValid ? null : errorMessage;\n    } catch (error) {\n      return 'Validation failed';\n    }\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/validation/formValidators.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FieldValidationResult' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[391,394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[391,394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[961,964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[961,964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1321,1324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1321,1324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":220,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":220,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6378,6381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6378,6381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":257,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7343,7346],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7343,7346],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":271,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7752,7755],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7752,7755],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":292,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":292,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8399,8402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8399,8402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":315,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":315,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9059,9062],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9059,9062],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Form Validators\n * Comprehensive form-level validation functions\n */\n\nimport type {\n  FormValidator,\n  ValidationResult,\n  ValidationContext,\n  FieldValidator,\n  FieldValidationResult,\n} from './types';\n\n/**\n * Create a validation result\n */\nfunction createValidationResult(\n  isValid: boolean,\n  errors: Record<string, string> = {},\n  warnings: Record<string, string> = {},\n  data?: any\n): ValidationResult {\n  // Convert errors from Record<string, string> to ValidationError[]\n  const validationErrors = Object.entries(errors).map(([field, message]) => ({\n    field,\n    message,\n  }));\n\n  // Convert warnings from Record<string, string> to string[]\n  const warningList = Object.values(warnings);\n\n  return {\n    isValid,\n    errors: validationErrors,\n    warnings: warningList.length > 0 ? warningList : undefined,\n    data,\n  };\n}\n\n/**\n * Create a form validator from field validators\n */\nexport function createFormValidator<T extends Record<string, any>>(\n  fieldValidators: Record<keyof T, FieldValidator | FieldValidator[]>,\n  crossFieldValidators?: ((data: T, context?: ValidationContext) => ValidationResult)[]\n): FormValidator<T> {\n  return async (data, context) => {\n    const errors: Record<string, string> = {};\n    const warnings: Record<string, string> = {};\n    const sanitizedData: Record<string, any> = { ...data };\n\n    // Validate individual fields\n    for (const [fieldName, validators] of Object.entries(fieldValidators)) {\n      const fieldValue = data[fieldName as keyof T];\n      const validatorArray = Array.isArray(validators) ? validators : [validators];\n\n      for (const validator of validatorArray) {\n        try {\n          const result = await validator(fieldValue, fieldName, data);\n\n          if (result !== null) {\n            errors[fieldName] = result;\n            break; // Stop at first error for this field\n          }\n        } catch (error) {\n          errors[fieldName] = 'Validation error occurred';\n          console.error(`Validation error for field ${fieldName}:`, error);\n        }\n      }\n    }\n\n    // Run cross-field validations if no individual field errors\n    if (Object.keys(errors).length === 0 && crossFieldValidators) {\n      for (const crossValidator of crossFieldValidators) {\n        try {\n          const crossResult = crossValidator(data, context);\n\n          if (!crossResult.isValid) {\n            // Convert ValidationError[] back to Record<string, string> for internal processing\n            const errorRecord = crossResult.errors.reduce(\n              (acc, err) => {\n                acc[err.field] = err.message;\n                return acc;\n              },\n              {} as Record<string, string>\n            );\n            Object.assign(errors, errorRecord);\n          }\n\n          if (crossResult.warnings && crossResult.warnings.length > 0) {\n            // For cross-field warnings, we'll add them to the form level\n            warnings['_form'] = crossResult.warnings.join('; ');\n          }\n        } catch (error) {\n          errors['_form'] = 'Cross-field validation error occurred';\n          console.error('Cross-field validation error:', error);\n        }\n      }\n    }\n\n    const isValid = Object.keys(errors).length === 0;\n\n    return createValidationResult(isValid, errors, warnings, isValid ? sanitizedData : undefined);\n  };\n}\n\n/**\n * Create a field validator with common patterns\n */\nexport function createFieldValidator(rules: {\n  required?: boolean;\n  type?: 'string' | 'number' | 'email' | 'phone' | 'date' | 'url';\n  minLength?: number;\n  maxLength?: number;\n  min?: number;\n  max?: number;\n  pattern?: RegExp;\n  custom?: FieldValidator;\n  customMessage?: string;\n}): FieldValidator {\n  return async (value, fieldName, formData) => {\n    // Required validation\n    if (rules.required) {\n      if (value === null || value === undefined || value === '') {\n        return rules.customMessage || 'This field is required';\n      }\n    }\n\n    // Skip other validations if value is empty and not required\n    if (!rules.required && (value === null || value === undefined || value === '')) {\n      return null;\n    }\n\n    // Type validations\n    switch (rules.type) {\n      case 'string':\n        if (typeof value !== 'string') {\n          return 'Must be a string';\n        }\n        break;\n\n      case 'number':\n        const numValue = Number(value);\n        if (isNaN(numValue)) {\n          return 'Must be a valid number';\n        }\n        value = numValue;\n        break;\n\n      case 'email':\n        const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailPattern.test(String(value))) {\n          return 'Must be a valid email address';\n        }\n        break;\n\n      case 'phone':\n        const phonePattern = /^(\\+63|63|09)\\d{9}$/;\n        const cleanedPhone = String(value).replace(/\\D/g, '');\n        if (!phonePattern.test(cleanedPhone)) {\n          return 'Must be a valid Philippine phone number';\n        }\n        break;\n\n      case 'date':\n        const dateValue = new Date(String(value));\n        if (isNaN(dateValue.getTime())) {\n          return 'Must be a valid date';\n        }\n        break;\n\n      case 'url':\n        try {\n          new URL(String(value));\n        } catch {\n          return 'Must be a valid URL';\n        }\n        break;\n    }\n\n    // Length validations for strings\n    if (typeof value === 'string') {\n      if (rules.minLength !== undefined && value.length < rules.minLength) {\n        return `Must be at least ${rules.minLength} characters long`;\n      }\n\n      if (rules.maxLength !== undefined && value.length > rules.maxLength) {\n        return `Must not exceed ${rules.maxLength} characters`;\n      }\n    }\n\n    // Range validations for numbers\n    if (typeof value === 'number') {\n      if (rules.min !== undefined && value < rules.min) {\n        return `Must be at least ${rules.min}`;\n      }\n\n      if (rules.max !== undefined && value > rules.max) {\n        return `Must not exceed ${rules.max}`;\n      }\n    }\n\n    // Pattern validation\n    if (rules.pattern && !rules.pattern.test(String(value))) {\n      return rules.customMessage || 'Invalid format';\n    }\n\n    // Custom validation\n    if (rules.custom) {\n      return await rules.custom(value, fieldName, formData);\n    }\n\n    return null;\n  };\n}\n\n/**\n * Validate form data with a schema\n */\nexport async function validateFormData<T extends Record<string, any>>(\n  data: T,\n  validator: FormValidator<T>,\n  context?: ValidationContext\n): Promise<ValidationResult> {\n  try {\n    return await validator(data, context);\n  } catch (error) {\n    console.error('Form validation error:', error);\n    return createValidationResult(false, {\n      _form: 'Validation failed due to an internal error',\n    });\n  }\n}\n\n/**\n * Build validation errors from multiple sources\n */\nexport function buildValidationErrors(\n  ...errorSources: (Record<string, string> | undefined)[]\n): Record<string, string> {\n  return errorSources.reduce<Record<string, string>>((acc, errors) => {\n    if (errors) {\n      Object.assign(acc, errors);\n    }\n    return acc;\n  }, {});\n}\n\n/**\n * Cross-field validators for common patterns\n */\nexport const crossFieldValidators = {\n  /**\n   * Validate that two fields match (e.g., password confirmation)\n   */\n  fieldsMatch: (field1: string, field2: string, message?: string) => {\n    return (data: Record<string, any>) => {\n      if (data[field1] !== data[field2]) {\n        return createValidationResult(false, {\n          [field2]: message || `${field2} must match ${field1}`,\n        });\n      }\n      return createValidationResult(true);\n    };\n  },\n\n  /**\n   * Validate that at least one of the fields is provided\n   */\n  atLeastOneRequired: (fields: string[], message?: string) => {\n    return (data: Record<string, any>) => {\n      const hasValue = fields.some(\n        field => data[field] !== null && data[field] !== undefined && data[field] !== ''\n      );\n\n      if (!hasValue) {\n        const errors: Record<string, string> = {};\n        fields.forEach(field => {\n          errors[field] = message || `At least one of these fields is required`;\n        });\n        return createValidationResult(false, errors);\n      }\n\n      return createValidationResult(true);\n    };\n  },\n\n  /**\n   * Validate that a date range is valid (start <= end)\n   */\n  validDateRange: (startField: string, endField: string, message?: string) => {\n    return (data: Record<string, any>) => {\n      const startDate = data[startField];\n      const endDate = data[endField];\n\n      if (startDate && endDate) {\n        const start = new Date(startDate);\n        const end = new Date(endDate);\n\n        if (start > end) {\n          return createValidationResult(false, {\n            [endField]: message || 'End date must be after start date',\n          });\n        }\n      }\n\n      return createValidationResult(true);\n    };\n  },\n\n  /**\n   * Validate conditional fields (if field A has value, field B is required)\n   */\n  conditionalRequired: (triggerField: string, requiredField: string, message?: string) => {\n    return (data: Record<string, any>) => {\n      const triggerValue = data[triggerField];\n      const requiredValue = data[requiredField];\n\n      if (triggerValue && (!requiredValue || requiredValue === '')) {\n        return createValidationResult(false, {\n          [requiredField]:\n            message || `${requiredField} is required when ${triggerField} is provided`,\n        });\n      }\n\n      return createValidationResult(true);\n    };\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/validation/generated-schemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/validation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/validation/resident-schema.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'income_classSchema' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'positiveNumberSchema' is assigned a value but never used.","line":70,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":164,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":164,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'array' is defined but never used. Allowed unused args must match /^_/u.","line":164,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":164,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Resident validation schemas using Zod\n * Provides runtime validation for resident data forms\n */\n\nimport { z } from 'zod';\n\nimport {\n  sexSchema,\n  civil_statusSchema,\n  citizenshipSchema,\n  education_levelSchema,\n  employment_statusSchema,\n  blood_typeSchema,\n  religionSchema,\n  ethnicitySchema,\n  income_classSchema,\n} from '@/lib/validation/generated-schemas';\n\n// Base schema for common validations\nconst nameSchema = z.string().min(1, 'Required').max(100, 'Too long (max 100 characters)');\nconst optionalNameSchema = z\n  .string()\n  .max(100, 'Too long (max 100 characters)')\n  .optional()\n  .or(z.literal(''));\n\n// Phone number validation for Philippine format\nconst phoneSchema = z\n  .string()\n  .regex(/^09\\d{9}$/, 'Invalid mobile number format (09XXXXXXXXX)')\n  .optional()\n  .or(z.literal(''));\n\n// Email validation\nconst emailSchema = z.string().email('Invalid email format').optional().or(z.literal(''));\n\n// Date validation\nconst dateSchema = z.string().refine(\n  date => {\n    if (!date) return false;\n    const parsed = new Date(date);\n    return !isNaN(parsed.getTime()) && parsed <= new Date();\n  },\n  { message: 'Invalid date or future date not allowed' }\n);\n\n// Optional date validation\nconst optionalDateSchema = z\n  .string()\n  .refine(\n    date => {\n      if (!date) return true;\n      const parsed = new Date(date);\n      return !isNaN(parsed.getTime());\n    },\n    { message: 'Invalid date format' }\n  )\n  .optional()\n  .or(z.literal(''));\n\n// PhilSys card number validation\nconst philsysSchema = z\n  .string()\n  .regex(/^\\d{4}-\\d{4}-\\d{4}$/, 'Invalid PhilSys format (XXXX-XXXX-XXXX)')\n  .optional()\n  .or(z.literal(''));\n\n// Number validations\nconst positiveNumberSchema = z.number().positive('Must be greater than 0').optional();\nconst heightSchema = z.number().min(50, 'Invalid height').max(300, 'Invalid height').optional();\nconst weightSchema = z.number().min(1, 'Invalid weight').max(500, 'Invalid weight').optional();\n\n/**\n * Complete resident validation schema\n * Covers all fields available in the resident edit form\n */\nexport const ResidentFormSchema = z.object({\n  // Personal Information\n  first_name: nameSchema,\n  middle_name: optionalNameSchema,\n  last_name: nameSchema,\n  extension_name: z.string().max(20, 'Too long (max 20 characters)').optional().or(z.literal('')),\n  birthdate: dateSchema,\n  sex: sexSchema,\n  civil_status: civil_statusSchema,\n  civil_status_others_specify: z.string().max(200, 'Too long').optional().or(z.literal('')),\n  citizenship: citizenshipSchema.optional(),\n\n  // Birth Place Information\n  birth_place_name: z.string().max(200, 'Too long').optional().or(z.literal('')),\n  birth_place_code: z.string().max(20, 'Too long').optional().or(z.literal('')),\n\n  // Contact Information\n  mobile_number: phoneSchema,\n  email: emailSchema,\n  telephone_number: z.string().max(20, 'Too long').optional().or(z.literal('')),\n  philsys_card_number: philsysSchema,\n\n  // Address Information\n  household_code: z.string().max(50, 'Too long').optional().or(z.literal('')),\n  street_id: z.string().uuid().optional().or(z.literal('')),\n  subdivision_id: z.string().uuid().optional().or(z.literal('')),\n  zip_code: z.string().max(10, 'Too long').optional().or(z.literal('')),\n\n  // Education & Employment\n  education_attainment: education_levelSchema.optional(),\n  is_graduate: z.boolean().optional(),\n  employment_status: employment_statusSchema.optional(),\n  employment_code: z.string().max(10, 'Too long').optional().or(z.literal('')),\n  employment_name: z.string().max(300, 'Too long').optional().or(z.literal('')),\n  occupation_code: z.string().max(10, 'Too long').optional().or(z.literal('')),\n  psoc_level: z.number().int().min(1).max(9).optional(),\n  occupation_title: z.string().max(300, 'Too long').optional().or(z.literal('')),\n\n  // Physical Characteristics\n  blood_type: blood_typeSchema.optional(),\n  height: heightSchema,\n  weight: weightSchema,\n  complexion: z.string().max(50, 'Too long').optional().or(z.literal('')),\n\n  // Cultural & Religious Information\n  religion: religionSchema.optional(),\n  religion_others_specify: z.string().max(200, 'Too long').optional().or(z.literal('')),\n  ethnicity: ethnicitySchema.optional(),\n\n  // Voting Information\n  is_voter: z.boolean().optional(),\n  is_resident_voter: z.boolean().optional(),\n  last_voted_date: optionalDateSchema,\n\n  // Mother's Maiden Name\n  mother_maiden_first: optionalNameSchema,\n  mother_maiden_middle: optionalNameSchema,\n  mother_maiden_last: optionalNameSchema,\n});\n\n/**\n * Type inference from the schema\n */\nexport type ResidentEditFormData = z.infer<typeof ResidentFormSchema>;\n\n/**\n * Validation result type\n */\nexport interface ValidationResult {\n  success: boolean;\n  data?: ResidentEditFormData;\n  errors?: Record<string, string>;\n}\n\n/**\n * Validates resident form data\n * @param data - Raw form data to validate\n * @returns Validation result with typed data or errors\n */\nexport function validateResidentForm(data: unknown): ValidationResult {\n  try {\n    const validatedData = ResidentFormSchema.parse(data);\n    return { success: true, data: validatedData };\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const errors: Record<string, string> = {};\n      error.issues.forEach((err, index, array) => {\n        const path = err.path.join('.');\n        errors[path] = err.message;\n      });\n      return { success: false, errors };\n    }\n    return { success: false, errors: { general: 'Validation failed' } };\n  }\n}\n\n/**\n * Partial schema for updating residents (all fields optional)\n */\nexport const ResidentUpdateSchema = ResidentFormSchema.partial();\nexport type ResidentUpdateData = z.infer<typeof ResidentUpdateSchema>;\n\n/**\n * Schema for specific sections of the form\n */\nexport const PersonalInfoSchema = ResidentFormSchema.pick({\n  first_name: true,\n  middle_name: true,\n  last_name: true,\n  extension_name: true,\n  birthdate: true,\n  sex: true,\n  civil_status: true,\n  civil_status_others_specify: true,\n  citizenship: true,\n});\n\nexport const ContactInfoSchema = ResidentFormSchema.pick({\n  mobile_number: true,\n  email: true,\n  telephone_number: true,\n  philsys_card_number: true,\n});\n\nexport const EducationEmploymentSchema = ResidentFormSchema.pick({\n  education_attainment: true,\n  is_graduate: true,\n  employment_status: true,\n  employment_code: true,\n  employment_name: true,\n  occupation_code: true,\n  psoc_level: true,\n  occupation_title: true,\n});\n\nexport const SectoralInfoSchema = ResidentFormSchema.pick({\n  education_attainment: true,\n  is_graduate: true,\n  employment_status: true,\n  employment_code: true,\n  employment_name: true,\n  occupation_code: true,\n  psoc_level: true,\n  occupation_title: true,\n});\n\nexport const PhysicalInfoSchema = ResidentFormSchema.pick({\n  blood_type: true,\n  height: true,\n  weight: true,\n  complexion: true,\n});\n\nexport const CulturalInfoSchema = ResidentFormSchema.pick({\n  religion: true,\n  religion_others_specify: true,\n  ethnicity: true,\n});\n\nexport const VotingInfoSchema = ResidentFormSchema.pick({\n  is_voter: true,\n  is_resident_voter: true,\n  last_voted_date: true,\n});\n\nexport const MotherMaidenNameSchema = ResidentFormSchema.pick({\n  mother_maiden_first: true,\n  mother_maiden_middle: true,\n  mother_maiden_last: true,\n});\n\nexport const BirthPlaceSchema = ResidentFormSchema.pick({\n  birth_place_name: true,\n  birth_place_code: true,\n});\n\nexport const AddressInfoSchema = ResidentFormSchema.pick({\n  household_code: true,\n  street_id: true,\n  subdivision_id: true,\n  zip_code: true,\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/validation/sanitizers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":305,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":305,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7378,7381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7378,7381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":317,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":317,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7648,7651],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7648,7651],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":319,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":319,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7750,7753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7750,7753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":323,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":323,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7933,7936],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7933,7936],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Input Sanitizers\n * Security-focused input sanitization functions\n */\n\nimport type { SanitizationOptions } from './types';\n\n/**\n * Sanitize general input with configurable options\n */\nexport function sanitizeInput(input: string, options: SanitizationOptions = {}): string {\n  if (!input || typeof input !== 'string') {\n    return '';\n  }\n\n  let sanitized = input;\n\n  // Normalize unicode characters\n  if (options.normalizeUnicode !== false) {\n    sanitized = sanitized.normalize('NFC');\n  }\n\n  // Trim whitespace\n  if (options.trimWhitespace !== false) {\n    sanitized = sanitized.trim();\n  }\n\n  // Strip HTML tags\n  if (options.stripHtml) {\n    sanitized = sanitized.replace(/<[^>]*>/g, '');\n  }\n\n  // Escape HTML entities\n  if (options.escapeHtml) {\n    sanitized = sanitized\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&#x27;')\n      .replace(/\\//g, '&#x2F;');\n  }\n\n  // Filter allowed characters\n  if (options.allowedChars) {\n    sanitized = sanitized.replace(new RegExp(`[^${options.allowedChars.source}]`, 'g'), '');\n  }\n\n  // Enforce max length\n  if (options.maxLength && sanitized.length > options.maxLength) {\n    sanitized = sanitized.substring(0, options.maxLength);\n  }\n\n  return sanitized;\n}\n\n/**\n * Sanitize HTML content (allows safe HTML tags)\n */\nexport function sanitizeHtml(html: string): string {\n  if (!html || typeof html !== 'string') {\n    return '';\n  }\n\n  // Remove dangerous tags and attributes\n  const dangerous = [\n    /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\n    /<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi,\n    /<object\\b[^<]*(?:(?!<\\/object>)<[^<]*)*<\\/object>/gi,\n    /<embed\\b[^<]*(?:(?!<\\/embed>)<[^<]*)*<\\/embed>/gi,\n    /<form\\b[^<]*(?:(?!<\\/form>)<[^<]*)*<\\/form>/gi,\n    /on\\w+\\s*=/gi, // Event handlers\n    /javascript:/gi,\n    /data:/gi,\n    /vbscript:/gi,\n  ];\n\n  let sanitized = html;\n  dangerous.forEach(pattern => {\n    sanitized = sanitized.replace(pattern, '');\n  });\n\n  return sanitized.trim();\n}\n\n/**\n * Sanitize PhilSys number (remove non-digits, format)\n */\nexport function sanitizePhilSysNumber(philsys: string): string {\n  if (!philsys || typeof philsys !== 'string') {\n    return '';\n  }\n\n  // Remove all non-digit characters\n  const digitsOnly = philsys.replace(/\\D/g, '');\n\n  // CORRECTED: PhilSys is 12 digits, not 16 - aligned with database schema VARCHAR(20)\n  // Format as XXXX-XXXX-XXXX if 12 digits\n  if (digitsOnly.length === 12) {\n    return `${digitsOnly.slice(0, 4)}-${digitsOnly.slice(4, 8)}-${digitsOnly.slice(8, 12)}`;\n  }\n\n  return digitsOnly;\n}\n\n/**\n * Sanitize name (letters, spaces, common name characters)\n */\nexport function sanitizeName(name: string): string {\n  if (!name || typeof name !== 'string') {\n    return '';\n  }\n\n  return (\n    sanitizeInput(name, {\n      allowedChars: /a-zA-Z\\s\\-'\\.]/,\n      maxLength: 100,\n      trimWhitespace: true,\n    })\n      // Remove multiple spaces\n      .replace(/\\s+/g, ' ')\n      // Remove leading/trailing hyphens, apostrophes, periods\n      .replace(/^[\\-'\\.]+|[\\-'\\.]+$/g, '')\n      // Capitalize first letter of each word\n      .replace(/\\b\\w/g, char => char.toUpperCase())\n  );\n}\n\n/**\n * Sanitize phone number (digits, +, parentheses, hyphens, spaces)\n */\nexport function sanitizePhone(phone: string): string {\n  if (!phone || typeof phone !== 'string') {\n    return '';\n  }\n\n  return sanitizeInput(phone, {\n    allowedChars: /0-9\\+\\-\\(\\)\\s]/,\n    maxLength: 20,\n    trimWhitespace: true,\n  });\n}\n\n/**\n * Sanitize email address\n */\nexport function sanitizeEmail(email: string): string {\n  if (!email || typeof email !== 'string') {\n    return '';\n  }\n\n  return sanitizeInput(email, {\n    allowedChars: /a-zA-Z0-9@\\.\\-_\\+]/,\n    maxLength: 254, // RFC 5321 limit\n    trimWhitespace: true,\n  }).toLowerCase();\n}\n\n/**\n * Sanitize URL\n */\nexport function sanitizeUrl(url: string): string {\n  if (!url || typeof url !== 'string') {\n    return '';\n  }\n\n  // Basic URL sanitization\n  const sanitized = sanitizeInput(url, {\n    trimWhitespace: true,\n    maxLength: 2048,\n  });\n\n  // Ensure safe protocols\n  const safeProtocols = ['http:', 'https:', 'mailto:', 'tel:'];\n  try {\n    const urlObj = new URL(sanitized);\n    if (!safeProtocols.includes(urlObj.protocol)) {\n      return '';\n    }\n  } catch {\n    // Not a valid URL\n    return '';\n  }\n\n  return sanitized;\n}\n\n/**\n * Sanitize text content (remove control characters, normalize whitespace)\n */\nexport function sanitizeText(text: string, maxLength?: number): string {\n  if (!text || typeof text !== 'string') {\n    return '';\n  }\n\n  return (\n    sanitizeInput(text, {\n      trimWhitespace: true,\n      stripHtml: true,\n      maxLength,\n      normalizeUnicode: true,\n    })\n      // Remove control characters except newlines and tabs\n      .replace(/[\\u0000-\\u0008\\u000B\\u000C\\u000E-\\u001F\\u007F]/g, '')\n      // Normalize whitespace\n      .replace(/\\s+/g, ' ')\n  );\n}\n\n/**\n * Sanitize search query (prevent injection attacks)\n */\nexport function sanitizeSearchQuery(query: string): string {\n  if (!query || typeof query !== 'string') {\n    return '';\n  }\n\n  return (\n    sanitizeInput(query, {\n      trimWhitespace: true,\n      maxLength: 100,\n      stripHtml: true,\n    })\n      // Remove SQL injection patterns\n      .replace(/['\";\\\\]/g, '')\n      // Remove script injection patterns\n      .replace(/<script|javascript:|data:/gi, '')\n      // Remove excessive wildcards\n      .replace(/[*%]{3,}/g, '**')\n  );\n}\n\n/**\n * Sanitize file name (safe for filesystem)\n */\nexport function sanitizeFileName(fileName: string): string {\n  if (!fileName || typeof fileName !== 'string') {\n    return '';\n  }\n\n  return (\n    sanitizeInput(fileName, {\n      allowedChars: /a-zA-Z0-9\\.\\-_\\s]/,\n      maxLength: 255,\n      trimWhitespace: true,\n    })\n      // Remove dangerous file extensions\n      .replace(/\\.(exe|bat|cmd|scr|pif|com|jar|sh|ps1|vbs)$/i, '.txt')\n      // Remove directory traversal\n      .replace(/\\.\\./g, '')\n      // Remove leading dots (hidden files)\n      .replace(/^\\.+/, '')\n      // Replace spaces with underscores\n      .replace(/\\s+/g, '_')\n      // Remove multiple dots\n      .replace(/\\.{2,}/g, '.')\n  );\n}\n\n/**\n * Sanitize database input (prevent SQL injection)\n */\nexport function sanitizeDatabaseInput(input: string): string {\n  if (!input || typeof input !== 'string') {\n    return '';\n  }\n\n  return (\n    sanitizeInput(input, {\n      trimWhitespace: true,\n      escapeHtml: false, // Don't escape HTML for database\n    })\n      // Remove SQL injection patterns\n      .replace(/['\"\\\\;]/g, '')\n      // Remove SQL keywords in dangerous contexts\n      .replace(/\\b(DROP|DELETE|INSERT|UPDATE|SELECT|UNION|EXEC|EXECUTE)\\b/gi, '')\n      // Remove comment patterns\n      .replace(/--|\\*\\/|\\*|\\/\\*/g, '')\n  );\n}\n\n/**\n * Sanitize JSON input (prevent JSON injection)\n */\nexport function sanitizeJsonInput(input: string): string {\n  if (!input || typeof input !== 'string') {\n    return '';\n  }\n\n  return (\n    sanitizeInput(input, {\n      trimWhitespace: true,\n      stripHtml: true,\n    })\n      // Remove dangerous JSON patterns\n      .replace(/\\\\\"|\\\\'|\\\\x|\\\\u/g, '')\n      // Remove function calls\n      .replace(/\\(\\s*\\)/g, '')\n  );\n}\n\n/**\n * Deep sanitize object (recursively sanitize all string values)\n */\nexport function sanitizeObject<T extends Record<string, any>>(\n  obj: T,\n  options: SanitizationOptions = {}\n): T {\n  if (!obj || typeof obj !== 'object') {\n    return obj;\n  }\n\n  const sanitized = { ...obj };\n\n  for (const [key, value] of Object.entries(sanitized)) {\n    if (typeof value === 'string') {\n      (sanitized as any)[key] = sanitizeInput(value, options);\n    } else if (Array.isArray(value)) {\n      (sanitized as any)[key] = value.map(item =>\n        typeof item === 'string' ? sanitizeInput(item, options) : item\n      );\n    } else if (value && typeof value === 'object') {\n      (sanitized as any)[key] = sanitizeObject(value, options);\n    }\n  }\n\n  return sanitized;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/validation/schemas.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validateAge' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'composeValidators' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1054,1057],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1054,1057],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1073,1076],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1073,1076],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1089,1092],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1089,1092],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":65,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":182,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":182,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":217,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7763,7766],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7763,7766],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":218,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":218,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":246,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":246,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":262,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":262,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":302,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":302,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":338,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":338,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":393,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":393,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13349,13352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13349,13352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Validation Schemas\n * Pre-built validation schemas for common data types\n */\n\nimport type { LoginFormData, PasswordUpdateRequest } from '../../types/auth';\nimport type { HouseholdData } from '../../types/households';\nimport type { ResidentFormState } from '../../types/residents';\nimport type {\n  SimpleValidationResult as ValidationResult,\n  ValidationContext,\n} from '../../types/validation';\n\nimport {\n  validateRequired,\n  validateEmail,\n  validatePhilippineMobile,\n  validatePhilSysNumber,\n  validateName,\n  validateAge,\n  validateLength,\n  validateRange,\n  validateDate,\n  composeValidators,\n} from './fieldValidators';\n\n/**\n * Helper function to create validation results\n */\nfunction createValidationResult(\n  isValid: boolean,\n  errors: Record<string, string> = {}\n): ValidationResult {\n  return {\n    isValid,\n    errors,\n  };\n}\n\n/**\n * Consolidated validateField helper function\n * Eliminates duplicate code across all validation schemas\n */\nasync function validateField(\n  errors: Record<string, string>,\n  fieldName: string,\n  value: any,\n  validators: any[],\n  data?: any\n): Promise<void> {\n  for (const validator of validators) {\n    const result = await validator(value, fieldName, data);\n    if (result !== null) {\n      errors[fieldName] = result;\n      break;\n    }\n  }\n}\n\n/**\n * Resident data validation schema\n */\nexport async function residentSchema(\n  data: Partial<ResidentFormState>,\n  context?: ValidationContext\n): Promise<ValidationResult> {\n  const errors: Record<string, string> = {};\n\n  // Validate required fields\n  await validateField(errors, 'first_name', data.first_name, [validateRequired, validateName], data);\n  await validateField(errors, 'last_name', data.last_name, [validateRequired, validateName], data);\n  await validateField(errors, 'birthdate', data.birthdate, [validateRequired, validateDate], data);\n  await validateField(errors, 'sex', data.sex, [validateRequired], data);\n\n  // Validate optional fields\n  if (data.middle_name !== undefined) {\n    await validateField(errors, 'middle_name', data.middle_name, [validateName], data);\n  }\n  if (data.extension_name !== undefined) {\n    await validateField(errors, 'extension_name', data.extension_name, [validateName], data);\n  }\n  if (data.email !== undefined) {\n    await validateField(errors, 'email', data.email, [validateEmail], data);\n  }\n  if (data.mobile_number !== undefined) {\n    await validateField(errors, 'mobile_number', data.mobile_number, [validatePhilippineMobile], data);\n  }\n  if (data.telephone_number !== undefined) {\n    await validateField(errors, 'telephone_number', data.telephone_number, [validateLength(0, 20)], data);\n  }\n  if (data.civil_status !== undefined) {\n    await validateField(errors, 'civil_status', data.civil_status, [validateLength(0, 50)], data);\n  }\n  if (data.citizenship !== undefined) {\n    await validateField(errors, 'citizenship', data.citizenship, [validateLength(0, 50)], data);\n  }\n  if (data.blood_type !== undefined) {\n    await validateField(errors, 'blood_type', data.blood_type, [validateLength(0, 10)], data);\n  }\n  if (data.ethnicity !== undefined) {\n    await validateField(errors, 'ethnicity', data.ethnicity, [validateLength(0, 50)], data);\n  }\n  if (data.religion !== undefined) {\n    await validateField(errors, 'religion', data.religion, [validateLength(0, 50)], data);\n  }\n  if (data.religion_others_specify !== undefined) {\n    await validateField(errors, 'religion_others_specify', data.religion_others_specify, [\n      validateLength(0, 100),\n    ], data);\n  }\n  if (data.height !== undefined) {\n    await validateField(errors, 'height', data.height, [validateRange(50, 300)], data);\n  }\n  if (data.weight !== undefined) {\n    await validateField(errors, 'weight', data.weight, [validateRange(10, 500)], data);\n  }\n  if (data.complexion !== undefined) {\n    await validateField(errors, 'complexion', data.complexion, [validateLength(0, 50)], data);\n  }\n  if (data.birth_place_code !== undefined) {\n    await validateField(errors, 'birth_place_code', data.birth_place_code, [validateLength(0, 20)], data);\n  }\n  if (data.philsys_card_number !== undefined) {\n    await validateField(errors, 'philsys_card_number', data.philsys_card_number, [validatePhilSysNumber], data);\n  }\n  if (data.mother_maiden_first !== undefined) {\n    await validateField(errors, 'mother_maiden_first', data.mother_maiden_first, [validateName], data);\n  }\n  if (data.mother_maiden_middle !== undefined) {\n    await validateField(errors, 'mother_maiden_middle', data.mother_maiden_middle, [validateName], data);\n  }\n  if (data.mother_maiden_last !== undefined) {\n    await validateField(errors, 'mother_maiden_last', data.mother_maiden_last, [validateName], data);\n  }\n  if (data.education_attainment !== undefined) {\n    await validateField(errors, 'education_attainment', data.education_attainment, [validateLength(0, 50)], data);\n  }\n  if (data.is_graduate !== undefined) {\n    if (typeof data.is_graduate !== 'boolean') {\n      errors['is_graduate'] = 'Must be true or false';\n    }\n  }\n  if (data.employment_status !== undefined) {\n    await validateField(errors, 'employment_status', data.employment_status, [validateLength(0, 50)], data);\n  }\n  if (data.occupation_code !== undefined) {\n    await validateField(errors, 'occupation_code', data.occupation_code, [validateLength(0, 20)], data);\n  }\n  if (data.is_voter !== undefined) {\n    if (typeof data.is_voter !== 'boolean') {\n      errors['is_voter'] = 'Must be true or false';\n    }\n  }\n  if (data.is_resident_voter !== undefined) {\n    if (typeof data.is_resident_voter !== 'boolean') {\n      errors['is_resident_voter'] = 'Must be true or false';\n    }\n  }\n  if (data.last_voted_date !== undefined) {\n    await validateField(errors, 'last_voted_date', data.last_voted_date, [validateDate], data);\n  }\n  if (data.household_code !== undefined) {\n    await validateField(errors, 'household_code', data.household_code, [validateLength(0, 50)], data);\n  }\n\n  // Cross-field validations\n  if (data.philsys_card_number && !data.birth_place_code) {\n    errors['birth_place_code'] = 'Birth place code is required when PhilSys number is provided';\n  }\n  if (data.is_voter && !data.last_voted_date) {\n    errors['last_voted_date'] = 'Last voted date is required when voter status is true';\n  }\n\n  return createValidationResult(Object.keys(errors).length === 0, errors);\n}\n\n/**\n * Household data validation schema\n */\nexport async function householdSchema(\n  data: Partial<HouseholdData>,\n  context?: ValidationContext\n): Promise<ValidationResult> {\n  const errors: Record<string, string> = {};\n\n  // Validate required fields\n  await validateField(errors, 'code', data.code, [validateRequired, validateLength(1, 50)], data);\n  await validateField(errors, 'barangay_code', data.barangay_code, [\n    validateRequired,\n    validateLength(1, 20),\n  ], data);\n\n  // Validate optional fields\n  if (data.name !== undefined) {\n    await validateField(errors, 'name', data.name, [validateLength(0, 200)], data);\n  }\n  if (data.house_number !== undefined) {\n    await validateField(errors, 'house_number', data.house_number, [validateLength(0, 50)], data);\n  }\n  if (data.street_id !== undefined) {\n    await validateField(errors, 'street_id', data.street_id, [validateRequired], data);\n  }\n  if (data.subdivision_id !== undefined) {\n    await validateField(errors, 'subdivision_id', data.subdivision_id, [validateLength(0, 50)], data);\n  }\n  if (data.household_head_id !== undefined) {\n    await validateField(errors, 'household_head_id', data.household_head_id, [validateLength(0, 50)], data);\n  }\n\n  return createValidationResult(Object.keys(errors).length === 0, errors);\n}\n\n/**\n * User data validation schema\n */\nexport async function userSchema(\n  data: Record<string, any>,\n  context?: ValidationContext\n): Promise<ValidationResult> {\n  const errors: Record<string, string> = {};\n\n  // Validate required fields\n  await validateField(errors, 'email', data.email, [validateRequired, validateEmail], data);\n  await validateField(errors, 'first_name', data.first_name, [validateRequired, validateName], data);\n  await validateField(errors, 'last_name', data.last_name, [validateRequired, validateName], data);\n  await validateField(errors, 'role', data.role, [validateRequired], data);\n\n  // Validate optional fields\n  if (data.barangay_code !== undefined) {\n    await validateField(errors, 'barangay_code', data.barangay_code, [validateLength(0, 20)], data);\n  }\n  if (data.is_active !== undefined) {\n    if (typeof data.is_active !== 'boolean') {\n      errors['is_active'] = 'Must be true or false';\n    }\n  }\n\n  return createValidationResult(Object.keys(errors).length === 0, errors);\n}\n\n/**\n * Login validation schema\n */\nexport async function loginSchema(\n  data: Partial<LoginFormData>,\n  context?: ValidationContext\n): Promise<ValidationResult> {\n  const errors: Record<string, string> = {};\n\n  // Validate required fields\n  await validateField(errors, 'email', data.email, [validateRequired, validateEmail], data);\n  await validateField(errors, 'password', data.password, [validateRequired, validateLength(1, 100)], data);\n\n  return createValidationResult(Object.keys(errors).length === 0, errors);\n}\n\n/**\n * Password change validation schema\n */\nexport async function passwordChangeSchema(\n  data: Partial<PasswordUpdateRequest>,\n  context?: ValidationContext\n): Promise<ValidationResult> {\n  const errors: Record<string, string> = {};\n\n  // Validate required fields\n  await validateField(errors, 'current_password', data.current_password, [\n    validateRequired,\n    validateLength(1, 100),\n  ], data);\n  await validateField(errors, 'new_password', data.new_password, [\n    validateRequired,\n    validateLength(8, 100),\n  ], data);\n  await validateField(errors, 'confirm_password', data.confirm_password, [\n    validateRequired,\n    validateLength(1, 100),\n  ], data);\n\n  // Password complexity validation\n  if (data.new_password) {\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/;\n    if (!passwordRegex.test(data.new_password)) {\n      errors['new_password'] =\n        'Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character';\n    }\n  }\n\n  // Password match validation\n  if (data.new_password !== data.confirm_password) {\n    errors['confirm_password'] = 'Passwords must match';\n  }\n\n  return createValidationResult(Object.keys(errors).length === 0, errors);\n}\n\n/**\n * Search query validation schema\n */\nexport async function searchQuerySchema(\n  data: { query?: string; filters?: Record<string, unknown>; page?: number; limit?: number },\n  context?: ValidationContext\n): Promise<ValidationResult> {\n  const errors: Record<string, string> = {};\n\n  // Validate required fields\n  await validateField(errors, 'query', data.query, [validateRequired, validateLength(1, 100)], data);\n\n  // Search query pattern validation\n  if (data.query) {\n    const queryPattern = /^[a-zA-Z0-9\\s\\-_.@]*$/;\n    if (!queryPattern.test(data.query)) {\n      errors['query'] = 'Search query contains invalid characters';\n    }\n  }\n\n  // Validate optional fields\n  if (data.filters !== undefined) {\n    if (typeof data.filters !== 'object' || data.filters === null) {\n      errors['filters'] = 'Must be a valid object';\n    }\n  }\n  if (data.page !== undefined) {\n    await validateField(errors, 'page', data.page, [validateRange(1, 1000)], data);\n  }\n  if (data.limit !== undefined) {\n    await validateField(errors, 'limit', data.limit, [validateRange(1, 100)], data);\n  }\n\n  return createValidationResult(Object.keys(errors).length === 0, errors);\n}\n\n/**\n * File upload validation schema\n */\nexport async function fileUploadSchema(\n  data: { fileName?: string; fileSize?: number; fileType?: string },\n  context?: ValidationContext\n): Promise<ValidationResult> {\n  const errors: Record<string, string> = {};\n\n  // Validate required fields\n  await validateField(errors, 'fileName', data.fileName, [validateRequired, validateLength(1, 255)], data);\n  await validateField(errors, 'fileSize', data.fileSize, [\n    validateRequired,\n    validateRange(1, 5 * 1024 * 1024),\n  ], data);\n  await validateField(errors, 'fileType', data.fileType, [validateRequired], data);\n\n  // File name pattern validation\n  if (data.fileName) {\n    const fileNamePattern = /^[a-zA-Z0-9\\s\\-_.]*$/;\n    if (!fileNamePattern.test(data.fileName)) {\n      errors['fileName'] = 'File name contains invalid characters';\n    }\n  }\n\n  // File type pattern validation\n  if (data.fileType) {\n    const fileTypePattern = /^(image\\/(jpeg|jpg|png|gif|webp)|application\\/pdf)$/;\n    if (!fileTypePattern.test(data.fileType)) {\n      errors['fileType'] = 'File type not allowed';\n    }\n  }\n\n  return createValidationResult(Object.keys(errors).length === 0, errors);\n}\n\n/**\n * Validate resident data\n */\nexport async function validateResidentData(\n  data: Partial<ResidentFormState>,\n  context?: ValidationContext\n): Promise<ValidationResult> {\n  return await residentSchema(data, context);\n}\n\n/**\n * Validate household data\n */\nexport async function validateHouseholdData(\n  data: Partial<HouseholdData>,\n  context?: ValidationContext\n): Promise<ValidationResult> {\n  return await householdSchema(data, context);\n}\n\n/**\n * Validate user data\n */\nexport async function validateUserData(\n  data: Record<string, any>,\n  context?: ValidationContext\n): Promise<ValidationResult> {\n  return await userSchema(data, context);\n}\n\n/**\n * Validate login data\n */\nexport async function validateLoginData(\n  data: Partial<LoginFormData>,\n  context?: ValidationContext\n): Promise<ValidationResult> {\n  return await loginSchema(data, context);\n}\n\n/**\n * Validate password change data\n */\nexport async function validatePasswordChangeData(\n  data: Partial<PasswordUpdateRequest>,\n  context?: ValidationContext\n): Promise<ValidationResult> {\n  return await passwordChangeSchema(data, context);\n}\n\n/**\n * Validate search query data\n */\nexport async function validateSearchQueryData(\n  data: { query?: string; filters?: Record<string, unknown>; page?: number; limit?: number },\n  context?: ValidationContext\n): Promise<ValidationResult> {\n  return await searchQuerySchema(data, context);\n}\n\n/**\n * Validate file upload data\n */\nexport async function validateFileUploadData(\n  data: { fileName?: string; fileSize?: number; fileType?: string },\n  context?: ValidationContext\n): Promise<ValidationResult> {\n  return await fileUploadSchema(data, context);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/validation/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/validation/utilities.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ValidationResult' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'warnings' is assigned a value but never used. Allowed unused args must match /^_/u.","line":83,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used. Allowed unused args must match /^_/u.","line":84,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":7},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1918,1921],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1918,1921],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2167,2170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2167,2170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2495,2498],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2495,2498],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validationResult' is defined but never used. Allowed unused args must match /^_/u.","line":163,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":163,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":235,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5282,5285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5282,5285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":235,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5292,5295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5292,5295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":260,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":260,"endColumn":21},{"ruleId":"import/order","severity":1,"message":"`react` import should occur before type import of `@/types/validation`","line":291,"column":1,"nodeType":"ImportDeclaration","endLine":291,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'config' is assigned a value but never used. Allowed unused args must match /^_/u.","line":316,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":316,"endColumn":42},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":316,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":316,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7087,7090],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7087,7090],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":385,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":385,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8606,8609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8606,8609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" is called in function \"createFormValidationExecutor\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":388,"column":10,"nodeType":"Identifier","endLine":388,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":409,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":409,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9168,9171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9168,9171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" is called in function \"createFieldValidationExecutor\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":413,"column":10,"nodeType":"Identifier","endLine":413,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":414,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":414,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9330,9333],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9330,9333],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":437,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":437,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9843,9846],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9843,9846],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":442,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":442,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9982,9985],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9982,9985],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":449,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":449,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":463,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":463,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10504,10507],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10504,10507],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":465,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":465,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10592,10595],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10592,10595],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":470,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":470,"endColumn":23}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Validation Utilities\n * Helper functions for validation operations\n */\n\nimport type {\n  ValidationResult,\n  FieldValidationResult,\n  ValidationError,\n  SimpleValidationResult,\n} from '@/types/validation';\nimport { debounce } from '@/utils/async-utils';\n\n/**\n * Check if email is valid\n */\nexport function isValidEmail(email: string): boolean {\n  if (!email || typeof email !== 'string') {\n    return false;\n  }\n\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\n/**\n * Check if Philippine mobile number is valid\n */\nexport function isValidPhilippineMobile(mobile: string): boolean {\n  if (!mobile || typeof mobile !== 'string') {\n    return false;\n  }\n\n  const cleaned = mobile.replace(/\\D/g, '');\n  return /^09\\d{9}$/.test(cleaned) || /^639\\d{9}$/.test(cleaned);\n}\n\n/**\n * Check if PhilSys format is valid\n */\nexport function isValidPhilSysFormat(philsys: string): boolean {\n  if (!philsys || typeof philsys !== 'string') {\n    return false;\n  }\n\n  return /^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/.test(philsys);\n}\n\n/**\n * Check if name is valid (contains only allowed characters)\n */\nexport function isValidName(name: string): boolean {\n  if (!name || typeof name !== 'string') {\n    return false;\n  }\n\n  return /^[a-zA-Z\\s\\-'\\.]*$/.test(name) && name.trim().length > 0;\n}\n\n/**\n * Check if age is valid\n */\nexport function isValidAge(age: number): boolean {\n  return typeof age === 'number' && Number.isInteger(age) && age >= 0 && age <= 150;\n}\n\n/**\n * Format validation error for display\n */\nexport function formatValidationError(error: ValidationError): string {\n  const field = error.field.replace(/([A-Z])/g, ' $1').toLowerCase();\n  return `${field}: ${error.message}`;\n}\n\n/**\n * Create a validation result object\n */\nexport function createValidationResult(\n  isValid: boolean,\n  errors: Record<string, string> = {},\n  warnings: Record<string, string> = {},\n  data?: any\n): SimpleValidationResult {\n  return {\n    isValid,\n    errors,\n  };\n}\n\n/**\n * Create a field validation result object\n */\nexport function createFieldValidationResult(\n  isValid: boolean,\n  error?: string,\n  warning?: string,\n  sanitizedValue?: any\n): FieldValidationResult {\n  return {\n    isValid,\n    error,\n    warning,\n    sanitizedValue,\n  };\n}\n\n/**\n * Merge multiple validation results\n */\nexport function mergeValidationResults(\n  ...results: SimpleValidationResult[]\n): SimpleValidationResult {\n  const mergedErrors: Record<string, string> = {};\n  let mergedData: any = {};\n\n  for (const result of results) {\n    Object.assign(mergedErrors, result.errors);\n    if ('data' in result && result.data) {\n      mergedData = { ...mergedData, ...result.data };\n    }\n  }\n\n  return createValidationResult(\n    Object.keys(mergedErrors).length === 0,\n    mergedErrors,\n    {},\n    mergedData\n  );\n}\n\n/**\n * Extract field names from validation errors\n */\nexport function getErrorFields(validationResult: SimpleValidationResult): string[] {\n  return Object.keys(validationResult.errors);\n}\n\n/**\n * Check if validation result has specific field error\n */\nexport function hasFieldError(\n  validationResult: SimpleValidationResult,\n  fieldName: string\n): boolean {\n  return fieldName in validationResult.errors;\n}\n\n/**\n * Get error message for specific field\n */\nexport function getFieldError(\n  validationResult: SimpleValidationResult,\n  fieldName: string\n): string | undefined {\n  return validationResult.errors[fieldName];\n}\n\n/**\n * Check if validation result has warnings\n */\nexport function hasWarnings(validationResult: SimpleValidationResult): boolean {\n  return false; // SimpleValidationResult doesn't support warnings\n}\n\n/**\n * Convert validation result to error array\n */\nexport function validationResultToErrors(\n  validationResult: SimpleValidationResult\n): ValidationError[] {\n  return Object.entries(validationResult.errors).map(([field, message]) => ({\n    field,\n    message: message,\n    code: 'VALIDATION_ERROR',\n  }));\n}\n\n/**\n * Filter out empty validation errors\n */\nexport function filterEmptyErrors(errors: Record<string, string>): Record<string, string> {\n  const filtered: Record<string, string> = {};\n\n  for (const [field, message] of Object.entries(errors)) {\n    if (message && message.trim()) {\n      filtered[field] = message;\n    }\n  }\n\n  return filtered;\n}\n\n/**\n * Normalize field name for display\n */\nexport function normalizeFieldName(fieldName: string): string {\n  return fieldName\n    .replace(/([A-Z])/g, ' $1')\n    .replace(/^./, str => str.toUpperCase())\n    .trim();\n}\n\n/**\n * Create validation summary\n */\nexport function createValidationSummary(validationResult: SimpleValidationResult): {\n  isValid: boolean;\n  errorCount: number;\n  warningCount: number;\n  summary: string;\n} {\n  const errorCount = Object.keys(validationResult.errors).length;\n  const warningCount = 0; // SimpleValidationResult doesn't support warnings\n\n  let summary: string;\n  if (validationResult.isValid) {\n    summary = 'Valid';\n  } else {\n    summary = `${errorCount} error${errorCount === 1 ? '' : 's'}`;\n  }\n\n  return {\n    isValid: validationResult.isValid,\n    errorCount,\n    warningCount,\n    summary,\n  };\n}\n\n/**\n * Debounce validation function (uses centralized debounce utility)\n */\nexport function debounceValidation<T extends (...args: any[]) => any>(\n  validationFn: T,\n  delay: number = 300\n): T {\n  return debounce(validationFn, delay) as T;\n}\n\n/**\n * Create validation pipeline\n */\nexport function createValidationPipeline<T>(\n  ...validators: ((data: T) => SimpleValidationResult | Promise<SimpleValidationResult>)[]\n): (data: T) => Promise<SimpleValidationResult> {\n  return async (data: T) => {\n    const results: SimpleValidationResult[] = [];\n\n    for (const validator of validators) {\n      try {\n        const result = await validator(data);\n        results.push(result);\n\n        // Stop on first validation failure if desired\n        if (!result.isValid) {\n          break;\n        }\n      } catch (error) {\n        results.push(\n          createValidationResult(false, {\n            _pipeline: 'Validation pipeline error',\n          })\n        );\n        break;\n      }\n    }\n\n    return mergeValidationResults(...results);\n  };\n}\n\n/**\n * Validate with timeout\n */\nexport async function validateWithTimeout<T>(\n  validationFn: () => Promise<T>,\n  timeoutMs: number = 5000\n): Promise<T> {\n  return Promise.race([\n    validationFn(),\n    new Promise<T>((_, reject) => {\n      setTimeout(() => reject(new Error('Validation timeout')), timeoutMs);\n    }),\n  ]);\n}\n\n// React Hook-based validation utilities (moved from validation-utilities.ts)\n\nimport { useState, useCallback } from 'react';\n\n/**\n * Validation state interface for React hooks\n */\nexport interface ValidationState {\n  errors: Record<string, string>;\n  isValid: boolean;\n  hasValidated: boolean;\n}\n\n/**\n * Create initial validation state\n */\nexport function createValidationState(): ValidationState {\n  return {\n    errors: {},\n    isValid: true,\n    hasValidated: false,\n  };\n}\n\n/**\n * Validation state management hook\n */\nexport function useValidationState(config: any = {}) {\n  const [state, setState] = useState<ValidationState>(createValidationState);\n\n  const setErrors = useCallback((errors: Record<string, string>) => {\n    const isValid = Object.keys(errors).length === 0;\n\n    setState({\n      errors,\n      isValid,\n      hasValidated: true,\n    });\n  }, []);\n\n  const clearErrors = useCallback(() => {\n    setState(createValidationState());\n  }, []);\n\n  const setFieldError = useCallback((field: string, error: string) => {\n    setState(prev => ({\n      ...prev,\n      errors: { ...prev.errors, [field]: error },\n      isValid: false,\n      hasValidated: true,\n    }));\n  }, []);\n\n  const clearFieldError = useCallback((field: string) => {\n    setState(prev => {\n      const newErrors = { ...prev.errors };\n      delete newErrors[field];\n      const isValid = Object.keys(newErrors).length === 0;\n\n      return {\n        errors: newErrors,\n        isValid,\n        hasValidated: prev.hasValidated,\n      };\n    });\n  }, []);\n\n  const getFieldError = useCallback(\n    (field: string): string | undefined => {\n      return state.errors[field];\n    },\n    [state.errors]\n  );\n\n  const hasFieldError = useCallback(\n    (field: string): boolean => {\n      return Boolean(state.errors[field]);\n    },\n    [state.errors]\n  );\n\n  return {\n    ...state,\n    setErrors,\n    clearErrors,\n    setFieldError,\n    clearFieldError,\n    getFieldError,\n    hasFieldError,\n  };\n}\n\n/**\n * Create validation executor for forms\n */\nexport function createFormValidationExecutor<T>(\n  validateFn: any,\n  setErrors: (errors: Record<string, string>) => void\n) {\n  return useCallback(\n    (formData: T): SimpleValidationResult => {\n      const result = validateFn(formData);\n\n      const normalizedResult: SimpleValidationResult = {\n        isValid: result.isValid || result.success === true,\n        errors: result.errors || {},\n      };\n\n      setErrors(normalizedResult.errors);\n\n      return normalizedResult;\n    },\n    [validateFn, setErrors]\n  );\n}\n\n/**\n * Create field validation executor\n */\nexport function createFieldValidationExecutor(\n  validateFn: any,\n  setFieldError: (field: string, error: string) => void,\n  clearFieldError: (field: string) => void\n) {\n  return useCallback(\n    (fieldName: string, value: any): FieldValidationResult => {\n      const result = validateFn(fieldName, value);\n\n      if (result.isValid) {\n        clearFieldError(fieldName);\n      } else if (result.error) {\n        setFieldError(fieldName, result.error);\n      }\n\n      return result;\n    },\n    [validateFn, setFieldError, clearFieldError]\n  );\n}\n\n/**\n * Async validation utilities\n */\nexport const asyncValidationUtils = {\n  /**\n   * Create debounced async validator\n   */\n  createDebouncedAsyncValidator: (\n    asyncValidator: (value: any) => Promise<FieldValidationResult>,\n    delay = 500\n  ) => {\n    let timeoutId: NodeJS.Timeout;\n\n    return (fieldName: string, value: any, onResult: (result: FieldValidationResult) => void) => {\n      clearTimeout(timeoutId);\n\n      timeoutId = setTimeout(async () => {\n        try {\n          const result = await asyncValidator(value);\n          onResult(result);\n        } catch (error) {\n          onResult({\n            isValid: false,\n            error: 'Validation failed',\n          });\n        }\n      }, delay);\n    };\n  },\n\n  /**\n   * Create batch async validator\n   */\n  createBatchAsyncValidator: (\n    asyncValidators: Record<string, (value: any) => Promise<FieldValidationResult>>\n  ) => {\n    return async (data: Record<string, any>): Promise<Record<string, string>> => {\n      const validationPromises = Object.entries(asyncValidators).map(async ([field, validator]) => {\n        try {\n          const result = await validator(data[field]);\n          return [field, result.error] as const;\n        } catch (error) {\n          return [field, 'Validation failed'] as const;\n        }\n      });\n\n      const results = await Promise.all(validationPromises);\n      const errors: Record<string, string> = {};\n\n      results.forEach(([field, error]) => {\n        if (error) {\n          errors[field] = error;\n        }\n      });\n\n      return errors;\n    };\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/lib/validation/validation.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":295,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":295,"endColumn":14,"suggestions":[{"fix":{"range":[7901,7985],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from 'zod';\n\n/**\n * Comprehensive server-side validation schemas\n * These provide security through input validation and sanitization\n */\n\n// Common validation patterns - Updated for RBI v3 compatibility\nconst PHONE_REGEX = /^(\\+63|0)?9[0-9]{9}$/;\nconst EMAIL_REGEX = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\nconst PHILSYS_REGEX = /^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/;\nconst NAME_REGEX = /^[a-zA-Z\\s\\-'\\.]+$/;\nconst HOUSEHOLD_CODE_REGEX = /^\\d{9}-\\d{4}-\\d{4}-\\d{4}$/;\n\n// Security: Sanitize string inputs\nfunction sanitizeString(str: string): string {\n  return str\n    .trim()\n    .replace(/[<>\\\"'&]/g, '') // Remove potential XSS characters\n    .substring(0, 255); // Limit length to prevent DoS\n}\n\n// Security: Validate and sanitize name fields\nconst nameSchema = z\n  .string()\n  .min(1, 'Name is required')\n  .max(100, 'Name must be less than 100 characters')\n  .regex(NAME_REGEX, 'Name contains invalid characters')\n  .transform(sanitizeString);\n\n// Personal Information Schema\nexport const personalInfoSchema = z.object({\n  firstName: nameSchema,\n  middleName: z\n    .string()\n    .max(100)\n    .optional()\n    .transform(val => (val && val.trim() ? sanitizeString(val) : undefined)),\n  lastName: nameSchema,\n  extensionName: z\n    .string()\n    .max(20)\n    .optional()\n    .transform(val => (val ? sanitizeString(val) : undefined)),\n  birthdate: z.string().refine(date => {\n    const parsedDate = new Date(date);\n    const now = new Date();\n    const minDate = new Date('1900-01-01');\n    return parsedDate <= now && parsedDate >= minDate;\n  }, 'Invalid birthdate'),\n  sex: z.enum(['male', 'female']),\n  civilStatus: z\n    .enum([\n      'single',\n      'married',\n      'widowed',\n      'divorced',\n      'separated',\n      'annulled',\n      'registered_partnership',\n      'live_in',\n      'others', // Added for RBI v3 compatibility\n    ])\n    .default('single'),\n  citizenship: z.enum(['filipino', 'dual_citizen', 'foreign_national']).default('filipino'),\n});\n\n// Contact Information Schema - Made optional for RBI v3\nexport const contactInfoSchema = z.object({\n  mobileNumber: z\n    .string()\n    .optional()\n    .refine(\n      phone => !phone || phone.trim() === '' || PHONE_REGEX.test(phone),\n      'Invalid Philippine mobile number format'\n    )\n    .transform(phone => (phone && phone.trim() !== '' ? phone.replace(/[^\\d]/g, '') : undefined)), // Sanitize to numbers only\n  telephoneNumber: z\n    .string()\n    .regex(/^[0-9\\-\\+\\(\\)\\s]*$/, 'Invalid telephone number format')\n    .optional()\n    .transform(val => (val ? val.replace(/[^\\d\\-\\+\\(\\)\\s]/g, '') : undefined)),\n  email: z\n    .string()\n    .regex(EMAIL_REGEX, 'Invalid email format')\n    .max(255, 'Email too long')\n    .optional()\n    .transform(val => (val ? sanitizeString(val.toLowerCase()) : undefined)),\n});\n\n// PhilSys Validation Schema\nexport const philsysSchema = z.object({\n  philsysCardNumber: z\n    .string()\n    .regex(PHILSYS_REGEX, 'PhilSys card number must be in format: 1234-5678-9012-3456')\n    .optional()\n    .transform(val => (val ? val.replace(/[^\\d\\-]/g, '') : undefined)), // Sanitize format\n});\n\n// Education Schema\nexport const educationSchema = z.object({\n  educationLevel: z\n    .enum([\n      'no_formal_education',\n      'elementary',\n      'high_school',\n      'college',\n      'post_graduate',\n      'vocational',\n      'graduate',\n      'undergraduate',\n    ])\n    .optional(),\n  educationStatus: z\n    .enum(['currently_studying', 'not_studying', 'graduated', 'dropped_out'])\n    .optional(),\n});\n\n// Employment Schema\nexport const employmentSchema = z.object({\n  employmentStatus: z\n    .enum([\n      'employed',\n      'unemployed',\n      'underemployed',\n      'self_employed',\n      'student',\n      'retired',\n      'homemaker',\n      'unable_to_work',\n      'looking_for_work',\n      'not_in_labor_force',\n    ])\n    .default('not_in_labor_force'),\n  occupationCode: z\n    .string()\n    .max(10)\n    .optional()\n    .transform(val => (val ? sanitizeString(val) : undefined)),\n});\n\n// Health Information Schema\nexport const healthInfoSchema = z.object({\n  bloodType: z\n    .enum(['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-', 'unknown'])\n    .default('unknown'),\n  height: z.number().min(50).max(300).optional(), // Height in cm\n  weight: z.number().min(1).max(500).optional(), // Weight in kg\n  complexion: z\n    .string()\n    .max(50)\n    .optional()\n    .transform(val => (val ? sanitizeString(val) : undefined)),\n});\n\n// Demographics Schema\nexport const demographicsSchema = z.object({\n  ethnicity: z\n    .enum([\n      'tagalog',\n      'cebuano',\n      'ilocano',\n      'bisaya',\n      'hiligaynon',\n      'bicolano',\n      'waray',\n      'kapampangan',\n      'pangasinan',\n      'maranao',\n      'maguindanao',\n      'tausug',\n      'indigenous_group',\n      'mixed_heritage',\n      'other',\n      'not_reported',\n    ])\n    .default('not_reported'),\n  religion: z\n    .enum([\n      'roman_catholic',\n      'protestant',\n      'iglesia_ni_cristo',\n      'islam',\n      'buddhism',\n      'judaism',\n      'hinduism',\n      'indigenous_beliefs',\n      'other',\n      'none',\n    ])\n    .default('other'),\n});\n\n// Voting Information Schema\nexport const votingInfoSchema = z.object({\n  voterRegistrationStatus: z.boolean().default(false),\n  residentVoterStatus: z.boolean().default(false),\n  voterIdNumber: z\n    .string()\n    .max(20)\n    .optional()\n    .transform(val => (val ? sanitizeString(val) : undefined)),\n  lastVotedYear: z\n    .string()\n    .regex(/^\\d{4}$/, 'Year must be 4 digits')\n    .optional(),\n});\n\n// Household Schema\nexport const householdSchema = z.object({\n  householdCode: z.string().regex(HOUSEHOLD_CODE_REGEX, 'Invalid household code format').optional(),\n  householdNumber: z\n    .string()\n    .max(50)\n    .optional()\n    .transform(val => (val ? sanitizeString(val) : undefined)),\n  streetName: z\n    .string()\n    .max(200)\n    .optional()\n    .transform(val => (val ? sanitizeString(val) : undefined)),\n  houseNumber: z\n    .string()\n    .max(50)\n    .optional()\n    .transform(val => (val ? sanitizeString(val) : undefined)),\n  subdivision: z\n    .string()\n    .max(100)\n    .optional()\n    .transform(val => (val ? sanitizeString(val) : undefined)),\n});\n\n// Complete Resident Validation Schema\nexport const residentSchema = personalInfoSchema\n  .merge(contactInfoSchema)\n  .merge(philsysSchema)\n  .merge(educationSchema)\n  .merge(employmentSchema)\n  .merge(healthInfoSchema)\n  .merge(demographicsSchema)\n  .merge(votingInfoSchema)\n  .merge(householdSchema);\n\n// Server-side validation function\nexport async function validateResidentData(data: unknown) {\n  try {\n    const validatedData = await residentSchema.parseAsync(data);\n    return {\n      success: true,\n      data: validatedData,\n      errors: null,\n    };\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return {\n        success: false,\n        data: null,\n        errors: error.issues.map(err => ({\n          field: err.path.join('.'),\n          message: err.message,\n        })),\n      };\n    }\n\n    return {\n      success: false,\n      data: null,\n      errors: [{ field: 'general', message: 'Validation failed' }],\n    };\n  }\n}\n\n// PSGC Code Validation\nexport const psgcCodeSchema = z.string().regex(/^\\d{9}$/, 'PSGC code must be 9 digits');\n\n// File Upload Validation\nexport const fileUploadSchema = z.object({\n  file: z\n    .any()\n    .refine(\n      file => file?.size <= 5 * 1024 * 1024, // 5MB limit\n      'File size must be less than 5MB'\n    )\n    .refine(\n      file => ['image/jpeg', 'image/png', 'image/gif', 'application/pdf'].includes(file?.type),\n      'File must be JPEG, PNG, GIF, or PDF'\n    ),\n});\n\n// Security: Rate limiting validation\nexport function validateRateLimit(identifier: string, maxRequests: number = 100): boolean {\n  // This would connect to a rate limiting service in production\n  // For now, return true but log the attempt\n  console.log(`[RATE_LIMIT] Request from ${identifier} - Limit: ${maxRequests}/hour`);\n  return true;\n}\n\n// Security: Input sanitization for search queries\nexport function sanitizeSearchQuery(query: string): string {\n  return query\n    .trim()\n    .replace(/[<>\\\"'&%]/g, '') // Remove XSS and SQL injection characters\n    .substring(0, 100); // Limit length\n}\n\n// Security: Validate user permissions\nexport function validateUserPermission(userRole: string, requiredPermission: string): boolean {\n  const rolePermissions: Record<string, string[]> = {\n    super_admin: ['all'],\n    barangay_admin: ['residents:crud', 'households:crud', 'settings:manage'],\n    clerk: ['residents:crud', 'households:crud'],\n    resident: ['residents:read_own'],\n  };\n\n  const permissions = rolePermissions[userRole] || [];\n  return permissions.includes('all') || permissions.includes(requiredPermission);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/providers/AppProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/providers/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/providers/QueryProvider.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'persister' is assigned a value but never used.","line":56,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * React Query Provider\n *\n * Provides data caching and synchronization for the entire app with persistent storage\n */\n\n'use client';\n\nimport { createSyncStoragePersister } from '@tanstack/query-sync-storage-persister';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\nimport { PersistQueryClientProvider } from '@tanstack/react-query-persist-client';\nimport { useState, useEffect } from 'react';\n\n// Custom hook to handle client-side mounting\nfunction useIsClient() {\n  const [isClient, setIsClient] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  return isClient;\n}\n\nexport default function QueryProvider({ children }: { children: React.ReactNode }) {\n  const isClient = useIsClient();\n\n  const [queryClient] = useState(\n    () =>\n      new QueryClient({\n        defaultOptions: {\n          queries: {\n            // Cache data for 30 minutes - longer stale time\n            staleTime: 30 * 60 * 1000,\n            // Keep in cache for 1 hour - much longer\n            gcTime: 60 * 60 * 1000,\n            // Retry failed requests 1 time\n            retry: 1,\n            // Don't refetch automatically to preserve cached data\n            refetchOnWindowFocus: false,\n            refetchOnReconnect: false,\n            refetchOnMount: false,\n            // Use cache-first strategy\n            networkMode: 'always',\n          },\n          mutations: {\n            // Retry failed mutations once\n            retry: 1,\n          },\n        },\n      })\n  );\n\n  // Create persister for localStorage (only on client side after hydration)\n  const [persister] = useState(() => {\n    // Always return undefined on server/initial render to avoid hydration mismatch\n    return undefined;\n  });\n\n  // Create client-side persister after hydration\n  const [clientPersister, setClientPersister] = useState<\n    ReturnType<typeof createSyncStoragePersister> | undefined\n  >(undefined);\n\n  useEffect(() => {\n    if (isClient && !clientPersister) {\n      setClientPersister(\n        createSyncStoragePersister({\n          storage: window.localStorage,\n          key: 'citizenly-query-cache',\n          serialize: JSON.stringify,\n          deserialize: JSON.parse,\n        })\n      );\n    }\n  }, [isClient, clientPersister]);\n\n  // If we have a client-side persister, use PersistQueryClientProvider, otherwise use regular provider\n  if (isClient && clientPersister) {\n    return (\n      <PersistQueryClientProvider\n        client={queryClient}\n        persistOptions={{\n          persister: clientPersister,\n          // Persist immediately and restore immediately\n          maxAge: 60 * 60 * 1000, // 1 hour\n          buster: '',\n        }}\n      >\n        {children}\n        {/* Only show devtools in development */}\n        {process.env.NODE_ENV === 'development' && <ReactQueryDevtools initialIsOpen={false} />}\n      </PersistQueryClientProvider>\n    );\n  }\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n      {/* Only show devtools in development */}\n      {process.env.NODE_ENV === 'development' && <ReactQueryDevtools initialIsOpen={false} />}\n    </QueryClientProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/providers/components/LastVisitedTracker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/providers/components/client-providers/ClientProviders.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/providers/components/client-providers/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/providers/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/providers/components/providers/Providers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/providers/components/providers/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/providers/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/services/addressService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CacheKeys' is defined but never used.","line":12,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'digitsOnly' is assigned a value but never used.","line":322,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":322,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Address Service\n * CONSOLIDATED - Address lookup and geographic data services\n * Consolidates lib/utilities/address-lookup.ts functionality\n */\n\nimport { supabase } from '@/lib/data/supabase';\nimport type { AddressLabels, HouseholdTypeLabels, CompleteAddress } from '@/types/addresses';\n\nimport { createLogger } from '../lib/config/environment';\n\nimport { cacheService, CacheKeys, CacheTags } from './cacheService';\n\nconst logger = createLogger('AddressService');\n\n/**\n * Address Service Class\n * Consolidated address lookup and geographic utilities\n */\nexport class AddressService {\n  /**\n   * Lookup address labels from their codes/IDs with caching\n   */\n  async lookupAddressLabels(addressData: {\n    regionCode?: string;\n    provinceCode?: string;\n    cityMunicipalityCode?: string;\n    barangayCode?: string;\n    streetId?: string;\n    subdivisionId?: string;\n  }): Promise<AddressLabels> {\n    const cacheKey = `address-labels:${JSON.stringify(addressData)}`;\n\n    return await cacheService.getOrSet(\n      cacheKey,\n      async () => {\n        const labels: AddressLabels = {};\n\n        try {\n          // Batch lookup for better performance\n          const lookupPromises = [];\n\n          // Lookup region\n          if (addressData.regionCode) {\n            lookupPromises.push(\n              supabase\n                .from('psgc_regions')\n                .select('name')\n                .eq('code', addressData.regionCode)\n                .single()\n                .then(({ data }) => {\n                  if (data) labels.regionLabel = data.name;\n                })\n            );\n          }\n\n          // Lookup province\n          if (addressData.provinceCode) {\n            lookupPromises.push(\n              supabase\n                .from('psgc_provinces')\n                .select('name')\n                .eq('code', addressData.provinceCode)\n                .single()\n                .then(({ data }) => {\n                  if (data) labels.provinceLabel = data.name;\n                })\n            );\n          }\n\n          // Lookup city/municipality\n          if (addressData.cityMunicipalityCode) {\n            lookupPromises.push(\n              supabase\n                .from('psgc_cities_municipalities')\n                .select('name')\n                .eq('code', addressData.cityMunicipalityCode)\n                .single()\n                .then(({ data }) => {\n                  if (data) labels.cityLabel = data.name;\n                })\n            );\n          }\n\n          // Lookup barangay\n          if (addressData.barangayCode) {\n            lookupPromises.push(\n              supabase\n                .from('psgc_barangays')\n                .select('name')\n                .eq('code', addressData.barangayCode)\n                .single()\n                .then(({ data }) => {\n                  if (data) labels.barangayLabel = data.name;\n                })\n            );\n          }\n\n          // Lookup street\n          if (addressData.streetId) {\n            lookupPromises.push(\n              supabase\n                .from('geo_streets')\n                .select('name')\n                .eq('id', addressData.streetId)\n                .single()\n                .then(({ data }) => {\n                  if (data) labels.streetLabel = data.name;\n                })\n            );\n          }\n\n          // Lookup subdivision\n          if (addressData.subdivisionId) {\n            lookupPromises.push(\n              supabase\n                .from('geo_subdivisions')\n                .select('name')\n                .eq('id', addressData.subdivisionId)\n                .single()\n                .then(({ data }) => {\n                  if (data) labels.subdivisionLabel = data.name;\n                })\n            );\n          }\n\n          await Promise.all(lookupPromises);\n        } catch (error) {\n          logger.warn('Error looking up address labels:', error);\n        }\n\n        return labels;\n      },\n      {\n        ttl: 300000, // 5 minutes\n        tags: [CacheTags.ADDRESSES],\n      }\n    );\n  }\n\n  /**\n   * Lookup household type labels with enum mapping\n   */\n  lookupHouseholdTypeLabels(householdData: {\n    householdType?: string;\n    tenureStatus?: string;\n    householdUnit?: string;\n    householdHeadPosition?: string;\n  }): HouseholdTypeLabels {\n    const labels: HouseholdTypeLabels = {};\n\n    // Static mappings - no need for database lookup\n    const householdTypeMap: Record<string, string> = {\n      nuclear: 'Nuclear Family',\n      single_parent: 'Single Parent',\n      extended: 'Extended Family',\n      childless: 'Childless',\n      one_person: 'One Person',\n      non_family: 'Non-Family',\n      other: 'Other',\n    };\n\n    const tenureStatusMap: Record<string, string> = {\n      owned: 'Owned',\n      owned_with_mortgage: 'Owned with Mortgage',\n      rented: 'Rented',\n      occupied_for_free: 'Occupied for Free',\n      occupied_without_consent: 'Occupied without Consent',\n      others: 'Others',\n    };\n\n    const householdUnitMap: Record<string, string> = {\n      single_house: 'Single House',\n      duplex: 'Duplex',\n      apartment: 'Apartment',\n      townhouse: 'Townhouse',\n      condominium: 'Condominium',\n      boarding_house: 'Boarding House',\n      institutional: 'Institutional',\n      makeshift: 'Makeshift',\n      others: 'Others',\n    };\n\n    const householdHeadPositionMap: Record<string, string> = {\n      father: 'Father',\n      mother: 'Mother',\n      son: 'Son',\n      daughter: 'Daughter',\n      grandmother: 'Grandmother',\n      grandfather: 'Grandfather',\n      father_in_law: 'Father-in-law',\n      mother_in_law: 'Mother-in-law',\n      brother_in_law: 'Brother-in-law',\n      sister_in_law: 'Sister-in-law',\n      spouse: 'Spouse',\n      sibling: 'Sibling',\n      guardian: 'Guardian',\n      ward: 'Ward',\n      other: 'Other',\n    };\n\n    if (householdData.householdType) {\n      labels.householdTypeLabel =\n        householdTypeMap[householdData.householdType] || householdData.householdType;\n    }\n\n    if (householdData.tenureStatus) {\n      labels.tenureStatusLabel =\n        tenureStatusMap[householdData.tenureStatus] || householdData.tenureStatus;\n    }\n\n    if (householdData.householdUnit) {\n      labels.householdUnitLabel =\n        householdUnitMap[householdData.householdUnit] || householdData.householdUnit;\n    }\n\n    if (householdData.householdHeadPosition) {\n      labels.householdHeadPositionLabel =\n        householdHeadPositionMap[householdData.householdHeadPosition] ||\n        householdData.householdHeadPosition;\n    }\n\n    return labels;\n  }\n\n  /**\n   * Lookup household head name from residents table with caching\n   */\n  async lookupHouseholdHeadLabel(householdHeadId?: string): Promise<string | undefined> {\n    if (!householdHeadId) return undefined;\n\n    const cacheKey = `household-head:${householdHeadId}`;\n\n    return await cacheService.getOrSet(\n      cacheKey,\n      async () => {\n        try {\n          const { data: resident } = await supabase\n            .from('residents')\n            .select('first_name, middle_name, last_name, extension_name')\n            .eq('id', householdHeadId)\n            .single();\n\n          if (resident) {\n            return [\n              resident.first_name,\n              resident.middle_name,\n              resident.last_name,\n              resident.extension_name,\n            ]\n              .filter(Boolean)\n              .join(' ');\n          }\n        } catch (error) {\n          logger.warn('Error looking up household head:', error);\n        }\n\n        return undefined;\n      },\n      {\n        ttl: 300000, // 5 minutes\n        tags: [CacheTags.RESIDENTS, CacheTags.HOUSEHOLDS],\n      }\n    );\n  }\n\n  /**\n   * Format complete address from components\n   */\n  formatFullAddress(address: Partial<CompleteAddress>): string {\n    if (!address) return '';\n\n    const parts = [\n      address.barangay_name,\n      address.city_municipality_name,\n      address.province_name,\n      address.region_name,\n    ].filter(Boolean);\n\n    return parts.join(', ') || '';\n  }\n\n  /**\n   * Format barangay display name\n   */\n  formatBarangayName(name: string): string {\n    if (!name) return '';\n\n    // Add \"Barangay\" prefix if not already present\n    if (name.toLowerCase().startsWith('barangay ')) {\n      return name;\n    }\n\n    return `Barangay ${name}`;\n  }\n\n  /**\n   * Format city/municipality display name\n   */\n  formatCityName(name: string, type: string): string {\n    if (!name) return '';\n\n    const cityType = type?.toLowerCase();\n\n    if (cityType === 'city' && !name.toLowerCase().includes('city')) {\n      return `${name} City`;\n    }\n\n    if (cityType === 'municipality' && !name.toLowerCase().includes('municipality')) {\n      return `Municipality of ${name}`;\n    }\n\n    return name;\n  }\n\n  /**\n   * Validate PSGC code format\n   */\n  isValidPsgcCode(code: string, level?: 'region' | 'province' | 'city' | 'barangay'): boolean {\n    if (!code) return false;\n\n    const digitsOnly = code.replace(/\\D/g, '');\n    const detectedLevel = this.getPsgcLevel(code);\n\n    if (level && detectedLevel !== level) {\n      return false;\n    }\n\n    return detectedLevel !== 'unknown';\n  }\n\n  /**\n   * Extract PSGC level from code length\n   */\n  getPsgcLevel(code: string): 'region' | 'province' | 'city' | 'barangay' | 'unknown' {\n    if (!code) return 'unknown';\n\n    const length = code.replace(/\\D/g, '').length;\n\n    switch (length) {\n      case 2:\n        return 'region';\n      case 4:\n        return 'province';\n      case 6:\n        return 'city';\n      case 9:\n        return 'barangay';\n      default:\n        return 'unknown';\n    }\n  }\n\n  /**\n   * Extract parent codes from PSGC code\n   */\n  extractParentCodes(barangayCode: string): {\n    regionCode: string;\n    provinceCode: string;\n    cityCode: string;\n  } {\n    if (!barangayCode || barangayCode.length < 9) {\n      return { regionCode: '', provinceCode: '', cityCode: '' };\n    }\n\n    const digits = barangayCode.replace(/\\D/g, '');\n\n    return {\n      regionCode: digits.substring(0, 2),\n      provinceCode: digits.substring(0, 4),\n      cityCode: digits.substring(0, 6),\n    };\n  }\n\n  /**\n   * Check if address is in Metro Manila\n   */\n  isMetroManilaAddress(address: Partial<CompleteAddress>): boolean {\n    if (!address.region_code) return false;\n\n    // NCR (National Capital Region) code\n    return address.region_code === '13' || address.region_code === '130000000';\n  }\n\n  /**\n   * Clear address-related caches\n   */\n  clearCache(): void {\n    cacheService.invalidateByTag(CacheTags.ADDRESSES);\n  }\n}\n\n// Export singleton instance\nexport const addressService = new AddressService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/services/authService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/services/base-repository.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1572,1575],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1572,1575],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":60,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":60,"endColumn":44},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":61,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":61,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2748,2751],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2748,2751],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":399,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":399,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11064,11067],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11064,11067],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":473,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":473,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13048,13051],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13048,13051],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":474,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":474,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13100,13103],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13100,13103],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Base Repository Pattern\n * @fileoverview Abstract base class implementing the Repository pattern for data access.\n * Provides standardized CRUD operations, error handling, and audit logging for all data repositories.\n *\n * @example\n * ```typescript\n * // Extend BaseRepository for domain-specific operations\n * class UserRepository extends BaseRepository<UserData> {\n *   constructor(context?: ValidationContext) {\n *     super('users', context);\n *   }\n *\n *   async findByEmail(email: string): Promise<RepositoryResult<UserData>> {\n *     // Implementation\n *   }\n * }\n * ```\n *\n * @since 2.0.0\n * @author Citizenly Development Team\n */\n\nimport { createClient, SupabaseClient } from '@supabase/supabase-js';\n\nimport { logger } from '@/lib/logging';\nimport { storeSecurityAuditLog } from '@/lib/security/audit-storage';\nimport type { ValidationContext } from '@/lib/validation/types';\nimport type { QueryOptions, RepositoryError, RepositoryResult } from '@/types/services';\n\n// Using consolidated types from @/types/services\n// QueryOptions, RepositoryError, and RepositoryResult are now imported\n\n/**\n * Base Repository class implementing the Repository pattern\n * @template T The entity type this repository manages\n * @abstract\n * @class BaseRepository\n * @since 2.0.0\n *\n * @description\n * Provides standardized data access operations with built-in:\n * - Error handling and mapping\n * - Audit logging for security compliance\n * - Consistent result formatting\n * - Type-safe database operations\n */\nexport abstract class BaseRepository<T extends Record<string, any>> {\n  protected supabase: SupabaseClient;\n  protected tableName: string;\n  protected context?: ValidationContext;\n\n  /**\n   * Creates a new repository instance\n   * @param tableName - Name of the database table this repository manages\n   * @param context - Optional validation context for audit logging\n   */\n  constructor(tableName: string, context?: ValidationContext) {\n    this.supabase = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!\n    );\n    this.tableName = tableName;\n    this.context = context;\n  }\n\n  /**\n   * Set request context for auditing\n   * @param context - Validation context containing user and request information\n   * @since 2.0.0\n   *\n   * @example\n   * ```typescript\n   * repository.setContext({\n   *   userId: 'user-123',\n   *   ipAddress: '192.168.1.1',\n   *   userAgent: 'Mozilla/5.0...'\n   * });\n   * ```\n   */\n  setContext(context: ValidationContext): void {\n    this.context = context;\n  }\n\n  /**\n   * Log repository operation for audit\n   */\n  protected async auditOperation(\n    operation: string,\n    resourceId?: string,\n    success: boolean = true,\n    details?: Record<string, any>\n  ): Promise<void> {\n    if (!this.context) return;\n\n    try {\n      await storeSecurityAuditLog({\n        operation: `${this.tableName.toUpperCase()}_${operation.toUpperCase()}`,\n        user_id: this.context.userId || 'system',\n        resource_type: this.tableName,\n        resource_id: resourceId,\n        severity: 'low',\n        details: details || {},\n        ip_address: this.context.ipAddress,\n        user_agent: '',\n        timestamp: new Date().toISOString(),\n        success,\n      });\n    } catch (error) {\n      logger.error('Failed to audit repository operation', { error, operation });\n    }\n  }\n\n  /**\n   * Handle database errors consistently\n   */\n  protected handleError(error: unknown, operation: string): RepositoryError {\n    logger.error(`Repository ${operation} error`, { error, table: this.tableName });\n\n    // Type guard for error-like objects\n    const isErrorLike = (\n      err: unknown\n    ): err is { code?: string; message?: string; details?: unknown } => {\n      return typeof err === 'object' && err !== null;\n    };\n\n    if (!isErrorLike(error)) {\n      return {\n        code: 'UNKNOWN_ERROR',\n        message: 'An unknown error occurred',\n        details: String(error),\n      };\n    }\n\n    // Map common database errors\n    if (error.code === '23505') {\n      return {\n        code: 'UNIQUE_VIOLATION',\n        message: 'A record with this information already exists',\n        details: error.details as string | Record<string, unknown> | undefined,\n      };\n    }\n\n    if (error.code === '23503') {\n      return {\n        code: 'FOREIGN_KEY_VIOLATION',\n        message: 'Referenced record does not exist',\n        details: error.details as string | Record<string, unknown> | undefined,\n      };\n    }\n\n    if (error.code === '42P01') {\n      return {\n        code: 'TABLE_NOT_FOUND',\n        message: 'Database table not found',\n        details: error.details as string | Record<string, unknown> | undefined,\n      };\n    }\n\n    if (error.code === 'PGRST116') {\n      return {\n        code: 'NOT_FOUND',\n        message: 'Record not found',\n        details: error.details as string | Record<string, unknown> | undefined,\n      };\n    }\n\n    return {\n      code: 'DATABASE_ERROR',\n      message: error.message || 'Database operation failed',\n      details: error.details as string | Record<string, unknown> | undefined,\n    };\n  }\n\n  /**\n   * Find a single record by its ID\n   * @param id - The unique identifier of the record\n   * @returns Promise resolving to the found record or error\n   * @since 2.0.0\n   *\n   * @example\n   * ```typescript\n   * const result = await repository.findById('123');\n   * if (result.success) {\n   *   console.log('Found record:', result.data);\n   * } else {\n   *   console.error('Error:', result.error?.message);\n   * }\n   * ```\n   */\n  async findById(id: string): Promise<RepositoryResult<T>> {\n    try {\n      const { data, error } = await this.supabase\n        .from(this.tableName)\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (error) {\n        await this.auditOperation('READ', id, false, { error: error.message });\n        return {\n          success: false,\n          error: this.handleError(error, 'findById'),\n        };\n      }\n\n      await this.auditOperation('READ', id, true);\n      return {\n        success: true,\n        data: data as T,\n      };\n    } catch (error) {\n      await this.auditOperation('READ', id, false, { error: (error as Error).message });\n      return {\n        success: false,\n        error: this.handleError(error, 'findById'),\n      };\n    }\n  }\n\n  /**\n   * Find all records with optional filtering and pagination\n   * @param options - Query options for filtering, sorting, and pagination\n   * @returns Promise resolving to an array of records\n   * @since 2.0.0\n   *\n   * @example\n   * ```typescript\n   * const result = await repository.findAll({\n   *   limit: 10,\n   *   offset: 0,\n   *   orderBy: 'created_at',\n   *   orderDirection: 'desc',\n   *   filters: { status: 'active' }\n   * });\n   * ```\n   */\n  async findAll(options: QueryOptions = {}): Promise<RepositoryResult<T[]>> {\n    try {\n      let query = this.supabase.from(this.tableName).select('*', { count: 'exact' });\n\n      // Apply filters\n      if (options.filters) {\n        for (const [key, value] of Object.entries(options.filters)) {\n          if (value !== undefined && value !== null) {\n            query = query.eq(key, value);\n          }\n        }\n      }\n\n      // Apply ordering\n      if (options.orderBy) {\n        query = query.order(options.orderBy, {\n          ascending: options.orderDirection !== 'desc',\n        });\n      }\n\n      // Apply pagination\n      if (options.limit) {\n        query = query.limit(options.limit);\n      }\n\n      if (options.offset) {\n        query = query.range(options.offset, options.offset + (options.limit || 10) - 1);\n      }\n\n      const { data, error, count } = await query;\n\n      if (error) {\n        await this.auditOperation('READ_ALL', undefined, false, { error: error.message });\n        return {\n          success: false,\n          error: this.handleError(error, 'findAll'),\n        };\n      }\n\n      await this.auditOperation('READ_ALL', undefined, true, { count });\n      return {\n        success: true,\n        data: data as T[],\n        count: count || 0,\n      };\n    } catch (error) {\n      await this.auditOperation('READ_ALL', undefined, false, { error: (error as Error).message });\n      return {\n        success: false,\n        error: this.handleError(error, 'findAll'),\n      };\n    }\n  }\n\n  /**\n   * Create a new record\n   */\n  async create(data: Omit<T, 'id' | 'created_at' | 'updated_at'>): Promise<RepositoryResult<T>> {\n    try {\n      const { data: result, error } = await this.supabase\n        .from(this.tableName)\n        .insert(data)\n        .select()\n        .single();\n\n      if (error) {\n        await this.auditOperation('CREATE', undefined, false, { error: error.message });\n        return {\n          success: false,\n          error: this.handleError(error, 'create'),\n        };\n      }\n\n      await this.auditOperation('CREATE', result.id, true, { data });\n      return {\n        success: true,\n        data: result as T,\n      };\n    } catch (error) {\n      await this.auditOperation('CREATE', undefined, false, { error: (error as Error).message });\n      return {\n        success: false,\n        error: this.handleError(error, 'create'),\n      };\n    }\n  }\n\n  /**\n   * Update a record by ID\n   */\n  async update(\n    id: string,\n    data: Partial<Omit<T, 'id' | 'created_at'>>\n  ): Promise<RepositoryResult<T>> {\n    try {\n      const updateData = {\n        ...data,\n        updated_at: new Date().toISOString(),\n      };\n\n      const { data: result, error } = await this.supabase\n        .from(this.tableName)\n        .update(updateData)\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) {\n        await this.auditOperation('UPDATE', id, false, { error: error.message });\n        return {\n          success: false,\n          error: this.handleError(error, 'update'),\n        };\n      }\n\n      await this.auditOperation('UPDATE', id, true, { data });\n      return {\n        success: true,\n        data: result as T,\n      };\n    } catch (error) {\n      await this.auditOperation('UPDATE', id, false, { error: (error as Error).message });\n      return {\n        success: false,\n        error: this.handleError(error, 'update'),\n      };\n    }\n  }\n\n  /**\n   * Delete a record by ID\n   */\n  async delete(id: string): Promise<RepositoryResult<boolean>> {\n    try {\n      const { error } = await this.supabase.from(this.tableName).delete().eq('id', id);\n\n      if (error) {\n        await this.auditOperation('DELETE', id, false, { error: error.message });\n        return {\n          success: false,\n          error: this.handleError(error, 'delete'),\n        };\n      }\n\n      await this.auditOperation('DELETE', id, true);\n      return {\n        success: true,\n        data: true,\n      };\n    } catch (error) {\n      await this.auditOperation('DELETE', id, false, { error: (error as Error).message });\n      return {\n        success: false,\n        error: this.handleError(error, 'delete'),\n      };\n    }\n  }\n\n  /**\n   * Count records with optional filters\n   */\n  async count(filters?: Record<string, any>): Promise<RepositoryResult<number>> {\n    try {\n      let query = this.supabase.from(this.tableName).select('*', { count: 'exact', head: true });\n\n      // Apply filters\n      if (filters) {\n        for (const [key, value] of Object.entries(filters)) {\n          if (value !== undefined && value !== null) {\n            query = query.eq(key, value);\n          }\n        }\n      }\n\n      const { count, error } = await query;\n\n      if (error) {\n        await this.auditOperation('COUNT', undefined, false, { error: error.message });\n        return {\n          success: false,\n          error: this.handleError(error, 'count'),\n        };\n      }\n\n      await this.auditOperation('COUNT', undefined, true, { count });\n      return {\n        success: true,\n        data: count || 0,\n      };\n    } catch (error) {\n      await this.auditOperation('COUNT', undefined, false, { error: (error as Error).message });\n      return {\n        success: false,\n        error: this.handleError(error, 'count'),\n      };\n    }\n  }\n\n  /**\n   * Check if record exists\n   */\n  async exists(id: string): Promise<RepositoryResult<boolean>> {\n    try {\n      const { data, error } = await this.supabase\n        .from(this.tableName)\n        .select('id')\n        .eq('id', id)\n        .single();\n\n      if (error && error.code !== 'PGRST116') {\n        await this.auditOperation('EXISTS', id, false, { error: error.message });\n        return {\n          success: false,\n          error: this.handleError(error, 'exists'),\n        };\n      }\n\n      const exists = !!data;\n      await this.auditOperation('EXISTS', id, true, { exists });\n      return {\n        success: true,\n        data: exists,\n      };\n    } catch (error) {\n      await this.auditOperation('EXISTS', id, false, { error: (error as Error).message });\n      return {\n        success: false,\n        error: this.handleError(error, 'exists'),\n      };\n    }\n  }\n\n  /**\n   * Execute custom query\n   */\n  protected async executeQuery<R = any>(\n    queryBuilder: (client: SupabaseClient) => any,\n    operation: string\n  ): Promise<RepositoryResult<R>> {\n    try {\n      const result = await queryBuilder(this.supabase);\n\n      if (result.error) {\n        await this.auditOperation(operation, undefined, false, { error: result.error.message });\n        return {\n          success: false,\n          error: this.handleError(result.error, operation),\n        };\n      }\n\n      await this.auditOperation(operation, undefined, true);\n      return {\n        success: true,\n        data: result.data as R,\n        count: result.count,\n      };\n    } catch (error) {\n      await this.auditOperation(operation, undefined, false, { error: (error as Error).message });\n      return {\n        success: false,\n        error: this.handleError(error, operation),\n      };\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/services/cacheService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/services/command-menu-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/services/database-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is assigned a value but never used.","line":80,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2981,2984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2981,2984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3070,3073],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3070,3073],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":132,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3787,3790],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3787,3790],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3857,3860],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3857,3860],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":141,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4081,4084],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4081,4084],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Database Service\n * Consolidated database client factory and utilities following coding standards\n */\n\nimport { createClient, SupabaseClient } from '@supabase/supabase-js';\n\nimport { createLogger } from '../lib/config/environment';\nimport type { Database } from '../lib/data/supabase';\n\nconst logger = createLogger('DatabaseService');\n\n/**\n * Database Service Class\n * Centralized database operations and client management\n */\nexport class DatabaseService {\n  private adminClient: SupabaseClient<Database> | null = null;\n  private publicClient: SupabaseClient<Database> | null = null;\n\n  /**\n   * Create a Supabase client with proper environment validation\n   */\n  private createSupabaseClient(useServiceRole = false): SupabaseClient<Database> {\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n\n    if (!supabaseUrl) {\n      throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable');\n    }\n\n    if (useServiceRole) {\n      const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n      if (!serviceRoleKey) {\n        throw new Error('Missing SUPABASE_SERVICE_ROLE_KEY environment variable');\n      }\n      return createClient<Database>(supabaseUrl, serviceRoleKey);\n    } else {\n      const anonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n      if (!anonKey) {\n        throw new Error('Missing NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable');\n      }\n      return createClient<Database>(supabaseUrl, anonKey);\n    }\n  }\n\n  /**\n   * Get admin Supabase client (service role) - singleton\n   */\n  getAdminClient(): SupabaseClient<Database> {\n    if (!this.adminClient) {\n      this.adminClient = this.createSupabaseClient(true);\n      logger.debug('Admin database client initialized');\n    }\n    return this.adminClient;\n  }\n\n  /**\n   * Get public Supabase client (anon key) - singleton\n   */\n  getPublicClient(): SupabaseClient<Database> {\n    if (!this.publicClient) {\n      this.publicClient = this.createSupabaseClient(false);\n      logger.debug('Public database client initialized');\n    }\n    return this.publicClient;\n  }\n\n  /**\n   * Get appropriate client based on context\n   */\n  getClient(useAdmin = false): SupabaseClient<Database> {\n    return useAdmin ? this.getAdminClient() : this.getPublicClient();\n  }\n\n  /**\n   * Health check for database connection\n   */\n  async healthCheck(): Promise<{ healthy: boolean; error?: string }> {\n    try {\n      const { data, error } = await this.getPublicClient()\n        .from('psgc_regions')\n        .select('count')\n        .limit(1);\n\n      if (error) {\n        return { healthy: false, error: error.message };\n      }\n\n      return { healthy: true };\n    } catch (error) {\n      return {\n        healthy: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  /**\n   * Execute a query with error handling and logging\n   */\n  async executeQuery<T>(\n    queryFn: (client: SupabaseClient<Database>) => Promise<{ data: T | null; error: any }>,\n    useAdmin = false,\n    context?: string\n  ): Promise<{ data: T | null; error: any }> {\n    const client = this.getClient(useAdmin);\n    const startTime = Date.now();\n\n    try {\n      const result = await queryFn(client);\n\n      const duration = Date.now() - startTime;\n      logger.debug('Query executed', { context, duration, hasError: !!result.error });\n\n      return result;\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      logger.error('Query execution failed', { context, duration, error });\n\n      return {\n        data: null,\n        error: error instanceof Error ? error : new Error('Unknown query error'),\n      };\n    }\n  }\n\n  /**\n   * Execute a stored procedure/function call\n   */\n  async executeRpc<T>(\n    functionName: string,\n    params: Record<string, any> = {},\n    useAdmin = false\n  ): Promise<{ data: T | null; error: any }> {\n    const client = this.getClient(useAdmin);\n    const startTime = Date.now();\n\n    try {\n      const result = await client.rpc(\n        functionName,\n        Object.keys(params).length > 0 ? params : (undefined as any)\n      );\n\n      const duration = Date.now() - startTime;\n      logger.debug('RPC executed', { functionName, duration, hasError: !!result.error });\n\n      return result;\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      logger.error('RPC execution failed', { functionName, duration, error });\n\n      return {\n        data: null,\n        error: error instanceof Error ? error : new Error('Unknown RPC error'),\n      };\n    }\n  }\n\n  /**\n   * Dispose of clients (for cleanup)\n   */\n  dispose(): void {\n    this.adminClient = null;\n    this.publicClient = null;\n    logger.debug('Database clients disposed');\n  }\n}\n\n// Export singleton instance\nexport const databaseService = new DatabaseService();\n\n// Modern service-based exports - use databaseService instead of legacy functions\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/services/form-data-transformers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ContactInformationData' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":178,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6129,6132],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6129,6132],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":214,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7360,7363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7360,7363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Data transformation utilities for form data mapping\n */\n\nimport type {\n  SexEnum,\n  CivilStatusEnum,\n  CitizenshipEnum,\n  BloodTypeEnum,\n  ReligionEnum,\n  EthnicityEnum,\n  EducationLevelEnum,\n  EmploymentStatusEnum,\n} from '../types/database';\nimport type { ResidentFormData } from '../types/forms';\nimport type {\n  MigrationInformationData,\n  BasicInformationData,\n  BirthInformationData,\n  EducationInformationData,\n  EmploymentInformationData,\n  ContactInformationData,\n  PhysicalInformationData,\n} from '../types/services';\n\nexport const transformBasicInfoToFormData = (\n  basicInfo: BasicInformationData\n): Partial<ResidentFormData> => {\n  return {\n    first_name: basicInfo.first_name,\n    middle_name: basicInfo.middle_name,\n    last_name: basicInfo.last_name,\n    extension_name: basicInfo.extension_name,\n    sex: basicInfo.sex === '' ? undefined : (basicInfo.sex as SexEnum),\n    civil_status:\n      basicInfo.civil_status === '' ? undefined : (basicInfo.civil_status as CivilStatusEnum),\n  };\n};\n\nexport const extractBasicInfoFromFormData = (formData: ResidentFormData): BasicInformationData => {\n  return {\n    first_name: formData.first_name || '',\n    middle_name: formData.middle_name || '',\n    last_name: formData.last_name || '',\n    extension_name: formData.extension_name || '',\n    sex: (formData.sex || '') as '' | 'male' | 'female',\n    civil_status: formData.civil_status || '',\n    civil_status_others_specify: formData.civil_status_others_specify || '',\n  };\n};\n\n// Using consolidated BirthInformationData from @/types/services\n\nexport const transformBirthInfoToFormData = (\n  birthInfo: BirthInformationData\n): Partial<ResidentFormData> => {\n  return {\n    birthdate: birthInfo.birthdate,\n    birth_place_code: birthInfo.birth_place_code,\n  };\n};\n\nexport const extractBirthInfoFromFormData = (formData: ResidentFormData): BirthInformationData => {\n  return {\n    birthdate: formData.birthdate || '',\n    birth_place_name: formData.birth_place_name || '',\n    birth_place_code: formData.birth_place_code || '',\n    citizenship: formData.citizenship || '',\n  };\n};\n\n// Using consolidated EducationInformationData from @/types/services\n\nexport const transformEducationInfoToFormData = (\n  educationInfo: EducationInformationData\n): Partial<ResidentFormData> => {\n  return {\n    education_attainment:\n      educationInfo.education_attainment === ''\n        ? undefined\n        : (educationInfo.education_attainment as EducationLevelEnum),\n    is_graduate: educationInfo.is_graduate,\n  };\n};\n\nexport const extractEducationInfoFromFormData = (\n  formData: ResidentFormData\n): EducationInformationData => {\n  return {\n    education_attainment: formData.education_attainment || '',\n    is_graduate: formData.is_graduate || false,\n  };\n};\n\n// Using consolidated EmploymentInformationData from @/types/services\n\nexport const transformEmploymentInfoToFormData = (\n  employmentInfo: EmploymentInformationData\n): Partial<ResidentFormData> => {\n  return {\n    employment_status:\n      employmentInfo.employment_status === ''\n        ? undefined\n        : (employmentInfo.employment_status as EmploymentStatusEnum),\n    occupation_code: employmentInfo.occupation_code,\n  };\n};\n\nexport const extractEmploymentInfoFromFormData = (\n  formData: ResidentFormData\n): EmploymentInformationData => {\n  return {\n    employment_status: formData.employment_status || '',\n    occupation_code: formData.occupation_code || '',\n    employment_code: '', // Not available in ResidentFormData\n    employment_name: '', // Not available in ResidentFormData\n    occupation_title: '', // Not available in ResidentFormData\n  };\n};\n\n// Data transformer for PhysicalCharacteristics\n// Using consolidated PhysicalInformationData from @/types/services\n\nexport const transformPhysicalCharacteristicsToFormData = (\n  physicalInfo: PhysicalInformationData\n): Partial<ResidentFormData> => {\n  return {\n    blood_type:\n      physicalInfo.blood_type === '' ? undefined : (physicalInfo.blood_type as BloodTypeEnum),\n    complexion: physicalInfo.complexion,\n    height: parseFloat(physicalInfo.height.toString()) || undefined,\n    weight: parseFloat(physicalInfo.weight.toString()) || undefined,\n    citizenship:\n      physicalInfo.citizenship === '' || !physicalInfo.citizenship\n        ? undefined\n        : (physicalInfo.citizenship as CitizenshipEnum),\n    ethnicity:\n      physicalInfo.ethnicity === '' ? undefined : (physicalInfo.ethnicity as EthnicityEnum),\n    religion: physicalInfo.religion === '' ? undefined : (physicalInfo.religion as ReligionEnum),\n    religion_others_specify: physicalInfo.religion_others_specify,\n  };\n};\n\nexport const extractPhysicalCharacteristicsFromFormData = (\n  formData: ResidentFormData\n): PhysicalInformationData => {\n  return {\n    blood_type: formData.blood_type || '',\n    complexion: formData.complexion || '',\n    height: String(formData.height || ''),\n    weight: String(formData.weight || ''),\n    citizenship: formData.citizenship || '',\n    ethnicity: formData.ethnicity || '',\n    religion: formData.religion || '',\n    religion_others_specify: formData.religion_others_specify || '',\n  };\n};\n\n// Data transformer for Migration Information\n// Note: Migration data is stored in a separate table (resident_migrant_info)\n// These functions should be used when handling migration data separately from resident form data\n\nexport const createMigrationInfoFromData = (\n  migrationInfo: MigrationInformationData\n): MigrationInformationData => {\n  return {\n    previous_barangay_code: migrationInfo.previous_barangay_code || '',\n    previous_city_municipality_code: migrationInfo.previous_city_municipality_code || '',\n    previous_province_code: migrationInfo.previous_province_code || '',\n    previous_region_code: migrationInfo.previous_region_code || '',\n    length_of_stay_previous_months: migrationInfo.length_of_stay_previous_months || 0,\n    reason_for_migration: migrationInfo.reason_for_migration || '',\n    date_of_transfer: migrationInfo.date_of_transfer || '',\n    migration_type: migrationInfo.migration_type || '',\n  };\n};\n\nexport const extractMigrationInfoFromRawData = (migrationData: any): MigrationInformationData => {\n  return {\n    previous_barangay_code: migrationData.previous_barangay_code || '',\n    previous_city_municipality_code: migrationData.previous_city_municipality_code || '',\n    previous_province_code: migrationData.previous_province_code || '',\n    previous_region_code: migrationData.previous_region_code || '',\n    length_of_stay_previous_months: migrationData.length_of_stay_previous_months || 0,\n    reason_for_migration: migrationData.reason_for_migration || '',\n    date_of_transfer: migrationData.date_of_transfer || '',\n    migration_type: migrationData.migration_type || '',\n  };\n};\n\n// Generic field change handler factory\nexport const createFieldChangeHandler =\n  <T extends Record<string, unknown>>(currentValue: T, onChange: (value: T) => void) =>\n  (field: keyof T, value: T[keyof T]) => {\n    onChange({\n      ...currentValue,\n      [field]: value,\n    });\n  };\n\n// Bulk field update utility\nexport const updateFormFields = (\n  currentFormData: ResidentFormData,\n  updates: Partial<ResidentFormData>\n): ResidentFormData => {\n  return {\n    ...currentFormData,\n    ...updates,\n  };\n};\n\n// Form data validation helpers\nexport const validateRequiredFields = (\n  data: Record<string, any>,\n  requiredFields: string[]\n): { isValid: boolean; missingFields: string[] } => {\n  const missingFields = requiredFields.filter(field => {\n    const value = data[field];\n    return value === null || value === undefined || value === '';\n  });\n\n  return {\n    isValid: missingFields.length === 0,\n    missingFields,\n  };\n};\n\n// Field dependency resolver\nexport const resolveFieldDependencies = (\n  formData: ResidentFormData,\n  fieldName: string,\n  dependencies: Record<string, string[]>\n): boolean => {\n  const fieldDependencies = dependencies[fieldName];\n  if (!fieldDependencies) return true;\n\n  return fieldDependencies.every(dep => {\n    const value = formData[dep as keyof ResidentFormData];\n    return value !== null && value !== undefined && value !== '';\n  });\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/services/geographic.service.ts","messages":[{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'logger' is assigned a value but never used.","line":10,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarangayWithJoins' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":242,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6166,6169],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6166,6169],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Geographic Service\n * Handles PSGC (Philippine Standard Geographic Code) data operations\n * Follows standardized service pattern\n */\n\nimport { supabase, logError } from '@/lib';\nimport { createLogger } from '@/lib/config/environment';\n\nconst logger = createLogger('GeographicService');\nimport type {\n  Region,\n  Province,\n  CityMunicipality,\n  Barangay,\n  GeographicOption,\n  BarangayWithJoins,\n} from '@/types/addresses';\n\n// Re-export types for backward compatibility\nexport type { Region, Province, CityMunicipality, Barangay, GeographicOption };\n\n/**\n * Geographic Data Service Class\n */\nexport class GeographicService {\n  /**\n   * Get all active regions\n   */\n  async getRegions(): Promise<GeographicOption[]> {\n    try {\n      const { data, error } = await supabase\n        .from('psgc_regions')\n        .select('code, name')\n        .eq('is_active', true)\n        .order('name');\n\n      if (error) {\n        logError(new Error(error.message), 'GEOGRAPHIC_SERVICE_GET_REGIONS');\n        return [];\n      }\n\n      return data.map(region => ({\n        value: region.code,\n        label: region.name,\n      }));\n    } catch (error) {\n      logError(error as Error, 'GEOGRAPHIC_SERVICE_GET_REGIONS');\n      return [];\n    }\n  }\n\n  /**\n   * Get provinces by region code\n   */\n  async getProvincesByRegion(regionCode: string): Promise<GeographicOption[]> {\n    if (!regionCode) return [];\n\n    try {\n      const { data, error } = await supabase\n        .from('psgc_provinces')\n        .select('code, name')\n        .eq('region_code', regionCode)\n        .eq('is_active', true)\n        .order('name');\n\n      if (error) {\n        logError(new Error(error.message), 'GEOGRAPHIC_SERVICE_GET_PROVINCES');\n        return [];\n      }\n\n      return data.map(province => ({\n        value: province.code,\n        label: province.name,\n      }));\n    } catch (error) {\n      logError(error as Error, 'GEOGRAPHIC_SERVICE_GET_PROVINCES');\n      return [];\n    }\n  }\n\n  /**\n   * Get cities/municipalities by province code\n   * For independent cities, get by region code\n   */\n  async getCitiesByProvince(provinceCode: string): Promise<GeographicOption[]> {\n    if (!provinceCode) return [];\n\n    try {\n      const { data, error } = await supabase\n        .from('psgc_cities_municipalities')\n        .select('code, name, type')\n        .eq('province_code', provinceCode)\n        .eq('is_active', true)\n        .order('name');\n\n      if (error) {\n        logError(new Error(error.message), 'GEOGRAPHIC_SERVICE_GET_CITIES');\n        return [];\n      }\n\n      return data.map(city => ({\n        value: city.code,\n        label: `${city.name} (${city.type})`,\n      }));\n    } catch (error) {\n      logError(error as Error, 'GEOGRAPHIC_SERVICE_GET_CITIES');\n      return [];\n    }\n  }\n\n  /**\n   * Get independent cities by region code (for regions without provinces)\n   */\n  async getIndependentCitiesByRegion(regionCode: string): Promise<GeographicOption[]> {\n    if (!regionCode) return [];\n\n    try {\n      // For independent cities like Metro Manila, we need to query differently\n      const { data, error } = await supabase\n        .from('psgc_cities_municipalities')\n        .select(\n          `\n          code, \n          name, \n          type,\n          province_code\n        `\n        )\n        .eq('is_independent', true)\n        .eq('is_active', true)\n        .order('name');\n\n      if (error) {\n        logError(new Error(error.message), 'GEOGRAPHIC_SERVICE_GET_INDEPENDENT_CITIES');\n        return [];\n      }\n\n      // Filter by region through province relationship or direct region relationship\n      const filteredData = data.filter(city => {\n        // For Metro Manila (NCR), cities don't have province_code\n        return city.province_code === null;\n      });\n\n      return filteredData.map(city => ({\n        value: city.code,\n        label: `${city.name} (${city.type})`,\n      }));\n    } catch (error) {\n      logError(error as Error, 'GEOGRAPHIC_SERVICE_GET_INDEPENDENT_CITIES');\n      return [];\n    }\n  }\n\n  /**\n   * Get barangays by city/municipality code\n   */\n  async getBarangaysByCity(cityCode: string): Promise<GeographicOption[]> {\n    if (!cityCode) return [];\n\n    try {\n      const { data, error } = await supabase\n        .from('psgc_barangays')\n        .select('code, name')\n        .eq('city_municipality_code', cityCode)\n        .eq('is_active', true)\n        .order('name');\n\n      if (error) {\n        logError(new Error(error.message), 'GEOGRAPHIC_SERVICE_GET_BARANGAYS');\n        return [];\n      }\n\n      return data.map(barangay => ({\n        value: barangay.code,\n        label: barangay.name,\n      }));\n    } catch (error) {\n      logError(error as Error, 'GEOGRAPHIC_SERVICE_GET_BARANGAYS');\n      return [];\n    }\n  }\n\n  /**\n   * Get complete geographic hierarchy for a barangay code\n   */\n  async getGeographicHierarchy(barangayCode: string): Promise<{\n    region?: Region;\n    province?: Province;\n    city?: CityMunicipality;\n    barangay?: Barangay;\n  }> {\n    if (!barangayCode) return {};\n\n    try {\n      const { data, error } = await supabase\n        .from('psgc_barangays')\n        .select(\n          `\n          code,\n          name,\n          city_municipality_code,\n          is_active,\n          created_at,\n          updated_at,\n          psgc_cities_municipalities!inner(\n            code,\n            name,\n            type,\n            province_code,\n            is_independent,\n            is_active,\n            created_at,\n            updated_at,\n            psgc_provinces(\n              code,\n              name,\n              region_code,\n              is_active,\n              created_at,\n              updated_at,\n              psgc_regions!inner(\n                code,\n                name,\n                is_active,\n                created_at,\n                updated_at\n              )\n            )\n          )\n        `\n        )\n        .eq('code', barangayCode)\n        .single();\n\n      if (error) {\n        logError(new Error(error.message), 'GEOGRAPHIC_SERVICE_GET_HIERARCHY');\n        return {};\n      }\n\n      // Handle the Supabase query result structure\n      const typedData = data as any; // Use any since Supabase returns nested structure\n      const city = typedData.psgc_cities_municipalities;\n      const province = city.psgc_provinces;\n      const region = province?.psgc_regions;\n\n      return {\n        barangay: {\n          code: data.code,\n          name: data.name,\n          city_municipality_code: data.city_municipality_code,\n          is_active: data.is_active,\n          created_at: data.created_at || new Date().toISOString(),\n          updated_at: data.updated_at || new Date().toISOString(),\n        },\n        city: {\n          code: city.code,\n          name: city.name,\n          province_code: city.province_code,\n          type: city.type,\n          is_independent: city.is_independent,\n          is_active: city.is_active,\n          created_at: city.created_at || new Date().toISOString(),\n          updated_at: city.updated_at || new Date().toISOString(),\n        },\n        province: province\n          ? {\n              code: province.code,\n              name: province.name,\n              region_code: province.region_code,\n              is_active: province.is_active,\n              created_at: province.created_at || new Date().toISOString(),\n              updated_at: province.updated_at || new Date().toISOString(),\n            }\n          : undefined,\n        region: region\n          ? {\n              code: region.code,\n              name: region.name,\n              is_active: region.is_active,\n              created_at: region.created_at || new Date().toISOString(),\n              updated_at: region.updated_at || new Date().toISOString(),\n            }\n          : undefined,\n      };\n    } catch (error) {\n      logError(error as Error, 'GEOGRAPHIC_SERVICE_GET_HIERARCHY');\n      return {};\n    }\n  }\n\n  /**\n   * Search locations by name (for autocomplete)\n   */\n  async searchLocations(\n    query: string,\n    limit = 10\n  ): Promise<{\n    regions: GeographicOption[];\n    provinces: GeographicOption[];\n    cities: GeographicOption[];\n    barangays: GeographicOption[];\n  }> {\n    if (!query || query.length < 2) {\n      return { regions: [], provinces: [], cities: [], barangays: [] };\n    }\n\n    const searchPattern = `%${query}%`;\n\n    try {\n      const [regionsResult, provincesResult, citiesResult, barangaysResult] = await Promise.all([\n        supabase\n          .from('psgc_regions')\n          .select('code, name')\n          .ilike('name', searchPattern)\n          .eq('is_active', true)\n          .limit(limit),\n\n        supabase\n          .from('psgc_provinces')\n          .select('code, name')\n          .ilike('name', searchPattern)\n          .eq('is_active', true)\n          .limit(limit),\n\n        supabase\n          .from('psgc_cities_municipalities')\n          .select('code, name, type')\n          .ilike('name', searchPattern)\n          .eq('is_active', true)\n          .limit(limit),\n\n        supabase\n          .from('psgc_barangays')\n          .select('code, name')\n          .ilike('name', searchPattern)\n          .eq('is_active', true)\n          .limit(limit),\n      ]);\n\n      return {\n        regions:\n          regionsResult.data?.map(item => ({\n            value: item.code,\n            label: item.name,\n          })) || [],\n        provinces:\n          provincesResult.data?.map(item => ({\n            value: item.code,\n            label: item.name,\n          })) || [],\n        cities:\n          citiesResult.data?.map(item => ({\n            value: item.code,\n            label: `${item.name} (${item.type})`,\n          })) || [],\n        barangays:\n          barangaysResult.data?.map(item => ({\n            value: item.code,\n            label: item.name,\n          })) || [],\n      };\n    } catch (error) {\n      logError(error as Error, 'GEOGRAPHIC_SERVICE_SEARCH');\n      return { regions: [], provinces: [], cities: [], barangays: [] };\n    }\n  }\n}\n\n// Export singleton instance\nexport const geographicService = new GeographicService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/services/household-fetcher.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/services/household-repository.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HouseholdRecord' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HouseholdRepositoryResult' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1563,1566],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1563,1566],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3456,3459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3456,3459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3815,3818],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3815,3818],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":266,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8143,8146],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8143,8146],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Household Repository\n * Domain-specific repository for household data operations\n */\n\nimport type { SupabaseClient } from '@supabase/supabase-js';\n\nimport { CommonQueryBuilders } from '@/lib/database/query-builders';\nimport { validateHouseholdData } from '@/lib/validation/schemas';\nimport type { ValidationContext } from '@/lib/validation/types';\nimport { HouseholdRecord } from '@/types';\nimport type {\n  HouseholdData,\n  HouseholdSearchOptions,\n  HouseholdRepositoryResult,\n} from '@/types/repositories';\nimport type { RepositoryResult } from '@/types/services';\n\nimport { BaseRepository } from './base-repository';\n\n// Export types for re-export in services/index.ts\nexport type { HouseholdData, HouseholdSearchOptions };\n\nexport class HouseholdRepository extends BaseRepository<HouseholdData> {\n  constructor(context?: ValidationContext) {\n    super('households', context);\n  }\n\n  /**\n   * Create a new household with validation\n   */\n  async createHousehold(\n    data: Omit<HouseholdData, 'id' | 'created_at' | 'updated_at'>\n  ): Promise<RepositoryResult<HouseholdData>> {\n    try {\n      // Validate household data before creation\n      const validationResult = await validateHouseholdData(data, this.context);\n      if (!validationResult.isValid) {\n        return {\n          success: false,\n          error: {\n            code: 'VALIDATION_ERROR',\n            message: 'Household data validation failed',\n            details: Array.isArray(validationResult.errors)\n              ? validationResult.errors.reduce((acc: Record<string, string>, err: any) => {\n                  acc[err.field || 'general'] = err.message || String(err);\n                  return acc;\n                }, {})\n              : validationResult.errors,\n          },\n        };\n      }\n\n      // Check for duplicate household code\n      const duplicateCheck = await this.findByCode(data.code);\n      if (duplicateCheck.success && duplicateCheck.data) {\n        return {\n          success: false,\n          error: {\n            code: 'DUPLICATE_HOUSEHOLD_CODE',\n            message: 'A household with this code already exists',\n            field: 'code',\n          },\n        };\n      }\n\n      return await this.create(data);\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'createHousehold'),\n      };\n    }\n  }\n\n  /**\n   * Update household with validation\n   */\n  async updateHousehold(\n    id: string,\n    data: Partial<Omit<HouseholdData, 'id' | 'created_at'>>\n  ): Promise<RepositoryResult<HouseholdData>> {\n    try {\n      // Get existing household for partial validation\n      const existingResult = await this.findById(id);\n      if (!existingResult.success || !existingResult.data) {\n        return existingResult;\n      }\n\n      // If updating code, check for duplicates\n      if (data.code && data.code !== existingResult.data.code) {\n        const duplicateCheck = await this.findByCode(data.code);\n        if (duplicateCheck.success && duplicateCheck.data) {\n          return {\n            success: false,\n            error: {\n              code: 'DUPLICATE_HOUSEHOLD_CODE',\n              message: 'A household with this code already exists',\n              field: 'code',\n            },\n          };\n        }\n      }\n\n      // Merge with existing data for validation\n      const mergedData = { ...existingResult.data, ...data };\n      const validationResult = await validateHouseholdData(mergedData as any, this.context);\n\n      if (!validationResult.isValid) {\n        return {\n          success: false,\n          error: {\n            code: 'VALIDATION_ERROR',\n            message: 'Household data validation failed',\n            details: Array.isArray(validationResult.errors)\n              ? validationResult.errors.reduce((acc: Record<string, string>, err: any) => {\n                  acc[err.field || 'general'] = err.message || String(err);\n                  return acc;\n                }, {})\n              : validationResult.errors,\n          },\n        };\n      }\n\n      return await this.update(id, data);\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'updateHousehold'),\n      };\n    }\n  }\n\n  /**\n   * Find household by code\n   */\n  async findByCode(code: string): Promise<RepositoryResult<HouseholdData>> {\n    try {\n      // Use consolidated query builder - eliminates 3 lines of duplicate code\n      const queryBuilder = CommonQueryBuilders.findByCode(this.tableName, code);\n\n      return await this.executeQuery(queryBuilder, 'FIND_BY_CODE');\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'findByCode'),\n      };\n    }\n  }\n\n  /**\n   * Search households with advanced filtering\n   */\n  async searchHouseholds(\n    options: HouseholdSearchOptions = {}\n  ): Promise<RepositoryResult<HouseholdData[]>> {\n    try {\n      const queryBuilder = (supabase: SupabaseClient) => {\n        let query = supabase.from(this.tableName).select('*', { count: 'exact' });\n\n        // Code search (partial match)\n        if (options.code) {\n          query = query.ilike('code', `%${options.code}%`);\n        }\n\n        // Geographic filters\n        if (options.barangay_code) query = query.eq('barangay_code', options.barangay_code);\n        if (options.city_municipality_code)\n          query = query.eq('city_municipality_code', options.city_municipality_code);\n        if (options.province_code) query = query.eq('province_code', options.province_code);\n        if (options.region_code) query = query.eq('region_code', options.region_code);\n\n        // Street ID search\n        if (options.street_id) {\n          query = query.eq('street_id', options.street_id);\n        }\n\n        // Head of household search\n        if (options.household_head_id) {\n          query = query.eq('household_head_id', options.household_head_id);\n        }\n\n        // Apply other filters\n        if (options.filters) {\n          for (const [key, value] of Object.entries(options.filters)) {\n            if (value !== undefined && value !== null) {\n              query = query.eq(key, value);\n            }\n          }\n        }\n\n        // Apply ordering\n        if (options.orderBy) {\n          query = query.order(options.orderBy, {\n            ascending: options.orderDirection !== 'desc',\n          });\n        } else {\n          // Default order by code\n          query = query.order('code');\n        }\n\n        // Apply pagination\n        if (options.limit) {\n          query = query.limit(options.limit);\n        }\n\n        if (options.offset) {\n          query = query.range(options.offset, options.offset + (options.limit || 10) - 1);\n        }\n\n        return query;\n      };\n\n      return await this.executeQuery(queryBuilder, 'SEARCH_HOUSEHOLDS');\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'searchHouseholds'),\n      };\n    }\n  }\n\n  /**\n   * Find households by geographic area\n   */\n  async findByGeographicArea(\n    barangayCode?: string,\n    cityCode?: string,\n    provinceCode?: string,\n    regionCode?: string\n  ): Promise<RepositoryResult<HouseholdData[]>> {\n    try {\n      // Use consolidated geographic query builder - eliminates 8 lines of filter building\n      const queryBuilder = CommonQueryBuilders.searchGeographic(\n        this.tableName,\n        {\n          barangay_code: barangayCode,\n          city_municipality_code: cityCode,\n          province_code: provinceCode,\n          region_code: regionCode,\n        },\n        { orderBy: 'code' }\n      );\n\n      return await this.executeQuery(queryBuilder, 'FIND_BY_GEOGRAPHIC_AREA');\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'findByGeographicArea'),\n      };\n    }\n  }\n\n  /**\n   * Get household statistics by area\n   */\n  async getHouseholdStatistics(barangayCode?: string): Promise<\n    RepositoryResult<{\n      totalHouseholds: number;\n      averageHouseholdSize: number;\n      householdsWithCoordinates: number;\n      coordinateCoverage: number;\n    }>\n  > {\n    try {\n      const filters: Record<string, any> = {};\n      if (barangayCode) {\n        filters.barangay_code = barangayCode;\n      }\n\n      const householdsResult = await this.findAll({ filters });\n\n      if (!householdsResult.success || !householdsResult.data) {\n        return {\n          success: false,\n          error: householdsResult.error || {\n            code: 'DATA_ERROR',\n            message: 'Failed to retrieve household data',\n          },\n        };\n      }\n\n      const households = householdsResult.data;\n      const totalHouseholds = households.length;\n\n      const totalSize = households.reduce((sum, h) => sum + (h.no_of_household_members || 0), 0);\n      const averageHouseholdSize = totalHouseholds > 0 ? totalSize / totalHouseholds : 0;\n\n      // Note: HouseholdRecord doesn't include latitude/longitude fields\n      // This would require a separate location/coordinates table\n      const householdsWithCoordinates = 0;\n\n      const coordinateCoverage =\n        totalHouseholds > 0 ? (householdsWithCoordinates / totalHouseholds) * 100 : 0;\n\n      return {\n        success: true,\n        data: {\n          totalHouseholds,\n          averageHouseholdSize,\n          householdsWithCoordinates,\n          coordinateCoverage,\n        },\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'getHouseholdStatistics'),\n      };\n    }\n  }\n\n  /**\n   * Find households within geographic bounds\n   */\n  async findWithinBounds(\n    northEast: { lat: number; lng: number },\n    southWest: { lat: number; lng: number }\n  ): Promise<RepositoryResult<HouseholdData[]>> {\n    try {\n      const queryBuilder = (supabase: SupabaseClient) => {\n        return supabase\n          .from(this.tableName)\n          .select('*')\n          .gte('latitude', southWest.lat)\n          .lte('latitude', northEast.lat)\n          .gte('longitude', southWest.lng)\n          .lte('longitude', northEast.lng)\n          .not('latitude', 'is', null)\n          .not('longitude', 'is', null);\n      };\n\n      return await this.executeQuery(queryBuilder, 'FIND_WITHIN_BOUNDS');\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'findWithinBounds'),\n      };\n    }\n  }\n\n  /**\n   * Update household size based on resident count\n   */\n  async updateHouseholdSize(householdCode: string): Promise<RepositoryResult<HouseholdData>> {\n    try {\n      // This would typically involve a join with residents table\n      // For now, we'll provide the structure\n      const queryBuilder = (supabase: SupabaseClient) => {\n        // This is a complex query that would need to be implemented\n        // based on the actual database schema and relationships\n        return supabase.rpc('update_household_size', { household_code: householdCode });\n      };\n\n      return await this.executeQuery(queryBuilder, 'UPDATE_HOUSEHOLD_SIZE');\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'updateHouseholdSize'),\n      };\n    }\n  }\n\n  /**\n   * Generate next household code for a barangay\n   */\n  async generateNextCode(barangayCode: string): Promise<RepositoryResult<string>> {\n    try {\n      const queryBuilder = (supabase: SupabaseClient) => {\n        return supabase\n          .from(this.tableName)\n          .select('code')\n          .eq('barangay_code', barangayCode)\n          .order('code', { ascending: false })\n          .limit(1);\n      };\n\n      const result = await this.executeQuery(queryBuilder, 'GET_LATEST_CODE');\n\n      if (!result.success) {\n        return result;\n      }\n\n      // Generate next code based on existing pattern\n      let nextCode = `${barangayCode}-001`;\n\n      if (result.data && result.data.length > 0) {\n        const latestCode = result.data[0].code;\n        const match = latestCode.match(/-(\\d+)$/);\n        if (match) {\n          const nextNumber = parseInt(match[1]) + 1;\n          nextCode = `${barangayCode}-${nextNumber.toString().padStart(3, '0')}`;\n        }\n      }\n\n      return {\n        success: true,\n        data: nextCode,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'generateNextCode'),\n      };\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/services/household.service.ts","messages":[{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ValidationError' is defined but never used.","line":23,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'csrf_token' is defined but never used. Allowed unused args must match /^_/u.","line":181,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":181,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":190,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6256,6259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6256,6259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Household Service\n * Business logic and API operations for household management\n * Handles data transformation, validation, and database operations\n * Follows standardized service pattern\n */\n\nimport { createLogger } from '@/lib/config/environment';\nimport { supabase } from '@/lib/data/supabase';\nimport { logError, dbLogger } from '@/lib/logging';\n\nconst logger = createLogger('HouseholdService');\n\n// Import database and consolidated types\nimport { HouseholdRecord } from '@/types';\nimport type { HouseholdFormData } from '@/types/forms';\nimport type {\n  UserAddressDetailed as UserAddress,\n  CreateHouseholdRequest,\n  CreateHouseholdResponse,\n  HouseholdValidationResult,\n} from '@/types/services';\nimport type { ValidationError } from '@/types/validation';\n\n// Re-export types for backward compatibility\nexport type {\n  HouseholdFormData,\n  UserAddress,\n  CreateHouseholdRequest,\n  CreateHouseholdResponse,\n  HouseholdValidationResult,\n};\n\n/**\n * Household Service Class\n * Contains all business logic for household operations\n */\nexport class HouseholdService {\n  /**\n   * Validate household form data - aligned with database structure\n   */\n  validateHousehold(formData: HouseholdFormData): HouseholdValidationResult {\n    const errors: Record<string, string> = {};\n\n    try {\n      // Required fields validation\n      if (!formData.code?.trim()) {\n        errors.code = 'Household code is required';\n      }\n      if (!formData.house_number?.trim()) {\n        errors.house_number = 'House number is required';\n      }\n      if (!formData.street_id?.trim()) {\n        errors.street_id = 'Street ID is required';\n      }\n      if (!formData.barangay_code?.trim()) {\n        errors.barangay_code = 'Barangay code is required';\n      }\n      if (!formData.city_municipality_code?.trim()) {\n        errors.city_municipality_code = 'City/Municipality code is required';\n      }\n      if (!formData.region_code?.trim()) {\n        errors.region_code = 'Region code is required';\n      }\n\n      // Validate numeric fields if provided\n      if (\n        formData.no_of_families !== undefined &&\n        formData.no_of_families !== null &&\n        formData.no_of_families < 0\n      ) {\n        errors.no_of_families = 'Number of families cannot be negative';\n      }\n      if (\n        formData.no_of_household_members !== undefined &&\n        formData.no_of_household_members !== null &&\n        formData.no_of_household_members < 0\n      ) {\n        errors.no_of_household_members = 'Number of household members cannot be negative';\n      }\n      if (\n        formData.no_of_migrants !== undefined &&\n        formData.no_of_migrants !== null &&\n        formData.no_of_migrants < 0\n      ) {\n        errors.no_of_migrants = 'Number of migrants cannot be negative';\n      }\n      if (\n        formData.monthly_income !== undefined &&\n        formData.monthly_income !== null &&\n        formData.monthly_income < 0\n      ) {\n        errors.monthly_income = 'Monthly income cannot be negative';\n      }\n\n      return {\n        success: Object.keys(errors).length === 0,\n        errors: Object.keys(errors).length > 0 ? errors : undefined,\n      };\n    } catch (error) {\n      logError(error as Error, 'HOUSEHOLD_VALIDATION_ERROR');\n      return {\n        success: false,\n        errors: { general: 'Validation error occurred' },\n      };\n    }\n  }\n\n  /**\n   * Generate unique household code - should use proper format based on geographic hierarchy\n   * For now using simple format, but should ideally use barangay-based format from schema\n   */\n  generateHouseholdCode(barangay_code?: string): string {\n    if (barangay_code) {\n      // Use geographic hierarchy format as defined in schema function\n      const timestamp = Date.now().toString().slice(-6);\n      return `${barangay_code}-HH-${timestamp}`;\n    }\n\n    // Fallback format\n    const timestamp = Date.now().toString(36);\n    const randomStr = Math.random().toString(36).substring(2, 6);\n    return `HH-${timestamp}-${randomStr}`.toUpperCase();\n  }\n\n  /**\n   * Transform form data to database schema - exact field mapping\n   */\n  private transformToDbSchema(\n    formData: HouseholdFormData,\n    userAddress?: UserAddress\n  ): Partial<HouseholdRecord> {\n    return {\n      // Primary identification\n      code: formData.code,\n      name: formData.name || null,\n      address: formData.address || null,\n\n      // Location details\n      house_number: formData.house_number,\n      street_id: formData.street_id,\n      subdivision_id: formData.subdivision_id || null,\n      barangay_code: formData.barangay_code || userAddress?.barangay_code,\n      city_municipality_code:\n        formData.city_municipality_code || userAddress?.city_municipality_code,\n      province_code: formData.province_code || userAddress?.province_code || null,\n      region_code: formData.region_code || userAddress?.region_code,\n      zip_code: formData.zip_code || null,\n\n      // Household metrics\n      no_of_families: formData.no_of_families || 1,\n      no_of_household_members: formData.no_of_household_members || 0,\n      no_of_migrants: formData.no_of_migrants || 0,\n\n      // Household classifications\n      household_type: formData.household_type || null,\n      tenure_status: formData.tenure_status || null,\n      tenure_others_specify: formData.tenure_others_specify || null,\n      household_unit: formData.household_unit || null,\n\n      // Economic information\n      monthly_income: formData.monthly_income || null,\n      income_class: formData.income_class || null,\n\n      // Head of household\n      household_head_id: formData.household_head_id || null,\n      household_head_position: formData.household_head_position || null,\n\n      // Status and audit fields\n      is_active: true,\n    };\n  }\n\n  /**\n   * Create a new household\n   */\n  async createHousehold({\n    formData,\n    userAddress,\n    barangay_code,\n    csrf_token,\n  }: CreateHouseholdRequest): Promise<CreateHouseholdResponse> {\n    try {\n      // Validate form data\n      const validationResult = this.validateHousehold(formData);\n      if (!validationResult.success) {\n        return {\n          success: false,\n          error: 'Please fill in all required fields correctly',\n          data: { validationErrors: validationResult.errors } as any,\n        };\n      }\n\n      // Generate household code if not provided\n      if (!formData.code) {\n        formData.code = this.generateHouseholdCode(barangay_code || formData.barangay_code);\n      }\n\n      // Transform data to database schema\n      const householdData = this.transformToDbSchema(formData, userAddress);\n\n      // Set barangay code from parameter if provided\n      if (barangay_code) {\n        householdData.barangay_code = barangay_code;\n      }\n\n      logger.info('Creating household', { householdCode: formData.code });\n\n      // Insert household into database\n      const { data, error } = await supabase.from('households').insert([householdData]).select();\n\n      if (error) {\n        dbLogger.error('Failed to create household', {\n          error: error.message,\n          code: error.code,\n        });\n\n        return {\n          success: false,\n          error: `Failed to create household: ${error.message}`,\n        };\n      }\n\n      dbLogger.info('Household created successfully', {\n        recordId: data[0]?.code,\n        householdCode: formData.code,\n      });\n\n      return {\n        success: true,\n        data: data[0],\n      };\n    } catch (error) {\n      logger.error('Unexpected error during household creation', error);\n      return {\n        success: false,\n        error: 'An unexpected error occurred. Please try again.',\n      };\n    }\n  }\n\n  /**\n   * Get household by code (primary key)\n   */\n  async getHousehold(code: string) {\n    try {\n      const { data, error } = await supabase\n        .from('households')\n        .select('*')\n        .eq('code', code)\n        .eq('is_active', true)\n        .single();\n\n      if (error) {\n        dbLogger.error('Failed to fetch household', { error: error.message, code });\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error('Unexpected error fetching household', error);\n      return { success: false, error: 'Failed to fetch household' };\n    }\n  }\n\n  /**\n   * Get household by code\n   */\n  async getHouseholdByCode(code: string) {\n    try {\n      const { data, error } = await supabase\n        .from('households')\n        .select('*')\n        .eq('code', code)\n        .single();\n\n      if (error) {\n        dbLogger.error('Failed to fetch household by code', { error: error.message, code });\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error('Unexpected error fetching household by code', error);\n      return { success: false, error: 'Failed to fetch household' };\n    }\n  }\n\n  /**\n   * List households with pagination\n   */\n  async listHouseholds(page = 1, limit = 10) {\n    try {\n      const offset = (page - 1) * limit;\n\n      const { data, error, count } = await supabase\n        .from('households')\n        .select('*', { count: 'exact' })\n        .eq('is_active', true)\n        .range(offset, offset + limit - 1)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        dbLogger.error('Failed to list households', { error: error.message });\n        return { success: false, error: error.message };\n      }\n\n      return {\n        success: true,\n        data,\n        pagination: {\n          page,\n          limit,\n          total: count || 0,\n          pages: Math.ceil((count || 0) / limit),\n        },\n      };\n    } catch (error) {\n      logger.error('Unexpected error listing households', error);\n      return { success: false, error: 'Failed to list households' };\n    }\n  }\n\n  /**\n   * Update household information - using exact database field names\n   */\n  async updateHousehold(code: string, updates: Partial<HouseholdFormData>) {\n    try {\n      // Transform updates to match exact database schema\n      const dbUpdates: Partial<HouseholdRecord> = {};\n\n      // Only update fields that are provided\n      if (updates.name !== undefined) dbUpdates.name = updates.name;\n      if (updates.address !== undefined) dbUpdates.address = updates.address;\n      if (updates.house_number !== undefined) dbUpdates.house_number = updates.house_number;\n      if (updates.street_id !== undefined) dbUpdates.street_id = updates.street_id;\n      if (updates.subdivision_id !== undefined) dbUpdates.subdivision_id = updates.subdivision_id;\n      if (updates.barangay_code !== undefined) dbUpdates.barangay_code = updates.barangay_code;\n      if (updates.city_municipality_code !== undefined)\n        dbUpdates.city_municipality_code = updates.city_municipality_code;\n      if (updates.province_code !== undefined) dbUpdates.province_code = updates.province_code;\n      if (updates.region_code !== undefined) dbUpdates.region_code = updates.region_code;\n      if (updates.zip_code !== undefined) dbUpdates.zip_code = updates.zip_code;\n      if (updates.no_of_families !== undefined) dbUpdates.no_of_families = updates.no_of_families;\n      if (updates.no_of_household_members !== undefined)\n        dbUpdates.no_of_household_members = updates.no_of_household_members;\n      if (updates.no_of_migrants !== undefined) dbUpdates.no_of_migrants = updates.no_of_migrants;\n      if (updates.household_type !== undefined) dbUpdates.household_type = updates.household_type;\n      if (updates.tenure_status !== undefined) dbUpdates.tenure_status = updates.tenure_status;\n      if (updates.tenure_others_specify !== undefined)\n        dbUpdates.tenure_others_specify = updates.tenure_others_specify;\n      if (updates.household_unit !== undefined) dbUpdates.household_unit = updates.household_unit;\n      if (updates.monthly_income !== undefined) dbUpdates.monthly_income = updates.monthly_income;\n      if (updates.income_class !== undefined) dbUpdates.income_class = updates.income_class;\n      if (updates.household_head_id !== undefined)\n        dbUpdates.household_head_id = updates.household_head_id;\n      if (updates.household_head_position !== undefined)\n        dbUpdates.household_head_position = updates.household_head_position;\n\n      // Always update the timestamp\n      dbUpdates.updated_at = new Date().toISOString();\n\n      const { data, error } = await supabase\n        .from('households')\n        .update(dbUpdates)\n        .eq('code', code) // Use code instead of id as primary key\n        .select();\n\n      if (error) {\n        dbLogger.error('Failed to update household', { error: error.message, code });\n        return { success: false, error: error.message };\n      }\n\n      dbLogger.info('Household updated successfully', { code });\n      return { success: true, data: data[0] };\n    } catch (error) {\n      logger.error('Unexpected error updating household', error);\n      return { success: false, error: 'Failed to update household' };\n    }\n  }\n\n  /**\n   * Delete household (soft delete by setting is_active = false)\n   */\n  async deleteHousehold(code: string) {\n    try {\n      // Soft delete - set is_active to false instead of hard delete\n      const { error } = await supabase\n        .from('households')\n        .update({\n          is_active: false,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('code', code); // Use code as primary key\n\n      if (error) {\n        dbLogger.error('Failed to delete household', { error: error.message, code });\n        return { success: false, error: error.message };\n      }\n\n      dbLogger.info('Household deleted successfully', { code });\n      return { success: true };\n    } catch (error) {\n      logger.error('Unexpected error deleting household', error);\n      return { success: false, error: 'Failed to delete household' };\n    }\n  }\n}\n\n// Export singleton instance\nexport const householdService = new HouseholdService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/services/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/services/resident-details-fetcher.ts","messages":[{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2963,2966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2963,2966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3188,3191],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3188,3191],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3476,3479],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3476,3479],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":133,"column":12,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":133,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Optimized data fetching utilities for resident details page\n * Replaces sequential queries with optimized batch operations\n */\n\nimport { supabase, logger } from '@/lib';\nimport type { AddressInfo } from '@/types/addresses';\n\n// Re-export consolidated PSOC info type\nexport type { PsocInfo } from '@/types/services';\n\n// Import for local usage\nimport type { PsocInfo } from '@/types/services';\n\n// Consolidated type moved to src/types/addresses.ts\n\n/**\n * Optimized address fetcher - tries efficient view first, falls back gracefully\n */\nexport const fetchAddressInfo = async (barangayCode: string): Promise<AddressInfo | undefined> => {\n  try {\n    logger.debug('Loading address information', { barangayCode });\n\n    // Try address hierarchy view first (most efficient)\n    const { data: addressViewData, error: viewError } = await supabase\n      .from('psgc_address_hierarchy')\n      .select(\n        'barangay_name, barangay_code, city_municipality_name, city_municipality_code, province_name, region_name, region_code, full_address'\n      )\n      .eq('barangay_code', barangayCode)\n      .single();\n\n    if (addressViewData && !viewError) {\n      return {\n        barangay_name: addressViewData.barangay_name,\n        barangay_code: addressViewData.barangay_code || barangayCode,\n        city_municipality_name: addressViewData.city_municipality_name,\n        city_municipality_code: addressViewData.city_municipality_code || '',\n        province_name: addressViewData.province_name,\n        region_name: addressViewData.region_name,\n        region_code: addressViewData.region_code || '',\n        full_address: addressViewData.full_address,\n      };\n    }\n\n    // Fallback to optimized join query (much faster than sequential queries)\n    return await fetchAddressFromJoinedTables(barangayCode);\n  } catch (addressError) {\n    logger.warn('Address data lookup failed', {\n      error: addressError instanceof Error ? addressError.message : 'Unknown error',\n    });\n    return undefined;\n  }\n};\n\n/**\n * Optimized address fallback - single join query instead of sequential queries\n */\nconst fetchAddressFromJoinedTables = async (\n  barangayCode: string\n): Promise<AddressInfo | undefined> => {\n  try {\n    logger.debug('Using optimized join query for address data');\n\n    // Single optimized query with joins instead of sequential queries\n    const { data, error } = await supabase\n      .from('psgc_barangays')\n      .select(\n        `\n        name,\n        code,\n        psgc_cities_municipalities(\n          name,\n          code,\n          is_independent,\n          psgc_provinces(\n            name,\n            code,\n            psgc_regions(\n              name,\n              code\n            )\n          )\n        )\n      `\n      )\n      .eq('code', barangayCode)\n      .single();\n\n    if (!data || error) {\n      logger.warn('Optimized address query failed', { error: error?.message });\n      return undefined;\n    }\n\n    const typedData = data as any;\n    const city = typedData.psgc_cities_municipalities;\n    const province = city?.psgc_provinces;\n    const region = province?.psgc_regions;\n\n    const addressParts = [\n      data.name,\n      city?.name,\n      !(city as any)?.is_independent ? province?.name : null,\n      region?.name,\n    ].filter(Boolean);\n\n    return {\n      barangay_name: data.name,\n      barangay_code: data.code,\n      city_municipality_name: city?.name,\n      city_municipality_code: city?.code || '',\n      province_name: !(city as any)?.is_independent ? province?.name : undefined,\n      region_name: region?.name,\n      region_code: region?.code || '',\n      full_address: addressParts.join(', '),\n    };\n  } catch (error) {\n    logger.warn('Fallback address query failed', {\n      error: error instanceof Error ? error.message : 'Unknown error',\n    });\n    return undefined;\n  }\n};\n\n/**\n * Optimized PSOC fetcher with caching\n */\nconst psocCache = new Map<string, PsocInfo>();\n\nexport const fetchPsocInfo = async (occupationCode: string): Promise<PsocInfo | null> => {\n  // Check cache first\n  if (psocCache.has(occupationCode)) {\n    return psocCache.get(occupationCode)!;\n  }\n\n  try {\n    const { data: psocData, error } = await supabase\n      .from('psoc_occupation_search')\n      .select('occupation_code, occupation_title, full_hierarchy')\n      .eq('occupation_code', occupationCode)\n      .single();\n\n    if (psocData && !error) {\n      const psocInfo = {\n        code: psocData.occupation_code,\n        title: psocData.occupation_title,\n        hierarchy: psocData.full_hierarchy || psocData.occupation_title,\n        level: 'occupation',\n      };\n\n      // Cache the result\n      psocCache.set(occupationCode, psocInfo);\n      return psocInfo;\n    }\n\n    return null;\n  } catch (psocError) {\n    logger.warn('PSOC data lookup failed', {\n      error: psocError instanceof Error ? psocError.message : 'Unknown error',\n    });\n    return null;\n  }\n};\n\n/**\n * Batch fetch multiple resident details efficiently\n */\nexport const fetchResidentDetailsOptimized = async (\n  barangayCode?: string,\n  occupationCode?: string\n): Promise<{\n  addressInfo?: AddressInfo;\n  psocInfo?: PsocInfo;\n}> => {\n  // Use Promise.allSettled for parallel execution with graceful error handling\n  const [addressResult, psocResult] = await Promise.allSettled([\n    barangayCode ? fetchAddressInfo(barangayCode) : Promise.resolve(undefined),\n    occupationCode ? fetchPsocInfo(occupationCode) : Promise.resolve(null),\n  ]);\n\n  return {\n    addressInfo: addressResult.status === 'fulfilled' ? addressResult.value : undefined,\n    psocInfo: psocResult.status === 'fulfilled' ? psocResult.value || undefined : undefined,\n  };\n};\n\n/**\n * Clear PSOC cache when needed\n */\nexport const clearPsocCache = (): void => {\n  psocCache.clear();\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/services/resident-mapper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/services/resident-repository.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1095,1098],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1095,1098],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2529,2532],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2529,2532],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Resident Repository\n * Domain-specific repository for resident data operations\n */\n\nimport type { SupabaseClient } from '@supabase/supabase-js';\n\nimport { validateResidentData } from '@/lib/validation/schemas';\nimport type { ValidationContext } from '@/lib/validation/types';\nimport type { ResidentData, ResidentSearchOptions } from '@/types/repositories';\nimport type { RepositoryResult } from '@/types/services';\nimport type { ValidationError } from '@/types/validation';\n\nimport { BaseRepository } from './base-repository';\n\n// Export types for re-export in services/index.ts\nexport type { ResidentSearchOptions };\n\nexport class ResidentRepository extends BaseRepository<ResidentData> {\n  constructor(context?: ValidationContext) {\n    super('residents', context);\n  }\n\n  /**\n   * Create a new resident with validation\n   */\n  async createResident(\n    data: Omit<ResidentData, 'id' | 'created_at' | 'updated_at'>\n  ): Promise<RepositoryResult<ResidentData>> {\n    try {\n      // Validate resident data before creation\n      const validationResult = await validateResidentData(data as any, this.context);\n      if (!validationResult.isValid) {\n        return {\n          success: false,\n          error: {\n            code: 'VALIDATION_ERROR',\n            message: 'Resident data validation failed',\n            details: Array.isArray(validationResult.errors)\n              ? validationResult.errors.reduce(\n                  (acc: Record<string, string>, error: ValidationError, index: number) => ({\n                    ...acc,\n                    [`error_${index}`]: error.message,\n                  }),\n                  {} as Record<string, string>\n                )\n              : validationResult.errors,\n          },\n        };\n      }\n\n      return await this.create(data);\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'createResident'),\n      };\n    }\n  }\n\n  /**\n   * Update resident with validation\n   */\n  async updateResident(\n    id: string,\n    data: Partial<Omit<ResidentData, 'id' | 'created_at'>>\n  ): Promise<RepositoryResult<ResidentData>> {\n    try {\n      // Get existing resident for partial validation\n      const existingResult = await this.findById(id);\n      if (!existingResult.success || !existingResult.data) {\n        return existingResult;\n      }\n\n      // Merge with existing data for validation\n      const mergedData = { ...existingResult.data, ...data };\n      const validationResult = await validateResidentData(mergedData as any, this.context);\n\n      if (!validationResult.isValid) {\n        return {\n          success: false,\n          error: {\n            code: 'VALIDATION_ERROR',\n            message: 'Resident data validation failed',\n            details: Array.isArray(validationResult.errors)\n              ? validationResult.errors.reduce(\n                  (acc: Record<string, string>, error: ValidationError, index: number) => ({\n                    ...acc,\n                    [`error_${index}`]: error.message,\n                  }),\n                  {} as Record<string, string>\n                )\n              : validationResult.errors,\n          },\n        };\n      }\n\n      return await this.update(id, data);\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'updateResident'),\n      };\n    }\n  }\n\n  /**\n   * Search residents with advanced filtering\n   */\n  async searchResidents(\n    options: ResidentSearchOptions = {}\n  ): Promise<RepositoryResult<ResidentData[]>> {\n    try {\n      const queryBuilder = (supabase: SupabaseClient) => {\n        let query = supabase.from(this.tableName).select('*', { count: 'exact' });\n\n        // Name search (across first, middle, last names)\n        if (options.name) {\n          const searchTerm = `%${options.name}%`;\n          query = query.or(\n            `first_name.ilike.${searchTerm},middle_name.ilike.${searchTerm},last_name.ilike.${searchTerm}`\n          );\n        }\n\n        // Age search (calculated from birthdate)\n        if (options.age) {\n          const currentYear = new Date().getFullYear();\n          const birthYear = currentYear - options.age;\n          query = query\n            .gte('birthdate', `${birthYear}-01-01`)\n            .lt('birthdate', `${birthYear + 1}-01-01`);\n        }\n\n        // Direct field filters\n        if (options.sex) query = query.eq('sex', options.sex);\n        if (options.civil_status) query = query.eq('civil_status', options.civil_status);\n        if (options.household_code) query = query.eq('household_code', options.household_code);\n        if (options.is_voter !== undefined) query = query.eq('is_voter', options.is_voter);\n\n        // Apply other filters\n        if (options.filters) {\n          for (const [key, value] of Object.entries(options.filters)) {\n            if (value !== undefined && value !== null) {\n              query = query.eq(key, value);\n            }\n          }\n        }\n\n        // Apply ordering\n        if (options.orderBy) {\n          query = query.order(options.orderBy, {\n            ascending: options.orderDirection !== 'desc',\n          });\n        } else {\n          // Default order by last name, first name\n          query = query.order('last_name').order('first_name');\n        }\n\n        // Apply pagination\n        if (options.limit) {\n          query = query.limit(options.limit);\n        }\n\n        if (options.offset) {\n          query = query.range(options.offset, options.offset + (options.limit || 10) - 1);\n        }\n\n        return query;\n      };\n\n      return await this.executeQuery(queryBuilder, 'SEARCH_RESIDENTS');\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'searchResidents'),\n      };\n    }\n  }\n\n  /**\n   * Find residents by household\n   */\n  async findByHousehold(household_code: string): Promise<RepositoryResult<ResidentData[]>> {\n    try {\n      return await this.findAll({\n        filters: { household_code },\n        orderBy: 'last_name',\n      });\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'findByHousehold'),\n      };\n    }\n  }\n\n  /**\n   * Find residents by age range\n   */\n  async findByAgeRange(minAge: number, maxAge: number): Promise<RepositoryResult<ResidentData[]>> {\n    try {\n      const currentDate = new Date();\n      const maxBirthDate = new Date(\n        currentDate.getFullYear() - minAge,\n        currentDate.getMonth(),\n        currentDate.getDate()\n      );\n      const minBirthDate = new Date(\n        currentDate.getFullYear() - maxAge - 1,\n        currentDate.getMonth(),\n        currentDate.getDate()\n      );\n\n      const queryBuilder = (supabase: SupabaseClient) => {\n        return supabase\n          .from(this.tableName)\n          .select('*', { count: 'exact' })\n          .gte('birthdate', minBirthDate.toISOString().split('T')[0])\n          .lte('birthdate', maxBirthDate.toISOString().split('T')[0])\n          .order('birthdate');\n      };\n\n      return await this.executeQuery(queryBuilder, 'FIND_BY_AGE_RANGE');\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'findByAgeRange'),\n      };\n    }\n  }\n\n  /**\n   * Get voter statistics\n   */\n  async getVoterStatistics(): Promise<\n    RepositoryResult<{\n      totalResidents: number;\n      totalVoters: number;\n      residentVoters: number;\n      voterTurnoutRate: number;\n    }>\n  > {\n    try {\n      const queryBuilder = (supabase: SupabaseClient) => {\n        return supabase\n          .from(this.tableName)\n          .select(\n            `\n            count(*) as totalResidents,\n            is_voter,\n            is_resident_voter\n          `\n          )\n          .gte('birthdate', '1900-01-01'); // Basic filter to ensure valid data\n      };\n\n      const result = await this.executeQuery(queryBuilder, 'GET_VOTER_STATISTICS');\n\n      if (!result.success || !result.data) {\n        return result;\n      }\n\n      // Calculate statistics from the data\n      const stats = {\n        totalResidents: 0,\n        totalVoters: 0,\n        residentVoters: 0,\n        voterTurnoutRate: 0,\n      };\n\n      // This would need to be adjusted based on actual Supabase aggregation results\n      // For now, we'll return the structure\n      return {\n        success: true,\n        data: stats,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'getVoterStatistics'),\n      };\n    }\n  }\n\n  /**\n   * Check for duplicate residents (same name and birthdate)\n   */\n  async findPotentialDuplicates(\n    first_name: string,\n    last_name: string,\n    birthdate: string\n  ): Promise<RepositoryResult<ResidentData[]>> {\n    try {\n      const queryBuilder = (supabase: SupabaseClient) => {\n        return supabase\n          .from(this.tableName)\n          .select('*')\n          .eq('first_name', first_name)\n          .eq('last_name', last_name)\n          .eq('birthdate', birthdate);\n      };\n\n      return await this.executeQuery(queryBuilder, 'FIND_POTENTIAL_DUPLICATES');\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'findPotentialDuplicates'),\n      };\n    }\n  }\n\n  /**\n   * Soft delete resident (mark as inactive)\n   */\n  async softDeleteResident(id: string): Promise<RepositoryResult<ResidentData>> {\n    try {\n      return await this.update(id, {\n        is_active: false,\n        updated_at: new Date().toISOString(),\n      });\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'softDeleteResident'),\n      };\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/services/resident.service.ts","messages":[{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":52},{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":19,"column":1,"nodeType":"ImportDeclaration","endLine":19,"endColumn":88},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BaseValidationResult' is defined but never used.","line":19,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BaseResidentFormData' is defined but never used.","line":23,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":50},{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":24,"column":1,"nodeType":"ImportDeclaration","endLine":29,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ValidationError' is defined but never used.","line":39,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":30},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":52,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":52,"endColumn":18,"suggestions":[{"fix":{"range":[1652,1703],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1764,1767],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1764,1767],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":54,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":54,"endColumn":18,"suggestions":[{"fix":{"range":[1776,1818],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":56,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":56,"endColumn":20,"suggestions":[{"fix":{"range":[1854,1935],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":77,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":77,"endColumn":24,"suggestions":[{"fix":{"range":[2815,2901],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":84,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":84,"endColumn":22,"suggestions":[{"fix":{"range":[3088,3175],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'philsysLast4' is defined but never used. Allowed unused args must match /^_/u.","line":161,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":161,"endColumn":17},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":231,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":231,"endColumn":18,"suggestions":[{"fix":{"range":[7629,7701],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":240,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":240,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8056,8059],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8056,8059],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Resident Service\n * Business logic and API operations for resident management\n * Handles data transformation, validation, and database operations\n * Follows standardized service pattern\n */\n\nimport { createLogger } from '@/lib/config/environment';\nimport { supabase } from '@/lib/data/supabase';\nimport { logError, dbLogger } from '@/lib/logging';\n\nconst logger = createLogger('ResidentService');\nimport {\n  hashPhilSysNumber,\n  extractPhilSysLast4,\n  logSecurityOperation,\n} from '@/lib/security/crypto';\nimport { validateResidentData } from '@/lib/validation';\nimport type { ValidationResult as BaseValidationResult } from '@/lib/validation/types';\n\n// Import database types\nimport { ResidentRecord } from '@/types/database';\nimport { ResidentFormData as BaseResidentFormData } from '@/types/forms';\nimport {\n  EducationLevelEnum,\n  EmploymentStatusEnum,\n  ReligionEnum,\n  EthnicityEnum,\n} from '@/types/residents';\n\n// Types moved to src/types/services.ts for consolidation\nimport type {\n  ServiceResidentFormData as ResidentFormData,\n  ServiceUserAddress as UserAddress,\n  ServiceCreateResidentRequest as CreateResidentRequest,\n  ServiceCreateResidentResponse as CreateResidentResponse,\n  ResidentValidationResult,\n} from '@/types/services';\nimport type { ValidationError } from '@/types/validation';\nimport { validatePhilSysFormat } from '@/utils/sanitization-utils';\n\n/**\n * Resident Service Class\n * Contains all business logic for resident operations\n */\nexport class ResidentService {\n  /**\n   * Validate resident form data\n   */\n  async validateResident(formData: ResidentFormData): Promise<ResidentValidationResult> {\n    try {\n      console.log('Validating resident data:', formData);\n      const result = await validateResidentData(formData as any);\n      console.log('Validation result:', result);\n      if (result.errors) {\n        console.log('Validation errors detail:', JSON.stringify(result.errors, null, 2));\n      }\n\n      // Ensure the result matches our interface\n      if (!result.isValid) {\n        const errors = result.errors\n          ? Array.isArray(result.errors)\n            ? result.errors\n            : Object.entries(result.errors).map(([field, message]) => ({\n                field,\n                message: String(message),\n              }))\n          : [{ field: 'general', message: 'Validation failed' }];\n\n        // Filter out validation errors for fields that weren't submitted\n        // This handles cases where hidden form sections have fields that fail validation\n        // but the user never had the opportunity to fill them out\n        const submittedFields = Object.keys(formData);\n        const filteredErrors = errors.filter(error => {\n          const isFieldSubmitted = submittedFields.includes(error.field);\n          if (!isFieldSubmitted) {\n            console.log(`Filtering out validation error for non-submitted field: ${error.field}`);\n          }\n          return isFieldSubmitted;\n        });\n\n        // If we filtered out all errors, consider validation successful\n        if (filteredErrors.length === 0) {\n          console.log('All validation errors were for non-submitted fields. Treating as valid.');\n          return { isValid: true, success: true };\n        }\n\n        console.error('Validation failed with errors:', filteredErrors);\n        return {\n          isValid: false,\n          success: false,\n          errors: filteredErrors,\n        };\n      }\n      return { isValid: true, success: true };\n    } catch (error) {\n      console.error('Validation exception:', error);\n      logError(error as Error, 'RESIDENT_VALIDATION_ERROR');\n      return {\n        isValid: false,\n        success: false,\n        errors: [\n          {\n            field: 'general',\n            message: error instanceof Error ? error.message : 'Validation error occurred',\n          },\n        ],\n      };\n    }\n  }\n\n  /**\n   * Validate and process PhilSys card number\n   */\n  async processPhilSysNumber(philsysNumber?: string): Promise<{\n    success: boolean;\n    hash?: string;\n    last4?: string;\n    error?: string;\n  }> {\n    if (!philsysNumber) {\n      return { success: true };\n    }\n\n    // Validate format\n    if (!validatePhilSysFormat(philsysNumber)) {\n      return {\n        success: false,\n        error: 'Invalid PhilSys card number format. Please use format: 1234-5678-9012-3456',\n      };\n    }\n\n    try {\n      const hash = await hashPhilSysNumber(philsysNumber);\n      const last4 = extractPhilSysLast4(philsysNumber);\n\n      // Log security operation for audit trail\n      logSecurityOperation('PHILSYS_HASH_CREATED', 'current-user', {\n        action: 'resident_creation',\n        philsys_last4: last4,\n      });\n\n      return { success: true, hash, last4 };\n    } catch (error) {\n      logError(error as Error, 'PHILSYS_ENCRYPTION_ERROR');\n      return {\n        success: false,\n        error: 'Error processing PhilSys card number. Please try again.',\n      };\n    }\n  }\n\n  /**\n   * Transform form data to database schema - exact field mapping\n   */\n  private transformToDbSchema(\n    formData: ResidentFormData,\n    userAddress?: UserAddress,\n    barangayCode?: string,\n    philsysHash?: string,\n    philsysLast4?: string\n  ): Partial<ResidentRecord> {\n    return {\n      // Primary identification\n      philsys_card_number: philsysHash || formData.philsys_card_number || null,\n\n      // Personal details\n      first_name: formData.first_name,\n      middle_name: formData.middle_name || null,\n      last_name: formData.last_name,\n      extension_name: formData.extension_name || null,\n      birthdate: formData.birthdate,\n      birth_place_code: formData.birth_place_code || null,\n      sex: formData.sex,\n\n      // Civil status\n      civil_status: formData.civil_status || 'single',\n      civil_status_others_specify: formData.civil_status_others_specify || null,\n\n      // Education and employment\n      education_attainment: (formData.education_attainment as EducationLevelEnum) || null,\n      is_graduate: formData.is_graduate || false,\n      employment_status: (formData.employment_status as EmploymentStatusEnum) || null,\n      occupation_code: formData.occupation_code || null,\n\n      // Contact information\n      email: formData.email || null,\n      mobile_number: formData.mobile_number || null,\n      telephone_number: formData.telephone_number || null,\n\n      // Household membership\n      household_code: formData.household_code || null,\n\n      // Physical characteristics\n      height: formData.height || null,\n      weight: formData.weight || null,\n      complexion: formData.complexion || null,\n\n      // Voting information\n      is_voter: formData.is_voter || null,\n      is_resident_voter: formData.is_resident_voter || null,\n      last_voted_date: formData.last_voted_date || null,\n\n      // Cultural/religious identity\n      religion: (formData.religion as ReligionEnum) || 'roman_catholic',\n      religion_others_specify: formData.religion_others_specify || null,\n      ethnicity: (formData.ethnicity as EthnicityEnum) || null,\n      citizenship: formData.citizenship || 'filipino',\n      blood_type: formData.blood_type || null,\n\n      // Family information\n      mother_maiden_first: formData.mother_maiden_first || null,\n      mother_maiden_middle: formData.mother_maiden_middle || null,\n      mother_maiden_last: formData.mother_maiden_last || null,\n\n      // Status and audit fields\n      is_active: true,\n    };\n  }\n\n  /**\n   * Create a new resident\n   */\n  async createResident({\n    formData,\n    userAddress,\n    barangayCode,\n    csrfToken,\n  }: CreateResidentRequest): Promise<CreateResidentResponse> {\n    try {\n      console.log('Creating resident with data:', { formData, barangayCode });\n\n      // Validate form data\n      const validationResult = await this.validateResident(formData);\n      if (!validationResult.success) {\n        console.error('Validation failed:', validationResult.errors);\n        return {\n          success: false,\n          error: 'Validation failed',\n          data: { validationErrors: validationResult.errors } as any,\n        };\n      }\n\n      // Process PhilSys card number\n      const philsysResult = await this.processPhilSysNumber(formData.philsys_card_number);\n      if (!philsysResult.success) {\n        return {\n          success: false,\n          error: philsysResult.error,\n        };\n      }\n\n      // Transform data to database schema\n      const residentData = this.transformToDbSchema(\n        formData,\n        userAddress,\n        barangayCode,\n        philsysResult.hash,\n        philsysResult.last4\n      );\n\n      // Log security operation before database insert\n      logSecurityOperation('RESIDENT_CREATE_ATTEMPT', 'current-user', {\n        action: 'resident_creation',\n        has_philsys: !!formData.philsys_card_number,\n        household_code: formData.household_code,\n        barangay_code: barangayCode,\n        csrf_token_used: !!csrfToken,\n      });\n\n      logger.info('Creating resident with household assignment', {\n        householdCode: formData.household_code,\n      });\n\n      // Insert resident into database\n      const { data, error } = await supabase.from('residents').insert([residentData]).select();\n\n      if (error) {\n        // Log failed creation attempt\n        logSecurityOperation('RESIDENT_CREATE_FAILED', 'current-user', {\n          error_message: error.message,\n          error_code: error.code,\n        });\n        dbLogger.error('Failed to create resident', {\n          error: error.message,\n          code: error.code,\n        });\n\n        return {\n          success: false,\n          error: `Failed to create resident: ${error.message}`,\n        };\n      }\n\n      // Log successful creation\n      logSecurityOperation('RESIDENT_CREATED', 'current-user', {\n        resident_id: data[0]?.id,\n        household_code: formData.household_code,\n      });\n\n      dbLogger.info('Resident created successfully', {\n        recordId: data[0]?.id,\n        householdCode: formData.household_code,\n      });\n\n      // Handle household head assignment\n      // TODO: householdRole not in ResidentFormData interface - need to handle separately\n      /*\n      if (formData.householdRole === 'Head' && formData.householdCode && data?.[0]?.id) {\n        const householdResult = await this.updateHouseholdHead(formData.householdCode, data[0].id);\n\n        if (!householdResult.success) {\n          // Resident created but household head assignment failed\n          return {\n            success: true,\n            data: data[0],\n            error: `Resident created but failed to assign as household head: ${householdResult.error}`,\n          };\n        }\n      }\n      */\n\n      return {\n        success: true,\n        data: data[0],\n      };\n    } catch (error) {\n      logger.error('Unexpected error during resident creation', error);\n      return {\n        success: false,\n        error: 'An unexpected error occurred. Please try again.',\n      };\n    }\n  }\n\n  /**\n   * Update household head assignment\n   */\n  private async updateHouseholdHead(\n    householdCode: string,\n    headId: string\n  ): Promise<{\n    success: boolean;\n    error?: string;\n  }> {\n    try {\n      logger.info('Updating household head assignment');\n\n      const { error } = await supabase\n        .from('households')\n        .update({ household_head_id: headId })\n        .eq('code', householdCode);\n\n      if (error) {\n        dbLogger.error('Error updating household head', { error: error.message });\n        return {\n          success: false,\n          error: error.message,\n        };\n      }\n\n      dbLogger.info('Household head updated successfully', {\n        householdCode,\n        headId,\n      });\n\n      return { success: true };\n    } catch (error) {\n      logger.error('Unexpected error updating household head', error);\n      return {\n        success: false,\n        error: 'Unexpected error occurred',\n      };\n    }\n  }\n\n  /**\n   * Get resident by ID\n   */\n  async getResident(id: string) {\n    try {\n      const { data, error } = await supabase.from('residents').select('*').eq('id', id).single();\n\n      if (error) {\n        dbLogger.error('Failed to fetch resident', { error: error.message, id });\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error('Unexpected error fetching resident', error);\n      return { success: false, error: 'Failed to fetch resident' };\n    }\n  }\n\n  /**\n   * List residents with pagination\n   */\n  async listResidents(page = 1, limit = 10) {\n    try {\n      const offset = (page - 1) * limit;\n\n      const { data, error, count } = await supabase\n        .from('residents')\n        .select('*', { count: 'exact' })\n        .range(offset, offset + limit - 1)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        dbLogger.error('Failed to list residents', { error: error.message });\n        return { success: false, error: error.message };\n      }\n\n      return {\n        success: true,\n        data,\n        pagination: {\n          page,\n          limit,\n          total: count || 0,\n          pages: Math.ceil((count || 0) / limit),\n        },\n      };\n    } catch (error) {\n      logger.error('Unexpected error listing residents', error);\n      return { success: false, error: 'Failed to list residents' };\n    }\n  }\n}\n\n// Export singleton instance\nexport const residentService = new ResidentService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/services/security-audit-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1620,1623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1620,1623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":79,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":79,"endColumn":21,"suggestions":[{"fix":{"range":[2207,2521],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":113,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":113,"endColumn":23,"suggestions":[{"fix":{"range":[3362,3695],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":389,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":389,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11039,11042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11039,11042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":392,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":392,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11183,11186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11183,11186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":394,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":394,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11315,11318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11315,11318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Security Audit Service\n * CONSOLIDATED - Security audit logging and threat detection\n * Consolidates lib/security/audit-storage.ts functionality\n */\n\nimport { createClient } from '@supabase/supabase-js';\n\nimport { createLogger } from '../lib/config/environment';\n\nconst logger = createLogger('SecurityAuditService');\n\nexport interface SecurityAuditLog {\n  id?: string;\n  operation: string;\n  user_id: string;\n  resource_type?: string;\n  resource_id?: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  details: Record<string, unknown>;\n  ip_address?: string;\n  user_agent?: string;\n  session_id?: string;\n  timestamp: string;\n  success: boolean;\n  error_message?: string;\n}\n\nexport interface ThreatDetectionEvent {\n  id?: string;\n  event_type: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  source_ip: string;\n  user_id?: string;\n  details: Record<string, unknown>;\n  timestamp: string;\n  mitigated: boolean;\n  mitigation_action?: string;\n}\n\n// Audit event types for security tracking\nexport enum AuditEventType {\n  SQL_INJECTION_ATTEMPT = 'sql_injection_attempt',\n  XSS_ATTEMPT = 'xss_attempt',\n  UNAUTHORIZED_ACCESS = 'unauthorized_access',\n  RATE_LIMIT_EXCEEDED = 'rate_limit_exceeded',\n  MALICIOUS_FILE_UPLOAD = 'malicious_file_upload',\n  SUSPICIOUS_ACTIVITY = 'suspicious_activity',\n  LOGIN_SUCCESS = 'login_success',\n  LOGIN_FAILURE = 'login_failure',\n  DATA_ACCESS = 'data_access',\n  DATA_MODIFICATION = 'data_modification',\n}\n\n/**\n * Security Audit Service Class\n * Centralized security event logging and monitoring\n */\nexport class SecurityAuditService {\n  private adminClient: any;\n\n  constructor() {\n    // Initialize admin client only if environment variables are available\n    if (process.env.NEXT_PUBLIC_SUPABASE_URL && process.env.SUPABASE_SERVICE_ROLE_KEY) {\n      this.adminClient = createClient(\n        process.env.NEXT_PUBLIC_SUPABASE_URL,\n        process.env.SUPABASE_SERVICE_ROLE_KEY\n      );\n    }\n  }\n\n  /**\n   * Store security audit log in secure database\n   */\n  async storeSecurityAuditLog(auditLog: SecurityAuditLog): Promise<void> {\n    try {\n      // Fallback to console logging if no database connection\n      if (!this.adminClient) {\n        console.info(\n          '[SECURITY AUDIT - Console Only]',\n          JSON.stringify({\n            operation: auditLog.operation,\n            user_id: auditLog.user_id,\n            severity: auditLog.severity,\n            timestamp: auditLog.timestamp,\n            details: auditLog.details,\n          })\n        );\n        return;\n      }\n\n      const { error } = await this.adminClient.from('security_audit_logs').insert({\n        operation: auditLog.operation,\n        user_id: auditLog.user_id,\n        resource_type: auditLog.resource_type,\n        resource_id: auditLog.resource_id,\n        severity: auditLog.severity,\n        details: auditLog.details,\n        ip_address: auditLog.ip_address,\n        user_agent: auditLog.user_agent,\n        session_id: auditLog.session_id,\n        timestamp: auditLog.timestamp,\n        success: auditLog.success,\n        error_message: auditLog.error_message,\n      });\n\n      if (error) {\n        // If table doesn't exist, fall back to console logging\n        if (\n          error.code === 'PGRST116' ||\n          error.message?.includes('relation \"security_audit_logs\" does not exist')\n        ) {\n          console.info(\n            '[SECURITY AUDIT - Table Missing]',\n            JSON.stringify({\n              operation: auditLog.operation,\n              user_id: auditLog.user_id,\n              severity: auditLog.severity,\n              timestamp: auditLog.timestamp,\n              details: auditLog.details,\n            })\n          );\n        } else {\n          logger.error('Failed to store security audit log', { error, auditLog });\n        }\n      } else {\n        logger.debug('Security audit log stored successfully', { operation: auditLog.operation });\n      }\n\n      // For critical security events, also send to external monitoring\n      if (auditLog.severity === 'critical') {\n        await this.sendCriticalSecurityAlert(auditLog);\n      }\n    } catch (error) {\n      logger.error('Security audit storage service error', { error });\n      // Don't throw error to avoid disrupting main application flow\n    }\n  }\n\n  /**\n   * Store threat detection event\n   */\n  async storeThreatDetectionEvent(event: ThreatDetectionEvent): Promise<void> {\n    try {\n      if (!this.adminClient) {\n        console.warn('[THREAT DETECTION - No Database]', JSON.stringify(event));\n        return;\n      }\n\n      const { error } = await this.adminClient.from('threat_detection_events').insert({\n        event_type: event.event_type,\n        severity: event.severity,\n        source_ip: event.source_ip,\n        user_id: event.user_id,\n        details: event.details,\n        timestamp: event.timestamp,\n        mitigated: event.mitigated,\n        mitigation_action: event.mitigation_action,\n      });\n\n      if (error) {\n        logger.error('Failed to store threat detection event', { error, event });\n      } else {\n        logger.info('Threat detection event stored', {\n          eventType: event.event_type,\n          severity: event.severity,\n          sourceIp: event.source_ip,\n        });\n      }\n\n      // Auto-escalate high and critical threats\n      if (event.severity === 'high' || event.severity === 'critical') {\n        await this.escalateThreatEvent(event);\n      }\n    } catch (error) {\n      logger.error('Threat detection storage service error', { error });\n    }\n  }\n\n  /**\n   * Audit user authentication events\n   */\n  async auditAuthentication(\n    operation: 'login' | 'logout' | 'register' | 'password_change',\n    userId: string,\n    success: boolean,\n    context?: {\n      ipAddress?: string;\n      userAgent?: string;\n      sessionId?: string;\n      errorMessage?: string;\n    }\n  ): Promise<void> {\n    const auditLog: SecurityAuditLog = {\n      operation: `auth_${operation}`,\n      user_id: userId,\n      severity: success ? 'low' : 'medium',\n      details: {\n        operation,\n        success,\n        error_message: context?.errorMessage,\n      },\n      ip_address: context?.ipAddress,\n      user_agent: context?.userAgent,\n      session_id: context?.sessionId,\n      timestamp: new Date().toISOString(),\n      success,\n      error_message: context?.errorMessage,\n    };\n\n    await this.storeSecurityAuditLog(auditLog);\n  }\n\n  /**\n   * Audit data access operations\n   */\n  async auditDataAccess(\n    operation: 'read' | 'create' | 'update' | 'delete',\n    resourceType: string,\n    resourceId: string,\n    userId: string,\n    success: boolean,\n    context?: Record<string, unknown>\n  ): Promise<void> {\n    const auditLog: SecurityAuditLog = {\n      operation: `data_${operation}`,\n      user_id: userId,\n      resource_type: resourceType,\n      resource_id: resourceId,\n      severity: operation === 'delete' ? 'medium' : 'low',\n      details: {\n        operation,\n        resource_type: resourceType,\n        resource_id: resourceId,\n        ...context,\n      },\n      timestamp: new Date().toISOString(),\n      success,\n    };\n\n    await this.storeSecurityAuditLog(auditLog);\n  }\n\n  /**\n   * Audit security violations\n   */\n  async auditSecurityViolation(\n    eventType: AuditEventType,\n    context: {\n      userId?: string;\n      ipAddress?: string;\n      userAgent?: string;\n      details?: Record<string, unknown>;\n    }\n  ): Promise<void> {\n    try {\n      const threatEvent: ThreatDetectionEvent = {\n        event_type: eventType,\n        severity: this.getSeverityForEventType(eventType),\n        source_ip: context.ipAddress || 'unknown',\n        user_id: context.userId,\n        details: {\n          ...context.details,\n          user_agent: context.userAgent,\n        },\n        timestamp: new Date().toISOString(),\n        mitigated: true,\n        mitigation_action: 'Request blocked',\n      };\n\n      await this.storeThreatDetectionEvent(threatEvent);\n    } catch (error) {\n      logger.error('Failed to audit security violation', { error });\n    }\n  }\n\n  /**\n   * Query security audit logs for investigation\n   */\n  async querySecurityAuditLogs(filters: {\n    userId?: string;\n    operation?: string;\n    severity?: string;\n    startDate?: string;\n    endDate?: string;\n    limit?: number;\n  }): Promise<SecurityAuditLog[]> {\n    try {\n      if (!this.adminClient) {\n        logger.warn('Cannot query security logs - no database connection');\n        return [];\n      }\n\n      let query = this.adminClient\n        .from('security_audit_logs')\n        .select('*')\n        .order('timestamp', { ascending: false });\n\n      if (filters.userId) {\n        query = query.eq('user_id', filters.userId);\n      }\n\n      if (filters.operation) {\n        query = query.eq('operation', filters.operation);\n      }\n\n      if (filters.severity) {\n        query = query.eq('severity', filters.severity);\n      }\n\n      if (filters.startDate) {\n        query = query.gte('timestamp', filters.startDate);\n      }\n\n      if (filters.endDate) {\n        query = query.lte('timestamp', filters.endDate);\n      }\n\n      if (filters.limit) {\n        query = query.limit(filters.limit);\n      }\n\n      const { data, error } = await query;\n\n      if (error) {\n        logger.error('Failed to query security audit logs', { error, filters });\n        return [];\n      }\n\n      return data as SecurityAuditLog[];\n    } catch (error) {\n      logger.error('Security audit query service error', { error });\n      return [];\n    }\n  }\n\n  /**\n   * Get security statistics for dashboard\n   */\n  async getSecurityStatistics(timeframe: '24h' | '7d' | '30d' = '24h'): Promise<{\n    totalEvents: number;\n    criticalEvents: number;\n    threatEvents: number;\n    failedLogins: number;\n    suspiciousActivities: number;\n  }> {\n    try {\n      if (!this.adminClient) {\n        return {\n          totalEvents: 0,\n          criticalEvents: 0,\n          threatEvents: 0,\n          failedLogins: 0,\n          suspiciousActivities: 0,\n        };\n      }\n\n      const now = new Date();\n      let startDate: Date;\n\n      switch (timeframe) {\n        case '24h':\n          startDate = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n          break;\n        case '7d':\n          startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n          break;\n        case '30d':\n          startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n          break;\n      }\n\n      const [auditResults, threatResults] = await Promise.all([\n        this.adminClient\n          .from('security_audit_logs')\n          .select('severity, operation, success')\n          .gte('timestamp', startDate.toISOString()),\n        this.adminClient\n          .from('threat_detection_events')\n          .select('severity, event_type')\n          .gte('timestamp', startDate.toISOString()),\n      ]);\n\n      const auditLogs = auditResults.data || [];\n      const threatEvents = threatResults.data || [];\n\n      return {\n        totalEvents: auditLogs.length,\n        criticalEvents: auditLogs.filter((log: any) => log.severity === 'critical').length,\n        threatEvents: threatEvents.length,\n        failedLogins: auditLogs.filter(\n          (log: any) => log.operation.includes('login') && !log.success\n        ).length,\n        suspiciousActivities: threatEvents.filter((event: any) =>\n          ['suspicious_activity', 'brute_force', 'sql_injection'].includes(event.event_type)\n        ).length,\n      };\n    } catch (error) {\n      logger.error('Failed to get security statistics', { error });\n      return {\n        totalEvents: 0,\n        criticalEvents: 0,\n        threatEvents: 0,\n        failedLogins: 0,\n        suspiciousActivities: 0,\n      };\n    }\n  }\n\n  /**\n   * Send critical security alert to monitoring system\n   */\n  private async sendCriticalSecurityAlert(auditLog: SecurityAuditLog): Promise<void> {\n    try {\n      logger.error('CRITICAL SECURITY EVENT DETECTED', {\n        operation: auditLog.operation,\n        userId: auditLog.user_id,\n        timestamp: auditLog.timestamp,\n        details: auditLog.details,\n        alert: 'IMMEDIATE_ATTENTION_REQUIRED',\n      });\n\n      // TODO: Integrate with external alerting system\n      // await sendSlackAlert(auditLog);\n      // await sendSmsAlert(auditLog);\n      // await createPagerDutyIncident(auditLog);\n    } catch (error) {\n      logger.error('Failed to send critical security alert', { error, auditLog });\n    }\n  }\n\n  /**\n   * Escalate threat event for immediate response\n   */\n  private async escalateThreatEvent(event: ThreatDetectionEvent): Promise<void> {\n    try {\n      logger.warn('THREAT ESCALATION', {\n        eventType: event.event_type,\n        severity: event.severity,\n        sourceIp: event.source_ip,\n        userId: event.user_id,\n        escalated: true,\n      });\n\n      // TODO: Implement automated threat response\n      // if (event.severity === 'critical') {\n      //   await blockSourceIp(event.source_ip);\n      //   if (event.user_id) {\n      //     await suspendUserAccount(event.user_id);\n      //   }\n      // }\n    } catch (error) {\n      logger.error('Failed to escalate threat event', { error, event });\n    }\n  }\n\n  /**\n   * Get severity level for different event types\n   */\n  private getSeverityForEventType(\n    eventType: AuditEventType\n  ): 'low' | 'medium' | 'high' | 'critical' {\n    const severityMap: Record<AuditEventType, 'low' | 'medium' | 'high' | 'critical'> = {\n      [AuditEventType.SQL_INJECTION_ATTEMPT]: 'critical',\n      [AuditEventType.XSS_ATTEMPT]: 'high',\n      [AuditEventType.UNAUTHORIZED_ACCESS]: 'high',\n      [AuditEventType.RATE_LIMIT_EXCEEDED]: 'medium',\n      [AuditEventType.MALICIOUS_FILE_UPLOAD]: 'critical',\n      [AuditEventType.SUSPICIOUS_ACTIVITY]: 'medium',\n      [AuditEventType.LOGIN_SUCCESS]: 'low',\n      [AuditEventType.LOGIN_FAILURE]: 'medium',\n      [AuditEventType.DATA_ACCESS]: 'low',\n      [AuditEventType.DATA_MODIFICATION]: 'medium',\n    };\n\n    return severityMap[eventType] || 'medium';\n  }\n}\n\n// Export singleton instance\nexport const securityAuditService = new SecurityAuditService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/services/sync-service.ts","messages":[{"ruleId":"import/order","severity":1,"message":"`@/types/services` type import should occur before type import of `@/types/utilities`","line":23,"column":1,"nodeType":"ImportDeclaration","endLine":23,"endColumn":67},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1186,1189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1186,1189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":108,"column":56,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":108,"endColumn":64},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":112,"column":53,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":112,"endColumn":61},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":117,"column":51,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":117,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5386,5389],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5386,5389],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":223,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6078,6081],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6078,6081],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":249,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6797,6800],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6797,6800],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Sync Service\n * CONSOLIDATED - Background sync queue system for offline data synchronization\n * Consolidates lib/data/sync-queue.ts functionality\n */\n\nimport { ErrorCode, ErrorSeverity } from '@/types/errors';\nimport type { SyncResult } from '@/types/utilities';\nimport { createAppError } from '@/utils/errorUtils';\n\nimport { createLogger } from '../lib/config/environment';\nimport { offlineStorage } from '../lib/data/offline-storage';\n\nconst logger = createLogger('SyncService');\n\n// Re-export consolidated sync service types\nexport type {\n  SyncQueueItem,\n  SyncStatus\n} from '@/types/services';\n\n// Import for local usage\nimport type { SyncQueueItem, SyncStatus } from '@/types/services';\n\n/**\n * Sync Service Class\n * Handles offline data synchronization when connection is restored\n */\nexport class SyncService {\n  private isProcessing = false;\n  private maxRetries = 3;\n  private retryDelay = 5000; // 5 seconds\n  private syncDelay = 1000; // 1 second between operations\n  private eventListenersSetup = false;\n\n  /**\n   * Add action to sync queue\n   */\n  async addToQueue(\n    action: 'CREATE' | 'UPDATE' | 'DELETE',\n    type: 'resident' | 'household' | 'user',\n    data: any\n  ): Promise<void> {\n    if (typeof window === 'undefined') {\n      logger.debug('Skipping sync queue in server environment');\n      return;\n    }\n\n    try {\n      await offlineStorage.addToSyncQueue({\n        action,\n        type,\n        data,\n      });\n\n      logger.debug(`Added ${action} ${type} to sync queue`);\n\n      // Try to process queue if online\n      if (navigator.onLine && !this.isProcessing) {\n        this.processQueue();\n      }\n    } catch (error) {\n      logger.error('Failed to add item to sync queue:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process pending sync items\n   */\n  async processQueue(): Promise<void> {\n    if (typeof window === 'undefined' || this.isProcessing || !navigator.onLine) {\n      return;\n    }\n\n    this.isProcessing = true;\n    logger.info('Processing sync queue...');\n\n    try {\n      const pendingItems = await offlineStorage.getPendingSyncItems();\n\n      if (pendingItems.length === 0) {\n        logger.debug('No pending sync items');\n        return;\n      }\n\n      let processed = 0;\n      let failed = 0;\n\n      for (const item of pendingItems) {\n        if (item.retryCount >= this.maxRetries) {\n          logger.warn(`Max retries exceeded for sync item ${item.id}`, {\n            action: item.action,\n            type: item.type,\n            retryCount: item.retryCount,\n          });\n          failed++;\n          continue;\n        }\n\n        try {\n          const result = await this.syncItem({\n            ...item,\n            id: String(item.id),\n          });\n\n          if (result.success) {\n            await offlineStorage.markSyncItemCompleted(item.id!);\n            logger.info(`Successfully synced ${item.action} ${item.type}`);\n            processed++;\n          } else {\n            await offlineStorage.incrementSyncRetry(item.id!);\n            logger.error(`Failed to sync ${item.action} ${item.type}:`, result.error);\n            failed++;\n          }\n        } catch (error) {\n          await offlineStorage.incrementSyncRetry(item.id!);\n          logger.error(`Error syncing ${item.action} ${item.type}:`, error);\n          failed++;\n        }\n\n        // Add delay between sync operations to prevent overwhelming the server\n        await this.delay(this.syncDelay);\n      }\n\n      logger.info('Sync queue processing completed', {\n        processed,\n        failed,\n        total: pendingItems.length,\n      });\n    } catch (error) {\n      logger.error('Error processing sync queue:', error);\n    } finally {\n      this.isProcessing = false;\n    }\n  }\n\n  /**\n   * Sync individual item\n   */\n  private async syncItem(item: SyncQueueItem): Promise<SyncResult> {\n    const { action, type, data } = item;\n\n    try {\n      // Get auth token\n      const { supabase } = await import('../lib/supabase');\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n\n      if (!session?.access_token) {\n        return { success: false, error: 'No authentication token' };\n      }\n\n      const headers = {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${session.access_token}`,\n      };\n\n      let response: Response;\n\n      switch (action) {\n        case 'CREATE':\n          response = await this.handleCreate(type, data, headers);\n          break;\n        case 'UPDATE':\n          response = await this.handleUpdate(type, data, headers);\n          break;\n        case 'DELETE':\n          response = await this.handleDelete(type, data, headers);\n          break;\n        default:\n          return { success: false, error: `Unknown action: ${action}` };\n      }\n\n      if (response.ok) {\n        const responseData = await response.json();\n        return { success: true, data: responseData };\n      } else {\n        const errorData = await response.json().catch(() => ({}));\n        return {\n          success: false,\n          error: errorData.error || `HTTP ${response.status}: ${response.statusText}`,\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  /**\n   * Handle CREATE operations\n   */\n  private async handleCreate(type: string, data: any, headers: HeadersInit): Promise<Response> {\n    const endpoints = {\n      resident: '/api/residents',\n      household: '/api/households',\n      user: '/api/auth/create-profile',\n    };\n\n    const endpoint = endpoints[type as keyof typeof endpoints];\n    if (!endpoint) {\n      throw createAppError(`No endpoint defined for type: ${type}`, {\n        code: ErrorCode.INVALID_OPERATION,\n        severity: ErrorSeverity.HIGH,\n        context: { type, action: 'CREATE' },\n      });\n    }\n\n    return fetch(endpoint, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(data),\n    });\n  }\n\n  /**\n   * Handle UPDATE operations\n   */\n  private async handleUpdate(type: string, data: any, headers: HeadersInit): Promise<Response> {\n    const endpoints = {\n      resident: `/api/residents/${data.id}`,\n      household: `/api/households/${data.code || data.id}`,\n      user: `/api/auth/profile`,\n    };\n\n    const endpoint = endpoints[type as keyof typeof endpoints];\n    if (!endpoint) {\n      throw createAppError(`No endpoint defined for type: ${type}`, {\n        code: ErrorCode.INVALID_OPERATION,\n        severity: ErrorSeverity.HIGH,\n        context: { type, action: 'UPDATE' },\n      });\n    }\n\n    return fetch(endpoint, {\n      method: 'PUT',\n      headers,\n      body: JSON.stringify(data),\n    });\n  }\n\n  /**\n   * Handle DELETE operations\n   */\n  private async handleDelete(type: string, data: any, headers: HeadersInit): Promise<Response> {\n    const endpoints = {\n      resident: `/api/residents/${data.id}`,\n      household: `/api/households/${data.code || data.id}`,\n      user: `/api/auth/profile`,\n    };\n\n    const endpoint = endpoints[type as keyof typeof endpoints];\n    if (!endpoint) {\n      throw createAppError(`No endpoint defined for type: ${type}`, {\n        code: ErrorCode.INVALID_OPERATION,\n        severity: ErrorSeverity.HIGH,\n        context: { type, action: 'DELETE' },\n      });\n    }\n\n    return fetch(endpoint, {\n      method: 'DELETE',\n      headers,\n    });\n  }\n\n  /**\n   * Force sync all pending items\n   */\n  async forceSync(): Promise<void> {\n    if (typeof window === 'undefined') {\n      logger.debug('Skipping force sync in server environment');\n      return;\n    }\n\n    if (!navigator.onLine) {\n      throw createAppError('Cannot force sync while offline', {\n        code: ErrorCode.NETWORK_ERROR,\n        severity: ErrorSeverity.MEDIUM,\n      });\n    }\n\n    logger.info('Forcing sync of all pending items...');\n    await this.processQueue();\n  }\n\n  /**\n   * Get sync queue status\n   */\n  async getStatus(): Promise<SyncStatus> {\n    try {\n      const pendingItems = await offlineStorage.getPendingSyncItems();\n\n      return {\n        isProcessing: this.isProcessing,\n        pendingCount: pendingItems.length,\n        isOnline: typeof navigator !== 'undefined' ? navigator.onLine : true,\n        lastSyncAttempt: Date.now(),\n      };\n    } catch (error) {\n      logger.error('Failed to get sync status:', error);\n      return {\n        isProcessing: false,\n        pendingCount: 0,\n        isOnline: typeof navigator !== 'undefined' ? navigator.onLine : true,\n      };\n    }\n  }\n\n  /**\n   * Clear all completed sync items\n   */\n  async clearCompleted(): Promise<void> {\n    try {\n      logger.info('Clearing completed sync items...');\n      // Implementation will depend on offline storage provider\n      // Currently not implemented as offline storage is not yet configured\n      logger.warn('Clear completed sync items not yet implemented');\n    } catch (error) {\n      logger.error('Failed to clear completed sync items:', error);\n    }\n  }\n\n  /**\n   * Setup event listeners for online/offline events\n   */\n  setupEventListeners(): void {\n    if (typeof window === 'undefined' || this.eventListenersSetup) {\n      return;\n    }\n\n    const handleOnline = () => {\n      logger.info('Connection restored, processing sync queue...');\n      this.processQueue();\n    };\n\n    const handleOffline = () => {\n      logger.info('Connection lost, sync queue paused');\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    this.eventListenersSetup = true;\n\n    // Process queue on setup if online\n    if (navigator.onLine) {\n      setTimeout(() => this.processQueue(), 1000);\n    }\n  }\n\n  /**\n   * Cleanup event listeners\n   */\n  cleanup(): void {\n    if (typeof window === 'undefined') return;\n\n    window.removeEventListener('online', () => this.processQueue());\n    window.removeEventListener('offline', () => {});\n    this.eventListenersSetup = false;\n  }\n\n  /**\n   * Configure sync settings\n   */\n  configure(options: { maxRetries?: number; retryDelay?: number; syncDelay?: number }): void {\n    if (options.maxRetries !== undefined) {\n      this.maxRetries = options.maxRetries;\n    }\n    if (options.retryDelay !== undefined) {\n      this.retryDelay = options.retryDelay;\n    }\n    if (options.syncDelay !== undefined) {\n      this.syncDelay = options.syncDelay;\n    }\n\n    logger.info('Sync service configured', {\n      maxRetries: this.maxRetries,\n      retryDelay: this.retryDelay,\n      syncDelay: this.syncDelay,\n    });\n  }\n\n  /**\n   * Utility delay function\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\n// Export singleton instance\nexport const syncService = new SyncService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/services/tests/household-fetcher.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HouseholdHead' is defined but never used.","line":6,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":203,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5926,5929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5926,5929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":212,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6231,6234],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6231,6234],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unit tests for household fetcher optimization utilities\n * Tests performance improvements and caching functionality\n */\n\nimport type { HouseholdData, HouseholdHead } from '@/types';\n\nimport {\n  batchFetchHouseholdHeads,\n  processHouseholdsOptimized,\n  searchHouseholdsOptimized,\n  householdCache,\n} from '../household-fetcher';\n\n// Mock supabase\njest.mock('@/lib/supabase', () => ({\n  supabase: {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        in: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            or: jest.fn(() => ({\n              order: jest.fn(() => ({\n                limit: jest.fn(() => ({\n                  // Mock successful response\n                  data: [],\n                  error: null,\n                })),\n              })),\n            })),\n          })),\n        })),\n      })),\n    })),\n  },\n}));\n\ndescribe('Household Fetcher Optimization', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    householdCache.clear();\n  });\n\n  describe('batchFetchHouseholdHeads', () => {\n    it('should return empty map for empty input', async () => {\n      const result = await batchFetchHouseholdHeads([]);\n      expect(result.size).toBe(0);\n    });\n\n    it('should batch fetch household heads successfully', async () => {\n      const mockHeads = [\n        { id: 'head-1', first_name: 'Juan', middle_name: 'Dela', last_name: 'Cruz' },\n        { id: 'head-2', first_name: 'Maria', middle_name: '', last_name: 'Santos' },\n      ];\n\n      // Mock supabase response\n      const { supabase } = require('@/lib/supabase');\n      supabase.from.mockReturnValue({\n        select: () => ({\n          in: () => Promise.resolve({ data: mockHeads, error: null }),\n        }),\n      });\n\n      const result = await batchFetchHouseholdHeads(['head-1', 'head-2']);\n\n      expect(result.size).toBe(2);\n      expect(result.get('head-1')).toEqual(mockHeads[0]);\n      expect(result.get('head-2')).toEqual(mockHeads[1]);\n    });\n\n    it('should handle database errors gracefully', async () => {\n      const { supabase } = require('@/lib/supabase');\n      supabase.from.mockReturnValue({\n        select: () => ({\n          in: () => Promise.resolve({ data: null, error: new Error('DB Error') }),\n        }),\n      });\n\n      const result = await batchFetchHouseholdHeads(['head-1']);\n      expect(result.size).toBe(0);\n    });\n  });\n\n  describe('processHouseholdsOptimized', () => {\n    it('should return empty array for empty input', async () => {\n      const result = await processHouseholdsOptimized([]);\n      expect(result).toEqual([]);\n    });\n\n    it('should process households with batch-fetched heads', async () => {\n      const mockHouseholds: HouseholdData[] = [\n        {\n          code: 'HH001',\n          barangay_code: '137401',\n          household_head_id: 'head-1',\n          house_number: '123',\n          geo_streets: [{ id: 'street-1', name: 'Main St' }],\n          geo_subdivisions: [],\n        },\n        {\n          code: 'HH002',\n          barangay_code: '137401',\n          household_head_id: 'head-2',\n          house_number: '456',\n          geo_streets: [],\n          geo_subdivisions: [{ id: 'sub-1', name: 'Subdivision A', type: 'residential' }],\n        },\n      ];\n\n      const mockHeads = [\n        { id: 'head-1', first_name: 'Juan', middle_name: 'Dela', last_name: 'Cruz' },\n        { id: 'head-2', first_name: 'Maria', middle_name: '', last_name: 'Santos' },\n      ];\n\n      // Mock the batch fetch\n      const { supabase } = require('@/lib/supabase');\n      supabase.from.mockReturnValue({\n        select: () => ({\n          in: () => Promise.resolve({ data: mockHeads, error: null }),\n        }),\n      });\n\n      const result = await processHouseholdsOptimized(mockHouseholds);\n\n      expect(result).toHaveLength(2);\n      expect(result[0]).toEqual({\n        value: 'HH001',\n        label: 'Household #HH001',\n        description: 'Juan Dela Cruz - 123, Main St',\n        code: 'HH001',\n        head_name: 'Juan Dela Cruz',\n        address: '123, Main St',\n      });\n      expect(result[1]).toEqual({\n        value: 'HH002',\n        label: 'Household #HH002',\n        description: 'Maria Santos - 456, Subdivision A',\n        code: 'HH002',\n        head_name: 'Maria Santos',\n        address: '456, Subdivision A',\n      });\n    });\n\n    it('should handle households without heads', async () => {\n      const mockHouseholds: HouseholdData[] = [\n        {\n          code: 'HH003',\n          barangay_code: '137401',\n          // No household_head_id\n          geo_streets: [],\n          geo_subdivisions: [],\n        },\n      ];\n\n      const result = await processHouseholdsOptimized(mockHouseholds);\n\n      expect(result).toHaveLength(1);\n      expect(result[0].head_name).toBe('No head assigned');\n      expect(result[0].address).toBe('No address');\n    });\n  });\n\n  describe('Household Cache', () => {\n    it('should cache and retrieve data correctly', () => {\n      const testData = [\n        {\n          value: 'HH001',\n          label: 'Household #HH001',\n          description: 'Test household',\n          code: 'HH001',\n          head_name: 'Test Head',\n          address: 'Test Address',\n        },\n      ];\n\n      const cacheKey = 'test-barangay-query-10';\n\n      // Cache should be empty initially\n      expect(householdCache.get(cacheKey)).toBeNull();\n\n      // Set data in cache\n      householdCache.set(cacheKey, testData);\n\n      // Should retrieve cached data\n      expect(householdCache.get(cacheKey)).toEqual(testData);\n    });\n\n    it('should handle cache expiration', () => {\n      const testData = [\n        {\n          value: 'HH001',\n          label: 'Household #HH001',\n          description: 'Test household',\n          code: 'HH001',\n          head_name: 'Test Head',\n          address: 'Test Address',\n        },\n      ];\n\n      const cacheKey = 'test-expired';\n\n      // Mock the cache with expired timestamp\n      (householdCache as any).cache.set(cacheKey, {\n        data: testData,\n        timestamp: Date.now() - 6 * 60 * 1000, // 6 minutes ago (expired)\n      });\n\n      // Should return null for expired data\n      expect(householdCache.get(cacheKey)).toBeNull();\n\n      // Cache should be cleaned up\n      expect((householdCache as any).cache.has(cacheKey)).toBe(false);\n    });\n\n    it('should clear cache correctly', () => {\n      const testData = [\n        {\n          value: 'HH001',\n          label: 'Household #HH001',\n          description: 'Test household',\n          code: 'HH001',\n          head_name: 'Test Head',\n          address: 'Test Address',\n        },\n      ];\n\n      householdCache.set('key1', testData);\n      householdCache.set('key2', testData);\n\n      expect(householdCache.get('key1')).toEqual(testData);\n      expect(householdCache.get('key2')).toEqual(testData);\n\n      householdCache.clear();\n\n      expect(householdCache.get('key1')).toBeNull();\n      expect(householdCache.get('key2')).toBeNull();\n    });\n  });\n\n  describe('searchHouseholdsOptimized', () => {\n    it('should search households with query', async () => {\n      const mockHouseholds = [\n        {\n          code: 'HH001',\n          barangay_code: '137401',\n          house_number: '123',\n          geo_streets: [],\n          geo_subdivisions: [],\n        },\n      ];\n\n      const { supabase } = require('@/lib/supabase');\n      supabase.from.mockReturnValue({\n        select: () => ({\n          eq: () => ({\n            or: () => ({\n              order: () => ({\n                limit: () => Promise.resolve({ data: mockHouseholds, error: null }),\n              }),\n            }),\n          }),\n        }),\n      });\n\n      const result = await searchHouseholdsOptimized('137401', 'test query', 10);\n\n      expect(result).toHaveLength(1);\n      expect(result[0].code).toBe('HH001');\n    });\n\n    it('should handle search errors gracefully', async () => {\n      const { supabase } = require('@/lib/supabase');\n      supabase.from.mockReturnValue({\n        select: () => ({\n          eq: () => ({\n            or: () => ({\n              order: () => ({\n                limit: () => Promise.resolve({ data: null, error: new Error('Search error') }),\n              }),\n            }),\n          }),\n        }),\n      });\n\n      const result = await searchHouseholdsOptimized('137401', 'test query');\n      expect(result).toEqual([]);\n    });\n  });\n\n  describe('Performance Benefits', () => {\n    it('should demonstrate N+1 to O(1) improvement', async () => {\n      const mockHouseholds: HouseholdData[] = Array.from({ length: 10 }, (_, i) => ({\n        code: `HH${i + 1}`,\n        barangay_code: '137401',\n        household_head_id: `head-${i + 1}`,\n        geo_streets: [],\n        geo_subdivisions: [],\n      }));\n\n      const mockHeads = Array.from({ length: 10 }, (_, i) => ({\n        id: `head-${i + 1}`,\n        first_name: `Name${i + 1}`,\n        middle_name: '',\n        last_name: 'Surname',\n      }));\n\n      let queryCount = 0;\n      const { supabase } = require('@/lib/supabase');\n      supabase.from.mockReturnValue({\n        select: () => ({\n          in: () => {\n            queryCount++; // Count the number of database calls\n            return Promise.resolve({ data: mockHeads, error: null });\n          },\n        }),\n      });\n\n      const result = await processHouseholdsOptimized(mockHouseholds);\n\n      // Should make only 1 database call instead of 10 (N+1 problem solved)\n      expect(queryCount).toBe(1);\n      expect(result).toHaveLength(10);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/services/tests/resident-mapper.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ResidentRecord' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ResidentWithRelations' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HouseholdOption' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mapDatabaseToForm' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3896,3899],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3896,3899],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":296,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8747,8750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8747,8750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unit tests for resident mapper utilities\n * Tests all critical mapping functions for data consistency\n */\n\nimport type {\n  ResidentFormData,\n  ResidentRecord,\n  ResidentWithRelations,\n  HouseholdData,\n  HouseholdHead,\n  HouseholdOption,\n} from '@/types';\n\nimport {\n  mapFormToApi,\n  mapDatabaseToForm,\n  formatHouseholdOption,\n  formatPsocOption,\n  formatPsgcOption,\n  calculateAge,\n  formatFullName,\n  formatEnumValue,\n  formatBoolean,\n  parseFullName,\n  getFormToSchemaFieldMapping,\n  getSchemaToFormFieldMapping,\n} from '../resident-mapper';\n\ndescribe('Resident Mapper Utilities', () => {\n  describe('mapFormToApi', () => {\n    it('should map form data to API format correctly', () => {\n      const formData: ResidentFormData = {\n        first_name: 'Juan',\n        middle_name: 'Dela',\n        last_name: 'Cruz',\n        extension_name: 'Jr.',\n        sex: 'male',\n        civil_status: 'single',\n        citizenship: 'filipino',\n        birthdate: '1990-01-01',\n        birth_place_code: '137401',\n        philsys_card_number: '1234-5678-9012',\n        education_attainment: 'college',\n        is_graduate: true,\n        employment_status: 'employed',\n        occupation_code: '1111',\n        ethnicity: 'tagalog',\n        email: 'juan.cruz@email.com',\n        telephone_number: '02-123-4567',\n        mobile_number: '09123456789',\n        household_code: 'HH001',\n        blood_type: 'A+',\n        complexion: 'medium',\n        height: 170,\n        weight: 65,\n        religion: 'roman_catholic',\n        religion_others_specify: '',\n        is_voter: true,\n        is_resident_voter: true,\n        last_voted_date: '2022-05-09',\n        mother_maiden_first: 'Maria',\n        mother_maiden_middle: 'Santos',\n        mother_maiden_last: 'Garcia',\n        // Required fields for ResidentFormData that extend from ResidentRecord\n        id: '550e8400-e29b-41d4-a716-446655440000',\n        created_at: '2023-01-01T00:00:00Z',\n        updated_at: '2023-01-01T00:00:00Z',\n        is_active: true,\n      };\n\n      const result = mapFormToApi(formData);\n\n      expect(result).toEqual({\n        first_name: 'Juan',\n        middle_name: 'Dela',\n        last_name: 'Cruz',\n        extension_name: 'Jr.',\n        sex: 'male',\n        civil_status: 'single',\n        citizenship: 'filipino',\n        birthdate: '1990-01-01',\n        birth_place_code: '137401',\n        philsys_card_number: '1234-5678-9012',\n        education_attainment: 'college',\n        is_graduate: true,\n        employment_status: 'employed',\n        occupation_code: '1111', // psocCode -> occupationCode\n        ethnicity: 'tagalog',\n        email: 'juan.cruz@email.com',\n        telephone_number: '02-123-4567', // phoneNumber -> telephone_number\n        mobile_number: '09123456789',\n        household_code: 'HH001',\n        blood_type: 'A+',\n        complexion: 'medium',\n        height: 170,\n        weight: 65,\n        religion: 'roman_catholic',\n        religion_others_specify: undefined,\n        is_voter: true,\n        is_resident_voter: true,\n        last_voted_date: '2022-05-09',\n        mother_maiden_first: 'Maria',\n        mother_maiden_middle: 'Santos',\n        mother_maiden_last: 'Garcia',\n      });\n    });\n\n    it('should handle empty/undefined values correctly', () => {\n      const formData: ResidentFormData = {\n        first_name: 'Juan',\n        middle_name: '',\n        last_name: 'Cruz',\n        extension_name: '',\n        sex: 'male',\n        civil_status: undefined,\n        citizenship: 'filipino',\n        birthdate: '1990-01-01',\n        birth_place_code: '',\n        philsys_card_number: '',\n        education_attainment: undefined,\n        is_graduate: false,\n        employment_status: undefined,\n        occupation_code: '',\n        ethnicity: undefined,\n        email: '',\n        telephone_number: '',\n        mobile_number: '',\n        household_code: '',\n        blood_type: '' as any,\n        complexion: '',\n        height: 0,\n        weight: 0,\n        religion: undefined,\n        religion_others_specify: '',\n        is_voter: undefined,\n        is_resident_voter: undefined,\n        last_voted_date: '',\n        mother_maiden_first: '',\n        mother_maiden_middle: '',\n        mother_maiden_last: '',\n        // Required fields for ResidentFormData that extend from ResidentRecord\n        id: '550e8400-e29b-41d4-a716-446655440001',\n        created_at: '2023-01-01T00:00:00Z',\n        updated_at: '2023-01-01T00:00:00Z',\n        is_active: true,\n      };\n\n      const result = mapFormToApi(formData);\n\n      expect(result.middle_name).toBeUndefined();\n      expect(result.civil_status).toBeUndefined();\n      expect(result.email).toBeUndefined();\n      expect(result.is_voter).toBeUndefined();\n      expect(result.is_resident_voter).toBeUndefined();\n    });\n  });\n\n  describe('formatHouseholdOption', () => {\n    it('should format household data correctly with head resident', () => {\n      const household: HouseholdData = {\n        code: 'HH001',\n        name: 'Household 1',\n        house_number: '123',\n        barangay_code: '137401',\n        household_head_id: 'head-123',\n        geo_streets: [{ id: 'street-1', name: 'Main Street' }],\n        geo_subdivisions: [{ id: 'sub-1', name: 'Subdivision A', type: 'residential' }],\n      };\n\n      const headResident: HouseholdHead = {\n        id: 'head-123',\n        first_name: 'Juan',\n        middle_name: 'Dela',\n        last_name: 'Cruz',\n      };\n\n      const result = formatHouseholdOption(household, headResident);\n\n      expect(result).toEqual({\n        value: 'HH001',\n        label: 'Household #HH001',\n        description: 'Juan Dela Cruz - 123, Main Street, Subdivision A',\n        code: 'HH001',\n        head_name: 'Juan Dela Cruz',\n        address: '123, Main Street, Subdivision A',\n      });\n    });\n\n    it('should handle household without head resident', () => {\n      const household: HouseholdData = {\n        code: 'HH002',\n        barangay_code: '137401',\n        geo_streets: [],\n        geo_subdivisions: [],\n      };\n\n      const result = formatHouseholdOption(household);\n\n      expect(result).toEqual({\n        value: 'HH002',\n        label: 'Household #HH002',\n        description: 'No head assigned - No address',\n        code: 'HH002',\n        head_name: 'No head assigned',\n        address: 'No address',\n      });\n    });\n  });\n\n  describe('calculateAge', () => {\n    it('should calculate age correctly', () => {\n      // Use fake timers to set current date as 2024-01-01\n      jest.useFakeTimers();\n      jest.setSystemTime(new Date('2024-01-01T00:00:00.000Z'));\n\n      expect(calculateAge('1990-01-01')).toBe(34);\n      expect(calculateAge('2000-06-15')).toBe(23);\n      expect(calculateAge('2024-01-01')).toBe(0);\n      expect(calculateAge('2024-06-01')).toBe(0); // Future date should return 0 (non-negative)\n\n      jest.useRealTimers();\n    });\n\n    it('should return 0 for empty birthdate', () => {\n      expect(calculateAge('')).toBe(0);\n    });\n  });\n\n  describe('formatFullName', () => {\n    it('should format full name correctly', () => {\n      expect(\n        formatFullName({\n          first_name: 'Juan',\n          middle_name: 'Dela',\n          last_name: 'Cruz',\n          extension_name: 'Jr.',\n        })\n      ).toBe('Juan Dela Cruz Jr.');\n\n      expect(\n        formatFullName({\n          first_name: 'Maria',\n          last_name: 'Santos',\n        })\n      ).toBe('Maria Santos');\n\n      expect(\n        formatFullName({\n          first_name: 'Pedro',\n          last_name: 'Garcia',\n        })\n      ).toBe('Pedro Garcia');\n    });\n\n    it('should handle empty values', () => {\n      expect(\n        formatFullName({\n          first_name: '',\n          middle_name: '',\n          last_name: '',\n        })\n      ).toBe('');\n\n      expect(\n        formatFullName({\n          first_name: 'Juan',\n          middle_name: '',\n          last_name: 'Cruz',\n        })\n      ).toBe('Juan Cruz');\n    });\n  });\n\n  describe('formatEnumValue', () => {\n    it('should format enum values correctly', () => {\n      expect(formatEnumValue('not_in_labor_force')).toBe('Not In Labor Force');\n      expect(formatEnumValue('roman_catholic')).toBe('Roman Catholic');\n      expect(formatEnumValue('single')).toBe('Single');\n    });\n\n    it('should return N/A for empty values', () => {\n      expect(formatEnumValue('')).toBe('N/A');\n      expect(formatEnumValue(undefined)).toBe('N/A');\n    });\n  });\n\n  describe('formatBoolean', () => {\n    it('should format boolean values correctly', () => {\n      expect(formatBoolean(true)).toBe('Yes');\n      expect(formatBoolean(false)).toBe('No');\n    });\n\n    it('should return N/A for undefined values', () => {\n      expect(formatBoolean(undefined)).toBe('N/A');\n      expect(formatBoolean(null as any)).toBe('N/A');\n    });\n  });\n\n  describe('parseFullName', () => {\n    it('should parse single name', () => {\n      expect(parseFullName('Juan')).toEqual({\n        first_name: 'Juan',\n        middle_name: '',\n        last_name: '',\n      });\n    });\n\n    it('should parse two names', () => {\n      expect(parseFullName('Juan Cruz')).toEqual({\n        first_name: 'Juan',\n        middle_name: '',\n        last_name: 'Cruz',\n      });\n    });\n\n    it('should parse three names', () => {\n      expect(parseFullName('Juan Dela Cruz')).toEqual({\n        first_name: 'Juan',\n        middle_name: 'Dela',\n        last_name: 'Cruz',\n      });\n    });\n\n    it('should parse four or more names', () => {\n      expect(parseFullName('Juan Carlos Dela Cruz')).toEqual({\n        first_name: 'Juan',\n        middle_name: 'Carlos Dela',\n        last_name: 'Cruz',\n      });\n\n      expect(parseFullName('Juan Carlos Maria Dela Cruz')).toEqual({\n        first_name: 'Juan',\n        middle_name: 'Carlos Maria Dela',\n        last_name: 'Cruz',\n      });\n    });\n  });\n\n  describe('field mapping functions', () => {\n    it('should provide correct form to schema mapping', () => {\n      const mapping = getFormToSchemaFieldMapping();\n\n      expect(mapping.first_name).toBe('first_name');\n      expect(mapping.last_name).toBe('last_name');\n      expect(mapping.occupation_code).toBe('occupation_code');\n      expect(mapping.telephone_number).toBe('telephone_number');\n    });\n\n    it('should provide correct schema to form mapping', () => {\n      const mapping = getSchemaToFormFieldMapping();\n\n      expect(mapping.first_name).toBe('first_name');\n      expect(mapping.last_name).toBe('last_name');\n      expect(mapping.occupation_code).toBe('occupation_code');\n      expect(mapping.telephone_number).toBe('telephone_number');\n    });\n\n    it('should be inverse mappings', () => {\n      const formToSchema = getFormToSchemaFieldMapping();\n      const schemaToForm = getSchemaToFormFieldMapping();\n\n      // Test that mappings are inverses of each other\n      Object.entries(formToSchema).forEach(([formField, schemaField]) => {\n        expect(schemaToForm[schemaField]).toBe(formField);\n      });\n    });\n  });\n\n  describe('formatPsocOption', () => {\n    it('should format PSOC data correctly', () => {\n      const psocData = {\n        code: '1111',\n        title: 'Software Engineer',\n        hierarchy: 'Information Technology > Software Development',\n        level: 'occupation',\n      };\n\n      const result = formatPsocOption(psocData);\n\n      expect(result).toEqual({\n        value: '1111',\n        label: 'Software Development, Information Technology',\n        description: 'Information Technology > Software Development',\n        level_type: 'occupation',\n        occupation_code: '1111',\n        occupation_title: 'Software Engineer',\n        hierarchy: 'Information Technology > Software Development',\n        badge: 'occupation',\n      });\n    });\n  });\n\n  describe('formatPsgcOption', () => {\n    it('should format PSGC data correctly', () => {\n      const psgcData = {\n        code: '137401',\n        name: 'Manila',\n        full_address: 'Manila, Metro Manila, Philippines',\n        level: 'city',\n      };\n\n      const result = formatPsgcOption(psgcData);\n\n      expect(result).toEqual({\n        value: '137401',\n        label: 'Manila',\n        description: 'Manila, Metro Manila, Philippines',\n        level: 'city',\n        full_hierarchy: 'Manila, Metro Manila, Philippines',\n        code: '137401',\n      });\n    });\n\n    it('should handle alternative field names', () => {\n      const psgcData = {\n        city_code: '137401',\n        city_name: 'Manila',\n        full_hierarchy: 'Manila, Metro Manila',\n        level: 'city',\n      };\n\n      const result = formatPsgcOption(psgcData);\n\n      expect(result.value).toBe('137401');\n      expect(result.label).toBe('Manila');\n      expect(result.code).toBe('137401');\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/services/user-repository.ts","messages":[{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QueryOptions' is defined but never used.","line":10,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":27},{"ruleId":"import/no-duplicates","severity":2,"message":"'/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/services.ts' imported multiple times.","line":10,"column":53,"nodeType":"Literal","endLine":10,"endColumn":71},{"ruleId":"import/no-duplicates","severity":2,"message":"'/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/services.ts' imported multiple times.","line":17,"column":8,"nodeType":"Literal","endLine":17,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1431,1434],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1431,1434],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3358,3361],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3358,3361],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ipAddress' is defined but never used. Allowed unused args must match /^_/u.","line":275,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":275,"endColumn":14},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":310,"column":32,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":310,"endColumn":40}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * User Repository\n * Domain-specific repository for user data operations\n */\n\nimport type { SupabaseClient } from '@supabase/supabase-js';\n\nimport { validateUserData } from '@/lib/validation/schemas';\nimport type { ValidationContext } from '@/lib/validation/types';\nimport type { QueryOptions, RepositoryResult } from '@/types/services';\n\n// Types moved to src/types/services.ts for consolidation\nimport type {\n  UserRepositoryData as UserData,\n  UserRepositorySearchOptions as UserSearchOptions,\n  UserSecurityData,\n} from '@/types/services';\n\nimport { BaseRepository } from './base-repository';\n\n// Export types for re-export in services/index.ts\nexport type { UserData, UserSearchOptions, UserSecurityData };\n\nexport class UserRepository extends BaseRepository<UserData> {\n  constructor(context?: ValidationContext) {\n    super('auth_user_profiles', context);\n  }\n\n  /**\n   * Create a new user with validation\n   */\n  async createUser(\n    data: Omit<UserData, 'id' | 'created_at' | 'updated_at'>\n  ): Promise<RepositoryResult<UserData>> {\n    try {\n      // Validate user data before creation\n      const validationResult = await validateUserData(data, this.context);\n      if (!validationResult.isValid) {\n        return {\n          success: false,\n          error: {\n            code: 'VALIDATION_ERROR',\n            message: 'User data validation failed',\n            details: validationResult.errors as Record<string, any>,\n          },\n        };\n      }\n\n      // Check for duplicate email\n      const duplicateCheck = await this.findByEmail(data.email);\n      if (duplicateCheck.success && duplicateCheck.data) {\n        return {\n          success: false,\n          error: {\n            code: 'DUPLICATE_EMAIL',\n            message: 'A user with this email already exists',\n            field: 'email',\n          },\n        };\n      }\n\n      return await this.create(data);\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'createUser'),\n      };\n    }\n  }\n\n  /**\n   * Update user with validation\n   */\n  async updateUser(\n    id: string,\n    data: Partial<Omit<UserData, 'id' | 'created_at'>>\n  ): Promise<RepositoryResult<UserData>> {\n    try {\n      // Get existing user for partial validation\n      const existingResult = await this.findById(id);\n      if (!existingResult.success || !existingResult.data) {\n        return existingResult;\n      }\n\n      // If updating email, check for duplicates\n      if (data.email && data.email !== existingResult.data.email) {\n        const duplicateCheck = await this.findByEmail(data.email);\n        if (duplicateCheck.success && duplicateCheck.data) {\n          return {\n            success: false,\n            error: {\n              code: 'DUPLICATE_EMAIL',\n              message: 'A user with this email already exists',\n              field: 'email',\n            },\n          };\n        }\n      }\n\n      // Merge with existing data for validation\n      const mergedData = { ...existingResult.data, ...data };\n      const validationResult = await validateUserData(mergedData, this.context);\n\n      if (!validationResult.isValid) {\n        return {\n          success: false,\n          error: {\n            code: 'VALIDATION_ERROR',\n            message: 'User data validation failed',\n            details: validationResult.errors as Record<string, any>,\n          },\n        };\n      }\n\n      return await this.update(id, data);\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'updateUser'),\n      };\n    }\n  }\n\n  /**\n   * Find user by email\n   */\n  async findByEmail(email: string): Promise<RepositoryResult<UserData>> {\n    try {\n      const queryBuilder = (supabase: SupabaseClient) => {\n        return supabase.from(this.tableName).select('*').eq('email', email.toLowerCase()).single();\n      };\n\n      return await this.executeQuery(queryBuilder, 'FIND_BY_EMAIL');\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'findByEmail'),\n      };\n    }\n  }\n\n  /**\n   * Search users with advanced filtering\n   */\n  async searchUsers(options: UserSearchOptions = {}): Promise<RepositoryResult<UserData[]>> {\n    try {\n      const queryBuilder = (supabase: SupabaseClient) => {\n        let query = supabase.from(this.tableName).select('*', { count: 'exact' });\n\n        // Email search (partial match)\n        if (options.email) {\n          query = query.ilike('email', `%${options.email}%`);\n        }\n\n        // Name search (across first and last names)\n        if (options.name) {\n          const searchTerm = `%${options.name}%`;\n          query = query.or(`first_name.ilike.${searchTerm},last_name.ilike.${searchTerm}`);\n        }\n\n        // Role filter\n        if (options.role) query = query.eq('role', options.role);\n\n        // Barangay filter\n        if (options.barangay_code) query = query.eq('barangay_code', options.barangay_code);\n\n        // Active status filter\n        if (options.is_active !== undefined) query = query.eq('is_active', options.is_active);\n\n        // Last login date filters\n        if (options.last_login_before) {\n          query = query.lt('last_login', options.last_login_before);\n        }\n        if (options.last_login_after) {\n          query = query.gt('last_login', options.last_login_after);\n        }\n\n        // Apply other filters\n        if (options.filters) {\n          for (const [key, value] of Object.entries(options.filters)) {\n            if (value !== undefined && value !== null) {\n              query = query.eq(key, value);\n            }\n          }\n        }\n\n        // Apply ordering\n        if (options.orderBy) {\n          query = query.order(options.orderBy, {\n            ascending: options.orderDirection !== 'desc',\n          });\n        } else {\n          // Default order by last name, first name\n          query = query.order('last_name').order('first_name');\n        }\n\n        // Apply pagination\n        if (options.limit) {\n          query = query.limit(options.limit);\n        }\n\n        if (options.offset) {\n          query = query.range(options.offset, options.offset + (options.limit || 10) - 1);\n        }\n\n        return query;\n      };\n\n      return await this.executeQuery(queryBuilder, 'SEARCH_USERS');\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'searchUsers'),\n      };\n    }\n  }\n\n  /**\n   * Find users by role\n   */\n  async findByRole(role: string): Promise<RepositoryResult<UserData[]>> {\n    try {\n      return await this.findAll({\n        filters: { role },\n        orderBy: 'last_name',\n      });\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'findByRole'),\n      };\n    }\n  }\n\n  /**\n   * Find users by barangay\n   */\n  async findByBarangay(barangay_code: string): Promise<RepositoryResult<UserData[]>> {\n    try {\n      return await this.findAll({\n        filters: { barangay_code, is_active: true },\n        orderBy: 'last_name',\n      });\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'findByBarangay'),\n      };\n    }\n  }\n\n  /**\n   * Update user security data\n   */\n  async updateSecurityData(\n    userId: string,\n    securityData: Partial<UserSecurityData>\n  ): Promise<RepositoryResult<UserData>> {\n    try {\n      return await this.update(userId, securityData);\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'updateSecurityData'),\n      };\n    }\n  }\n\n  /**\n   * Record login attempt\n   */\n  async recordLoginAttempt(\n    email: string,\n    success: boolean,\n    ipAddress?: string\n  ): Promise<RepositoryResult<UserData>> {\n    try {\n      const userResult = await this.findByEmail(email);\n      if (!userResult.success || !userResult.data) {\n        return {\n          success: false,\n          error: {\n            code: 'USER_NOT_FOUND',\n            message: 'User not found',\n          },\n        };\n      }\n\n      const user = userResult.data;\n      const updateData: Partial<UserData> = {};\n\n      if (success) {\n        // Reset login attempts on successful login\n        updateData.login_attempts = 0;\n        updateData.last_login = new Date().toISOString();\n        updateData.locked_until = undefined;\n      } else {\n        // Increment login attempts on failed login\n        const attempts = (user.login_attempts || 0) + 1;\n        updateData.login_attempts = attempts;\n\n        // Lock account after 5 failed attempts\n        if (attempts >= 5) {\n          const lockUntil = new Date();\n          lockUntil.setMinutes(lockUntil.getMinutes() + 30); // Lock for 30 minutes\n          updateData.locked_until = lockUntil.toISOString();\n        }\n      }\n\n      return await this.update(user.id!, updateData);\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'recordLoginAttempt'),\n      };\n    }\n  }\n\n  /**\n   * Check if user account is locked\n   */\n  async isAccountLocked(email: string): Promise<RepositoryResult<boolean>> {\n    try {\n      const userResult = await this.findByEmail(email);\n      if (!userResult.success || !userResult.data) {\n        return {\n          success: false,\n          error: {\n            code: 'USER_NOT_FOUND',\n            message: 'User not found',\n          },\n        };\n      }\n\n      const user = userResult.data;\n      const now = new Date();\n      const isLocked = user.locked_until && new Date(user.locked_until) > now;\n\n      return {\n        success: true,\n        data: Boolean(isLocked),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'isAccountLocked'),\n      };\n    }\n  }\n\n  /**\n   * Get inactive users (haven't logged in for specified days)\n   */\n  async getInactiveUsers(daysSinceLastLogin: number): Promise<RepositoryResult<UserData[]>> {\n    try {\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - daysSinceLastLogin);\n\n      const queryBuilder = (supabase: SupabaseClient) => {\n        return supabase\n          .from(this.tableName)\n          .select('*')\n          .or(`last_login.is.null,last_login.lt.${cutoffDate.toISOString()}`)\n          .eq('is_active', true)\n          .order('last_login', { ascending: true, nullsFirst: true });\n      };\n\n      return await this.executeQuery(queryBuilder, 'GET_INACTIVE_USERS');\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'getInactiveUsers'),\n      };\n    }\n  }\n\n  /**\n   * Deactivate user account\n   */\n  async deactivateUser(userId: string, reason?: string): Promise<RepositoryResult<UserData>> {\n    try {\n      const updateData: Partial<UserData> = {\n        is_active: false,\n        updated_at: new Date().toISOString(),\n      };\n\n      const result = await this.update(userId, updateData);\n\n      if (result.success) {\n        await this.auditOperation('DEACTIVATE', userId, true, { reason });\n      }\n\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'deactivateUser'),\n      };\n    }\n  }\n\n  /**\n   * Activate user account\n   */\n  async activateUser(userId: string): Promise<RepositoryResult<UserData>> {\n    try {\n      const updateData: Partial<UserData> = {\n        is_active: true,\n        login_attempts: 0,\n        locked_until: undefined,\n        updated_at: new Date().toISOString(),\n      };\n\n      const result = await this.update(userId, updateData);\n\n      if (result.success) {\n        await this.auditOperation('ACTIVATE', userId, true);\n      }\n\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error, 'activateUser'),\n      };\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/atoms/Badge/Badge.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/atoms/Button/Button.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/atoms/Chart/ChartContainer/ChartContainer.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/atoms/Chart/ChartEmptyState/ChartEmptyState.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/atoms/Chart/ChartLegend/ChartLegend.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mousePosition' is assigned a value but never used.","line":132,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":132,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport React, { useState } from 'react';\nimport ChartLegend from '@/components/atoms/ChartLegend';\n\nconst meta: Meta<typeof ChartLegend> = {\n  title: 'Atoms/Chart/ChartLegend',\n  component: ChartLegend,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component:\n          'A legend component for charts that displays items with color indicators, labels, values, and percentages. Supports hover interactions and handles empty data gracefully.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    items: {\n      control: 'object',\n      description: 'Array of legend items with label, value, percentage, and color',\n    },\n    onItemHover: {\n      action: 'itemHovered',\n      description: 'Callback function when an item is hovered',\n    },\n    hoveredItem: {\n      control: 'text',\n      description: 'The label of the currently hovered item',\n    },\n    className: {\n      control: 'text',\n      description: 'Additional CSS classes to apply to the legend',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nconst sampleData = [\n  { label: 'Male', value: 1245, percentage: 52.3, color: '#3B82F6' },\n  { label: 'Female', value: 1134, percentage: 47.7, color: '#10B981' },\n];\n\nconst ageData = [\n  { label: 'Young (0-17)', value: 789, percentage: 35.6, color: '#3B82F6' },\n  { label: 'Working Age (18-64)', value: 1234, percentage: 55.8, color: '#10B981' },\n  { label: 'Senior (65+)', value: 189, percentage: 8.6, color: '#F59E0B' },\n];\n\nconst employmentData = [\n  { label: 'Employed', value: 890, percentage: 67.8, color: '#10B981' },\n  { label: 'Unemployed', value: 234, percentage: 17.8, color: '#EF4444' },\n  { label: 'Student', value: 156, percentage: 11.9, color: '#F59E0B' },\n  { label: 'Retired', value: 32, percentage: 2.4, color: '#8B5CF6' },\n];\n\nconst dataWithZeros = [\n  { label: 'Active', value: 1456, percentage: 100.0, color: '#3B82F6' },\n  { label: 'Inactive', value: 0, percentage: 0.0, color: '#10B981' },\n  { label: 'Pending', value: 0, percentage: 0.0, color: '#F59E0B' },\n];\n\nexport const Default: Story = {\n  args: {\n    items: sampleData,\n  },\n};\n\nexport const WithAgeDistribution: Story = {\n  args: {\n    items: ageData,\n  },\n};\n\nexport const WithEmploymentStatus: Story = {\n  args: {\n    items: employmentData,\n  },\n};\n\nexport const WithZeroValues: Story = {\n  args: {\n    items: dataWithZeros,\n  },\n};\n\nexport const WithHoveredItem: Story = {\n  args: {\n    items: sampleData,\n    hoveredItem: 'Male',\n  },\n};\n\nexport const SingleItem: Story = {\n  args: {\n    items: [{ label: 'Total Population', value: 2379, percentage: 100.0, color: '#3B82F6' }],\n  },\n};\n\nexport const LargeNumbers: Story = {\n  args: {\n    items: [\n      { label: 'Registered Voters', value: 15678, percentage: 78.4, color: '#3B82F6' },\n      { label: 'Non-Voters', value: 4322, percentage: 21.6, color: '#10B981' },\n    ],\n  },\n};\n\nexport const LongLabels: Story = {\n  args: {\n    items: [\n      { label: 'Single/Never Married', value: 567, percentage: 34.5, color: '#3B82F6' },\n      { label: 'Married/Living Together', value: 890, percentage: 54.2, color: '#10B981' },\n      { label: 'Separated/Divorced/Widowed', value: 186, percentage: 11.3, color: '#F59E0B' },\n    ],\n  },\n};\n\nexport const CustomStyling: Story = {\n  args: {\n    items: sampleData,\n    className:\n      'bg-zinc-50 dark:bg-zinc-900 p-4 rounded-lg border-zinc-200 dark:border-zinc-800 border',\n  },\n};\n\n// Create a wrapper component for the interactive demo\nconst InteractiveDemoComponent = () => {\n  const [hoveredItem, setHoveredItem] = useState<string | null>(null);\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n\n  const handleItemHover = (\n    item: { label: string; value: number; color: string } | null,\n    event?: React.MouseEvent\n  ) => {\n    if (item && event) {\n      setHoveredItem(item.label);\n      setMousePosition({ x: event.clientX, y: event.clientY });\n    } else {\n      setHoveredItem(null);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"text-sm text-zinc-400 dark:text-zinc-500\">\n        Hover over legend items to see interactions\n      </div>\n      <ChartLegend items={ageData} onItemHover={handleItemHover} hoveredItem={hoveredItem} />\n      {hoveredItem && <div className=\"text-link text-sm\">Currently hovering: {hoveredItem}</div>}\n    </div>\n  );\n};\n\nexport const InteractiveDemo: Story = {\n  render: () => <InteractiveDemoComponent />,\n  parameters: {\n    layout: 'padded',\n  },\n};\n\nexport const InChartContainer: Story = {\n  render: args => (\n    <div className=\"w-96 rounded-lg border border-zinc-200 bg-white p-6 dark:border-zinc-800 dark:bg-zinc-950\">\n      <h3 className=\"font-display mb-4 text-lg font-semibold text-zinc-900 dark:text-zinc-100\">\n        Population by Age Group\n      </h3>\n      <div className=\"grid grid-cols-2 gap-6\">\n        <div className=\"flex items-center justify-center\">\n          <div className=\"bg-muted flex h-32 w-32 items-center justify-center rounded-full\">\n            <span className=\"text-xs text-zinc-500 dark:text-zinc-400\">Pie Chart</span>\n          </div>\n        </div>\n        <ChartLegend {...args} />\n      </div>\n    </div>\n  ),\n  args: {\n    items: ageData,\n  },\n  parameters: {\n    layout: 'padded',\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/atoms/Chart/ChartTitle/ChartTitle.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/atoms/Chart/ChartTooltip/ChartTooltip.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/atoms/Field/Control/Checkbox/Checkbox.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/atoms/Field/Control/Control.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/atoms/Field/Control/Radio/Radio.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/atoms/Field/Control/TitleDescription.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/atoms/Field/Control/Toggle/Toggle.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/atoms/Field/HelperText/HelperText.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/atoms/Field/Input/Input.stories.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":381,"column":18,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9520,9539],"text":"\n          Value: &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9520,9539],"text":"\n          Value: &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9520,9539],"text":"\n          Value: &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9520,9539],"text":"\n          Value: &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":381,"column":26,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9546,9557],"text":"&quot; (Length: "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9546,9557],"text":"&ldquo; (Length: "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9546,9557],"text":"&#34; (Length: "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9546,9557],"text":"&rdquo; (Length: "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { useState } from 'react';\nimport { Input } from '@/components/atoms/Input';\n\n// Common icons for examples\nconst SearchIcon = () => (\n  <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n    />\n  </svg>\n);\n\nconst UserIcon = () => (\n  <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\n    />\n  </svg>\n);\n\nconst EmailIcon = () => (\n  <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      d=\"M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207\"\n    />\n  </svg>\n);\n\nconst LockIcon = () => (\n  <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\"\n    />\n  </svg>\n);\n\nconst CheckIcon = () => (\n  <svg className=\"h-4 w-4 text-green-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n  </svg>\n);\n\nconst meta: Meta<typeof Input> = {\n  title: 'Atoms/Field/Input',\n  component: Input,\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component: `\nEnhanced Input component following Select component design patterns with comprehensive features.\n\n## Features\n- **Select-Inspired Design**: Consistent with Select component styling\n- **Left & Right Icons**: Support for icons on both sides\n- **Dismissible/Clear**: Clear button functionality\n- **Password Toggle**: Eye icon for password visibility\n- **Full Accessibility**: WCAG 2.1 AA compliant with proper ARIA attributes\n- **Dark Mode**: Complete dark theme support\n- **Error Handling**: Built-in error message display\n\n## Usage\n\\`\\`\\`tsx\nimport { Input } from '@/components';\n\n<Input\n  type=\"email\"\n  placeholder=\"Enter your email\"\n  leftIcon={<EmailIcon />}\n  dismissible={true}\n  error=\"Please enter a valid email\"\n/>\n\\`\\`\\`\n        `,\n      },\n    },\n  },\n  argTypes: {\n    type: {\n      control: 'select',\n      options: ['text', 'email', 'password', 'number', 'tel', 'url', 'search'],\n      description: 'HTML input type',\n    },\n    placeholder: {\n      control: 'text',\n      description: 'Placeholder text',\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Whether the input is disabled',\n    },\n    error: {\n      control: 'text',\n      description: 'Error message to display',\n    },\n    clearable: {\n      control: 'boolean',\n      description: 'Whether to show a clear button when input has content',\n    },\n    dismissible: {\n      control: 'boolean',\n      description: 'Alternative to clearable - whether input is dismissible',\n    },\n    showPasswordToggle: {\n      control: 'boolean',\n      description: 'Whether to show password visibility toggle for password inputs',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Input>;\n\n// Basic Examples\nexport const Default: Story = {\n  args: {\n    placeholder: 'Enter text here...',\n  },\n};\n\nexport const WithError: Story = {\n  args: {\n    placeholder: 'Enter your email',\n    error: 'Please enter a valid email address',\n    type: 'email',\n  },\n};\n\nexport const Disabled: Story = {\n  args: {\n    placeholder: 'This input is disabled',\n    disabled: true,\n    value: 'Disabled value',\n  },\n};\n\n// Icon Examples\nexport const WithLeftIcon: Story = {\n  args: {\n    placeholder: 'Search...',\n    leftIcon: <SearchIcon />,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Input with left icon for visual context.',\n      },\n    },\n  },\n};\n\nexport const WithRightIcon: Story = {\n  args: {\n    placeholder: 'Enter valid data',\n    value: 'Valid input',\n    rightIcon: <CheckIcon />,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Input with right icon showing validation status.',\n      },\n    },\n  },\n};\n\nexport const WithBothIcons: Story = {\n  args: {\n    placeholder: 'Search users...',\n    leftIcon: <SearchIcon />,\n    rightIcon: <UserIcon />,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Input with both left and right icons.',\n      },\n    },\n  },\n};\n\n// Dismissible/Clear Examples\nexport const Dismissible: Story = {\n  render: () => {\n    const [value, setValue] = useState('This text can be dismissed');\n\n    return (\n      <div className=\"space-y-2\">\n        <Input\n          placeholder=\"Type something and see the dismiss button...\"\n          dismissible={true}\n          value={value}\n          onChange={e => setValue(e.target.value)}\n          onClear={() => setValue('')}\n        />\n        <p className=\"text-sm text-gray-500\">Click the × button to dismiss/clear the input</p>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Input with dismissible functionality. Shows a dismiss button when there is content.',\n      },\n    },\n  },\n};\n\nexport const SearchWithClear: Story = {\n  render: () => {\n    const [value, setValue] = useState('Search query');\n\n    return (\n      <div className=\"space-y-2\">\n        <Input\n          type=\"search\"\n          placeholder=\"Search...\"\n          leftIcon={<SearchIcon />}\n          clearable={true}\n          value={value}\n          onChange={e => setValue(e.target.value)}\n          onClear={() => setValue('')}\n        />\n        <p className=\"text-sm text-gray-500\">Search input with left icon and clear functionality</p>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Search input combining left icon and clear functionality.',\n      },\n    },\n  },\n};\n\n// Password Examples\nexport const PasswordWithEye: Story = {\n  render: () => {\n    const [value, setValue] = useState('mySecretPassword');\n\n    return (\n      <div className=\"space-y-2\">\n        <Input\n          type=\"password\"\n          placeholder=\"Enter your password\"\n          leftIcon={<LockIcon />}\n          showPasswordToggle={true}\n          value={value}\n          onChange={e => setValue(e.target.value)}\n        />\n        <p className=\"text-sm text-gray-500\">Password with lock icon and eye toggle</p>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Password input with left lock icon and eye toggle for visibility.',\n      },\n    },\n  },\n};\n\nexport const PasswordAllFeatures: Story = {\n  render: () => {\n    const [value, setValue] = useState('myComplexPassword123!');\n\n    return (\n      <div className=\"space-y-2\">\n        <Input\n          type=\"password\"\n          placeholder=\"Enter your password\"\n          leftIcon={<LockIcon />}\n          showPasswordToggle={true}\n          dismissible={true}\n          value={value}\n          onChange={e => setValue(e.target.value)}\n          onClear={() => setValue('')}\n        />\n        <p className=\"text-sm text-gray-500\">\n          Password with all features: lock icon, eye toggle, and dismiss button\n        </p>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Password input showcasing all features: left icon, password toggle, and dismissible.',\n      },\n    },\n  },\n};\n\n// Form Field Examples\nexport const EmailWithIcon: Story = {\n  render: () => {\n    const [value, setValue] = useState('user@example.com');\n\n    return (\n      <div className=\"space-y-2\">\n        <Input\n          type=\"email\"\n          placeholder=\"Enter your email\"\n          leftIcon={<EmailIcon />}\n          rightIcon={<CheckIcon />}\n          value={value}\n          onChange={e => setValue(e.target.value)}\n        />\n        <p className=\"text-sm text-gray-500\">\n          Email input with email icon and validation checkmark\n        </p>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Email input with contextual icons for better UX.',\n      },\n    },\n  },\n};\n\n// Interactive Example\nexport const Interactive: Story = {\n  render: () => {\n    const [value, setValue] = useState('');\n    const [error, setError] = useState('');\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const newValue = e.target.value;\n      setValue(newValue);\n\n      // Simple validation\n      if (newValue.length > 0 && newValue.length < 3) {\n        setError('Must be at least 3 characters');\n      } else {\n        setError('');\n      }\n    };\n\n    const handleClear = () => {\n      setValue('');\n      setError('');\n    };\n\n    return (\n      <div className=\"space-y-4\">\n        <div>\n          <label htmlFor=\"interactive-input\" className=\"mb-1 block text-sm font-medium\">\n            Interactive Input with Clear\n          </label>\n          <Input\n            id=\"interactive-input\"\n            value={value}\n            onChange={handleChange}\n            onClear={handleClear}\n            placeholder=\"Type something...\"\n            error={error}\n            clearable={true}\n          />\n        </div>\n        <div className=\"text-sm text-gray-600\">\n          Value: \"{value}\" (Length: {value.length})\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Interactive example showing real-time validation, state management, and clearable functionality.',\n      },\n    },\n  },\n};\n\n// Playground\nexport const Playground: Story = {\n  args: {\n    placeholder: 'Customize this input...',\n    variant: 'default',\n    type: 'text',\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Playground to experiment with different Input configurations.',\n      },\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/atoms/Field/Label/Label.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/atoms/Field/ReadOnly/ReadOnly.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/atoms/Field/Select/Option/Option.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/atoms/Field/Select/Select.stories.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":254,"column":26,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6409,6436],"text":"\n          Current value: &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6409,6436],"text":"\n          Current value: &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6409,6436],"text":"\n          Current value: &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6409,6436],"text":"\n          Current value: &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":254,"column":34,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6443,6494],"text":"&quot; • Type custom values or select from list\n        "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6443,6494],"text":"&ldquo; • Type custom values or select from list\n        "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6443,6494],"text":"&#34; • Type custom values or select from list\n        "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6443,6494],"text":"&rdquo; • Type custom values or select from list\n        "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'mockPSGCData'. Either include it or remove the dependency array.","line":662,"column":8,"nodeType":"ArrayExpression","endLine":662,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [mockPSGCData]","fix":{"range":[18696,18698],"text":"[mockPSGCData]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'mockPSOCData'. Either include it or remove the dependency array.","line":690,"column":8,"nodeType":"ArrayExpression","endLine":690,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [mockPSOCData]","fix":{"range":[19545,19547],"text":"[mockPSOCData]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":1106,"column":59,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[33621,33754],"text":"\n            Note: Stories will show mock data if proxy isn&apos;t configured, demonstrating the same API\n            patterns.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[33621,33754],"text":"\n            Note: Stories will show mock data if proxy isn&lsquo;t configured, demonstrating the same API\n            patterns.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[33621,33754],"text":"\n            Note: Stories will show mock data if proxy isn&#39;t configured, demonstrating the same API\n            patterns.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[33621,33754],"text":"\n            Note: Stories will show mock data if proxy isn&rsquo;t configured, demonstrating the same API\n            patterns.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { useState, useCallback, useMemo, useRef, useEffect } from 'react';\nimport Select from '@/components/atoms/Select';\nimport {\n  SEX_OPTIONS,\n  CIVIL_STATUS_OPTIONS,\n  CITIZENSHIP_OPTIONS,\n  EDUCATION_LEVEL_OPTIONS,\n  EMPLOYMENT_STATUS_OPTIONS,\n} from '@/lib/constants/resident-enums';\nimport {\n  withAuthenticatedSupabase,\n  withUnauthenticatedSupabase,\n  mockPSGCData,\n  mockPSOCData,\n} from '@/../.storybook/decorators/SupabaseDecorator';\n\nconst meta: Meta<typeof Select> = {\n  title: 'Atoms/Field/Select',\n  component: Select,\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component: `\nEnhanced Select component that follows PSGCSelector patterns but works with static enum/constant data.\n\n## Features\n- **Searchable**: Type to filter options\n- **Keyboard Navigation**: Arrow keys, Enter, Escape support\n- **Enum Support**: Direct integration with TypeScript enums and constants\n- **Consistent UX**: Same patterns as PSGCSelector and PSOCSelector\n- **Dark Mode**: Full dark theme support\n- **Accessibility**: WCAG 2.1 AA compliant\n\n## Usage with Enums/Constants\n\\`\\`\\`tsx\nimport { Select } from '@/components/atoms/Field';\nimport { SEX_OPTIONS } from '@/lib/constants/resident-enums';\n\n<Select\n  enumData={SEX_OPTIONS}\n  value={selectedValue}\n  onSelect={(option) => setSelectedValue(option?.value || '')}\n  placeholder=\"Select gender...\"\n/>\n\\`\\`\\`\n        `,\n      },\n    },\n  },\n  argTypes: {\n    searchable: {\n      control: 'boolean',\n      description: 'Whether to enable search/filter functionality',\n    },\n    allowCustom: {\n      control: 'boolean',\n      description: 'Whether to allow custom input values',\n    },\n    clearOnSelect: {\n      control: 'boolean',\n      description: 'Whether to clear search term after selection',\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Whether the select is disabled',\n    },\n    error: {\n      control: 'text',\n      description: 'Error message to display',\n    },\n    placeholder: {\n      control: 'text',\n      description: 'Placeholder text',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Select>;\n\n// Basic Examples with Constants\nexport const WithSexOptions: Story = {\n  render: () => {\n    const [value, setValue] = useState('');\n\n    return (\n      <Select\n        enumData={SEX_OPTIONS}\n        value={value}\n        onSelect={option => setValue(option?.value || '')}\n        placeholder=\"Select gender...\"\n      />\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Select using SEX_OPTIONS constant from resident-enums.ts. Type to search or use arrow keys to navigate.',\n      },\n    },\n  },\n};\n\nexport const WithCivilStatusOptions: Story = {\n  render: () => {\n    const [value, setValue] = useState('');\n\n    return (\n      <Select\n        enumData={CIVIL_STATUS_OPTIONS}\n        value={value}\n        onSelect={option => setValue(option?.value || '')}\n        placeholder=\"Select civil status...\"\n      />\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Select using CIVIL_STATUS_OPTIONS constant with multiple options.',\n      },\n    },\n  },\n};\n\nexport const WithEducationLevels: Story = {\n  render: () => {\n    const [value, setValue] = useState('');\n\n    return (\n      <Select\n        enumData={EDUCATION_LEVEL_OPTIONS}\n        value={value}\n        onSelect={option => setValue(option?.value || '')}\n        placeholder=\"Select education level...\"\n      />\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Select using EDUCATION_LEVEL_OPTIONS showing educational attainment levels.',\n      },\n    },\n  },\n};\n\n// Enhanced Options with Descriptions\nexport const WithDescriptions: Story = {\n  render: () => {\n    const [value, setValue] = useState('');\n\n    const optionsWithDescriptions = [\n      {\n        value: 'admin',\n        label: 'Administrator',\n        description: 'Full access to all system features',\n      },\n      {\n        value: 'moderator',\n        label: 'Moderator',\n        description: 'Can manage users and content',\n      },\n      {\n        value: 'user',\n        label: 'Regular User',\n        description: 'Basic access to system features',\n      },\n      {\n        value: 'guest',\n        label: 'Guest',\n        description: 'Limited read-only access',\n        disabled: true,\n      },\n    ];\n\n    return (\n      <Select\n        options={optionsWithDescriptions}\n        value={value}\n        onSelect={option => setValue(option?.value || '')}\n        placeholder=\"Select user role...\"\n      />\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Select with option descriptions that appear below each option label.',\n      },\n    },\n  },\n};\n\n// Searchable Examples\nexport const SearchableSelect: Story = {\n  render: () => {\n    const [value, setValue] = useState('');\n\n    const countries = [\n      { value: 'ph', label: 'Philippines' },\n      { value: 'us', label: 'United States' },\n      { value: 'jp', label: 'Japan' },\n      { value: 'kr', label: 'South Korea' },\n      { value: 'sg', label: 'Singapore' },\n      { value: 'my', label: 'Malaysia' },\n      { value: 'th', label: 'Thailand' },\n      { value: 'vn', label: 'Vietnam' },\n      { value: 'id', label: 'Indonesia' },\n      { value: 'au', label: 'Australia' },\n    ];\n\n    return (\n      <div className=\"space-y-2\">\n        <Select\n          options={countries}\n          value={value}\n          onSelect={option => setValue(option?.value || '')}\n          placeholder=\"Search countries...\"\n          searchable={true}\n        />\n        <p className=\"text-sm text-gray-500\">Selected: {value || 'None'} • Type to search</p>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Searchable select - type to filter options in real-time.',\n      },\n    },\n  },\n};\n\n// Custom Input Allowed\nexport const AllowCustomInput: Story = {\n  render: () => {\n    const [value, setValue] = useState('');\n\n    return (\n      <div className=\"space-y-2\">\n        <Select\n          enumData={EMPLOYMENT_STATUS_OPTIONS}\n          value={value}\n          onSelect={option => setValue(option?.value || '')}\n          placeholder=\"Select or type employment status...\"\n          allowCustom={true}\n          searchable={true}\n        />\n        <p className=\"text-sm text-gray-500\">\n          Current value: \"{value}\" • Type custom values or select from list\n        </p>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Allow custom input values in addition to predefined options.',\n      },\n    },\n  },\n};\n\n// States Examples\nexport const ErrorState: Story = {\n  render: () => {\n    const [value, setValue] = useState('');\n\n    return (\n      <Select\n        enumData={CITIZENSHIP_OPTIONS}\n        value={value}\n        onSelect={option => setValue(option?.value || '')}\n        placeholder=\"Select citizenship...\"\n        error=\"Please select a citizenship option\"\n      />\n    );\n  },\n};\n\nexport const DisabledState: Story = {\n  render: () => {\n    return (\n      <Select\n        enumData={SEX_OPTIONS}\n        value=\"male\"\n        onSelect={() => {}}\n        placeholder=\"This select is disabled\"\n        disabled={true}\n      />\n    );\n  },\n};\n\n// Interactive Playground\nexport const InteractiveDemo: Story = {\n  render: () => {\n    const [sex, setSex] = useState('');\n    const [civilStatus, setCivilStatus] = useState('');\n    const [education, setEducation] = useState('');\n\n    return (\n      <div className=\"max-w-md space-y-6\">\n        <h3 className=\"text-lg font-semibold\">Resident Information Form</h3>\n\n        <div className=\"space-y-2\">\n          <label className=\"block text-sm font-medium text-gray-600 dark:text-gray-400\">\n            Gender <span className=\"text-red-500\">*</span>\n          </label>\n          <Select\n            enumData={SEX_OPTIONS}\n            value={sex}\n            onSelect={option => setSex(option?.value || '')}\n            placeholder=\"Select gender...\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <label className=\"block text-sm font-medium text-gray-600 dark:text-gray-400\">\n            Civil Status <span className=\"text-red-500\">*</span>\n          </label>\n          <Select\n            enumData={CIVIL_STATUS_OPTIONS}\n            value={civilStatus}\n            onSelect={option => setCivilStatus(option?.value || '')}\n            placeholder=\"Select civil status...\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <label className=\"block text-sm font-medium text-gray-600 dark:text-gray-400\">\n            Education Level\n          </label>\n          <Select\n            enumData={EDUCATION_LEVEL_OPTIONS}\n            value={education}\n            onSelect={option => setEducation(option?.value || '')}\n            placeholder=\"Select education level...\"\n          />\n        </div>\n\n        <div className=\"rounded-lg bg-gray-50 p-4 dark:bg-gray-800\">\n          <h4 className=\"mb-2 font-medium\">Form Values:</h4>\n          <pre className=\"text-sm\">\n            {JSON.stringify(\n              {\n                sex,\n                civilStatus,\n                education,\n              },\n              null,\n              2\n            )}\n          </pre>\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Interactive form demo showing multiple selects working with resident enum constants.',\n      },\n    },\n  },\n};\n\n// Keyboard Navigation Demo\nexport const KeyboardNavigation: Story = {\n  render: () => {\n    const [value, setValue] = useState('');\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <label className=\"block text-sm font-medium text-gray-600 dark:text-gray-400\">\n            Civil Status\n          </label>\n          <Select\n            enumData={CIVIL_STATUS_OPTIONS}\n            value={value}\n            onSelect={option => setValue(option?.value || '')}\n            placeholder=\"Try keyboard navigation...\"\n          />\n        </div>\n        <div className=\"space-y-1 text-sm text-gray-600 dark:text-gray-400\">\n          <p>\n            <kbd className=\"rounded bg-gray-200 px-2 py-1 dark:bg-gray-700\">↓</kbd> Open dropdown /\n            Next option\n          </p>\n          <p>\n            <kbd className=\"rounded bg-gray-200 px-2 py-1 dark:bg-gray-700\">↑</kbd> Previous option\n          </p>\n          <p>\n            <kbd className=\"rounded bg-gray-200 px-2 py-1 dark:bg-gray-700\">Enter</kbd> Select\n            highlighted option\n          </p>\n          <p>\n            <kbd className=\"rounded bg-gray-200 px-2 py-1 dark:bg-gray-700\">Esc</kbd> Close dropdown\n          </p>\n          <p>\n            <kbd className=\"rounded bg-gray-200 px-2 py-1 dark:bg-gray-700\">Type</kbd> Filter\n            options\n          </p>\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Full keyboard navigation support with visual guide.',\n      },\n    },\n  },\n};\n\n// API-Driven Examples (PSGC and PSOC patterns)\nexport const PSGCPattern: Story = {\n  render: () => {\n    const [value, setValue] = useState('');\n    const [searchResults, setSearchResults] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    // Mock PSGC API search - use useMemo to prevent recreation\n    const mockPSGCData = useMemo(\n      () => [\n        { code: '137401001', name: 'Barangay Bagong Silang, Caloocan City, Metro Manila' },\n        { code: '137401002', name: 'Barangay Bagong Barrio, Caloocan City, Metro Manila' },\n        { code: '137402001', name: 'Barangay Baesa, Quezon City, Metro Manila' },\n        { code: '137402002', name: 'Barangay Bagbag, Quezon City, Metro Manila' },\n        { code: '137403001', name: 'Barangay Bangkal, Makati City, Metro Manila' },\n        { code: '137403002', name: 'Barangay Bel-Air, Makati City, Metro Manila' },\n      ],\n      []\n    );\n\n    const handleSearch = useCallback(\n      query => {\n        if (query.length < 2) {\n          setSearchResults([]);\n          setLoading(false);\n          return;\n        }\n\n        setLoading(true);\n\n        // Simulate API delay\n        setTimeout(() => {\n          const filtered = mockPSGCData\n            .filter(\n              item =>\n                item.name.toLowerCase().includes(query.toLowerCase()) || item.code.includes(query)\n            )\n            .map(item => ({\n              value: item.code,\n              label: item.name,\n              description: `Code: ${item.code}`,\n            }));\n\n          setSearchResults(filtered);\n          setLoading(false);\n        }, 500);\n      },\n      [mockPSGCData]\n    );\n\n    return (\n      <div className=\"space-y-2\">\n        <label className=\"block text-sm font-medium text-gray-600 dark:text-gray-400\">\n          Geographic Location (PSGC Pattern)\n        </label>\n        <Select\n          options={searchResults}\n          onSearch={handleSearch}\n          loading={loading}\n          value={value}\n          onSelect={option => setValue(option?.value || '')}\n          placeholder=\"Search for barangay...\"\n          searchable={true}\n        />\n        <p className=\"text-sm text-gray-500\">\n          Selected PSGC Code: {value || 'None'} • Type at least 2 characters to search\n        </p>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'API-driven Select following PSGCSelector patterns for geographic location search. Demonstrates debounced search with loading states.',\n      },\n    },\n  },\n};\n\nexport const PSOCPattern: Story = {\n  render: () => {\n    const [value, setValue] = useState('');\n    const [searchResults, setSearchResults] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    // Mock PSOC API search - use useMemo to prevent recreation\n    const mockPSOCData = useMemo(\n      () => [\n        {\n          code: '1111',\n          title: 'Chief Executives, Senior Officials and Legislators',\n          description: 'Leadership and governance roles',\n        },\n        {\n          code: '2111',\n          title: 'Physicists and Astronomers',\n          description: 'Physical sciences professionals',\n        },\n        { code: '2112', title: 'Meteorologists', description: 'Weather and climate specialists' },\n        { code: '2113', title: 'Chemists', description: 'Chemical sciences professionals' },\n        {\n          code: '2114',\n          title: 'Geologists and Geophysicists',\n          description: 'Earth sciences professionals',\n        },\n        {\n          code: '3111',\n          title: 'Chemical and Physical Science Technicians',\n          description: 'Laboratory and research support',\n        },\n        {\n          code: '5111',\n          title: 'Travel Attendants and Travel Stewards',\n          description: 'Tourism and hospitality services',\n        },\n      ],\n      []\n    );\n\n    const handleSearch = useCallback(\n      query => {\n        if (query.length < 2) {\n          setSearchResults([]);\n          setLoading(false);\n          return;\n        }\n\n        setLoading(true);\n\n        // Simulate API delay\n        setTimeout(() => {\n          const filtered = mockPSOCData\n            .filter(\n              item =>\n                item.title.toLowerCase().includes(query.toLowerCase()) ||\n                item.description.toLowerCase().includes(query.toLowerCase()) ||\n                item.code.includes(query)\n            )\n            .map(item => ({\n              value: item.code,\n              label: item.title,\n              description: `${item.code} - ${item.description}`,\n            }));\n\n          setSearchResults(filtered);\n          setLoading(false);\n        }, 400);\n      },\n      [mockPSOCData]\n    );\n\n    return (\n      <div className=\"space-y-2\">\n        <label className=\"block text-sm font-medium text-gray-600 dark:text-gray-400\">\n          Occupation (PSOC Pattern)\n        </label>\n        <Select\n          options={searchResults}\n          onSearch={handleSearch}\n          loading={loading}\n          value={value}\n          onSelect={option => setValue(option?.value || '')}\n          placeholder=\"Search for occupation...\"\n          searchable={true}\n        />\n        <p className=\"text-sm text-gray-500\">\n          Selected PSOC Code: {value || 'None'} • Type occupation name or code\n        </p>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'API-driven Select following PSOCSelector patterns for occupation search. Shows how to implement Philippine Standard Occupational Classification searches.',\n      },\n    },\n  },\n};\n\nexport const APIComparison: Story = {\n  render: () => {\n    const [psgcValue, setPsgcValue] = useState('');\n    const [psocValue, setPsocValue] = useState('');\n    const [psgcResults, setPsgcResults] = useState([]);\n    const [psocResults, setPsocResults] = useState([]);\n    const [psgcLoading, setPsgcLoading] = useState(false);\n    const [psocLoading, setPsocLoading] = useState(false);\n\n    // Refs to track timeouts\n    const psgcTimeoutRef = useRef(null);\n    const psocTimeoutRef = useRef(null);\n\n    // Mock data - moved to useMemo to prevent recreating on every render\n    const mockPSGCData = useMemo(\n      () => [\n        { code: '137401001', name: 'Barangay Bagong Silang, Caloocan City' },\n        { code: '137402001', name: 'Barangay Baesa, Quezon City' },\n        { code: '137403001', name: 'Barangay Bangkal, Makati City' },\n      ],\n      []\n    );\n\n    const mockPSOCData = useMemo(\n      () => [\n        { code: '1111', title: 'Chief Executives', description: 'Leadership roles' },\n        { code: '2111', title: 'Physicists', description: 'Physical sciences' },\n        { code: '3111', title: 'Science Technicians', description: 'Laboratory support' },\n      ],\n      []\n    );\n\n    const handlePSGCSearch = useCallback(query => {\n      // Clear existing timeout\n      if (psgcTimeoutRef.current) {\n        clearTimeout(psgcTimeoutRef.current);\n      }\n\n      if (query.length < 2) {\n        setPsgcResults([]);\n        setPsgcLoading(false);\n        return;\n      }\n\n      setPsgcLoading(true);\n      psgcTimeoutRef.current = setTimeout(() => {\n        const filtered = mockPSGCData\n          .filter(item => item.name.toLowerCase().includes(query.toLowerCase()))\n          .map(item => ({\n            value: item.code,\n            label: item.name,\n            description: `Code: ${item.code}`,\n          }));\n        setPsgcResults(filtered);\n        setPsgcLoading(false);\n        psgcTimeoutRef.current = null;\n      }, 300);\n    }, []); // Empty dependency array - mockPSGCData is stable from useMemo\n\n    const handlePSOCSearch = useCallback(query => {\n      // Clear existing timeout\n      if (psocTimeoutRef.current) {\n        clearTimeout(psocTimeoutRef.current);\n      }\n\n      if (query.length < 2) {\n        setPsocResults([]);\n        setPsocLoading(false);\n        return;\n      }\n\n      setPsocLoading(true);\n      psocTimeoutRef.current = setTimeout(() => {\n        const filtered = mockPSOCData\n          .filter(item => item.title.toLowerCase().includes(query.toLowerCase()))\n          .map(item => ({\n            value: item.code,\n            label: item.title,\n            description: `${item.code} - ${item.description}`,\n          }));\n\n        setPsocResults(filtered);\n        setPsocLoading(false);\n        psocTimeoutRef.current = null;\n      }, 350);\n    }, []); // Empty dependency array - mockPSOCData is stable from useMemo\n\n    // Cleanup timeouts on unmount\n    useEffect(() => {\n      return () => {\n        if (psgcTimeoutRef.current) {\n          clearTimeout(psgcTimeoutRef.current);\n        }\n        if (psocTimeoutRef.current) {\n          clearTimeout(psocTimeoutRef.current);\n        }\n      };\n    }, []);\n\n    return (\n      <div className=\"max-w-2xl space-y-6\">\n        <h3 className=\"text-lg font-semibold\">API Pattern Comparison</h3>\n\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <div className=\"space-y-2\">\n            <label className=\"block text-sm font-medium text-gray-600 dark:text-gray-400\">\n              PSGC Geographic Search\n            </label>\n            <Select\n              options={psgcResults}\n              onSearch={handlePSGCSearch}\n              loading={psgcLoading}\n              value={psgcValue}\n              onSelect={option => setPsgcValue(option?.value || '')}\n              placeholder=\"Search barangay...\"\n            />\n            <p className=\"text-xs text-gray-500\">PSGC Code: {psgcValue || 'None'}</p>\n          </div>\n\n          <div className=\"space-y-2\">\n            <label className=\"block text-sm font-medium text-gray-600 dark:text-gray-400\">\n              PSOC Occupation Search\n            </label>\n            <Select\n              options={psocResults}\n              onSearch={handlePSOCSearch}\n              loading={psocLoading}\n              value={psocValue}\n              onSelect={option => setPsocValue(option?.value || '')}\n              placeholder=\"Search occupation...\"\n            />\n            <p className=\"text-xs text-gray-500\">PSOC Code: {psocValue || 'None'}</p>\n          </div>\n        </div>\n\n        <div className=\"rounded-lg bg-gray-50 p-4 dark:bg-gray-800\">\n          <h4 className=\"mb-2 font-medium\">Selected Values:</h4>\n          <pre className=\"text-sm\">\n            {JSON.stringify(\n              {\n                psgcCode: psgcValue,\n                psocCode: psocValue,\n              },\n              null,\n              2\n            )}\n          </pre>\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Side-by-side comparison showing Select component with both PSGC and PSOC API patterns. Demonstrates consistent UX across different data sources.',\n      },\n    },\n  },\n};\n\n// Unauthenticated Context Demo\nexport const UnauthenticatedDemo: Story = {\n  decorators: [withUnauthenticatedSupabase],\n  render: () => {\n    const [value, setValue] = useState('');\n\n    return (\n      <div className=\"space-y-2\">\n        <label className=\"block text-sm font-medium text-gray-600 dark:text-gray-400\">\n          Unauthenticated Context Demo\n        </label>\n        <Select\n          enumData={SEX_OPTIONS}\n          value={value}\n          onSelect={option => setValue(option?.value || '')}\n          placeholder=\"No authentication required...\"\n        />\n        <p className=\"text-sm text-gray-500\">\n          Selected: {value || 'None'} • Using unauthenticated mock context\n        </p>\n        <div className=\"rounded-md border border-yellow-200 bg-yellow-50 p-3 dark:border-yellow-800 dark:bg-yellow-900/20\">\n          <p className=\"text-sm text-yellow-600 dark:text-yellow-400\">\n            <strong>⚠️ Unauthenticated Context:</strong> This story simulates components that work\n            without authentication.\n          </p>\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Demonstrates components using unauthenticated context with mock Supabase decorators.',\n      },\n    },\n  },\n};\n\n// Real API Integration Examples (Using Mock Authentication)\nexport const RealPSGCAPI: Story = {\n  decorators: [withAuthenticatedSupabase],\n  render: () => {\n    const [value, setValue] = useState('');\n    const [searchResults, setSearchResults] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    const handleSearch = useCallback(query => {\n      if (query.length < 2) {\n        setSearchResults([]);\n        return;\n      }\n\n      setLoading(true);\n\n      // Simulate API delay with mock data\n      setTimeout(() => {\n        const filtered = mockPSGCData\n          .filter(\n            item =>\n              item.name.toLowerCase().includes(query.toLowerCase()) ||\n              item.full_address.toLowerCase().includes(query.toLowerCase())\n          )\n          .map(item => ({\n            value: item.code,\n            label: item.full_address,\n            description: `Code: ${item.code} | Level: ${item.level} | 🔐 Mock Auth Context`,\n          }));\n\n        setSearchResults(filtered);\n        setLoading(false);\n      }, 400);\n    }, []);\n\n    return (\n      <div className=\"space-y-2\">\n        <label className=\"block text-sm font-medium text-gray-600 dark:text-gray-400\">\n          Geographic Location (Mock PSGC API with Auth Context)\n        </label>\n        <Select\n          options={searchResults}\n          onSearch={handleSearch}\n          loading={loading}\n          value={value}\n          onSelect={option => setValue(option?.value || '')}\n          placeholder=\"Search Philippine locations...\"\n          searchable={true}\n        />\n        <p className=\"text-sm text-gray-500\">\n          Selected PSGC Code: {value || 'None'} • Using mock Supabase authentication context\n        </p>\n        <div className=\"rounded-md border border-green-200 bg-green-50 p-3 dark:border-green-800 dark:bg-green-900/20\">\n          <p className=\"text-sm text-green-600 dark:text-green-400\">\n            <strong>✅ Mock Authentication Active:</strong> This story uses Storybook decorators to\n            provide authenticated context.\n          </p>\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: `PSGC API integration with mock Supabase authentication context. This demonstrates Option 4: Storybook Decorators approach.\n\n**Features:**\n- Mock authenticated user context\n- Simulated API responses with authentication\n- Consistent UX patterns with real implementation\n- No API proxy configuration required\n\n**Usage:**\n\\`\\`\\`tsx\nexport const YourStory = {\n  decorators: [withAuthenticatedSupabase],\n  render: () => <YourComponent />\n};\n\\`\\`\\``,\n      },\n    },\n  },\n};\n\nexport const RealPSOCAPI: Story = {\n  decorators: [withAuthenticatedSupabase],\n  render: () => {\n    const [value, setValue] = useState('');\n    const [searchResults, setSearchResults] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    const handleSearch = useCallback(query => {\n      if (query.length < 2) {\n        setSearchResults([]);\n        return;\n      }\n\n      setLoading(true);\n\n      // Simulate API delay with mock data\n      setTimeout(() => {\n        const filtered = mockPSOCData\n          .filter(\n            item =>\n              item.title.toLowerCase().includes(query.toLowerCase()) ||\n              item.hierarchy.toLowerCase().includes(query.toLowerCase())\n          )\n          .map(item => ({\n            value: item.code,\n            label: item.title,\n            description: `${item.code} - ${item.level} | ${item.hierarchy} | 🔐 Mock Auth Context`,\n          }));\n\n        setSearchResults(filtered);\n        setLoading(false);\n      }, 350);\n    }, []);\n\n    return (\n      <div className=\"space-y-2\">\n        <label className=\"block text-sm font-medium text-gray-600 dark:text-gray-400\">\n          Occupation (Mock PSOC API with Auth Context)\n        </label>\n        <Select\n          options={searchResults}\n          onSearch={handleSearch}\n          loading={loading}\n          value={value}\n          onSelect={option => setValue(option?.value || '')}\n          placeholder=\"Search Philippine occupations...\"\n          searchable={true}\n        />\n        <p className=\"text-sm text-gray-500\">\n          Selected PSOC Code: {value || 'None'} • Using mock Supabase authentication context\n        </p>\n        <div className=\"rounded-md border border-green-200 bg-green-50 p-3 dark:border-green-800 dark:bg-green-900/20\">\n          <p className=\"text-sm text-green-600 dark:text-green-400\">\n            <strong>✅ Mock Authentication Active:</strong> This story simulates authenticated API\n            calls with consistent UX patterns.\n          </p>\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: `PSOC API integration with mock Supabase authentication context. Demonstrates Option 4: Storybook Decorators for occupation search.\n\n**Features:**\n- Mock authenticated user context\n- Simulated PSOC API responses\n- Real UX patterns without API complexity\n- Easy to test and document\n\n**Decorator Usage:**\n\\`\\`\\`tsx\nexport const YourPSOCStory = {\n  decorators: [withAuthenticatedSupabase],\n  render: () => <YourOccupationSelector />\n};\n\\`\\`\\``,\n      },\n    },\n  },\n};\n\nexport const APIImplementationGuide: Story = {\n  render: () => {\n    return (\n      <div className=\"max-w-4xl space-y-6\">\n        <h3 className=\"text-xl font-bold\">API Integration Implementation Guide</h3>\n\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <div className=\"space-y-4\">\n            <h4 className=\"text-lg font-semibold text-blue-600\">1. PSGC API Setup</h4>\n            <div className=\"rounded-lg bg-gray-50 p-4 dark:bg-gray-800\">\n              <h5 className=\"mb-2 font-medium\">Required API Endpoint:</h5>\n              <code className=\"rounded bg-gray-200 px-2 py-1 text-sm dark:bg-gray-700\">\n                GET /api/psgc/search\n              </code>\n\n              <h5 className=\"mt-4 mb-2 font-medium\">Query Parameters:</h5>\n              <ul className=\"space-y-1 text-sm\">\n                <li>\n                  • <code>q</code> - Search query string\n                </li>\n                <li>\n                  • <code>limit</code> - Maximum results (optional, default: 20)\n                </li>\n                <li>\n                  • <code>levels</code> - Geographic levels: region,province,city,barangay\n                </li>\n              </ul>\n\n              <h5 className=\"mt-4 mb-2 font-medium\">Response Format:</h5>\n              <pre className=\"overflow-x-auto rounded bg-gray-200 p-2 text-xs dark:bg-gray-700\">\n                {`{\n  \"data\": [\n    {\n      \"code\": \"137401001\",\n      \"name\": \"Barangay Bagong Silang\",\n      \"level\": \"barangay\",\n      \"full_address\": \"Barangay Bagong Silang, Caloocan City, Metro Manila\",\n      \"barangay_name\": \"Barangay Bagong Silang\",\n      \"city_name\": \"Caloocan City\",\n      \"province_name\": \"Metro Manila\",\n      \"region_name\": \"NCR\"\n    }\n  ],\n  \"count\": 1\n}`}\n              </pre>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h4 className=\"text-lg font-semibold text-green-600\">2. PSOC API Setup</h4>\n            <div className=\"rounded-lg bg-gray-50 p-4 dark:bg-gray-800\">\n              <h5 className=\"mb-2 font-medium\">Required API Endpoint:</h5>\n              <code className=\"rounded bg-gray-200 px-2 py-1 text-sm dark:bg-gray-700\">\n                GET /api/psoc/search\n              </code>\n\n              <h5 className=\"mt-4 mb-2 font-medium\">Query Parameters:</h5>\n              <ul className=\"space-y-1 text-sm\">\n                <li>\n                  • <code>q</code> - Search query string\n                </li>\n                <li>\n                  • <code>limit</code> - Maximum results (optional, default: 20)\n                </li>\n                <li>\n                  • <code>levels</code> - Occupation levels: major_group,unit_group,occupation\n                </li>\n              </ul>\n\n              <h5 className=\"mt-4 mb-2 font-medium\">Response Format:</h5>\n              <pre className=\"overflow-x-auto rounded bg-gray-200 p-2 text-xs dark:bg-gray-700\">\n                {`{\n  \"data\": [\n    {\n      \"code\": \"1111\",\n      \"title\": \"Chief Executives\",\n      \"level\": \"occupation\",\n      \"hierarchy\": \"Major Group: Managers\",\n      \"match_score\": 5\n    }\n  ],\n  \"count\": 1\n}`}\n              </pre>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4 dark:border-blue-800 dark:bg-blue-900/20\">\n          <h4 className=\"mb-2 font-medium text-blue-800 dark:text-blue-200\">\n            🔧 Next.js API Routes Implementation\n          </h4>\n          <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n            Create the API endpoints in your Next.js application:\n          </p>\n          <ul className=\"mt-2 space-y-1 text-sm text-blue-700 dark:text-blue-300\">\n            <li>\n              • <code>src/app/api/psgc/search/route.ts</code> - PSGC search endpoint\n            </li>\n            <li>\n              • <code>src/app/api/psoc/search/route.ts</code> - PSOC search endpoint\n            </li>\n            <li>• Connect to your PostgreSQL database with PSGC/PSOC tables</li>\n            <li>• Implement proper error handling and validation</li>\n            <li>• Add rate limiting and caching for production use</li>\n          </ul>\n        </div>\n\n        <div className=\"rounded-lg border border-purple-200 bg-purple-50 p-4 dark:border-purple-800 dark:bg-purple-900/20\">\n          <h4 className=\"mb-2 font-medium text-purple-800 dark:text-purple-200\">\n            📖 Storybook API Proxy Setup (Optional)\n          </h4>\n          <p className=\"text-sm text-purple-700 dark:text-purple-300\">\n            To connect Storybook stories to real APIs, configure proxy in{' '}\n            <code>.storybook/main.ts</code>:\n          </p>\n          <pre className=\"mt-2 overflow-x-auto rounded bg-purple-100 p-2 text-xs dark:bg-purple-900/40\">\n            {`webpackFinal: async (config) => {\n  config.devServer = {\n    ...config.devServer,\n    proxy: [{\n      context: ['/api'],\n      target: 'http://localhost:3000',\n      changeOrigin: true,\n      headers: {\n        'Authorization': 'Bearer YOUR_SERVICE_ROLE_KEY'\n      }\n    }]\n  };\n  return config;\n}`}\n          </pre>\n          <p className=\"mt-2 text-xs text-purple-600 dark:text-purple-400\">\n            Note: Stories will show mock data if proxy isn't configured, demonstrating the same API\n            patterns.\n          </p>\n        </div>\n\n        <div className=\"rounded-lg border border-green-200 bg-green-50 p-4 dark:border-green-800 dark:bg-green-900/20\">\n          <h4 className=\"mb-2 font-medium text-green-800 dark:text-green-200\">\n            ✨ Component Usage\n          </h4>\n          <pre className=\"mt-2 text-sm text-green-700 dark:text-green-300\">\n            {`// Real API integration with error handling\nconst [results, setResults] = useState([]);\nconst [loading, setLoading] = useState(false);\n\nconst handleSearch = useCallback(async (query) => {\n  if (query.length < 2) return;\n  \n  setLoading(true);\n  try {\n    const response = await fetch(\\`/api/psgc/search?q=\\${query}&levels=barangay,city\\`);\n    const data = await response.json();\n    \n    setResults(data.data?.map(item => ({\n      value: item.code,\n      label: item.full_address || item.name,\n      description: \\`\\${item.code} - \\${item.level}\\`\n    })) || []);\n  } catch (error) {\n    console.error('API Error:', error);\n  } finally {\n    setLoading(false);\n  }\n}, []);\n\n<Select\n  options={results}\n  onSearch={handleSearch}\n  loading={loading}\n  placeholder=\"Search locations...\"\n/>`}\n          </pre>\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Complete implementation guide for integrating the Select component with real PSGC and PSOC APIs.',\n      },\n    },\n  },\n};\n\n// Playground\nexport const Playground: Story = {\n  args: {\n    enumData: SEX_OPTIONS,\n    placeholder: 'Customize this select...',\n    searchable: true,\n    allowCustom: false,\n    clearOnSelect: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Playground to experiment with different Select configurations.',\n      },\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/atoms/Field/Textarea/Textarea.stories.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":256,"column":26,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6591,6618],"text":"\n          Current value: &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6591,6618],"text":"\n          Current value: &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6591,6618],"text":"\n          Current value: &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6591,6618],"text":"\n          Current value: &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":256,"column":34,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6625,6636],"text":"&quot; (Length: "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6625,6636],"text":"&ldquo; (Length: "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6625,6636],"text":"&#34; (Length: "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6625,6636],"text":"&rdquo; (Length: "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { useState } from 'react';\nimport { Textarea } from '@/components/atoms/Textarea';\n\nconst meta: Meta<typeof Textarea> = {\n  title: 'Atoms/Field/Textarea',\n  component: Textarea,\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component: `\nEnhanced Textarea component following Input component design patterns for consistency.\n\n## Features\n- **Input-Inspired Design**: Consistent with Input component styling\n- **Character Counting**: Optional character count display\n- **Resizable**: Optional vertical resizing\n- **Full Accessibility**: WCAG 2.1 AA compliant with proper ARIA attributes\n- **Dark Mode**: Complete dark theme support\n- **Error Handling**: Built-in error message display\n\n## Usage\n\\`\\`\\`tsx\nimport { Textarea } from '@/components';\n\n<Textarea\n  placeholder=\"Enter your message...\"\n  rows={4}\n  showCharCount={true}\n  maxLength={500}\n  error=\"Please enter a valid message\"\n/>\n\\`\\`\\`\n        `,\n      },\n    },\n  },\n  argTypes: {\n    rows: {\n      control: { type: 'number', min: 1, max: 10 },\n      description: 'Number of visible text lines',\n    },\n    placeholder: {\n      control: 'text',\n      description: 'Placeholder text',\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Whether the textarea is disabled',\n    },\n    error: {\n      control: 'text',\n      description: 'Error message to display',\n    },\n    showCharCount: {\n      control: 'boolean',\n      description: 'Whether to show character count',\n    },\n    resizable: {\n      control: 'boolean',\n      description: 'Whether the textarea is vertically resizable',\n    },\n    maxLength: {\n      control: { type: 'number', min: 0 },\n      description: 'Maximum number of characters allowed',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Textarea>;\n\n// Basic Examples\nexport const Default: Story = {\n  args: {\n    placeholder: 'Enter your text here...',\n    rows: 3,\n  },\n};\n\nexport const WithError: Story = {\n  args: {\n    placeholder: 'Enter your message',\n    error: 'This field is required and cannot be empty',\n    rows: 3,\n  },\n};\n\nexport const Disabled: Story = {\n  args: {\n    placeholder: 'This textarea is disabled',\n    disabled: true,\n    value: 'This content cannot be edited',\n    rows: 3,\n  },\n};\n\n// Character Count Examples\nexport const WithCharacterCount: Story = {\n  render: () => {\n    const [value, setValue] = useState('Type something to see the character count...');\n\n    return (\n      <div className=\"space-y-2\">\n        <Textarea\n          placeholder=\"Type your message...\"\n          showCharCount={true}\n          value={value}\n          onChange={e => setValue(e.target.value)}\n          rows={4}\n        />\n        <p className=\"text-sm text-gray-500\">Character count is shown below the textarea</p>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Textarea with character count display.',\n      },\n    },\n  },\n};\n\nexport const WithMaxLength: Story = {\n  render: () => {\n    const [value, setValue] = useState('');\n\n    return (\n      <div className=\"space-y-2\">\n        <Textarea\n          placeholder=\"Write a tweet (max 280 characters)...\"\n          maxLength={280}\n          showCharCount={true}\n          value={value}\n          onChange={e => setValue(e.target.value)}\n          rows={4}\n        />\n        <p className=\"text-sm text-gray-500\">\n          Try typing more than 280 characters to see the limit warning\n        </p>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Textarea with maximum character limit and visual feedback.',\n      },\n    },\n  },\n};\n\n// Size Examples\nexport const DifferentSizes: Story = {\n  render: () => (\n    <div className=\"space-y-6\">\n      <div className=\"space-y-2\">\n        <label className=\"block text-sm font-medium\">Small (2 rows)</label>\n        <Textarea placeholder=\"Small textarea...\" rows={2} showCharCount={true} />\n      </div>\n\n      <div className=\"space-y-2\">\n        <label className=\"block text-sm font-medium\">Medium (3 rows)</label>\n        <Textarea placeholder=\"Medium textarea...\" rows={3} showCharCount={true} />\n      </div>\n\n      <div className=\"space-y-2\">\n        <label className=\"block text-sm font-medium\">Large (5 rows)</label>\n        <Textarea placeholder=\"Large textarea...\" rows={5} showCharCount={true} />\n      </div>\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Textarea components with different row heights.',\n      },\n    },\n  },\n};\n\n// Resizable Example\nexport const Resizable: Story = {\n  render: () => {\n    const [value, setValue] = useState(\n      'This textarea can be resized vertically. Try dragging the bottom-right corner.'\n    );\n\n    return (\n      <div className=\"space-y-2\">\n        <Textarea\n          placeholder=\"Resizable textarea...\"\n          resizable={true}\n          value={value}\n          onChange={e => setValue(e.target.value)}\n          rows={4}\n          showCharCount={true}\n        />\n        <p className=\"text-sm text-gray-500\">\n          Drag the resize handle in the bottom-right corner to adjust height\n        </p>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Textarea that can be vertically resized by the user.',\n      },\n    },\n  },\n};\n\n// Form Field Example\nexport const AsFieldSet: Story = {\n  render: () => {\n    const [value, setValue] = useState('');\n    const [error, setError] = useState('');\n\n    const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      const newValue = e.target.value;\n      setValue(newValue);\n\n      // Simple validation\n      if (newValue.length > 0 && newValue.length < 10) {\n        setError('Message must be at least 10 characters');\n      } else if (newValue.length > 200) {\n        setError('Message is too long');\n      } else {\n        setError('');\n      }\n    };\n\n    return (\n      <div className=\"max-w-md space-y-4\">\n        <div>\n          <label htmlFor=\"message-textarea\" className=\"mb-2 block text-sm font-medium\">\n            Your Message <span className=\"text-red-500\">*</span>\n          </label>\n          <Textarea\n            id=\"message-textarea\"\n            name=\"message\"\n            value={value}\n            onChange={handleChange}\n            placeholder=\"Tell us what you think...\"\n            error={error}\n            maxLength={200}\n            showCharCount={true}\n            rows={4}\n            required\n          />\n        </div>\n        <div className=\"text-sm text-gray-600\">\n          Current value: \"{value}\" (Length: {value.length})\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Textarea used as a form field with label, validation, and real-time feedback.',\n      },\n    },\n  },\n};\n\n// Comparison with Input Design\nexport const DesignConsistency: Story = {\n  render: () => {\n    const [textareaValue, setTextareaValue] = useState('');\n    const [inputValue, setInputValue] = useState('');\n\n    return (\n      <div className=\"max-w-md space-y-6\">\n        <h3 className=\"text-lg font-semibold\">Design Consistency Demo</h3>\n\n        <div className=\"space-y-2\">\n          <label className=\"block text-sm font-medium\">Single-line Input</label>\n          <input\n            type=\"text\"\n            value={inputValue}\n            onChange={e => setInputValue(e.target.value)}\n            placeholder=\"Type here...\"\n            className=\"font-montserrat min-h-10 w-full rounded-sm border border-0 border-gray-300 bg-white p-2 text-base text-gray-600 shadow-none ring-0 outline-0 placeholder:text-gray-500 focus:border-0 focus:border-blue-600 focus:shadow-[0px_0px_0px_4px_rgba(59,130,246,0.32)] focus:shadow-none focus:ring-0 focus:outline-0 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-300 dark:placeholder:text-gray-400\"\n            style={{\n              border: '1px solid rgb(209 213 219)',\n              outline: 'none',\n              boxShadow: 'none',\n              appearance: 'none',\n            }}\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <label className=\"block text-sm font-medium\">Multi-line Textarea</label>\n          <Textarea\n            value={textareaValue}\n            onChange={e => setTextareaValue(e.target.value)}\n            placeholder=\"Type here...\"\n            rows={3}\n            showCharCount={true}\n          />\n        </div>\n\n        <div className=\"text-sm text-gray-500\">\n          Both components share consistent styling, focus states, and behavior\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Demonstrates the visual consistency between Textarea and Input components.',\n      },\n    },\n  },\n};\n\n// Interactive Example\nexport const Interactive: Story = {\n  render: () => {\n    const [value, setValue] = useState('');\n    const [showCharCount, setShowCharCount] = useState(false);\n    const [maxLength, setMaxLength] = useState<number | undefined>(undefined);\n    const [rows, setRows] = useState(4);\n    const [resizable, setResizable] = useState(false);\n    const [error, setError] = useState('');\n\n    const handleClear = () => {\n      setValue('');\n      setError('');\n    };\n\n    const handleFillSample = () => {\n      setValue(\n        'This is a sample text to demonstrate the textarea functionality. You can edit, resize, and see character counting in action.'\n      );\n      setError('');\n    };\n\n    return (\n      <div className=\"max-w-2xl space-y-6\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"space-y-4\">\n            <h4 className=\"font-medium\">Controls</h4>\n\n            <div className=\"space-y-2\">\n              <label className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={showCharCount}\n                  onChange={e => setShowCharCount(e.target.checked)}\n                />\n                <span className=\"text-sm\">Show character count</span>\n              </label>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={resizable}\n                  onChange={e => setResizable(e.target.checked)}\n                />\n                <span className=\"text-sm\">Resizable</span>\n              </label>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"block text-sm\">Rows: {rows}</label>\n              <input\n                type=\"range\"\n                min=\"2\"\n                max=\"8\"\n                value={rows}\n                onChange={e => setRows(parseInt(e.target.value))}\n                className=\"w-full\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"block text-sm\">Max length</label>\n              <select\n                value={maxLength || ''}\n                onChange={e => setMaxLength(e.target.value ? parseInt(e.target.value) : undefined)}\n                className=\"w-full rounded border border-gray-300 p-2\"\n              >\n                <option value=\"\">No limit</option>\n                <option value=\"50\">50</option>\n                <option value=\"100\">100</option>\n                <option value=\"200\">200</option>\n                <option value=\"500\">500</option>\n              </select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <button\n                onClick={handleClear}\n                className=\"mr-2 rounded bg-gray-500 px-3 py-1 text-sm text-white\"\n              >\n                Clear\n              </button>\n              <button\n                onClick={handleFillSample}\n                className=\"rounded bg-blue-500 px-3 py-1 text-sm text-white\"\n              >\n                Fill Sample\n              </button>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <label className=\"block text-sm font-medium\">Interactive Textarea</label>\n            <Textarea\n              value={value}\n              onChange={e => setValue(e.target.value)}\n              placeholder=\"Try different settings...\"\n              error={error}\n              showCharCount={showCharCount}\n              maxLength={maxLength}\n              rows={rows}\n              resizable={resizable}\n            />\n            <p className=\"text-xs text-gray-500\">\n              Value length: {value.length}\n              {maxLength && ` / ${maxLength}`}\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Interactive playground to experiment with different Textarea configurations.',\n      },\n    },\n  },\n};\n\n// Playground\nexport const Playground: Story = {\n  args: {\n    placeholder: 'Customize this textarea...',\n    rows: 4,\n    showCharCount: false,\n    resizable: false,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Playground to experiment with different Textarea configurations.',\n      },\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/atoms/Link/Link.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/atoms/SkipNavigation/SkipNavigation.stories.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":128,"column":58,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4113,4216],"text":" Press Tab to see the &quot;Skip to article content\" link, then press\n          Enter to jump here.\n        "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4113,4216],"text":" Press Tab to see the &ldquo;Skip to article content\" link, then press\n          Enter to jump here.\n        "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4113,4216],"text":" Press Tab to see the &#34;Skip to article content\" link, then press\n          Enter to jump here.\n        "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4113,4216],"text":" Press Tab to see the &rdquo;Skip to article content\" link, then press\n          Enter to jump here.\n        "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":128,"column":82,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4113,4216],"text":" Press Tab to see the \"Skip to article content&quot; link, then press\n          Enter to jump here.\n        "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4113,4216],"text":" Press Tab to see the \"Skip to article content&ldquo; link, then press\n          Enter to jump here.\n        "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4113,4216],"text":" Press Tab to see the \"Skip to article content&#34; link, then press\n          Enter to jump here.\n        "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4113,4216],"text":" Press Tab to see the \"Skip to article content&rdquo; link, then press\n          Enter to jump here.\n        "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":296,"column":16,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9939,10152],"text":"\n            You&apos;ve successfully used the skip link to bypass the navigation and jump directly to the\n            main content. This is essential for users who navigate with keyboards or screen readers.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9939,10152],"text":"\n            You&lsquo;ve successfully used the skip link to bypass the navigation and jump directly to the\n            main content. This is essential for users who navigate with keyboards or screen readers.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9939,10152],"text":"\n            You&#39;ve successfully used the skip link to bypass the navigation and jump directly to the\n            main content. This is essential for users who navigate with keyboards or screen readers.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9939,10152],"text":"\n            You&rsquo;ve successfully used the skip link to bypass the navigation and jump directly to the\n            main content. This is essential for users who navigate with keyboards or screen readers.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { SkipNavigation, SkipLinks } from '@/components/atoms/SkipNavigation';\n\nconst meta = {\n  title: 'Atoms/SkipNavigation',\n  component: SkipNavigation,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'Skip navigation components allow keyboard users to bypass repetitive content and jump directly to main sections. Essential for accessibility compliance.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    skipTo: {\n      control: { type: 'text' },\n      description: 'CSS selector or anchor link for the skip target',\n    },\n    children: {\n      control: { type: 'text' },\n      description: 'Text content for the skip link',\n    },\n  },\n} satisfies Meta<typeof SkipNavigation>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  render: () => (\n    <div className=\"min-h-screen\">\n      <SkipNavigation />\n\n      <header className=\"bg-blue-600 p-4 text-white dark:text-black\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-xl font-bold\">My Website</h1>\n          <nav className=\"flex gap-4\">\n            <a href=\"#\" className=\"hover:underline\">\n              Home\n            </a>\n            <a href=\"#\" className=\"hover:underline\">\n              About\n            </a>\n            <a href=\"#\" className=\"hover:underline\">\n              Contact\n            </a>\n          </nav>\n        </div>\n      </header>\n\n      <main id=\"main-content\" className=\"p-8\">\n        <h2 className=\"mb-4 text-2xl font-bold\">Main Content</h2>\n        <p className=\"mb-4\">\n          This is the main content area. When users press Tab and focus the skip link, they can\n          press Enter to jump directly here, bypassing the header navigation.\n        </p>\n        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n          <strong>To test:</strong> Press Tab to focus the skip link (it will appear), then press\n          Enter to jump to this content.\n        </p>\n      </main>\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Basic skip navigation link that allows users to jump to main content. Press Tab to see the skip link appear.',\n      },\n    },\n  },\n};\n\nexport const CustomSkipTarget: Story = {\n  render: () => (\n    <div className=\"min-h-screen\">\n      <SkipNavigation skipTo=\"#custom-target\">Skip to article content</SkipNavigation>\n\n      <header className=\"bg-gray-800 p-4 text-white dark:text-black\">\n        <h1 className=\"text-xl font-bold\">News Website</h1>\n        <nav className=\"mt-4 flex gap-6\">\n          <a href=\"#\" className=\"hover:underline\">\n            Politics\n          </a>\n          <a href=\"#\" className=\"hover:underline\">\n            Sports\n          </a>\n          <a href=\"#\" className=\"hover:underline\">\n            Technology\n          </a>\n          <a href=\"#\" className=\"hover:underline\">\n            Business\n          </a>\n        </nav>\n      </header>\n\n      <aside className=\"bg-gray-100 p-4\">\n        <h2 className=\"mb-2 font-bold\">Sidebar Content</h2>\n        <ul className=\"space-y-1 text-sm\">\n          <li>\n            <a href=\"#\" className=\"text-gray-600 hover:underline dark:text-gray-400\">\n              Recent Articles\n            </a>\n          </li>\n          <li>\n            <a href=\"#\" className=\"text-gray-600 hover:underline dark:text-gray-400\">\n              Popular Posts\n            </a>\n          </li>\n          <li>\n            <a href=\"#\" className=\"text-gray-600 hover:underline dark:text-gray-400\">\n              Categories\n            </a>\n          </li>\n        </ul>\n      </aside>\n\n      <article id=\"custom-target\" className=\"p-8\">\n        <h1 className=\"mb-4 text-3xl font-bold\">Article Title</h1>\n        <p className=\"mb-4\">\n          This article content can be accessed directly using the custom skip link. The skip link\n          targets the #custom-target element.\n        </p>\n        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n          <strong>To test:</strong> Press Tab to see the \"Skip to article content\" link, then press\n          Enter to jump here.\n        </p>\n      </article>\n    </div>\n  ),\n};\n\nexport const MultipleSkipLinks: Story = {\n  render: () => (\n    <div className=\"min-h-screen\">\n      <SkipLinks\n        links={[\n          { href: '#main-content', label: 'Skip to main content' },\n          { href: '#navigation', label: 'Skip to navigation' },\n          { href: '#sidebar', label: 'Skip to sidebar' },\n          { href: '#footer', label: 'Skip to footer' },\n        ]}\n      />\n\n      <header className=\"bg-purple-600 p-4 text-white dark:text-black\">\n        <h1 className=\"text-xl font-bold\">Complex Layout Website</h1>\n      </header>\n\n      <div className=\"flex min-h-screen\">\n        <nav id=\"navigation\" className=\"w-64 bg-gray-800 p-4 text-white dark:text-black\">\n          <h2 className=\"mb-4 font-bold\">Navigation</h2>\n          <ul className=\"space-y-2\">\n            <li>\n              <a href=\"#\" className=\"block hover:text-gray-300 dark:text-gray-700\">\n                Home\n              </a>\n            </li>\n            <li>\n              <a href=\"#\" className=\"block hover:text-gray-300 dark:text-gray-700\">\n                Products\n              </a>\n            </li>\n            <li>\n              <a href=\"#\" className=\"block hover:text-gray-300 dark:text-gray-700\">\n                Services\n              </a>\n            </li>\n            <li>\n              <a href=\"#\" className=\"block hover:text-gray-300 dark:text-gray-700\">\n                About\n              </a>\n            </li>\n            <li>\n              <a href=\"#\" className=\"block hover:text-gray-300 dark:text-gray-700\">\n                Contact\n              </a>\n            </li>\n          </ul>\n        </nav>\n\n        <div className=\"flex flex-1 flex-col\">\n          <main id=\"main-content\" className=\"flex-1 p-8\">\n            <h2 className=\"mb-4 text-2xl font-bold\">Main Content</h2>\n            <p className=\"mb-4\">\n              This layout has multiple skip links allowing users to jump to different sections of\n              the page quickly.\n            </p>\n            <p className=\"mb-8 text-sm text-gray-600 dark:text-gray-400\">\n              <strong>To test:</strong> Press Tab to see all available skip links appear.\n            </p>\n          </main>\n\n          <aside id=\"sidebar\" className=\"border-t bg-blue-50 p-4\">\n            <h3 className=\"mb-2 font-bold\">Sidebar</h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Additional information and links would be displayed here.\n            </p>\n          </aside>\n        </div>\n      </div>\n\n      <footer id=\"footer\" className=\"bg-gray-800 p-4 text-white dark:text-black\">\n        <p className=\"text-center\">&copy; 2024 My Website. All rights reserved.</p>\n      </footer>\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Multiple skip links for complex layouts with many sections. Users can quickly navigate to any major section.',\n      },\n    },\n  },\n};\n\nexport const AccessibilityDemo: Story = {\n  render: () => (\n    <div className=\"min-h-screen\">\n      <SkipNavigation />\n\n      <div className=\"m-4 rounded-sm border border-yellow-200 bg-yellow-50 p-4\">\n        <h2 className=\"mb-2 text-lg font-semibold text-yellow-800\">\n          Accessibility Testing Instructions\n        </h2>\n        <div className=\"space-y-1 text-sm text-yellow-700\">\n          <p>\n            <strong>Keyboard Testing:</strong>\n          </p>\n          <ul className=\"ml-4 list-inside list-disc space-y-1\">\n            <li>\n              Press <kbd className=\"rounded bg-yellow-100 px-1 py-0.5\">Tab</kbd> to see the skip\n              link appear\n            </li>\n            <li>\n              Press <kbd className=\"rounded bg-yellow-100 px-1 py-0.5\">Enter</kbd> or{' '}\n              <kbd className=\"rounded bg-yellow-100 px-1 py-0.5\">Space</kbd> to activate the skip\n              link\n            </li>\n            <li>Focus should jump directly to the main content area</li>\n          </ul>\n          <p>\n            <strong>Screen Reader Testing:</strong>\n          </p>\n          <ul className=\"ml-4 list-inside list-disc space-y-1\">\n            <li>The skip link should be announced when focused</li>\n            <li>Activating it should move focus to the target element</li>\n            <li>The target element should be properly announced</li>\n          </ul>\n        </div>\n      </div>\n\n      <header className=\"bg-indigo-600 p-6 text-white dark:text-black\">\n        <div className=\"mx-auto max-w-4xl\">\n          <h1 className=\"mb-4 text-2xl font-bold\">Accessibility-First Website</h1>\n          <nav>\n            <ul className=\"flex flex-wrap gap-6\">\n              <li>\n                <a href=\"#\" className=\"hover:text-indigo-200\">\n                  Home\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-indigo-200\">\n                  Accessibility\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-indigo-200\">\n                  WCAG Guidelines\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-indigo-200\">\n                  Testing Tools\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-indigo-200\">\n                  Resources\n                </a>\n              </li>\n            </ul>\n          </nav>\n        </div>\n      </header>\n\n      <main id=\"main-content\" className=\"mx-auto max-w-4xl p-6\">\n        <h2 className=\"mb-6 text-3xl font-bold\">Main Content Area</h2>\n\n        <div className=\"prose max-w-none\">\n          <p className=\"mb-6 text-lg text-gray-600 dark:text-gray-400\">\n            You've successfully used the skip link to bypass the navigation and jump directly to the\n            main content. This is essential for users who navigate with keyboards or screen readers.\n          </p>\n\n          <h3 className=\"mb-4 text-xl font-semibold\">Why Skip Links Matter</h3>\n          <ul className=\"mb-6 list-inside list-disc space-y-2\">\n            <li>\n              Saves time for keyboard users who would otherwise have to tab through all navigation\n              links\n            </li>\n            <li>Improves efficiency for screen reader users</li>\n            <li>Required by WCAG 2.1 AA compliance standards</li>\n            <li>\n              Benefits users with motor disabilities who may have difficulty with repetitive\n              navigation\n            </li>\n          </ul>\n\n          <h3 className=\"mb-4 text-xl font-semibold\">Implementation Best Practices</h3>\n          <ul className=\"mb-6 list-inside list-disc space-y-2\">\n            <li>Place skip links at the very beginning of the page</li>\n            <li>Make them visible when focused</li>\n            <li>Ensure they have sufficient color contrast</li>\n            <li>Target meaningful landmarks with descriptive anchor text</li>\n            <li>Test with actual keyboard navigation and screen readers</li>\n          </ul>\n        </div>\n      </main>\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Comprehensive example showing proper skip link implementation with accessibility testing instructions.',\n      },\n    },\n  },\n};\n\nexport const StylingSamples: Story = {\n  render: () => (\n    <div className=\"space-y-8 p-8\">\n      <div>\n        <h3 className=\"mb-4 text-lg font-semibold\">Default Styling</h3>\n        <div className=\"relative rounded-sm border-2 border-dashed border-gray-300 p-4\">\n          <SkipNavigation />\n          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n            Tab here to see the default skip link styling\n          </p>\n        </div>\n      </div>\n\n      <div>\n        <h3 className=\"mb-4 text-lg font-semibold\">Custom Styling</h3>\n        <div className=\"relative rounded-sm border-2 border-dashed border-gray-300 p-4\">\n          <a\n            href=\"#main-content\"\n            className=\"focus:ring-opacity-50 sr-only transition-all duration-200 focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-50 focus:scale-105 focus:rounded-lg focus:bg-green-600 focus:px-6 focus:py-3 focus:font-semibold focus:text-white focus:shadow-xl focus:ring-4 focus:ring-green-600 focus:outline-hidden dark:text-black\"\n          >\n            🚀 Jump to Main Content\n          </a>\n          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n            Custom styled skip link with emoji and animations\n          </p>\n        </div>\n      </div>\n\n      <div>\n        <h3 className=\"mb-4 text-lg font-semibold\">Brand Colors</h3>\n        <div className=\"relative rounded-sm border-2 border-dashed border-gray-300 p-4\">\n          <a\n            href=\"#main-content\"\n            className=\"sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-50 focus:rounded-sm focus:bg-purple-600 focus:px-4 focus:py-2 focus:text-white focus:shadow-lg focus:ring-2 focus:ring-purple-600 focus:ring-offset-2 focus:outline-hidden dark:text-black\"\n          >\n            Skip to Main Content\n          </a>\n          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n            Skip link using brand purple colors\n          </p>\n        </div>\n      </div>\n\n      <div id=\"main-content\" className=\"rounded bg-gray-50 p-4\">\n        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n          This is the main content area where skip links would navigate to.\n        </p>\n      </div>\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Examples of different styling approaches for skip navigation links while maintaining accessibility.',\n      },\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/molecules/AccessibleModal/AccessibleModal.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/molecules/ButtonGroup/ButtonGroup.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/molecules/CivilStatusPieChart/CivilStatusPieChart.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/molecules/CommandMenu/CommandMenu.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":2,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport React, { useState } from 'react';\nimport { CommandMenu } from '@/components/molecules/CommandMenu';\nimport type { CommandMenuItem } from '@/components/molecules/types';\n\n// Storybook wrapper to show the command menu in an open state\nfunction StorybookCommandMenuWrapper({\n  items,\n  ...props\n}: {\n  items: CommandMenuItem[];\n  placeholder?: string;\n  maxResults?: number;\n  showShortcuts?: boolean;\n  showRecentSection?: boolean;\n  size?: 'sm' | 'md' | 'lg';\n  emptyStateText?: string;\n}) {\n  return (\n    <div className=\"relative\">\n      {/* Trigger button for demonstration */}\n      <div className=\"flex min-h-[300px] flex-col items-center justify-center rounded-lg bg-gray-50 p-8 dark:bg-gray-900\">\n        <div className=\"mb-4 text-center\">\n          <h3 className=\"mb-2 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n            Command Menu Demo\n          </h3>\n          <p className=\"mb-4 text-gray-600 dark:text-gray-400\">\n            Press <kbd className=\"rounded bg-gray-200 px-2 py-1 text-xs dark:bg-gray-700\">⌘K</kbd>{' '}\n            or <kbd className=\"rounded bg-gray-200 px-2 py-1 text-xs dark:bg-gray-700\">Ctrl+K</kbd>{' '}\n            to open the command menu\n          </p>\n          <p className=\"text-sm text-gray-500 dark:text-gray-500\">\n            Use arrow keys to navigate, Enter to select, Esc to close\n          </p>\n        </div>\n      </div>\n\n      {/* The actual CommandMenu component */}\n      <CommandMenu items={items} {...props} />\n    </div>\n  );\n}\n\n// Icon components for demo\nconst Icons = {\n  Home: ({ className }: { className?: string }) => (\n    <svg className={className} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={2}\n        d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\"\n      />\n    </svg>\n  ),\n  Users: ({ className }: { className?: string }) => (\n    <svg className={className} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={2}\n        d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z\"\n      />\n    </svg>\n  ),\n  Building: ({ className }: { className?: string }) => (\n    <svg className={className} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={2}\n        d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"\n      />\n    </svg>\n  ),\n  Chart: ({ className }: { className?: string }) => (\n    <svg className={className} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={2}\n        d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"\n      />\n    </svg>\n  ),\n  Plus: ({ className }: { className?: string }) => (\n    <svg className={className} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={2}\n        d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\n      />\n    </svg>\n  ),\n  Settings: ({ className }: { className?: string }) => (\n    <svg className={className} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={2}\n        d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\"\n      />\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={2}\n        d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"\n      />\n    </svg>\n  ),\n  Download: ({ className }: { className?: string }) => (\n    <svg className={className} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={2}\n        d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4\"\n      />\n    </svg>\n  ),\n};\n\n// Sample command menu items for barangay system\nconst sampleItems: CommandMenuItem[] = [\n  // Navigation\n  {\n    id: 'nav-dashboard',\n    label: 'Dashboard',\n    description: 'View overview and statistics',\n    icon: Icons.Home,\n    group: 'Navigation',\n    href: '/dashboard',\n    keywords: ['home', 'overview', 'stats'],\n    shortcut: ['⌘', '1'],\n  },\n  {\n    id: 'nav-residents',\n    label: 'Residents',\n    description: 'Manage resident records',\n    icon: Icons.Users,\n    group: 'Navigation',\n    href: '/residents',\n    keywords: ['people', 'citizens', 'records'],\n    shortcut: ['⌘', '2'],\n  },\n  {\n    id: 'nav-households',\n    label: 'Households',\n    description: 'Manage household information',\n    icon: Icons.Building,\n    group: 'Navigation',\n    href: '/households',\n    keywords: ['families', 'homes', 'address'],\n    shortcut: ['⌘', '3'],\n  },\n  {\n    id: 'nav-reports',\n    label: 'Reports',\n    description: 'Generate and view reports',\n    icon: Icons.Chart,\n    group: 'Navigation',\n    href: '/reports',\n    keywords: ['analytics', 'statistics', 'data'],\n    shortcut: ['⌘', '4'],\n  },\n\n  // Actions\n  {\n    id: 'action-add-resident',\n    label: 'Add New Resident',\n    description: 'Register a new resident',\n    icon: Icons.Plus,\n    group: 'Actions',\n    href: '/residents/create',\n    keywords: ['register', 'new', 'create'],\n    shortcut: ['⌘', 'N'],\n  },\n  {\n    id: 'action-create-household',\n    label: 'Create Household',\n    description: 'Add a new household record',\n    icon: Icons.Plus,\n    group: 'Actions',\n    href: '/households/create',\n    keywords: ['new', 'family', 'create'],\n  },\n  {\n    id: 'action-export-residents',\n    label: 'Export Resident Data',\n    description: 'Download resident information',\n    icon: Icons.Download,\n    group: 'Actions',\n    keywords: ['download', 'csv', 'export'],\n    onClick: () => console.log('Exporting residents...'),\n  },\n  {\n    id: 'action-settings',\n    label: 'Settings',\n    description: 'Configure system preferences',\n    icon: Icons.Settings,\n    group: 'Actions',\n    href: '/settings',\n    keywords: ['config', 'preferences', 'admin'],\n    shortcut: ['⌘', ','],\n  },\n\n  // Recent items\n  {\n    id: 'recent-juan-dela-cruz',\n    label: 'Juan Dela Cruz',\n    description: 'Resident ID: 2024-001',\n    avatar: {\n      src: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face',\n      alt: 'Juan Dela Cruz',\n      fallback: 'JD',\n    },\n    group: 'Recent',\n    href: '/residents/1',\n    recent: true,\n    keywords: ['juan', 'dela', 'cruz'],\n  },\n  {\n    id: 'recent-maria-santos',\n    label: 'Maria Santos',\n    description: 'Resident ID: 2024-002',\n    avatar: {\n      src: 'https://images.unsplash.com/photo-1494790108755-2616b612b142?w=100&h=100&fit=crop&crop=face',\n      alt: 'Maria Santos',\n      fallback: 'MS',\n    },\n    group: 'Recent',\n    href: '/residents/2',\n    recent: true,\n    keywords: ['maria', 'santos'],\n  },\n  {\n    id: 'recent-household-123',\n    label: 'Household #123',\n    description: '123 Main Street, Barangay Centro',\n    icon: Icons.Building,\n    group: 'Recent',\n    href: '/households/123',\n    recent: true,\n    keywords: ['household', '123', 'main', 'street'],\n  },\n];\n\nconst meta: Meta<typeof StorybookCommandMenuWrapper> = {\n  title: 'Molecules/CommandMenu',\n  component: StorybookCommandMenuWrapper,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'A powerful command menu component for quick navigation and actions, inspired by modern applications like Raycast and Linear. Supports keyboard shortcuts, fuzzy search, and grouped menu items.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    items: {\n      description: 'Array of command menu items',\n      control: { type: 'object' },\n    },\n    placeholder: {\n      description: 'Placeholder text for the search input',\n      control: { type: 'text' },\n    },\n    maxResults: {\n      description: 'Maximum number of results to show',\n      control: { type: 'number' },\n    },\n    showShortcuts: {\n      description: 'Whether to show keyboard shortcuts',\n      control: { type: 'boolean' },\n    },\n    showRecentSection: {\n      description: 'Whether to show a separate recent section',\n      control: { type: 'boolean' },\n    },\n    size: {\n      description: 'Size of the command menu dialog',\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    items: sampleItems,\n    placeholder: 'Search for anything...',\n    maxResults: 10,\n    showShortcuts: true,\n    showRecentSection: true,\n    size: 'md',\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Default command menu with navigation, actions, and recent items. Press ⌘K (or Ctrl+K) to open.',\n      },\n    },\n  },\n};\n\nexport const NavigationOnly: Story = {\n  args: {\n    items: sampleItems.filter(item => item.group === 'Navigation'),\n    placeholder: 'Navigate to...',\n    showRecentSection: false,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Command menu with only navigation items.',\n      },\n    },\n  },\n};\n\nexport const ActionsOnly: Story = {\n  args: {\n    items: sampleItems.filter(item => item.group === 'Actions'),\n    placeholder: 'Run command...',\n    showShortcuts: true,\n    showRecentSection: false,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Command menu focused on actions and commands.',\n      },\n    },\n  },\n};\n\nexport const WithRecents: Story = {\n  args: {\n    items: sampleItems.filter(item => item.recent || item.group === 'Navigation'),\n    placeholder: 'Search recent items...',\n    showRecentSection: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Command menu highlighting recent items separately.',\n      },\n    },\n  },\n};\n\nexport const Compact: Story = {\n  args: {\n    items: sampleItems,\n    placeholder: 'Quick search...',\n    size: 'sm',\n    maxResults: 6,\n    showShortcuts: false,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Compact version of the command menu with fewer results and no shortcuts.',\n      },\n    },\n  },\n};\n\nexport const Large: Story = {\n  args: {\n    items: sampleItems,\n    placeholder: 'Search everything...',\n    size: 'lg',\n    maxResults: 15,\n    showShortcuts: true,\n    showRecentSection: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Large command menu with more results and full feature set.',\n      },\n    },\n  },\n};\n\nexport const Empty: Story = {\n  args: {\n    items: [],\n    placeholder: 'Nothing to search...',\n    emptyStateText: 'No commands available',\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Command menu with no items to demonstrate empty state.',\n      },\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/molecules/CommandMenu/CommandMenuEmpty.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/molecules/CommandMenu/InlineCommandMenu.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/molecules/DependencyRatioPieChart/DependencyRatioPieChart.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/molecules/EmploymentStatusPieChart/EmploymentStatusPieChart.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/molecules/ErrorModal/ErrorModal.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/molecules/FieldSet/ControlField/ControlField.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/molecules/FieldSet/InputField/InputField.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/molecules/FieldSet/ReadOnlyField/ReadOnlyField.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/molecules/FieldSet/SelectField/SelectField.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/molecules/FileUpload/FileUpload.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockValidateUploadedFile' is assigned a value but never used.","line":6,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'file' is defined but never used.","line":6,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockScanFileForViruses' is assigned a value but never used.","line":12,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'file' is defined but never used.","line":12,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockLogFileOperation' is assigned a value but never used.","line":17,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockLogger' is assigned a value but never used.","line":28,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'files' is assigned a value but never used.","line":106,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":106,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'files' is assigned a value but never used.","line":125,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'files' is assigned a value but never used.","line":144,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":144,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'files' is assigned a value but never used.","line":263,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":263,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { useState } from 'react';\nimport { FileUpload } from '@/components/molecules/FileUpload';\n\n// Mock the security functions for Storybook\nconst mockValidateUploadedFile = async (file: File) => ({\n  isValid: true,\n  errors: [],\n  fileInfo: { hash: 'mock-hash' },\n});\n\nconst mockScanFileForViruses = async (file: File) => ({\n  clean: true,\n  threats: [],\n});\n\nconst mockLogFileOperation = (\n  operation: string,\n  filename: string,\n  user: string,\n  status: string,\n  metadata: Record<string, unknown>\n) => {\n  console.log('File operation:', { operation, filename, user, status, metadata });\n};\n\n// Mock logger\nconst mockLogger = {\n  error: (message: string, data: unknown) => console.error(message, data),\n};\n\n// Note: This story mocks security dependencies that may not exist in the actual implementation\nconst meta = {\n  title: 'Molecules/FileUpload',\n  component: FileUpload,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component:\n          'A secure file upload component with drag-and-drop support, file validation, virus scanning, and preview functionality. Note: Security functions are mocked in this story.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    variant: {\n      control: { type: 'select' },\n      options: ['default', 'error', 'success', 'disabled'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n    multiple: {\n      control: { type: 'boolean' },\n    },\n    showPreview: {\n      control: { type: 'boolean' },\n    },\n    disabled: {\n      control: { type: 'boolean' },\n    },\n    maxFileSize: {\n      control: { type: 'number' },\n    },\n  },\n} satisfies Meta<typeof FileUpload>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  render: args => {\n    const [files, setFiles] = useState<FileList | null>(null);\n\n    return (\n      <div className=\"w-96\">\n        <FileUpload\n          {...args}\n          onFileSelect={fileList => {\n            setFiles(fileList);\n            console.log('Files selected:', fileList);\n          }}\n        />\n\n        {files && (\n          <div className=\"mt-4 rounded-sm bg-gray-100 p-3 text-sm\">\n            <strong>Selected:</strong>{' '}\n            {Array.from(files)\n              .map(f => f.name)\n              .join(', ')}\n          </div>\n        )}\n      </div>\n    );\n  },\n  args: {\n    label: 'Upload Files',\n    helperText: 'Drag and drop your files here or click to browse',\n  },\n};\n\nexport const WithLabel: Story = {\n  render: () => {\n    const [files, setFiles] = useState<FileList | null>(null);\n\n    return (\n      <div className=\"w-96\">\n        <FileUpload\n          label=\"Document Upload\"\n          helperText=\"Upload your supporting documents (PDF, DOC, DOCX)\"\n          acceptedFileTypes=\".pdf,.doc,.docx\"\n          maxFileSize={10}\n          showPreview\n          onFileSelect={setFiles}\n        />\n      </div>\n    );\n  },\n};\n\nexport const Multiple: Story = {\n  render: () => {\n    const [files, setFiles] = useState<FileList | null>(null);\n\n    return (\n      <div className=\"w-96\">\n        <FileUpload\n          label=\"Multiple File Upload\"\n          helperText=\"You can select multiple files at once\"\n          multiple\n          showPreview\n          maxFileSize={5}\n          onFileSelect={setFiles}\n        />\n      </div>\n    );\n  },\n};\n\nexport const ImageUpload: Story = {\n  render: () => {\n    const [files, setFiles] = useState<FileList | null>(null);\n\n    return (\n      <div className=\"w-96\">\n        <FileUpload\n          label=\"Profile Picture\"\n          dragText=\"Drop your profile picture here\"\n          browseText=\"or choose from device\"\n          helperText=\"Upload a profile picture to personalize your account\"\n          acceptedFileTypes=\"image/*\"\n          maxFileSize={2}\n          showPreview\n          onFileSelect={setFiles}\n        />\n      </div>\n    );\n  },\n};\n\nexport const Sizes: Story = {\n  render: () => (\n    <div className=\"w-full max-w-2xl space-y-8\">\n      <div>\n        <h3 className=\"mb-4 text-lg font-semibold\">Small Size</h3>\n        <FileUpload\n          size=\"sm\"\n          label=\"Small Upload\"\n          acceptedFileTypes=\".txt,.csv\"\n          onFileSelect={() => {}}\n        />\n      </div>\n\n      <div>\n        <h3 className=\"mb-4 text-lg font-semibold\">Medium Size (Default)</h3>\n        <FileUpload\n          size=\"md\"\n          label=\"Medium Upload\"\n          acceptedFileTypes=\".pdf,.doc\"\n          onFileSelect={() => {}}\n        />\n      </div>\n\n      <div>\n        <h3 className=\"mb-4 text-lg font-semibold\">Large Size</h3>\n        <FileUpload\n          size=\"lg\"\n          label=\"Large Upload\"\n          acceptedFileTypes=\"image/*,video/*\"\n          onFileSelect={() => {}}\n        />\n      </div>\n    </div>\n  ),\n};\n\nexport const States: Story = {\n  render: () => (\n    <div className=\"w-96 space-y-8\">\n      <FileUpload\n        label=\"Normal State\"\n        helperText=\"Upload your files here\"\n        onFileSelect={() => {}}\n      />\n\n      <FileUpload\n        label=\"Error State\"\n        errorMessage=\"File type not supported. Please upload a valid file.\"\n        variant=\"error\"\n        onFileSelect={() => {}}\n      />\n\n      <FileUpload\n        label=\"Success State\"\n        helperText=\"Files uploaded successfully!\"\n        variant=\"success\"\n        onFileSelect={() => {}}\n      />\n\n      <FileUpload\n        label=\"Disabled State\"\n        helperText=\"File upload is currently disabled\"\n        disabled\n        onFileSelect={() => {}}\n      />\n    </div>\n  ),\n};\n\nexport const FileTypes: Story = {\n  render: () => (\n    <div className=\"w-96 space-y-8\">\n      <FileUpload\n        label=\"Documents Only\"\n        acceptedFileTypes=\".pdf,.doc,.docx,.txt\"\n        helperText=\"PDF, Word documents, and text files only\"\n        onFileSelect={() => {}}\n      />\n\n      <FileUpload\n        label=\"Images Only\"\n        acceptedFileTypes=\"image/*\"\n        helperText=\"All image formats accepted\"\n        onFileSelect={() => {}}\n      />\n\n      <FileUpload\n        label=\"Spreadsheets Only\"\n        acceptedFileTypes=\".xlsx,.xls,.csv\"\n        helperText=\"Excel and CSV files only\"\n        onFileSelect={() => {}}\n      />\n\n      <FileUpload label=\"All Files\" helperText=\"Any file type accepted\" onFileSelect={() => {}} />\n    </div>\n  ),\n};\n\nexport const WithPreview: Story = {\n  render: () => {\n    const [files, setFiles] = useState<FileList | null>(null);\n\n    return (\n      <div className=\"w-96\">\n        <FileUpload\n          label=\"Upload with Preview\"\n          helperText=\"Files will be shown below after selection\"\n          multiple\n          showPreview\n          acceptedFileTypes=\".pdf,.jpg,.jpeg,.png,.doc,.docx\"\n          maxFileSize={10}\n          onFileSelect={setFiles}\n        />\n      </div>\n    );\n  },\n};\n\nexport const FormExample: Story = {\n  render: () => {\n    const [formData, setFormData] = useState({\n      documents: null as FileList | null,\n      avatar: null as FileList | null,\n      resume: null as FileList | null,\n    });\n\n    const [errors, setErrors] = useState<Record<string, string>>({});\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n\n      const newErrors: Record<string, string> = {};\n      if (!formData.documents) newErrors.documents = 'Please upload at least one document';\n      if (!formData.resume) newErrors.resume = 'Resume is required';\n\n      setErrors(newErrors);\n\n      if (Object.keys(newErrors).length === 0) {\n        alert('Form submitted successfully!');\n        console.log('Form data:', formData);\n      }\n    };\n\n    return (\n      <form onSubmit={handleSubmit} className=\"w-full max-w-md space-y-6\">\n        <FileUpload\n          label=\"Profile Picture\"\n          dragText=\"Drop your photo here\"\n          browseText=\"or select from device\"\n          helperText=\"Optional: Add a profile picture (max 2MB)\"\n          acceptedFileTypes=\"image/*\"\n          maxFileSize={2}\n          showPreview\n          onFileSelect={files => setFormData(prev => ({ ...prev, avatar: files }))}\n        />\n\n        <FileUpload\n          label=\"Resume/CV *\"\n          helperText=\"Upload your resume or CV (PDF preferred)\"\n          acceptedFileTypes=\".pdf,.doc,.docx\"\n          maxFileSize={5}\n          showPreview\n          errorMessage={errors.resume}\n          variant={errors.resume ? 'error' : 'default'}\n          onFileSelect={files => setFormData(prev => ({ ...prev, resume: files }))}\n        />\n\n        <FileUpload\n          label=\"Supporting Documents *\"\n          helperText=\"Upload any supporting documents (certificates, portfolios, etc.)\"\n          multiple\n          acceptedFileTypes=\".pdf,.jpg,.jpeg,.png,.doc,.docx\"\n          maxFileSize={10}\n          showPreview\n          errorMessage={errors.documents}\n          variant={errors.documents ? 'error' : 'default'}\n          onFileSelect={files => setFormData(prev => ({ ...prev, documents: files }))}\n        />\n\n        <div className=\"flex gap-4\">\n          <button\n            type=\"submit\"\n            className=\"rounded bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 dark:text-black\"\n          >\n            Submit Application\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => {\n              setFormData({ documents: null, avatar: null, resume: null });\n              setErrors({});\n            }}\n            className=\"rounded bg-gray-500 px-4 py-2 text-white hover:bg-gray-600 dark:text-black\"\n          >\n            Reset\n          </button>\n        </div>\n      </form>\n    );\n  },\n};\n\nexport const CustomStyling: Story = {\n  render: () => (\n    <div className=\"space-y-8\">\n      <div className=\"w-96\">\n        <FileUpload\n          label=\"Custom Upload Area\"\n          dragText=\"🎨 Drop your creative files here\"\n          browseText=\"or explore your files\"\n          helperText=\"We accept all your creative works!\"\n          acceptedFileTypes=\"image/*,.psd,.ai,.sketch\"\n          className=\"border-purple-300 bg-purple-50 hover:border-purple-400\"\n          onFileSelect={() => {}}\n        />\n      </div>\n\n      <div className=\"w-96\">\n        <FileUpload\n          label=\"Minimal Upload\"\n          size=\"sm\"\n          dragText=\"Drop files\"\n          browseText=\"browse\"\n          acceptedFileTypes=\".txt,.md\"\n          className=\"border-gray-200 bg-gray-50\"\n          onFileSelect={() => {}}\n        />\n      </div>\n    </div>\n  ),\n};\n\nexport const AccessibilityDemo: Story = {\n  render: () => (\n    <div className=\"space-y-6\">\n      <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4\">\n        <h3 className=\"mb-2 text-lg font-semibold text-gray-800 dark:text-gray-200\">\n          Accessibility Features\n        </h3>\n        <ul className=\"space-y-1 text-sm text-gray-700 dark:text-gray-300\">\n          <li>\n            • <strong>Keyboard accessible</strong>: Tab to focus, Enter/Space to open file dialog\n          </li>\n          <li>\n            • <strong>Screen reader support</strong>: Proper labels and descriptions\n          </li>\n          <li>\n            • <strong>Drag and drop</strong>: Visual feedback for drag over state\n          </li>\n          <li>\n            • <strong>File validation</strong>: Clear error messages for invalid files\n          </li>\n          <li>\n            • <strong>Progress indication</strong>: Visual feedback during upload process\n          </li>\n        </ul>\n      </div>\n\n      <div className=\"w-96\">\n        <FileUpload\n          label=\"Accessible File Upload\"\n          helperText=\"This component is fully accessible via keyboard and screen readers\"\n          acceptedFileTypes=\".pdf,.jpg,.png\"\n          maxFileSize={5}\n          showPreview\n          onFileSelect={() => {}}\n        />\n      </div>\n    </div>\n  ),\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/molecules/GenericPieChart/GenericPieChart.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/molecules/SearchBar/SearchBar.stories.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":327,"column":34,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9088,9123],"text":"\n            No results found for &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9088,9123],"text":"\n            No results found for &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9088,9123],"text":"\n            No results found for &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9088,9123],"text":"\n            No results found for &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":327,"column":47,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9135,9147],"text":"&quot;\n          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9135,9147],"text":"&ldquo;\n          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9135,9147],"text":"&#34;\n          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9135,9147],"text":"&rdquo;\n          "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":414,"column":69,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12182,12239],"text":"• Clear button is excluded from tab order (tabindex=&quot;-1\")"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12182,12239],"text":"• Clear button is excluded from tab order (tabindex=&ldquo;-1\")"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12182,12239],"text":"• Clear button is excluded from tab order (tabindex=&#34;-1\")"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12182,12239],"text":"• Clear button is excluded from tab order (tabindex=&rdquo;-1\")"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":414,"column":72,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12182,12239],"text":"• Clear button is excluded from tab order (tabindex=\"-1&quot;)"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12182,12239],"text":"• Clear button is excluded from tab order (tabindex=\"-1&ldquo;)"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12182,12239],"text":"• Clear button is excluded from tab order (tabindex=\"-1&#34;)"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12182,12239],"text":"• Clear button is excluded from tab order (tabindex=\"-1&rdquo;)"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { useState } from 'react';\nimport { SearchBar } from '@/components/molecules/SearchBar';\n\nconst meta = {\n  title: 'Molecules/SearchBar',\n  component: SearchBar,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component:\n          'A search input component with optional clear functionality, custom icons, and keyboard shortcuts. Supports Enter to search and Escape to clear.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    variant: {\n      control: { type: 'select' },\n      options: ['default', 'filled', 'outlined'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n    showClearButton: {\n      control: { type: 'boolean' },\n    },\n    disabled: {\n      control: { type: 'boolean' },\n    },\n    placeholder: {\n      control: { type: 'text' },\n    },\n  },\n} satisfies Meta<typeof SearchBar>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  render: args => {\n    const [value, setValue] = useState('');\n\n    return (\n      <div className=\"w-80\">\n        <SearchBar\n          {...args}\n          value={value}\n          onChange={e => setValue(e.target.value)}\n          onClear={() => setValue('')}\n          onSearch={searchValue => console.log('Searching for:', searchValue)}\n        />\n      </div>\n    );\n  },\n  args: {\n    placeholder: 'Search...',\n  },\n};\n\nexport const WithValue: Story = {\n  render: () => {\n    const [value, setValue] = useState('React components');\n\n    return (\n      <div className=\"w-80\">\n        <SearchBar\n          value={value}\n          onChange={e => setValue(e.target.value)}\n          onClear={() => setValue('')}\n          onSearch={searchValue => console.log('Searching for:', searchValue)}\n          placeholder=\"Search components...\"\n        />\n      </div>\n    );\n  },\n};\n\nexport const CustomIcon: Story = {\n  render: () => {\n    const [value, setValue] = useState('');\n\n    const customIcon = (\n      <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={2}\n          d=\"M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z\"\n        />\n      </svg>\n    );\n\n    return (\n      <div className=\"w-80\">\n        <SearchBar\n          value={value}\n          onChange={e => setValue(e.target.value)}\n          onClear={() => setValue('')}\n          leftIcon={customIcon}\n          placeholder=\"Search by tags...\"\n          onSearch={searchValue => console.log('Tag search:', searchValue)}\n        />\n      </div>\n    );\n  },\n};\n\nexport const Sizes: Story = {\n  render: () => {\n    const [values, setValues] = useState({ sm: '', md: '', lg: '' });\n\n    const updateValue = (size: 'sm' | 'md' | 'lg', newValue: string) => {\n      setValues(prev => ({ ...prev, [size]: newValue }));\n    };\n\n    return (\n      <div className=\"w-80 space-y-4\">\n        <div>\n          <label className=\"mb-2 block text-sm font-medium\">Small</label>\n          <SearchBar\n            size=\"sm\"\n            value={values.sm}\n            onChange={e => updateValue('sm', e.target.value)}\n            onClear={() => updateValue('sm', '')}\n            placeholder=\"Small search...\"\n          />\n        </div>\n\n        <div>\n          <label className=\"mb-2 block text-sm font-medium\">Medium (Default)</label>\n          <SearchBar\n            size=\"md\"\n            value={values.md}\n            onChange={e => updateValue('md', e.target.value)}\n            onClear={() => updateValue('md', '')}\n            placeholder=\"Medium search...\"\n          />\n        </div>\n\n        <div>\n          <label className=\"mb-2 block text-sm font-medium\">Large</label>\n          <SearchBar\n            size=\"lg\"\n            value={values.lg}\n            onChange={e => updateValue('lg', e.target.value)}\n            onClear={() => updateValue('lg', '')}\n            placeholder=\"Large search...\"\n          />\n        </div>\n      </div>\n    );\n  },\n};\n\nexport const Variants: Story = {\n  render: () => {\n    const [values, setValues] = useState({ default: '', filled: '', outlined: '' });\n\n    const updateValue = (variant: 'default' | 'filled' | 'outlined', newValue: string) => {\n      setValues(prev => ({ ...prev, [variant]: newValue }));\n    };\n\n    return (\n      <div className=\"w-80 space-y-4\">\n        <div>\n          <label className=\"mb-2 block text-sm font-medium\">Default</label>\n          <SearchBar\n            variant=\"default\"\n            value={values.default}\n            onChange={e => updateValue('default', e.target.value)}\n            onClear={() => updateValue('default', '')}\n            placeholder=\"Default search...\"\n          />\n        </div>\n\n        <div>\n          <label className=\"mb-2 block text-sm font-medium\">Filled</label>\n          <SearchBar\n            variant=\"filled\"\n            value={values.filled}\n            onChange={e => updateValue('filled', e.target.value)}\n            onClear={() => updateValue('filled', '')}\n            placeholder=\"Filled search...\"\n          />\n        </div>\n\n        <div>\n          <label className=\"mb-2 block text-sm font-medium\">Outlined</label>\n          <SearchBar\n            variant=\"outlined\"\n            value={values.outlined}\n            onChange={e => updateValue('outlined', e.target.value)}\n            onClear={() => updateValue('outlined', '')}\n            placeholder=\"Outlined search...\"\n          />\n        </div>\n      </div>\n    );\n  },\n};\n\nexport const States: Story = {\n  render: () => (\n    <div className=\"w-80 space-y-4\">\n      <div>\n        <label className=\"mb-2 block text-sm font-medium\">Normal</label>\n        <SearchBar placeholder=\"Normal search bar\" />\n      </div>\n\n      <div>\n        <label className=\"mb-2 block text-sm font-medium\">With Text</label>\n        <SearchBar value=\"Search query\" placeholder=\"Search...\" onChange={() => {}} />\n      </div>\n\n      <div>\n        <label className=\"mb-2 block text-sm font-medium\">Disabled</label>\n        <SearchBar value=\"Disabled search\" placeholder=\"Search...\" disabled onChange={() => {}} />\n      </div>\n\n      <div>\n        <label className=\"mb-2 block text-sm font-medium\">Without Clear Button</label>\n        <SearchBar\n          value=\"No clear button\"\n          placeholder=\"Search...\"\n          showClearButton={false}\n          onChange={() => {}}\n        />\n      </div>\n    </div>\n  ),\n};\n\nexport const SearchExample: Story = {\n  render: () => {\n    const [searchTerm, setSearchTerm] = useState('');\n    const [results, setResults] = useState<string[]>([]);\n    const [isSearching, setIsSearching] = useState(false);\n\n    // Mock data\n    const mockData = [\n      'React',\n      'Vue.js',\n      'Angular',\n      'Svelte',\n      'Next.js',\n      'Nuxt.js',\n      'Gatsby',\n      'TypeScript',\n      'JavaScript',\n      'Node.js',\n      'Express',\n      'Fastify',\n      'MongoDB',\n      'PostgreSQL',\n      'Redis',\n    ];\n\n    const performSearch = async (query: string) => {\n      if (!query.trim()) {\n        setResults([]);\n        return;\n      }\n\n      setIsSearching(true);\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n\n      const filtered = mockData.filter(item => item.toLowerCase().includes(query.toLowerCase()));\n\n      setResults(filtered);\n      setIsSearching(false);\n    };\n\n    const handleSearch = (query: string) => {\n      performSearch(query);\n    };\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setSearchTerm(e.target.value);\n      // Debounced search as user types\n      performSearch(e.target.value);\n    };\n\n    const handleClear = () => {\n      setSearchTerm('');\n      setResults([]);\n      setIsSearching(false);\n    };\n\n    return (\n      <div className=\"w-80\">\n        <SearchBar\n          value={searchTerm}\n          onChange={handleInputChange}\n          onSearch={handleSearch}\n          onClear={handleClear}\n          placeholder=\"Search technologies...\"\n        />\n\n        {isSearching && (\n          <div className=\"mt-4 rounded-sm bg-gray-50 p-3 text-sm text-gray-600 dark:text-gray-400\">\n            Searching...\n          </div>\n        )}\n\n        {results.length > 0 && !isSearching && (\n          <div className=\"mt-4 rounded-md border\">\n            <div className=\"border-b bg-gray-50 p-2 text-sm font-medium text-gray-700 dark:text-gray-300\">\n              Found {results.length} result{results.length !== 1 ? 's' : ''}\n            </div>\n            <ul className=\"divide-y\">\n              {results.map((result, index) => (\n                <li key={index} className=\"cursor-pointer p-3 hover:bg-gray-50\">\n                  {result}\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        {searchTerm && results.length === 0 && !isSearching && (\n          <div className=\"mt-4 rounded-sm bg-gray-50 p-3 text-sm text-gray-500 dark:text-gray-500\">\n            No results found for \"{searchTerm}\"\n          </div>\n        )}\n      </div>\n    );\n  },\n};\n\nexport const FilterExample: Story = {\n  render: () => {\n    const [filter, setFilter] = useState('');\n\n    const items = [\n      { id: 1, name: 'Apple iPhone 14', category: 'Electronics', price: 999 },\n      { id: 2, name: 'Samsung Galaxy S23', category: 'Electronics', price: 899 },\n      { id: 3, name: 'MacBook Pro', category: 'Computers', price: 1999 },\n      { id: 4, name: 'iPad Air', category: 'Tablets', price: 599 },\n      { id: 5, name: 'AirPods Pro', category: 'Audio', price: 249 },\n      { id: 6, name: 'Sony WH-1000XM4', category: 'Audio', price: 349 },\n    ];\n\n    const filteredItems = items.filter(\n      item =>\n        item.name.toLowerCase().includes(filter.toLowerCase()) ||\n        item.category.toLowerCase().includes(filter.toLowerCase())\n    );\n\n    return (\n      <div className=\"w-full max-w-md\">\n        <SearchBar\n          value={filter}\n          onChange={e => setFilter(e.target.value)}\n          onClear={() => setFilter('')}\n          placeholder=\"Filter products...\"\n          leftIcon={\n            <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.207A1 1 0 013 6.5V4z\"\n              />\n            </svg>\n          }\n        />\n\n        <div className=\"mt-4\">\n          <p className=\"mb-3 text-sm text-gray-600 dark:text-gray-400\">\n            {filteredItems.length} of {items.length} products\n          </p>\n\n          <div className=\"space-y-2\">\n            {filteredItems.map(item => (\n              <div key={item.id} className=\"rounded-lg border p-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <h3 className=\"font-medium\">{item.name}</h3>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">{item.category}</p>\n                  </div>\n                  <span className=\"font-semibold\">${item.price}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  },\n};\n\nexport const AccessibilityDemo: Story = {\n  render: () => {\n    const [value, setValue] = useState('');\n\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4\">\n          <h3 className=\"mb-2 text-lg font-semibold text-gray-800 dark:text-gray-200\">\n            Keyboard Shortcuts\n          </h3>\n          <ul className=\"space-y-1 text-sm text-gray-700 dark:text-gray-300\">\n            <li>\n              • <kbd className=\"rounded bg-blue-100 px-1 py-0.5\">Enter</kbd> to perform search\n            </li>\n            <li>\n              • <kbd className=\"rounded bg-blue-100 px-1 py-0.5\">Escape</kbd> to clear and blur\n            </li>\n            <li>• Clear button is excluded from tab order (tabindex=\"-1\")</li>\n            <li>• Proper ARIA labels for screen readers</li>\n          </ul>\n        </div>\n\n        <div className=\"w-80\">\n          <SearchBar\n            value={value}\n            onChange={e => setValue(e.target.value)}\n            onClear={() => setValue('')}\n            onSearch={searchValue => {\n              console.log('Search performed:', searchValue);\n              alert(`Searching for: \"${searchValue}\"`);\n            }}\n            placeholder=\"Try typing and pressing Enter...\"\n          />\n\n          <p className=\"mt-2 text-sm text-gray-600 dark:text-gray-400\">\n            Type something and press Enter to search, or Escape to clear.\n          </p>\n        </div>\n      </div>\n    );\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/molecules/SexDistributionPieChart/SexDistributionPieChart.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/molecules/StatisticsChart/StatisticsChart.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/molecules/StatsCard/StatsCard.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/molecules/SuccessModal/SuccessModal.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/molecules/ThemeToggle/ThemeToggle.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MockThemeProvider' is assigned a value but never used.","line":6,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'contextValue' is assigned a value but never used.","line":27,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { useState } from 'react';\nimport { ThemeToggle } from '@/components/molecules/ThemeToggle';\n\n// Mock ThemeContext for Storybook\nconst MockThemeProvider = ({\n  children,\n  initialTheme = 'system',\n}: {\n  children: React.ReactNode;\n  initialTheme?: 'light' | 'dark' | 'system';\n}) => {\n  const [theme, setTheme] = useState<'light' | 'dark' | 'system'>(initialTheme);\n  const [systemTheme] = useState<'light' | 'dark'>('light');\n\n  const actualTheme = theme === 'system' ? systemTheme : theme;\n\n  const toggleTheme = () => {\n    setTheme(current => {\n      if (current === 'light') return 'dark';\n      if (current === 'dark') return 'system';\n      return 'light';\n    });\n  };\n\n  // Mock context value\n  const contextValue = {\n    theme,\n    actualTheme,\n    toggleTheme,\n    setTheme,\n  };\n\n  return (\n    <div className={actualTheme === 'dark' ? 'dark' : ''}>\n      <div className=\"min-h-screen bg-white p-4 text-gray-900 dark:bg-gray-900 dark:text-black dark:text-white\">\n        {/* Provide mock context via global variable for component to use */}\n        {React.Children.map(children, child =>\n          React.isValidElement(child) && child.type === ThemeToggle\n            ? React.cloneElement(child as React.ReactElement<any>, {\n                onClick: () => {\n                  child.props.onClick?.();\n                  toggleTheme();\n                },\n              })\n            : child\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Note: This story requires the ThemeContext implementation\nconst meta = {\n  title: 'Molecules/ThemeToggle',\n  component: ThemeToggle,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component:\n          'A theme toggle button that cycles through light, dark, and system themes. Displays appropriate icons and labels based on current theme state. Note: Requires ThemeContext implementation.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    variant: {\n      control: { type: 'select' },\n      options: ['default', 'ghost', 'outline-solid'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n    showLabel: {\n      control: { type: 'boolean' },\n    },\n    labelPosition: {\n      control: { type: 'select' },\n      options: ['left', 'right'],\n    },\n  },\n} satisfies Meta<typeof ThemeToggle>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Mock story since we can't easily mock the context in Storybook\nexport const Default: Story = {\n  render: args => (\n    <div className=\"space-y-4\">\n      <div className=\"rounded-lg border bg-gray-50 p-4\">\n        <p className=\"mb-2 text-sm text-gray-600 dark:text-gray-400\">\n          <strong>Note:</strong> This component requires ThemeContext implementation. The following\n          is a visual representation of how it would appear.\n        </p>\n\n        <div className=\"flex items-center gap-4\">\n          <button\n            className=\"inline-flex items-center justify-center rounded-md p-2 font-medium transition-colors hover:bg-gray-100 focus:ring-2 focus:outline-hidden\"\n            title=\"Current theme: Light. Click to toggle.\"\n            aria-label=\"Toggle theme. Current: Light\"\n            {...args}\n          >\n            <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"\n              />\n            </svg>\n            {args.showLabel && <span className=\"ml-2 text-sm font-medium\">Light</span>}\n          </button>\n        </div>\n      </div>\n    </div>\n  ),\n  args: {\n    showLabel: false,\n  },\n};\n\nexport const WithLabels: Story = {\n  render: () => (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"mb-4 text-lg font-semibold\">Theme Toggle Variants</h3>\n        <div className=\"grid grid-cols-1 gap-4\">\n          <div className=\"rounded-lg border p-4\">\n            <h4 className=\"mb-2 font-medium\">Light Theme State</h4>\n            <div className=\"flex items-center gap-2\">\n              <button className=\"inline-flex items-center justify-center rounded-md p-2 font-medium transition-colors hover:bg-gray-100 focus:ring-2 focus:outline-hidden\">\n                <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"\n                  />\n                </svg>\n                <span className=\"ml-2 text-sm font-medium\">Light</span>\n              </button>\n            </div>\n          </div>\n\n          <div className=\"rounded-lg border bg-gray-800 p-4 text-white dark:text-black\">\n            <h4 className=\"mb-2 font-medium\">Dark Theme State</h4>\n            <div className=\"flex items-center gap-2\">\n              <button className=\"inline-flex items-center justify-center rounded-md p-2 font-medium text-white transition-colors hover:bg-gray-700 focus:ring-2 focus:outline-hidden dark:text-black\">\n                <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\"\n                  />\n                </svg>\n                <span className=\"ml-2 text-sm font-medium\">Dark</span>\n              </button>\n            </div>\n          </div>\n\n          <div className=\"rounded-lg border bg-gray-100 p-4\">\n            <h4 className=\"mb-2 font-medium\">System Theme State</h4>\n            <div className=\"flex items-center gap-2\">\n              <button className=\"inline-flex items-center justify-center rounded-md p-2 font-medium transition-colors hover:bg-gray-200 focus:ring-2 focus:outline-hidden\">\n                <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"\n                  />\n                </svg>\n                <span className=\"ml-2 text-sm font-medium\">System</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  ),\n};\n\nexport const Variants: Story = {\n  render: () => (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"mb-4 text-lg font-semibold\">Button Variants</h3>\n        <div className=\"flex gap-4\">\n          <div className=\"text-center\">\n            <p className=\"mb-2 text-sm text-gray-600 dark:text-gray-400\">Default</p>\n            <button className=\"inline-flex items-center justify-center rounded-md border border-gray-300 bg-white p-2 font-medium text-gray-900 transition-colors hover:bg-gray-50 focus:ring-2 focus:outline-hidden dark:text-gray-100\">\n              <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"\n                />\n              </svg>\n            </button>\n          </div>\n\n          <div className=\"text-center\">\n            <p className=\"mb-2 text-sm text-gray-600 dark:text-gray-400\">Ghost</p>\n            <button className=\"inline-flex items-center justify-center rounded-md p-2 font-medium text-gray-900 transition-colors hover:bg-gray-100 focus:ring-2 focus:outline-hidden dark:text-gray-100\">\n              <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"\n                />\n              </svg>\n            </button>\n          </div>\n\n          <div className=\"text-center\">\n            <p className=\"mb-2 text-sm text-gray-600 dark:text-gray-400\">Outline</p>\n            <button className=\"inline-flex items-center justify-center rounded-md border border-gray-300 bg-transparent p-2 font-medium text-gray-900 transition-colors hover:bg-gray-50 focus:ring-2 focus:outline-hidden dark:text-gray-100\">\n              <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"\n                />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  ),\n};\n\nexport const Sizes: Story = {\n  render: () => (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"mb-4 text-lg font-semibold\">Size Variants</h3>\n        <div className=\"flex items-center gap-4\">\n          <div className=\"text-center\">\n            <p className=\"mb-2 text-sm text-gray-600 dark:text-gray-400\">Small</p>\n            <button className=\"inline-flex h-8 w-8 items-center justify-center rounded-md p-1 font-medium text-gray-900 transition-colors hover:bg-gray-100 focus:ring-2 focus:outline-hidden dark:text-gray-100\">\n              <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"\n                />\n              </svg>\n            </button>\n          </div>\n\n          <div className=\"text-center\">\n            <p className=\"mb-2 text-sm text-gray-600 dark:text-gray-400\">Medium</p>\n            <button className=\"inline-flex h-9 w-9 items-center justify-center rounded-md p-2 font-medium text-gray-900 transition-colors hover:bg-gray-100 focus:ring-2 focus:outline-hidden dark:text-gray-100\">\n              <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"\n                />\n              </svg>\n            </button>\n          </div>\n\n          <div className=\"text-center\">\n            <p className=\"mb-2 text-sm text-gray-600 dark:text-gray-400\">Large</p>\n            <button className=\"inline-flex h-10 w-10 items-center justify-center rounded-md p-2.5 font-medium text-gray-900 transition-colors hover:bg-gray-100 focus:ring-2 focus:outline-hidden dark:text-gray-100\">\n              <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"\n                />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  ),\n};\n\nexport const LabelPositions: Story = {\n  render: () => (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"mb-4 text-lg font-semibold\">Label Positions</h3>\n        <div className=\"flex gap-6\">\n          <div className=\"text-center\">\n            <p className=\"mb-2 text-sm text-gray-600 dark:text-gray-400\">Label Left</p>\n            <button className=\"inline-flex items-center justify-center rounded-md p-2 font-medium text-gray-900 transition-colors hover:bg-gray-100 focus:ring-2 focus:outline-hidden dark:text-gray-100\">\n              <span className=\"mr-2 text-sm font-medium\">Light</span>\n              <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"\n                />\n              </svg>\n            </button>\n          </div>\n\n          <div className=\"text-center\">\n            <p className=\"mb-2 text-sm text-gray-600 dark:text-gray-400\">Label Right</p>\n            <button className=\"inline-flex items-center justify-center rounded-md p-2 font-medium text-gray-900 transition-colors hover:bg-gray-100 focus:ring-2 focus:outline-hidden dark:text-gray-100\">\n              <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"\n                />\n              </svg>\n              <span className=\"ml-2 text-sm font-medium\">Light</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  ),\n};\n\nexport const InNavigation: Story = {\n  render: () => (\n    <div className=\"w-full\">\n      <nav className=\"border-b border-gray-200 bg-white p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-6\">\n            <h1 className=\"text-xl font-bold\">My App</h1>\n            <div className=\"hidden gap-4 md:flex\">\n              <a\n                href=\"#\"\n                className=\"text-gray-600 hover:text-gray-900 dark:text-gray-100 dark:text-gray-400\"\n              >\n                Home\n              </a>\n              <a\n                href=\"#\"\n                className=\"text-gray-600 hover:text-gray-900 dark:text-gray-100 dark:text-gray-400\"\n              >\n                About\n              </a>\n              <a\n                href=\"#\"\n                className=\"text-gray-600 hover:text-gray-900 dark:text-gray-100 dark:text-gray-400\"\n              >\n                Contact\n              </a>\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <button className=\"inline-flex items-center justify-center rounded-md p-2 font-medium text-gray-900 transition-colors hover:bg-gray-100 focus:ring-2 focus:outline-hidden dark:text-gray-100\">\n              <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"\n                />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </nav>\n\n      <main className=\"p-8\">\n        <h2 className=\"mb-4 text-2xl font-bold\">Content Area</h2>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          The theme toggle is typically placed in the navigation bar for easy access. Users can\n          quickly switch between light, dark, and system themes.\n        </p>\n      </main>\n    </div>\n  ),\n};\n\nexport const AccessibilityDemo: Story = {\n  render: () => (\n    <div className=\"space-y-6\">\n      <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4\">\n        <h3 className=\"mb-2 text-lg font-semibold text-gray-800 dark:text-gray-200\">\n          Accessibility Features\n        </h3>\n        <ul className=\"space-y-1 text-sm text-gray-700 dark:text-gray-300\">\n          <li>\n            • <strong>aria-label</strong>: Describes current theme state and action\n          </li>\n          <li>\n            • <strong>title attribute</strong>: Provides tooltip with current state\n          </li>\n          <li>\n            • <strong>Keyboard navigation</strong>: Fully accessible via keyboard\n          </li>\n          <li>\n            • <strong>Focus indicators</strong>: Clear visual focus states\n          </li>\n          <li>\n            • <strong>Icon semantics</strong>: Icons clearly represent theme states\n          </li>\n        </ul>\n      </div>\n\n      <div className=\"flex gap-4\">\n        <button\n          className=\"inline-flex items-center justify-center rounded-md p-2 font-medium text-gray-900 transition-colors hover:bg-gray-100 focus:ring-2 focus:ring-blue-500 focus:outline-hidden dark:text-gray-100\"\n          title=\"Current theme: Light. Click to toggle.\"\n          aria-label=\"Toggle theme. Current: Light\"\n        >\n          <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"\n            />\n          </svg>\n        </button>\n\n        <p className=\"self-center text-sm text-gray-600 dark:text-gray-400\">\n          Hover to see tooltip, focus to see keyboard indicators\n        </p>\n      </div>\n    </div>\n  ),\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/molecules/VersionTag/VersionTag.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Story' is defined but never used.","line":171,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":171,"endColumn":10}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { VersionTag } from '@/components/molecules/VersionTag';\n\nconst meta: Meta<typeof VersionTag> = {\n  title: 'Molecules/VersionTag',\n  component: VersionTag,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'A version and environment indicator that appears in the corner of the application. Automatically shows version from package.json and detects the current environment.',\n      },\n    },\n  },\n  argTypes: {\n    position: {\n      control: 'select',\n      options: ['bottom-left', 'bottom-right', 'top-left', 'top-right'],\n      description: 'Position of the version tag on the screen',\n    },\n    showEnvironment: {\n      control: 'boolean',\n      description: 'Whether to show the environment name',\n    },\n    showVersion: {\n      control: 'boolean',\n      description: 'Whether to show the version number',\n    },\n    className: {\n      control: 'text',\n      description: 'Additional CSS classes to apply',\n    },\n  },\n} satisfies Meta<typeof VersionTag>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Mock environment variables for Storybook\nconst originalEnv = process.env;\nbeforeEach(() => {\n  process.env = { ...originalEnv };\n});\n\nexport const Development: Story = {\n  args: {\n    position: 'bottom-right',\n    showEnvironment: true,\n    showVersion: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Version tag as it appears in development environment with blue styling.',\n      },\n    },\n  },\n  decorators: [\n    Story => {\n      // Mock development environment\n      process.env.NODE_ENV = 'development';\n      process.env.NEXT_PUBLIC_APP_VERSION = '0.2.0';\n      return <Story />;\n    },\n  ],\n};\n\nexport const Staging: Story = {\n  args: {\n    position: 'bottom-right',\n    showEnvironment: true,\n    showVersion: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Version tag for staging environment with yellow/orange styling.',\n      },\n    },\n  },\n  decorators: [\n    Story => {\n      process.env.NEXT_PUBLIC_APP_ENV = 'staging';\n      process.env.NEXT_PUBLIC_APP_VERSION = '0.2.0';\n      return <Story />;\n    },\n  ],\n};\n\nexport const Production: Story = {\n  args: {\n    position: 'bottom-right',\n    showEnvironment: true,\n    showVersion: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Version tag for production environment with green styling. Note: This is hidden by default in production unless NEXT_PUBLIC_SHOW_VERSION_TAG is set.',\n      },\n    },\n  },\n  decorators: [\n    Story => {\n      process.env.NEXT_PUBLIC_APP_ENV = 'production';\n      process.env.NEXT_PUBLIC_APP_VERSION = '0.2.0';\n      process.env.NEXT_PUBLIC_SHOW_VERSION_TAG = 'true';\n      return <Story />;\n    },\n  ],\n};\n\nexport const VersionOnly: Story = {\n  args: {\n    position: 'bottom-right',\n    showEnvironment: false,\n    showVersion: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Shows only the version number without environment information.',\n      },\n    },\n  },\n  decorators: [\n    Story => {\n      process.env.NODE_ENV = 'development';\n      process.env.NEXT_PUBLIC_APP_VERSION = '0.2.0';\n      return <Story />;\n    },\n  ],\n};\n\nexport const EnvironmentOnly: Story = {\n  args: {\n    position: 'bottom-right',\n    showEnvironment: true,\n    showVersion: false,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Shows only the environment without version information.',\n      },\n    },\n  },\n  decorators: [\n    Story => {\n      process.env.NODE_ENV = 'development';\n      return <Story />;\n    },\n  ],\n};\n\nexport const AllPositions: Story = {\n  args: {\n    showEnvironment: true,\n    showVersion: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Shows all possible positions for the version tag.',\n      },\n    },\n  },\n  decorators: [\n    Story => {\n      process.env.NODE_ENV = 'development';\n      process.env.NEXT_PUBLIC_APP_VERSION = '0.2.0';\n      return (\n        <div className=\"relative h-screen\">\n          <VersionTag position=\"top-left\" />\n          <VersionTag position=\"top-right\" />\n          <VersionTag position=\"bottom-left\" />\n          <VersionTag position=\"bottom-right\" />\n        </div>\n      );\n    },\n  ],\n};\n\nexport const CustomStyling: Story = {\n  args: {\n    position: 'bottom-right',\n    showEnvironment: true,\n    showVersion: true,\n    className: 'bg-purple-100 text-gray-800 dark:text-gray-200 border-purple-200 font-bold',\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Example of custom styling overriding the default environment-based colors.',\n      },\n    },\n  },\n  decorators: [\n    Story => {\n      process.env.NODE_ENV = 'development';\n      process.env.NEXT_PUBLIC_APP_VERSION = '0.2.0';\n      return <Story />;\n    },\n  ],\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/CreateHouseholdModal/CreateHouseholdModal.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockAuthContext' is assigned a value but never used.","line":48,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":22},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":280,"column":73,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[8573,8725],"text":"\n                Try submitting the form without filling in the required &quot;Street Name\" field to see\n                validation in action.\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[8573,8725],"text":"\n                Try submitting the form without filling in the required &ldquo;Street Name\" field to see\n                validation in action.\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[8573,8725],"text":"\n                Try submitting the form without filling in the required &#34;Street Name\" field to see\n                validation in action.\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[8573,8725],"text":"\n                Try submitting the form without filling in the required &rdquo;Street Name\" field to see\n                validation in action.\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":280,"column":85,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[8573,8725],"text":"\n                Try submitting the form without filling in the required \"Street Name&quot; field to see\n                validation in action.\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[8573,8725],"text":"\n                Try submitting the form without filling in the required \"Street Name&ldquo; field to see\n                validation in action.\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[8573,8725],"text":"\n                Try submitting the form without filling in the required \"Street Name&#34; field to see\n                validation in action.\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[8573,8725],"text":"\n                Try submitting the form without filling in the required \"Street Name&rdquo; field to see\n                validation in action.\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentDemo' is assigned a value but never used.","line":326,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":326,"endColumn":23}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { action } from 'storybook/actions';\nimport CreateHouseholdModal from '@/components/organisms/CreateHouseholdModal';\n\nconst meta: Meta<typeof CreateHouseholdModal> = {\n  title: 'Organisms/CreateHouseholdModal',\n  component: CreateHouseholdModal,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: `\nA modal dialog for creating new household records in the barangay system. This component provides a comprehensive form for capturing household address information while automatically handling geographic data integration. Key features include:\n\n- **Geographic Integration** - Automatically derives region, province, and city from user's barangay assignment\n- **Form Validation** - Client-side validation with error messaging\n- **Auto-Generated Codes** - Creates PSGC-compliant household codes automatically\n- **Address Hierarchy Display** - Shows the complete address hierarchy for context\n- **Real-time Feedback** - Loading states and success/error handling\n- **Responsive Design** - Works on desktop and mobile devices\n\nThe modal integrates with the Supabase backend to create household records and maintains data consistency with the PSGC (Philippine Standard Geographic Code) system.\n        `,\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    isOpen: {\n      control: 'boolean',\n      description: 'Controls modal visibility',\n    },\n    onClose: {\n      action: 'onClose',\n      description: 'Callback when modal is closed',\n    },\n    onHouseholdCreated: {\n      action: 'onHouseholdCreated',\n      description: 'Callback when household is successfully created',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Mock auth context for stories\nconst mockAuthContext = {\n  userProfile: {\n    id: 'user-123',\n    barangay_code: '042109001',\n    first_name: 'Juan',\n    last_name: 'dela Cruz',\n    role: 'admin',\n  },\n};\n\n// Decorator to provide mock auth context\nconst withMockAuth = (Story: React.ComponentType) => {\n  return (\n    <div>\n      {/* Mock auth context would be provided here in real implementation */}\n      <Story />\n    </div>\n  );\n};\n\nexport const Default: Story = {\n  args: {\n    isOpen: true,\n    onClose: action('modal-closed'),\n    onHouseholdCreated: action('household-created'),\n  },\n  decorators: [withMockAuth],\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Default modal state ready for household creation. Shows the geographic location context and form fields.',\n      },\n    },\n  },\n};\n\nexport const Closed: Story = {\n  args: {\n    isOpen: false,\n    onClose: action('modal-closed'),\n    onHouseholdCreated: action('household-created'),\n  },\n  decorators: [withMockAuth],\n  parameters: {\n    docs: {\n      description: {\n        story: 'Modal in closed state - not visible.',\n      },\n    },\n  },\n  render: args => (\n    <div className=\"space-y-4\">\n      <CreateHouseholdModal {...args} />\n      <div className=\"text-center\">\n        <button\n          onClick={() => args.onClose()}\n          className=\"rounded bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 dark:text-black\"\n        >\n          Open Create Household Modal\n        </button>\n        <p className=\"mt-2 text-sm text-gray-500 dark:text-gray-500\">\n          Click the button above to open the modal\n        </p>\n      </div>\n    </div>\n  ),\n};\n\nexport const WithPrefilledData: Story = {\n  args: {\n    isOpen: true,\n    onClose: action('modal-closed'),\n    onHouseholdCreated: action('household-created'),\n  },\n  decorators: [withMockAuth],\n  parameters: {\n    docs: {\n      description: {\n        story: 'Modal demonstrating how it would appear with some form data filled in.',\n      },\n    },\n  },\n  render: args => {\n    // This would be handled by the component's internal state in real usage\n    React.useEffect(() => {\n      // Simulate filling in some form data\n      const streetInput = document.querySelector(\n        'input[placeholder*=\"Main Street\"]'\n      ) as HTMLInputElement;\n      const houseInput = document.querySelector('input[placeholder*=\"Blk 1\"]') as HTMLInputElement;\n\n      if (streetInput) streetInput.value = 'San Lorenzo Street';\n      if (houseInput) houseInput.value = 'Block 5 Lot 12';\n    }, []);\n\n    return <CreateHouseholdModal {...args} />;\n  },\n};\n\nexport const GeographicContextDemo: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Demonstrates how the modal shows different geographic contexts based on the user&rsquo;s barangay assignment.',\n      },\n    },\n  },\n  render: () => {\n    const [currentModal, setCurrentModal] = React.useState<string | null>(null);\n\n    const locations = [\n      {\n        id: 'makati',\n        name: 'Makati City Location',\n        context: {\n          region: 'National Capital Region (NCR)',\n          province: 'Metro Manila',\n          cityMunicipality: 'Makati City (City)',\n          barangay: 'San Lorenzo',\n          code: '042109001',\n        },\n      },\n      {\n        id: 'quezon',\n        name: 'Quezon City Location',\n        context: {\n          region: 'National Capital Region (NCR)',\n          province: 'Metro Manila',\n          cityMunicipality: 'Quezon City (City)',\n          barangay: 'Bagumbayan',\n          code: '174212001',\n        },\n      },\n      {\n        id: 'cebu',\n        name: 'Cebu Province Location',\n        context: {\n          region: 'Central Visayas (Region VII)',\n          province: 'Cebu',\n          cityMunicipality: 'Cebu City (City)',\n          barangay: 'Lahug',\n          code: '071234001',\n        },\n      },\n    ];\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n          {locations.map(location => (\n            <div key={location.id} className=\"rounded-lg border border-gray-200 p-4\">\n              <h3 className=\"mb-2 font-semibold text-gray-900 dark:text-gray-100\">\n                {location.name}\n              </h3>\n              <div className=\"mb-3 space-y-1 text-sm text-gray-600 dark:text-gray-400\">\n                <div>\n                  <strong>Region:</strong> {location.context.region}\n                </div>\n                <div>\n                  <strong>Province:</strong> {location.context.province}\n                </div>\n                <div>\n                  <strong>City:</strong> {location.context.cityMunicipality}\n                </div>\n                <div>\n                  <strong>Barangay:</strong> {location.context.barangay}\n                </div>\n                <div className=\"text-xs text-gray-500 dark:text-gray-500\">\n                  Code: {location.context.code}\n                </div>\n              </div>\n              <button\n                onClick={() => setCurrentModal(location.id)}\n                className=\"w-full rounded-sm bg-blue-600 px-3 py-2 text-sm text-white hover:bg-blue-700 dark:text-black\"\n              >\n                Create Household Here\n              </button>\n            </div>\n          ))}\n        </div>\n\n        {locations.map(location => (\n          <CreateHouseholdModal\n            key={location.id}\n            isOpen={currentModal === location.id}\n            onClose={() => setCurrentModal(null)}\n            onHouseholdCreated={code => {\n              action('household-created')(code, location.context);\n              setCurrentModal(null);\n            }}\n          />\n        ))}\n      </div>\n    );\n  },\n};\n\nexport const FormValidationDemo: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: 'Demonstrates form validation behavior and error states.',\n      },\n    },\n  },\n  render: () => {\n    const [isOpen, setIsOpen] = React.useState(true);\n\n    return (\n      <div className=\"space-y-4\">\n        <CreateHouseholdModal\n          isOpen={isOpen}\n          onClose={() => setIsOpen(false)}\n          onHouseholdCreated={code => {\n            action('household-created')(code);\n            setIsOpen(false);\n          }}\n        />\n\n        {!isOpen && (\n          <div className=\"text-center\">\n            <button\n              onClick={() => setIsOpen(true)}\n              className=\"rounded bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 dark:text-black\"\n            >\n              Reopen Modal\n            </button>\n            <div className=\"mt-4 rounded-sm border border-yellow-200 bg-yellow-50 p-4 text-left\">\n              <h4 className=\"mb-2 font-semibold text-yellow-800\">Form Validation Demo</h4>\n              <p className=\"text-sm text-yellow-700\">\n                Try submitting the form without filling in the required \"Street Name\" field to see\n                validation in action.\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  },\n};\n\nexport const MobileView: Story = {\n  args: {\n    isOpen: true,\n    onClose: action('modal-closed'),\n    onHouseholdCreated: action('household-created'),\n  },\n  decorators: [\n    withMockAuth,\n    Story => (\n      <div className=\"mx-auto max-w-sm\">\n        <Story />\n      </div>\n    ),\n  ],\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n    docs: {\n      description: {\n        story: 'Modal appearance on mobile devices with responsive design adaptations.',\n      },\n    },\n  },\n};\n\nexport const LoadingStatesDemo: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: 'Demonstrates various loading states during the household creation process.',\n      },\n    },\n  },\n  render: () => {\n    const [currentDemo, setCurrentDemo] = React.useState<'initial' | 'submitting' | 'success'>(\n      'initial'\n    );\n    const [isOpen, setIsOpen] = React.useState(true);\n\n    const handleSubmit = async () => {\n      setCurrentDemo('submitting');\n\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      setCurrentDemo('success');\n\n      // Auto close after success\n      setTimeout(() => {\n        setIsOpen(false);\n        setCurrentDemo('initial');\n      }, 1500);\n    };\n\n    return (\n      <div className=\"space-y-4\">\n        <CreateHouseholdModal\n          isOpen={isOpen}\n          onClose={() => {\n            setIsOpen(false);\n            setCurrentDemo('initial');\n          }}\n          onHouseholdCreated={code => {\n            action('household-created')(code);\n            handleSubmit();\n          }}\n        />\n\n        {!isOpen && (\n          <div className=\"space-y-4 text-center\">\n            <button\n              onClick={() => setIsOpen(true)}\n              className=\"rounded bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 dark:text-black\"\n            >\n              Try Loading States Demo\n            </button>\n\n            <div className=\"rounded border border-blue-200 bg-blue-50 p-4 text-left\">\n              <h4 className=\"mb-2 font-semibold text-gray-800 dark:text-gray-200\">\n                Loading States Demo\n              </h4>\n              <div className=\"space-y-2 text-sm text-gray-700 dark:text-gray-300\">\n                <p>\n                  <strong>1. Initial:</strong> Form ready for input\n                </p>\n                <p>\n                  <strong>2. Submitting:</strong> Shows loading spinner and disabled inputs\n                </p>\n                <p>\n                  <strong>3. Success:</strong> Confirmation and auto-close\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  },\n};\n\nexport const RealWorldScenarios: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: 'Real-world household creation scenarios with different address types.',\n      },\n    },\n  },\n  render: () => {\n    const [selectedScenario, setSelectedScenario] = React.useState<string | null>(null);\n\n    const scenarios = [\n      {\n        id: 'subdivision',\n        title: 'Subdivision Address',\n        description: 'Creating household in a gated subdivision',\n        example: {\n          houseNumber: 'Block 5 Lot 12',\n          streetName: 'San Lorenzo Street',\n          subdivision: 'Greenview Subdivision',\n          zipCode: '1223',\n        },\n      },\n      {\n        id: 'rural',\n        title: 'Rural/Zone Address',\n        description: 'Creating household in rural area with zone system',\n        example: {\n          houseNumber: '',\n          streetName: 'Maharlika Highway',\n          subdivision: 'Zone 3, Purok 2',\n          zipCode: '',\n        },\n      },\n      {\n        id: 'urban',\n        title: 'Urban Street Address',\n        description: 'Creating household on regular city street',\n        example: {\n          houseNumber: '#123',\n          streetName: 'Rizal Avenue',\n          subdivision: '',\n          zipCode: '1000',\n        },\n      },\n    ];\n\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n          {scenarios.map(scenario => (\n            <div key={scenario.id} className=\"rounded-lg border border-gray-200 p-4\">\n              <h3 className=\"mb-2 font-semibold text-gray-900 dark:text-gray-100\">\n                {scenario.title}\n              </h3>\n              <p className=\"mb-3 text-sm text-gray-600 dark:text-gray-400\">\n                {scenario.description}\n              </p>\n\n              <div className=\"mb-3 space-y-1 text-xs text-gray-500 dark:text-gray-500\">\n                <div>\n                  <strong>House:</strong> {scenario.example.houseNumber || 'None'}\n                </div>\n                <div>\n                  <strong>Street:</strong> {scenario.example.streetName}\n                </div>\n                <div>\n                  <strong>Subdivision:</strong> {scenario.example.subdivision || 'None'}\n                </div>\n                <div>\n                  <strong>ZIP:</strong> {scenario.example.zipCode || 'None'}\n                </div>\n              </div>\n\n              <button\n                onClick={() => setSelectedScenario(scenario.id)}\n                className=\"w-full rounded-sm bg-green-600 px-3 py-2 text-sm text-white hover:bg-green-700 dark:text-black\"\n              >\n                Try This Scenario\n              </button>\n            </div>\n          ))}\n        </div>\n\n        {scenarios.map(scenario => (\n          <CreateHouseholdModal\n            key={scenario.id}\n            isOpen={selectedScenario === scenario.id}\n            onClose={() => setSelectedScenario(null)}\n            onHouseholdCreated={code => {\n              action('household-created')(code, scenario);\n              setSelectedScenario(null);\n            }}\n          />\n        ))}\n      </div>\n    );\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/DataTable/DataTable.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/DevLogin/DevLogin.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockIsDevFeatureEnabled' is assigned a value but never used.","line":6,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockGetDevCredentials' is assigned a value but never used.","line":7,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockGetDemoUserConfig' is assigned a value but never used.","line":11,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockLogDevModeWarning' is assigned a value but never used.","line":16,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockValidateDevEnvironment' is assigned a value but never used.","line":17,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { fn, within, expect } from 'storybook/test';\nimport DevLogin from '@/components/organisms/DevLogin';\n\n// Mock the dev-config module\nconst mockIsDevFeatureEnabled = (enabled: boolean) => enabled;\nconst mockGetDevCredentials = () => ({\n  email: 'admin@demo.gov.ph',\n  password: 'dev123456',\n});\nconst mockGetDemoUserConfig = () => ({\n  first_name: 'Juan',\n  last_name: 'Cruz',\n  mobile_number: '+639123456789',\n});\nconst mockLogDevModeWarning = () => console.warn('Development mode active');\nconst mockValidateDevEnvironment = (isValid: boolean) => ({\n  isValid,\n  errors: isValid ? [] : ['NODE_ENV not set to development', 'Missing SUPABASE_URL'],\n});\n\n// Mock supabase\nconst mockSupabase = {\n  auth: {\n    signUp: fn(),\n    signInWithPassword: fn(),\n    getUser: fn(),\n  },\n  from: fn(),\n};\n\n// Setup decorators with mocked dependencies\nconst mockDecorator = (\n  Story: React.ComponentType,\n  context: { parameters: { devModeEnabled?: boolean; hasConfigErrors?: boolean } }\n) => {\n  // Mock the imports based on story parameters\n  const { devModeEnabled = true, hasConfigErrors = false } = context.parameters;\n\n  // Note: In Storybook environment, mocking is handled differently\n  // These would typically be handled through Storybook parameters or MSW\n  console.log('DevLogin Story with params:', { devModeEnabled, hasConfigErrors });\n\n  return <Story />;\n};\n\nconst meta: Meta<typeof DevLogin> = {\n  title: 'Organisms/DevLogin',\n  component: DevLogin,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: `\nDevelopment login component for testing authentication flows in the RBI System.\nThis component should only be available in development environments.\n\n**Features:**\n- Creates demo users with proper barangay assignments\n- Quick login buttons for existing users\n- Environment validation and configuration checks\n- Security warnings for development-only usage\n- Comprehensive error handling and user feedback\n\n**Security Considerations:**\n- Only available when NODE_ENV=development\n- Uses secure environment variables for credentials\n- Shows clear warnings about development-only usage\n- Validates environment configuration before enabling features\n        `,\n      },\n    },\n  },\n  decorators: [mockDecorator],\n  argTypes: {\n    onSuccess: {\n      description: 'Callback function called when login/setup is successful',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof DevLogin>;\n\nexport const Default: Story = {\n  args: {\n    onSuccess: fn(),\n  },\n  parameters: {\n    devModeEnabled: true,\n    hasConfigErrors: false,\n  },\n};\n\nexport const CreatingUser: Story = {\n  args: {\n    onSuccess: fn(),\n  },\n  parameters: {\n    devModeEnabled: true,\n    hasConfigErrors: false,\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // Note: Mock setup would be handled by Storybook/MSW in real implementation\n    console.log('DevLogin interaction test - mocks would be configured here');\n\n    // Click the setup button to trigger user creation\n    const setupButton = canvas.getByRole('button', { name: /create demo users/i });\n\n    // Verify initial state\n    expect(setupButton).toBeInTheDocument();\n    expect(setupButton).toBeEnabled();\n  },\n};\n\nexport const UserAlreadyExists: Story = {\n  args: {\n    onSuccess: fn(),\n  },\n  parameters: {\n    devModeEnabled: true,\n    hasConfigErrors: false,\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // Note: Mock setup would be handled by Storybook/MSW in real implementation\n    console.log('UserAlreadyExists interaction test - mocks would be configured here');\n\n    const setupButton = canvas.getByRole('button', { name: /create demo users/i });\n    expect(setupButton).toBeInTheDocument();\n  },\n};\n\nexport const DatabaseError: Story = {\n  args: {\n    onSuccess: fn(),\n  },\n  parameters: {\n    devModeEnabled: true,\n    hasConfigErrors: false,\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // Note: Mock setup would be handled by Storybook/MSW in real implementation\n    console.log('DatabaseError interaction test - mocks would be configured here');\n\n    const setupButton = canvas.getByRole('button', { name: /create demo users/i });\n    expect(setupButton).toBeInTheDocument();\n  },\n};\n\nexport const QuickLogin: Story = {\n  args: {\n    onSuccess: fn(),\n  },\n  parameters: {\n    devModeEnabled: true,\n    hasConfigErrors: false,\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // Note: Mock setup would be handled by Storybook/MSW in real implementation\n    console.log('QuickLogin interaction test - mocks would be configured here');\n\n    // Verify quick login buttons are present\n    const adminLoginButton = canvas.getByRole('button', { name: /login as barangay admin/i });\n    const clerkLoginButton = canvas.getByRole('button', { name: /login as clerk/i });\n\n    expect(adminLoginButton).toBeInTheDocument();\n    expect(clerkLoginButton).toBeInTheDocument();\n  },\n};\n\nexport const LoginError: Story = {\n  args: {\n    onSuccess: fn(),\n  },\n  parameters: {\n    devModeEnabled: true,\n    hasConfigErrors: false,\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // Mock login error\n    mockSupabase.auth.signInWithPassword.mockResolvedValueOnce({\n      error: { message: 'Invalid login credentials' },\n    });\n\n    const adminLoginButton = canvas.getByRole('button', { name: /login as barangay admin/i });\n    expect(adminLoginButton).toBeInTheDocument();\n  },\n};\n\nexport const DevModeDisabled: Story = {\n  args: {\n    onSuccess: fn(),\n  },\n  parameters: {\n    devModeEnabled: false,\n    hasConfigErrors: false,\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // Verify setup button is disabled when dev mode is off\n    const setupButton = canvas.getByRole('button', { name: /create demo users/i });\n    expect(setupButton).toBeDisabled();\n\n    // Quick login buttons should be disabled\n    const adminLoginButton = canvas.getByRole('button', { name: /login as barangay admin/i });\n    expect(adminLoginButton).toBeDisabled();\n  },\n};\n\nexport const ConfigurationErrors: Story = {\n  args: {\n    onSuccess: fn(),\n  },\n  parameters: {\n    devModeEnabled: false,\n    hasConfigErrors: true,\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // Verify error message is displayed\n    const errorMessage = canvas.getByText(/configuration errors/i);\n    expect(errorMessage).toBeInTheDocument();\n  },\n};\n\nexport const SecurityWarning: Story = {\n  args: {\n    onSuccess: fn(),\n  },\n  parameters: {\n    devModeEnabled: true,\n    hasConfigErrors: false,\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // Verify security warning is displayed\n    const warningText = canvas.getByText(/development mode only/i);\n    expect(warningText).toBeInTheDocument();\n  },\n};\n\n// Interactive testing stories\nexport const InteractiveSetup: Story = {\n  name: '🧪 Interactive - User Creation Flow',\n  args: {\n    onSuccess: fn(),\n  },\n  parameters: {\n    devModeEnabled: true,\n    hasConfigErrors: false,\n    docs: {\n      description: {\n        story: `\nInteractive story to test the complete user creation flow.\n        \n**Test Steps:**\n1. Click \"Create Demo Users & Login\" button\n2. Observe loading state and progress messages\n3. Verify success message and automatic login\n4. Check that quick login buttons become available\n\n**Expected Behavior:**\n- Button shows loading spinner during setup\n- Status messages show progress of each step\n- Success message appears with checkmark\n- onSuccess callback is triggered after completion\n        `,\n      },\n    },\n  },\n};\n\nexport const InteractiveQuickLogin: Story = {\n  name: '🧪 Interactive - Quick Login Flow',\n  args: {\n    onSuccess: fn(),\n  },\n  parameters: {\n    devModeEnabled: true,\n    hasConfigErrors: false,\n    docs: {\n      description: {\n        story: `\nInteractive story to test quick login functionality.\n        \n**Test Steps:**\n1. Click either \"Login as Barangay Admin\" or \"Login as Clerk\"\n2. Observe status messages\n3. Verify successful login and callback\n\n**Expected Behavior:**\n- Login attempt message appears immediately\n- Success message shows after authentication\n- onSuccess callback is triggered\n        `,\n      },\n    },\n  },\n};\n\nexport const InteractiveErrorHandling: Story = {\n  name: '🧪 Interactive - Error Scenarios',\n  args: {\n    onSuccess: fn(),\n  },\n  parameters: {\n    devModeEnabled: true,\n    hasConfigErrors: false,\n    docs: {\n      description: {\n        story: `\nInteractive story to test error handling scenarios.\n\n**Note:** This story uses mocked errors. In a real test environment:\n- Network errors should be handled gracefully\n- Database errors should show appropriate messages\n- Authentication errors should provide clear feedback\n- Users should be able to retry failed operations\n\n**Testing Tips:**\n- Try creating users when database is unavailable\n- Test login with invalid credentials\n- Verify error messages are user-friendly\n        `,\n      },\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/Form/Household/HouseholdDetails/HouseholdDetails.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/Form/Household/HouseholdForm.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/Form/Resident/ContactInformation/ContactInformation.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/Form/Resident/ContactInformation/FormField/ContactDetails.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ValidationPatternStory' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ValidationPatternControls' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { useState } from 'react';\nimport { ContactDetails, ContactDetailsData } from '@/components/organisms/ContactDetails';\nimport { \n  InteractiveStory, \n  ProgressiveStory, \n  ProgressiveStoryControls,\n  ValidationPatternStory,\n  ValidationPatternControls,\n  StoryControlButtons,\n  StoryValueDisplay,\n  createEmailValidator,\n  createPhoneValidator,\n  combineValidators,\n  createStoryParameters,\n  createEmptyFormData,\n  createSampleFormData\n} from '@/lib/storybookUtils';\n\nconst meta = {\n  title: 'Organisms/Form/Resident/ContactInformation/FormField/ContactDetails',\n  component: ContactDetails,\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component:\n          'A form section for collecting contact information including email, phone number, and mobile number. Features responsive grid layout and validation support for communication details.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    value: {\n      control: { type: 'object' },\n      description: 'Current form values for contact details',\n    },\n    onChange: {\n      action: 'changed',\n      description: 'Callback when any field value changes',\n    },\n    errors: {\n      control: { type: 'object' },\n      description: 'Error messages for each field',\n    },\n    className: {\n      control: { type: 'text' },\n      description: 'Additional CSS classes',\n    },\n  },\n} satisfies Meta<typeof ContactDetails>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Default empty state using consolidated utility\nconst emptyData: ContactDetailsData = createEmptyFormData<ContactDetailsData>(['email', 'phoneNumber', 'mobileNumber']);\n\n// Sample complete data using consolidated utility\nconst sampleData: ContactDetailsData = createSampleFormData<ContactDetailsData>({\n  email: 'juan.delacruz@gmail.com',\n  phoneNumber: '(02) 123-4567',\n  mobileNumber: '+63 912 345 6789',\n});\n\n// Consolidated validation rules\nconst contactValidationRules = combineValidators(\n  createEmailValidator('email'),\n  createPhoneValidator('phoneNumber'),\n  createPhoneValidator('mobileNumber')\n);\n\n// Basic Examples\nexport const Default: Story = {\n  args: {\n    value: emptyData,\n    onChange: () => {},\n    errors: {},\n  },\n};\n\nexport const WithSampleData: Story = {\n  args: {\n    value: sampleData,\n    onChange: () => {},\n    errors: {},\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Form filled with sample contact information.',\n      },\n    },\n  },\n};\n\n// Validation Examples\nexport const WithValidationErrors: Story = {\n  args: {\n    value: {\n      email: 'invalid-email',\n      phoneNumber: '123',\n      mobileNumber: 'not-a-number',\n    },\n    onChange: () => {},\n    errors: {\n      email: 'Please enter a valid email address',\n      phoneNumber: 'Phone number must be at least 7 digits',\n      mobileNumber: 'Please enter a valid mobile number',\n    },\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Form showing validation errors for invalid contact information.',\n      },\n    },\n  },\n};\n\nexport const RequiredFieldErrors: Story = {\n  args: {\n    value: emptyData,\n    onChange: () => {},\n    errors: {\n      email: 'Email address is required',\n      mobileNumber: 'Mobile number is required',\n    },\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Form showing required field validation errors.',\n      },\n    },\n  },\n};\n\n// Partial Data Examples\nexport const EmailOnly: Story = {\n  args: {\n    value: {\n      email: 'maria.santos@yahoo.com',\n      phoneNumber: '',\n      mobileNumber: '',\n    },\n    onChange: () => {},\n    errors: {},\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Form with only email address filled.',\n      },\n    },\n  },\n};\n\nexport const MobileOnly: Story = {\n  args: {\n    value: {\n      email: '',\n      phoneNumber: '',\n      mobileNumber: '+63 917 123 4567',\n    },\n    onChange: () => {},\n    errors: {},\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Form with only mobile number filled.',\n      },\n    },\n  },\n};\n\nexport const PhoneAndMobile: Story = {\n  args: {\n    value: {\n      email: '',\n      phoneNumber: '(032) 234-5678',\n      mobileNumber: '+63 918 765 4321',\n    },\n    onChange: () => {},\n    errors: {},\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Form with phone and mobile numbers filled.',\n      },\n    },\n  },\n};\n\n// Different Format Examples\nexport const PhilippineFormats: Story = {\n  args: {\n    value: {\n      email: 'pedro.garcia@gmail.com',\n      phoneNumber: '(02) 987-6543',\n      mobileNumber: '0917 123 4567',\n    },\n    onChange: () => {},\n    errors: {},\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Contact details using common Philippine number formats.',\n      },\n    },\n  },\n};\n\nexport const InternationalFormats: Story = {\n  args: {\n    value: {\n      email: 'anna.reyes@outlook.com',\n      phoneNumber: '+63 2 345 6789',\n      mobileNumber: '+63 920 987 6543',\n    },\n    onChange: () => {},\n    errors: {},\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Contact details using international number formats.',\n      },\n    },\n  },\n};\n\nexport const BusinessContacts: Story = {\n  args: {\n    value: {\n      email: 'info@businessname.com.ph',\n      phoneNumber: '(02) 555-0123',\n      mobileNumber: '+63 999 888 7777',\n    },\n    onChange: () => {},\n    errors: {},\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Business contact information example.',\n      },\n    },\n  },\n};\n\n// Interactive Examples using consolidated utility\nexport const Interactive: Story = {\n  render: () => (\n    <InteractiveStory\n      initialValue={emptyData}\n      sampleData={sampleData}\n      validationRules={contactValidationRules}\n    >\n      {(storyState) => (\n        <div className=\"space-y-6\">\n          <ContactDetails \n            value={storyState.value} \n            onChange={storyState.onChange} \n            errors={storyState.errors} \n          />\n\n          <StoryControlButtons \n            storyState={storyState} \n            sampleData={sampleData} \n          />\n\n          <StoryValueDisplay \n            value={storyState.value} \n            errors={storyState.errors} \n          />\n        </div>\n      )}\n    </InteractiveStory>\n  ),\n  parameters: createStoryParameters(\n    'Interactive Contact Details',\n    'Interactive form with real-time validation for contact details using consolidated utilities.'\n  ),\n};\n\n// Progressive Filling Example using consolidated utility\nexport const ProgressiveFilling: Story = {\n  render: () => {\n    const steps = [\n      { \n        label: 'Empty Form', \n        data: { ...emptyData },\n        description: 'Starting with empty form'\n      },\n      { \n        label: 'Add Email', \n        data: { ...emptyData, email: 'user@example.com' },\n        description: 'Email address added'\n      },\n      { \n        label: 'Add Phone', \n        data: { ...emptyData, email: 'user@example.com', phoneNumber: '(02) 123-4567' },\n        description: 'Phone number added'\n      },\n      {\n        label: 'Add Mobile',\n        data: {\n          ...emptyData,\n          email: 'user@example.com',\n          phoneNumber: '(02) 123-4567',\n          mobileNumber: '+63 912 345 6789',\n        },\n        description: 'All contact details completed'\n      },\n    ];\n\n    return (\n      <ProgressiveStory steps={steps}>\n        {({ currentData, currentStep, goToStep }) => (\n          <div className=\"space-y-6\">\n            <ContactDetails value={currentData} onChange={() => {}} errors={{}} />\n            <ProgressiveStoryControls \n              steps={steps} \n              currentStep={currentStep} \n              onStepChange={goToStep} \n            />\n          </div>\n        )}\n      </ProgressiveStory>\n    );\n  },\n  parameters: createStoryParameters(\n    'Progressive Contact Entry',\n    'Demonstration of progressive contact information entry using consolidated utilities.'\n  ),\n};\n\n// Validation Patterns Example\nexport const ValidationPatterns: Story = {\n  render: () => {\n    const [currentExample, setCurrentExample] = useState(0);\n\n    const examples = [\n      {\n        label: 'Valid Formats',\n        data: {\n          email: 'user@domain.com',\n          phoneNumber: '(02) 123-4567',\n          mobileNumber: '+63 912 345 6789',\n        },\n        errors: {},\n      },\n      {\n        label: 'Invalid Email',\n        data: {\n          email: 'not-an-email',\n          phoneNumber: '(02) 123-4567',\n          mobileNumber: '+63 912 345 6789',\n        },\n        errors: {\n          email: 'Invalid email format',\n        },\n      },\n      {\n        label: 'Short Phone',\n        data: {\n          email: 'user@domain.com',\n          phoneNumber: '123',\n          mobileNumber: '+63 912 345 6789',\n        },\n        errors: {\n          phoneNumber: 'Phone number too short',\n        },\n      },\n      {\n        label: 'Invalid Mobile',\n        data: {\n          email: 'user@domain.com',\n          phoneNumber: '(02) 123-4567',\n          mobileNumber: 'abc-def-ghij',\n        },\n        errors: {\n          mobileNumber: 'Mobile number contains invalid characters',\n        },\n      },\n    ];\n\n    const currentData = examples[currentExample];\n\n    return (\n      <div className=\"space-y-6\">\n        <ContactDetails value={currentData.data} onChange={() => {}} errors={currentData.errors} />\n\n        <div className=\"space-y-4\">\n          <div className=\"flex flex-wrap gap-2\">\n            {examples.map((example, index) => (\n              <button\n                key={index}\n                onClick={() => setCurrentExample(index)}\n                className={`rounded px-3 py-1 text-sm ${\n                  currentExample === index\n                    ? 'bg-blue-600 text-white'\n                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n                }`}\n              >\n                {example.label}\n              </button>\n            ))}\n          </div>\n\n          <div className=\"text-sm text-gray-600\">Current: {currentData.label}</div>\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Examples of different validation patterns and error states.',\n      },\n    },\n  },\n};\n\n// Layout Examples\nexport const CompactView: Story = {\n  args: {\n    value: sampleData,\n    onChange: () => {},\n    errors: {},\n    className: 'max-w-2xl',\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Contact form in a compact container showing responsive behavior.',\n      },\n    },\n  },\n};\n\nexport const MobileView: Story = {\n  args: {\n    value: sampleData,\n    onChange: () => {},\n    errors: {},\n    className: 'max-w-sm',\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Contact form optimized for mobile viewing (single column).',\n      },\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/Form/Resident/ContactInformation/FormField/HouseholdInformation.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createEmptyFormData' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createSampleFormData' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":23},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":354,"column":53,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[8942,8944],"text":" &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[8942,8944],"text":" &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[8942,8944],"text":" &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[8942,8944],"text":" &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":354,"column":66,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[8956,8978],"text":"&quot;\n                    "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[8956,8978],"text":"&ldquo;\n                    "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[8956,8978],"text":"&#34;\n                    "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[8956,8978],"text":"&rdquo;\n                    "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":463,"column":47,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12148,12150],"text":" &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12148,12150],"text":" &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12148,12150],"text":" &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12148,12150],"text":" &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":463,"column":72,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12174,12190],"text":"&quot;\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12174,12190],"text":"&ldquo;\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12174,12190],"text":"&#34;\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12174,12190],"text":"&rdquo;\n              "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { useState } from 'react';\nimport {\n  HouseholdInformation,\n  HouseholdInformationData,\n} from '@/components/organisms/HouseholdInformation';\nimport { \n  InteractiveStory, \n  StoryControlButtons,\n  StoryValueDisplay,\n  createStoryParameters,\n  createEmptyFormData,\n  createSampleFormData\n} from '@/lib/storybookUtils';\n\nconst meta = {\n  title: 'Organisms/Form/Resident/ContactInformation/FormField/HouseholdInformation',\n  component: HouseholdInformation,\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component:\n          'A form section for selecting household information. Features searchable household selection with support for searching by code, head name, or address.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    value: {\n      control: { type: 'object' },\n      description: 'Current household information values',\n    },\n    onChange: {\n      action: 'changed',\n      description: 'Callback when field value changes',\n    },\n    errors: {\n      control: { type: 'object' },\n      description: 'Error messages for household fields',\n    },\n    onHouseholdSearch: {\n      action: 'searched',\n      description: 'Callback when user searches for households',\n    },\n    householdOptions: {\n      control: { type: 'object' },\n      description: 'Available household options',\n    },\n    householdLoading: {\n      control: { type: 'boolean' },\n      description: 'Loading state for household search',\n    },\n    className: {\n      control: { type: 'text' },\n      description: 'Additional CSS classes',\n    },\n  },\n} satisfies Meta<typeof HouseholdInformation>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Sample household options\nconst sampleHouseholdOptions = [\n  {\n    value: 'HH-001',\n    label: 'HH-001 - Juan Dela Cruz (123 Main St, Brgy. Central)',\n  },\n  {\n    value: 'HH-002',\n    label: 'HH-002 - Maria Santos (456 Rizal Ave, Brgy. Poblacion)',\n  },\n  {\n    value: 'HH-003',\n    label: 'HH-003 - Pedro Garcia (789 Luna St, Brgy. San Jose)',\n  },\n  {\n    value: 'HH-004',\n    label: 'HH-004 - Ana Reyes (321 Bonifacio St, Brgy. Central)',\n  },\n  {\n    value: 'HH-005',\n    label: 'HH-005 - Carlos Mendoza (654 Mabini Ave, Brgy. San Antonio)',\n  },\n];\n\n// Default empty state\nconst emptyData: HouseholdInformationData = {\n  householdCode: '',\n};\n\n// Basic Examples\nexport const Default: Story = {\n  args: {\n    value: emptyData,\n    onChange: () => {},\n    errors: {},\n    householdOptions: sampleHouseholdOptions,\n    householdLoading: false,\n  },\n};\n\nexport const WithSelectedHousehold: Story = {\n  args: {\n    value: {\n      householdCode: 'HH-001',\n    },\n    onChange: () => {},\n    errors: {},\n    householdOptions: sampleHouseholdOptions,\n    householdLoading: false,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Form with a household already selected.',\n      },\n    },\n  },\n};\n\n// Error States\nexport const WithValidationError: Story = {\n  args: {\n    value: emptyData,\n    onChange: () => {},\n    errors: {\n      householdCode: 'Please select a household',\n    },\n    householdOptions: sampleHouseholdOptions,\n    householdLoading: false,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Form showing validation error for required household selection.',\n      },\n    },\n  },\n};\n\nexport const InvalidHouseholdError: Story = {\n  args: {\n    value: {\n      householdCode: 'HH-999',\n    },\n    onChange: () => {},\n    errors: {\n      householdCode: 'Selected household is no longer available',\n    },\n    householdOptions: sampleHouseholdOptions,\n    householdLoading: false,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Form showing error for invalid household selection.',\n      },\n    },\n  },\n};\n\n// Loading States\nexport const LoadingHouseholds: Story = {\n  args: {\n    value: emptyData,\n    onChange: () => {},\n    errors: {},\n    householdOptions: [],\n    householdLoading: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Form showing loading state while searching for households.',\n      },\n    },\n  },\n};\n\nexport const NoHouseholdsFound: Story = {\n  args: {\n    value: emptyData,\n    onChange: () => {},\n    errors: {},\n    householdOptions: [],\n    householdLoading: false,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Form when no households are found or available.',\n      },\n    },\n  },\n};\n\n// Different Household Types\nexport const DifferentHouseholdTypes: Story = {\n  args: {\n    value: emptyData,\n    onChange: () => {},\n    errors: {},\n    householdOptions: [\n      {\n        value: 'HH-001',\n        label: 'HH-001 - Juan Dela Cruz (Family - 4 members)',\n      },\n      {\n        value: 'HH-002',\n        label: 'HH-002 - Maria Santos (Single Parent - 2 members)',\n      },\n      {\n        value: 'HH-003',\n        label: 'HH-003 - Pedro Garcia (Extended Family - 7 members)',\n      },\n      {\n        value: 'HH-004',\n        label: 'HH-004 - Ana Reyes (Single - 1 member)',\n      },\n      {\n        value: 'HH-005',\n        label: 'HH-005 - Carlos Mendoza (Couple - 2 members)',\n      },\n    ],\n    householdLoading: false,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Households showing different family compositions and member counts.',\n      },\n    },\n  },\n};\n\nexport const HouseholdsWithAddresses: Story = {\n  args: {\n    value: emptyData,\n    onChange: () => {},\n    errors: {},\n    householdOptions: [\n      {\n        value: 'HH-101',\n        label: 'HH-101 - Rodriguez Family (456 Sampaguita St, Brgy. Maligaya, Quezon City)',\n      },\n      {\n        value: 'HH-102',\n        label: 'HH-102 - Villanueva Household (789 Orchid Ave, Brgy. Bagong Silang, Caloocan)',\n      },\n      {\n        value: 'HH-103',\n        label: 'HH-103 - Fernandez Residence (321 Rose Lane, Brgy. San Isidro, Makati)',\n      },\n      {\n        value: 'HH-104',\n        label: 'HH-104 - Torres Home (654 Jasmine St, Brgy. Bagumbayan, Taguig)',\n      },\n    ],\n    householdLoading: false,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Households with complete address information.',\n      },\n    },\n  },\n};\n\n// Interactive Examples using consolidated utility\nconst householdValidation = (data: HouseholdInformationData) => {\n  const errors: Record<string, string> = {};\n  if (!data.householdCode) {\n    errors.householdCode = 'Please select a household';\n  }\n  return errors;\n};\n\nexport const Interactive: Story = {\n  render: () => {\n    const [searchTerm, setSearchTerm] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n\n    // Filter households based on search term\n    const filteredHouseholds = sampleHouseholdOptions.filter(household =>\n      household.label.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    const handleSearch = (query: string) => {\n      setSearchTerm(query);\n      setIsLoading(true);\n\n      // Simulate API call delay\n      setTimeout(() => {\n        setIsLoading(false);\n      }, 500);\n    };\n\n    return (\n      <InteractiveStory\n        initialValue={emptyData}\n        sampleData={sampleData}\n        validationRules={householdValidation}\n      >\n        {(storyState) => {\n          const handleChange = (newValue: HouseholdInformationData) => {\n            storyState.onChange(newValue);\n            // Clear search when selecting\n            if (newValue.householdCode) {\n              setSearchTerm('');\n            }\n          };\n\n          const customReset = () => {\n            storyState.reset();\n            setSearchTerm('');\n          };\n\n          return (\n            <div className=\"space-y-6\">\n              <HouseholdInformation\n                value={storyState.value}\n                onChange={handleChange}\n                errors={storyState.errors}\n                onHouseholdSearch={handleSearch}\n                householdOptions={filteredHouseholds}\n                householdLoading={isLoading}\n              />\n\n              <StoryControlButtons \n                storyState={storyState}\n                sampleData={sampleData}\n                controls={{\n                  customButtons: [\n                    {\n                      label: 'Reset + Clear Search',\n                      onClick: customReset,\n                      className: 'rounded-md bg-purple-600 px-4 py-2 text-white hover:bg-purple-700'\n                    }\n                  ]\n                }}\n              />\n\n              <div className=\"space-y-4\">\n                <div className=\"rounded bg-gray-100 p-4\">\n                  <h4 className=\"font-medium\">Current State:</h4>\n                  <div className=\"mt-2 space-y-1 text-sm\">\n                    <p>\n                      <strong>Selected:</strong> {storyState.value.householdCode || 'None'}\n                    </p>\n                    <p>\n                      <strong>Search Term:</strong> \"{searchTerm}\"\n                    </p>\n                    <p>\n                      <strong>Available Options:</strong> {filteredHouseholds.length}\n                    </p>\n                    <p>\n                      <strong>Loading:</strong> {isLoading ? 'Yes' : 'No'}\n                    </p>\n                  </div>\n                </div>\n\n                <StoryValueDisplay \n                  value={storyState.value} \n                  errors={storyState.errors} \n                />\n              </div>\n            </div>\n          );\n        }}\n      </InteractiveStory>\n    );\n  },\n  parameters: createStoryParameters(\n    'Interactive Household Selection',\n    'Interactive household selection with search functionality and validation using consolidated utilities.'\n  ),\n};\n\n// Search Examples\nexport const SearchScenarios: Story = {\n  render: () => {\n    const [currentScenario, setCurrentScenario] = useState(0);\n\n    const scenarios = [\n      {\n        label: 'All Households',\n        searchTerm: '',\n        options: sampleHouseholdOptions,\n        loading: false,\n      },\n      {\n        label: 'Search by Code',\n        searchTerm: 'HH-001',\n        options: sampleHouseholdOptions.filter(h => h.label.includes('HH-001')),\n        loading: false,\n      },\n      {\n        label: 'Search by Name',\n        searchTerm: 'Maria',\n        options: sampleHouseholdOptions.filter(h => h.label.toLowerCase().includes('maria')),\n        loading: false,\n      },\n      {\n        label: 'Search by Address',\n        searchTerm: 'Rizal',\n        options: sampleHouseholdOptions.filter(h => h.label.toLowerCase().includes('rizal')),\n        loading: false,\n      },\n      {\n        label: 'No Results',\n        searchTerm: 'nonexistent',\n        options: [],\n        loading: false,\n      },\n      {\n        label: 'Loading...',\n        searchTerm: 'searching',\n        options: [],\n        loading: true,\n      },\n    ];\n\n    const currentData = scenarios[currentScenario];\n\n    return (\n      <div className=\"space-y-6\">\n        <HouseholdInformation\n          value={emptyData}\n          onChange={() => {}}\n          errors={{}}\n          onHouseholdSearch={() => {}}\n          householdOptions={currentData.options}\n          householdLoading={currentData.loading}\n        />\n\n        <div className=\"space-y-4\">\n          <div className=\"flex flex-wrap gap-2\">\n            {scenarios.map((scenario, index) => (\n              <button\n                key={index}\n                onClick={() => setCurrentScenario(index)}\n                className={`rounded px-3 py-1 text-sm ${\n                  currentScenario === index\n                    ? 'bg-blue-600 text-white'\n                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n                }`}\n              >\n                {scenario.label}\n              </button>\n            ))}\n          </div>\n\n          <div className=\"rounded bg-gray-100 p-4\">\n            <h4 className=\"font-medium\">Current Scenario:</h4>\n            <div className=\"mt-2 space-y-1 text-sm\">\n              <p>\n                <strong>Label:</strong> {currentData.label}\n              </p>\n              <p>\n                <strong>Search Term:</strong> \"{currentData.searchTerm}\"\n              </p>\n              <p>\n                <strong>Results:</strong> {currentData.options.length} households\n              </p>\n              <p>\n                <strong>Loading:</strong> {currentData.loading ? 'Yes' : 'No'}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Different search scenarios and result states.',\n      },\n    },\n  },\n};\n\n// Large Dataset Example\nexport const LargeDataset: Story = {\n  args: {\n    value: emptyData,\n    onChange: () => {},\n    errors: {},\n    householdOptions: Array.from({ length: 20 }, (_, i) => ({\n      value: `HH-${String(i + 1).padStart(3, '0')}`,\n      label: `HH-${String(i + 1).padStart(3, '0')} - Family ${i + 1} (${Math.floor(Math.random() * 8) + 1} members)`,\n    })),\n    householdLoading: false,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Household selection with a larger dataset to test performance.',\n      },\n    },\n  },\n};\n\n// Quick Selection Examples\nexport const QuickSelectionExamples: Story = {\n  render: () => {\n    const [value, setValue] = useState<HouseholdInformationData>(emptyData);\n\n    const quickOptions = [\n      { code: 'HH-001', label: 'Dela Cruz Family' },\n      { code: 'HH-002', label: 'Santos Household' },\n      { code: 'HH-003', label: 'Garcia Residence' },\n      { code: 'HH-004', label: 'Reyes Home' },\n    ];\n\n    return (\n      <div className=\"space-y-6\">\n        <HouseholdInformation\n          value={value}\n          onChange={setValue}\n          errors={{}}\n          householdOptions={sampleHouseholdOptions}\n          householdLoading={false}\n        />\n\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium\">Quick Selection:</h4>\n          <div className=\"flex flex-wrap gap-2\">\n            {quickOptions.map(option => (\n              <button\n                key={option.code}\n                onClick={() => setValue({ householdCode: option.code })}\n                className=\"rounded bg-blue-100 px-3 py-1 text-sm text-blue-800 hover:bg-blue-200\"\n              >\n                {option.label}\n              </button>\n            ))}\n            <button\n              onClick={() => setValue(emptyData)}\n              className=\"rounded bg-gray-100 px-3 py-1 text-sm text-gray-800 hover:bg-gray-200\"\n            >\n              Clear\n            </button>\n          </div>\n\n          <div className=\"rounded bg-gray-100 p-4\">\n            <h4 className=\"font-medium\">Selected Household:</h4>\n            <p className=\"mt-2 text-sm\">{value.householdCode || 'None selected'}</p>\n          </div>\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Quick selection buttons for common household choices.',\n      },\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/Form/Resident/MigrationInformation/MigrationInformation.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { useState } from 'react';\nimport {\n  MigrationInformation,\n  MigrationInformationData,\n} from '@/components/organisms/MigrationInformation';\n\nconst meta = {\n  title: 'Organisms/Form/Resident/MigrationInformation',\n  component: MigrationInformation,\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component:\n          'A form section for collecting internal migration information. Features a searchable barangay selector that cascades geographic codes and fields for migration timeline and status.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    value: {\n      control: { type: 'object' },\n      description: 'Current form values for migration information',\n    },\n    onChange: {\n      action: 'changed',\n      description: 'Callback when any field value changes',\n    },\n    errors: {\n      control: { type: 'object' },\n      description: 'Error messages for each field',\n    },\n    className: {\n      control: { type: 'text' },\n      description: 'Additional CSS classes',\n    },\n  },\n} satisfies Meta<typeof MigrationInformation>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Default empty state\nconst emptyData: MigrationInformationData = {\n  previous_barangay_code: '',\n  previous_city_municipality_code: '',\n  previous_province_code: '',\n  previous_region_code: '',\n  length_of_stay_previous_months: undefined,\n  reason_for_leaving: '',\n  date_of_transfer: '',\n  reason_for_transferring: '',\n  duration_of_stay_current_months: undefined,\n  is_intending_to_return: null,\n};\n\n// Sample migration data\nconst completeMigrationData: MigrationInformationData = {\n  previous_barangay_code: '042114001',\n  previous_city_municipality_code: '042114000',\n  previous_province_code: '042100000',\n  previous_region_code: '04',\n  length_of_stay_previous_months: 24,\n  reason_for_leaving: 'Employment opportunity',\n  date_of_transfer: '2022-01-15',\n  reason_for_transferring: 'Job relocation to current city',\n  duration_of_stay_current_months: 18,\n  is_intending_to_return: false,\n};\n\nexport const Default: Story = {\n  args: {\n    value: emptyData,\n    onChange: () => {},\n    errors: {},\n  },\n};\n\nexport const CompleteMigration: Story = {\n  args: {\n    value: completeMigrationData,\n    onChange: () => {},\n    errors: {},\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/Form/Resident/PersonalInformation/FormField/BasicInformation.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/Form/Resident/PersonalInformation/FormField/BirthInformation.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/Form/Resident/PersonalInformation/FormField/PhilSysCardField.stories.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":156,"column":29,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3602,3618],"text":"Current value: &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3602,3618],"text":"Current value: &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3602,3618],"text":"Current value: &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3602,3618],"text":"Current value: &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":156,"column":37,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3625,3626],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3625,3626],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3625,3626],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3625,3626],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { useState } from 'react';\nimport { PhilSysCardField } from '@/components/organisms/PhilSysCardField';\n\nconst meta = {\n  title: 'Organisms/Form/Resident/PersonalInformation/FormField/PhilSysCardField',\n  component: PhilSysCardField,\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component:\n          'A specialized input field for PhilSys (Philippine Identification System) card numbers. Provides consistent formatting and validation for national ID numbers.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    value: {\n      control: { type: 'text' },\n      description: 'Current PhilSys card number value',\n    },\n    onChange: {\n      action: 'changed',\n      description: 'Callback when the value changes',\n    },\n    error: {\n      control: { type: 'text' },\n      description: 'Error message to display',\n    },\n    required: {\n      control: { type: 'boolean' },\n      description: 'Whether the field is required',\n    },\n    className: {\n      control: { type: 'text' },\n      description: 'Additional CSS classes',\n    },\n  },\n} satisfies Meta<typeof PhilSysCardField>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Basic Examples\nexport const Default: Story = {\n  args: {\n    value: '',\n    onChange: () => {},\n    required: false,\n  },\n};\n\nexport const Required: Story = {\n  args: {\n    value: '',\n    onChange: () => {},\n    required: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Required PhilSys card field with asterisk indicator.',\n      },\n    },\n  },\n};\n\nexport const WithValue: Story = {\n  args: {\n    value: '1234-5678-9012',\n    onChange: () => {},\n    required: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Field with a sample PhilSys card number.',\n      },\n    },\n  },\n};\n\nexport const WithError: Story = {\n  args: {\n    value: '123-456',\n    onChange: () => {},\n    error: 'PhilSys card number must be in the format XXXX-XXXX-XXXX',\n    required: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Field showing validation error for incorrect format.',\n      },\n    },\n  },\n};\n\n// Validation Examples\nexport const InvalidFormat: Story = {\n  args: {\n    value: 'invalid-format',\n    onChange: () => {},\n    error: 'Please enter a valid PhilSys card number',\n    required: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Field with invalid format and error message.',\n      },\n    },\n  },\n};\n\nexport const Empty: Story = {\n  args: {\n    value: '',\n    onChange: () => {},\n    error: 'PhilSys card number is required',\n    required: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Required field that is empty showing validation error.',\n      },\n    },\n  },\n};\n\n// Interactive Examples\nexport const Interactive: Story = {\n  render: () => {\n    const [value, setValue] = useState('');\n    const [error, setError] = useState('');\n\n    const handleChange = (newValue: string) => {\n      setValue(newValue);\n\n      // Simple validation\n      if (newValue && !/^\\d{4}-\\d{4}-\\d{4}$/.test(newValue)) {\n        setError('PhilSys card number must be in the format XXXX-XXXX-XXXX');\n      } else if (!newValue) {\n        setError('PhilSys card number is required');\n      } else {\n        setError('');\n      }\n    };\n\n    return (\n      <div className=\"space-y-4\">\n        <PhilSysCardField value={value} onChange={handleChange} error={error} required={true} />\n        <div className=\"text-sm text-gray-600\">\n          <p>Current value: \"{value}\"</p>\n          <p>Valid format: XXXX-XXXX-XXXX (e.g., 1234-5678-9012)</p>\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Interactive field with real-time validation for PhilSys card format.',\n      },\n    },\n  },\n};\n\n// Progressive Filling Example\nexport const ProgressiveFilling: Story = {\n  render: () => {\n    const [value, setValue] = useState('');\n\n    const examples = [\n      { label: 'Clear', value: '' },\n      { label: 'Partial (4 digits)', value: '1234' },\n      { label: 'Partial (8 digits)', value: '1234-5678' },\n      { label: 'Complete', value: '1234-5678-9012' },\n    ];\n\n    return (\n      <div className=\"space-y-4\">\n        <PhilSysCardField value={value} onChange={setValue} required={true} />\n\n        <div className=\"space-x-2\">\n          <span className=\"text-sm font-medium\">Quick fill:</span>\n          {examples.map(example => (\n            <button\n              key={example.label}\n              onClick={() => setValue(example.value)}\n              className=\"rounded bg-blue-100 px-2 py-1 text-xs text-blue-800 hover:bg-blue-200\"\n            >\n              {example.label}\n            </button>\n          ))}\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Example showing progressive filling of PhilSys card number.',\n      },\n    },\n  },\n};\n\n// Form Context Example\nexport const InFormContext: Story = {\n  render: () => {\n    const [formData, setFormData] = useState({\n      philsysCard: '',\n      firstName: '',\n      lastName: '',\n    });\n\n    const [errors, setErrors] = useState<Record<string, string>>({});\n\n    const handlePhilSysChange = (value: string) => {\n      setFormData(prev => ({ ...prev, philsysCard: value }));\n\n      // Clear error when user starts typing\n      if (errors.philsysCard) {\n        setErrors(prev => ({ ...prev, philsysCard: '' }));\n      }\n    };\n\n    const validateForm = () => {\n      const newErrors: Record<string, string> = {};\n\n      if (!formData.philsysCard) {\n        newErrors.philsysCard = 'PhilSys card number is required';\n      } else if (!/^\\d{4}-\\d{4}-\\d{4}$/.test(formData.philsysCard)) {\n        newErrors.philsysCard = 'Invalid PhilSys card format';\n      }\n\n      if (!formData.firstName) {\n        newErrors.firstName = 'First name is required';\n      }\n\n      if (!formData.lastName) {\n        newErrors.lastName = 'Last name is required';\n      }\n\n      setErrors(newErrors);\n      return Object.keys(newErrors).length === 0;\n    };\n\n    return (\n      <div className=\"max-w-md space-y-6\">\n        <div className=\"space-y-4\">\n          <PhilSysCardField\n            value={formData.philsysCard}\n            onChange={handlePhilSysChange}\n            error={errors.philsysCard}\n            required={true}\n          />\n\n          <div className=\"space-y-2\">\n            <label className=\"block text-sm font-medium\">First Name *</label>\n            <input\n              type=\"text\"\n              value={formData.firstName}\n              onChange={e => setFormData(prev => ({ ...prev, firstName: e.target.value }))}\n              className=\"w-full rounded border px-3 py-2\"\n              placeholder=\"Enter first name\"\n            />\n            {errors.firstName && <p className=\"text-sm text-red-600\">{errors.firstName}</p>}\n          </div>\n\n          <div className=\"space-y-2\">\n            <label className=\"block text-sm font-medium\">Last Name *</label>\n            <input\n              type=\"text\"\n              value={formData.lastName}\n              onChange={e => setFormData(prev => ({ ...prev, lastName: e.target.value }))}\n              className=\"w-full rounded border px-3 py-2\"\n              placeholder=\"Enter last name\"\n            />\n            {errors.lastName && <p className=\"text-sm text-red-600\">{errors.lastName}</p>}\n          </div>\n        </div>\n\n        <button\n          onClick={validateForm}\n          className=\"w-full rounded bg-blue-600 px-4 py-2 text-white hover:bg-blue-700\"\n        >\n          Validate Form\n        </button>\n\n        {Object.keys(errors).length === 0 && formData.philsysCard && (\n          <div className=\"rounded bg-green-100 p-3 text-green-800\">✓ All fields are valid!</div>\n        )}\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'PhilSys card field used within a larger form context with validation.',\n      },\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/Form/Resident/PersonalInformation/PersonalInformation.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PersonalInformationFormProps' is defined but never used.","line":4,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport {\n  PersonalInformationForm,\n  type PersonalInformationFormProps,\n} from '@/components/organisms/PersonalInformation';\n\nconst meta: Meta<typeof PersonalInformationForm> = {\n  title: 'Organisms/Form/Resident/PersonalInformation',\n  component: PersonalInformationForm,\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component: `\nPersonalInformationForm is a comprehensive form organism that handles all personal information, \nbirth details, education, and employment information for residents.\n\n## Features\n- **Personal Details**: PhilSys card number and basic personal info\n- **Birth Information**: Birth date and place with PSGC integration\n- **Education**: Educational attainment and graduation status\n- **Employment**: Employment status and occupation with PSOC integration\n- **Search Integration**: Built-in search for birth places and occupations\n- **Validation**: Comprehensive error handling and field validation\n        `,\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    formData: {\n      description: 'Form data object containing all field values',\n    },\n    onChange: {\n      description: 'Callback function called when form fields change',\n    },\n    errors: {\n      description: 'Object containing validation errors keyed by field name',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Sample form data\nconst sampleFormData = {\n  philsysCardNumber: '',\n  firstName: '',\n  middleName: '',\n  lastName: '',\n  extensionName: '',\n  sex: '',\n  civilStatus: '',\n  citizenship: '',\n  birthdate: '',\n  birthPlaceName: '',\n  birthPlaceCode: '',\n  educationAttainment: '',\n  isGraduate: false,\n  employmentStatus: '',\n  psocCode: '',\n  occupationTitle: '',\n};\n\nconst sampleErrors = {};\n\nexport const Default: Story = {\n  args: {\n    formData: sampleFormData,\n    onChange: (field: string, value: string | number | boolean | null) => {\n      console.log('Field changed:', field, value);\n    },\n    errors: sampleErrors,\n  },\n};\n\nexport const WithData: Story = {\n  args: {\n    formData: {\n      ...sampleFormData,\n      philsysCardNumber: '1234-5678-9012',\n      firstName: 'Juan',\n      middleName: 'Santos',\n      lastName: 'Dela Cruz',\n      sex: 'male',\n      civilStatus: 'single',\n      citizenship: 'filipino',\n      birthdate: '1990-01-15',\n      birthPlaceName: 'Manila City, Metro Manila, NCR',\n      birthPlaceCode: '1380000000',\n      educationAttainment: 'college_graduate',\n      isGraduate: true,\n      employmentStatus: 'employed',\n      occupationTitle: 'Software Developer',\n    },\n    onChange: (field: string, value: string | number | boolean | null) => {\n      console.log('Field changed:', field, value);\n    },\n    errors: sampleErrors,\n  },\n};\n\nexport const WithErrors: Story = {\n  args: {\n    formData: sampleFormData,\n    onChange: (field: string, value: string | number | boolean | null) => {\n      console.log('Field changed:', field, value);\n    },\n    errors: {\n      philsysCardNumber: 'PhilSys card number is required',\n      birthdate: 'Birth date is required',\n      birthPlaceName: 'Birth place is required',\n      educationAttainment: 'Education level is required',\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/Form/Resident/PhysicalPersonalDetails/FormField/MotherMaidenName.stories.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":366,"column":52,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9925,9951],"text":"Full Mother&apos;s Maiden Name:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9925,9951],"text":"Full Mother&lsquo;s Maiden Name:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9925,9951],"text":"Full Mother&#39;s Maiden Name:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9925,9951],"text":"Full Mother&rsquo;s Maiden Name:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":461,"column":47,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[12820,12957],"text":" Mother&apos;s maiden name is commonly used for identification and\n              verification in Philippine government documents.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[12820,12957],"text":" Mother&lsquo;s maiden name is commonly used for identification and\n              verification in Philippine government documents.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[12820,12957],"text":" Mother&#39;s maiden name is commonly used for identification and\n              verification in Philippine government documents.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[12820,12957],"text":" Mother&rsquo;s maiden name is commonly used for identification and\n              verification in Philippine government documents.\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { useState } from 'react';\nimport { MotherMaidenName, MotherMaidenNameData } from '@/components/organisms/MotherMaidenName';\n\nconst meta = {\n  title: 'Organisms/Form/Resident/PhysicalPersonalDetails/FormField/MotherMaidenName',\n  component: MotherMaidenName,\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component:\n          \"A form section for collecting mother's maiden name information. Used for identification and verification purposes in Filipino government forms and documents.\",\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    value: {\n      control: { type: 'object' },\n      description: \"Current form values for mother's maiden name\",\n    },\n    onChange: {\n      action: 'changed',\n      description: 'Callback when any field value changes',\n    },\n    errors: {\n      control: { type: 'object' },\n      description: 'Error messages for each field',\n    },\n    className: {\n      control: { type: 'text' },\n      description: 'Additional CSS classes',\n    },\n  },\n} satisfies Meta<typeof MotherMaidenName>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Default empty state\nconst emptyData: MotherMaidenNameData = {\n  motherMaidenFirstName: '',\n  motherMaidenMiddleName: '',\n  motherMaidenLastName: '',\n};\n\n// Sample complete data\nconst sampleData: MotherMaidenNameData = {\n  motherMaidenFirstName: 'Maria',\n  motherMaidenMiddleName: 'Santos',\n  motherMaidenLastName: 'Reyes',\n};\n\n// Different name variations\nconst shortNameData: MotherMaidenNameData = {\n  motherMaidenFirstName: 'Ana',\n  motherMaidenMiddleName: '',\n  motherMaidenLastName: 'Cruz',\n};\n\nconst longNameData: MotherMaidenNameData = {\n  motherMaidenFirstName: 'Maria Esperanza',\n  motherMaidenMiddleName: 'De Los Santos',\n  motherMaidenLastName: 'Villanueva-Garcia',\n};\n\n// Basic Examples\nexport const Default: Story = {\n  args: {\n    value: emptyData,\n    onChange: () => {},\n    errors: {},\n  },\n};\n\nexport const WithSampleData: Story = {\n  args: {\n    value: sampleData,\n    onChange: () => {},\n    errors: {},\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: \"Form filled with sample mother's maiden name information.\",\n      },\n    },\n  },\n};\n\nexport const ShortNames: Story = {\n  args: {\n    value: shortNameData,\n    onChange: () => {},\n    errors: {},\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Form with shorter names and no middle name.',\n      },\n    },\n  },\n};\n\nexport const LongNames: Story = {\n  args: {\n    value: longNameData,\n    onChange: () => {},\n    errors: {},\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Form with longer names including compound names and multiple parts.',\n      },\n    },\n  },\n};\n\n// Validation Examples\nexport const WithValidationErrors: Story = {\n  args: {\n    value: {\n      motherMaidenFirstName: '',\n      motherMaidenMiddleName: 'Santos',\n      motherMaidenLastName: '',\n    },\n    onChange: () => {},\n    errors: {\n      motherMaidenFirstName: \"Mother's first name is required\",\n      motherMaidenLastName: \"Mother's last name is required\",\n    },\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Form showing validation errors for required name fields.',\n      },\n    },\n  },\n};\n\nexport const PartiallyFilled: Story = {\n  args: {\n    value: {\n      motherMaidenFirstName: 'Carmen',\n      motherMaidenMiddleName: '',\n      motherMaidenLastName: 'Mendoza',\n    },\n    onChange: () => {},\n    errors: {},\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Form with first and last names filled, middle name optional.',\n      },\n    },\n  },\n};\n\n// Common Filipino Names Examples\nexport const CommonFilipinoNames: Story = {\n  render: () => {\n    const [currentExample, setCurrentExample] = useState(0);\n\n    const nameExamples = [\n      {\n        label: 'Maria Santos',\n        data: {\n          motherMaidenFirstName: 'Maria',\n          motherMaidenMiddleName: '',\n          motherMaidenLastName: 'Santos',\n        },\n      },\n      {\n        label: 'Rosa Garcia',\n        data: {\n          motherMaidenFirstName: 'Rosa',\n          motherMaidenMiddleName: 'Cruz',\n          motherMaidenLastName: 'Garcia',\n        },\n      },\n      {\n        label: 'Carmen Reyes',\n        data: {\n          motherMaidenFirstName: 'Carmen',\n          motherMaidenMiddleName: 'Luz',\n          motherMaidenLastName: 'Reyes',\n        },\n      },\n      {\n        label: 'Esperanza Dela Cruz',\n        data: {\n          motherMaidenFirstName: 'Esperanza',\n          motherMaidenMiddleName: 'Angeles',\n          motherMaidenLastName: 'Dela Cruz',\n        },\n      },\n      {\n        label: 'Teresita Villanueva',\n        data: {\n          motherMaidenFirstName: 'Teresita',\n          motherMaidenMiddleName: 'Isabel',\n          motherMaidenLastName: 'Villanueva',\n        },\n      },\n      {\n        label: 'Remedios Fernandez',\n        data: {\n          motherMaidenFirstName: 'Remedios',\n          motherMaidenMiddleName: 'Corazon',\n          motherMaidenLastName: 'Fernandez',\n        },\n      },\n    ];\n\n    const currentData = nameExamples[currentExample];\n\n    return (\n      <div className=\"space-y-6\">\n        <MotherMaidenName value={currentData.data} onChange={() => {}} errors={{}} />\n\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium\">Common Filipino Mother Names:</h4>\n          <div className=\"flex flex-wrap gap-2\">\n            {nameExamples.map((example, index) => (\n              <button\n                key={example.label}\n                onClick={() => setCurrentExample(index)}\n                className={`rounded px-3 py-1 text-sm ${\n                  currentExample === index\n                    ? 'bg-pink-600 text-white'\n                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n                }`}\n              >\n                {example.label}\n              </button>\n            ))}\n          </div>\n\n          <div className=\"rounded bg-pink-50 p-4\">\n            <h5 className=\"font-medium\">Current Example: {currentData.label}</h5>\n            <div className=\"mt-2 space-y-1 text-sm\">\n              <p>\n                <strong>First Name:</strong> {currentData.data.motherMaidenFirstName}\n              </p>\n              <p>\n                <strong>Middle Name:</strong> {currentData.data.motherMaidenMiddleName || 'None'}\n              </p>\n              <p>\n                <strong>Last Name:</strong> {currentData.data.motherMaidenLastName}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Examples of common Filipino mother maiden names.',\n      },\n    },\n  },\n};\n\n// Interactive Example\nexport const Interactive: Story = {\n  render: () => {\n    const [value, setValue] = useState<MotherMaidenNameData>(emptyData);\n    const [errors, setErrors] = useState<Record<string, string>>({});\n\n    const handleChange = (newValue: MotherMaidenNameData) => {\n      setValue(newValue);\n\n      // Clear errors for fields that now have values\n      const newErrors = { ...errors };\n      Object.keys(newValue).forEach(key => {\n        const field = key as keyof MotherMaidenNameData;\n        if (newValue[field].trim() && errors[field]) {\n          delete newErrors[field];\n        }\n      });\n      setErrors(newErrors);\n    };\n\n    const validate = () => {\n      const newErrors: Record<string, string> = {};\n\n      if (!value.motherMaidenFirstName.trim()) {\n        newErrors.motherMaidenFirstName = \"Mother's first name is required\";\n      }\n\n      if (!value.motherMaidenLastName.trim()) {\n        newErrors.motherMaidenLastName = \"Mother's last name is required\";\n      }\n\n      // Check for valid characters (letters, spaces, hyphens, apostrophes)\n      const namePattern = /^[a-zA-Z\\s\\-'\\.]*$/;\n\n      if (value.motherMaidenFirstName && !namePattern.test(value.motherMaidenFirstName)) {\n        newErrors.motherMaidenFirstName = 'First name contains invalid characters';\n      }\n\n      if (value.motherMaidenMiddleName && !namePattern.test(value.motherMaidenMiddleName)) {\n        newErrors.motherMaidenMiddleName = 'Middle name contains invalid characters';\n      }\n\n      if (value.motherMaidenLastName && !namePattern.test(value.motherMaidenLastName)) {\n        newErrors.motherMaidenLastName = 'Last name contains invalid characters';\n      }\n\n      setErrors(newErrors);\n      return Object.keys(newErrors).length === 0;\n    };\n\n    const fillSampleData = () => {\n      setValue(sampleData);\n      setErrors({});\n    };\n\n    const reset = () => {\n      setValue(emptyData);\n      setErrors({});\n    };\n\n    const generateFullName = () => {\n      const { motherMaidenFirstName, motherMaidenMiddleName, motherMaidenLastName } = value;\n      const parts = [motherMaidenFirstName, motherMaidenMiddleName, motherMaidenLastName].filter(\n        part => part.trim()\n      );\n      return parts.join(' ') || 'Not specified';\n    };\n\n    return (\n      <div className=\"space-y-6\">\n        <MotherMaidenName value={value} onChange={handleChange} errors={errors} />\n\n        <div className=\"flex space-x-4\">\n          <button\n            onClick={validate}\n            className=\"rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700\"\n          >\n            Validate\n          </button>\n          <button\n            onClick={fillSampleData}\n            className=\"rounded-md bg-green-600 px-4 py-2 text-white hover:bg-green-700\"\n          >\n            Fill Sample\n          </button>\n          <button\n            onClick={reset}\n            className=\"rounded-md bg-gray-600 px-4 py-2 text-white hover:bg-gray-700\"\n          >\n            Reset\n          </button>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div className=\"rounded bg-gray-100 p-4\">\n            <h4 className=\"font-medium\">Full Mother's Maiden Name:</h4>\n            <p className=\"mt-1 text-lg\">{generateFullName()}</p>\n          </div>\n\n          <div className=\"rounded bg-gray-100 p-4\">\n            <h4 className=\"font-medium\">Current Values:</h4>\n            <pre className=\"mt-2 text-sm\">{JSON.stringify(value, null, 2)}</pre>\n          </div>\n\n          {Object.keys(errors).length > 0 && (\n            <div className=\"rounded bg-red-100 p-4\">\n              <h4 className=\"font-medium text-red-800\">Validation Errors:</h4>\n              <pre className=\"mt-2 text-sm text-red-700\">{JSON.stringify(errors, null, 2)}</pre>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Interactive form with validation and full name generation.',\n      },\n    },\n  },\n};\n\n// Progressive Filling Example\nexport const ProgressiveFilling: Story = {\n  render: () => {\n    const [step, setStep] = useState(0);\n\n    const steps = [\n      { ...emptyData },\n      { ...emptyData, motherMaidenFirstName: 'Maria' },\n      { ...emptyData, motherMaidenFirstName: 'Maria', motherMaidenMiddleName: 'Santos' },\n      {\n        ...emptyData,\n        motherMaidenFirstName: 'Maria',\n        motherMaidenMiddleName: 'Santos',\n        motherMaidenLastName: 'Reyes',\n      },\n    ];\n\n    const stepLabels = ['Empty Form', 'Add First Name', 'Add Middle Name', 'Complete Name'];\n\n    return (\n      <div className=\"space-y-6\">\n        <MotherMaidenName value={steps[step]} onChange={() => {}} errors={{}} />\n\n        <div className=\"space-y-4\">\n          <div className=\"flex flex-wrap gap-2\">\n            {stepLabels.map((label, index) => (\n              <button\n                key={index}\n                onClick={() => setStep(index)}\n                className={`rounded px-3 py-1 text-sm ${\n                  step === index\n                    ? 'bg-blue-600 text-white'\n                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n                }`}\n              >\n                {index}: {label}\n              </button>\n            ))}\n          </div>\n\n          <div className=\"text-sm text-gray-600\">\n            Step {step + 1} of {steps.length}: {stepLabels[step]}\n          </div>\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: \"Progressive filling demonstration of mother's maiden name fields.\",\n      },\n    },\n  },\n};\n\n// Cultural Context Example\nexport const CulturalContext: Story = {\n  render: () => {\n    return (\n      <div className=\"space-y-6\">\n        <MotherMaidenName value={sampleData} onChange={() => {}} errors={{}} />\n\n        <div className=\"rounded bg-blue-50 p-4\">\n          <h4 className=\"font-medium\">Cultural Context - Philippine Naming Conventions</h4>\n          <div className=\"mt-2 space-y-2 text-sm\">\n            <p>\n              <strong>Purpose:</strong> Mother's maiden name is commonly used for identification and\n              verification in Philippine government documents.\n            </p>\n            <p>\n              <strong>Usage:</strong> Required in birth certificates, passports, and other official\n              documents for security purposes.\n            </p>\n            <p>\n              <strong>Format:</strong> Typically includes first name, middle name (optional), and\n              last name before marriage.\n            </p>\n            <p>\n              <strong>Examples:</strong> Maria Santos Cruz, Carmen Luz Reyes, Esperanza Angeles Dela\n              Cruz\n            </p>\n            <p>\n              <strong>Importance:</strong> Helps establish family lineage and prevents identity\n              fraud in official transactions.\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          \"Form with cultural context explaining the importance of mother's maiden name in Philippine documents.\",\n      },\n    },\n  },\n};\n\n// Different Name Patterns\nexport const NamePatterns: Story = {\n  render: () => {\n    const [currentPattern, setCurrentPattern] = useState(0);\n\n    const patterns = [\n      {\n        label: 'Standard Format',\n        data: {\n          motherMaidenFirstName: 'Maria',\n          motherMaidenMiddleName: 'Santos',\n          motherMaidenLastName: 'Reyes',\n        },\n        description: 'First + Middle + Last name (most common)',\n      },\n      {\n        label: 'No Middle Name',\n        data: {\n          motherMaidenFirstName: 'Carmen',\n          motherMaidenMiddleName: '',\n          motherMaidenLastName: 'Garcia',\n        },\n        description: 'First + Last name only',\n      },\n      {\n        label: 'Compound First Name',\n        data: {\n          motherMaidenFirstName: 'Maria Carmen',\n          motherMaidenMiddleName: 'Santos',\n          motherMaidenLastName: 'Cruz',\n        },\n        description: 'Two-part first name',\n      },\n      {\n        label: 'Compound Last Name',\n        data: {\n          motherMaidenFirstName: 'Rosa',\n          motherMaidenMiddleName: 'Luz',\n          motherMaidenLastName: 'Dela Cruz',\n        },\n        description: 'Two-part last name',\n      },\n      {\n        label: 'Hyphenated Last Name',\n        data: {\n          motherMaidenFirstName: 'Ana',\n          motherMaidenMiddleName: 'Isabel',\n          motherMaidenLastName: 'Santos-Reyes',\n        },\n        description: 'Hyphenated last name',\n      },\n      {\n        label: 'Spanish Influence',\n        data: {\n          motherMaidenFirstName: 'María Esperanza',\n          motherMaidenMiddleName: 'De Los Santos',\n          motherMaidenLastName: 'Villanueva',\n        },\n        description: 'Spanish-influenced naming pattern',\n      },\n    ];\n\n    const currentData = patterns[currentPattern];\n\n    return (\n      <div className=\"space-y-6\">\n        <MotherMaidenName value={currentData.data} onChange={() => {}} errors={{}} />\n\n        <div className=\"space-y-4\">\n          <div className=\"flex flex-wrap gap-2\">\n            {patterns.map((pattern, index) => (\n              <button\n                key={pattern.label}\n                onClick={() => setCurrentPattern(index)}\n                className={`rounded px-3 py-1 text-sm ${\n                  currentPattern === index\n                    ? 'bg-purple-600 text-white'\n                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n                }`}\n              >\n                {pattern.label}\n              </button>\n            ))}\n          </div>\n\n          <div className=\"rounded bg-purple-50 p-4\">\n            <h5 className=\"font-medium\">{currentData.label}</h5>\n            <p className=\"mt-1 text-sm text-gray-600\">{currentData.description}</p>\n            <div className=\"mt-2 space-y-1 text-sm\">\n              <p>\n                <strong>First:</strong> {currentData.data.motherMaidenFirstName}\n              </p>\n              <p>\n                <strong>Middle:</strong> {currentData.data.motherMaidenMiddleName || 'None'}\n              </p>\n              <p>\n                <strong>Last:</strong> {currentData.data.motherMaidenLastName}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Different naming patterns common in Philippine culture.',\n      },\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/Form/Resident/PhysicalPersonalDetails/FormField/PhysicalCharacteristics.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/Form/Resident/PhysicalPersonalDetails/FormField/VotingInformation.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/Form/Resident/PhysicalPersonalDetails/PhysicalPersonalDetails.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/Form/Resident/SectoralInformation/SectoralInformation.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/HouseholdsContent/HouseholdsContent.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'delay' is assigned a value but never used.","line":141,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":141,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockUseAuth' is assigned a value but never used.","line":192,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":192,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockUseRouter' is assigned a value but never used.","line":193,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":193,"endColumn":24},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":398,"column":32,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: &quot;Santos\", \"HH-2024-001\", \"Maria\", \"Green Valley\", etc.\n          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: &ldquo;Santos\", \"HH-2024-001\", \"Maria\", \"Green Valley\", etc.\n          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: &#34;Santos\", \"HH-2024-001\", \"Maria\", \"Green Valley\", etc.\n          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: &rdquo;Santos\", \"HH-2024-001\", \"Maria\", \"Green Valley\", etc.\n          "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":398,"column":39,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos&quot;, \"HH-2024-001\", \"Maria\", \"Green Valley\", etc.\n          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos&ldquo;, \"HH-2024-001\", \"Maria\", \"Green Valley\", etc.\n          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos&#34;, \"HH-2024-001\", \"Maria\", \"Green Valley\", etc.\n          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos&rdquo;, \"HH-2024-001\", \"Maria\", \"Green Valley\", etc.\n          "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":398,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", &quot;HH-2024-001\", \"Maria\", \"Green Valley\", etc.\n          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", &ldquo;HH-2024-001\", \"Maria\", \"Green Valley\", etc.\n          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", &#34;HH-2024-001\", \"Maria\", \"Green Valley\", etc.\n          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", &rdquo;HH-2024-001\", \"Maria\", \"Green Valley\", etc.\n          "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":398,"column":54,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", \"HH-2024-001&quot;, \"Maria\", \"Green Valley\", etc.\n          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", \"HH-2024-001&ldquo;, \"Maria\", \"Green Valley\", etc.\n          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", \"HH-2024-001&#34;, \"Maria\", \"Green Valley\", etc.\n          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", \"HH-2024-001&rdquo;, \"Maria\", \"Green Valley\", etc.\n          "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":398,"column":57,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", \"HH-2024-001\", &quot;Maria\", \"Green Valley\", etc.\n          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", \"HH-2024-001\", &ldquo;Maria\", \"Green Valley\", etc.\n          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", \"HH-2024-001\", &#34;Maria\", \"Green Valley\", etc.\n          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", \"HH-2024-001\", &rdquo;Maria\", \"Green Valley\", etc.\n          "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":398,"column":63,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", \"HH-2024-001\", \"Maria&quot;, \"Green Valley\", etc.\n          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", \"HH-2024-001\", \"Maria&ldquo;, \"Green Valley\", etc.\n          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", \"HH-2024-001\", \"Maria&#34;, \"Green Valley\", etc.\n          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", \"HH-2024-001\", \"Maria&rdquo;, \"Green Valley\", etc.\n          "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":398,"column":66,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", \"HH-2024-001\", \"Maria\", &quot;Green Valley\", etc.\n          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", \"HH-2024-001\", \"Maria\", &ldquo;Green Valley\", etc.\n          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", \"HH-2024-001\", \"Maria\", &#34;Green Valley\", etc.\n          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", \"HH-2024-001\", \"Maria\", &rdquo;Green Valley\", etc.\n          "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":398,"column":79,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", \"HH-2024-001\", \"Maria\", \"Green Valley&quot;, etc.\n          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", \"HH-2024-001\", \"Maria\", \"Green Valley&ldquo;, etc.\n          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", \"HH-2024-001\", \"Maria\", \"Green Valley&#34;, etc.\n          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11230,11327],"text":"\n            Try searching for: \"Santos\", \"HH-2024-001\", \"Maria\", \"Green Valley&rdquo;, etc.\n          "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { useState } from 'react';\nimport HouseholdsContent from '@/components/organisms/HouseholdsContent';\n\nconst meta = {\n  title: 'Organisms/HouseholdsContent',\n  component: HouseholdsContent,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'A comprehensive household management component that displays household data in a searchable table format. Includes pagination, search functionality, and action buttons for viewing and editing household details.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n  decorators: [\n    Story => (\n      <div className=\"min-h-screen bg-gray-50 p-6\">\n        <Story />\n      </div>\n    ),\n  ],\n} satisfies Meta<typeof HouseholdsContent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Mock households data for stories\nconst mockHouseholds = [\n  {\n    code: 'HH-2024-001',\n    name: 'Santos Family',\n    house_number: '123',\n    street_name: 'Rizal Street',\n    subdivision: 'Green Valley Subdivision',\n    barangay_code: '042108001',\n    region_code: '04',\n    province_code: '0421',\n    city_municipality_code: '042108',\n    created_at: '2024-01-15T08:30:00Z',\n    head_resident: {\n      id: '1',\n      first_name: 'Juan',\n      middle_name: 'Cruz',\n      last_name: 'Santos',\n    },\n    member_count: 5,\n    region_info: { code: '04', name: 'CALABARZON' },\n    province_info: { code: '0421', name: 'Batangas' },\n    city_municipality_info: { code: '042108', name: 'Lipa City', type: 'City' },\n    barangay_info: { code: '042108001', name: 'Barangay 1' },\n  },\n  {\n    code: 'HH-2024-002',\n    name: 'Reyes Family',\n    house_number: '456',\n    street_name: 'Bonifacio Avenue',\n    barangay_code: '042108002',\n    region_code: '04',\n    province_code: '0421',\n    city_municipality_code: '042108',\n    created_at: '2024-01-20T14:15:00Z',\n    head_resident: {\n      id: '2',\n      first_name: 'Maria',\n      last_name: 'Reyes',\n    },\n    member_count: 3,\n    region_info: { code: '04', name: 'CALABARZON' },\n    province_info: { code: '0421', name: 'Batangas' },\n    city_municipality_info: { code: '042108', name: 'Lipa City', type: 'City' },\n    barangay_info: { code: '042108002', name: 'Barangay 2' },\n  },\n  {\n    code: 'HH-2024-003',\n    name: 'Garcia Household',\n    house_number: '789',\n    street_name: 'Del Pilar Street',\n    subdivision: 'Palm Heights',\n    barangay_code: '042108003',\n    created_at: '2024-02-01T10:45:00Z',\n    head_resident: {\n      id: '3',\n      first_name: 'Roberto',\n      middle_name: 'Luna',\n      last_name: 'Garcia',\n    },\n    member_count: 7,\n    region_info: { code: '04', name: 'CALABARZON' },\n    province_info: { code: '0421', name: 'Batangas' },\n    city_municipality_info: { code: '042108', name: 'Lipa City', type: 'City' },\n    barangay_info: { code: '042108003', name: 'Barangay 3' },\n  },\n  {\n    code: 'HH-2024-004',\n    house_number: '321',\n    street_name: 'Mabini Street',\n    barangay_code: '042108004',\n    created_at: '2024-02-10T16:20:00Z',\n    member_count: 2,\n    region_info: { code: '04', name: 'CALABARZON' },\n    province_info: { code: '0421', name: 'Batangas' },\n    city_municipality_info: { code: '042108', name: 'Lipa City', type: 'City' },\n    barangay_info: { code: '042108004', name: 'Barangay 4' },\n  },\n  {\n    code: 'HH-2024-005',\n    name: 'Cruz Family',\n    house_number: '654',\n    street_name: 'Luna Street',\n    subdivision: 'Sunrise Village',\n    barangay_code: '042108005',\n    created_at: '2024-02-15T12:30:00Z',\n    head_resident: {\n      id: '5',\n      first_name: 'Ana',\n      middle_name: 'Santos',\n      last_name: 'Cruz',\n    },\n    member_count: 4,\n    region_info: { code: '04', name: 'CALABARZON' },\n    province_info: { code: '0421', name: 'Batangas' },\n    city_municipality_info: { code: '042108', name: 'Lipa City', type: 'City' },\n    barangay_info: { code: '042108005', name: 'Barangay 5' },\n  },\n];\n\n// Mock session for demonstration\nconst mockSession = {\n  access_token: 'mock-token',\n  user: {\n    id: '1',\n    name: 'Admin User',\n    email: 'admin@example.com',\n  },\n};\n\n// Mock fetch implementation\nconst mockFetch = (households: typeof mockHouseholds, delay = 500) => {\n  return (url: string) => {\n    const urlObj = new URL(url, 'http://localhost');\n    const searchParams = urlObj.searchParams;\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '10');\n    const search = searchParams.get('search') || '';\n\n    // Filter households based on search\n    let filteredHouseholds = households;\n    if (search) {\n      filteredHouseholds = households.filter(\n        h =>\n          h.code.toLowerCase().includes(search.toLowerCase()) ||\n          (h.head_resident &&\n            `${h.head_resident.first_name} ${h.head_resident.middle_name || ''} ${h.head_resident.last_name}`\n              .toLowerCase()\n              .includes(search.toLowerCase()))\n      );\n    }\n\n    // Paginate\n    const startIndex = (page - 1) * limit;\n    const endIndex = startIndex + limit;\n    const paginatedHouseholds = filteredHouseholds.slice(startIndex, endIndex);\n\n    return Promise.resolve({\n      ok: true,\n      status: 200,\n      json: () =>\n        Promise.resolve({\n          data: paginatedHouseholds,\n          pagination: {\n            page,\n            limit,\n            total: filteredHouseholds.length,\n            pages: Math.ceil(filteredHouseholds.length / limit),\n            hasNext: endIndex < filteredHouseholds.length,\n            hasPrev: page > 1,\n          },\n        }),\n    });\n  };\n};\n\n// Default story with normal household data\nexport const Default: Story = {\n  render: () => {\n    global.fetch = mockFetch(mockHouseholds);\n\n    // Mock useAuth hook\n    const mockUseAuth = () => ({ session: mockSession });\n    const mockUseRouter = () => ({\n      push: (path: string) => console.log('Navigating to:', path),\n    });\n\n    return (\n      <div>\n        {/* Mock the auth context */}\n        <HouseholdsContent />\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Default household management view with sample household data.',\n      },\n    },\n  },\n};\n\n// Large dataset story\nexport const LargeDataset: Story = {\n  render: () => {\n    // Generate more households for large dataset simulation\n    const largeHouseholdData = Array.from({ length: 50 }, (_, index) => ({\n      code: `HH-2024-${String(index + 1).padStart(3, '0')}`,\n      name: `Household ${index + 1}`,\n      house_number: String(100 + index),\n      street_name: [\n        'Rizal Street',\n        'Bonifacio Avenue',\n        'Del Pilar Street',\n        'Mabini Street',\n        'Luna Street',\n      ][index % 5],\n      subdivision:\n        index % 3 === 0\n          ? ['Green Valley', 'Palm Heights', 'Sunrise Village'][index % 3]\n          : undefined,\n      barangay_code: `04210800${(index % 10) + 1}`,\n      created_at: new Date(2024, 0, index + 1).toISOString(),\n      head_resident: {\n        id: String(index + 1),\n        first_name: ['Juan', 'Maria', 'Roberto', 'Ana', 'Carlos'][index % 5],\n        middle_name: index % 2 === 0 ? ['Cruz', 'Luna', 'Santos'][index % 3] : undefined,\n        last_name: ['Santos', 'Reyes', 'Garcia', 'Cruz', 'Martinez'][index % 5],\n      },\n      member_count: Math.floor(Math.random() * 8) + 1,\n      region_info: { code: '04', name: 'CALABARZON' },\n      province_info: { code: '0421', name: 'Batangas' },\n      city_municipality_info: { code: '042108', name: 'Lipa City', type: 'City' },\n      barangay_info: { code: `04210800${(index % 10) + 1}`, name: `Barangay ${(index % 10) + 1}` },\n    }));\n\n    global.fetch = mockFetch(largeHouseholdData);\n\n    return <HouseholdsContent />;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Household management with a large dataset (50 households) to test pagination and performance.',\n      },\n    },\n  },\n};\n\n// Empty state story\nexport const EmptyState: Story = {\n  render: () => {\n    global.fetch = mockFetch([]);\n\n    return <HouseholdsContent />;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Household management view when no households are found.',\n      },\n    },\n  },\n};\n\n// Loading state story\nexport const LoadingState: Story = {\n  render: () => {\n    global.fetch = () => new Promise(resolve => setTimeout(resolve, 10000)); // Never resolves to show loading\n\n    return <HouseholdsContent />;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Loading state while fetching household data.',\n      },\n    },\n  },\n};\n\n// Error state story\nexport const ErrorState: Story = {\n  render: () => {\n    global.fetch = () =>\n      Promise.resolve({\n        ok: false,\n        status: 500,\n        json: () => Promise.resolve({ error: 'Internal server error' }),\n      });\n\n    return <HouseholdsContent />;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Error state when household data fails to load.',\n      },\n    },\n  },\n};\n\n// Households without heads\nexport const HouseholdsWithoutHeads: Story = {\n  render: () => {\n    const householdsWithoutHeads = mockHouseholds.map(h => ({\n      ...h,\n      head_resident: undefined,\n    }));\n\n    global.fetch = mockFetch(householdsWithoutHeads);\n\n    return <HouseholdsContent />;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Households that do not have assigned household heads.',\n      },\n    },\n  },\n};\n\n// Minimal address information\nexport const MinimalAddressInfo: Story = {\n  render: () => {\n    const minimalAddressHouseholds = mockHouseholds.map(h => ({\n      ...h,\n      house_number: undefined,\n      street_name: undefined,\n      subdivision: undefined,\n    }));\n\n    global.fetch = mockFetch(minimalAddressHouseholds);\n\n    return <HouseholdsContent />;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Households with minimal address information (only barangay-level data).',\n      },\n    },\n  },\n};\n\n// Mixed household data\nexport const MixedHouseholdData: Story = {\n  render: () => {\n    const mixedData = [\n      // Complete household\n      mockHouseholds[0],\n      // Household without head\n      { ...mockHouseholds[1], head_resident: undefined },\n      // Household with minimal address\n      { ...mockHouseholds[2], house_number: undefined, subdivision: undefined },\n      // Household with single member\n      { ...mockHouseholds[3], member_count: 1 },\n      // Large household\n      { ...mockHouseholds[4], member_count: 15 },\n    ];\n\n    global.fetch = mockFetch(mixedData);\n\n    return <HouseholdsContent />;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Mix of different household data scenarios including complete, incomplete, and edge cases.',\n      },\n    },\n  },\n};\n\n// Search functionality demonstration\nexport const SearchFunctionality: Story = {\n  render: () => {\n    global.fetch = mockFetch(mockHouseholds);\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"rounded-lg bg-blue-50 p-4\">\n          <h3 className=\"font-medium text-blue-900\">Search Functionality Demo</h3>\n          <p className=\"mt-1 text-sm text-blue-700\">\n            Try searching for: \"Santos\", \"HH-2024-001\", \"Maria\", \"Green Valley\", etc.\n          </p>\n        </div>\n        <HouseholdsContent />\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Demonstrates search functionality across household codes and head resident names.',\n      },\n    },\n  },\n};\n\n// Pagination demonstration\nexport const PaginationDemo: Story = {\n  render: () => {\n    // Create exactly 25 households to show pagination (3 pages with 10 per page)\n    const paginationData = Array.from({ length: 25 }, (_, index) => ({\n      ...mockHouseholds[index % mockHouseholds.length],\n      code: `HH-2024-${String(index + 1).padStart(3, '0')}`,\n      head_resident: {\n        id: String(index + 1),\n        first_name: ['Juan', 'Maria', 'Roberto', 'Ana', 'Carlos'][index % 5],\n        last_name: ['Santos', 'Reyes', 'Garcia', 'Cruz', 'Martinez'][index % 5],\n      },\n    }));\n\n    global.fetch = mockFetch(paginationData);\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"rounded-lg bg-green-50 p-4\">\n          <h3 className=\"font-medium text-green-900\">Pagination Demo</h3>\n          <p className=\"mt-1 text-sm text-green-700\">\n            25 households across 3 pages (10 per page). Use pagination controls to navigate.\n          </p>\n        </div>\n        <HouseholdsContent />\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Demonstrates pagination functionality with multiple pages of household data.',\n      },\n    },\n  },\n};\n\n// Regional diversity\nexport const RegionalDiversity: Story = {\n  render: () => {\n    const regionalData = [\n      {\n        ...mockHouseholds[0],\n        region_info: { code: '01', name: 'Ilocos Region' },\n        province_info: { code: '0128', name: 'Ilocos Sur' },\n        city_municipality_info: { code: '012801', name: 'Vigan City', type: 'City' },\n      },\n      {\n        ...mockHouseholds[1],\n        region_info: { code: '05', name: 'Bicol Region' },\n        province_info: { code: '0554', name: 'Albay' },\n        city_municipality_info: { code: '055403', name: 'Legazpi City', type: 'City' },\n      },\n      {\n        ...mockHouseholds[2],\n        region_info: { code: '07', name: 'Central Visayas' },\n        province_info: { code: '0722', name: 'Cebu' },\n        city_municipality_info: { code: '072209', name: 'Cebu City', type: 'City' },\n      },\n      {\n        ...mockHouseholds[3],\n        region_info: { code: '11', name: 'Davao Region' },\n        province_info: { code: '1123', name: 'Davao del Sur' },\n        city_municipality_info: { code: '112302', name: 'Davao City', type: 'City' },\n      },\n      {\n        ...mockHouseholds[4],\n        region_info: { code: '13', name: 'Caraga' },\n        province_info: { code: '1301', name: 'Agusan del Norte' },\n        city_municipality_info: { code: '130101', name: 'Butuan City', type: 'City' },\n      },\n    ];\n\n    global.fetch = mockFetch(regionalData);\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"rounded-lg bg-purple-50 p-4\">\n          <h3 className=\"font-medium text-purple-900\">Regional Diversity</h3>\n          <p className=\"mt-1 text-sm text-purple-700\">\n            Households from different regions across the Philippines.\n          </p>\n        </div>\n        <HouseholdsContent />\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Households from different regions showcasing geographic diversity across the Philippines.',\n      },\n    },\n  },\n};\n\n// Dark mode\nexport const DarkMode: Story = {\n  render: () => {\n    global.fetch = mockFetch(mockHouseholds);\n\n    return (\n      <div className=\"dark min-h-screen bg-gray-900\">\n        <HouseholdsContent />\n      </div>\n    );\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n      values: [{ name: 'dark', value: '#1f2937' }],\n    },\n    docs: {\n      description: {\n        story: 'Household management interface in dark mode.',\n      },\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/LoginForm/LoginForm.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockUseAuth' is assigned a value but never used.","line":31,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { fn } from 'storybook/test';\nimport LoginForm from '@/components/organisms/LoginForm';\n\ninterface MockAuthValue {\n  signIn: () => Promise<unknown>;\n  loading: boolean;\n  user: unknown;\n  userProfile: unknown;\n  role: unknown;\n}\n\n// Mock the AuthContext\nconst createMockAuthContext = (overrides = {}) => ({\n  signIn: () => Promise.resolve(),\n  loading: false,\n  user: null,\n  userProfile: null,\n  role: null,\n  ...overrides,\n});\n\n// Mock AuthContext provider wrapper\nconst MockAuthProvider = ({\n  children,\n  authValue,\n}: {\n  children: React.ReactNode;\n  authValue: MockAuthValue;\n}) => {\n  const mockUseAuth = () => authValue;\n\n  // Note: AuthContext mocking would be handled by Storybook\n  console.log('AuthContext mock would be configured here');\n\n  return <>{children}</>;\n};\n\nconst meta: Meta<typeof LoginForm> = {\n  title: 'Organisms/LoginForm',\n  component: LoginForm,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: `\nMain authentication form component for the RBI System.\nHandles user login with comprehensive validation and error handling.\n\n**Features:**\n- Email and password validation with real-time feedback\n- Loading states during authentication\n- Comprehensive error handling for various auth scenarios\n- Accessibility compliant with ARIA labels and focus management\n- Responsive design with proper mobile support\n\n**Authentication Flow:**\n1. User enters email and password\n2. Client-side validation checks format and requirements\n3. Form submits to authentication service\n4. Handles success/error responses appropriately\n5. Redirects or calls success callback on successful login\n\n**Error Handling:**\n- Invalid credentials\n- Email not confirmed\n- Network connectivity issues\n- Form validation errors\n- Rate limiting scenarios\n        `,\n      },\n    },\n  },\n  argTypes: {\n    onSuccess: {\n      description: 'Callback function called on successful login',\n      action: 'login-success',\n    },\n    redirectTo: {\n      description: 'URL to redirect to after successful login',\n      control: { type: 'text' },\n      defaultValue: '/dashboard',\n    },\n    className: {\n      description: 'Additional CSS classes to apply to the component',\n      control: { type: 'text' },\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof LoginForm>;\n\nexport const Default: Story = {\n  args: {\n    onSuccess: fn(),\n    redirectTo: '/dashboard',\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider authValue={createMockAuthContext()}>\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const Loading: Story = {\n  args: {\n    onSuccess: fn(),\n    redirectTo: '/dashboard',\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider authValue={createMockAuthContext({ loading: true })}>\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const WithValidationErrors: Story = {\n  args: {\n    onSuccess: fn(),\n    redirectTo: '/dashboard',\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider authValue={createMockAuthContext()}>\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const InvalidCredentials: Story = {\n  args: {\n    onSuccess: fn(),\n    redirectTo: '/dashboard',\n  },\n  decorators: [\n    Story => {\n      const mockAuth = createMockAuthContext({\n        signIn: () =>\n          Promise.resolve({\n            error: { message: 'Invalid login credentials' },\n          }),\n      });\n      return (\n        <MockAuthProvider authValue={mockAuth}>\n          <Story />\n        </MockAuthProvider>\n      );\n    },\n  ],\n};\n\nexport const EmailNotConfirmed: Story = {\n  args: {\n    onSuccess: fn(),\n    redirectTo: '/dashboard',\n  },\n  decorators: [\n    Story => {\n      const mockAuth = createMockAuthContext({\n        signIn: () =>\n          Promise.resolve({\n            error: { message: 'Email not confirmed' },\n          }),\n      });\n      return (\n        <MockAuthProvider authValue={mockAuth}>\n          <Story />\n        </MockAuthProvider>\n      );\n    },\n  ],\n};\n\nexport const NetworkError: Story = {\n  args: {\n    onSuccess: fn(),\n    redirectTo: '/dashboard',\n  },\n  decorators: [\n    Story => {\n      const mockAuth = createMockAuthContext({\n        signIn: () =>\n          Promise.resolve({\n            error: { message: 'Network request failed' },\n          }),\n      });\n      return (\n        <MockAuthProvider authValue={mockAuth}>\n          <Story />\n        </MockAuthProvider>\n      );\n    },\n  ],\n};\n\nexport const SuccessfulLogin: Story = {\n  args: {\n    onSuccess: fn(),\n    redirectTo: '/dashboard',\n  },\n  decorators: [\n    Story => {\n      const mockAuth = createMockAuthContext({\n        signIn: () => Promise.resolve({ error: null }),\n      });\n      return (\n        <MockAuthProvider authValue={mockAuth}>\n          <Story />\n        </MockAuthProvider>\n      );\n    },\n  ],\n};\n\nexport const CustomClassName: Story = {\n  args: {\n    onSuccess: fn(),\n    redirectTo: '/dashboard',\n    className: 'custom-login-form border-2 border-blue-500',\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider authValue={createMockAuthContext()}>\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const CustomRedirect: Story = {\n  args: {\n    onSuccess: fn(),\n    redirectTo: '/admin/users',\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider authValue={createMockAuthContext()}>\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/Navigation/Navigation.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'action' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { action } from 'storybook/actions';\nimport Navigation, { NavigationItem } from '@/components/organisms/Navigation';\n\nconst meta: Meta<typeof Navigation> = {\n  title: 'Organisms/Navigation',\n  component: Navigation,\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component: `\nA unified navigation component that consolidates navigation patterns from dashboard and app layouts. Features include:\n\n- **Hierarchical Structure** - Main navigation with optional sub-items\n- **Active State Management** - Automatic highlighting of current page\n- **Icon Support** - FontAwesome 6 icons for visual navigation cues\n- **Flexible Layout** - Supports both main and bottom navigation sections\n- **Accessibility** - Proper ARIA attributes and keyboard navigation\n- **Responsive Design** - Adapts to different screen sizes\n\nThe component uses Next.js routing and provides a consistent navigation experience across the application.\n        `,\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    items: {\n      description: 'Main navigation items array',\n    },\n    bottomItems: {\n      description: 'Bottom navigation items array',\n    },\n    showIcons: {\n      control: 'boolean',\n      description: 'Whether to show navigation icons',\n    },\n    showSubmenu: {\n      control: 'boolean',\n      description: 'Whether to show submenu items',\n    },\n    variant: {\n      control: 'radio',\n      options: ['default', 'compact', 'minimal'],\n      description: 'Navigation variant style',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Navigation now uses FontAwesome 6 icons\n\n// Mock navigation items\nconst defaultNavItems: NavigationItem[] = [\n  {\n    name: 'Dashboard',\n    href: '/dashboard',\n    icon: 'dashboard',\n    description: 'Main dashboard and overview',\n  },\n  {\n    name: 'Residents',\n    href: '/residents',\n    icon: 'users',\n    description: 'Manage resident records',\n    children: [\n      { name: 'All Residents', href: '/residents' },\n      { name: 'Add Resident', href: '/residents/add' },\n      { name: 'Import Data', href: '/residents/import' },\n    ],\n  },\n  {\n    name: 'Reports',\n    href: '/reports',\n    icon: 'chart-bar',\n    description: 'Analytics and reports',\n    children: [\n      { name: 'Demographics', href: '/reports/demographics' },\n      { name: 'Sectoral', href: '/reports/sectoral' },\n      { name: 'Household', href: '/reports/household' },\n    ],\n  },\n];\n\nconst bottomNavItems: NavigationItem[] = [\n  {\n    name: 'Settings',\n    href: '/settings',\n    icon: 'settings',\n    description: 'Application settings',\n  },\n];\n\nexport const Default: Story = {\n  args: {\n    items: defaultNavItems,\n    bottomItems: bottomNavItems,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Default navigation with main items and bottom items. Shows icons and supports submenu expansion.',\n      },\n    },\n  },\n};\n\nexport const WithActiveItem: Story = {\n  args: {\n    items: defaultNavItems,\n    bottomItems: bottomNavItems,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Navigation with an active item highlighted. The active state is automatically managed based on the current route.',\n      },\n    },\n    nextjs: {\n      router: {\n        pathname: '/residents',\n      },\n    },\n  },\n};\n\nexport const WithSubmenus: Story = {\n  args: {\n    items: [\n      ...defaultNavItems,\n      {\n        name: 'Administration',\n        href: '/admin',\n        icon: 'settings',\n        children: [\n          { name: 'User Management', href: '/admin/users' },\n          { name: 'Role Management', href: '/admin/roles' },\n          { name: 'System Logs', href: '/admin/logs' },\n          { name: 'Backup & Restore', href: '/admin/backup' },\n        ],\n      },\n    ],\n    bottomItems: bottomNavItems,\n    showSubmenu: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Navigation with expanded submenus showing hierarchical organization.',\n      },\n    },\n    nextjs: {\n      router: {\n        pathname: '/admin/users',\n      },\n    },\n  },\n};\n\nexport const Minimal: Story = {\n  args: {\n    items: defaultNavItems.map(item => ({ ...item, icon: undefined })),\n    bottomItems: bottomNavItems.map(item => ({ ...item, icon: undefined })),\n    showIcons: false,\n    variant: 'minimal',\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Minimal navigation variant without icons for clean, text-only appearance.',\n      },\n    },\n  },\n};\n\nexport const CompactLayout: Story = {\n  args: {\n    items: defaultNavItems,\n    bottomItems: [],\n    variant: 'compact',\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Compact navigation layout with reduced spacing, suitable for sidebars.',\n      },\n    },\n  },\n  decorators: [\n    Story => (\n      <div className=\"h-96 w-64 rounded-lg border border-gray-200 bg-gray-50 p-4\">\n        <Story />\n      </div>\n    ),\n  ],\n};\n\nexport const BarangayNavigation: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: 'Barangay-specific navigation with local government modules and Filipino context.',\n      },\n    },\n  },\n  render: () => {\n    const barangayNavItems: NavigationItem[] = [\n      {\n        name: 'Dashboard',\n        href: '/dashboard',\n        icon: 'home',\n        description: 'Barangay overview',\n      },\n      {\n        name: 'Mga Residente',\n        href: '/residents',\n        icon: 'users',\n        description: 'Resident management',\n        children: [\n          { name: 'Lahat ng Residente', href: '/residents' },\n          { name: 'Dagdag Residente', href: '/residents/add' },\n          { name: 'Pamilyang Records', href: '/residents/households' },\n        ],\n      },\n      {\n        name: 'Mga Ulat',\n        href: '/reports',\n        icon: 'chart-bar',\n        description: 'Reports and analytics',\n        children: [\n          { name: 'Demographics', href: '/reports/demographics' },\n          { name: 'Sectoral Groups', href: '/reports/sectoral' },\n          { name: 'Barangay Profile', href: '/reports/profile' },\n        ],\n      },\n    ];\n\n    const barangayBottomItems: NavigationItem[] = [\n      {\n        name: 'Settings',\n        href: '/settings',\n        icon: 'settings',\n      },\n    ];\n\n    return (\n      <div className=\"h-96 w-72 rounded-lg border border-gray-200 bg-white shadow-xs\">\n        <div className=\"border-b border-gray-200 p-4\">\n          <h2 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n            Barangay San Lorenzo\n          </h2>\n          <p className=\"text-sm text-gray-500 dark:text-gray-500\">Makati City, Metro Manila</p>\n        </div>\n        <div className=\"p-4\">\n          <Navigation items={barangayNavItems} bottomItems={barangayBottomItems} />\n        </div>\n      </div>\n    );\n  },\n};\n\nexport const MobileNavigation: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: 'Mobile-optimized navigation layout with touch-friendly spacing.',\n      },\n    },\n  },\n  decorators: [\n    Story => (\n      <div className=\"h-screen w-80 border-r border-gray-200 bg-white\">\n        <div className=\"border-b border-gray-200 p-4\">\n          <h1 className=\"text-xl font-bold text-gray-900 dark:text-gray-100\">Citizenly</h1>\n          <p className=\"text-sm text-gray-500 dark:text-gray-500\">Barangay Management</p>\n        </div>\n        <div className=\"p-4\">\n          <Story />\n        </div>\n      </div>\n    ),\n  ],\n  args: {\n    items: defaultNavItems,\n    bottomItems: bottomNavItems,\n  },\n};\n\nexport const WithNotifications: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: 'Navigation with notification badges and status indicators.',\n      },\n    },\n  },\n  render: () => {\n    const notificationNavItems: NavigationItem[] = [\n      {\n        name: 'Dashboard',\n        href: '/dashboard',\n        icon: 'home',\n      },\n      {\n        name: 'Residents',\n        href: '/residents',\n        icon: 'users',\n        children: [\n          { name: 'All Residents (1,234)', href: '/residents' },\n          { name: 'Pending Approval (5)', href: '/residents/pending' },\n          { name: 'New Registrations (12)', href: '/residents/new' },\n        ],\n      },\n      {\n        name: 'Reports',\n        href: '/reports',\n        icon: 'chart-bar',\n        children: [\n          { name: 'Demographics', href: '/reports/demographics' },\n          { name: 'Monthly Report (Due)', href: '/reports/monthly' },\n        ],\n      },\n    ];\n\n    return (\n      <div className=\"w-80 space-y-4\">\n        <Navigation items={notificationNavItems} bottomItems={bottomNavItems} showSubmenu={true} />\n        <div className=\"rounded-lg border border-yellow-200 bg-yellow-50 p-3\">\n          <p className=\"text-sm text-yellow-800\">\n            <strong>5</strong> residents pending approval\n          </p>\n        </div>\n      </div>\n    );\n  },\n};\n\nexport const DarkTheme: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: 'Navigation with dark theme styling.',\n      },\n    },\n  },\n  decorators: [\n    Story => (\n      <div className=\"dark\">\n        <div className=\"h-96 w-72 rounded-lg border border-gray-700 bg-gray-900 p-4\">\n          <Story />\n        </div>\n      </div>\n    ),\n  ],\n  args: {\n    items: defaultNavItems,\n    bottomItems: bottomNavItems,\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/PopulationPyramid/PopulationPyramid.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/ProtectedRoute/ProtectedRoute.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fn' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockRouter' is assigned a value but never used.","line":16,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'authValue' is defined but never used.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { fn } from 'storybook/test';\nimport ProtectedRoute from '@/components/organisms/ProtectedRoute';\n\ninterface MockAuthValue {\n  user: unknown;\n  userProfile: unknown;\n  role: unknown;\n  loading: boolean;\n  profileLoading: boolean;\n  hasPermission: () => boolean;\n  isInRole: () => boolean;\n}\n\n// Mock Next.js router\nconst mockRouter = {\n  push: () => {},\n  replace: () => {},\n  back: () => {},\n};\n\nconst MockNextRouter = ({ children }: { children: React.ReactNode }) => {\n  // Note: Next.js navigation mocking would be handled by Storybook\n  console.log('Router mock would be configured here');\n  return <>{children}</>;\n};\n\n// Mock AuthContext\nconst createMockAuthContext = (overrides = {}) => ({\n  user: null,\n  userProfile: null,\n  role: null,\n  loading: false,\n  profileLoading: false,\n  hasPermission: () => false,\n  isInRole: () => false,\n  ...overrides,\n});\n\nconst MockAuthProvider = ({\n  children,\n  authValue,\n}: {\n  children: React.ReactNode;\n  authValue: MockAuthValue;\n}) => {\n  // Note: AuthContext mocking would be handled by Storybook\n  console.log('AuthContext mock would be configured here');\n\n  return <>{children}</>;\n};\n\n// Sample protected content component\nconst ProtectedContent = () => (\n  <div className=\"rounded-lg border border-green-200 bg-green-50 p-6\">\n    <h2 className=\"mb-2 text-lg font-semibold text-green-800\">🔒 Protected Content Accessible</h2>\n    <p className=\"text-green-700\">This content is only visible to authorized users.</p>\n    <div className=\"mt-4 space-y-2 text-sm text-green-600\">\n      <p>• Resident management features</p>\n      <p>• Barangay administration tools</p>\n      <p>• Confidential government data</p>\n    </div>\n  </div>\n);\n\nconst meta: Meta<typeof ProtectedRoute> = {\n  title: 'Organisms/ProtectedRoute',\n  component: ProtectedRoute,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: `\nRoute protection wrapper component that controls access to protected content based on authentication state, user roles, and permissions.\n\n**Features:**\n- Authentication state checking\n- Role-based access control (RBAC)\n- Permission-based access control\n- Custom loading states\n- Fallback content for unauthorized access\n- Automatic redirection to login\n- Profile loading management\n- Error boundary functionality\n\n**Security Considerations:**\n- Never render protected content for unauthorized users\n- Show appropriate loading states during auth checks\n- Provide clear error messages for access denied scenarios\n- Handle edge cases like expired sessions gracefully\n- Implement proper role hierarchy enforcement\n\n**Common Usage Patterns:**\n- Protect entire page routes\n- Wrap sensitive UI components\n- Control access to admin functionality\n- Manage role-specific feature visibility\n        `,\n      },\n    },\n  },\n  decorators: [\n    Story => (\n      <div style={{ width: '600px', minHeight: '400px' }}>\n        <MockNextRouter>\n          <Story />\n        </MockNextRouter>\n      </div>\n    ),\n  ],\n  argTypes: {\n    requireRole: {\n      description: 'Required user role to access the protected content',\n      control: { type: 'select' },\n      options: ['barangay_admin', 'barangay_clerk', 'system_admin', 'super_admin'],\n    },\n    requirePermission: {\n      description: 'Required permission to access the protected content',\n      control: { type: 'select' },\n      options: [\n        'residents_view',\n        'residents_create',\n        'residents_update',\n        'residents_delete',\n        'users_manage',\n        'reports_view',\n      ],\n    },\n    fallback: {\n      description: 'Custom content to show when access is denied (instead of redirect)',\n      control: false,\n    },\n    loadingComponent: {\n      description: 'Custom loading component to show during authentication check',\n      control: false,\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof ProtectedRoute>;\n\nexport const AuthenticationLoading: Story = {\n  args: {\n    children: <ProtectedContent />,\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider authValue={createMockAuthContext({ loading: true })}>\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const ProfileLoading: Story = {\n  args: {\n    children: <ProtectedContent />,\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider\n        authValue={createMockAuthContext({\n          user: { id: 'user-123' },\n          profileLoading: true,\n        })}\n      >\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const NotAuthenticated: Story = {\n  args: {\n    children: <ProtectedContent />,\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider authValue={createMockAuthContext()}>\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const AuthenticatedUserAccess: Story = {\n  args: {\n    children: <ProtectedContent />,\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider\n        authValue={createMockAuthContext({\n          user: { id: 'user-123', email: 'user@barangay.gov.ph' },\n          userProfile: {\n            id: 'user-123',\n            email: 'user@barangay.gov.ph',\n            first_name: 'Juan',\n            last_name: 'Cruz',\n            barangay_code: '123456789',\n            role_id: 'clerk-role',\n            is_active: true,\n            created_at: '2024-01-01T00:00:00Z',\n            updated_at: '2024-01-01T00:00:00Z',\n          },\n          role: {\n            id: 'clerk-role',\n            name: 'barangay_clerk',\n            permissions: { residents_view: true },\n          },\n        })}\n      >\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const RoleBasedAccessGranted: Story = {\n  args: {\n    children: <ProtectedContent />,\n    requireRole: 'barangay_admin',\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider\n        authValue={createMockAuthContext({\n          user: { id: 'admin-123', email: 'admin@barangay.gov.ph' },\n          userProfile: {\n            id: 'admin-123',\n            email: 'admin@barangay.gov.ph',\n            first_name: 'Maria',\n            last_name: 'Santos',\n            barangay_code: '123456789',\n            role_id: 'admin-role',\n            is_active: true,\n            created_at: '2024-01-01T00:00:00Z',\n            updated_at: '2024-01-01T00:00:00Z',\n          },\n          role: {\n            id: 'admin-role',\n            name: 'barangay_admin',\n            permissions: { all: true },\n          },\n          isInRole: () => true,\n        })}\n      >\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const RoleBasedAccessDenied: Story = {\n  args: {\n    children: <ProtectedContent />,\n    requireRole: 'barangay_admin',\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider\n        authValue={createMockAuthContext({\n          user: { id: 'clerk-123', email: 'clerk@barangay.gov.ph' },\n          userProfile: {\n            id: 'clerk-123',\n            email: 'clerk@barangay.gov.ph',\n            first_name: 'Pedro',\n            last_name: 'Rivera',\n            barangay_code: '123456789',\n            role_id: 'clerk-role',\n            is_active: true,\n            created_at: '2024-01-01T00:00:00Z',\n            updated_at: '2024-01-01T00:00:00Z',\n          },\n          role: {\n            id: 'clerk-role',\n            name: 'barangay_clerk',\n            permissions: { residents_view: true },\n          },\n          isInRole: () => false,\n        })}\n      >\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const PermissionBasedAccessGranted: Story = {\n  args: {\n    children: <ProtectedContent />,\n    requirePermission: 'residents_view',\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider\n        authValue={createMockAuthContext({\n          user: { id: 'user-123', email: 'user@barangay.gov.ph' },\n          userProfile: {\n            id: 'user-123',\n            email: 'user@barangay.gov.ph',\n            first_name: 'Ana',\n            last_name: 'Garcia',\n            barangay_code: '123456789',\n            role_id: 'clerk-role',\n            is_active: true,\n            created_at: '2024-01-01T00:00:00Z',\n            updated_at: '2024-01-01T00:00:00Z',\n          },\n          role: {\n            id: 'clerk-role',\n            name: 'barangay_clerk',\n            permissions: { residents_view: true },\n          },\n          hasPermission: () => true,\n        })}\n      >\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const PermissionBasedAccessDenied: Story = {\n  args: {\n    children: <ProtectedContent />,\n    requirePermission: 'users_manage',\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider\n        authValue={createMockAuthContext({\n          user: { id: 'user-123', email: 'user@barangay.gov.ph' },\n          userProfile: {\n            id: 'user-123',\n            email: 'user@barangay.gov.ph',\n            first_name: 'Carlos',\n            last_name: 'Mendoza',\n            barangay_code: '123456789',\n            role_id: 'clerk-role',\n            is_active: true,\n            created_at: '2024-01-01T00:00:00Z',\n            updated_at: '2024-01-01T00:00:00Z',\n          },\n          role: {\n            id: 'clerk-role',\n            name: 'barangay_clerk',\n            permissions: { residents_view: true },\n          },\n          hasPermission: () => false,\n        })}\n      >\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const ProfileLoadingError: Story = {\n  args: {\n    children: <ProtectedContent />,\n    requireRole: 'barangay_admin',\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider\n        authValue={createMockAuthContext({\n          user: { id: 'user-123', email: 'user@barangay.gov.ph' },\n          userProfile: null,\n          profileLoading: false,\n        })}\n      >\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const CustomFallback: Story = {\n  args: {\n    children: <ProtectedContent />,\n    requireRole: 'barangay_admin',\n    fallback: (\n      <div className=\"rounded-lg border border-yellow-200 bg-yellow-50 p-6 text-center\">\n        <div className=\"mb-2 text-yellow-600\">🔐</div>\n        <h3 className=\"mb-2 text-lg font-semibold text-yellow-800\">Custom Access Restricted</h3>\n        <p className=\"mb-4 text-yellow-700\">\n          This area requires administrator privileges to access barangay management features.\n        </p>\n        <button className=\"rounded bg-yellow-600 px-4 py-2 text-white hover:bg-yellow-700 dark:text-black\">\n          Request Access\n        </button>\n      </div>\n    ),\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider authValue={createMockAuthContext()}>\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const CustomLoadingComponent: Story = {\n  args: {\n    children: <ProtectedContent />,\n    loadingComponent: (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"text-center\">\n          <div className=\"mb-4 inline-block h-8 w-8 animate-spin rounded-full border-b-2 border-blue-600\"></div>\n          <p className=\"font-medium text-gray-600 dark:text-gray-400\">\n            Verifying your credentials...\n          </p>\n          <p className=\"mt-2 text-sm text-gray-500 dark:text-gray-500\">\n            Please wait while we check your access level\n          </p>\n        </div>\n      </div>\n    ),\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider authValue={createMockAuthContext({ loading: true })}>\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\n// Interactive testing stories\nexport const InteractiveRoleHierarchy: Story = {\n  name: '🧪 Interactive - Role Hierarchy Testing',\n  args: {\n    children: <ProtectedContent />,\n    requireRole: 'barangay_admin',\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider\n        authValue={createMockAuthContext({\n          user: { id: 'user-123', email: 'test@barangay.gov.ph' },\n          userProfile: {\n            id: 'user-123',\n            email: 'test@barangay.gov.ph',\n            first_name: 'Test',\n            last_name: 'User',\n            barangay_code: '123456789',\n            role_id: 'test-role',\n            is_active: true,\n            created_at: '2024-01-01T00:00:00Z',\n            updated_at: '2024-01-01T00:00:00Z',\n          },\n          role: {\n            id: 'test-role',\n            name: 'barangay_clerk',\n            permissions: { residents_view: true },\n          },\n          isInRole: () => false,\n        })}\n      >\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n  parameters: {\n    docs: {\n      description: {\n        story: `\nInteractive story to test role-based access control in a barangay management context.\n\n**Role Hierarchy in RBI System:**\n1. **super_admin** - System-wide administration\n2. **system_admin** - Multi-barangay management  \n3. **barangay_admin** - Full barangay administration\n4. **barangay_clerk** - Limited barangay operations\n\n**Test Scenarios:**\n- Clerk trying to access admin functions\n- Admin accessing all areas successfully\n- Cross-barangay access restrictions\n- Role elevation requirements\n        `,\n      },\n    },\n  },\n};\n\nexport const InteractivePermissionMatrix: Story = {\n  name: '🧪 Interactive - Permission Matrix',\n  args: {\n    children: <ProtectedContent />,\n    requirePermission: 'residents_create',\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider\n        authValue={createMockAuthContext({\n          user: { id: 'user-123', email: 'test@barangay.gov.ph' },\n          userProfile: {\n            id: 'user-123',\n            email: 'test@barangay.gov.ph',\n            first_name: 'Test',\n            last_name: 'User',\n            barangay_code: '123456789',\n            role_id: 'test-role',\n            is_active: true,\n            created_at: '2024-01-01T00:00:00Z',\n            updated_at: '2024-01-01T00:00:00Z',\n          },\n          role: {\n            id: 'test-role',\n            name: 'barangay_clerk',\n            permissions: { residents_view: true, residents_create: false },\n          },\n          hasPermission: () => false,\n        })}\n      >\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n  parameters: {\n    docs: {\n      description: {\n        story: `\nInteractive story to test granular permission-based access control.\n\n**Common RBI Permissions:**\n- \\`residents_view\\` - View resident records\n- \\`residents_create\\` - Add new residents\n- \\`residents_update\\` - Modify resident information\n- \\`residents_delete\\` - Remove resident records\n- \\`households_manage\\` - Manage household data\n- \\`reports_view\\` - Access reports and analytics\n- \\`users_manage\\` - Manage system users\n\n**Real-world Scenarios:**\n- Data entry clerks with limited permissions\n- Senior clerks with additional update rights\n- Administrators with full management access\n        `,\n      },\n    },\n  },\n};\n\nexport const InteractiveSecurityTesting: Story = {\n  name: '🧪 Interactive - Security Edge Cases',\n  args: {\n    children: <ProtectedContent />,\n    requireRole: 'barangay_admin',\n  },\n  decorators: [\n    Story => {\n      // Simulate various edge case scenarios\n      const scenarios = [\n        { user: null, loading: false }, // Not authenticated\n        { user: { id: 'user' }, userProfile: null, profileLoading: false }, // Profile missing\n        { user: { id: 'user' }, userProfile: { is_active: false }, loading: false }, // Inactive user\n        { user: { id: 'user' }, userProfile: { barangay_code: 'different' }, loading: false }, // Wrong barangay\n      ];\n\n      return (\n        <MockAuthProvider authValue={createMockAuthContext(scenarios[0])}>\n          <Story />\n        </MockAuthProvider>\n      );\n    },\n  ],\n  parameters: {\n    docs: {\n      description: {\n        story: `\nInteractive story to test security edge cases and boundary conditions.\n\n**Security Test Cases:**\n1. **Session Expiration** - User authenticated but session expires\n2. **Profile Corruption** - User exists but profile data is invalid\n3. **Inactive Users** - Authenticated but account is deactivated\n4. **Cross-Barangay Access** - User trying to access different barangay data\n5. **Permission Revocation** - Real-time permission changes\n6. **Network Interruption** - Connection lost during auth check\n\n**Expected Security Behavior:**\n- Always fail-safe (deny access when uncertain)\n- Clear error messages without exposing system internals\n- Proper cleanup of sensitive data on errors\n- Graceful handling of edge cases\n        `,\n      },\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/Sidebar/Sidebar.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/Table/Table.stories.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":353,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10373,10420],"text":"\n                  No contacts found matching &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10373,10420],"text":"\n                  No contacts found matching &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10373,10420],"text":"\n                  No contacts found matching &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10373,10420],"text":"\n                  No contacts found matching &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":353,"column":59,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10432,10450],"text":"&quot;\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10432,10450],"text":"&ldquo;\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10432,10450],"text":"&#34;\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10432,10450],"text":"&rdquo;\n                "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { action } from 'storybook/actions';\nimport { Table, TableBody, TableRow, TableCell, TableControls } from '@/components/organisms/Table';\n\nconst meta: Meta<typeof Table> = {\n  title: 'Organisms/Table',\n  component: Table,\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component: `\nA flexible, composable table component built from modular parts. This design allows for maximum flexibility in creating different table layouts. Key features include:\n\n- **Composable Architecture** - Built from Table, TableBody, TableRow, and TableCell components\n- **Flexible Cell Types** - Content, checkbox, and action cell variants\n- **Built-in Controls** - TableControls component with search, selection, and actions\n- **Responsive Design** - Adapts to different screen sizes\n- **Custom Styling** - Easy to theme and customize\n\nUnlike the DataTable organism which is more opinionated, this Table system gives you full control over the structure and behavior.\n        `,\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    className: {\n      control: 'text',\n      description: 'Additional CSS classes for the table',\n    },\n  },\n  subcomponents: {\n    TableBody,\n    TableRow,\n    TableCell,\n    TableControls,\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Mock data for stories\nconst mockContacts = [\n  {\n    id: 1,\n    name: 'Juan dela Cruz',\n    email: 'juan@email.com',\n    phone: '+63 912 345 6789',\n    role: 'Barangay Captain',\n    status: 'active',\n  },\n  {\n    id: 2,\n    name: 'Maria Santos',\n    email: 'maria@email.com',\n    phone: '+63 922 123 4567',\n    role: 'Secretary',\n    status: 'active',\n  },\n  {\n    id: 3,\n    name: 'Pedro Garcia',\n    email: 'pedro@email.com',\n    phone: '+63 933 987 6543',\n    role: 'Kagawad',\n    status: 'inactive',\n  },\n];\n\nexport const BasicTable: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: 'Basic table structure with simple content cells.',\n      },\n    },\n  },\n  render: () => (\n    <Table>\n      <TableBody>\n        <TableRow className=\"border-b bg-gray-50\">\n          <TableCell>\n            <strong>Name</strong>\n          </TableCell>\n          <TableCell>\n            <strong>Email</strong>\n          </TableCell>\n          <TableCell>\n            <strong>Role</strong>\n          </TableCell>\n        </TableRow>\n        {mockContacts.map(contact => (\n          <TableRow key={contact.id} className=\"border-b\">\n            <TableCell>{contact.name}</TableCell>\n            <TableCell>{contact.email}</TableCell>\n            <TableCell>{contact.role}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  ),\n};\n\nexport const WithCheckboxes: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: 'Table with checkbox selection for rows.',\n      },\n    },\n  },\n  render: () => {\n    const [selectedItems, setSelectedItems] = React.useState<number[]>([]);\n\n    const handleSelectAll = (checked: boolean) => {\n      if (checked) {\n        setSelectedItems(mockContacts.map(contact => contact.id));\n      } else {\n        setSelectedItems([]);\n      }\n    };\n\n    const handleSelectItem = (id: number, checked: boolean) => {\n      if (checked) {\n        setSelectedItems([...selectedItems, id]);\n      } else {\n        setSelectedItems(selectedItems.filter(itemId => itemId !== id));\n      }\n    };\n\n    return (\n      <Table>\n        <TableBody>\n          {/* Header Row */}\n          <TableRow className=\"border-b bg-gray-50\">\n            <TableCell\n              type=\"checkbox\"\n              checkbox={{\n                checked: selectedItems.length === mockContacts.length,\n                onChange: handleSelectAll,\n              }}\n            />\n            <TableCell>\n              <strong>Name</strong>\n            </TableCell>\n            <TableCell>\n              <strong>Email</strong>\n            </TableCell>\n            <TableCell>\n              <strong>Status</strong>\n            </TableCell>\n          </TableRow>\n\n          {/* Data Rows */}\n          {mockContacts.map(contact => (\n            <TableRow key={contact.id} className=\"border-b\">\n              <TableCell\n                type=\"checkbox\"\n                checkbox={{\n                  checked: selectedItems.includes(contact.id),\n                  onChange: checked => handleSelectItem(contact.id, checked),\n                }}\n              />\n              <TableCell>{contact.name}</TableCell>\n              <TableCell>{contact.email}</TableCell>\n              <TableCell>\n                <span\n                  className={`rounded-full px-2 py-1 text-xs ${\n                    contact.status === 'active'\n                      ? 'bg-green-100 text-green-800'\n                      : 'bg-gray-100 text-gray-800 dark:text-gray-200'\n                  }`}\n                >\n                  {contact.status}\n                </span>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n\n        {selectedItems.length > 0 && (\n          <div className=\"border-t border-blue-200 bg-blue-50 p-3\">\n            <p className=\"text-sm text-gray-800 dark:text-gray-200\">\n              {selectedItems.length} item(s) selected\n            </p>\n          </div>\n        )}\n      </Table>\n    );\n  },\n};\n\nexport const WithActions: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: 'Table with action buttons in each row.',\n      },\n    },\n  },\n  render: () => (\n    <Table>\n      <TableBody>\n        {/* Header Row */}\n        <TableRow className=\"border-b bg-gray-50\">\n          <TableCell>\n            <strong>Name</strong>\n          </TableCell>\n          <TableCell>\n            <strong>Email</strong>\n          </TableCell>\n          <TableCell>\n            <strong>Phone</strong>\n          </TableCell>\n          <TableCell>\n            <strong>Actions</strong>\n          </TableCell>\n        </TableRow>\n\n        {/* Data Rows */}\n        {mockContacts.map(contact => (\n          <TableRow key={contact.id} className=\"border-b hover:bg-gray-50\">\n            <TableCell>{contact.name}</TableCell>\n            <TableCell>{contact.email}</TableCell>\n            <TableCell>{contact.phone}</TableCell>\n            <TableCell type=\"action\" />\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  ),\n};\n\nexport const WithControls: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: 'Complete table with controls including search, selection, and actions.',\n      },\n    },\n  },\n  render: () => {\n    const [searchTerm, setSearchTerm] = React.useState('');\n    const [selectedItems, setSelectedItems] = React.useState<number[]>([]);\n\n    const filteredContacts = mockContacts.filter(\n      contact =>\n        contact.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        contact.email.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    const handleSelectAll = (checked: boolean) => {\n      if (checked) {\n        setSelectedItems(filteredContacts.map(contact => contact.id));\n      } else {\n        setSelectedItems([]);\n      }\n    };\n\n    const handleSelectItem = (id: number, checked: boolean) => {\n      if (checked) {\n        setSelectedItems([...selectedItems, id]);\n      } else {\n        setSelectedItems(selectedItems.filter(itemId => itemId !== id));\n      }\n    };\n\n    return (\n      <div className=\"space-y-4\">\n        <TableControls\n          selectAll={{\n            checked:\n              selectedItems.length === filteredContacts.length && filteredContacts.length > 0,\n            onChange: handleSelectAll,\n            label: 'Select all contacts',\n          }}\n          search={{\n            value: searchTerm,\n            onChange: setSearchTerm,\n            placeholder: 'Search contacts...',\n          }}\n          actions={\n            selectedItems.length > 0 && (\n              <div className=\"flex gap-2\">\n                <button\n                  onClick={() => action('bulk-delete')(selectedItems)}\n                  className=\"rounded bg-red-600 px-3 py-2 text-sm text-white hover:bg-red-700 dark:text-black\"\n                >\n                  Delete Selected\n                </button>\n                <button\n                  onClick={() => action('bulk-export')(selectedItems)}\n                  className=\"rounded bg-blue-600 px-3 py-2 text-sm text-white hover:bg-blue-700 dark:text-black\"\n                >\n                  Export Selected\n                </button>\n              </div>\n            )\n          }\n        />\n\n        <Table>\n          <TableBody>\n            {/* Header Row */}\n            <TableRow className=\"border-b bg-gray-50\">\n              <TableCell\n                type=\"checkbox\"\n                checkbox={{\n                  checked:\n                    selectedItems.length === filteredContacts.length && filteredContacts.length > 0,\n                  onChange: handleSelectAll,\n                }}\n              />\n              <TableCell>\n                <strong>Name</strong>\n              </TableCell>\n              <TableCell>\n                <strong>Email</strong>\n              </TableCell>\n              <TableCell>\n                <strong>Role</strong>\n              </TableCell>\n              <TableCell>\n                <strong>Actions</strong>\n              </TableCell>\n            </TableRow>\n\n            {/* Data Rows */}\n            {filteredContacts.length > 0 ? (\n              filteredContacts.map(contact => (\n                <TableRow key={contact.id} className=\"border-b hover:bg-gray-50\">\n                  <TableCell\n                    type=\"checkbox\"\n                    checkbox={{\n                      checked: selectedItems.includes(contact.id),\n                      onChange: checked => handleSelectItem(contact.id, checked),\n                    }}\n                  />\n                  <TableCell>{contact.name}</TableCell>\n                  <TableCell>{contact.email}</TableCell>\n                  <TableCell>{contact.role}</TableCell>\n                  <TableCell type=\"action\" />\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  className=\"py-8 text-center text-gray-500 dark:text-gray-500\"\n                  style={{ gridColumn: '1 / -1' }}\n                >\n                  No contacts found matching \"{searchTerm}\"\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n\n        {selectedItems.length > 0 && (\n          <div className=\"rounded border border-blue-200 bg-blue-50 p-3\">\n            <p className=\"text-sm text-gray-800 dark:text-gray-200\">\n              {selectedItems.length} of {filteredContacts.length} contacts selected\n            </p>\n          </div>\n        )}\n      </div>\n    );\n  },\n};\n\nexport const ResidentsTable: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: 'Real-world example: Barangay residents table with Filipino context.',\n      },\n    },\n  },\n  render: () => {\n    const residents = [\n      {\n        id: 1,\n        name: 'Juan Carlos de la Cruz',\n        age: 34,\n        address: 'Block 5 Lot 12, San Lorenzo Street',\n        occupation: 'Tricycle Driver',\n        household: 'HH-001',\n      },\n      {\n        id: 2,\n        name: 'Maria Esperanza Santos',\n        age: 29,\n        address: 'Unit 3B, Greenview Subdivision',\n        occupation: 'Elementary Teacher',\n        household: 'HH-002',\n      },\n      {\n        id: 3,\n        name: 'Pedro Antonio Rodriguez',\n        age: 45,\n        address: '123 Rizal Avenue, Zone 1',\n        occupation: 'Barangay Tanod',\n        household: 'HH-003',\n      },\n    ];\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">\n            Barangay San Lorenzo - Residents\n          </h2>\n          <button\n            onClick={() => action('add-resident')()}\n            className=\"rounded bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 dark:text-black\"\n          >\n            + Add Resident\n          </button>\n        </div>\n\n        <TableControls\n          search={{\n            value: '',\n            onChange: action('search-residents'),\n            placeholder: 'Search residents by name or address...',\n          }}\n        />\n\n        <Table className=\"overflow-hidden rounded-lg border border-gray-200\">\n          <TableBody>\n            {/* Header Row */}\n            <TableRow className=\"border-b bg-gray-100\">\n              <TableCell>\n                <strong>Full Name</strong>\n              </TableCell>\n              <TableCell>\n                <strong>Age</strong>\n              </TableCell>\n              <TableCell>\n                <strong>Address</strong>\n              </TableCell>\n              <TableCell>\n                <strong>Occupation</strong>\n              </TableCell>\n              <TableCell>\n                <strong>Household</strong>\n              </TableCell>\n              <TableCell>\n                <strong>Actions</strong>\n              </TableCell>\n            </TableRow>\n\n            {/* Data Rows */}\n            {residents.map(resident => (\n              <TableRow key={resident.id} className=\"border-b last:border-b-0 hover:bg-gray-50\">\n                <TableCell>\n                  <div className=\"font-medium text-gray-900 dark:text-gray-100\">\n                    {resident.name}\n                  </div>\n                </TableCell>\n                <TableCell>{resident.age} years old</TableCell>\n                <TableCell className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {resident.address}\n                </TableCell>\n                <TableCell>{resident.occupation}</TableCell>\n                <TableCell>\n                  <span className=\"rounded bg-blue-100 px-2 py-1 font-mono text-sm text-gray-800 dark:text-gray-200\">\n                    {resident.household}\n                  </span>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex gap-1\">\n                    <button\n                      onClick={() => action('view-resident')(resident)}\n                      className=\"rounded bg-gray-100 px-2 py-1 text-xs text-gray-700 hover:bg-gray-200 dark:text-gray-300\"\n                    >\n                      View\n                    </button>\n                    <button\n                      onClick={() => action('edit-resident')(resident)}\n                      className=\"rounded bg-blue-100 px-2 py-1 text-xs text-gray-700 hover:bg-blue-200 dark:text-gray-300\"\n                    >\n                      Edit\n                    </button>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n\n        <div className=\"text-sm text-gray-500 dark:text-gray-500\">\n          Showing {residents.length} residents • Last updated: {new Date().toLocaleDateString()}\n        </div>\n      </div>\n    );\n  },\n};\n\nexport const EmptyState: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: 'Table with empty state messaging.',\n      },\n    },\n  },\n  render: () => (\n    <Table>\n      <TableBody>\n        <TableRow className=\"border-b bg-gray-50\">\n          <TableCell>\n            <strong>Name</strong>\n          </TableCell>\n          <TableCell>\n            <strong>Email</strong>\n          </TableCell>\n          <TableCell>\n            <strong>Role</strong>\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell\n            className=\"py-12 text-center text-gray-500 dark:text-gray-500\"\n            style={{ gridColumn: '1 / -1' }}\n          >\n            <div>\n              <div className=\"mb-2 text-4xl\">📋</div>\n              <div className=\"font-medium\">No data available</div>\n              <div className=\"mt-1 text-sm\">Add some items to see them here</div>\n            </div>\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  ),\n};\n\nexport const CustomStyling: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: 'Table with custom styling and colors for different contexts.',\n      },\n    },\n  },\n  render: () => (\n    <div className=\"space-y-6\">\n      {/* Success Theme */}\n      <div>\n        <h3 className=\"mb-3 text-lg font-semibold text-green-800\">Active Residents</h3>\n        <Table className=\"overflow-hidden rounded-lg border-2 border-green-200\">\n          <TableBody>\n            <TableRow className=\"border-b border-green-200 bg-green-100\">\n              <TableCell>\n                <strong className=\"text-green-900\">Name</strong>\n              </TableCell>\n              <TableCell>\n                <strong className=\"text-green-900\">Status</strong>\n              </TableCell>\n            </TableRow>\n            {mockContacts\n              .filter(c => c.status === 'active')\n              .map(contact => (\n                <TableRow key={contact.id} className=\"border-b border-green-200 hover:bg-green-50\">\n                  <TableCell className=\"text-green-900\">{contact.name}</TableCell>\n                  <TableCell>\n                    <span className=\"rounded-full bg-green-200 px-2 py-1 text-xs text-green-800\">\n                      Active\n                    </span>\n                  </TableCell>\n                </TableRow>\n              ))}\n          </TableBody>\n        </Table>\n      </div>\n\n      {/* Warning Theme */}\n      <div>\n        <h3 className=\"mb-3 text-lg font-semibold text-red-800\">Inactive Residents</h3>\n        <Table className=\"overflow-hidden rounded-lg border-2 border-red-200\">\n          <TableBody>\n            <TableRow className=\"border-b border-red-200 bg-red-100\">\n              <TableCell>\n                <strong className=\"text-red-900\">Name</strong>\n              </TableCell>\n              <TableCell>\n                <strong className=\"text-red-900\">Status</strong>\n              </TableCell>\n            </TableRow>\n            {mockContacts\n              .filter(c => c.status === 'inactive')\n              .map(contact => (\n                <TableRow key={contact.id} className=\"border-b border-red-200 hover:bg-red-50\">\n                  <TableCell className=\"text-red-900\">{contact.name}</TableCell>\n                  <TableCell>\n                    <span className=\"rounded-full bg-red-200 px-2 py-1 text-xs text-red-800\">\n                      Inactive\n                    </span>\n                  </TableCell>\n                </TableRow>\n              ))}\n          </TableBody>\n        </Table>\n      </div>\n    </div>\n  ),\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/organisms/UserProfile/UserProfile.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fn' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'authValue' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { fn } from 'storybook/test';\nimport UserProfile from '@/components/organisms/UserProfile';\n\ninterface MockAuthValue {\n  user: unknown;\n  userProfile: unknown;\n  role: unknown;\n  loading: boolean;\n  profileLoading: boolean;\n  signOut: () => Promise<void>;\n}\n\n// Mock AuthContext\nconst createMockAuthContext = (overrides = {}) => ({\n  user: null,\n  userProfile: null,\n  role: null,\n  loading: false,\n  profileLoading: false,\n  signOut: () => Promise.resolve(),\n  ...overrides,\n});\n\nconst MockAuthProvider = ({\n  children,\n  authValue,\n}: {\n  children: React.ReactNode;\n  authValue: MockAuthValue;\n}) => {\n  // Note: AuthContext mocking would be handled by Storybook\n  console.log('AuthContext mock would be configured here');\n\n  return <>{children}</>;\n};\n\n// Sample user profiles for different roles\nconst sampleProfiles = {\n  barangayAdmin: {\n    user: {\n      id: 'admin-123',\n      email: 'captain.santos@barangay123.gov.ph',\n    },\n    userProfile: {\n      id: 'admin-123',\n      email: 'captain.santos@barangay123.gov.ph',\n      first_name: 'Maria',\n      last_name: 'Santos',\n      barangay_code: '137404001',\n      role_id: 'admin-role',\n      is_active: true,\n      created_at: '2024-01-15T08:00:00Z',\n      updated_at: '2024-01-20T16:30:00Z',\n    },\n    role: {\n      id: 'admin-role',\n      name: 'Barangay Captain',\n      permissions: { all: true },\n    },\n  },\n  barangayClerk: {\n    user: {\n      id: 'clerk-456',\n      email: 'j.rivera@barangay123.gov.ph',\n    },\n    userProfile: {\n      id: 'clerk-456',\n      email: 'j.rivera@barangay123.gov.ph',\n      first_name: 'Juan',\n      last_name: 'Rivera',\n      barangay_code: '137404001',\n      role_id: 'clerk-role',\n      is_active: true,\n      created_at: '2024-02-01T09:15:00Z',\n      updated_at: '2024-02-10T14:20:00Z',\n    },\n    role: {\n      id: 'clerk-role',\n      name: 'Barangay Clerk',\n      permissions: {\n        residents_view: true,\n        residents_create: true,\n        households_view: true,\n        reports_view: true,\n      },\n    },\n  },\n  dataEncoder: {\n    user: {\n      id: 'encoder-789',\n      email: 'a.garcia@barangay123.gov.ph',\n    },\n    userProfile: {\n      id: 'encoder-789',\n      email: 'a.garcia@barangay123.gov.ph',\n      first_name: 'Ana',\n      last_name: 'Garcia',\n      barangay_code: '137404001',\n      role_id: 'encoder-role',\n      is_active: true,\n      created_at: '2024-03-01T10:00:00Z',\n      updated_at: '2024-03-05T11:45:00Z',\n    },\n    role: {\n      id: 'encoder-role',\n      name: 'Data Encoder',\n      permissions: {\n        residents_view: true,\n        residents_create: true,\n      },\n    },\n  },\n};\n\nconst meta: Meta<typeof UserProfile> = {\n  title: 'Organisms/UserProfile',\n  component: UserProfile,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: `\nUser profile component that displays authenticated user information and provides access to profile management features.\n\n**Features:**\n- Display user personal information (name, email, role)\n- Show barangay assignment and status\n- Compact and full-size display modes\n- Dropdown menu with user actions\n- Role-based information display\n- Sign out functionality\n- Loading states during profile fetching\n\n**Display Modes:**\n- **Compact Mode:** Minimal profile info with dropdown menu (ideal for navigation bars)\n- **Full Mode:** Complete profile information with detailed barangay assignments\n\n**Security Considerations:**\n- Only displays information for authenticated users\n- Shows appropriate loading states\n- Handles missing profile data gracefully\n- Secure sign-out functionality\n- Role-based information visibility\n\n**Common Usage:**\n- Navigation bar user menu\n- Profile management pages\n- User account settings\n- Administrative user listings\n        `,\n      },\n    },\n  },\n  argTypes: {\n    compact: {\n      description: 'Whether to show compact profile view (suitable for navigation)',\n      control: { type: 'boolean' },\n      defaultValue: false,\n    },\n    showBarangay: {\n      description: 'Whether to display barangay assignment information',\n      control: { type: 'boolean' },\n      defaultValue: true,\n    },\n    className: {\n      description: 'Additional CSS classes to apply to the component',\n      control: { type: 'text' },\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof UserProfile>;\n\nexport const LoadingState: Story = {\n  args: {\n    compact: false,\n    showBarangay: true,\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider authValue={createMockAuthContext({ loading: true })}>\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const ProfileLoadingState: Story = {\n  args: {\n    compact: false,\n    showBarangay: true,\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider\n        authValue={createMockAuthContext({\n          user: { id: 'user-123' },\n          profileLoading: true,\n        })}\n      >\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const NoUserAuthenticated: Story = {\n  args: {\n    compact: false,\n    showBarangay: true,\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider authValue={createMockAuthContext()}>\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const BarangayCaptainProfile: Story = {\n  args: {\n    compact: false,\n    showBarangay: true,\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider authValue={createMockAuthContext(sampleProfiles.barangayAdmin)}>\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const BarangayClerkProfile: Story = {\n  args: {\n    compact: false,\n    showBarangay: true,\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider authValue={createMockAuthContext(sampleProfiles.barangayClerk)}>\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const DataEncoderProfile: Story = {\n  args: {\n    compact: false,\n    showBarangay: true,\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider authValue={createMockAuthContext(sampleProfiles.dataEncoder)}>\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const CompactProfileView: Story = {\n  args: {\n    compact: true,\n    showBarangay: true,\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider authValue={createMockAuthContext(sampleProfiles.barangayAdmin)}>\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const CompactWithDropdown: Story = {\n  args: {\n    compact: true,\n    showBarangay: true,\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider authValue={createMockAuthContext(sampleProfiles.barangayClerk)}>\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const WithoutBarangayAssignment: Story = {\n  args: {\n    compact: false,\n    showBarangay: true,\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider\n        authValue={createMockAuthContext({\n          ...sampleProfiles.barangayClerk,\n          userProfile: {\n            ...sampleProfiles.barangayClerk.userProfile,\n            barangay_code: '',\n          },\n        })}\n      >\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const HideBarangayInfo: Story = {\n  args: {\n    compact: false,\n    showBarangay: false,\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider authValue={createMockAuthContext(sampleProfiles.barangayAdmin)}>\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const CustomClassName: Story = {\n  args: {\n    compact: false,\n    showBarangay: true,\n    className: 'border-2 border-blue-500 bg-blue-50',\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider authValue={createMockAuthContext(sampleProfiles.barangayClerk)}>\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n};\n\nexport const SignOutAction: Story = {\n  args: {\n    compact: false,\n    showBarangay: true,\n  },\n  decorators: [\n    Story => {\n      const mockSignOut = () => Promise.resolve();\n      const authValue = {\n        ...createMockAuthContext(sampleProfiles.barangayAdmin),\n        signOut: mockSignOut,\n      };\n\n      return (\n        <MockAuthProvider authValue={authValue}>\n          <Story />\n        </MockAuthProvider>\n      );\n    },\n  ],\n};\n\n// Interactive testing stories\nexport const InteractiveDropdownNavigation: Story = {\n  name: '🧪 Interactive - Dropdown Navigation',\n  args: {\n    compact: true,\n    showBarangay: true,\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider authValue={createMockAuthContext(sampleProfiles.barangayAdmin)}>\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n  parameters: {\n    docs: {\n      description: {\n        story: `\nInteractive story to test dropdown functionality and navigation.\n\n**Test Steps:**\n1. Click on the profile button to open dropdown\n2. Verify all profile information is displayed correctly\n3. Test keyboard navigation through dropdown items\n4. Click outside to close dropdown\n5. Test sign out functionality\n\n**Expected Behavior:**\n- Dropdown opens and closes smoothly\n- All user information is correctly displayed\n- Keyboard navigation works properly\n- Click outside closes dropdown\n- Sign out triggers proper authentication cleanup\n        `,\n      },\n    },\n  },\n};\n\nexport const InteractiveRoleComparison: Story = {\n  name: '🧪 Interactive - Role-Based Display',\n  args: {\n    compact: false,\n    showBarangay: true,\n  },\n  decorators: [\n    Story => {\n      // Cycle through different user roles\n      const roles = [\n        sampleProfiles.barangayAdmin,\n        sampleProfiles.barangayClerk,\n        sampleProfiles.dataEncoder,\n      ];\n      let currentRoleIndex = 0;\n\n      const cycleRole = () => {\n        currentRoleIndex = (currentRoleIndex + 1) % roles.length;\n        // In a real implementation, this would trigger a re-render with new role\n      };\n\n      return (\n        <div>\n          <MockAuthProvider authValue={createMockAuthContext(roles[0])}>\n            <Story />\n          </MockAuthProvider>\n          <button\n            onClick={cycleRole}\n            className=\"mt-4 rounded-sm bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 dark:text-black dark:text-white\"\n          >\n            Switch User Role\n          </button>\n        </div>\n      );\n    },\n  ],\n  parameters: {\n    docs: {\n      description: {\n        story: `\nInteractive story to compare how different user roles are displayed.\n\n**User Roles to Test:**\n1. **Barangay Captain** - Highest authority, full system access\n2. **Barangay Clerk** - Administrative functions, moderate access\n3. **Data Encoder** - Limited to data entry tasks\n\n**Role-Specific Features:**\n- Different permission badges\n- Varying access levels indicated\n- Role-appropriate information display\n- Customized user interface elements\n\n**Testing Points:**\n- Role name accuracy\n- Permission indicators\n- Visual hierarchy and emphasis\n- Appropriate action availability\n        `,\n      },\n    },\n  },\n};\n\nexport const InteractiveBarangayManagement: Story = {\n  name: '🧪 Interactive - Barangay Assignment',\n  args: {\n    compact: false,\n    showBarangay: true,\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider\n        authValue={createMockAuthContext({\n          ...sampleProfiles.barangayAdmin,\n          // Mock multiple barangay accounts for testing\n          barangayAccounts: [\n            {\n              id: 'account-1',\n              barangay_code: '137404001',\n              role: 'admin',\n              status: 'active',\n              is_primary: true,\n            },\n            {\n              id: 'account-2',\n              barangay_code: '137404002',\n              role: 'clerk',\n              status: 'pending',\n              is_primary: false,\n            },\n          ],\n        })}\n      >\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n  parameters: {\n    docs: {\n      description: {\n        story: `\nInteractive story to test barangay assignment features.\n\n**Barangay Assignment Scenarios:**\n1. **Single Barangay Assignment** - Most common case\n2. **Multiple Barangay Access** - For regional administrators\n3. **No Assignment** - New users awaiting assignment\n4. **Pending Assignments** - Awaiting approval\n\n**Real-world Use Cases:**\n- Barangay officials assigned to specific communities\n- Regional coordinators managing multiple barangays\n- New employees awaiting barangay assignment\n- Temporary assignments for special projects\n\n**Testing Focus:**\n- Assignment status indicators\n- Primary vs secondary assignments\n- Access level implications\n- Visual hierarchy of assignments\n        `,\n      },\n    },\n  },\n};\n\nexport const InteractiveAccessibilityTesting: Story = {\n  name: '🧪 Interactive - Accessibility Features',\n  args: {\n    compact: true,\n    showBarangay: true,\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider authValue={createMockAuthContext(sampleProfiles.barangayClerk)}>\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n  parameters: {\n    docs: {\n      description: {\n        story: `\nInteractive story to test accessibility features of the UserProfile component.\n\n**Accessibility Test Cases:**\n1. **Keyboard Navigation**\n   - Tab through all interactive elements\n   - Use Enter/Space to activate buttons\n   - Escape key closes dropdown menus\n\n2. **Screen Reader Support**\n   - Proper ARIA labels on all elements\n   - Role announcements for interactive areas\n   - Status updates announced appropriately\n\n3. **Visual Accessibility**\n   - High contrast colors for text and backgrounds\n   - Focus indicators visible and distinct\n   - Text sizing respects user preferences\n\n4. **Motor Accessibility**\n   - Click targets meet minimum size requirements\n   - Hover states don't interfere with functionality\n   - Alternative input methods supported\n\n**Government Accessibility Standards:**\n- Compliant with WCAG 2.1 Level AA\n- Section 508 compliance for government systems\n- Local accessibility requirements for public services\n        `,\n      },\n    },\n  },\n};\n\nexport const InteractiveSecurityScenarios: Story = {\n  name: '🧪 Interactive - Security Testing',\n  args: {\n    compact: false,\n    showBarangay: true,\n  },\n  decorators: [\n    Story => (\n      <MockAuthProvider authValue={createMockAuthContext(sampleProfiles.barangayAdmin)}>\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n  parameters: {\n    docs: {\n      description: {\n        story: `\nInteractive story to test security-related scenarios.\n\n**Security Test Scenarios:**\n\n1. **Session Management**\n   - Test session timeout handling\n   - Verify secure sign-out process\n   - Check token refresh behavior\n\n2. **Information Disclosure**\n   - Ensure sensitive data is properly protected\n   - Verify role-based information hiding\n   - Test barangay code confidentiality\n\n3. **Cross-User Information Leakage**\n   - Profile data isolation between users\n   - Proper cleanup on user switching\n   - Memory management for sensitive data\n\n4. **Authentication State Edge Cases**\n   - Expired authentication tokens\n   - Corrupted profile data\n   - Network interruption during profile load\n\n**Barangay-Specific Security:**\n- Resident information protection\n- Government data confidentiality\n- Administrative function access control\n        `,\n      },\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/templates/AppShell/AppShell.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/templates/DashboardLayout/DashboardLayout.stories.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'mockAuthValue'. Either include it or remove the dependency array.","line":45,"column":6,"nodeType":"ArrayExpression","endLine":45,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [mockAuthValue]","fix":{"range":[1198,1200],"text":"[mockAuthValue]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":215,"column":65,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7602,7849],"text":"\n            This dashboard provides an overview of your barangay&apos;s resident data and system status.\n            Use the navigation menu to access different modules for managing residents, households,\n            and generating reports.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7602,7849],"text":"\n            This dashboard provides an overview of your barangay&lsquo;s resident data and system status.\n            Use the navigation menu to access different modules for managing residents, households,\n            and generating reports.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7602,7849],"text":"\n            This dashboard provides an overview of your barangay&#39;s resident data and system status.\n            Use the navigation menu to access different modules for managing residents, households,\n            and generating reports.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7602,7849],"text":"\n            This dashboard provides an overview of your barangay&rsquo;s resident data and system status.\n            Use the navigation menu to access different modules for managing residents, households,\n            and generating reports.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":670,"column":33,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[24705,24965],"text":"\n                The system automatically detects the environment and displays appropriate indicators\n                in the sidebar footer. This helps developers and testers quickly identify which\n                environment they&apos;re working in.\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[24705,24965],"text":"\n                The system automatically detects the environment and displays appropriate indicators\n                in the sidebar footer. This helps developers and testers quickly identify which\n                environment they&lsquo;re working in.\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[24705,24965],"text":"\n                The system automatically detects the environment and displays appropriate indicators\n                in the sidebar footer. This helps developers and testers quickly identify which\n                environment they&#39;re working in.\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[24705,24965],"text":"\n                The system automatically detects the environment and displays appropriate indicators\n                in the sidebar footer. This helps developers and testers quickly identify which\n                environment they&rsquo;re working in.\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport React, { useState } from 'react';\nimport DashboardLayout from '@/components/templates/DashboardLayout';\n\n// Mock the authentication context for Storybook\nconst MockAuthProvider = ({ children }: { children: React.ReactNode }) => {\n  // Create a mock auth context value\n  const mockAuthValue = {\n    user: {\n      id: 'mock-user-id',\n      email: 'barangay.admin@example.com',\n      user_metadata: {\n        first_name: 'John',\n        last_name: 'Doe',\n      },\n    },\n    userProfile: {\n      id: 'profile-id',\n      first_name: 'John',\n      last_name: 'Doe',\n      email: 'barangay.admin@example.com',\n      barangay_code: '137404001',\n      role_id: 'admin-role',\n    },\n    role: {\n      id: 'admin-role',\n      name: 'Barangay Administrator',\n      permissions: [],\n    },\n    signOut: async () => {\n      console.log('Mock sign out');\n    },\n    loading: false,\n    initialized: true,\n  };\n\n  // Mock the useAuth hook\n  React.useEffect(() => {\n    const originalUseAuth = (window as any).useAuth;\n    (window as any).useAuth = () => mockAuthValue;\n\n    return () => {\n      (window as any).useAuth = originalUseAuth;\n    };\n  }, []);\n\n  return <>{children}</>;\n};\n\n// Create a wrapper component that handles the auth context and search state\nconst DashboardLayoutWrapper = ({\n  children,\n  showSearch = true,\n  initialSearchTerm = '',\n}: {\n  children: React.ReactNode;\n  showSearch?: boolean;\n  initialSearchTerm?: string;\n}) => {\n  const [searchTerm, setSearchTerm] = useState(initialSearchTerm);\n\n  return (\n    <MockAuthProvider>\n      <DashboardLayout\n        searchTerm={showSearch ? searchTerm : undefined}\n        onSearchChange={showSearch ? setSearchTerm : undefined}\n      >\n        {children}\n      </DashboardLayout>\n    </MockAuthProvider>\n  );\n};\n\nconst meta = {\n  title: 'Templates/DashboardLayout',\n  component: DashboardLayout,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'Dashboard Layout Component - A comprehensive dashboard layout with sidebar navigation, search functionality, user dropdown with barangay information, and environment indicators. Features authentication integration and responsive design.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n  decorators: [\n    Story => (\n      <MockAuthProvider>\n        <Story />\n      </MockAuthProvider>\n    ),\n  ],\n} satisfies Meta<typeof DashboardLayout>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Mock content components\nconst MockDashboardContent = () => (\n  <div className=\"space-y-8 p-6\">\n    <div>\n      <h1 className=\"text-3xl font-bold text-gray-600 dark:text-gray-400\">Dashboard Overview</h1>\n      <p className=\"mt-2 text-gray-600 dark:text-gray-400\">Barangay Records Management System</p>\n    </div>\n\n    <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-4\">\n      {[\n        { title: 'Total Residents', value: '2,847', trend: '+12.5%' },\n        { title: 'Active Households', value: '1,205', trend: '+8.2%' },\n        { title: 'Registered Voters', value: '1,876', trend: '+3.1%' },\n        { title: 'Pending Applications', value: '47', trend: '-15.3%' },\n      ].map((stat, index) => (\n        <div\n          key={index}\n          className=\"rounded-xl border border-gray-300 bg-white p-6 shadow-xs dark:border-gray-600 dark:bg-gray-800\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">{stat.title}</p>\n              <p className=\"mt-1 text-2xl font-bold text-gray-600 dark:text-gray-400\">\n                {stat.value}\n              </p>\n            </div>\n            <span\n              className={`rounded-full px-2 py-1 text-xs font-medium ${\n                stat.trend.startsWith('+')\n                  ? 'bg-green-100 text-green-800'\n                  : 'bg-red-100 text-red-800'\n              }`}\n            >\n              {stat.trend}\n            </span>\n          </div>\n        </div>\n      ))}\n    </div>\n\n    <div className=\"grid grid-cols-1 gap-8 lg:grid-cols-2\">\n      <div className=\"rounded-xl border border-gray-300 bg-white p-6 shadow-xs dark:border-gray-600 dark:bg-gray-800\">\n        <h3 className=\"mb-4 text-lg font-semibold text-gray-600 dark:text-gray-400\">\n          Recent Registrations\n        </h3>\n        <div className=\"space-y-4\">\n          {[\n            { name: 'Maria Elena Santos', type: 'New Resident', time: '2 hours ago' },\n            { name: 'Rodriguez Family', type: 'Household Update', time: '4 hours ago' },\n            { name: 'Juan Carlos Mendoza', type: 'Address Change', time: '6 hours ago' },\n            { name: 'Ana Beatriz Cruz', type: 'New Voter Registration', time: '1 day ago' },\n          ].map((activity, index) => (\n            <div key={index} className=\"flex items-start gap-3\">\n              <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-full bg-blue-100\">\n                <div className=\"h-3 w-3 rounded-full bg-blue-600\"></div>\n              </div>\n              <div className=\"min-w-0 flex-1\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  {activity.name}\n                </p>\n                <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                  {activity.type} • {activity.time}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"rounded-xl border border-gray-300 bg-white p-6 shadow-xs dark:border-gray-600 dark:bg-gray-800\">\n        <h3 className=\"mb-4 text-lg font-semibold text-gray-600 dark:text-gray-400\">\n          System Health\n        </h3>\n        <div className=\"space-y-4\">\n          {[\n            { metric: 'Database Status', status: 'Online', color: 'green' },\n            { metric: 'API Response Time', status: '142ms', color: 'green' },\n            { metric: 'Active Sessions', status: '23 users', color: 'blue' },\n            { metric: 'Last Backup', status: '2 hours ago', color: 'green' },\n          ].map((health, index) => (\n            <div key={index} className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600 dark:text-gray-400 dark:text-gray-600\">\n                {health.metric}\n              </span>\n              <div className=\"flex items-center gap-2\">\n                <div className={`h-2 w-2 rounded-full bg-${health.color}-500`}></div>\n                <span className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  {health.status}\n                </span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n\n    <div className=\"rounded-xl border border-indigo-200 bg-linear-to-r from-indigo-50 to-purple-50 p-6\">\n      <div className=\"flex items-start gap-4\">\n        <div className=\"flex h-12 w-12 shrink-0 items-center justify-center rounded-xl bg-indigo-100\">\n          <svg\n            className=\"h-6 w-6 text-indigo-600\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n            />\n          </svg>\n        </div>\n        <div>\n          <h4 className=\"mb-2 font-semibold text-indigo-900\">Welcome to Citizenly</h4>\n          <p className=\"text-sm leading-relaxed text-indigo-700\">\n            This dashboard provides an overview of your barangay's resident data and system status.\n            Use the navigation menu to access different modules for managing residents, households,\n            and generating reports.\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nconst MockResidentsContent = () => (\n  <div className=\"space-y-6 p-6\">\n    <div className=\"flex items-center justify-between\">\n      <div>\n        <h1 className=\"text-3xl font-bold text-gray-600 dark:text-gray-400\">Residents Directory</h1>\n        <p className=\"mt-1 text-gray-600 dark:text-gray-400\">\n          Manage resident records and profiles\n        </p>\n      </div>\n      <div className=\"flex gap-3\">\n        <button className=\"rounded-lg border border-gray-300 px-4 py-2 text-gray-600 transition-colors hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-400\">\n          Export Data\n        </button>\n        <button className=\"rounded-lg bg-blue-600 px-4 py-2 text-white transition-colors hover:bg-blue-600 dark:text-black\">\n          Add New Resident\n        </button>\n      </div>\n    </div>\n\n    <div className=\"overflow-hidden rounded-xl border border-gray-300 bg-white dark:border-gray-600 dark:bg-gray-800\">\n      <div className=\"border-b border-gray-300 bg-gray-100 p-4 dark:border-gray-600 dark:bg-gray-700\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"font-semibold text-gray-600 dark:text-gray-400\">Active Residents</h3>\n          <div className=\"flex items-center gap-3\">\n            <select className=\"rounded-sm border border-gray-300 bg-white px-3 py-2 text-sm text-gray-600 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-400\">\n              <option>All Status</option>\n              <option>Active</option>\n              <option>Inactive</option>\n            </select>\n            <select className=\"rounded-sm border border-gray-300 bg-white px-3 py-2 text-sm text-gray-600 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-400\">\n              <option>All Ages</option>\n              <option>Minors (0-17)</option>\n              <option>Adults (18-59)</option>\n              <option>Seniors (60+)</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"divide-default divide-y\">\n        {[\n          {\n            name: 'Juan Antonio Dela Cruz',\n            age: 34,\n            address: 'Block 5 Lot 12, Sunrise Village',\n            status: 'Active',\n            voters: true,\n          },\n          {\n            name: 'Maria Cristina Santos',\n            age: 29,\n            address: 'Unit 4B, Mabuhay Apartments',\n            status: 'Active',\n            voters: true,\n          },\n          {\n            name: 'Pedro Miguel Rodriguez',\n            age: 45,\n            address: '123 Sampaguita Street',\n            status: 'Active',\n            voters: true,\n          },\n          {\n            name: 'Ana Lucia Gonzales',\n            age: 67,\n            address: '456 Rose Garden Road',\n            status: 'Active',\n            voters: false,\n          },\n          {\n            name: 'Carlos Eduardo Reyes',\n            age: 22,\n            address: 'Block 2 Lot 8, Green Valley',\n            status: 'Inactive',\n            voters: true,\n          },\n        ].map((resident, index) => (\n          <div key={index} className=\"p-4 transition-colors hover:bg-gray-50 dark:bg-gray-700\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"flex h-12 w-12 items-center justify-center rounded-full bg-blue-100\">\n                  <span className=\"font-semibold text-gray-600 dark:text-gray-400\">\n                    {resident.name\n                      .split(' ')\n                      .slice(0, 2)\n                      .map(n => n[0])\n                      .join('')}\n                  </span>\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-gray-600 dark:text-gray-400\">{resident.name}</h4>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 dark:text-gray-600\">\n                    Age {resident.age} • {resident.address}\n                  </p>\n                  <div className=\"mt-1 flex items-center gap-2\">\n                    <span\n                      className={`inline-flex items-center rounded-full px-2 py-0.5 text-xs font-medium ${\n                        resident.status === 'Active'\n                          ? 'bg-green-100 text-green-800'\n                          : 'bg-gray-100 text-gray-800 dark:text-gray-200'\n                      }`}\n                    >\n                      {resident.status}\n                    </span>\n                    {resident.voters && (\n                      <span className=\"inline-flex items-center rounded-full bg-blue-100 px-2 py-0.5 text-xs font-medium text-gray-800 dark:text-gray-200\">\n                        Registered Voter\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <button className=\"rounded-lg p-2 text-gray-600 transition-colors hover:bg-gray-50 hover:text-gray-600 dark:bg-gray-700 dark:text-gray-400\">\n                  <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\"\n                    />\n                  </svg>\n                </button>\n                <button className=\"rounded-lg p-2 text-gray-600 transition-colors hover:bg-gray-50 hover:text-gray-600 dark:bg-gray-700 dark:text-gray-400\">\n                  <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z\"\n                    />\n                  </svg>\n                </button>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  </div>\n);\n\n// Default story with dashboard content\nexport const Default: Story = {\n  render: () => (\n    <DashboardLayoutWrapper>\n      <MockDashboardContent />\n    </DashboardLayoutWrapper>\n  ),\n};\n\n// With search functionality\nexport const WithSearch: Story = {\n  render: () => (\n    <DashboardLayoutWrapper showSearch={true} initialSearchTerm=\"\">\n      <div className=\"space-y-6 p-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-600 dark:text-gray-400\">Search Results</h1>\n          <p className=\"mt-1 text-gray-600 dark:text-gray-400\">\n            Search through residents, households, and records\n          </p>\n        </div>\n\n        <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4\">\n          <div className=\"flex items-start gap-3\">\n            <svg\n              className=\"mt-0.5 h-5 w-5 shrink-0 text-gray-600 dark:text-gray-400\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n              />\n            </svg>\n            <div>\n              <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">Search Functionality</h3>\n              <p className=\"mt-1 text-sm text-gray-700 dark:text-gray-300\">\n                Use the search bar in the header to find residents, households, addresses, or any\n                other records. The search supports partial matches and filters across all data\n                types.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-6 md:grid-cols-3\">\n          {[\n            {\n              title: 'Recent Searches',\n              items: ['Santos family', 'Block 5 residents', '09171234567'],\n            },\n            {\n              title: 'Popular Filters',\n              items: ['Active voters', 'Senior citizens', 'New registrations'],\n            },\n            {\n              title: 'Quick Actions',\n              items: ['Add resident', 'Create household', 'Generate report'],\n            },\n          ].map((section, index) => (\n            <div\n              key={index}\n              className=\"rounded-lg border border-gray-300 bg-white p-4 dark:border-gray-600 dark:bg-gray-800\"\n            >\n              <h3 className=\"mb-3 font-medium text-gray-600 dark:text-gray-400\">{section.title}</h3>\n              <ul className=\"space-y-2\">\n                {section.items.map((item, itemIndex) => (\n                  <li\n                    key={itemIndex}\n                    className=\"cursor-pointer text-sm text-gray-600 hover:text-gray-600 dark:text-gray-400\"\n                  >\n                    {item}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ))}\n        </div>\n      </div>\n    </DashboardLayoutWrapper>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'DashboardLayout with search functionality enabled. The search bar in the header allows users to search across all system data.',\n      },\n    },\n  },\n};\n\n// Residents page layout\nexport const ResidentsPage: Story = {\n  render: () => (\n    <DashboardLayoutWrapper>\n      <MockResidentsContent />\n    </DashboardLayoutWrapper>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'DashboardLayout displaying the residents management page with detailed resident cards and filtering options.',\n      },\n    },\n  },\n};\n\n// Mobile view\nexport const MobileView: Story = {\n  render: () => (\n    <DashboardLayoutWrapper>\n      <MockDashboardContent />\n    </DashboardLayoutWrapper>\n  ),\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile',\n    },\n    docs: {\n      description: {\n        story:\n          'DashboardLayout optimized for mobile devices. Note: The sidebar is fixed and may need scrolling on very small screens.',\n      },\n    },\n  },\n};\n\n// Tablet view\nexport const TabletView: Story = {\n  render: () => (\n    <DashboardLayoutWrapper>\n      <MockDashboardContent />\n    </DashboardLayoutWrapper>\n  ),\n  parameters: {\n    viewport: {\n      defaultViewport: 'tablet',\n    },\n    docs: {\n      description: {\n        story:\n          'DashboardLayout on tablet-sized screens, showing how the layout adapts to medium screen sizes.',\n      },\n    },\n  },\n};\n\n// User dropdown showcase\nexport const UserDropdownShowcase: Story = {\n  render: () => (\n    <DashboardLayoutWrapper>\n      <div className=\"space-y-6 p-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-600 dark:text-gray-400\">\n            User Profile & Barangay Information\n          </h1>\n          <p className=\"mt-1 text-gray-600 dark:text-gray-400\">\n            The user dropdown shows detailed profile and barangay assignment information\n          </p>\n        </div>\n\n        <div className=\"rounded-xl border border-green-200 bg-linear-to-r from-green-50 to-blue-50 p-6\">\n          <div className=\"flex items-start gap-4\">\n            <div className=\"flex h-16 w-16 shrink-0 items-center justify-center rounded-full bg-green-100\">\n              <svg\n                className=\"h-8 w-8 text-green-600\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\n                />\n              </svg>\n            </div>\n            <div>\n              <h3 className=\"mb-2 font-semibold text-green-900\">User Dropdown Features</h3>\n              <ul className=\"space-y-1 text-sm text-green-800\">\n                <li>• User profile with name and email</li>\n                <li>• Role-based access information</li>\n                <li>• Barangay assignment details with full address hierarchy</li>\n                <li>• PSGC code display for administrative reference</li>\n                <li>• Quick access to settings and profile editing</li>\n                <li>• Secure logout functionality</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"rounded-lg border border-amber-200 bg-amber-50 p-4\">\n          <div className=\"flex items-start gap-3\">\n            <svg\n              className=\"mt-0.5 h-5 w-5 shrink-0 text-amber-600\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n              />\n            </svg>\n            <div>\n              <h4 className=\"font-medium text-amber-900\">Try the User Dropdown</h4>\n              <p className=\"mt-1 text-sm text-amber-800\">\n                Click on the user profile section in the top-right corner of the header to see the\n                detailed user dropdown with barangay information and profile controls.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </DashboardLayoutWrapper>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Focuses on the user dropdown functionality, showing profile information, barangay assignment, and administrative controls.',\n      },\n    },\n  },\n};\n\n// Environment indicator showcase\nexport const EnvironmentIndicator: Story = {\n  render: () => (\n    <DashboardLayoutWrapper>\n      <div className=\"space-y-6 p-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-600 dark:text-gray-400\">\n            Environment Indicators\n          </h1>\n          <p className=\"mt-1 text-gray-600 dark:text-gray-400\">\n            Visual indicators show the current environment (Development/Staging/Production)\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-6 md:grid-cols-3\">\n          <div className=\"rounded-lg border border-green-200 bg-green-50 p-6\">\n            <div className=\"mb-4 flex items-center gap-3\">\n              <div className=\"h-3 w-3 rounded-full bg-green-500\"></div>\n              <span className=\"font-medium text-green-900\">DEVELOPMENT</span>\n            </div>\n            <p className=\"text-sm text-green-800\">\n              Green indicator shown in development environment for easy identification during\n              testing and development.\n            </p>\n          </div>\n\n          <div className=\"rounded-lg border border-yellow-200 bg-yellow-50 p-6\">\n            <div className=\"mb-4 flex items-center gap-3\">\n              <div className=\"h-3 w-3 rounded-full bg-yellow-500\"></div>\n              <span className=\"font-medium text-yellow-900\">STAGING</span>\n            </div>\n            <p className=\"text-sm text-yellow-800\">\n              Yellow indicator shown in staging environment to distinguish from production during\n              UAT and testing.\n            </p>\n          </div>\n\n          <div className=\"rounded-lg border border-gray-200 bg-gray-50 p-6\">\n            <div className=\"mb-4 flex items-center gap-3\">\n              <div className=\"h-3 w-3 rounded-full bg-gray-500\"></div>\n              <span className=\"font-medium text-gray-900 dark:text-gray-100\">PRODUCTION</span>\n            </div>\n            <p className=\"text-sm text-gray-800 dark:text-gray-200\">\n              No environment indicator shown in production to maintain clean interface for end\n              users.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4\">\n          <div className=\"flex items-start gap-3\">\n            <svg\n              className=\"mt-0.5 h-5 w-5 shrink-0 text-gray-600 dark:text-gray-400\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n              />\n            </svg>\n            <div>\n              <h4 className=\"font-medium text-gray-900 dark:text-gray-100\">\n                Environment Detection\n              </h4>\n              <p className=\"mt-1 text-sm text-gray-800 dark:text-gray-200\">\n                The system automatically detects the environment and displays appropriate indicators\n                in the sidebar footer. This helps developers and testers quickly identify which\n                environment they're working in.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </DashboardLayoutWrapper>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Demonstrates the environment indicator feature that helps users identify development, staging, and production environments.',\n      },\n    },\n  },\n};\n\n// Layout features overview\nexport const LayoutFeatures: Story = {\n  render: () => (\n    <DashboardLayoutWrapper>\n      <div className=\"space-y-8 p-6\">\n        <div className=\"text-center\">\n          <h1 className=\"mb-4 text-3xl font-bold text-gray-600 dark:text-gray-400\">\n            DashboardLayout Features\n          </h1>\n          <p className=\"mx-auto max-w-2xl text-gray-600 dark:text-gray-400\">\n            A comprehensive dashboard layout with authentication integration, search functionality,\n            and responsive design optimized for barangay management systems.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3\">\n          <div className=\"rounded-xl border border-gray-300 bg-white p-6 dark:border-gray-600 dark:bg-gray-800\">\n            <div className=\"mb-4 flex h-12 w-12 items-center justify-center rounded-xl bg-blue-100\">\n              <svg\n                className=\"h-6 w-6 text-gray-600 dark:text-gray-400\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z\"\n                />\n              </svg>\n            </div>\n            <h3 className=\"mb-2 font-semibold text-gray-600 dark:text-gray-400\">\n              Authentication Integration\n            </h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Seamless integration with authentication context, displaying user profile, role\n              information, and barangay assignments.\n            </p>\n          </div>\n\n          <div className=\"rounded-xl border border-gray-300 bg-white p-6 dark:border-gray-600 dark:bg-gray-800\">\n            <div className=\"mb-4 flex h-12 w-12 items-center justify-center rounded-xl bg-green-100\">\n              <svg\n                className=\"h-6 w-6 text-green-600\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                />\n              </svg>\n            </div>\n            <h3 className=\"mb-2 font-semibold text-gray-600 dark:text-gray-400\">Global Search</h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Integrated search functionality with real-time filtering and comprehensive search\n              across all data types.\n            </p>\n          </div>\n\n          <div className=\"rounded-xl border border-gray-300 bg-white p-6 dark:border-gray-600 dark:bg-gray-800\">\n            <div className=\"mb-4 flex h-12 w-12 items-center justify-center rounded-xl bg-purple-100\">\n              <svg\n                className=\"h-6 w-6 text-gray-600 dark:text-gray-400\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z\"\n                />\n              </svg>\n            </div>\n            <h3 className=\"mb-2 font-semibold text-gray-600 dark:text-gray-400\">\n              Responsive Design\n            </h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Fixed sidebar layout that maintains navigation accessibility across all device sizes\n              and orientations.\n            </p>\n          </div>\n\n          <div className=\"rounded-xl border border-gray-300 bg-white p-6 dark:border-gray-600 dark:bg-gray-800\">\n            <div className=\"mb-4 flex h-12 w-12 items-center justify-center rounded-xl bg-orange-100\">\n              <svg\n                className=\"h-6 w-6 text-orange-600\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"\n                />\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"\n                />\n              </svg>\n            </div>\n            <h3 className=\"mb-2 font-semibold text-gray-600 dark:text-gray-400\">\n              Location Context\n            </h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Automatic barangay information loading with full PSGC hierarchy display for\n              administrative context.\n            </p>\n          </div>\n\n          <div className=\"rounded-xl border border-gray-300 bg-white p-6 dark:border-gray-600 dark:bg-gray-800\">\n            <div className=\"mb-4 flex h-12 w-12 items-center justify-center rounded-xl bg-red-100\">\n              <svg\n                className=\"h-6 w-6 text-red-600\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.031 9-11.622 0-1.042-.133-2.052-.382-3.016z\"\n                />\n              </svg>\n            </div>\n            <h3 className=\"mb-2 font-semibold text-gray-600 dark:text-gray-400\">\n              Environment Indicators\n            </h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Visual environment indicators help distinguish between development, staging, and\n              production environments.\n            </p>\n          </div>\n\n          <div className=\"rounded-xl border border-gray-300 bg-white p-6 dark:border-gray-600 dark:bg-gray-800\">\n            <div className=\"mb-4 flex h-12 w-12 items-center justify-center rounded-xl bg-indigo-100\">\n              <svg\n                className=\"h-6 w-6 text-indigo-600\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4\"\n                />\n              </svg>\n            </div>\n            <h3 className=\"mb-2 font-semibold text-gray-600 dark:text-gray-400\">Accessibility</h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Built with skip navigation, ARIA labels, keyboard navigation, and screen reader\n              support for inclusive access.\n            </p>\n          </div>\n        </div>\n      </div>\n    </DashboardLayoutWrapper>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Comprehensive overview of all DashboardLayout features and capabilities.',\n      },\n    },\n  },\n};\n\n// Dark theme preview\nexport const WithDarkBackground: Story = {\n  render: () => (\n    <DashboardLayoutWrapper>\n      <MockDashboardContent />\n    </DashboardLayoutWrapper>\n  ),\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n    },\n    docs: {\n      description: {\n        story: 'DashboardLayout with dark background to demonstrate theme compatibility.',\n      },\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/templates/Header/Header.stories.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'mockAuthValue'. Either include it or remove the dependency array.","line":49,"column":6,"nodeType":"ArrayExpression","endLine":49,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [mockAuthValue]","fix":{"range":[1260,1262],"text":"[mockAuthValue]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":145,"column":27,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4594,4709],"text":"\n                Click the &quot;Sign In\" link in the header to access the RBI Records Management System.\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4594,4709],"text":"\n                Click the &ldquo;Sign In\" link in the header to access the RBI Records Management System.\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4594,4709],"text":"\n                Click the &#34;Sign In\" link in the header to access the RBI Records Management System.\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4594,4709],"text":"\n                Click the &rdquo;Sign In\" link in the header to access the RBI Records Management System.\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":145,"column":35,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4594,4709],"text":"\n                Click the \"Sign In&quot; link in the header to access the RBI Records Management System.\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4594,4709],"text":"\n                Click the \"Sign In&ldquo; link in the header to access the RBI Records Management System.\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4594,4709],"text":"\n                Click the \"Sign In&#34; link in the header to access the RBI Records Management System.\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4594,4709],"text":"\n                Click the \"Sign In&rdquo; link in the header to access the RBI Records Management System.\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":209,"column":41,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6636,6729],"text":"\n              Header showing admin user &quot;Maria Santos\" with full system access.\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6636,6729],"text":"\n              Header showing admin user &ldquo;Maria Santos\" with full system access.\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6636,6729],"text":"\n              Header showing admin user &#34;Maria Santos\" with full system access.\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6636,6729],"text":"\n              Header showing admin user &rdquo;Maria Santos\" with full system access.\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":209,"column":54,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6636,6729],"text":"\n              Header showing admin user \"Maria Santos&quot; with full system access.\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6636,6729],"text":"\n              Header showing admin user \"Maria Santos&ldquo; with full system access.\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6636,6729],"text":"\n              Header showing admin user \"Maria Santos&#34; with full system access.\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6636,6729],"text":"\n              Header showing admin user \"Maria Santos&rdquo; with full system access.\n            "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport React from 'react';\nimport Header from '@/components/templates/Header';\n\n// Mock the authentication context for Storybook\nconst MockAuthProvider = ({\n  children,\n  user = null,\n  loading = false,\n}: {\n  children: React.ReactNode;\n  user?: { user_metadata?: { first_name?: string; last_name?: string; email?: string } } | null;\n  loading?: boolean;\n}) => {\n  const mockAuthValue = {\n    user,\n    userProfile: user\n      ? {\n          id: 'profile-id',\n          first_name: user.user_metadata?.first_name || 'John',\n          last_name: user.user_metadata?.last_name || 'Doe',\n          email: user.email,\n          barangay_code: '137404001',\n          role_id: 'admin-role',\n        }\n      : null,\n    role: user\n      ? {\n          id: 'admin-role',\n          name: 'Barangay Administrator',\n          permissions: [],\n        }\n      : null,\n    signOut: async () => {\n      console.log('Mock sign out');\n    },\n    loading,\n    initialized: true,\n  };\n\n  // Mock the useAuth hook\n  React.useEffect(() => {\n    const originalUseAuth = (window as any).useAuth;\n    (window as any).useAuth = () => mockAuthValue;\n\n    return () => {\n      (window as any).useAuth = originalUseAuth;\n    };\n  }, []);\n\n  return <>{children}</>;\n};\n\nconst meta = {\n  title: 'Templates/Header',\n  component: Header,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'Header Component - Main navigation header for RBI System. Features responsive design with desktop navigation menu, mobile hamburger menu, user authentication state management, and brand identity. Integrates with authentication context to show login/logout states.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n} satisfies Meta<typeof Header>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Mock user data\nconst mockUser = {\n  id: 'user-123',\n  email: 'juan.delacruz@barangay.gov.ph',\n  user_metadata: {\n    first_name: 'Juan',\n    last_name: 'Dela Cruz',\n  },\n};\n\nconst mockAdminUser = {\n  id: 'admin-456',\n  email: 'admin@barangay.gov.ph',\n  user_metadata: {\n    first_name: 'Maria',\n    last_name: 'Santos',\n  },\n};\n\n// Default authenticated state\nexport const Default: Story = {\n  render: () => (\n    <MockAuthProvider user={mockUser}>\n      <div className=\"min-h-screen bg-white dark:bg-gray-800\">\n        <Header />\n        <div className=\"p-8\">\n          <div className=\"mx-auto max-w-4xl\">\n            <h1 className=\"mb-6 text-3xl font-bold text-gray-600 dark:text-gray-400\">\n              Page Content\n            </h1>\n            <p className=\"mb-4 text-gray-600 dark:text-gray-400\">\n              This demonstrates the Header component in its default authenticated state. The header\n              shows the RBI System branding, navigation menu, and user profile.\n            </p>\n            <div className=\"rounded-lg border border-gray-300 bg-white p-6 dark:border-gray-600 dark:bg-gray-800\">\n              <h2 className=\"mb-3 font-semibold text-gray-600 dark:text-gray-400\">\n                Navigation Features\n              </h2>\n              <ul className=\"space-y-2 text-gray-600 dark:text-gray-400\">\n                <li>• Dashboard - System overview and statistics</li>\n                <li>• Residents - Individual resident management</li>\n                <li>• Households - Family and household records</li>\n                <li>• Addresses - Location and address management</li>\n                <li>• Reports - Data analysis and reporting tools</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </MockAuthProvider>\n  ),\n};\n\n// Unauthenticated state\nexport const Unauthenticated: Story = {\n  render: () => (\n    <MockAuthProvider user={null}>\n      <div className=\"min-h-screen bg-white dark:bg-gray-800\">\n        <Header />\n        <div className=\"p-8\">\n          <div className=\"mx-auto max-w-4xl text-center\">\n            <h1 className=\"mb-6 text-3xl font-bold text-gray-600 dark:text-gray-400\">\n              Welcome to RBI System\n            </h1>\n            <p className=\"mb-8 text-gray-600 dark:text-gray-400\">\n              When no user is authenticated, the header displays a Sign In link instead of user\n              profile information.\n            </p>\n            <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-6\">\n              <h2 className=\"mb-3 font-semibold text-gray-900 dark:text-gray-100\">\n                Sign In Required\n              </h2>\n              <p className=\"text-sm text-gray-800 dark:text-gray-200\">\n                Click the \"Sign In\" link in the header to access the RBI Records Management System.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </MockAuthProvider>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Header component when no user is authenticated. Shows Sign In link instead of user profile.',\n      },\n    },\n  },\n};\n\n// Loading state\nexport const LoadingState: Story = {\n  render: () => (\n    <MockAuthProvider user={null} loading={true}>\n      <div className=\"min-h-screen bg-white dark:bg-gray-800\">\n        <Header />\n        <div className=\"p-8\">\n          <div className=\"mx-auto max-w-4xl text-center\">\n            <h1 className=\"mb-6 text-3xl font-bold text-gray-600 dark:text-gray-400\">\n              Authentication Loading\n            </h1>\n            <p className=\"mb-8 text-gray-600 dark:text-gray-400\">\n              While authentication is loading, the header maintains its layout structure.\n            </p>\n            <div className=\"rounded-lg border border-gray-200 bg-gray-50 p-6\">\n              <div className=\"animate-pulse\">\n                <div className=\"mx-auto mb-2 h-4 w-3/4 rounded-sm bg-gray-200\"></div>\n                <div className=\"mx-auto h-4 w-1/2 rounded-sm bg-gray-200\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </MockAuthProvider>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Header component during authentication loading state.',\n      },\n    },\n  },\n};\n\n// Different user types\nexport const AdminUser: Story = {\n  render: () => (\n    <MockAuthProvider user={mockAdminUser}>\n      <div className=\"min-h-screen bg-white dark:bg-gray-800\">\n        <Header />\n        <div className=\"p-8\">\n          <div className=\"mx-auto max-w-4xl\">\n            <h1 className=\"mb-6 text-3xl font-bold text-gray-600 dark:text-gray-400\">\n              Admin Dashboard\n            </h1>\n            <p className=\"mb-4 text-gray-600 dark:text-gray-400\">\n              Header showing admin user \"Maria Santos\" with full system access.\n            </p>\n            <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n              <div className=\"rounded-lg border border-green-200 bg-green-50 p-6\">\n                <h3 className=\"mb-3 font-semibold text-green-900\">Admin Privileges</h3>\n                <ul className=\"space-y-1 text-sm text-green-800\">\n                  <li>• Full resident data access</li>\n                  <li>• User management capabilities</li>\n                  <li>• System configuration access</li>\n                  <li>• Advanced reporting features</li>\n                </ul>\n              </div>\n              <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-6\">\n                <h3 className=\"mb-3 font-semibold text-gray-900 dark:text-gray-100\">\n                  User Profile Features\n                </h3>\n                <ul className=\"space-y-1 text-sm text-gray-800 dark:text-gray-200\">\n                  <li>• Compact profile display</li>\n                  <li>• Automatic name initialization</li>\n                  <li>• One-click logout functionality</li>\n                  <li>• Responsive user menu</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </MockAuthProvider>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: 'Header component showing an admin user with different name and permissions.',\n      },\n    },\n  },\n};\n\n// Mobile view\nexport const MobileView: Story = {\n  render: () => (\n    <MockAuthProvider user={mockUser}>\n      <div className=\"min-h-screen bg-white dark:bg-gray-800\">\n        <Header />\n        <div className=\"p-4\">\n          <div className=\"mx-auto max-w-lg\">\n            <h1 className=\"mb-4 text-2xl font-bold text-gray-600 dark:text-gray-400\">\n              Mobile Navigation\n            </h1>\n            <p className=\"mb-6 text-sm text-gray-600 dark:text-gray-400\">\n              On mobile devices, the navigation collapses into a hamburger menu. Tap the menu icon\n              to see the mobile navigation drawer.\n            </p>\n\n            <div className=\"space-y-4\">\n              <div className=\"rounded-lg border border-purple-200 bg-purple-50 p-4\">\n                <h3 className=\"mb-2 font-medium text-gray-900 dark:text-gray-100\">\n                  Mobile Features\n                </h3>\n                <ul className=\"space-y-1 text-sm text-gray-800 dark:text-gray-200\">\n                  <li>• Hamburger menu toggle</li>\n                  <li>• Collapsible navigation</li>\n                  <li>• Touch-friendly user profile</li>\n                  <li>• Optimized spacing</li>\n                </ul>\n              </div>\n\n              <div className=\"rounded-lg border border-orange-200 bg-orange-50 p-4\">\n                <h3 className=\"mb-2 font-medium text-orange-900\">Navigation Menu</h3>\n                <p className=\"text-sm text-orange-800\">\n                  The mobile menu includes all navigation links, user information, and logout\n                  functionality in a vertical stack format.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </MockAuthProvider>\n  ),\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile',\n    },\n    docs: {\n      description: {\n        story: 'Header component on mobile devices with hamburger menu and responsive navigation.',\n      },\n    },\n  },\n};\n\n// Tablet view\nexport const TabletView: Story = {\n  render: () => (\n    <MockAuthProvider user={mockUser}>\n      <div className=\"min-h-screen bg-white dark:bg-gray-800\">\n        <Header />\n        <div className=\"p-6\">\n          <div className=\"mx-auto max-w-3xl\">\n            <h1 className=\"mb-6 text-3xl font-bold text-gray-600 dark:text-gray-400\">\n              Tablet Layout\n            </h1>\n            <p className=\"mb-6 text-gray-600 dark:text-gray-400\">\n              On tablet-sized screens, the header maintains desktop navigation while optimizing\n              spacing and touch targets.\n            </p>\n\n            <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n              <div className=\"rounded-lg border border-gray-300 bg-white p-6 dark:border-gray-600 dark:bg-gray-800\">\n                <h3 className=\"mb-4 font-semibold text-gray-600 dark:text-gray-400\">\n                  Responsive Design\n                </h3>\n                <p className=\"mb-4 text-sm text-gray-600 dark:text-gray-400\">\n                  The header automatically adapts to different screen sizes using responsive design\n                  principles.\n                </p>\n                <div className=\"flex items-center gap-2 text-xs\">\n                  <div className=\"h-3 w-3 rounded-full bg-green-500\"></div>\n                  <span className=\"text-gray-600 dark:text-gray-400\">Tablet optimized</span>\n                </div>\n              </div>\n\n              <div className=\"rounded-lg border border-gray-300 bg-white p-6 dark:border-gray-600 dark:bg-gray-800\">\n                <h3 className=\"mb-4 font-semibold text-gray-600 dark:text-gray-400\">\n                  Navigation Access\n                </h3>\n                <p className=\"mb-4 text-sm text-gray-600 dark:text-gray-400\">\n                  All navigation links remain easily accessible with appropriate touch targets for\n                  tablet interaction.\n                </p>\n                <div className=\"flex items-center gap-2 text-xs\">\n                  <div className=\"h-3 w-3 rounded-full bg-blue-500\"></div>\n                  <span className=\"text-gray-600 dark:text-gray-400\">Touch friendly</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </MockAuthProvider>\n  ),\n  parameters: {\n    viewport: {\n      defaultViewport: 'tablet',\n    },\n    docs: {\n      description: {\n        story: 'Header component optimized for tablet-sized screens.',\n      },\n    },\n  },\n};\n\n// Navigation showcase\nexport const NavigationShowcase: Story = {\n  render: () => (\n    <MockAuthProvider user={mockUser}>\n      <div className=\"min-h-screen bg-white dark:bg-gray-800\">\n        <Header />\n        <div className=\"p-8\">\n          <div className=\"mx-auto max-w-6xl\">\n            <div className=\"mb-8 text-center\">\n              <h1 className=\"mb-4 text-3xl font-bold text-gray-600 dark:text-gray-400\">\n                Navigation System\n              </h1>\n              <p className=\"mx-auto max-w-2xl text-gray-600 dark:text-gray-400\">\n                The Header component provides comprehensive navigation throughout the RBI System\n                with clear visual hierarchy and intuitive organization.\n              </p>\n            </div>\n\n            <div className=\"mb-8 grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3\">\n              {[\n                {\n                  icon: '📊',\n                  title: 'Dashboard',\n                  description: 'System overview, statistics, and key metrics for quick insights.',\n                  features: [\n                    'Population stats',\n                    'Recent activity',\n                    'Quick actions',\n                    'System health',\n                  ],\n                },\n                {\n                  icon: '👥',\n                  title: 'Residents',\n                  description: 'Comprehensive resident management and profile administration.',\n                  features: [\n                    'Individual records',\n                    'Personal information',\n                    'Contact details',\n                    'Status tracking',\n                  ],\n                },\n                {\n                  icon: '🏠',\n                  title: 'Households',\n                  description: 'Family and household composition management and tracking.',\n                  features: [\n                    'Family groups',\n                    'Household heads',\n                    'Member relationships',\n                    'Address links',\n                  ],\n                },\n                {\n                  icon: '📍',\n                  title: 'Addresses',\n                  description: 'Location management with PSGC integration and mapping.',\n                  features: [\n                    'Street addresses',\n                    'PSGC codes',\n                    'Geographic data',\n                    'Location hierarchy',\n                  ],\n                },\n                {\n                  icon: '📈',\n                  title: 'Reports',\n                  description: 'Data analysis, statistical reports, and administrative summaries.',\n                  features: [\n                    'Population reports',\n                    'Demographics',\n                    'Export functions',\n                    'Custom queries',\n                  ],\n                },\n                {\n                  icon: '⚙️',\n                  title: 'User Profile',\n                  description: 'Account management, preferences, and authentication controls.',\n                  features: [\n                    'Profile editing',\n                    'Security settings',\n                    'Session management',\n                    'Barangay info',\n                  ],\n                },\n              ].map((section, index) => (\n                <div\n                  key={index}\n                  className=\"rounded-xl border border-gray-300 bg-white p-6 transition-shadow hover:shadow-md dark:border-gray-600 dark:bg-gray-800\"\n                >\n                  <div className=\"mb-3 text-3xl\">{section.icon}</div>\n                  <h3 className=\"mb-2 font-semibold text-gray-600 dark:text-gray-400\">\n                    {section.title}\n                  </h3>\n                  <p className=\"mb-4 text-sm text-gray-600 dark:text-gray-400\">\n                    {section.description}\n                  </p>\n                  <ul className=\"space-y-1\">\n                    {section.features.map((feature, featureIndex) => (\n                      <li\n                        key={featureIndex}\n                        className=\"flex items-center gap-2 text-xs text-gray-600 dark:text-gray-400\"\n                      >\n                        <div className=\"h-1.5 w-1.5 rounded-full bg-blue-600\"></div>\n                        {feature}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"rounded-xl border border-indigo-200 bg-linear-to-r from-indigo-50 to-blue-50 p-8 text-center\">\n              <h2 className=\"mb-4 text-xl font-bold text-indigo-900\">\n                Integrated Navigation Experience\n              </h2>\n              <p className=\"mx-auto max-w-3xl text-indigo-800\">\n                The navigation system is designed to provide quick access to all major system\n                functions while maintaining a clean, professional interface that works seamlessly\n                across all device types and screen sizes.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </MockAuthProvider>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Comprehensive overview of the navigation system and all available sections in the Header component.',\n      },\n    },\n  },\n};\n\n// Brand identity showcase\nexport const BrandIdentity: Story = {\n  render: () => (\n    <MockAuthProvider user={mockUser}>\n      <div className=\"min-h-screen bg-white dark:bg-gray-800\">\n        <Header />\n        <div className=\"p-8\">\n          <div className=\"mx-auto max-w-4xl\">\n            <div className=\"mb-8 text-center\">\n              <h1 className=\"mb-4 text-3xl font-bold text-gray-600 dark:text-gray-400\">\n                Brand Identity\n              </h1>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                The Header component showcases the RBI System brand identity with consistent visual\n                design and professional appearance.\n              </p>\n            </div>\n\n            <div className=\"mb-8 grid grid-cols-1 gap-8 md:grid-cols-2\">\n              <div className=\"rounded-xl border border-gray-300 bg-white p-6 dark:border-gray-600 dark:bg-gray-800\">\n                <div className=\"mb-4 flex items-center space-x-3\">\n                  <div className=\"flex size-10 items-center justify-center rounded-lg bg-blue-600\">\n                    <span className=\"font-display text-sm font-bold text-white dark:text-black\">\n                      RBI\n                    </span>\n                  </div>\n                  <span className=\"font-display text-xl font-semibold text-gray-600 dark:text-gray-400\">\n                    RBI System\n                  </span>\n                </div>\n                <h3 className=\"mb-3 font-semibold text-gray-600 dark:text-gray-400\">Logo Design</h3>\n                <ul className=\"space-y-2 text-sm text-gray-600 dark:text-gray-400\">\n                  <li>• Clean, modern design approach</li>\n                  <li>• Professional color scheme</li>\n                  <li>• Consistent typography</li>\n                  <li>• Scalable vector elements</li>\n                </ul>\n              </div>\n\n              <div className=\"rounded-xl border border-gray-300 bg-white p-6 dark:border-gray-600 dark:bg-gray-800\">\n                <h3 className=\"mb-4 font-semibold text-gray-600 dark:text-gray-400\">\n                  Brand Values\n                </h3>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"mt-2 h-2 w-2 rounded-full bg-blue-500\"></div>\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                        Professionalism\n                      </p>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                        Clean, reliable interface design\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"mt-2 h-2 w-2 rounded-full bg-green-500\"></div>\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                        Accessibility\n                      </p>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                        Inclusive design for all users\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"mt-2 h-2 w-2 rounded-full bg-purple-500\"></div>\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                        Efficiency\n                      </p>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                        Streamlined user experience\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"rounded-xl border border-gray-200 bg-linear-to-r from-gray-50 to-blue-50 p-6\">\n              <div className=\"mb-4 flex items-center gap-4\">\n                <div className=\"flex h-12 w-12 items-center justify-center rounded-xl bg-blue-100\">\n                  <svg\n                    className=\"h-6 w-6 text-gray-600 dark:text-gray-400\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M13 10V3L4 14h7v7l9-11h-7z\"\n                    />\n                  </svg>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-gray-600 dark:text-gray-400\">\n                    Government Standard Compliance\n                  </h3>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    Designed to meet government accessibility standards and professional\n                    requirements for public administration systems.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </MockAuthProvider>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Showcase of the brand identity elements and design principles used in the Header component.',\n      },\n    },\n  },\n};\n\n// Header only view (isolated)\nexport const HeaderOnly: Story = {\n  render: () => (\n    <MockAuthProvider user={mockUser}>\n      <Header />\n    </MockAuthProvider>\n  ),\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        story: 'Header component in isolation, showing just the header bar without page content.',\n      },\n    },\n  },\n};\n\n// Dark theme compatibility\nexport const WithDarkBackground: Story = {\n  render: () => (\n    <MockAuthProvider user={mockUser}>\n      <div className=\"min-h-screen bg-gray-900\">\n        <Header />\n        <div className=\"p-8\">\n          <div className=\"mx-auto max-w-4xl text-white dark:text-black\">\n            <h1 className=\"mb-6 text-3xl font-bold\">Dark Theme Compatibility</h1>\n            <p className=\"mb-6 text-gray-300 dark:text-gray-700\">\n              The Header component works well with dark backgrounds and maintains good contrast and\n              readability.\n            </p>\n            <div className=\"rounded-lg border border-gray-700 bg-gray-800 p-6\">\n              <h3 className=\"mb-3 font-semibold text-white dark:text-black\">\n                Theme Considerations\n              </h3>\n              <p className=\"text-sm text-gray-300 dark:text-gray-700\">\n                While the header uses design tokens that adapt to theme changes, the current\n                implementation uses specific light theme styling. Future versions could include full\n                dark mode support.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </MockAuthProvider>\n  ),\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n    },\n    docs: {\n      description: {\n        story: 'Header component with dark background to test theme compatibility.',\n      },\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/templates/MainLayout/MainLayout.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MockHeader' is assigned a value but never used.","line":6,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport React from 'react';\nimport MainLayout from '@/components/templates/MainLayout';\n\n// Mock Header component for the stories\nconst MockHeader = () => (\n  <header className=\"border-b bg-white shadow-xs\">\n    <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n      <div className=\"flex h-16 items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"flex size-8 items-center justify-center rounded-lg bg-blue-600\">\n            <span className=\"font-display text-sm font-bold text-white dark:text-black\">RBI</span>\n          </div>\n          <span className=\"font-display text-xl font-semibold text-gray-900 dark:text-gray-100\">\n            RBI System\n          </span>\n        </div>\n        <nav className=\"hidden space-x-1 md:flex\">\n          <a\n            href=\"#\"\n            className=\"rounded-md px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 hover:text-gray-900 dark:text-gray-100 dark:text-gray-300\"\n          >\n            Dashboard\n          </a>\n          <a\n            href=\"#\"\n            className=\"rounded-md px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 hover:text-gray-900 dark:text-gray-100 dark:text-gray-300\"\n          >\n            Residents\n          </a>\n          <a\n            href=\"#\"\n            className=\"rounded-md px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 hover:text-gray-900 dark:text-gray-100 dark:text-gray-300\"\n          >\n            Households\n          </a>\n          <a\n            href=\"#\"\n            className=\"rounded-md px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 hover:text-gray-900 dark:text-gray-100 dark:text-gray-300\"\n          >\n            Reports\n          </a>\n        </nav>\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex size-8 items-center justify-center rounded-full bg-blue-100\">\n            <span className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">JD</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  </header>\n);\n\nconst meta = {\n  title: 'Templates/MainLayout',\n  component: MainLayout,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'Main Layout Component - A simple and clean wrapper layout with header and main content area. Provides consistent spacing, typography, and structure for basic page layouts. Features optional page titles and responsive design with maximum width constraints.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    title: {\n      control: 'text',\n      description: 'Optional page title displayed above the content',\n    },\n    children: {\n      control: false,\n      description: 'Content to be displayed within the layout',\n    },\n  },\n} satisfies Meta<typeof MainLayout>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Mock content components for demonstrations\nconst BasicContent = () => (\n  <div className=\"space-y-6\">\n    <p className=\"text-gray-600 dark:text-gray-400\">\n      This is basic content within the MainLayout. The layout provides consistent spacing and\n      typography while keeping the design clean and focused.\n    </p>\n\n    <div className=\"rounded-lg border border-gray-200 bg-white p-6 shadow-xs\">\n      <h3 className=\"mb-3 text-lg font-semibold text-gray-900 dark:text-gray-100\">Sample Card</h3>\n      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n        Content cards and components work well within the MainLayout structure, maintaining proper\n        spacing and alignment.\n      </p>\n    </div>\n\n    <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n      <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4\">\n        <h4 className=\"mb-2 font-medium text-gray-900 dark:text-gray-100\">Layout Benefits</h4>\n        <ul className=\"space-y-1 text-sm text-gray-800 dark:text-gray-200\">\n          <li>• Consistent spacing</li>\n          <li>• Responsive design</li>\n          <li>• Clean typography</li>\n          <li>• Maximum width constraints</li>\n        </ul>\n      </div>\n      <div className=\"rounded-lg border border-green-200 bg-green-50 p-4\">\n        <h4 className=\"mb-2 font-medium text-green-900\">Use Cases</h4>\n        <ul className=\"space-y-1 text-sm text-green-800\">\n          <li>• Simple pages</li>\n          <li>• Content-focused layouts</li>\n          <li>• Form pages</li>\n          <li>• Landing pages</li>\n        </ul>\n      </div>\n    </div>\n  </div>\n);\n\nconst RichContent = () => (\n  <div className=\"space-y-8\">\n    <div className=\"prose max-w-none\">\n      <p className=\"text-lg leading-relaxed text-gray-600 dark:text-gray-400\">\n        The MainLayout component serves as a foundation for pages that need a simple, clean\n        structure without complex navigation or specialized layouts.\n      </p>\n    </div>\n\n    <div className=\"grid grid-cols-1 gap-6 lg:grid-cols-3\">\n      {[\n        {\n          icon: '📄',\n          title: 'Content Pages',\n          description: 'Perfect for static content, documentation, and informational pages.',\n        },\n        {\n          icon: '📝',\n          title: 'Form Layouts',\n          description: 'Ideal for simple forms, settings pages, and data entry interfaces.',\n        },\n        {\n          icon: '🚀',\n          title: 'Landing Pages',\n          description: 'Great for welcome screens, onboarding flows, and promotional content.',\n        },\n      ].map((feature, index) => (\n        <div\n          key={index}\n          className=\"rounded-xl border border-gray-200 bg-white p-6 shadow-xs transition-shadow hover:shadow-md\"\n        >\n          <div className=\"mb-3 text-3xl\">{feature.icon}</div>\n          <h3 className=\"mb-2 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n            {feature.title}\n          </h3>\n          <p className=\"text-sm text-gray-600 dark:text-gray-400\">{feature.description}</p>\n        </div>\n      ))}\n    </div>\n\n    <div className=\"rounded-xl border border-indigo-200 bg-linear-to-r from-indigo-50 to-blue-50 p-8\">\n      <div className=\"text-center\">\n        <div className=\"mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-indigo-100\">\n          <svg\n            className=\"h-8 w-8 text-indigo-600\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z\"\n            />\n          </svg>\n        </div>\n        <h2 className=\"mb-3 text-2xl font-bold text-indigo-900\">Simple & Effective</h2>\n        <p className=\"mx-auto max-w-2xl text-indigo-800\">\n          MainLayout focuses on simplicity and effectiveness, providing just enough structure to\n          create professional-looking pages without unnecessary complexity.\n        </p>\n      </div>\n    </div>\n\n    <div className=\"rounded-lg border border-gray-200 bg-white p-6\">\n      <h3 className=\"mb-4 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n        Technical Specifications\n      </h3>\n      <div className=\"grid grid-cols-1 gap-6 text-sm md:grid-cols-2\">\n        <div>\n          <h4 className=\"mb-2 font-medium text-gray-900 dark:text-gray-100\">Layout Features</h4>\n          <ul className=\"space-y-1 text-gray-600 dark:text-gray-400\">\n            <li>• Full-height background (min-h-screen)</li>\n            <li>• Light gray background (bg-gray-50)</li>\n            <li>• Maximum width constraint (max-w-7xl)</li>\n            <li>• Responsive padding (px-4 sm:px-6 lg:px-8)</li>\n            <li>• Vertical spacing (py-6)</li>\n          </ul>\n        </div>\n        <div>\n          <h4 className=\"mb-2 font-medium text-gray-900 dark:text-gray-100\">Typography</h4>\n          <ul className=\"space-y-1 text-gray-600 dark:text-gray-400\">\n            <li>• Optional page titles</li>\n            <li>• Consistent heading hierarchy</li>\n            <li>• Proper text color contrast</li>\n            <li>• Readable font sizing</li>\n            <li>• Appropriate line spacing</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nconst FormContent = () => (\n  <div className=\"space-y-8\">\n    <div className=\"text-center\">\n      <p className=\"text-gray-600 dark:text-gray-400\">\n        MainLayout works excellently for form-based pages, providing clean structure and appropriate\n        spacing for form elements.\n      </p>\n    </div>\n\n    <div className=\"rounded-xl border border-gray-200 bg-white p-8 shadow-xs\">\n      <h2 className=\"mb-6 text-xl font-semibold text-gray-900 dark:text-gray-100\">Sample Form</h2>\n\n      <form className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n          <div>\n            <label className=\"mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300\">\n              First Name\n            </label>\n            <input\n              type=\"text\"\n              className=\"w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500\"\n              placeholder=\"Enter first name\"\n            />\n          </div>\n          <div>\n            <label className=\"mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300\">\n              Last Name\n            </label>\n            <input\n              type=\"text\"\n              className=\"w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500\"\n              placeholder=\"Enter last name\"\n            />\n          </div>\n        </div>\n\n        <div>\n          <label className=\"mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300\">\n            Email Address\n          </label>\n          <input\n            type=\"email\"\n            className=\"w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500\"\n            placeholder=\"Enter email address\"\n          />\n        </div>\n\n        <div>\n          <label className=\"mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300\">\n            Message\n          </label>\n          <textarea\n            rows={4}\n            className=\"w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500\"\n            placeholder=\"Enter your message\"\n          />\n        </div>\n\n        <div className=\"flex items-center justify-between pt-4\">\n          <button\n            type=\"button\"\n            className=\"rounded-lg border border-gray-300 px-4 py-2 text-gray-700 transition-colors hover:bg-gray-50 dark:text-gray-300\"\n          >\n            Cancel\n          </button>\n          <button\n            type=\"submit\"\n            className=\"rounded-lg bg-indigo-600 px-6 py-2 text-white transition-colors hover:bg-indigo-700 dark:text-black\"\n          >\n            Submit Form\n          </button>\n        </div>\n      </form>\n    </div>\n\n    <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4\">\n      <div className=\"flex items-start gap-3\">\n        <svg\n          className=\"mt-0.5 h-5 w-5 text-gray-600 dark:text-gray-400\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n          />\n        </svg>\n        <div>\n          <h4 className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n            Form Layout Benefits\n          </h4>\n          <p className=\"mt-1 text-sm text-gray-800 dark:text-gray-200\">\n            The MainLayout provides proper spacing and width constraints that make forms more\n            readable and user-friendly, especially on larger screens.\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\n// Default story without title\nexport const Default: Story = {\n  args: {\n    children: <BasicContent />,\n  },\n};\n\n// With page title\nexport const WithTitle: Story = {\n  args: {\n    title: 'Page Title Example',\n    children: <BasicContent />,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'MainLayout with an optional page title displayed prominently above the content.',\n      },\n    },\n  },\n};\n\n// With rich content\nexport const RichContentExample: Story = {\n  args: {\n    title: 'Feature Overview',\n    children: <RichContent />,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'MainLayout showcasing rich content with multiple sections, cards, and interactive elements.',\n      },\n    },\n  },\n};\n\n// Form layout example\nexport const FormLayout: Story = {\n  args: {\n    title: 'Contact Form',\n    children: <FormContent />,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'MainLayout optimized for form-based pages with proper spacing and structure for form elements.',\n      },\n    },\n  },\n};\n\n// Mobile view\nexport const MobileView: Story = {\n  args: {\n    title: 'Mobile Layout',\n    children: <BasicContent />,\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile',\n    },\n    docs: {\n      description: {\n        story: 'MainLayout optimized for mobile devices with responsive spacing and typography.',\n      },\n    },\n  },\n};\n\n// Tablet view\nexport const TabletView: Story = {\n  args: {\n    title: 'Tablet Layout',\n    children: <RichContent />,\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'tablet',\n    },\n    docs: {\n      description: {\n        story:\n          'MainLayout on tablet-sized screens showing how content adapts to medium screen sizes.',\n      },\n    },\n  },\n};\n\n// Content variations\nexport const MinimalContent: Story = {\n  args: {\n    title: 'Minimal Page',\n    children: (\n      <div className=\"py-12 text-center\">\n        <div className=\"mx-auto mb-6 flex h-24 w-24 items-center justify-center rounded-full bg-gray-100\">\n          <svg\n            className=\"h-12 w-12 text-gray-400 dark:text-gray-600\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\n            />\n          </svg>\n        </div>\n        <h2 className=\"mb-3 text-2xl font-bold text-gray-900 dark:text-gray-100\">Simple Content</h2>\n        <p className=\"mx-auto max-w-md text-gray-600 dark:text-gray-400\">\n          This demonstrates how MainLayout handles minimal content while maintaining proper spacing\n          and visual hierarchy.\n        </p>\n      </div>\n    ),\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'MainLayout with minimal content, showing how the layout handles sparse content gracefully.',\n      },\n    },\n  },\n};\n\n// Long content example\nexport const LongContent: Story = {\n  args: {\n    title: 'Extended Content Example',\n    children: (\n      <div className=\"space-y-8\">\n        <div className=\"prose max-w-none\">\n          <p className=\"text-lg leading-relaxed text-gray-600 dark:text-gray-400\">\n            This example demonstrates how MainLayout handles longer content with multiple sections\n            and maintains readability throughout the page.\n          </p>\n        </div>\n\n        {/* Generate multiple content sections */}\n        {Array.from({ length: 8 }, (_, index) => (\n          <div key={index} className=\"rounded-lg border border-gray-200 bg-white p-6 shadow-xs\">\n            <h3 className=\"mb-3 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n              Section {index + 1}: Content Block\n            </h3>\n            <p className=\"mb-4 text-gray-600 dark:text-gray-400\">\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor\n              incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n              exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n            </p>\n            <div className=\"flex items-center gap-2 text-sm text-gray-500 dark:text-gray-500\">\n              <div className=\"h-2 w-2 rounded-full bg-indigo-500\"></div>\n              <span>Content section {index + 1} of 8</span>\n            </div>\n          </div>\n        ))}\n\n        <div className=\"rounded-lg border border-green-200 bg-green-50 p-6 text-center\">\n          <h3 className=\"mb-2 text-lg font-semibold text-green-900\">End of Content</h3>\n          <p className=\"text-sm text-green-800\">\n            The MainLayout maintains consistent spacing and readability even with extended content.\n          </p>\n        </div>\n      </div>\n    ),\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'MainLayout with extended content demonstrating how the layout handles longer pages with multiple sections.',\n      },\n    },\n  },\n};\n\n// Layout structure visualization\nexport const LayoutStructure: Story = {\n  args: {\n    title: 'Layout Structure',\n    children: (\n      <div className=\"space-y-6\">\n        <div className=\"rounded-xl border-2 border-dashed border-blue-300 bg-blue-100 p-8 text-center\">\n          <h3 className=\"mb-2 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n            Header Area\n          </h3>\n          <p className=\"text-sm text-gray-800 dark:text-gray-200\">\n            Contains the RBI System branding and navigation (imported via Header component)\n          </p>\n        </div>\n\n        <div className=\"rounded-xl border-2 border-dashed border-green-300 bg-green-100 p-8 text-center\">\n          <h3 className=\"mb-2 text-lg font-semibold text-green-900\">Title Section (Optional)</h3>\n          <p className=\"text-sm text-green-800\">Displays page title when provided via props</p>\n        </div>\n\n        <div className=\"rounded-xl border-2 border-dashed border-purple-300 bg-purple-100 p-12 text-center\">\n          <h3 className=\"mb-2 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n            Main Content Area\n          </h3>\n          <p className=\"mb-4 text-sm text-gray-800 dark:text-gray-200\">\n            This is where the children prop content is rendered\n          </p>\n          <div className=\"mx-auto max-w-md rounded-lg border border-purple-200 bg-white p-4\">\n            <p className=\"text-sm text-gray-900 dark:text-gray-100\">Your content goes here</p>\n          </div>\n        </div>\n\n        <div className=\"rounded-xl border border-gray-200 bg-gray-50 p-6\">\n          <h3 className=\"mb-4 font-semibold text-gray-900 dark:text-gray-100\">\n            Layout Specifications\n          </h3>\n          <div className=\"grid grid-cols-1 gap-4 text-sm text-gray-600 md:grid-cols-2 dark:text-gray-400\">\n            <div>\n              <span className=\"font-medium\">Container:</span> max-w-7xl mx-auto\n            </div>\n            <div>\n              <span className=\"font-medium\">Padding:</span> px-4 sm:px-6 lg:px-8\n            </div>\n            <div>\n              <span className=\"font-medium\">Vertical Spacing:</span> py-6\n            </div>\n            <div>\n              <span className=\"font-medium\">Background:</span> bg-gray-50\n            </div>\n          </div>\n        </div>\n      </div>\n    ),\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Visual breakdown of the MainLayout structure showing header, optional title, and content areas.',\n      },\n    },\n  },\n};\n\n// Without title (explicit)\nexport const WithoutTitle: Story = {\n  args: {\n    children: (\n      <div className=\"py-8 text-center\">\n        <h2 className=\"mb-4 text-2xl font-bold text-gray-900 dark:text-gray-100\">\n          Custom Content Title\n        </h2>\n        <p className=\"mb-6 text-gray-600 dark:text-gray-400\">\n          When no title prop is provided, you can include your own custom headings and structure\n          within the content area.\n        </p>\n        <div className=\"mx-auto max-w-md rounded-lg border border-yellow-200 bg-yellow-50 p-4\">\n          <p className=\"text-sm text-yellow-800\">\n            This provides maximum flexibility for custom layouts and designs.\n          </p>\n        </div>\n      </div>\n    ),\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'MainLayout without the title prop, showing how to include custom headings within the content area.',\n      },\n    },\n  },\n};\n\n// Dark theme compatibility\nexport const WithDarkBackground: Story = {\n  args: {\n    title: 'Dark Theme Compatibility',\n    children: <BasicContent />,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n    },\n    docs: {\n      description: {\n        story:\n          'MainLayout with dark background to test theme compatibility. The layout uses light colors that may need adjustment for full dark mode support.',\n      },\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/stories/templates/ResidentForm/ResidentForm.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockSupabase' is assigned a value but never used.","line":131,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'table' is defined but never used.","line":132,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":132,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'columns' is defined but never used.","line":133,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":133,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'column' is defined but never used.","line":134,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":134,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'condition' is defined but never used.","line":135,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":135,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'column' is defined but never used.","line":136,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":136,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'options' is defined but never used.","line":136,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":136,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'count' is defined but never used.","line":137,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":137,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockAuth' is assigned a value but never used.","line":177,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":177,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockFailedSubmission' is assigned a value but never used.","line":189,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":189,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { ResidentForm } from '@/components/templates/Form/Resident';\n\nconst mockAction = (name: string) => (data: unknown) => {\n  console.log(`${name}:`, data);\n};\n\nconst meta = {\n  title: 'Templates/ResidentForm',\n  component: ResidentForm,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'A comprehensive resident registration form template that combines personal information and contact information sections. Features dynamic search for PSOC codes, PSGC locations, and households with real-time validation.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    onSubmit: {\n      description: 'Callback function called when form is successfully submitted',\n    },\n    onCancel: {\n      description: 'Callback function called when user cancels form',\n    },\n    initialData: {\n      control: { type: 'object' },\n      description: 'Initial form data to pre-populate the form',\n    },\n  },\n  decorators: [\n    Story => (\n      <div className=\"min-h-screen bg-gray-50 p-6\">\n        <div className=\"mx-auto max-w-4xl\">\n          <Story />\n        </div>\n      </div>\n    ),\n  ],\n} satisfies Meta<typeof ResidentForm>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Mock API responses\nconst mockPsocSearch = (query: string) => {\n  const psocData = [\n    {\n      code: '1112',\n      title: 'Senior Government Officials',\n      hierarchy:\n        'Managers > Chief Executives, Senior Officials and Legislators > Senior Government Officials',\n      level: 'unit_group',\n    },\n    {\n      code: '2142',\n      title: 'Civil Engineers',\n      hierarchy:\n        'Professionals > Science and Engineering Professionals > Engineering Professionals > Civil Engineers',\n      level: 'occupation',\n    },\n    {\n      code: '2221',\n      title: 'Nurses and Midwives',\n      hierarchy:\n        'Professionals > Health Professionals > Nursing and Midwifery Professionals > Nurses and Midwives',\n      level: 'occupation',\n    },\n    {\n      code: '2341',\n      title: 'Primary School Teachers',\n      hierarchy:\n        'Professionals > Education Professionals > Teaching Professionals > Primary School Teachers',\n      level: 'occupation',\n    },\n    {\n      code: '5223',\n      title: 'Shop Salespersons',\n      hierarchy: 'Service and Sales Workers > Sales Workers > Shop Salespersons',\n      level: 'occupation',\n    },\n  ].filter(\n    item => item.title.toLowerCase().includes(query.toLowerCase()) || item.code.includes(query)\n  );\n\n  return Promise.resolve({\n    ok: true,\n    json: () => Promise.resolve({ data: psocData }),\n  });\n};\n\nconst mockPsgcSearch = (query: string) => {\n  const psgcData = [\n    {\n      code: '042108',\n      name: 'Lipa City',\n      full_address: 'Lipa City, Batangas, CALABARZON',\n      level: 'city',\n    },\n    {\n      code: '137604',\n      name: 'Makati City',\n      full_address: 'Makati City, Metro Manila, NCR',\n      level: 'city',\n    },\n    {\n      code: '072209',\n      name: 'Cebu City',\n      full_address: 'Cebu City, Cebu, Central Visayas',\n      level: 'city',\n    },\n    {\n      code: '112302',\n      name: 'Davao City',\n      full_address: 'Davao City, Davao del Sur, Davao Region',\n      level: 'city',\n    },\n  ].filter(\n    item => item.name.toLowerCase().includes(query.toLowerCase()) || item.code.includes(query)\n  );\n\n  return Promise.resolve({\n    ok: true,\n    json: () => Promise.resolve({ data: psgcData }),\n  });\n};\n\n// Mock Supabase for household search\nconst mockSupabase = {\n  from: (table: string) => ({\n    select: (columns: string) => ({\n      eq: (column: string, value: unknown) => ({\n        or: (condition: string) => ({\n          order: (column: string, options: { ascending?: boolean }) => ({\n            limit: (count: number) => ({\n              then: (callback: (result: { data: unknown[]; error: null }) => void) => {\n                // Mock household data\n                const households = [\n                  {\n                    code: 'HH-2024-001',\n                    name: 'Santos Family',\n                    house_number: '123',\n                    street_id: null,\n                    subdivision_id: null,\n                    barangay_code: '042108001',\n                    household_head_id: 'R-001',\n                    geo_streets: null,\n                    geo_subdivisions: null,\n                  },\n                  {\n                    code: 'HH-2024-002',\n                    name: 'Cruz Household',\n                    house_number: '456',\n                    street_id: null,\n                    subdivision_id: null,\n                    barangay_code: '042108001',\n                    household_head_id: 'R-002',\n                    geo_streets: null,\n                    geo_subdivisions: null,\n                  },\n                ];\n\n                callback({ data: households, error: null });\n                return Promise.resolve({ data: households, error: null });\n              },\n            }),\n          }),\n        }),\n      }),\n    }),\n  }),\n};\n\n// Mock authentication context\nconst mockAuth = {\n  userProfile: {\n    barangay_code: '042108001',\n    id: 'user-1',\n    email: 'admin@barangay.gov.ph',\n  },\n};\n\n// Mock successful form submission\nconst mockSuccessfulSubmission = mockAction('Form submitted successfully');\n\n// Mock failed form submission\nconst mockFailedSubmission = () => {\n  throw new Error('Submission failed');\n};\n\n// Default empty form\nexport const Default: Story = {\n  args: {\n    onSubmit: mockSuccessfulSubmission,\n    onCancel: mockAction('Form cancelled'),\n  },\n  render: args => {\n    // Mock API calls\n    global.fetch = url => {\n      if (url.includes('/api/psoc/search')) {\n        const searchParams = new URLSearchParams(url.split('?')[1]);\n        const query = searchParams.get('q') || '';\n        return mockPsocSearch(query);\n      }\n      if (url.includes('/api/psgc/search')) {\n        const searchParams = new URLSearchParams(url.split('?')[1]);\n        const query = searchParams.get('q') || '';\n        return mockPsgcSearch(query);\n      }\n      return Promise.resolve({ ok: false });\n    };\n\n    return <ResidentForm {...args} />;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Default resident form with empty fields ready for user input.',\n      },\n    },\n  },\n};\n\n// Pre-filled form with sample data\nexport const PreFilledForm: Story = {\n  args: {\n    onSubmit: mockSuccessfulSubmission,\n    onCancel: mockAction('Pre-filled form cancelled'),\n    initialData: {\n      firstName: 'Juan',\n      middleName: 'Cruz',\n      lastName: 'Santos',\n      sex: 'male',\n      civilStatus: 'married',\n      citizenship: 'Filipino',\n      birthdate: '1985-06-15',\n      birthPlaceName: 'Lipa City, Batangas',\n      birthPlaceCode: '042108',\n      educationAttainment: 'college_graduate',\n      isGraduate: true,\n      employmentStatus: 'employed',\n      psocCode: '2142',\n      occupationTitle: 'Civil Engineer',\n      email: 'juan.santos@email.com',\n      phoneNumber: '043-123-4567',\n      mobileNumber: '+63 917 123 4567',\n      householdCode: 'HH-2024-001',\n    },\n  },\n  render: args => {\n    global.fetch = url => {\n      if (url.includes('/api/psoc/search')) {\n        const searchParams = new URLSearchParams(url.split('?')[1]);\n        const query = searchParams.get('q') || '';\n        return mockPsocSearch(query);\n      }\n      if (url.includes('/api/psgc/search')) {\n        const searchParams = new URLSearchParams(url.split('?')[1]);\n        const query = searchParams.get('q') || '';\n        return mockPsgcSearch(query);\n      }\n      return Promise.resolve({ ok: false });\n    };\n\n    return <ResidentForm {...args} />;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Resident form pre-filled with sample data for demonstration.',\n      },\n    },\n  },\n};\n\n// Female resident example\nexport const FemaleResident: Story = {\n  args: {\n    onSubmit: mockSuccessfulSubmission,\n    onCancel: mockAction('Female resident form cancelled'),\n    initialData: {\n      firstName: 'Maria',\n      middleName: 'Reyes',\n      lastName: 'Cruz',\n      sex: 'female',\n      civilStatus: 'single',\n      citizenship: 'Filipino',\n      birthdate: '1992-03-22',\n      birthPlaceName: 'Cebu City, Cebu',\n      birthPlaceCode: '072209',\n      educationAttainment: 'college_graduate',\n      isGraduate: true,\n      employmentStatus: 'employed',\n      psocCode: '2221',\n      occupationTitle: 'Registered Nurse',\n      email: 'maria.cruz@hospital.com',\n      mobileNumber: '+63 928 987 6543',\n      householdCode: 'HH-2024-002',\n    },\n  },\n  render: args => {\n    global.fetch = url => {\n      if (url.includes('/api/psoc/search')) {\n        return mockPsocSearch('nurse');\n      }\n      if (url.includes('/api/psgc/search')) {\n        return mockPsgcSearch('cebu');\n      }\n      return Promise.resolve({ ok: false });\n    };\n\n    return <ResidentForm {...args} />;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Female resident registration with healthcare professional data.',\n      },\n    },\n  },\n};\n\n// Senior citizen example\nexport const SeniorCitizen: Story = {\n  args: {\n    onSubmit: mockSuccessfulSubmission,\n    onCancel: mockAction('Senior citizen form cancelled'),\n    initialData: {\n      firstName: 'Roberto',\n      middleName: 'Luna',\n      lastName: 'Garcia',\n      sex: 'male',\n      civilStatus: 'married',\n      citizenship: 'Filipino',\n      birthdate: '1955-12-10',\n      birthPlaceName: 'Manila City, Metro Manila',\n      birthPlaceCode: '137604',\n      educationAttainment: 'college_graduate',\n      isGraduate: true,\n      employmentStatus: 'retired',\n      psocCode: '1112',\n      occupationTitle: 'Former Government Official',\n      email: 'roberto.garcia@retired.gov.ph',\n      phoneNumber: '02-123-4567',\n      mobileNumber: '+63 919 123 4567',\n      householdCode: 'HH-2024-003',\n    },\n  },\n  render: args => {\n    global.fetch = url => {\n      if (url.includes('/api/psoc/search')) {\n        return mockPsocSearch('government');\n      }\n      if (url.includes('/api/psgc/search')) {\n        return mockPsgcSearch('manila');\n      }\n      return Promise.resolve({ ok: false });\n    };\n\n    return <ResidentForm {...args} />;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Senior citizen resident with retired status and government background.',\n      },\n    },\n  },\n};\n\n// Young professional example\nexport const YoungProfessional: Story = {\n  args: {\n    onSubmit: mockSuccessfulSubmission,\n    onCancel: mockAction('Young professional form cancelled'),\n    initialData: {\n      firstName: 'Alexandra',\n      middleName: 'Marie',\n      lastName: 'Torres',\n      sex: 'female',\n      civilStatus: 'single',\n      citizenship: 'Filipino',\n      birthdate: '1998-08-14',\n      birthPlaceName: 'Davao City, Davao del Sur',\n      birthPlaceCode: '112302',\n      educationAttainment: 'college_graduate',\n      isGraduate: true,\n      employmentStatus: 'employed',\n      psocCode: '2341',\n      occupationTitle: 'Elementary School Teacher',\n      email: 'alexandra.torres@school.edu.ph',\n      mobileNumber: '+63 945 678 9012',\n      householdCode: 'HH-2024-004',\n    },\n  },\n  render: args => {\n    global.fetch = url => {\n      if (url.includes('/api/psoc/search')) {\n        return mockPsocSearch('teacher');\n      }\n      if (url.includes('/api/psgc/search')) {\n        return mockPsgcSearch('davao');\n      }\n      return Promise.resolve({ ok: false });\n    };\n\n    return <ResidentForm {...args} />;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Young professional teacher with education sector employment.',\n      },\n    },\n  },\n};\n\n// Validation errors demonstration\nexport const ValidationErrors: Story = {\n  args: {\n    onSubmit: mockSuccessfulSubmission,\n    onCancel: mockAction('Validation form cancelled'),\n  },\n  render: args => {\n    global.fetch = () => Promise.resolve({ ok: false });\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"rounded-lg bg-red-50 p-4\">\n          <h3 className=\"font-medium text-red-900\">Validation Demo</h3>\n          <p className=\"mt-1 text-sm text-red-700\">\n            Try submitting the form without filling required fields to see validation errors.\n          </p>\n        </div>\n        <ResidentForm {...args} />\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Form validation demonstration - submit without required fields to see error messages.',\n      },\n    },\n  },\n};\n\n// Loading states demonstration\nexport const SearchLoadingStates: Story = {\n  args: {\n    onSubmit: mockSuccessfulSubmission,\n    onCancel: mockAction('Search demo cancelled'),\n  },\n  render: args => {\n    // Mock slow API responses to show loading states\n    global.fetch = url => {\n      if (url.includes('/api/psoc/search')) {\n        return new Promise(resolve => setTimeout(() => resolve(mockPsocSearch('engineer')), 2000));\n      }\n      if (url.includes('/api/psgc/search')) {\n        return new Promise(resolve => setTimeout(() => resolve(mockPsgcSearch('lipa')), 2000));\n      }\n      return Promise.resolve({ ok: false });\n    };\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"rounded-lg bg-blue-50 p-4\">\n          <h3 className=\"font-medium text-blue-900\">Search Loading Demo</h3>\n          <p className=\"mt-1 text-sm text-blue-700\">\n            Try searching in the occupation and birth place fields to see loading states.\n          </p>\n        </div>\n        <ResidentForm {...args} />\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Demonstration of loading states during search operations.',\n      },\n    },\n  },\n};\n\n// API error handling\nexport const APIErrors: Story = {\n  args: {\n    onSubmit: mockSuccessfulSubmission,\n    onCancel: mockAction('API error form cancelled'),\n  },\n  render: args => {\n    // Mock API errors\n    global.fetch = () =>\n      Promise.resolve({\n        ok: false,\n        status: 500,\n        statusText: 'Internal Server Error',\n      });\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"rounded-lg bg-yellow-50 p-4\">\n          <h3 className=\"font-medium text-yellow-900\">API Error Demo</h3>\n          <p className=\"mt-1 text-sm text-yellow-700\">\n            Search operations will fail to demonstrate error handling.\n          </p>\n        </div>\n        <ResidentForm {...args} />\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Demonstration of error handling when API calls fail.',\n      },\n    },\n  },\n};\n\n// Submission loading state\nexport const SubmissionLoading: Story = {\n  args: {\n    onSubmit: async data => {\n      mockAction('Form submission started')(data);\n      return new Promise(resolve => setTimeout(resolve, 3000));\n    },\n    onCancel: mockAction('Loading form cancelled'),\n    initialData: {\n      firstName: 'Test',\n      lastName: 'User',\n      sex: 'male',\n      birthdate: '1990-01-01',\n    },\n  },\n  render: args => {\n    global.fetch = () => Promise.resolve({ ok: true });\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"rounded-lg bg-green-50 p-4\">\n          <h3 className=\"font-medium text-green-900\">Submission Loading Demo</h3>\n          <p className=\"mt-1 text-sm text-green-700\">\n            Submit the form to see the loading state during submission.\n          </p>\n        </div>\n        <ResidentForm {...args} />\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Demonstration of loading state during form submission.',\n      },\n    },\n  },\n};\n\n// Without cancel button\nexport const WithoutCancelButton: Story = {\n  args: {\n    onSubmit: mockSuccessfulSubmission,\n    // No onCancel prop - cancel button won't show\n  },\n  render: args => {\n    global.fetch = () => Promise.resolve({ ok: true });\n    return <ResidentForm {...args} />;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Resident form without cancel button (when onCancel prop is not provided).',\n      },\n    },\n  },\n};\n\n// Mobile responsive view\nexport const MobileView: Story = {\n  args: {\n    onSubmit: mockSuccessfulSubmission,\n    onCancel: mockAction('Mobile form cancelled'),\n    initialData: {\n      firstName: 'Mobile',\n      lastName: 'User',\n      sex: 'female',\n      birthdate: '1995-05-15',\n    },\n  },\n  render: args => {\n    global.fetch = () => Promise.resolve({ ok: true });\n    return <ResidentForm {...args} />;\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n    docs: {\n      description: {\n        story: 'Resident form optimized for mobile devices.',\n      },\n    },\n  },\n};\n\n// Dark mode\nexport const DarkMode: Story = {\n  args: {\n    onSubmit: mockSuccessfulSubmission,\n    onCancel: mockAction('Dark mode form cancelled'),\n    initialData: {\n      firstName: 'Dark',\n      middleName: 'Mode',\n      lastName: 'User',\n      sex: 'male',\n      civilStatus: 'single',\n      birthdate: '1988-07-20',\n    },\n  },\n  render: args => {\n    global.fetch = () => Promise.resolve({ ok: true });\n\n    return (\n      <div className=\"dark min-h-screen bg-gray-900\">\n        <ResidentForm {...args} />\n      </div>\n    );\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n      values: [{ name: 'dark', value: '#1f2937' }],\n    },\n    docs: {\n      description: {\n        story: 'Resident form in dark mode.',\n      },\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/addresses.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/api-consolidated.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[361,364],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[361,364],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[689,692],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[689,692],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[786,789],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[786,789],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1169,1172],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1169,1172],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2524,2527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2524,2527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":127,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2609,2612],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2609,2612],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * API Types\n * Consolidated API request/response interfaces and error types\n */\n\n// =============================================================================\n// STANDARD API RESPONSE TYPES\n// =============================================================================\n\n/**\n * Standard API success response\n */\nexport interface ApiSuccessResponse<T = any> {\n  success: true;\n  data: T;\n  message?: string;\n  meta?: {\n    total?: number;\n    page?: number;\n    limit?: number;\n    hasMore?: boolean;\n  };\n}\n\n/**\n * Standard API error response\n */\nexport interface ApiErrorResponse {\n  success: false;\n  error: {\n    message: string;\n    code: string;\n    details?: Record<string, any>;\n    timestamp: string;\n  };\n}\n\n/**\n * Generic API response\n */\nexport type ApiResponse<T = any> = ApiSuccessResponse<T> | ApiErrorResponse;\n\n// =============================================================================\n// SPECIFIC ERROR RESPONSE TYPES\n// =============================================================================\n\n/**\n * Field validation error\n */\nexport interface FieldValidationError {\n  field: string;\n  message: string;\n  code?: string;\n  value?: any;\n}\n\n/**\n * Validation error response\n */\nexport interface ValidationErrorResponse extends ApiErrorResponse {\n  error: {\n    message: string;\n    code: 'VALIDATION_ERROR';\n    details: {\n      fields: FieldValidationError[];\n    };\n    timestamp: string;\n  };\n}\n\n/**\n * Rate limit error response\n */\nexport interface RateLimitErrorResponse extends ApiErrorResponse {\n  error: {\n    message: string;\n    code: 'RATE_LIMIT_EXCEEDED';\n    details: {\n      limit: number;\n      windowMs: number;\n      retryAfter: number;\n    };\n    timestamp: string;\n  };\n}\n\n/**\n * Authentication error response\n */\nexport interface AuthErrorResponse extends ApiErrorResponse {\n  error: {\n    message: string;\n    code: 'UNAUTHORIZED' | 'FORBIDDEN' | 'SESSION_EXPIRED';\n    details?: {\n      requiredPermissions?: string[];\n      currentRole?: string;\n    };\n    timestamp: string;\n  };\n}\n\n// =============================================================================\n// API REQUEST TYPES\n// =============================================================================\n\n/**\n * Paginated request parameters\n */\nexport interface PaginatedRequest {\n  page?: number;\n  limit?: number;\n  sort?: string;\n  order?: 'asc' | 'desc';\n}\n\n/**\n * Search request parameters\n */\nexport interface SearchRequest extends PaginatedRequest {\n  query?: string;\n  filters?: Record<string, any>;\n}\n\n/**\n * Bulk operation request\n */\nexport interface BulkOperationRequest<T = any> {\n  items: T[];\n  options?: {\n    continueOnError?: boolean;\n    validateAll?: boolean;\n  };\n}\n\n// =============================================================================\n// HEALTH CHECK TYPES\n// =============================================================================\n\n/**\n * Health check response\n */\nexport interface HealthCheckResponse {\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  timestamp: string;\n  services: {\n    database: 'up' | 'down';\n    auth: 'up' | 'down';\n    storage: 'up' | 'down';\n  };\n  uptime: number;\n  version: string;\n}\n\n// =============================================================================\n// TYPE GUARDS\n// =============================================================================\n\n/**\n * Check if response is successful\n */\nexport function isApiSuccess<T>(response: ApiResponse<T>): response is ApiSuccessResponse<T> {\n  return response.success === true;\n}\n\n/**\n * Check if response is error\n */\nexport function isApiError(response: ApiResponse): response is ApiErrorResponse {\n  return response.success === false;\n}\n\n/**\n * Check if error is validation error\n */\nexport function isValidationError(response: ApiErrorResponse): response is ValidationErrorResponse {\n  return response.error.code === 'VALIDATION_ERROR';\n}\n\n/**\n * Check if error is rate limit error\n */\nexport function isRateLimitError(response: ApiErrorResponse): response is RateLimitErrorResponse {\n  return response.error.code === 'RATE_LIMIT_EXCEEDED';\n}\n\n/**\n * Check if error is auth error\n */\nexport function isAuthError(response: ApiErrorResponse): response is AuthErrorResponse {\n  return ['UNAUTHORIZED', 'FORBIDDEN', 'SESSION_EXPIRED'].includes(response.error.code);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/api-requests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/api.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1321,1324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1321,1324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1568,1571],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1568,1571],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2418,2421],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2418,2421],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * API Types - RESTful API Interface Collection\n *\n * @fileoverview Comprehensive TypeScript interfaces for standardized API communication\n * in the Citizenly RBI system. Provides consistent request/response patterns for all\n * REST endpoints with proper error handling and Supabase integration.\n *\n * @version 3.0.0\n * @since 2025-01-01\n * @author Citizenly Development Team\n *\n * @example Standard API Response Usage\n * ```typescript\n * import { ApiResponse, ApiSuccessResponse } from '@/types/api';\n *\n * const response: ApiResponse<ResidentRecord[]> = {\n *   success: true,\n *   data: residents,\n *   message: 'Residents retrieved successfully',\n *   pagination: { page: 1, limit: 10, total: 100, totalPages: 10 }\n * };\n * ```\n */\n\n// =============================================================================\n// COMMON API ROUTE INTERFACES\n// =============================================================================\n\n// Note: AuthUserProfile is now imported directly by API files from @/types/auth\n\n/**\n * Resident with household relationship for authorization\n */\nexport interface ResidentWithHousehold {\n  id: string;\n  households: { barangay_code: string };\n}\n\n/**\n * Household record for API operations\n */\nexport interface HouseholdRecord {\n  barangay_code: string;\n  code: string;\n  [key: string]: any;\n}\n\n/**\n * PSOC (Philippine Standard Occupational Classification) record\n */\nexport interface PSocRecord {\n  code?: string;\n  title?: string;\n  occupation_code?: string;\n  occupation_title?: string;\n  full_hierarchy?: string;\n  [key: string]: any;\n}\n\n// =============================================================================\n// GENERIC API RESPONSE TYPES\n// =============================================================================\n\n/**\n * Standard API success response structure\n */\nexport interface ApiSuccessResponse<T = unknown> {\n  success: true;\n  data: T;\n  message?: string;\n  pagination?: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n  };\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Standard API error response structure\n */\nexport interface ApiErrorResponse {\n  success: false;\n  error: {\n    message: string;\n    code?: string;\n    details?: Record<string, unknown>;\n    field?: string; // For validation errors\n  };\n  timestamp: string;\n  path?: string;\n}\n\n/**\n * Union type for all API responses\n */\nexport type ApiResponse<T = any> = ApiSuccessResponse<T> | ApiErrorResponse;\n\n/**\n * Alternative API response format (from authentication/types.ts)\n * Used for standardized API responses following API Design Standards\n */\nexport interface StandardApiResponse<T> {\n  data: T;\n  message?: string;\n  metadata?: {\n    timestamp: string;\n    version: string;\n    requestId?: string;\n  };\n}\n\n/**\n * Alternative paginated response format (from authentication/types.ts)\n * Used for standardized paginated API responses\n */\nexport interface StandardPaginatedResponse<T> {\n  data: T[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    pages: number;\n    hasNext: boolean;\n    hasPrev: boolean;\n  };\n  message?: string;\n  metadata?: {\n    timestamp: string;\n    version: string;\n    requestId?: string;\n  };\n}\n\n/**\n * Alternative error response format (from authentication/types.ts)\n * Used for detailed error responses with request tracking\n */\nexport interface StandardErrorResponse {\n  error: {\n    code: string;\n    message: string;\n    details?: Record<string, unknown> | string[] | string;\n    field?: string;\n  };\n  timestamp: string;\n  path: string;\n  requestId?: string;\n}\n\n// =============================================================================\n// REQUEST TYPES\n// =============================================================================\n\n/**\n * Standard pagination parameters\n */\nexport interface PaginationParams {\n  page?: number;\n  limit?: number;\n  offset?: number;\n  cursor?: string;\n}\n\n/**\n * Sort parameters for API requests\n */\nexport interface SortParams {\n  sort?: string;\n  order?: 'asc' | 'desc';\n}\n\n/**\n * Filter parameters for API requests\n */\nexport interface FilterParams {\n  search?: string;\n  status?: string;\n  [key: string]: string | number | boolean | undefined;\n}\n\n/**\n * Standard search parameters\n */\nexport interface SearchParams extends PaginationParams {\n  query?: string;\n  searchTerm?: string;\n  sortBy?: string;\n  sortOrder?: 'asc' | 'desc';\n  filters?: Record<string, unknown>;\n}\n\n/**\n * Request metadata for tracking and auditing\n */\nexport interface RequestMetadata {\n  userAgent?: string;\n  ipAddress?: string;\n  requestId?: string;\n  timestamp: string;\n  userId?: string;\n}\n\n// =============================================================================\n// SUPABASE-SPECIFIC TYPES\n// =============================================================================\n\n/**\n * Supabase query response wrapper\n */\nexport interface SupabaseQueryResponse<T> {\n  data: T | null;\n  error: {\n    message: string;\n    details?: string;\n    hint?: string;\n    code?: string;\n  } | null;\n  count?: number | null;\n  status?: number;\n  statusText?: string;\n}\n\n// Note: SupabaseAuthResponse moved to auth.ts to avoid conflicts\n\n// =============================================================================\n// PSGC API TYPES\n// =============================================================================\n\n/**\n * PSGC search request parameters\n */\nexport interface PsgcSearchParams extends SearchParams {\n  level?: 'region' | 'province' | 'city' | 'municipality' | 'barangay' | 'all';\n  parentCode?: string;\n  includeInactive?: boolean;\n}\n\n/**\n * PSGC search result item (from hook)\n */\nexport interface PsgcSearchResult {\n  code: string;\n  name: string;\n  level: 'region' | 'province' | 'city' | 'municipality' | 'barangay';\n  parent_code?: string;\n  full_address?: string;\n}\n\n/**\n * PSGC lookup response\n */\nexport interface PsgcLookupResponse extends ApiSuccessResponse<PsgcSearchResult[]> {\n  data: PsgcSearchResult[];\n}\n\n// =============================================================================\n// PSOC API TYPES\n// =============================================================================\n\n/**\n * PSOC (occupation) search parameters\n */\nexport interface PsocSearchParams extends SearchParams {\n  level?: number;\n  parentCode?: string;\n  includeHierarchy?: boolean;\n}\n\n/**\n * PSOC search result item\n */\nexport interface PsocSearchResult {\n  code: string;\n  title: string;\n  level: number;\n  parent_code?: string;\n  hierarchy?: string;\n  is_active: boolean;\n}\n\n/**\n * PSOC lookup response\n */\nexport interface PsocLookupResponse extends ApiSuccessResponse<PsocSearchResult[]> {\n  data: PsocSearchResult[];\n}\n\n// =============================================================================\n// RESIDENT API TYPES\n// =============================================================================\n\n/**\n * Resident creation request\n */\nexport interface CreateResidentRequest {\n  // Personal Information\n  first_name: string;\n  middle_name?: string;\n  last_name: string;\n  extension_name?: string;\n  birthdate: string;\n  sex: 'male' | 'female';\n  civil_status?: string;\n  citizenship?: string;\n\n  // Contact Information\n  email?: string;\n  mobile_number?: string;\n  telephone_number?: string;\n\n  // Location Information\n  barangay_code: string;\n  city_municipality_code: string;\n  region_code: string;\n  household_code?: string;\n\n  // Additional Information\n  philsys_card_number?: string;\n  education_attainment?: string;\n  employment_status?: string;\n  occupation_code?: string;\n\n  // Physical Information\n  blood_type?: string;\n  height?: number;\n  weight?: number;\n  complexion?: string;\n\n  // Cultural Information\n  ethnicity?: string;\n  religion?: string;\n  religion_others_specify?: string;\n\n  // Family Information\n  mother_maiden_first?: string;\n  mother_maiden_middle?: string;\n  mother_maiden_last?: string;\n\n  // Voting Information\n  is_voter?: boolean;\n  is_resident_voter?: boolean;\n  last_voted_date?: string;\n}\n\n/**\n * Resident update request (partial)\n */\nexport interface UpdateResidentRequest extends Partial<CreateResidentRequest> {\n  id: string;\n}\n\n/**\n * Resident search parameters\n */\nexport interface ResidentSearchParams extends SearchParams {\n  sex?: 'male' | 'female';\n  ageMin?: number;\n  ageMax?: number;\n  civilStatus?: string;\n  employmentStatus?: string;\n  educationAttainment?: string;\n  barangayCode?: string;\n  cityMunicipalityCode?: string;\n  provinceCode?: string;\n  regionCode?: string;\n  isVoter?: boolean;\n  bloodType?: string;\n  religion?: string;\n  ethnicity?: string;\n}\n\n// =============================================================================\n// HOUSEHOLD API TYPES\n// =============================================================================\n\n/**\n * Household creation request\n */\nexport interface CreateHouseholdRequest {\n  code: string;\n  street_name?: string;\n  subdivision_name?: string;\n  household_number?: string;\n  barangay_code: string;\n  city_municipality_code?: string;\n  province_code?: string;\n  region_code?: string;\n  head_resident_id?: string;\n  household_type?: string;\n  tenure_status?: string;\n  monthly_income?: number;\n  income_class?: string;\n  no_of_families?: number;\n}\n\n/**\n * Household update request\n */\nexport interface UpdateHouseholdRequest extends Partial<CreateHouseholdRequest> {\n  id: string;\n}\n\n/**\n * Household search parameters\n */\nexport interface HouseholdSearchParams extends SearchParams {\n  barangayCode?: string;\n  cityMunicipalityCode?: string;\n  provinceCode?: string;\n  regionCode?: string;\n  householdType?: string;\n  tenureStatus?: string;\n  incomeClass?: string;\n  minIncome?: number;\n  maxIncome?: number;\n  minMembers?: number;\n  maxMembers?: number;\n}\n\n// =============================================================================\n// ERROR CODES AND VALIDATION TYPES\n// =============================================================================\n\n/**\n * Standardized error codes for API responses\n */\nexport enum ErrorCode {\n  // Validation errors\n  VALIDATION_ERROR = 'VALIDATION_ERROR',\n  REQUIRED_FIELD = 'REQUIRED_FIELD',\n  INVALID_FORMAT = 'INVALID_FORMAT',\n\n  // Authentication errors\n  UNAUTHORIZED = 'UNAUTHORIZED',\n  TOKEN_EXPIRED = 'TOKEN_EXPIRED',\n  INVALID_TOKEN = 'INVALID_TOKEN',\n\n  // Authorization errors\n  FORBIDDEN = 'FORBIDDEN',\n  INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS',\n\n  // Resource errors\n  NOT_FOUND = 'NOT_FOUND',\n  ALREADY_EXISTS = 'ALREADY_EXISTS',\n  CONFLICT = 'CONFLICT',\n\n  // Server errors\n  INTERNAL_ERROR = 'INTERNAL_ERROR',\n  DATABASE_ERROR = 'DATABASE_ERROR',\n  EXTERNAL_SERVICE_ERROR = 'EXTERNAL_SERVICE_ERROR',\n\n  // Rate limiting\n  RATE_LIMIT_EXCEEDED = 'RATE_LIMIT_EXCEEDED',\n\n  // Security\n  SQL_INJECTION_ATTEMPT = 'SQL_INJECTION_ATTEMPT',\n  CSRF_TOKEN_INVALID = 'CSRF_TOKEN_INVALID',\n}\n\n// =============================================================================\n// VALIDATION AND ERROR TYPES\n// =============================================================================\n\n/**\n * Field validation error\n */\nexport interface FieldValidationError {\n  field: string;\n  message: string;\n  code?: string;\n  value?: unknown;\n}\n\n/**\n * Validation error response\n */\nexport interface ValidationErrorResponse extends ApiErrorResponse {\n  error: {\n    message: string;\n    code: 'VALIDATION_ERROR';\n    details: {\n      fields: FieldValidationError[];\n    };\n  };\n}\n\n/**\n * Rate limit error response\n */\nexport interface RateLimitErrorResponse extends ApiErrorResponse {\n  error: {\n    message: string;\n    code: 'RATE_LIMIT_EXCEEDED';\n    details: {\n      limit: number;\n      windowMs: number;\n      retryAfter: number;\n    };\n  };\n}\n\n/**\n * Authentication error response\n */\nexport interface AuthErrorResponse extends ApiErrorResponse {\n  error: {\n    message: string;\n    code: 'UNAUTHORIZED' | 'FORBIDDEN' | 'TOKEN_EXPIRED';\n    details?: {\n      requiredRole?: string;\n      requiredPermission?: string;\n    };\n  };\n}\n\n// =============================================================================\n// COMMON API TYPES\n// =============================================================================\n\n/**\n * Health check response\n */\nexport interface HealthCheckResponse {\n  status: 'healthy' | 'unhealthy';\n  timestamp: string;\n  version: string;\n  environment: string;\n  services: {\n    database: 'connected' | 'disconnected';\n    storage: 'available' | 'unavailable';\n    cache: 'available' | 'unavailable';\n  };\n  uptime: number;\n}\n\n/**\n * Command menu search response\n */\nexport interface CommandMenuSearchResponse extends ApiSuccessResponse {\n  data: {\n    residents?: Array<{\n      id: string;\n      name: string;\n      type: 'resident';\n      description: string;\n      href: string;\n    }>;\n    households?: Array<{\n      id: string;\n      code: string;\n      type: 'household';\n      description: string;\n      href: string;\n    }>;\n    pages?: Array<{\n      name: string;\n      type: 'page';\n      description: string;\n      href: string;\n    }>;\n  };\n}\n\n// =============================================================================\n// TYPE GUARDS AND UTILITIES\n// =============================================================================\n\n/**\n * Type guard to check if response is successful\n */\nexport function isApiSuccess<T>(response: ApiResponse<T>): response is ApiSuccessResponse<T> {\n  return response.success === true;\n}\n\n/**\n * Type guard to check if response is an error\n */\nexport function isApiError(response: ApiResponse): response is ApiErrorResponse {\n  return response.success === false;\n}\n\n/**\n * Type guard to check if error is validation error\n */\nexport function isValidationError(response: ApiErrorResponse): response is ValidationErrorResponse {\n  return response.error.code === 'VALIDATION_ERROR';\n}\n\n/**\n * Type guard to check if error is rate limit error\n */\nexport function isRateLimitError(response: ApiErrorResponse): response is RateLimitErrorResponse {\n  return response.error.code === 'RATE_LIMIT_EXCEEDED';\n}\n\n/**\n * Type guard to check if error is auth error\n */\nexport function isAuthError(response: ApiErrorResponse): response is AuthErrorResponse {\n  return ['UNAUTHORIZED', 'FORBIDDEN', 'TOKEN_EXPIRED'].includes(response.error.code || '');\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/cache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/charts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/components.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HTMLAttributes' is defined but never used.","line":13,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":226,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5780,5783],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5780,5783],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":232,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5906,5909],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5906,5909],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":244,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6171,6174],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6171,6174],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":456,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":456,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11152,11155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11152,11155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Component Types - React Component Interface Collection\n *\n * @fileoverview Consolidated component prop interfaces and common patterns\n * for the Citizenly RBI React component library. Provides consistent typing\n * patterns across all UI components with accessibility and testing support.\n *\n * @version 3.0.0\n * @since 2025-01-01\n * @author Citizenly Development Team\n */\n\nimport { ReactNode, HTMLAttributes, ButtonHTMLAttributes, InputHTMLAttributes, JSX } from 'react';\n\n// =============================================================================\n// COMMON COMPONENT PROPS\n// =============================================================================\n\n/**\n * Base component props that all components should support\n */\nexport interface BaseComponentProps {\n  /** Additional CSS classes */\n  className?: string;\n  /** Unique identifier */\n  id?: string;\n  /** Data attributes for testing */\n  'data-testid'?: string;\n}\n\n/**\n * Component with children\n */\nexport interface ComponentWithChildren extends BaseComponentProps {\n  children?: ReactNode;\n}\n\n/**\n * Component size variants\n */\nexport type ComponentSize = 'sm' | 'md' | 'lg' | 'xl';\n\n/**\n * Component color variants\n */\nexport type ComponentVariant =\n  | 'default'\n  | 'primary'\n  | 'secondary'\n  | 'destructive'\n  | 'outline'\n  | 'ghost'\n  | 'link';\n\n// =============================================================================\n// BUTTON COMPONENT TYPES\n// =============================================================================\n\n/**\n * Button component props\n */\nexport interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement>, BaseComponentProps {\n  /** Visual style variant */\n  variant?: ComponentVariant;\n  /** Size variant */\n  size?: ComponentSize;\n  /** Render as a different element */\n  asChild?: boolean;\n  /** Show loading spinner and disable button */\n  loading?: boolean;\n  /** Icon to display on the left */\n  leftIcon?: ReactNode;\n  /** Icon to display on the right */\n  rightIcon?: ReactNode;\n  /** Full width button */\n  fullWidth?: boolean;\n}\n\n// =============================================================================\n// FORM COMPONENT TYPES\n// =============================================================================\n\n/**\n * Form field base props\n */\nexport interface FormFieldProps extends BaseComponentProps {\n  /** Field label */\n  label?: string;\n  /** Help text */\n  description?: string;\n  /** Error message */\n  error?: string;\n  /** Whether field is required */\n  required?: boolean;\n  /** Whether field is disabled */\n  disabled?: boolean;\n  /** Field name for form submission */\n  name?: string;\n}\n\n/**\n * Input field props\n */\nexport interface InputProps\n  extends Omit<InputHTMLAttributes<HTMLInputElement>, 'size'>,\n    FormFieldProps {\n  /** Size variant */\n  size?: ComponentSize;\n  /** Input type */\n  type?: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url' | 'search';\n  /** Placeholder text */\n  placeholder?: string;\n  /** Left icon */\n  leftIcon?: ReactNode;\n  /** Right icon */\n  rightIcon?: ReactNode;\n}\n\n/**\n * Select field props\n */\nexport interface SelectProps extends FormFieldProps {\n  /** Select options */\n  options: Array<{\n    value: string | number;\n    label: string;\n    disabled?: boolean;\n  }>;\n  /** Current value */\n  value?: string | number;\n  /** Change handler */\n  onChange?: (value: string | number) => void;\n  /** Placeholder text */\n  placeholder?: string;\n  /** Allow multiple selection */\n  multiple?: boolean;\n  /** Enable search/filter */\n  searchable?: boolean;\n}\n\n/**\n * Checkbox props\n */\nexport interface CheckboxProps extends FormFieldProps {\n  /** Whether checkbox is checked */\n  checked?: boolean;\n  /** Change handler */\n  onChange?: (checked: boolean) => void;\n  /** Indeterminate state */\n  indeterminate?: boolean;\n}\n\n/**\n * Radio button props\n */\nexport interface RadioProps extends FormFieldProps {\n  /** Radio value */\n  value: string | number;\n  /** Whether radio is selected */\n  checked?: boolean;\n  /** Change handler */\n  onChange?: (value: string | number) => void;\n  /** Radio group name */\n  name?: string;\n}\n\n// =============================================================================\n// LAYOUT COMPONENT TYPES\n// =============================================================================\n\n/**\n * Card component props\n */\nexport interface CardProps extends ComponentWithChildren {\n  /** Card variant */\n  variant?: 'default' | 'outlined' | 'elevated';\n  /** Padding size */\n  padding?: ComponentSize;\n  /** Whether card is interactive */\n  interactive?: boolean;\n  /** Click handler for interactive cards */\n  onClick?: () => void;\n}\n\n/**\n * Modal component props\n */\nexport interface ModalProps extends ComponentWithChildren {\n  /** Whether modal is open */\n  open: boolean;\n  /** Close handler */\n  onClose: () => void;\n  /** Modal title */\n  title?: string;\n  /** Modal size */\n  size?: ComponentSize | 'xs' | '2xl' | '3xl' | '4xl' | '5xl' | '6xl' | 'full';\n  /** Whether to show close button */\n  showCloseButton?: boolean;\n  /** Whether clicking backdrop closes modal */\n  closeOnBackdropClick?: boolean;\n  /** Whether pressing escape closes modal */\n  closeOnEscape?: boolean;\n}\n\n/**\n * Drawer component props\n */\nexport interface DrawerProps extends ComponentWithChildren {\n  /** Whether drawer is open */\n  open: boolean;\n  /** Close handler */\n  onClose: () => void;\n  /** Drawer position */\n  position?: 'left' | 'right' | 'top' | 'bottom';\n  /** Drawer size */\n  size?: ComponentSize;\n}\n\n// =============================================================================\n// DATA DISPLAY COMPONENT TYPES\n// =============================================================================\n\n/**\n * Table column definition\n */\nexport interface TableColumn<T = any> {\n  /** Column key */\n  key: keyof T;\n  /** Column header */\n  header: string;\n  /** Cell renderer */\n  render?: (value: any, row: T) => ReactNode;\n  /** Column width */\n  width?: string | number;\n  /** Whether column is sortable */\n  sortable?: boolean;\n  /** Text alignment */\n  align?: 'left' | 'center' | 'right';\n}\n\n/**\n * Table component props\n */\nexport interface TableProps<T = any> extends BaseComponentProps {\n  /** Table data */\n  data: T[];\n  /** Column definitions */\n  columns: TableColumn<T>[];\n  /** Loading state */\n  loading?: boolean;\n  /** Empty state message */\n  emptyMessage?: string;\n  /** Row click handler */\n  onRowClick?: (row: T) => void;\n  /** Enable row selection */\n  selectable?: boolean;\n  /** Selected rows */\n  selectedRows?: T[];\n  /** Selection change handler */\n  onSelectionChange?: (selectedRows: T[]) => void;\n}\n\n/**\n * Pagination props\n */\nexport interface PaginationProps extends BaseComponentProps {\n  /** Current page (1-based) */\n  currentPage: number;\n  /** Total number of pages */\n  totalPages: number;\n  /** Page change handler */\n  onPageChange: (page: number) => void;\n  /** Items per page */\n  pageSize?: number;\n  /** Page size change handler */\n  onPageSizeChange?: (pageSize: number) => void;\n  /** Show page size selector */\n  showPageSizeSelector?: boolean;\n  /** Available page sizes */\n  pageSizeOptions?: number[];\n}\n\n// =============================================================================\n// FEEDBACK COMPONENT TYPES\n// =============================================================================\n\n/**\n * Alert severity levels\n */\nexport type AlertSeverity = 'info' | 'success' | 'warning' | 'error';\n\n/**\n * Alert component props\n */\nexport interface AlertProps extends ComponentWithChildren {\n  /** Alert severity */\n  severity?: AlertSeverity;\n  /** Alert title */\n  title?: string;\n  /** Whether alert is dismissible */\n  dismissible?: boolean;\n  /** Dismiss handler */\n  onDismiss?: () => void;\n  /** Alert icon */\n  icon?: ReactNode;\n}\n\n/**\n * Loading component props\n */\nexport interface LoadingProps extends BaseComponentProps {\n  /** Loading message */\n  message?: string;\n  /** Size variant */\n  size?: ComponentSize;\n  /** Whether to show overlay */\n  overlay?: boolean;\n}\n\n/**\n * Progress component props\n */\nexport interface ProgressProps extends BaseComponentProps {\n  /** Progress value (0-100) */\n  value: number;\n  /** Maximum value */\n  max?: number;\n  /** Whether to show label */\n  showLabel?: boolean;\n  /** Custom label */\n  label?: string;\n  /** Progress color */\n  color?: 'primary' | 'secondary' | 'success' | 'warning' | 'error';\n}\n\n// =============================================================================\n// NAVIGATION COMPONENT TYPES\n// =============================================================================\n\n/**\n * Navigation item\n */\nexport interface NavItem {\n  /** Item label */\n  label: string;\n  /** Item href */\n  href?: string;\n  /** Click handler */\n  onClick?: () => void;\n  /** Item icon */\n  icon?: ReactNode;\n  /** Whether item is active */\n  active?: boolean;\n  /** Whether item is disabled */\n  disabled?: boolean;\n  /** Child items */\n  children?: NavItem[];\n}\n\n/**\n * Breadcrumb item\n */\nexport interface BreadcrumbItem {\n  /** Item label */\n  label: string;\n  /** Item href */\n  href?: string;\n  /** Click handler */\n  onClick?: () => void;\n}\n\n/**\n * Tab item\n */\nexport interface TabItem {\n  /** Tab key */\n  key: string;\n  /** Tab label */\n  label: string;\n  /** Tab content */\n  content?: ReactNode;\n  /** Whether tab is disabled */\n  disabled?: boolean;\n  /** Tab icon */\n  icon?: ReactNode;\n}\n\n/**\n * Tabs component props\n */\nexport interface TabsProps extends BaseComponentProps {\n  /** Tab items */\n  items: TabItem[];\n  /** Active tab key */\n  activeTab: string;\n  /** Tab change handler */\n  onTabChange: (tabKey: string) => void;\n  /** Tab orientation */\n  orientation?: 'horizontal' | 'vertical';\n}\n\n// =============================================================================\n// FILE UPLOAD COMPONENT TYPES\n// =============================================================================\n\n/**\n * File upload component props\n */\nexport interface FileUploadProps extends FormFieldProps {\n  dragText?: string;\n  browseText?: string;\n  acceptedFileTypes?: string;\n  maxFileSize?: number; // in MB\n  onFileSelect?: (files: FileList | null) => void;\n  showPreview?: boolean;\n  variant?: 'default' | 'error' | 'success' | 'disabled';\n  size?: ComponentSize;\n  multiple?: boolean;\n}\n\n/**\n * File preview interface\n */\nexport interface FilePreview {\n  file: File;\n  url?: string;\n  isImage: boolean;\n  error?: string;\n}\n\n// =============================================================================\n// SEARCH COMPONENT TYPES\n// =============================================================================\n\n/**\n * Search bar component props\n */\nexport interface SearchBarProps extends BaseComponentProps {\n  value?: string;\n  placeholder?: string;\n  onSearch?: (query: string) => void;\n  onChange?: (value: string) => void;\n  onClear?: () => void;\n  loading?: boolean;\n  disabled?: boolean;\n  size?: ComponentSize;\n  variant?: 'default' | 'outlined' | 'filled';\n  showClearButton?: boolean;\n  showSearchIcon?: boolean;\n  debounceMs?: number;\n}\n\n/**\n * Search result item interface\n */\nexport interface SearchResultItem<T = any> {\n  id: string;\n  title: string;\n  subtitle?: string;\n  description?: string;\n  data: T;\n  type: string;\n  score?: number;\n  highlighted?: string[];\n}\n\n// =============================================================================\n// BUTTON GROUP COMPONENT TYPES\n// =============================================================================\n\n/**\n * Button group option interface\n */\nexport interface ButtonGroupOption<T = string> {\n  label: string;\n  value: T;\n  icon?: ReactNode;\n  disabled?: boolean;\n  tooltip?: string;\n}\n\n/**\n * Button group component props\n */\nexport interface ButtonGroupProps<T = string> extends BaseComponentProps {\n  options: ButtonGroupOption<T>[];\n  value?: T | T[];\n  onChange?: (value: T | T[]) => void;\n  multiple?: boolean;\n  size?: ComponentSize;\n  variant?: ComponentVariant;\n  orientation?: 'horizontal' | 'vertical';\n  fullWidth?: boolean;\n  disabled?: boolean;\n}\n\n// =============================================================================\n// DIALOG AND CONFIRMATION TYPES\n// =============================================================================\n\n/**\n * Dialog action interface\n */\nexport interface DialogAction {\n  label: string;\n  onClick: () => void | Promise<void>;\n  variant?: ComponentVariant;\n  disabled?: boolean;\n  loading?: boolean;\n}\n\n/**\n * Confirmation dialog props\n */\nexport interface ConfirmationDialogProps extends BaseComponentProps {\n  open: boolean;\n  onConfirm: () => void | Promise<void>;\n  onCancel: () => void;\n  title: string;\n  message: string;\n  confirmText?: string;\n  cancelText?: string;\n  variant?: 'default' | 'destructive' | 'warning';\n  loading?: boolean;\n}\n\n// =============================================================================\n// FORM FIELD TYPES (from lib/types/forms.ts)\n// =============================================================================\n\n/**\n * Base form field props that all form components should implement\n */\nexport interface BaseFieldSetProps {\n  /** Field label text */\n  label?: string;\n  /** Helper text shown below the field */\n  helperText?: string;\n  /** Error message text (overrides helperText when present) */\n  errorMessage?: string;\n  /** Whether the field is required */\n  required?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n  /** Whether the field is disabled */\n  disabled?: boolean;\n  /** Placeholder text for input fields */\n  placeholder?: string;\n}\n\n/**\n * Props for form fields with icon support\n */\nexport interface FieldSetWithIconsProps extends BaseFieldSetProps {\n  /** Icon displayed on the left side */\n  leftIcon?: ReactNode;\n  /** Icon displayed on the right side */\n  rightIcon?: ReactNode;\n  /** Addon content displayed on the left side (e.g., currency symbol) */\n  leftAddon?: ReactNode;\n  /** Addon content displayed on the right side (e.g., unit label) */\n  rightAddon?: ReactNode;\n}\n\n/**\n * Props for clearable form fields\n */\nexport interface ClearableFieldSetProps extends FieldSetWithIconsProps {\n  /** Whether the field can be cleared */\n  clearable?: boolean;\n  /** Callback when field is cleared */\n  onClear?: () => void;\n}\n\n/**\n * Common validation state types for forms\n */\nexport type FormValidationState = 'default' | 'error' | 'success' | 'warning';\n\n/**\n * Common field sizes for forms\n */\nexport type FormFieldSize = 'sm' | 'md' | 'lg';\n\n/**\n * Props for form fields with validation states\n */\nexport interface ValidatedFieldSetProps extends ClearableFieldSetProps {\n  /** Visual state of the field */\n  state?: FormValidationState;\n  /** Size variant of the field */\n  size?: FormFieldSize;\n}\n\n/**\n * Props for form fields with loading states\n */\nexport interface LoadableFieldSetProps extends ValidatedFieldSetProps {\n  /** Whether the field is in loading state */\n  loading?: boolean;\n}\n\n/**\n * Generic select option type for dropdown components\n */\nexport interface GenericSelectOption<T = string> {\n  /** Display label */\n  label: string;\n  /** Option value */\n  value: T;\n  /** Whether option is disabled */\n  disabled?: boolean;\n  /** Optional description */\n  description?: string;\n  /** Optional icon */\n  icon?: ReactNode;\n  /** Optional group/category */\n  group?: string;\n}\n\n/**\n * Props for select field components\n */\nexport interface SelectFieldBaseProps<T = string> extends LoadableFieldSetProps {\n  /** Available options */\n  options: GenericSelectOption<T>[];\n  /** Currently selected value */\n  value?: T | T[];\n  /** Callback when selection changes */\n  onChange?: (value: T | T[] | undefined) => void;\n  /** Whether multiple selection is allowed */\n  multiple?: boolean;\n  /** Whether the field is searchable */\n  searchable?: boolean;\n  /** Custom search filter function */\n  filterOption?: (option: GenericSelectOption<T>, search: string) => boolean;\n}\n\n/**\n * Props for form section/group components\n */\nexport interface FormSectionProps {\n  /** Section title/legend */\n  title?: string;\n  /** Section description */\n  description?: string;\n  /** Child form fields */\n  children: ReactNode;\n  /** Whether any field in the section is required */\n  required?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n  /** Spacing between fields */\n  spacing?: 'sm' | 'md' | 'lg';\n  /** Section layout orientation */\n  orientation?: 'vertical' | 'horizontal';\n}\n\n/**\n * Common field validation function type for forms\n */\nexport type FormFieldValidator<T> = (value: T) => string | undefined;\n\n/**\n * Props for form fields with built-in validation\n */\nexport interface ValidatableFieldSetProps<T> extends LoadableFieldSetProps {\n  /** Field value */\n  value?: T;\n  /** Change handler */\n  onChange?: (value: T) => void;\n  /** Validation function */\n  validator?: FormFieldValidator<T>;\n  /** Whether to validate on change */\n  validateOnChange?: boolean;\n  /** Whether to validate on blur */\n  validateOnBlur?: boolean;\n}\n\n// FormMode moved to forms.ts to avoid duplication\n\n/**\n * Common form submission state\n */\nexport interface FormSubmissionState {\n  /** Whether form is currently submitting */\n  isSubmitting: boolean;\n  /** Whether form has been submitted successfully */\n  isSubmitted: boolean;\n  /** General form error message */\n  error?: string;\n  /** Field-specific validation errors */\n  fieldErrors?: Record<string, string>;\n}\n\n// =============================================================================\n// COMMAND MENU TYPES (consolidated from components/command-menu.ts)\n// =============================================================================\n\n/**\n * Command menu item interface\n */\nexport interface CommandMenuItem {\n  id: string;\n  label: string;\n  description?: string;\n  icon?: React.ComponentType<{ className?: string }>;\n  avatar?: {\n    src: string;\n    alt: string;\n    fallback?: string;\n  };\n  shortcut?: string[];\n  group: string;\n  keywords?: string[];\n  href?: string;\n  onClick?: () => void;\n  disabled?: boolean;\n  recent?: boolean;\n}\n\n/**\n * Command menu group interface\n */\nexport interface CommandMenuGroup {\n  id: string;\n  label: string;\n  items: CommandMenuItem[];\n  priority?: number;\n}\n\n/**\n * Command menu props interface\n */\nexport interface CommandMenuProps {\n  isOpen: boolean;\n  onClose: () => void;\n  items: CommandMenuItem[];\n  placeholder?: string;\n  emptyStateText?: string;\n  className?: string;\n  maxResults?: number;\n  showShortcuts?: boolean;\n  showRecentSection?: boolean;\n}\n\n/**\n * Command menu context value interface\n */\nexport interface CommandMenuContextValue {\n  isOpen: boolean;\n  open: () => void;\n  close: () => void;\n  toggle: () => void;\n  searchQuery: string;\n  setSearchQuery: (query: string) => void;\n}\n\n// =============================================================================\n// MODAL FORM TYPES\n// =============================================================================\n\n/**\n * Household address form data for modals\n * Subset of full HouseholdFormData for address-specific components\n */\nexport interface HouseholdModalFormData {\n  house_number: string;\n  street_id: string;\n  subdivision_id: string;\n}\n\n/**\n * Error boundary provider component props\n * Consolidates from src/lib/monitoring/components/ErrorBoundaryProvider.tsx\n */\nexport interface ErrorBoundaryProviderProps {\n  children: React.ReactNode;\n  fallback?: React.ComponentType<ErrorFallbackProps>;\n  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;\n  enableReporting?: boolean;\n}\n\n/**\n * Error fallback component props\n * Consolidates from src/lib/monitoring/components/ErrorBoundaryProvider.tsx\n */\nexport interface ErrorFallbackProps {\n  error: Error;\n  errorId: string;\n  resetError: () => void;\n}\n\n/**\n * Command menu context extended interface (continued from above)\n */\nexport interface CommandMenuContextExtended extends CommandMenuContextValue {\n  filteredItems: CommandMenuItem[];\n  selectedIndex: number;\n  setSelectedIndex: (index: number) => void;\n  executeCommand: (item: CommandMenuItem) => void;\n}\n\n/**\n * Command menu variant types\n */\nexport type CommandMenuVariant = 'default' | 'compact';\nexport type CommandMenuSize = 'sm' | 'md' | 'lg';\n\n// =============================================================================\n// UI LIBRARY TYPES (from src/lib/ui)\n// =============================================================================\n\n/**\n * Typography variant types\n * Consolidates from src/lib/ui/typography.ts\n */\nexport type TypographyVariant =\n  | 'h1'\n  | 'h2'\n  | 'h3'\n  | 'h4'\n  | 'h5'\n  | 'h6'\n  | 'body'\n  | 'small'\n  | 'caption'\n  | 'overline'\n  | 'link'\n  | 'code';\n\n/**\n * Typography component props\n * Consolidates from src/lib/ui/typography.ts\n */\nexport interface TypographyProps extends BaseComponentProps {\n  variant?: TypographyVariant;\n  component?: keyof JSX.IntrinsicElements;\n  children: ReactNode;\n  color?: 'default' | 'muted' | 'primary' | 'secondary' | 'success' | 'warning' | 'error';\n  align?: 'left' | 'center' | 'right' | 'justify';\n  weight?: 'normal' | 'medium' | 'semibold' | 'bold';\n  truncate?: boolean;\n  noWrap?: boolean;\n}\n\n/**\n * Population pyramid age group data\n * Consolidates from src/lib/ui/population-pyramid.ts\n */\nexport interface AgeGroupData {\n  ageGroup: string;\n  male: number;\n  female: number;\n  malePercentage: number;\n  femalePercentage: number;\n}\n\n/**\n * Population statistics interface\n * Consolidates from src/lib/ui/population-pyramid.ts\n */\nexport interface PopulationStats {\n  total: number;\n  maleCount: number;\n  femaleCount: number;\n  malePercentage: number;\n  femalePercentage: number;\n}\n\n/**\n * Tooltip data for charts\n * Consolidates from src/lib/ui/population-pyramid.ts\n */\nexport interface TooltipData {\n  label: string;\n  value: number;\n  percentage: number;\n  gender?: 'male' | 'female';\n  color?: string;\n}\n\n/**\n * Pie slice data interface\n * Consolidates from src/lib/ui/pieChartMath.ts\n */\nexport interface PieSliceData {\n  value: number;\n  color: string;\n  label: string;\n}\n\n/**\n * Pie slice with calculated angles\n * Consolidates from src/lib/ui/pieChartMath.ts\n */\nexport interface PieSliceWithAngles extends PieSliceData {\n  startAngle: number;\n  endAngle: number;\n  percentage: number;\n}\n\n// =============================================================================\n// PWA AND USER BEHAVIOR TYPES (from src/lib/analytics)\n// =============================================================================\n\n/**\n * User behavior metrics for PWA\n * Consolidates from src/lib/analytics/user-behavior.ts\n */\nexport interface UserBehaviorMetrics {\n  pageViews: number;\n  timeSpent: number;\n  interactions: number;\n  revisits: number;\n  lastVisit: number;\n}\n\n/**\n * PWA install criteria\n * Consolidates from src/lib/analytics/user-behavior.ts\n */\nexport interface PWAInstallCriteria {\n  isReturningUser: boolean;\n  hasInteracted: boolean;\n  hasSpentTime: boolean;\n  hasExplored: boolean;\n}\n\n/**\n * Personalized message for PWA installation\n * Consolidates from src/lib/analytics/user-behavior.ts\n */\nexport interface PersonalizedMessage {\n  title: string;\n  description: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/database.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/errors.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":275,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":275,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7155,7158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7155,7158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Error Types - Application Error Handling Framework\n *\n * @fileoverview Comprehensive error handling TypeScript interfaces for the Citizenly RBI system.\n * Provides structured error types, severity levels, and error boundary patterns for robust\n * application error management and user experience.\n *\n * @version 3.0.0\n * @since 2025-01-01\n * @author Citizenly Development Team\n */\n\nimport type { ReactNode } from 'react';\n\n/**\n * Base error interface for application errors\n */\nexport interface AppError extends Error {\n  code?: string;\n  context?: Record<string, string | number | boolean>;\n  timestamp?: Date;\n  severity?: ErrorSeverity;\n  cause?: Error;\n}\n\n/**\n * Error severity levels\n */\nexport enum ErrorSeverity {\n  LOW = 'low',\n  MEDIUM = 'medium',\n  HIGH = 'high',\n  CRITICAL = 'critical',\n}\n\n/**\n * Error boundary state interface\n */\nexport interface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorId?: string;\n  retryCount?: number;\n}\n\n/**\n * Error boundary props interface\n */\nexport interface ErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: React.ComponentType<ErrorFallbackProps>;\n  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;\n  maxRetries?: number;\n  resetOnPropsChange?: boolean;\n}\n\n/**\n * Error fallback component props\n */\nexport interface ErrorFallbackProps {\n  error: Error;\n  resetError: () => void;\n  retryCount?: number;\n  maxRetries?: number;\n}\n\n/**\n * Field-specific error boundary props\n */\nexport interface FieldErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: ReactNode;\n  fieldName?: string;\n  onFieldError?: (error: Error, fieldName?: string) => void;\n}\n\n/**\n * Error logging context\n */\nexport interface ErrorLogContext {\n  id?: string;\n  operation?: string;\n  userId?: string;\n  sessionId?: string;\n  userAgent?: string;\n  url?: string;\n  component?: string;\n  action?: string;\n  field?: string;\n  timestamp: Date;\n  environment: 'development' | 'staging' | 'production';\n  errorInfo?: {\n    componentStack?: string;\n  };\n}\n\n/**\n * Error recovery strategy\n */\nexport interface ErrorRecoveryStrategy {\n  type: 'retry' | 'fallback' | 'redirect' | 'ignore';\n  maxAttempts?: number;\n  delay?: number;\n  fallbackComponent?: React.ComponentType<Record<string, never>>;\n  redirectUrl?: string;\n}\n\n/**\n * Form field error interface\n */\nexport interface FieldError {\n  field: string;\n  message: string;\n  code?: string;\n  value?: string | number | boolean | null;\n}\n\n/**\n * Network error interface\n */\nexport interface NetworkError extends AppError {\n  status?: number;\n  statusText?: string;\n  url?: string;\n  method?: string;\n  response?: { data?: unknown; headers?: Record<string, string> };\n}\n\n/**\n * Application-specific error codes\n */\nexport enum ErrorCode {\n  // Authentication errors\n  UNAUTHORIZED = 'UNAUTHORIZED',\n  FORBIDDEN = 'FORBIDDEN',\n  SESSION_EXPIRED = 'SESSION_EXPIRED',\n\n  // Validation errors\n  VALIDATION_FAILED = 'VALIDATION_FAILED',\n  VALIDATION_ERROR = 'VALIDATION_ERROR',\n  REQUIRED_FIELD_MISSING = 'REQUIRED_FIELD_MISSING',\n  INVALID_FORMAT = 'INVALID_FORMAT',\n  TYPE_ERROR = 'TYPE_ERROR',\n  REFERENCE_ERROR = 'REFERENCE_ERROR',\n\n  // Network errors\n  NETWORK_ERROR = 'NETWORK_ERROR',\n  REQUEST_TIMEOUT = 'REQUEST_TIMEOUT',\n  SERVER_ERROR = 'SERVER_ERROR',\n  BAD_REQUEST = 'BAD_REQUEST',\n  NOT_FOUND = 'NOT_FOUND',\n  RATE_LIMITED = 'RATE_LIMITED',\n  INTERNAL_SERVER_ERROR = 'INTERNAL_SERVER_ERROR',\n\n  // Form errors\n  FORM_SUBMISSION_FAILED = 'FORM_SUBMISSION_FAILED',\n  FIELD_RENDER_ERROR = 'FIELD_RENDER_ERROR',\n\n  // Data errors\n  DATA_NOT_FOUND = 'DATA_NOT_FOUND',\n  DATA_CORRUPTED = 'DATA_CORRUPTED',\n\n  // Component errors\n  COMPONENT_RENDER_ERROR = 'COMPONENT_RENDER_ERROR',\n  HOOK_ERROR = 'HOOK_ERROR',\n\n  // Operation errors\n  OPERATION_FAILED = 'OPERATION_FAILED',\n  INVALID_OPERATION = 'INVALID_OPERATION',\n\n  // Unknown errors\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR',\n}\n\n// =============================================================================\n// AUTH ERROR HANDLING\n// =============================================================================\n\n/**\n * Database response interface\n */\nexport interface DatabaseResponse {\n  success: boolean;\n  error?: string;\n  error_code?: string;\n  details?: string;\n  profile_id?: string;\n  user_data?: Record<string, unknown>;\n  role_data?: Record<string, unknown>;\n  location_data?: Record<string, unknown>;\n  message?: string;\n}\n\n/**\n * Authentication error messages mapping\n */\nexport const AUTH_ERROR_MESSAGES = {\n  // Exact error messages from database function\n  'User not found in authentication system':\n    'User account setup is still in progress. Please wait a moment and try again.',\n  'Role \"barangay_admin\" not found in system':\n    'System configuration error. Please contact technical support.',\n  'Invalid or inactive barangay code':\n    'The selected barangay is not valid or is currently inactive. Please choose a different barangay.',\n  'A user profile with this information already exists':\n    'An account with this information already exists. Please try signing in instead.',\n  'Referenced data not found (user, role, or location)':\n    'Some required system data is missing. Please contact support.',\n  'Database operation failed':\n    'A technical error occurred. Please try again or contact support if the problem persists.',\n  // Pattern matching for dynamic error messages\n  'User not found in authentication system with ID:':\n    'Account setup is taking longer than expected. Please try again in a few moments.',\n} as const;\n\n/**\n * HTTP status code mapping for database errors\n */\nexport const ERROR_STATUS_MAP: Record<string, number> = {\n  DUPLICATE_PROFILE: 409, // Conflict\n  INVALID_REFERENCE: 400, // Bad Request\n  USER_NOT_FOUND: 404, // Not Found\n  VALIDATION_FAILED: 422, // Unprocessable Entity\n  UNAUTHORIZED: 401, // Unauthorized\n  FORBIDDEN: 403, // Forbidden\n  SESSION_EXPIRED: 401, // Unauthorized\n  RATE_LIMIT_EXCEEDED: 429, // Too Many Requests\n} as const;\n\n// =============================================================================\n// LOGGING TYPES\n// =============================================================================\n\n/**\n * Log level enumeration\n * Consolidates from src/lib/logging/client-logger.ts and src/lib/logging/secure-logger.ts\n */\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error';\n\n/**\n * Log context information\n * Consolidates from src/lib/logging/client-logger.ts\n */\nexport interface LogContext {\n  component?: string;\n  action?: string;\n  data?: Record<string, unknown>;\n  error?: Error;\n  userId?: string;\n  sessionId?: string;\n}\n\n/**\n * Secure log entry for security-focused logging\n * Consolidates from src/lib/logging/secure-logger.ts\n */\nexport interface SecureLogEntry {\n  timestamp: string;\n  level: LogLevel;\n  message: string;\n  context?: string;\n  sanitizedData?: Record<string, unknown>;\n}\n\n/**\n * Philippine data privacy compliance logging context\n * Consolidates from src/lib/security/philippine-logging.ts\n */\nexport interface PhilippineLogContext {\n  userId?: string;\n  sessionId?: string;\n  barangayCode?: string;\n  timestamp: string;\n  complianceNote: string;\n  [key: string]: any;\n}\n\n/**\n * Audit log context for compliance\n * Consolidates from src/lib/security/philippine-logging.ts\n */\nexport interface AuditLogContext {\n  eventType: string;\n  userId: string;\n  action: string;\n  timestamp: string;\n  ipAddress?: string;\n  userAgent?: string;\n  sessionId?: string;\n  barangayOfficial?: boolean;\n  complianceFramework: string;\n  retentionPeriod: string;\n}\n\n/**\n * National Privacy Commission logging context\n * Consolidates from src/lib/security/philippine-logging.ts\n */\nexport interface NPCLogContext {\n  dataCategory: string;\n  processingPurpose: string;\n  legalBasis: string;\n  dataSubjectCount: number;\n  sensitiveDataProcessed: boolean;\n  consentStatus: string;\n  timestamp: string;\n  npcRegistrationRef?: string;\n}\n\n/**\n * Comprehensive security audit log entry\n * Consolidates from src/lib/authentication/auditUtils.ts\n */\nexport interface SecurityAuditLogEntry {\n  id?: string;\n  event_type: string;\n  severity: string;\n  user_id?: string;\n  user_role?: string;\n  resource_type?: string;\n  resource_id?: string;\n  action: string;\n  outcome: string;\n  details?: Record<string, string | number | boolean>;\n  error_code?: string;\n  error_message?: string;\n  request_id: string;\n  ip_address?: string;\n  user_agent?: string;\n  path: string;\n  method: string;\n  timestamp: string;\n  barangay_code?: string;\n  city_code?: string;\n  province_code?: string;\n  region_code?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/forms.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/hooks.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComponentType' is defined but never used.","line":13,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ValidationFunction' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1015,1018],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1015,1018],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1548,1551],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1548,1551],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3877,3880],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3877,3880],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4069,4072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4069,4072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4077,4080],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4077,4080],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":160,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4498,4501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4498,4501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4659,4662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4659,4662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":185,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4963,4966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4963,4966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":199,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5284,5287],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5284,5287],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5311,5314],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5311,5314],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":205,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5445,5448],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5445,5448],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":225,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":225,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5983,5986],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5983,5986],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":378,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":378,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9232,9235],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9232,9235],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":390,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":390,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9438,9441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9438,9441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":407,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":407,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9927,9930],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9927,9930],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":430,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":430,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10477,10480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10477,10480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":457,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":457,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11283,11286],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11283,11286],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":509,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":509,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12482,12485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12482,12485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":517,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":517,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12721,12724],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12721,12724],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":521,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":521,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12851,12854],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12851,12854],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":532,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":532,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13169,13172],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13169,13172],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":544,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":544,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13494,13497],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13494,13497],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Hook Types - React Hooks Interface Collection\n *\n * @fileoverview Consolidated TypeScript interfaces for custom React hooks\n * in the Citizenly RBI system. Provides type-safe patterns for state management,\n * data fetching, validation, and form handling hooks.\n *\n * @version 3.0.0\n * @since 2025-01-01\n * @author Citizenly Development Team\n */\n\nimport type { ComponentType } from 'react';\n\nimport type { FormMode } from './forms';\nimport type {\n  ValidationResult,\n  FieldValidationConfig,\n  ValidationFunction,\n  FieldValidationResult,\n} from './validation';\n\n// =============================================================================\n// VALIDATION HOOK TYPES\n// =============================================================================\n\n/**\n * Generic validation hook options\n */\nexport interface UseGenericValidationOptions<T> extends FieldValidationConfig {\n  validateForm: (data: T) => ValidationResult<T> | Promise<ValidationResult<T>>;\n  validateField?: (\n    fieldName: string,\n    value: any,\n    formData?: T\n  ) => string | null | FieldValidationResult;\n}\n\n/**\n * Generic validation hook return type\n */\nexport interface UseGenericValidationReturn<T> {\n  /** Current validation errors */\n  errors: Record<string, string>;\n  /** Whether form is currently valid */\n  isValid: boolean;\n  /** Whether validation has been attempted */\n  hasValidated: boolean;\n  /** Validate entire form */\n  validateForm: (data: T) => Promise<ValidationResult<T>>;\n  /** Validate single field */\n  validateField: (fieldName: string, value: any) => Promise<ValidationResult>;\n  /** Clear validation errors */\n  clearErrors: () => void;\n  /** Clear specific field error */\n  clearFieldError: (fieldName: string) => void;\n  /** Set manual validation error */\n  setError: (fieldName: string, error: string) => void;\n  /** Set field-specific validation error (alias for setError) */\n  setFieldError: (fieldName: string, error: string) => void;\n  /** Get field-specific validation error */\n  getFieldError: (fieldName: string) => string | undefined;\n  /** Check if field has error */\n  hasFieldError: (fieldName: string) => boolean;\n  /** Set multiple errors */\n  setErrors: (errors: Record<string, string>) => void;\n}\n\n/**\n * Validation progress state\n */\nexport interface ValidationProgressState {\n  totalSteps: number;\n  completedSteps: number;\n  currentStep: number;\n  stepValidation: Record<number, boolean>;\n  overallValid: boolean;\n}\n\n/**\n * Validation progress hook return type\n */\nexport interface UseValidationProgressReturn {\n  progress: ValidationProgressState;\n  updateStepValidation: (step: number, isValid: boolean) => void;\n  nextStep: () => void;\n  previousStep: () => void;\n  goToStep: (step: number) => void;\n  resetProgress: () => void;\n}\n\n// =============================================================================\n// CRUD HOOK TYPES\n// =============================================================================\n\n/**\n * Generic CRUD hook options\n */\nexport interface UseCrudOptions<T> {\n  /** Resource name for API endpoints */\n  resource: string;\n  /** Transform data before API calls */\n  transformData?: (data: T) => T;\n  /** Validation function */\n  validate?: (data: T) => ValidationResult<T>;\n  /** Enable optimistic updates */\n  optimistic?: boolean;\n}\n\n/**\n * Generic CRUD hook return type\n */\nexport interface UseCrudReturn<T> {\n  /** All items */\n  items: T[];\n  /** Loading state */\n  loading: boolean;\n  /** Error state */\n  error: string | null;\n  /** Create new item */\n  create: (data: T) => Promise<T>;\n  /** Update existing item */\n  update: (id: string, data: Partial<T>) => Promise<T>;\n  /** Delete item */\n  remove: (id: string) => Promise<void>;\n  /** Refresh items */\n  refresh: () => Promise<void>;\n  /** Clear error */\n  clearError: () => void;\n}\n\n/**\n * Async operation state\n */\nexport interface AsyncOperationState<T = any> {\n  data: T | null;\n  loading: boolean;\n  error: string | null;\n  lastUpdated: Date | null;\n}\n\n/**\n * Async operation hook return type\n */\nexport interface UseAsyncReturn<T, Args extends any[] = any[]> extends AsyncOperationState<T> {\n  /** Execute the async operation */\n  execute: (...args: Args) => Promise<T>;\n  /** Reset the state */\n  reset: () => void;\n}\n\n// =============================================================================\n// FORM HOOK TYPES\n// =============================================================================\n\n/**\n * Form field state\n */\nexport interface FormFieldState {\n  value: any;\n  error: string | null;\n  touched: boolean;\n  dirty: boolean;\n  validating: boolean;\n}\n\n/**\n * Form state\n */\nexport interface FormState<T = Record<string, any>> {\n  values: T;\n  errors: Record<keyof T, string>;\n  touched: Record<keyof T, boolean>;\n  dirty: Record<keyof T, boolean>;\n  validating: boolean;\n  submitting: boolean;\n  isValid: boolean;\n}\n\n/**\n * Form hook options\n */\nexport interface UseFormOptions<T> {\n  initialValues: T;\n  validationSchema?: any;\n  onSubmit?: (values: T) => Promise<void> | void;\n  validateOnChange?: boolean;\n  validateOnBlur?: boolean;\n}\n\n/**\n * Form hook return type\n */\nexport interface UseFormReturn<T> {\n  /** Current form state */\n  state: FormState<T>;\n  /** Get field props for inputs */\n  getFieldProps: (name: keyof T) => {\n    value: any;\n    onChange: (value: any) => void;\n    onBlur: () => void;\n    error: string | null;\n  };\n  /** Set field value */\n  setFieldValue: (name: keyof T, value: any) => void;\n  /** Set field error */\n  setFieldError: (name: keyof T, error: string) => void;\n  /** Reset form */\n  reset: () => void;\n  /** Submit form */\n  submit: () => Promise<void>;\n  /** Validate form */\n  validate: () => Promise<boolean>;\n}\n\n// =============================================================================\n// SEARCH HOOK TYPES\n// =============================================================================\n\n/**\n * Search options\n */\nexport interface SearchOptions {\n  query: string;\n  filters?: Record<string, any>;\n  sort?: { field: string; direction: 'asc' | 'desc' };\n  pagination?: { page: number; limit: number };\n  debounceMs?: number;\n}\n\n/**\n * Search results\n */\nexport interface SearchResults<T> {\n  items: T[];\n  total: number;\n  page: number;\n  totalPages: number;\n  hasMore: boolean;\n}\n\n/**\n * Search hook return type\n */\nexport interface UseSearchReturn<T> {\n  /** Search results */\n  results: SearchResults<T>;\n  /** Loading state */\n  loading: boolean;\n  /** Error state */\n  error: string | null;\n  /** Current search query */\n  query: string;\n  /** Execute search */\n  search: (options: SearchOptions) => Promise<void>;\n  /** Clear search */\n  clear: () => void;\n  /** Load more results */\n  loadMore: () => Promise<void>;\n}\n\n// =============================================================================\n// UTILITY HOOK TYPES\n// =============================================================================\n\n/**\n * Local storage hook options\n */\nexport interface UseLocalStorageOptions<T> {\n  defaultValue?: T;\n  serialize?: (value: T) => string;\n  deserialize?: (value: string) => T;\n}\n\n/**\n * Local storage hook return type\n */\nexport interface UseLocalStorageReturn<T> {\n  value: T;\n  setValue: (value: T | ((prev: T) => T)) => void;\n  removeValue: () => void;\n}\n\n/**\n * Debounce hook options\n */\nexport interface UseDebounceOptions {\n  delay: number;\n  leading?: boolean;\n  trailing?: boolean;\n}\n\n/**\n * API hook configuration\n */\nexport interface UseApiConfig {\n  baseURL?: string;\n  headers?: Record<string, string>;\n  timeout?: number;\n  retry?: {\n    attempts: number;\n    delay: number;\n  };\n}\n\n/**\n * Permission check result\n */\nexport interface PermissionCheckResult {\n  hasPermission: boolean;\n  loading: boolean;\n  error: string | null;\n}\n\n/**\n * User barangay data\n */\nexport interface UserBarangayData {\n  barangayCode: string;\n  barangayName: string;\n  cityMunicipalityName: string;\n  provinceName: string;\n  regionName: string;\n}\n\n/**\n * Generic form hook result\n */\nexport interface FormHookResult<T> {\n  data: T;\n  errors: Record<string, string>;\n  isValid: boolean;\n  isSubmitting: boolean;\n  isDirty: boolean;\n  reset: () => void;\n  submit: () => Promise<void>;\n  setValue: (field: keyof T, value: T[keyof T]) => void;\n  setError: (field: keyof T, error: string) => void;\n  clearError: (field: keyof T) => void;\n}\n\n// =============================================================================\n// URL PARAMETER HOOKS\n// =============================================================================\n\n/**\n * URL parameter configuration\n */\nexport interface URLParameterConfig {\n  key: string;\n  sanitizationType?: 'text' | 'name' | 'none';\n  defaultValue?: string;\n}\n\n/**\n * URL parameter hook result\n */\nexport interface URLParametersResult {\n  [key: string]: string | null;\n}\n\n/**\n * Resident form URL parameters result\n */\nexport interface ResidentFormURLParametersResult {\n  suggestedName: string | null;\n  suggestedId: string | null;\n  isPreFilled: boolean;\n}\n\n// =============================================================================\n// WORKFLOW HOOKS\n// =============================================================================\n\n/**\n * Workflow state interface\n */\nexport interface WorkflowState<T = any> {\n  currentStep: number;\n  totalSteps: number;\n  data: T;\n  isComplete: boolean;\n  canProceed: boolean;\n  canGoBack: boolean;\n}\n\n/**\n * Workflow hook result\n */\nexport interface WorkflowHookResult<T = any> {\n  state: WorkflowState<T>;\n  nextStep: () => void;\n  previousStep: () => void;\n  goToStep: (step: number) => void;\n  updateData: (data: Partial<T>) => void;\n  reset: () => void;\n  complete: () => Promise<void>;\n}\n\n// =============================================================================\n// COMMAND MENU HOOKS\n// =============================================================================\n\n/**\n * Command menu search result\n */\nexport interface CommandMenuSearchResult<T = any> {\n  id: string;\n  title: string;\n  subtitle?: string;\n  icon?: string | React.ComponentType<{ className?: string }>;\n  data: T;\n  score: number;\n  type: 'resident' | 'household' | 'action' | 'navigation';\n  disabled?: boolean;\n  shortcut?: string[];\n  avatar?: string | { src: string; alt: string; fallback?: string };\n  label?: string;\n  recent?: boolean;\n  group?: string;\n  description?: string;\n  keywords?: string[];\n  href?: string;\n  onClick?: () => void;\n}\n\n/**\n * Command menu hook result\n */\nexport interface CommandMenuHookResult<T = any> {\n  query: string;\n  results: CommandMenuSearchResult<T>[];\n  isSearching: boolean;\n  isOpen: boolean;\n  selectedIndex: number;\n  setQuery: (query: string) => void;\n  open: () => void;\n  close: () => void;\n  selectNext: () => void;\n  selectPrevious: () => void;\n  execute: (result?: CommandMenuSearchResult<T>) => void;\n}\n\n// =============================================================================\n// UTILITY HOOK TYPES (Hook-specific interfaces)\n// =============================================================================\n\n/**\n * Logger hook-specific log entry\n * Different from API LogEntry - includes hook-specific fields\n */\nexport interface HookLogEntry {\n  timestamp: string;\n  level: 'debug' | 'info' | 'warn' | 'error' | 'critical';\n  component: string;\n  message: string;\n  data?: any;\n  error?: Error;\n  userId?: string;\n  sessionId?: string;\n}\n\n/**\n * Logger hook configuration\n */\nexport interface HookLoggerConfig {\n  level: 'debug' | 'info' | 'warn' | 'error' | 'critical';\n  enableConsole: boolean;\n  enablePersistence: boolean;\n  maxEntries: number;\n  prefix?: string;\n}\n\n/**\n * Async validation result for hooks\n * Simpler than the main AsyncValidationResult in validation.ts\n */\nexport interface HookAsyncValidationResult {\n  isValid: boolean;\n  error?: string;\n}\n\n/**\n * Form submission props for hooks\n */\nexport interface HookFormSubmissionProps<T> {\n  onSubmit?: (data: T) => void | Promise<void>;\n  mode: FormMode;\n}\n\n/**\n * Form submission return for hooks\n */\nexport interface HookFormSubmissionReturn<T> {\n  isSubmitting: boolean;\n  isOptimisticallyUpdated: boolean;\n  handleSubmit: (formData: T) => Promise<{ success: boolean; errors?: Record<string, string> }>;\n}\n\n/**\n * Performance tracking hook options\n * Consolidates from src/lib/monitoring/hooks/usePerformanceTracking.ts\n */\nexport interface UsePerformanceTrackingOptions {\n  componentName: string;\n  trackRenders?: boolean;\n  trackMounts?: boolean;\n  trackUpdates?: boolean;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Performance tracking hook return interface\n * Consolidates from src/lib/monitoring/hooks/usePerformanceTracking.ts\n */\nexport interface PerformanceTrackingReturn {\n  trackOperation: (name: string, metadata?: Record<string, any>) => () => void;\n  trackAsyncOperation: <T>(\n    name: string,\n    operation: () => Promise<T>,\n    metadata?: Record<string, any>\n  ) => Promise<T>;\n}\n\n/**\n * Error boundary hook options\n * Consolidates from src/lib/monitoring/hooks/useErrorBoundary.ts\n */\nexport interface UseErrorBoundaryOptions {\n  componentName: string;\n  fallbackComponent?: React.ComponentType<{ error: Error; reset: () => void }>;\n  onError?: (error: Error, errorInfo: any) => void;\n  enableReporting?: boolean;\n}\n\n/**\n * Error boundary hook return interface\n * Consolidates from src/lib/monitoring/hooks/useErrorBoundary.ts\n */\nexport interface ErrorBoundaryReturn {\n  error: Error | null;\n  hasError: boolean;\n  resetError: () => void;\n  captureError: (error: Error, context?: Record<string, any>) => void;\n  wrapAsync: <T>(operation: () => Promise<T>, operationName?: string) => Promise<T>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/households.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":384,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":384,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8279,8282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8279,8282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":435,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":435,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9210,9213],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9210,9213],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":444,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":444,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9340,9343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9340,9343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":453,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":453,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9477,9480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9477,9480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":467,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":467,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9905,9908],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9905,9908],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":477,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":477,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10118,10121],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10118,10121],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Consolidated Type Exports\n * Central barrel export for all application types\n *\n * Clean, direct imports with no legacy aliases or duplicates.\n * Use specific type names from their respective modules.\n */\n\n// =============================================================================\n// NEW CONSOLIDATED TYPE EXPORTS\n// =============================================================================\n\n// Database types (core records)\nexport * from './database';\n\n// Validation types\nexport * from './validation';\n\n// Address types\nexport * from './addresses';\n\n// Performance types\nexport * from './performance';\n\n// Form types (includes HouseholdFormData)\nexport * from './forms';\n\n// Service types\nexport * from './services';\n\n// Export specific service types for clarity\nexport type {\n  ServiceResidentFormData,\n  ServiceUserAddress,\n  ServiceCreateResidentRequest,\n  ServiceCreateResidentResponse,\n  UserRepositoryData,\n  UserRepositorySearchOptions,\n  UserSecurityData,\n  CommandMenuExportOptions,\n  CommandMenuAnalyticsEvent,\n  ServiceRawPsocData,\n  ServiceRawPsgcData,\n  ServiceChartDataPoint,\n  ServiceDatabaseResponse,\n} from './services';\n\n// Repository types\nexport * from './repositories';\n\n// API request types\nexport * from './api-requests';\n\n// Export specific API request types for clarity\nexport type {\n  HealthCheckResult,\n  LogEntry,\n  ClientLogRequest,\n  WebhookPayload,\n  WebhookVerification,\n  CreateProfileRequest,\n  CreateProfileResponse,\n  TestResults,\n  TestSuiteResults,\n  ProfileTestResults,\n  NotificationRecord,\n  CreateUserData,\n  UserManagementRequest,\n  BulkUserOperationResponse,\n  DataExportRequest,\n  DataImportRequest,\n  ImportExportJobStatus,\n} from './api-requests';\n\n// Page component props\nexport * from './page-props';\n\n// Hook types\nexport type {\n  UseGenericValidationOptions,\n  UseGenericValidationReturn,\n  ValidationProgressState,\n  UseValidationProgressReturn,\n  UseCrudOptions,\n  UseCrudReturn,\n  UseAsyncReturn,\n  FormFieldState,\n  UseFormOptions,\n  UseFormReturn,\n  SearchOptions,\n  SearchResults,\n  UseSearchReturn,\n  UseLocalStorageOptions,\n  UseLocalStorageReturn,\n  UseDebounceOptions,\n  UseApiConfig,\n  PermissionCheckResult,\n  UserBarangayData,\n  FormHookResult,\n  URLParameterConfig,\n  URLParametersResult,\n  ResidentFormURLParametersResult,\n  WorkflowState,\n  WorkflowHookResult,\n  CommandMenuSearchResult,\n  CommandMenuHookResult,\n} from './hooks';\n\n// Component types\nexport type {\n  BaseComponentProps,\n  ComponentWithChildren,\n  ComponentSize,\n  ComponentVariant,\n  ButtonProps,\n  FormFieldProps,\n  InputProps,\n  SelectProps,\n  CheckboxProps,\n  RadioProps,\n  CardProps,\n  ModalProps,\n  DrawerProps,\n  TableColumn,\n  TableProps,\n  PaginationProps,\n  AlertSeverity,\n  AlertProps,\n  LoadingProps,\n  ProgressProps,\n  NavItem,\n  BreadcrumbItem,\n  TabItem,\n  TabsProps,\n  FileUploadProps,\n  FilePreview,\n  SearchBarProps,\n  SearchResultItem,\n  ButtonGroupOption,\n  ButtonGroupProps,\n  DialogAction,\n  ConfirmationDialogProps,\n} from './components';\n\n// API types\nexport * from './api-consolidated';\n\n// Utility types\nexport * from './utilities';\n\n// Export specific utility types for clarity\nexport type {\n  NameParts,\n  UnknownFormData,\n  FormProcessingStage,\n  FormProcessingOptions,\n  ProcessedFormResult,\n  UtilityValidationState,\n  SanitizationType,\n  SanitizationOptions,\n} from './utilities';\n\n// Error handling types\nexport * from './errors';\n\n// Chart and visualization types\nexport * from './charts';\n\n// Application constants\nexport * from './constants';\n\n// =============================================================================\n// CORE DOMAIN TYPES\n// =============================================================================\n\n// Database types\nexport type {\n  // Core Record Types\n  ResidentRecord,\n  HouseholdRecord,\n\n  // Geographic Types\n  PSGCRegion,\n  PSGCProvince,\n  PSGCCityMunicipality,\n  PSGCBarangay,\n  GeoSubdivision,\n  GeoStreet,\n\n  // PSOC Types\n  PsocMajorGroup,\n  PsocSubMajorGroup,\n  PsocMinorGroup,\n  PsocUnitGroup,\n  PsocUnitSubGroup,\n  PsocPositionTitle,\n  PsocOccupationCrossReference,\n\n  // Relationship Types\n  HouseholdMember,\n  ResidentRelationship,\n\n  // System Types\n  SystemDashboardSummary,\n  SystemSchemaVersion,\n\n  // Query Result Types\n  AddressHierarchyQueryResult,\n  GeographicHierarchyResult,\n  GeographicHierarchySingleResult,\n  SupabaseQueryResponse,\n  RequestMetadata,\n  AuditLogEntry,\n  DashboardStats,\n  PopulationByAgeGroup,\n  EmploymentStatistics,\n} from './database';\n\n// Authentication types\nexport type {\n  AuthUser,\n  AuthUserProfile,\n  AuthenticatedUser,\n  AuthSession,\n  AuthState,\n  AuthRole,\n  AuthPermission,\n  RolePermission,\n  UserRoleAssignment,\n  UserRole,\n  WebhookUserRecord,\n  LoginRequest,\n  SignupRequest,\n  PasswordResetRequest,\n  PasswordUpdateRequest,\n  ProfileUpdateRequest,\n  AccessControlResult,\n  AuthProvider,\n  AuthErrorType,\n  AuthError,\n  LoginFormData,\n  SignupFormData,\n  ProfileFormData,\n} from './auth';\n\n// Export auth constants\nexport { DEFAULT_ROLES, PERMISSION_ACTIONS, RESOURCE_TYPES } from './auth';\n\n// Database enums (from database.ts)\nexport type {\n  SexEnum,\n  CivilStatusEnum,\n  CitizenshipEnum,\n  EducationLevelEnum,\n  EmploymentStatusEnum,\n  BloodTypeEnum,\n  ReligionEnum,\n  EthnicityEnum,\n} from './database';\n\n// Resident types\nexport type {\n  // Core interfaces\n  PersonalInfoFormState,\n  ContactInfoFormState,\n  ResidentSectoralInfo,\n  ResidentMigrantInfo,\n  ResidentFormState,\n  ResidentWithRelations,\n  CombinedResidentFormData,\n\n  // Search and API\n  PsocData,\n  PsocOption,\n  PsgcData,\n  PsgcOption,\n  ResidentApiResponse,\n  ResidentsListResponse,\n  ResidentSearchParams,\n  ResidentTableAction,\n  ResidentTableColumn,\n\n  // Validation\n  FormValidationError,\n  SectoralInformation,\n  SectoralContext,\n} from './residents';\n\n// Address types are in addresses.ts\nexport type { AddressInfo } from './addresses';\n\n// Note: Resident option constants are available from @/constants/resident-form-options\n// They are not re-exported here to maintain clean type separation\n\n// Household types\nexport type {\n  // Household Enums\n  HouseholdTypeEnum,\n  TenureStatusEnum,\n  HouseholdUnitEnum,\n  FamilyPositionEnum,\n  IncomeClassEnum,\n\n  // Household Interfaces\n  HouseholdData,\n  HouseholdHead,\n  HouseholdWithMembersResult,\n  HouseholdOption,\n  HouseholdSearchParams,\n  HouseholdApiResponse,\n  HouseholdsListResponse,\n  HouseholdTableColumn,\n  HouseholdTableAction,\n  HouseholdValidationError,\n  HouseholdFormSubmissionState,\n} from './households';\n\n// Note: Household option constants are available from @/constants/household-form-options\n// They are not re-exported here to maintain clean type separation\n\n// Form types\nexport type {\n  BaseFieldSetProps,\n  FieldSetWithIconsProps,\n  ClearableFieldSetProps,\n  ValidationState,\n  FieldSize,\n  ValidatedFieldSetProps,\n  LoadableFieldSetProps,\n  GenericSelectOption,\n  SelectFieldBaseProps,\n  FormSectionProps,\n  FieldValidator,\n  ValidatableFieldSetProps,\n  FormMode,\n  FormSubmissionState,\n  ResidentFormData,\n  ExtendedHouseholdFormData,\n  HouseholdDetailsData,\n  FormSectionPropsGeneric,\n  FieldConfig,\n  HouseholdFormProps,\n} from './forms';\n\n// =============================================================================\n// API AND COMMUNICATION TYPES\n// =============================================================================\n\n// API request/response types\nexport type {\n  ApiSuccessResponse,\n  ApiErrorResponse,\n  ApiResponse,\n  PaginationParams,\n  SearchParams,\n  PsgcSearchParams,\n  PsgcSearchResult,\n  PsgcLookupResponse,\n  PsocSearchParams,\n  PsocSearchResult,\n  PsocLookupResponse,\n  CreateResidentRequest,\n  UpdateResidentRequest,\n  CreateHouseholdRequest,\n  UpdateHouseholdRequest,\n  FieldValidationError,\n  ValidationErrorResponse,\n  RateLimitErrorResponse,\n  AuthErrorResponse,\n  HealthCheckResponse,\n  CommandMenuSearchResponse,\n} from './api';\n\n// Export API type guards\nexport { isApiSuccess, isApiError, isValidationError, isRateLimitError, isAuthError } from './api';\n\n// =============================================================================\n// UTILITY TYPES\n// =============================================================================\n\n/**\n * Generic validation result wrapper\n */\nexport type ValidationResult<T = any> = {\n  isValid: boolean;\n  errors: string[];\n  data?: T;\n};\n\n/**\n * Make all properties optional recursively\n */\nexport type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n\n/**\n * Make specific properties required\n */\nexport type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>;\n\n/**\n * Extract keys that are of a certain type\n */\nexport type KeysOfType<T, U> = {\n  [K in keyof T]: T[K] extends U ? K : never;\n}[keyof T];\n\n/**\n * Generic pagination wrapper\n */\nexport interface PaginatedResponse<T> {\n  data: T[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n  };\n}\n\n/**\n * Generic select option (widely used across the app)\n */\nexport interface SelectOption<T = string> {\n  label: string;\n  value: T;\n  disabled?: boolean;\n  description?: string;\n}\n\n/**\n * Generic search result\n */\nexport interface SearchResult<T = any> {\n  item: T;\n  score: number;\n  highlights?: string[];\n}\n\n/**\n * Loading state wrapper\n */\nexport interface LoadingState<T = any> {\n  data: T | null;\n  loading: boolean;\n  error: string | null;\n}\n\n/**\n * Async operation state\n */\nexport interface AsyncState<T = any> extends LoadingState<T> {\n  lastFetch: Date | null;\n  refetch: () => Promise<void>;\n}\n\n// Component prop types consolidated into components.ts - imported via barrel export\n\n// =============================================================================\n// EVENT HANDLER TYPES\n// =============================================================================\n\n/**\n * Generic change handler\n */\nexport type ChangeHandler<T = any> = (value: T) => void;\n\n/**\n * Generic click handler\n */\nexport type ClickHandler<T = HTMLElement> = (event: React.MouseEvent<T>) => void;\n\n/**\n * Generic form submit handler\n */\nexport type SubmitHandler<T = any> = (data: T) => void | Promise<void>;\n\n// =============================================================================\n// TYPE GUARDS\n// =============================================================================\n\n/**\n * Check if a value is defined (not null or undefined)\n */\nexport function isDefined<T>(value: T | null | undefined): value is T {\n  return value !== null && value !== undefined;\n}\n\n/**\n * Check if a string is not empty\n */\nexport function isNotEmpty(value: string | null | undefined): value is string {\n  return typeof value === 'string' && value.trim().length > 0;\n}\n\n/**\n * Check if an array is not empty\n */\nexport function isNotEmptyArray<T>(value: T[] | null | undefined): value is T[] {\n  return Array.isArray(value) && value.length > 0;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/page-props.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/performance.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2216,2219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2216,2219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Performance Monitoring Types\n * Consolidated performance metrics interfaces for different monitoring contexts\n */\n\n// =============================================================================\n// WEB PERFORMANCE METRICS (Browser Performance API)\n// =============================================================================\n\n/**\n * Web performance metrics from browser Performance API\n * Used for measuring page load and rendering performance\n * Canonical type re-exported from services.ts\n */\nexport interface PerformanceMetrics {\n  loadTime: number;\n  firstPaint: number;\n  firstContentfulPaint: number;\n  domInteractive: number;\n  domComplete: number;\n}\n\n// =============================================================================\n// REACT HOOK PERFORMANCE METRICS\n// =============================================================================\n\n/**\n * React hook performance metrics\n * Used for measuring component render performance\n */\nexport interface HookPerformanceMetrics {\n  /** Number of renders */\n  renderCount: number;\n  /** Average render time in ms */\n  averageRenderTime: number;\n  /** Last render time in ms */\n  lastRenderTime: number;\n  /** Whether this hook is causing excessive re-renders */\n  isExcessiveRenders: boolean;\n}\n\n// =============================================================================\n// HTTP REQUEST PERFORMANCE METRICS\n// =============================================================================\n\n/**\n * HTTP request performance metrics\n * Used for measuring API endpoint performance in middleware\n */\nexport interface RequestPerformanceMetrics {\n  path: string;\n  method: string;\n  duration: number;\n  timestamp: number;\n  statusCode: number;\n  userAgent?: string;\n  ip?: string;\n}\n\n// =============================================================================\n// GENERIC PERFORMANCE TRACKING\n// =============================================================================\n\n/**\n * Generic performance metrics for custom tracking\n * Used for measuring arbitrary operations and processes\n */\nexport interface GenericPerformanceMetrics {\n  name: string;\n  startTime: number;\n  endTime?: number;\n  duration?: number;\n  metadata?: Record<string, any>;\n}\n\n// =============================================================================\n// SPECIALIZED PERFORMANCE METRICS\n// =============================================================================\n\n/**\n * Command menu specific performance metrics\n */\nexport interface CommandMenuPerformanceMetrics {\n  searchLatency: number;\n  cacheHitRate: number;\n  errorRate: number;\n  usageFrequency: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/relationships.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/repositories.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2560,2563],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2560,2563],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Repository Types\n * Consolidated repository interfaces and patterns\n */\n\nimport type { ResidentRecord } from './database';\nimport type { QueryOptions, RepositoryResult } from './services';\n\n// =============================================================================\n// DOMAIN-SPECIFIC REPOSITORY TYPES\n// =============================================================================\n\n/**\n * Resident repository data type\n */\nexport type ResidentData = ResidentRecord;\n\n/**\n * Household repository data type\n */\nexport interface HouseholdData {\n  id?: string;\n  code: string;\n  household_head_first_name: string;\n  household_head_last_name: string;\n  household_head_middle_name?: string;\n  household_type: string;\n  tenure_status: string;\n  barangay_code: string;\n  no_of_household_members?: number;\n  created_at?: string;\n  updated_at?: string;\n}\n\n/**\n * User repository data type\n */\nexport interface UserData {\n  id?: string;\n  email: string;\n  first_name: string;\n  last_name: string;\n  role: string;\n  barangay_code?: string;\n  is_active: boolean;\n  last_login_at?: string;\n  email_verified_at?: string;\n  password_changed_at?: string;\n  login_attempts?: number;\n  locked_until?: string;\n  created_at?: string;\n  updated_at?: string;\n}\n\n/**\n * Resident search options\n */\nexport interface ResidentSearchOptions extends QueryOptions {\n  name?: string;\n  age?: number;\n  sex?: string;\n  civil_status?: string;\n  household_code?: string;\n  is_voter?: boolean;\n  barangay_code?: string;\n}\n\n/**\n * Household search options\n */\nexport interface HouseholdSearchOptions extends QueryOptions {\n  code?: string;\n  household_code?: string;\n  name?: string;\n  barangay_code?: string;\n  city_municipality_code?: string;\n  province_code?: string;\n  region_code?: string;\n  street_id?: string;\n  household_head_id?: string;\n  total_members?: number;\n  head_of_family?: string;\n}\n\n/**\n * User search options\n */\nexport interface UserSearchOptions extends QueryOptions {\n  email?: string;\n  role?: string;\n  barangay_code?: string;\n  is_active?: boolean;\n}\n\n// =============================================================================\n// REPOSITORY RESULT TYPES\n// =============================================================================\n\n/**\n * Resident repository result\n */\nexport type ResidentRepositoryResult<T = ResidentData> = RepositoryResult<T>;\n\n/**\n * Household repository result\n */\nexport type HouseholdRepositoryResult<T = HouseholdData> = RepositoryResult<T>;\n\n/**\n * Batch operation result\n */\nexport interface BatchOperationResult<T = any> {\n  success: boolean;\n  processed: number;\n  failed: number;\n  results: RepositoryResult<T>[];\n  errors?: string[];\n}\n\n// =============================================================================\n// REPOSITORY CONFIGURATION TYPES\n// =============================================================================\n\n/**\n * Repository configuration\n */\nexport interface RepositoryConfig {\n  tableName: string;\n  primaryKey?: string;\n  timestamps?: boolean;\n  softDelete?: boolean;\n  audit?: boolean;\n}\n\n/**\n * Bulk operation options\n */\nexport interface BulkOperationOptions {\n  batchSize?: number;\n  skipValidation?: boolean;\n  continueOnError?: boolean;\n  returnResults?: boolean;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/residents.ts","messages":[{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":33,"column":1,"nodeType":"ImportDeclaration","endLine":43,"endColumn":21},{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":418,"column":1,"nodeType":"ImportDeclaration","endLine":418,"endColumn":74}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Resident Types - Database-Aligned TypeScript Interfaces\n *\n * @fileoverview Consolidated resident-related TypeScript interfaces that exactly match\n * the database schema defined in database/schema.sql. All interfaces are 100% compliant\n * with PostgreSQL constraints and DILG RBI requirements.\n *\n * @version 3.0.0\n * @since 2025-01-01\n *\n * Database Tables Covered:\n * - residents (main resident data)\n * - resident_sectoral_info (sectoral classifications)\n * - resident_migrant_info (migration history)\n *\n * @example Basic Usage\n * ```typescript\n * import { ResidentRecord, PersonalInfoFormState } from '@/types/residents';\n * import { SEX_OPTIONS } from '@/constants/resident-form-options';\n *\n * const resident: ResidentRecord = {\n *   id: 'uuid-here',\n *   first_name: 'Juan',\n *   last_name: 'Dela Cruz',\n *   // ... other required fields\n * };\n * ```\n */\n\nimport { ReactNode } from 'react';\n\nimport type { AddressInfo } from './addresses';\nimport type {\n  ResidentRecord,\n  SexEnum,\n  CivilStatusEnum,\n  CitizenshipEnum,\n  EducationLevelEnum,\n  EmploymentStatusEnum,\n  BloodTypeEnum,\n  ReligionEnum,\n  EthnicityEnum,\n} from './database';\n\n// =============================================================================\n// DATABASE ENUMS AND TYPES\n// =============================================================================\n\n// Import enums from database.ts\n// Re-export database enums for backward compatibility\nexport type {\n  SexEnum,\n  CivilStatusEnum,\n  CitizenshipEnum,\n  EducationLevelEnum,\n  EmploymentStatusEnum,\n  BloodTypeEnum,\n  ReligionEnum,\n  EthnicityEnum,\n} from './database';\n\n// BirthPlaceLevelEnum removed - not in database schema. Use PSGC codes directly.\n\n// =============================================================================\n// CORE RESIDENT INTERFACES\n// =============================================================================\n\n// ResidentDatabaseRecord and ResidentApiData removed - use ResidentRecord from './database' directly\n\n/**\n * Complete resident interface for detail views and comprehensive data management\n * Consolidated from src/lib/types/resident-detail.ts\n *\n * @description Represents a comprehensive resident profile including personal information,\n * geographic location, sectoral demographics, household relationships, and migration data.\n * This interface extends ResidentRecord with additional computed and related fields.\n */\nexport interface Resident extends ResidentRecord {\n  // Computed display fields\n  /** Full name (computed field, optional for display) */\n  name?: string;\n  /** Birth place information (resolved from birth_place_code) */\n  birth_place_name?: string;\n  /** Administrative level of birth place (region, province, city, or barangay) */\n  birth_place_level?: 'region' | 'province' | 'city_municipality' | 'barangay';\n  /** Last 4 digits of PhilSys number (for verification purposes) */\n  philsys_last4?: string;\n  /** Whether the resident is employed (computed from employment_status) */\n  is_employed?: boolean;\n  /** PSOC classification level (1-4, with 4 being most specific) */\n  psoc_level?: number;\n  /** Name/description of current employment */\n  employment_name?: string;\n  /** Postal ZIP code */\n  zip_code?: string;\n  /** Street identifier within the barangay */\n  street_id?: string;\n  /** Subdivision identifier (if applicable) */\n  subdivision_id?: string;\n\n  // Related data from API Response\n  /**\n   * Household information when resident data includes household details\n   * @description Complete household record associated with this resident\n   */\n  household?: {\n    /** Unique household identifier code (format: BBBBBBBBB-YYYY-NNNNNN) */\n    code: string;\n    /** Household name or identifier */\n    name?: string;\n    /** Complete address string */\n    address?: string;\n    /** House number on the street */\n    house_number: string;\n    /** Street identifier within barangay */\n    street_id: string;\n    /** Subdivision identifier (if applicable) */\n    subdivision_id?: string;\n    /** PSGC barangay code where household is located */\n    barangay_code: string;\n    /** PSGC city/municipality code */\n    city_municipality_code: string;\n    /** PSGC province code */\n    province_code?: string;\n    /** PSGC region code */\n    region_code: string;\n    /** Number of families within this household */\n    no_of_families?: number;\n    /** Total number of household members */\n    no_of_household_members?: number;\n    /** Type of household (nuclear, extended, etc.) */\n    household_type?: string;\n    /** Housing tenure status (owned, rented, free, etc.) */\n    tenure_status?: string;\n    /** Monthly household income in Philippine Peso */\n    monthly_income?: number;\n    /** Income classification bracket */\n    income_class?: string;\n    /** Resident ID of the household head */\n    household_head_id?: string;\n  };\n\n  // Geographic Information from API\n  /** Barangay details for display purposes */\n  barangay_info?: {\n    code: string;\n    name: string;\n  };\n  /** City/Municipality details for display purposes */\n  city_municipality_info?: {\n    code: string;\n    name: string;\n    type: string;\n  };\n  /** Province details for display purposes */\n  province_info?: {\n    code: string;\n    name: string;\n  };\n  /** Region details for display purposes */\n  region_info?: {\n    code: string;\n    name: string;\n  };\n\n  // Sectoral Information (from resident_sectoral_info table)\n  /** Government sectoral demographic classifications */\n  sectoral_info?: {\n    /** Whether resident is part of the labor force (working age 15-64) */\n    is_labor_force?: boolean;\n    /** Whether labor force resident is currently employed */\n    is_labor_force_employed?: boolean;\n    /** Whether resident is unemployed (actively seeking work) */\n    is_unemployed?: boolean;\n    /** Whether resident is an Overseas Filipino Worker (OFW) */\n    is_overseas_filipino_worker?: boolean;\n    /** Whether resident is a Person with Disability (PWD) */\n    is_person_with_disability?: boolean;\n    /** Whether resident is out-of-school children (6-14 years old not in school) */\n    is_out_of_school_children?: boolean;\n    /** Whether resident is out-of-school youth (15-24 years old not in school) */\n    is_out_of_school_youth?: boolean;\n    /** Whether resident is a senior citizen (60+ years old) */\n    is_senior_citizen?: boolean;\n    /** Whether senior citizen is registered with DSWD */\n    is_registered_senior_citizen?: boolean;\n    /** Whether resident is a solo parent (single parent raising children) */\n    is_solo_parent?: boolean;\n    /** Whether resident belongs to an indigenous cultural community */\n    is_indigenous_people?: boolean;\n    /** Whether resident is an internal migrant (moved from another location) */\n    is_migrant?: boolean;\n  };\n\n  // Migration Information (from resident_migrant_info table)\n  /** Internal migration tracking information */\n  migrant_info?: {\n    /** PSGC barangay code of previous residence */\n    previous_barangay_code?: string;\n    /** PSGC city/municipality code of previous residence */\n    previous_city_municipality_code?: string;\n    /** PSGC province code of previous residence */\n    previous_province_code?: string;\n    /** PSGC region code of previous residence */\n    previous_region_code?: string;\n    /** Number of months lived in previous location */\n    length_of_stay_previous_months?: number;\n    /** Reason for leaving previous location */\n    reason_for_leaving?: string;\n    /** Date when resident moved to current location (ISO 8601 format) */\n    date_of_transfer?: string;\n    /** Reason for transferring to current location */\n    reason_for_transferring?: string;\n    /** Number of months resident has been in current location */\n    duration_of_stay_current_months?: number;\n    /** Whether resident intends to return to previous location */\n    is_intending_to_return?: boolean;\n  };\n}\n\n// =============================================================================\n// SECTORAL AND MIGRATION INFORMATION\n// =============================================================================\n\n/**\n * Sectoral information interface matching resident_sectoral_info table exactly (15 fields)\n *\n * @description Maps to `resident_sectoral_info` table in PostgreSQL database.\n * Contains boolean flags for various sectoral classifications used in RBI reporting.\n *\n * @example\n * ```typescript\n * const sectoralInfo: ResidentSectoralInfo = {\n *   resident_id: 'uuid-here',\n *   is_senior_citizen: true,\n *   is_person_with_disability: false,\n *   // ... other sectoral flags\n * };\n * ```\n */\nexport interface ResidentSectoralInfo {\n  resident_id: string; // Primary key - UUID, NOT NULL\n  is_labor_force_employed?: boolean | null;\n  is_unemployed?: boolean | null;\n  is_overseas_filipino_worker?: boolean | null;\n  is_person_with_disability?: boolean | null;\n  is_out_of_school_children?: boolean | null;\n  is_out_of_school_youth?: boolean | null;\n  is_senior_citizen?: boolean | null;\n  is_registered_senior_citizen?: boolean | null;\n  is_solo_parent?: boolean | null;\n  is_indigenous_people?: boolean | null;\n  is_migrant?: boolean | null;\n  created_at?: string | null; // TIMESTAMPTZ with DEFAULT NOW()\n  updated_at?: string | null; // TIMESTAMPTZ with DEFAULT NOW()\n}\n\n/**\n * Migration information interface matching resident_migrant_info table exactly (15 fields)\n *\n * @description Maps to `resident_migrant_info` table in PostgreSQL database.\n * Tracks migration history and patterns for demographic analysis.\n *\n * @example\n * ```typescript\n * const migrantInfo: ResidentMigrantInfo = {\n *   resident_id: 'uuid-here',\n *   previous_province_code: '0349', // Mindoro Oriental\n *   date_of_transfer: '2023-06-15',\n *   reason_for_migration: 'Employment opportunity',\n *   // ... other migration data\n * };\n * ```\n */\nexport interface ResidentMigrantInfo {\n  id?: string | null; // UUID PRIMARY KEY with DEFAULT uuid_generate_v4()\n  resident_id: string; // UUID NOT NULL\n  previous_barangay_code?: string | null; // VARCHAR(10)\n  previous_city_municipality_code?: string | null; // VARCHAR(10)\n  previous_province_code?: string | null; // VARCHAR(10)\n  previous_region_code?: string | null; // VARCHAR(10)\n  date_of_transfer?: string | null; // DATE format\n  reason_for_migration?: string | null; // TEXT (single field, not reason_for_leaving + reason_for_transferring)\n  is_intending_to_return?: boolean | null;\n  length_of_stay_previous_months?: number | null; // INTEGER\n  duration_of_stay_current_months?: number | null; // INTEGER\n  migration_type?: string | null; // VARCHAR(50)\n  is_whole_family_migrated?: boolean | null;\n  created_at?: string | null; // TIMESTAMPTZ with DEFAULT NOW()\n  updated_at?: string | null; // TIMESTAMPTZ with DEFAULT NOW()\n}\n\n// =============================================================================\n// FORM DATA INTERFACES\n// =============================================================================\n\n// ResidentFormData is now imported from ./forms to avoid duplication\n\n/**\n * Personal Information section of resident form\n *\n * @description Form state interface for personal information fields.\n * Includes validation-friendly string unions and database constraint annotations.\n *\n * @example\n * ```typescript\n * const personalInfo: PersonalInfoFormState = {\n *   first_name: 'Maria',\n *   middle_name: 'Santos',\n *   last_name: 'Garcia',\n *   sex: 'female',\n *   civil_status: 'single',\n *   // ... other personal fields\n * };\n * ```\n */\nexport interface PersonalInfoFormState {\n  // Personal Information - matching database exactly\n  first_name: string;\n  middle_name: string; // Database: VARCHAR(100) - nullable\n  last_name: string;\n  extension_name: string; // Database: VARCHAR(20) - nullable\n  sex: SexEnum | '';\n  civil_status: CivilStatusEnum | '';\n  civil_status_others_specify: string;\n  citizenship: CitizenshipEnum | '';\n  birthdate: string;\n  birth_place_name: string;\n  birth_place_code: string; // Database: VARCHAR(10) - nullable\n  // birth_place_level removed - use birth_place_code instead\n  philsys_card_number: string;\n  education_attainment: EducationLevelEnum | '';\n  is_graduate: boolean;\n  employment_status: EmploymentStatusEnum | '';\n  occupation_code: string; // Database: VARCHAR(10) - nullable\n  occupation_title: string;\n\n  // Physical Personal Details\n  blood_type: BloodTypeEnum | '';\n  complexion: string;\n  height: number;\n  weight: number;\n  ethnicity: EthnicityEnum | '';\n  religion: ReligionEnum | '';\n  religion_others_specify: string;\n  is_voter: boolean | null;\n  is_resident_voter: boolean | null;\n  last_voted_date: string;\n  mother_maiden_first: string;\n  mother_maiden_middle: string;\n  mother_maiden_last: string;\n}\n\n/**\n * Contact Information section of resident form\n */\nexport interface ContactInfoFormState {\n  // Contact Information\n  email: string;\n  mobile_number: string;\n  telephone_number: string;\n  household_code: string;\n  household_name?: string; // Optional - display name of selected household\n}\n\n/**\n * Sectoral Information section of resident form\n */\nexport interface SectoralInfoFormState {\n  // Sectoral Information - matching database exactly\n  is_labor_force_employed: boolean; // Auto from employment_status\n  is_unemployed: boolean; // Auto from employment_status\n  is_overseas_filipino_worker: boolean; // Manual - Overseas Filipino Worker\n  is_person_with_disability: boolean; // Manual - Person with Disability\n  is_out_of_school_children: boolean; // Auto from age + education (5-17)\n  is_out_of_school_youth: boolean; // Auto from age + education + employment (18-30)\n  is_senior_citizen: boolean; // Auto from age (60+)\n  is_registered_senior_citizen: boolean; // Manual, conditional on is_senior_citizen\n  is_solo_parent: boolean; // Manual\n  is_indigenous_people: boolean; // Manual\n  is_migrant: boolean; // Manual\n}\n\n/**\n * Migration Information section of resident form\n */\nexport interface MigrationInfoFormState {\n  // Migration Information - matching database schema exactly\n  previous_barangay_code?: string | null; // VARCHAR(10), nullable in database\n  previous_city_municipality_code?: string | null; // VARCHAR(10), nullable in database\n  previous_province_code?: string | null; // VARCHAR(10), nullable in database\n  previous_region_code?: string | null; // VARCHAR(10), nullable in database\n  date_of_transfer?: string | null; // DATE, nullable in database\n  reason_for_migration?: string | null; // TEXT, nullable in database\n  is_intending_to_return?: boolean | null; // BOOLEAN, nullable in database\n  length_of_stay_previous_months?: number | null; // INTEGER, nullable in database\n  duration_of_stay_current_months?: number | null; // INTEGER, nullable in database\n  migration_type?: string | null; // VARCHAR(50), nullable in database\n  is_whole_family_migrated?: boolean | null; // BOOLEAN, nullable in database\n}\n\n/**\n * Combined form state interface for the ResidentForm component\n */\nexport interface ResidentFormState\n  extends PersonalInfoFormState,\n    ContactInfoFormState,\n    SectoralInfoFormState,\n    MigrationInfoFormState {}\n\n// =============================================================================\n// RELATED DATA INTERFACES\n// =============================================================================\n\n// Note: Household-related interfaces moved to households.ts\n// Note: PSGC and PSOC interfaces moved to database.ts as canonical source\n\nimport type { ServiceRawPsocData, ServiceRawPsgcData } from './services';\n\n// Backward compatibility aliases for resident form usage\nexport type PsocData = ServiceRawPsocData;\nexport type PsgcData = ServiceRawPsgcData;\n\n// Form option interfaces for resident forms\nexport interface PsocOption {\n  value: string;\n  label: string;\n  description?: string;\n  level_type?: string;\n  occupation_code: string;\n  occupation_title: string;\n  hierarchy?: string;\n  badge?: string;\n}\n\nexport interface PsgcOption {\n  value: string;\n  label: string;\n  description?: string;\n  level: string;\n  full_hierarchy?: string;\n  code: string;\n}\n\n// =============================================================================\n// EXTENDED AND COMPOSITE INTERFACES\n// =============================================================================\n\n/**\n * Extended resident interface with related data\n */\nexport interface ResidentWithRelations extends ResidentRecord {\n  // Birth place information (resolved from birth_place_code)\n  birth_place_info?: {\n    code: string;\n    name: string;\n    level: string;\n  };\n\n  household?: {\n    id?: string;\n    household_number?: string;\n    code: string;\n    street_name?: string;\n    house_number?: string;\n    subdivision?: string;\n    zip_code?: string;\n    barangay_code: string;\n    region_code?: string;\n    province_code?: string;\n    city_municipality_code?: string;\n    total_members?: number;\n    created_at?: string;\n    updated_at?: string;\n    head_resident?: {\n      id: string;\n      first_name: string;\n      middle_name?: string;\n      last_name: string;\n    };\n  };\n  psoc_info?: {\n    code: string;\n    title: string;\n    level?: string;\n    hierarchy?: string;\n  };\n  address_info?: AddressInfo;\n\n  // Legacy field mapping for backward compatibility\n  is_employed?: boolean; // Maps to employment_status check\n  philsys_last4?: string; // Computed from philsys_card_number\n  psoc_level?: string; // From psoc_info.level\n  occupation_title?: string; // From psoc_info.title\n\n  // Geographic codes (flattened for display)\n  region_code?: string;\n  province_code?: string;\n  city_municipality_code?: string;\n  barangay_code?: string;\n\n  // Computed fields for classifications (matching database schema exactly)\n  is_labor_force_employed?: boolean;\n  is_unemployed?: boolean;\n  is_senior_citizen?: boolean;\n  is_registered_senior_citizen?: boolean;\n  is_person_with_disability?: boolean;\n  is_solo_parent?: boolean;\n  is_overseas_filipino_worker?: boolean;\n  is_indigenous_people?: boolean;\n  is_migrant?: boolean;\n  is_out_of_school_children?: boolean;\n  is_out_of_school_youth?: boolean;\n  voter_id_number?: string;\n  household_id?: string;\n}\n\n/**\n * Combined form data interface for the ResidentForm component\n */\nexport interface CombinedResidentFormData extends ResidentRecord {\n  // Sectoral information (flattened for form usage)\n  sectoral_info?: ResidentSectoralInfo;\n\n  // Migration information (flattened for form usage)\n  migrant_info?: ResidentMigrantInfo;\n}\n\n// =============================================================================\n// SECTORAL INFORMATION INTERFACES\n// =============================================================================\n\n/**\n * Sectoral Information Interface (matches database schema)\n * @deprecated Use SectoralInfoFormState instead - same interface with better naming\n */\nexport type SectoralInformation = SectoralInfoFormState;\n\n/**\n * Context data needed for auto-calculations\n */\nexport interface SectoralContext {\n  age?: number;\n  birthdate?: string;\n  employment_status?: string;\n  highest_educational_attainment?: string;\n  marital_status?: string;\n  ethnicity?: string;\n}\n\n// =============================================================================\n// LISTING AND TABLE INTERFACES\n// =============================================================================\n\n/**\n * Optimized resident data structure for listing and table views\n * Consolidated from src/lib/types/resident-listing.ts\n *\n * @description Lightweight version of Resident interface containing only fields needed\n * for list displays, search results, and table components. This reduces data transfer\n * and improves performance for paginated resident listings.\n */\nexport type ResidentListItem = Pick<\n  ResidentRecord,\n  | 'id'\n  | 'first_name'\n  | 'middle_name'\n  | 'last_name'\n  | 'extension_name'\n  | 'email'\n  | 'mobile_number'\n  | 'sex'\n  | 'birthdate'\n  | 'civil_status'\n  | 'occupation_code'\n  | 'household_code'\n  | 'created_at'\n> & {\n  // Additional fields specific to listing view\n  /** Current occupation (computed field for display) */\n  occupation?: string;\n  /** Job title (alternative display field) */\n  job_title?: string;\n  /** Professional designation */\n  profession?: string;\n  /** Education level for filtering/display */\n  education_level?: string;\n  /** General status indicator */\n  status?: string;\n  /** Occupation title (computed from PSOC data) */\n  occupation_title?: string;\n  /** Barangay code for geographic filtering */\n  barangay_code?: string;\n  /** Simplified household information for listing context */\n  household?: {\n    /** Household identifier code */\n    code: string;\n    /** Street name for address display */\n    street_name?: string;\n    /** House number for address display */\n    house_number?: string;\n    /** Subdivision name for address display */\n    subdivision?: string;\n  };\n};\n\n/**\n * Standard API response format for resident listing endpoints\n * Consolidated from src/lib/types/resident-listing.ts\n *\n * @description Paginated response structure used by all resident listing APIs.\n * Provides consistent data format, pagination controls, and metadata for client consumption.\n */\nexport interface ResidentsApiResponse {\n  /** Array of resident records for current page */\n  data: ResidentListItem[];\n  /** Pagination information and controls */\n  pagination: {\n    /** Current page number (1-based) */\n    page: number;\n    /** Number of records per page */\n    limit: number;\n    /** Total number of records across all pages */\n    total: number;\n    /** Total number of pages available */\n    pages: number;\n    /** Whether there is a next page available */\n    hasNext: boolean;\n    /** Whether there is a previous page available */\n    hasPrev: boolean;\n  };\n  /** Optional success or informational message */\n  message?: string;\n  /** API response metadata */\n  metadata?: {\n    /** Response generation timestamp (ISO 8601 format) */\n    timestamp: string;\n    /** API version used for this response */\n    version: string;\n    /** Unique request identifier for tracking */\n    requestId?: string;\n  };\n}\n\n// =============================================================================\n// API AND VALIDATION INTERFACES\n// =============================================================================\n\n// Import canonical interfaces from their proper locations\nimport type { FormValidationError } from './validation';\n\n// Re-export for backward compatibility\nexport type { FormValidationError };\n\n// Resident-specific API response interfaces\nexport interface ResidentApiResponse {\n  resident: ResidentRecord;\n  household?: {\n    code: string;\n    name?: string;\n    house_number?: string;\n    street_id?: string;\n    subdivision_id?: string;\n    barangay_code: string;\n    household_head_id?: string;\n  };\n}\n\n/**\n * @deprecated Use ResidentsApiResponse instead for consistent API response format\n */\nexport interface ResidentsListResponse {\n  data: ResidentRecord[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n  };\n  message: string;\n}\n\n// Legacy search params interface (specific to residents)\nexport interface ResidentSearchParams {\n  page?: number;\n  pageSize?: number;\n  searchTerm?: string;\n  sex?: string;\n  civil_status?: string;\n  occupation?: string;\n  email?: string;\n}\n\n// Table component interfaces for residents\nexport interface ResidentTableAction {\n  key: string;\n  label: string;\n  href?: (record: ResidentRecord) => string;\n  onClick?: (record: ResidentRecord) => void;\n  variant: 'primary' | 'secondary' | 'danger';\n}\n\nexport interface ResidentTableColumn {\n  key: string;\n  title: string;\n  dataIndex: string | ((record: ResidentRecord) => string | number | boolean);\n  render?: (value: string | number | boolean, record: ResidentRecord) => ReactNode;\n  sortable?: boolean;\n}\n\n// =============================================================================\n// FORM OPTIONS AND ENUMS\n// =============================================================================\n\n// Note: Form option constants moved to @/constants/resident-form-options for better organization\n// Import from there: SEX_OPTIONS, CIVIL_STATUS_OPTIONS, CITIZENSHIP_OPTIONS, etc.\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/services.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[444,447],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[444,447],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1494,1497],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1494,1497],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":278,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":278,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6360,6363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6360,6363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":288,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":288,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6521,6524],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6521,6524],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":303,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":303,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6901,6904],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6901,6904],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":308,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":308,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7013,7016],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7013,7016],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":359,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":359,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8175,8178],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8175,8178],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":379,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":379,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8693,8696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8693,8696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":390,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":390,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8919,8922],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8919,8922],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":418,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":418,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9791,9794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9791,9794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":454,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":454,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10656,10659],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10656,10659],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":541,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":541,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12930,12933],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12930,12933],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":553,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":553,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13245,13248],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13245,13248],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":594,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":594,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14090,14093],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14090,14093],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":603,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":603,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14257,14260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14257,14260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":607,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":607,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14328,14331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14328,14331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":628,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":628,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14870,14873],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14870,14873],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Service Types\n * Consolidated service layer interfaces and types\n */\n\nimport type { HouseholdFormData } from '@/types/forms';\n\n// =============================================================================\n// REPOSITORY TYPES\n// =============================================================================\n\n/**\n * Generic repository result\n * Standard result format for repository operations\n */\nexport interface RepositoryResult<T = any> {\n  success: boolean;\n  data?: T;\n  error?: RepositoryError;\n  metadata?: Record<string, unknown>;\n  count?: number;\n}\n\n/**\n * Repository error\n * Standard error format for repository operations\n */\nexport interface RepositoryError {\n  /** Error code for programmatic handling */\n  code: string;\n  /** Human-readable error message */\n  message: string;\n  /** Additional error details */\n  details?: Record<string, unknown> | string;\n  /** Field name if error is field-specific */\n  field?: string;\n  /** Error timestamp */\n  timestamp?: string;\n}\n\n/**\n * Query options for repository methods\n */\nexport interface QueryOptions {\n  /** Maximum number of records to return */\n  limit?: number;\n  /** Number of records to skip for pagination */\n  offset?: number;\n  /** Field name to sort by */\n  orderBy?: string;\n  /** Sort direction */\n  orderDirection?: 'asc' | 'desc';\n  /** Specific fields to select */\n  select?: string[];\n  /** Related data to include */\n  include?: string[];\n  /** Additional filters to apply */\n  filters?: Record<string, any>;\n}\n\n/**\n * Paginated query result\n */\nexport interface PaginatedResult<T> {\n  data: T[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n    hasNextPage: boolean;\n    hasPreviousPage: boolean;\n  };\n}\n\n// =============================================================================\n// DATA TRANSFORMATION TYPES\n// =============================================================================\n\n/**\n * Basic information data\n * From form data transformers\n */\nexport interface BasicInformationData {\n  first_name: string;\n  middle_name: string;\n  last_name: string;\n  extension_name: string;\n  sex: 'male' | 'female' | '';\n  civil_status: string;\n  civil_status_others_specify: string;\n}\n\n/**\n * Birth information data\n * From form data transformers\n */\nexport interface BirthInformationData {\n  birthdate: string;\n  birth_place_name: string;\n  birth_place_code: string;\n  citizenship: string;\n}\n\n/**\n * Education information data\n * From form data transformers\n */\nexport interface EducationInformationData {\n  education_attainment: string;\n  is_graduate: boolean;\n}\n\n/**\n * Employment information data\n * From form data transformers\n */\nexport interface EmploymentInformationData {\n  employment_status: string;\n  occupation_code: string;\n  employment_code: string;\n  employment_name: string;\n  occupation_title: string;\n}\n\n/**\n * Contact information data\n * From form data transformers\n */\nexport interface ContactInformationData {\n  email: string;\n  mobile_number: string;\n  telephone_number: string;\n  household_code: string;\n}\n\n/**\n * Physical information data\n * From form data transformers\n */\nexport interface PhysicalInformationData {\n  blood_type: string;\n  complexion: string;\n  height: string | number;\n  weight: string | number;\n  citizenship?: string;\n  ethnicity: string;\n  religion: string;\n  religion_others_specify: string;\n}\n\n/**\n * Voting information data\n * From form data transformers\n */\nexport interface VotingInformationData {\n  is_voter: boolean;\n  is_resident_voter: boolean;\n  last_voted_date: string;\n}\n\n/**\n * Migration information data\n * From form data transformers and migration hooks\n */\nexport interface MigrationInformationData {\n  previous_barangay_code?: string;\n  previous_city_municipality_code?: string;\n  previous_province_code?: string;\n  previous_region_code?: string;\n  length_of_stay_previous_months?: number;\n  reason_for_migration?: string;\n  date_of_transfer?: string;\n  migration_type?: string;\n  // Legacy fields for backward compatibility (will be mapped to above)\n  reason_for_leaving?: string;\n  reason_for_transferring?: string;\n  duration_of_stay_current_months?: number;\n  is_intending_to_return?: boolean;\n}\n\n/**\n * Family information data\n * From form data transformers\n */\nexport interface FamilyInformationData {\n  mother_maiden_first: string;\n  mother_maiden_middle: string;\n  mother_maiden_last: string;\n}\n\n// =============================================================================\n// CACHE TYPES\n// =============================================================================\n\n// Import consolidated cache types from centralized location\nexport type {\n  CacheEntry,\n  CacheStats,\n  CacheConfig,\n  CacheSetOptions,\n  CacheClient,\n  CacheDecoratorOptions,\n  CacheInvalidationOptions,\n  CacheWarmingOptions,\n  CacheOperationResult,\n  CacheError,\n} from '@/types/cache';\n\n// =============================================================================\n// AUTHENTICATION SERVICE TYPES\n// =============================================================================\n\n/**\n * Authentication context\n */\nexport interface AuthContext {\n  userId: string;\n  email: string;\n  role: string;\n  permissions: string[];\n  barangayCode?: string;\n}\n\n/**\n * Session validation result\n */\nexport interface SessionValidationResult {\n  isValid: boolean;\n  context?: AuthContext;\n  error?: string;\n}\n\n// =============================================================================\n// ANALYTICS TYPES\n// =============================================================================\n\n/**\n * Analytics event\n */\nexport interface AnalyticsEvent {\n  name: string;\n  properties: Record<string, unknown>;\n  userId?: string;\n  timestamp: number;\n  sessionId?: string;\n}\n\n/**\n * User behavior tracking\n */\nexport interface UserBehaviorEvent {\n  action: string;\n  category: string;\n  label?: string;\n  value?: number;\n  userId?: string;\n  timestamp: number;\n}\n\n// =============================================================================\n// SEARCH SERVICE TYPES\n// =============================================================================\n\n/**\n * Search configuration\n */\nexport interface SearchConfig {\n  fuzzyMatch: boolean;\n  maxResults: number;\n  minQueryLength: number;\n  debounceMs: number;\n}\n\n/**\n * Search result item\n */\nexport interface SearchResultItem<T = any> {\n  item: T;\n  score: number;\n  matches: string[];\n  highlights?: Record<string, string>;\n}\n\n/**\n * Search response\n */\nexport interface SearchResponse<T = any> {\n  results: SearchResultItem<T>[];\n  totalCount: number;\n  query: string;\n  executionTime: number;\n  suggestions?: string[];\n}\n\n// =============================================================================\n// UTILITY TYPES\n// =============================================================================\n\n/**\n * Service operation result\n */\nexport type ServiceResult<T = any> = Promise<RepositoryResult<T>>;\n\n/**\n * Async operation state\n */\nexport interface AsyncOperationState<T = any> {\n  isLoading: boolean;\n  data?: T;\n  error?: string;\n  lastUpdated?: Date;\n}\n\n/**\n * Retry configuration\n */\nexport interface RetryConfig {\n  maxAttempts: number;\n  delayMs: number;\n  backoffMultiplier?: number;\n  maxDelayMs?: number;\n}\n\n// =============================================================================\n// HOUSEHOLD SERVICE TYPES (using canonical types from @/types/forms)\n// =============================================================================\n\n/**\n * User address information (duplicated from addresses.ts, but more detailed)\n */\nexport interface UserAddressDetailed {\n  region_code: string;\n  province_code?: string;\n  city_municipality_code: string;\n  barangay_code: string;\n  region_name: string;\n  province_name?: string;\n  city_municipality_name: string;\n  city_municipality_type: string;\n  barangay_name: string;\n}\n\n/**\n * Create household request\n */\nexport interface CreateHouseholdRequest {\n  formData: HouseholdFormData;\n  userAddress?: UserAddressDetailed;\n  barangay_code?: string;\n  csrf_token?: string;\n}\n\n/**\n * Create household response\n */\nexport interface CreateHouseholdResponse {\n  success: boolean;\n  data?: any; // HouseholdRecord type from @/types\n  error?: string;\n}\n\n/**\n * Household validation result\n */\nexport interface HouseholdValidationResult {\n  success: boolean;\n  errors?: Record<string, string>;\n}\n\n// =============================================================================\n// RESIDENT SERVICE TYPES (from services/resident.service.ts)\n// =============================================================================\n\n/**\n * Create resident request\n */\nexport interface CreateResidentRequest {\n  formData: any; // ResidentFormData type\n  userAddress?: UserAddressDetailed;\n  barangay_code?: string;\n  csrf_token?: string;\n}\n\n/**\n * Create resident response\n */\nexport interface CreateResidentResponse {\n  success: boolean;\n  data?: any; // ResidentRecord type from @/types\n  error?: string;\n}\n\n/**\n * Resident validation result (consolidated from multiple service files)\n */\nexport interface ResidentValidationResult {\n  isValid: boolean;\n  success: boolean;\n  errors?: Array<{\n    field: string;\n    message: string;\n    code?: string;\n  }>;\n}\n\n// =============================================================================\n// SCATTERED SERVICE INTERFACES CONSOLIDATION\n// =============================================================================\n\n/**\n * Service-specific resident form data with optional id for updates\n * Consolidates from src/services/resident.service.ts\n */\nexport interface ServiceResidentFormData {\n  id?: string; // Optional for create operations, required for updates\n  // Extends base ResidentFormData - imported at runtime to avoid circular dependencies\n  [key: string]: any;\n}\n\n/**\n * User address for service operations\n * Consolidates from src/services/resident.service.ts\n */\nexport interface ServiceUserAddress {\n  region_code: string;\n  province_code?: string;\n  city_municipality_code: string;\n  barangay_code: string;\n  region_name: string;\n  province_name?: string;\n  city_municipality_name: string;\n  city_municipality_type: string;\n  barangay_name: string;\n}\n\n/**\n * Create resident request for service layer\n * Consolidates from src/services/resident.service.ts\n */\nexport interface ServiceCreateResidentRequest {\n  formData: ServiceResidentFormData;\n  userAddress?: ServiceUserAddress;\n  barangayCode?: string;\n  csrfToken?: string;\n}\n\n/**\n * Create resident response from service layer\n * Consolidates from src/services/resident.service.ts\n */\nexport interface ServiceCreateResidentResponse {\n  success: boolean;\n  data?: any; // ResidentRecord type\n  error?: string;\n}\n\n/**\n * User data interface for user repository\n * Consolidates from src/services/user-repository.ts\n */\nexport interface UserRepositoryData {\n  id?: string;\n  first_name: string;\n  middle_name?: string;\n  last_name: string;\n  email: string;\n  phone?: string;\n  role_id: string; // UUID reference to auth_roles\n  role?: string; // For backward compatibility - computed field\n  barangay_code?: string;\n  city_municipality_code?: string;\n  province_code?: string;\n  region_code?: string;\n  is_active: boolean;\n  last_login?: string; // Database field name\n  last_login_at?: string; // Alias for backward compatibility\n  email_verified?: boolean;\n  email_verified_at?: string;\n  onboarding_completed?: boolean;\n  onboarding_completed_at?: string;\n  welcome_email_sent?: boolean;\n  welcome_email_sent_at?: string;\n  login_attempts?: number;\n  locked_until?: string;\n  password_changed_at?: string;\n  created_by?: string;\n  updated_by?: string;\n  created_at?: string;\n  updated_at?: string;\n}\n\n/**\n * User search options for repository layer\n * Consolidates from src/services/user-repository.ts\n */\nexport interface UserRepositorySearchOptions extends QueryOptions {\n  email?: string;\n  name?: string;\n  role?: string;\n  barangay_code?: string;\n  is_active?: boolean;\n  last_login_before?: string;\n  last_login_after?: string;\n}\n\n/**\n * User security data for authentication\n * Consolidates from src/services/user-repository.ts\n */\nexport interface UserSecurityData {\n  login_attempts?: number;\n  last_login?: string; // Database field name\n  last_login_at?: string; // Alias for backward compatibility\n  last_login_ip?: string;\n  locked_until?: string;\n  password_changed_at?: string;\n  email_verified?: boolean;\n  email_verified_at?: string;\n}\n\n/**\n * Command menu search result\n * Consolidates from src/services/command-menu/api-utils.ts\n */\nexport interface CommandMenuSearchResult {\n  id: string;\n  title: string;\n  description: string;\n  type: 'resident' | 'household';\n  href: string;\n}\n\n/**\n * Export options for command menu\n * Consolidates from src/services/command-menu/api-utils.ts\n */\nexport interface CommandMenuExportOptions {\n  type: 'residents' | 'households';\n  format: 'csv' | 'xlsx';\n  filters?: Record<string, any>;\n}\n\n/**\n * Command menu analytics event\n * Consolidates from src/services/command-menu/analytics-utils.ts\n */\nexport interface CommandMenuAnalyticsEvent {\n  type: 'search' | 'navigation' | 'action' | 'error' | 'performance';\n  timestamp: number;\n  userId?: string;\n  sessionId?: string;\n  data: Record<string, any>;\n}\n\n/**\n * Raw PSOC data for mapping\n * Consolidates from src/services/residentMapper.ts\n */\nexport interface ServiceRawPsocData {\n  code: string;\n  title: string;\n  level?: string;\n  level_name?: string;\n  hierarchy?: string;\n  full_hierarchy?: string;\n}\n\n/**\n * Raw PSGC data for mapping\n * Consolidates from src/services/residentMapper.ts\n */\nexport interface ServiceRawPsgcData {\n  code?: string;\n  city_code?: string;\n  province_code?: string;\n  name?: string;\n  city_name?: string;\n  province_name?: string;\n  level: string;\n  full_address?: string;\n  full_hierarchy?: string;\n}\n\n/**\n * Chart data point for charts service\n * Consolidates from src/services/charts/chart-transformers.ts\n */\nexport interface ServiceChartDataPoint {\n  label: string;\n  value: number;\n  color?: string;\n  percentage?: number;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Database response wrapper\n * Consolidates from src/services/auth/errors.ts\n */\nexport interface ServiceDatabaseResponse {\n  success: boolean;\n  data?: any;\n  error?: {\n    message: string;\n    code?: string;\n    details?: any;\n  };\n  metadata?: {\n    timestamp: string;\n    operation: string;\n    affectedRows?: number;\n  };\n}\n\n// =============================================================================\n// SYNC SERVICE TYPES\n// =============================================================================\n\n/**\n * Sync queue item for offline data synchronization\n * Consolidated from src/services/sync-service.ts\n */\nexport interface SyncQueueItem {\n  id?: string;\n  action: 'CREATE' | 'UPDATE' | 'DELETE';\n  type: 'resident' | 'household' | 'user';\n  data: any;\n  timestamp: number;\n  retryCount: number;\n}\n\n/**\n * Sync status information\n * Consolidated from src/services/sync-service.ts\n */\nexport interface SyncStatus {\n  isProcessing: boolean;\n  pendingCount: number;\n  isOnline: boolean;\n  lastSyncAttempt?: number;\n  lastSuccessfulSync?: number;\n}\n\n// =============================================================================\n// RESIDENT DETAILS FETCHER TYPES\n// =============================================================================\n\n/**\n * PSOC information for resident details\n * Consolidated from src/services/resident-details-fetcher.ts\n */\nexport interface PsocInfo {\n  code: string;\n  title: string;\n  hierarchy?: string;\n  level?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/utilities.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1353,1356],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1353,1356],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1363,1366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1363,1366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1480,1483],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1480,1483],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1498,1501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1498,1501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1529,1532],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1529,1532],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":5,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":8,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1567,1570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1567,1570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1667,1670],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1667,1670],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1677,1680],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1677,1680],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1796,1799],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1796,1799],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1806,1809],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1806,1809],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2575,2578],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2575,2578],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":183,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4415,4418],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4415,4418],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":193,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4586,4589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4586,4589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":235,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5590,5593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5590,5593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":246,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":246,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5916,5919],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5916,5919],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":251,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":251,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6014,6017],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6014,6017],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":256,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":256,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6118,6121],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6118,6121],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":266,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6288,6291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6288,6291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":358,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":358,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8549,8552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8549,8552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":443,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":443,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10458,10461],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10458,10461],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":444,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":444,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10491,10494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10491,10494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":457,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":457,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10834,10837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10834,10837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":470,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":470,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11124,11127],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11124,11127],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":483,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":483,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11352,11355],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11352,11355],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Utility Types\n * Common utility types and type helpers used across the application\n */\n\n// =============================================================================\n// COMMON UTILITY TYPES\n// =============================================================================\n\n/**\n * Make all properties optional\n */\nexport type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\n/**\n * Make specific properties required\n */\nexport type RequireBy<T, K extends keyof T> = T & Required<Pick<T, K>>;\n\n/**\n * Omit multiple properties\n */\nexport type OmitMultiple<T, K extends keyof T> = Omit<T, K>;\n\n/**\n * Pick multiple properties\n */\nexport type PickMultiple<T, K extends keyof T> = Pick<T, K>;\n\n/**\n * Make properties nullable\n */\nexport type Nullable<T> = {\n  [P in keyof T]: T[P] | null;\n};\n\n/**\n * Deep partial\n */\nexport type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n\n/**\n * Deep readonly\n */\nexport type DeepReadonly<T> = {\n  readonly [P in keyof T]: T[P] extends object ? DeepReadonly<T[P]> : T[P];\n};\n\n// =============================================================================\n// FUNCTION UTILITY TYPES\n// =============================================================================\n\n/**\n * Extract function return type\n */\nexport type ReturnTypeOf<T extends (...args: any[]) => any> = ReturnType<T>;\n\n/**\n * Extract async function return type\n */\nexport type AsyncReturnType<T extends (...args: any[]) => Promise<any>> = T extends (\n  ...args: any[]\n) => Promise<infer R>\n  ? R\n  : any;\n\n/**\n * Extract parameters type from function\n */\nexport type ParametersOf<T extends (...args: any[]) => any> = Parameters<T>;\n\n/**\n * Make function parameters optional\n */\nexport type OptionalParameters<T extends (...args: any[]) => any> = T extends (\n  ...args: infer P\n) => infer R\n  ? (...args: Partial<P>) => R\n  : never;\n\n// =============================================================================\n// ARRAY AND OBJECT UTILITY TYPES\n// =============================================================================\n\n/**\n * Get array element type\n */\nexport type ArrayElement<T> = T extends (infer U)[] ? U : never;\n\n/**\n * Get object values type\n */\nexport type ValueOf<T> = T[keyof T];\n\n/**\n * Get object keys as union type\n */\nexport type KeysOf<T> = keyof T;\n\n/**\n * Make object keys literal strings\n */\nexport type StringKeys<T> = Extract<keyof T, string>;\n\n/**\n * Create object type from array of strings\n */\nexport type ObjectFromKeys<T extends readonly string[]> = {\n  [K in T[number]]: any;\n};\n\n// =============================================================================\n// CONDITIONAL UTILITY TYPES\n// =============================================================================\n\n/**\n * Check if type extends another type\n */\nexport type Extends<T, U> = T extends U ? true : false;\n\n/**\n * If condition, return T, else return F\n */\nexport type If<C extends boolean, T, F> = C extends true ? T : F;\n\n/**\n * Check if type is any\n */\nexport type IsAny<T> = 0 extends 1 & T ? true : false;\n\n/**\n * Check if type is never\n */\nexport type IsNever<T> = [T] extends [never] ? true : false;\n\n/**\n * Check if type is unknown\n */\nexport type IsUnknown<T> = IsAny<T> extends true ? false : unknown extends T ? true : false;\n\n// =============================================================================\n// BRAND TYPES\n// =============================================================================\n\n/**\n * Create a branded type\n */\nexport type Brand<T, B> = T & { __brand: B };\n\n/**\n * Common branded types\n */\nexport type UserId = Brand<string, 'UserId'>;\nexport type ResidentId = Brand<string, 'ResidentId'>;\nexport type HouseholdId = Brand<string, 'HouseholdId'>;\nexport type BarangayCode = Brand<string, 'BarangayCode'>;\nexport type Email = Brand<string, 'Email'>;\nexport type PhoneNumber = Brand<string, 'PhoneNumber'>;\n\n// =============================================================================\n// FORM AND INPUT UTILITY TYPES\n// =============================================================================\n\n/**\n * Extract form data type from form schema\n */\nexport type FormDataOf<T> = {\n  [K in keyof T]: T[K] extends { value: infer V } ? V : T[K];\n};\n\n/**\n * Make form fields optional\n */\nexport type OptionalFormFields<T> = {\n  [K in keyof T]?: T[K];\n};\n\n/**\n * Form field state\n */\nexport type FieldState<T = any> = {\n  value: T;\n  error: string | null;\n  touched: boolean;\n  dirty: boolean;\n};\n\n/**\n * Form state for all fields\n */\nexport type FormState<T extends Record<string, any>> = {\n  [K in keyof T]: FieldState<T[K]>;\n};\n\n// =============================================================================\n// API UTILITY TYPES\n// =============================================================================\n\n/**\n * Extract data type from API response\n */\nexport type ApiResponseData<T> = T extends { data: infer D } ? D : never;\n\n/**\n * Extract error type from API response\n */\nexport type ApiResponseError<T> = T extends { error: infer E } ? E : never;\n\n/**\n * Paginated data type\n */\nexport type PaginatedData<T> = {\n  items: T[];\n  total: number;\n  page: number;\n  totalPages: number;\n  hasMore: boolean;\n};\n\n// =============================================================================\n// CONFIGURATION UTILITY TYPES\n// =============================================================================\n\n/**\n * Environment variable type\n */\nexport type EnvVar = string | undefined;\n\n\n/**\n * Configuration object with validation\n */\nexport type Config<T extends Record<string, any>> = {\n  [K in keyof T]: T[K] extends EnvVar ? string | undefined : T[K];\n};\n\n// =============================================================================\n// EVENT UTILITY TYPES\n// =============================================================================\n\n/**\n * Event handler type\n */\nexport type EventHandler<T = any> = (event: T) => void;\n\n/**\n * Async event handler type\n */\nexport type AsyncEventHandler<T = any> = (event: T) => Promise<void>;\n\n/**\n * Change event handler type\n */\nexport type ChangeHandler<T = any> = (value: T) => void;\n\n/**\n * Click event handler type\n */\nexport type ClickHandler = () => void;\n\n/**\n * Form submit handler type\n */\nexport type SubmitHandler<T = any> = (data: T) => Promise<void> | void;\n\n// =============================================================================\n// PROMISE UTILITY TYPES\n// =============================================================================\n\n/**\n * Unwrap promise type\n */\nexport type Awaited<T> = T extends Promise<infer U> ? U : T;\n\n/**\n * Promise or value type\n */\nexport type MaybePromise<T> = T | Promise<T>;\n\n/**\n * Promise result type\n */\nexport type PromiseResult<T> = { success: true; data: T } | { success: false; error: Error };\n\n// =============================================================================\n// GENERIC UTILITY FUNCTIONS TYPES\n// =============================================================================\n\n/**\n * Identity function type\n */\nexport type Identity<T> = (value: T) => T;\n\n/**\n * Predicate function type\n */\nexport type Predicate<T> = (value: T) => boolean;\n\n/**\n * Mapper function type\n */\nexport type Mapper<T, U> = (value: T) => U;\n\n/**\n * Reducer function type\n */\nexport type Reducer<T, U> = (accumulator: U, current: T, index: number) => U;\n\n/**\n * Compare function type\n */\nexport type Comparator<T> = (a: T, b: T) => number;\n\n// =============================================================================\n// SCATTERED UTILITY INTERFACES CONSOLIDATION\n// =============================================================================\n\n/**\n * Name parts for form processing\n * Consolidates from src/utils/resident-form-utils.ts\n */\nexport interface NameParts {\n  first_name: string;\n  middleName: string;\n  last_name: string;\n}\n\n/**\n * Unknown form data type\n * Consolidates from src/utils/resident-form-utils.ts\n */\nexport type UnknownFormData = Record<string, unknown>;\n\n/**\n * Form processing stage types\n * Consolidates from src/utils/resident-form-utils.ts\n */\nexport type FormProcessingStage = 'transform' | 'security' | 'audit' | 'full';\n\n/**\n * Form processing options\n * Consolidates from src/utils/resident-form-utils.ts\n */\nexport interface FormProcessingOptions {\n  stage?: FormProcessingStage;\n  userId?: string;\n  sessionId?: string;\n  barangayCode?: string;\n}\n\n/**\n * Processed form result\n * Consolidates from src/utils/resident-form-utils.ts\n */\nexport interface ProcessedFormResult {\n  transformedData: any; // ResidentFormData type\n  auditInfo?: {\n    userId: string;\n    sessionId: string;\n    barangayCode: string;\n    timestamp: string;\n    fieldCount: number;\n    hasPhilSys: boolean;\n  };\n  securityValidation?: {\n    sanitized: boolean;\n    flaggedFields: string[];\n    riskScore: number;\n  };\n}\n\n/**\n * Validation state for utilities\n * Consolidates from src/utils/validation-utilities.ts\n */\nexport interface UtilityValidationState {\n  errors: Record<string, string>;\n  isValid: boolean;\n  hasValidated: boolean;\n}\n\n/**\n * Sanitization types for input processing\n * Consolidates from src/utils/input-sanitizer.ts\n */\nexport type SanitizationType =\n  | 'text'\n  | 'name'\n  | 'email'\n  | 'mobile'\n  | 'philsys'\n  | 'psgc'\n  | 'numeric'\n  | 'none';\n\n/**\n * Sanitization options\n * Consolidates from src/utils/input-sanitizer.ts\n */\nexport interface SanitizationOptions {\n  maxLength?: number;\n  allowEmpty?: boolean;\n  customPattern?: RegExp;\n  replacement?: string;\n  normalizeUnicode?: boolean;\n  trim?: boolean;\n  removeHtml?: boolean;\n  removeScripts?: boolean;\n  allowedChars?: RegExp;\n}\n\n// =============================================================================\n// PWA PERFORMANCE TYPES\n// =============================================================================\n\n/**\n * PWA metrics tracking\n * Consolidates from src/lib/performance/pwaPerformanceUtils.ts\n */\nexport interface PWAMetrics {\n  installPromptShown: number;\n  installAccepted: number;\n  installDismissed: number;\n  offlineUsage: number;\n  cacheHits: number;\n  cacheMisses: number;\n  syncOperations: number;\n  syncFailures: number;\n}\n\n/**\n * PWA performance entry\n * Consolidates from src/lib/performance/pwaPerformanceUtils.ts\n */\nexport interface PWAPerformanceEntry {\n  name: string;\n  type: 'cache' | 'sync' | 'install' | 'offline' | 'navigation';\n  timestamp: number;\n  duration?: number;\n  success?: boolean;\n  details?: any;\n  metadata?: Record<string, any>;\n}\n\n// =============================================================================\n// OFFLINE DATA TYPES\n// =============================================================================\n\n/**\n * Offline stored data entry\n * Consolidates from src/lib/data/offline-storage.ts\n */\nexport interface OfflineStoredData {\n  id: string;\n  data: any;\n  timestamp: number;\n  expiry?: number;\n}\n\n/**\n * Pending sync item for offline mode\n * Consolidates from src/lib/data/offline-storage.ts\n */\nexport interface PendingSyncItem {\n  id?: number;\n  action: 'CREATE' | 'UPDATE' | 'DELETE';\n  type: 'resident' | 'household' | 'user';\n  data: any;\n  timestamp: number;\n  synced: boolean;\n  retryCount: number;\n}\n\n/**\n * Sync operation result\n * Consolidates from src/lib/data/sync-queue.ts\n */\nexport interface SyncResult {\n  success: boolean;\n  error?: string;\n  data?: any;\n}\n\n// =============================================================================\n// GENERAL PERFORMANCE TYPES\n// =============================================================================\n\n/**\n * Generic performance metric\n * Consolidates from src/lib/performance/performanceUtils.ts\n */\nexport interface PerformanceMetric {\n  name: string;\n  value: number;\n  timestamp: number;\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Web vitals performance metric\n * Consolidates from src/lib/performance/performanceMonitor.ts\n */\nexport interface WebVitalsPerformanceMetric {\n  name: string;\n  value: number;\n  rating: 'good' | 'needs-improvement' | 'poor';\n  timestamp: number;\n  url: string;\n  userAgent?: string;\n}\n\n/**\n * Component performance tracking data\n * Consolidates from src/lib/performance/performanceUtils.ts\n */\nexport interface ComponentPerformanceData {\n  componentName: string;\n  renderTime: number;\n  propsSize?: number;\n  rerenderCount: number;\n  timestamp: number;\n}\n\n/**\n * Resource timing information\n * Consolidates from src/lib/performance/performanceMonitor.ts\n */\nexport interface ResourceTiming {\n  name: string;\n  duration: number;\n  size: number;\n  type: string;\n}\n\n/**\n * Layout shift entry for performance monitoring\n * Consolidates from src/lib/performance/performanceUtils.ts\n */\nexport interface LayoutShiftEntry extends PerformanceEntry {\n  value: number;\n  hadRecentInput: boolean;\n  sources?: Array<{\n    node?: {\n      tagName: string;\n    };\n  }>;\n}\n\n// =============================================================================\n// SEARCH UTILITY TYPES\n// =============================================================================\n\n/**\n * Base search configuration\n * Consolidated from src/utils/search-utilities.ts\n */\nexport interface BaseSearchConfig {\n  debounceMs?: number;\n  minQueryLength?: number;\n  initialQuery?: string;\n  onError?: (error: Error) => void;\n}\n\n/**\n * Paginated search configuration\n * Consolidated from src/utils/search-utilities.ts\n */\nexport interface PaginatedSearchConfig extends BaseSearchConfig {\n  initialPageSize?: number;\n}\n\n/**\n * Search result with pagination\n * Consolidated from src/utils/search-utilities.ts\n */\nexport interface PaginatedSearchResult<T> {\n  data: T[];\n  total: number;\n  hasMore: boolean;\n  page: number;\n  pageSize: number;\n}\n\n/**\n * Search state\n * Consolidated from src/utils/search-utilities.ts\n */\nexport interface SearchState<T> {\n  query: string;\n  results: T[];\n  isLoading: boolean;\n  error: Error | null;\n}\n\n/**\n * Paginated search state\n * Consolidated from src/utils/search-utilities.ts\n */\nexport interface PaginatedSearchState<T> extends SearchState<T> {\n  pagination: {\n    current: number;\n    pageSize: number;\n    total: number;\n    hasMore: boolean;\n  };\n}\n\n/**\n * Search function types\n * Consolidated from src/utils/search-utilities.ts\n */\nexport type SearchFunction<T> = (query: string) => Promise<T[]>;\n\nexport type PaginatedSearchFunction<T, F = Record<string, unknown>> = (params: {\n  query: string;\n  page: number;\n  pageSize: number;\n  filters?: F;\n}) => Promise<PaginatedSearchResult<T>>;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/types/validation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1207,1210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1207,1210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1977,1980],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1977,1980],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2069,2072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2069,2072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2322,2325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2322,2325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2667,2670],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2667,2670],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":178,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4565,4568],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4565,4568],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":180,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4613,4616],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4613,4616],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4783,4786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4783,4786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":190,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4852,4855],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4852,4855],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":217,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5564,5567],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5564,5567],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":227,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":227,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5722,5725],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5722,5725],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":246,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":246,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6078,6081],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6078,6081],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":271,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6614,6617],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6614,6617],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":288,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":288,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6966,6969],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6966,6969],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":306,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":306,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7316,7319],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7316,7319],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":318,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":318,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7667,7670],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7667,7670],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":330,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":330,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8058,8061],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8058,8061],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":345,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":345,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8420,8423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8420,8423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":346,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":346,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8524,8527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8524,8527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":361,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":361,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8961,8964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8961,8964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Validation Types - Comprehensive Form Validation Framework\n *\n * @fileoverview Complete validation type system for the Citizenly RBI application.\n * Provides type-safe validation patterns for forms, API requests, and data processing\n * with support for synchronous, asynchronous, and schema-based validation.\n *\n * @version 3.0.0\n * @since 2025-01-01\n * @author Citizenly Development Team\n *\n * @example Basic Field Validation\n * ```typescript\n * import { ValidationResult, FieldValidator } from '@/types/validation';\n *\n * const validateEmail: FieldValidator<string> = (value) => {\n *   if (!value.includes('@')) return 'Invalid email format';\n *   return null;\n * };\n * ```\n */\n\n// =============================================================================\n// CORE VALIDATION TYPES\n// =============================================================================\n\n/**\n * Standard validation error interface\n * Consolidates ValidationError from multiple files\n */\nexport interface ValidationError {\n  field: string;\n  message: string;\n  code?: string;\n  value?: unknown;\n}\n\n/**\n * Validation result wrapper\n * Generic validation result for any data type\n */\nexport interface ValidationResult<T = any> {\n  isValid: boolean;\n  errors: ValidationError[];\n  data?: T;\n  warnings?: string[];\n  success?: boolean; // Backward compatibility alias for isValid\n}\n\n/**\n * Field validation state\n * Used by form components to track field-level validation\n */\nexport interface ValidationState {\n  isValid: boolean;\n  isDirty: boolean;\n  isTouched: boolean;\n  error: string | null;\n  warnings: string[];\n}\n\n/**\n * Form validation state\n * Tracks validation for entire forms\n */\nexport interface FormValidationState {\n  isValid: boolean;\n  isDirty: boolean;\n  isSubmitting: boolean;\n  errors: Record<string, string>;\n  fieldStates: Record<string, ValidationState>;\n}\n\n/**\n * Validation rule interface\n * Defines validation rules for fields\n */\nexport interface ValidationRule<T = any> {\n  name: string;\n  message: string;\n  validator: (value: T, formData?: Record<string, any>) => boolean;\n  required?: boolean;\n}\n\n/**\n * Cross-field validation context\n * For validations that depend on multiple fields\n */\nexport interface CrossFieldValidationContext {\n  field: string;\n  relatedFields: string[];\n  formData: Record<string, any>;\n  rules: ValidationRule[];\n}\n\n// =============================================================================\n// ASYNC VALIDATION TYPES\n// =============================================================================\n\n/**\n * Async validation result\n * For validations that require API calls\n */\nexport interface AsyncValidationResult<T = any> extends ValidationResult<T> {\n  isPending: boolean;\n  lastValidated?: Date;\n}\n\n/**\n * Validation debounce options\n */\nexport interface ValidationDebounceOptions {\n  delay: number;\n  maxDelay?: number;\n  immediate?: boolean;\n}\n\n// =============================================================================\n// SCHEMA VALIDATION TYPES\n// =============================================================================\n\n/**\n * Schema validation options\n * Configuration for schema-based validation (Zod, Yup, etc.)\n */\nexport interface SchemaValidationOptions {\n  abortEarly?: boolean;\n  stripUnknown?: boolean;\n  allowUnknown?: boolean;\n}\n\n/**\n * Field validation configuration\n * Defines how a field should be validated\n */\nexport interface FieldValidationConfig {\n  required?: boolean;\n  rules?: ValidationRule[];\n  asyncValidation?: boolean;\n  debounce?: ValidationDebounceOptions;\n  crossField?: string[];\n}\n\n// =============================================================================\n// FORM-SPECIFIC VALIDATION TYPES\n// =============================================================================\n\n/**\n * Form validation error\n * Specific to form submissions\n */\nexport interface FormValidationError extends ValidationError {\n  field: string;\n  message: string;\n  type?: 'required' | 'format' | 'length' | 'custom';\n}\n\n/**\n * Validation progress state\n * Tracks validation progress in multi-step forms\n */\nexport interface ValidationProgressState {\n  totalSteps: number;\n  completedSteps: number;\n  currentStep: number;\n  stepValidation: Record<number, boolean>;\n  overallValid: boolean;\n}\n\n// =============================================================================\n// UTILITY TYPES\n// =============================================================================\n\n/**\n * Validation function type\n * Generic validation function signature\n */\nexport type ValidationFunction<T = any> = (\n  value: T,\n  context?: Record<string, any>\n) => ValidationResult<T> | Promise<ValidationResult<T>>;\n\n/**\n * Field validator type\n * Function type for field-level validators\n */\nexport type FieldValidator<T = any> = (\n  value: T,\n  fieldName: string,\n  formData: Record<string, any>\n) => string | null | Promise<string | null>;\n\n/**\n * Validation severity levels\n */\nexport type ValidationSeverity = 'error' | 'warning' | 'info';\n\n/**\n * Enhanced validation error with severity\n */\nexport interface ValidationErrorWithSeverity extends ValidationError {\n  severity: ValidationSeverity;\n  timestamp?: Date;\n}\n\n// =============================================================================\n// EXTENDED VALIDATION TYPES (from lib/validation/types.ts)\n// =============================================================================\n\n/**\n * Field-level validation result\n */\nexport interface FieldValidationResult {\n  isValid: boolean;\n  error?: string;\n  warning?: string;\n  sanitizedValue?: any;\n}\n\n/**\n * Enhanced validation error details\n */\nexport interface ValidationErrorDetailed {\n  field: string;\n  message: string;\n  code: string;\n  value?: any;\n  context?: Record<string, unknown>;\n}\n\n/**\n * Validation context for contextual validation\n */\nexport interface ValidationContext {\n  mode: 'create' | 'update' | 'view';\n  userId?: string;\n  userRole?: string;\n  requestPath?: string;\n  ipAddress?: string;\n  timestamp: string;\n}\n\n/**\n * Form validator function type\n */\nexport type FormValidator<T = any> = (\n  data: T,\n  context?: ValidationContext\n) => ValidationResult | Promise<ValidationResult>;\n\n/**\n * Sanitization options\n */\nexport interface SanitizationOptions {\n  stripHtml?: boolean;\n  trimWhitespace?: boolean;\n  maxLength?: number;\n  allowedChars?: RegExp;\n  escapeHtml?: boolean;\n  normalizeUnicode?: boolean;\n}\n\n/**\n * Enhanced validation rule definition\n */\nexport interface ValidationRuleEnhanced {\n  name: string;\n  validator: FieldValidator;\n  message: string;\n  severity: 'error' | 'warning';\n  condition?: (value: any, context?: ValidationContext) => boolean;\n}\n\n/**\n * Schema validation configuration\n */\nexport interface SchemaValidationConfig {\n  strict?: boolean;\n  allowUnknownFields?: boolean;\n  stripUnknownFields?: boolean;\n  validateAsync?: boolean;\n  context?: ValidationContext;\n}\n\n/**\n * Async validation function type\n */\nexport type AsyncValidator<T = any> = (\n  value: T,\n  context?: ValidationContext\n) => Promise<FieldValidationResult>;\n\n/**\n * Validation pipeline stage\n */\nexport interface ValidationStage {\n  name: string;\n  validator: FieldValidator | AsyncValidator;\n  order: number;\n  required: boolean;\n}\n\n/**\n * Composite validation result\n */\nexport interface CompositeValidationResult<T = any> extends ValidationResult<T> {\n  fieldResults: Record<string, FieldValidationResult>;\n  stageResults: Record<string, ValidationResult>;\n  performance: {\n    totalTime: number;\n    stageTimings: Record<string, number>;\n  };\n}\n\n/**\n * Zod-based validation result (for createValidationHook compatibility)\n */\nexport interface ZodValidationResult<T = any> {\n  /** Whether the data is valid */\n  isValid: boolean;\n  /** Validation errors as string arrays (Zod format) */\n  errors: Record<string, string[]>;\n  /** Optional warnings by field name */\n  warnings?: Record<string, string>;\n  /** Parsed and validated data (if valid) */\n  data?: T;\n  /** Backward compatibility */\n  success?: boolean;\n  /** Raw Zod validation error */\n  rawError?: any; // ZodError type to avoid Zod dependency here\n}\n\n/**\n * Base validation configuration\n */\nexport interface BaseValidationConfig {\n  onValidationSuccess?: () => void;\n  onValidationError?: (errors: Record<string, string>) => void;\n  autoValidate?: boolean;\n}\n\n/**\n * Validation function types for hooks compatibility\n */\nexport type ValidateFormFunction<T = any> = (data: T) => ValidationResult<T>;\nexport type ValidateFieldFunction = (fieldName: string, value: any) => FieldValidationResult;\n\n/**\n * Simple validation result (for backward compatibility with utils)\n * Uses Record<string, string> format for errors instead of ValidationError[]\n */\nexport interface SimpleValidationResult {\n  isValid: boolean;\n  errors: Record<string, string>;\n}\n\n/**\n * Enhanced validation result with Record format\n * Combines both formats for maximum compatibility\n */\nexport interface ValidationResultRecord<T = any> extends ValidationResult<T> {\n  errorRecord?: Record<string, string>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/addressLookup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/async-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/chart-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getAgeGroup' is defined but never used.","line":8,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[586,589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[586,589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Chart Utilities\n * Consolidated chart mathematics and data transformation utilities\n */\n\nimport type { AgeGroupData, PopulationStats, TooltipData } from '@/types/charts';\n\nimport { calculateAge, getAgeGroup } from './dateUtils';\n\nexport interface PieSliceData {\n  label: string;\n  value: number;\n  percentage: number;\n  color: string;\n}\n\nexport interface PieSliceWithAngles extends PieSliceData {\n  startAngle: number;\n  endAngle: number;\n}\n\nexport interface ChartDataPoint {\n  label: string;\n  value: number;\n  color?: string;\n  percentage?: number;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Create SVG path for pie slices\n */\nexport function createPieSlicePath(startAngle: number, endAngle: number, radius: number): string {\n  const startAngleRad = ((startAngle - 90) * Math.PI) / 180;\n  const endAngleRad = ((endAngle - 90) * Math.PI) / 180;\n\n  const x1 = 50 + radius * Math.cos(startAngleRad);\n  const y1 = 50 + radius * Math.sin(startAngleRad);\n  const x2 = 50 + radius * Math.cos(endAngleRad);\n  const y2 = 50 + radius * Math.sin(endAngleRad);\n\n  const largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n\n  return ['M', 50, 50, 'L', x1, y1, 'A', radius, radius, 0, largeArcFlag, 1, x2, y2, 'Z'].join(' ');\n}\n\n/**\n * Calculate angles for pie chart slices\n */\nexport function calculatePieSliceAngles(data: PieSliceData[]): PieSliceWithAngles[] {\n  let currentAngle = 0;\n\n  return data.map(item => {\n    const angle = (item.percentage / 100) * 360;\n    const slice: PieSliceWithAngles = {\n      ...item,\n      startAngle: currentAngle,\n      endAngle: currentAngle + angle,\n    };\n    currentAngle += angle;\n    return slice;\n  });\n}\n\n/**\n * Calculate percentages from values\n */\nexport function calculatePercentages<T extends { value: number }>(\n  data: T[]\n): (T & { percentage: number })[] {\n  const total = data.reduce((sum, item) => sum + item.value, 0);\n\n  if (total === 0) {\n    return data.map(item => ({ ...item, percentage: 0 }));\n  }\n\n  return data.map(item => ({\n    ...item,\n    percentage: (item.value / total) * 100,\n  }));\n}\n\n/**\n * Transform data for chart display\n */\nexport function transformChartData(\n  data: Array<{ label: string; value: number }>,\n  colors: string[]\n): ChartDataPoint[] {\n  const dataWithPercentages = calculatePercentages(data);\n\n  return dataWithPercentages.map((item, index) => ({\n    label: item.label,\n    value: item.value,\n    percentage: item.percentage,\n    color: colors[index % colors.length],\n  }));\n}\n\n/**\n * Generate age group data for population pyramid\n */\nexport function generateAgeGroupData(\n  residents: Array<{ birthdate: string; sex: 'male' | 'female' }>\n): {\n  ageGroup: string;\n  male: number;\n  female: number;\n  total: number;\n}[] {\n  const ageGroups: Record<string, { male: number; female: number }> = {};\n\n  // Initialize age groups\n  const groups = [\n    '0-4',\n    '5-9',\n    '10-14',\n    '15-19',\n    '20-24',\n    '25-29',\n    '30-34',\n    '35-39',\n    '40-44',\n    '45-49',\n    '50-54',\n    '55-59',\n    '60-64',\n    '65-69',\n    '70-74',\n    '75-79',\n    '80+',\n  ];\n  groups.forEach(group => {\n    ageGroups[group] = { male: 0, female: 0 };\n  });\n\n  // Count residents by age group and sex\n  residents.forEach(resident => {\n    const age = calculateAge(resident.birthdate);\n    const ageGroup = getAgeGroupLocal(age);\n\n    if (ageGroups[ageGroup]) {\n      if (resident.sex === 'male') {\n        ageGroups[ageGroup].male++;\n      } else if (resident.sex === 'female') {\n        ageGroups[ageGroup].female++;\n      }\n    }\n  });\n\n  // Transform to chart format\n  return Object.entries(ageGroups).map(([ageGroup, counts]) => ({\n    ageGroup,\n    male: counts.male,\n    female: counts.female,\n    total: counts.male + counts.female,\n  }));\n}\n\n/**\n * Calculate dependency ratio\n */\nexport function calculateDependencyRatio(\n  ageGroupData: Array<{ ageGroup: string; total: number }>\n): {\n  total: number;\n  child: number;\n  elderly: number;\n} {\n  const dependents = ageGroupData.filter(\n    group =>\n      group.ageGroup.startsWith('0-') ||\n      group.ageGroup.startsWith('5-') ||\n      group.ageGroup.startsWith('10-') ||\n      group.ageGroup === '65-69' ||\n      group.ageGroup === '70-74' ||\n      group.ageGroup === '75-79' ||\n      group.ageGroup === '80+'\n  );\n\n  const workingAge = ageGroupData.filter(\n    group => !dependents.some(dep => dep.ageGroup === group.ageGroup)\n  );\n\n  const childDependents = dependents.filter(\n    group =>\n      group.ageGroup.startsWith('0-') ||\n      group.ageGroup.startsWith('5-') ||\n      group.ageGroup.startsWith('10-')\n  );\n\n  const elderlyDependents = dependents.filter(\n    group =>\n      group.ageGroup === '65-69' ||\n      group.ageGroup === '70-74' ||\n      group.ageGroup === '75-79' ||\n      group.ageGroup === '80+'\n  );\n\n  const totalWorking = workingAge.reduce((sum, group) => sum + group.total, 0);\n  const totalChild = childDependents.reduce((sum, group) => sum + group.total, 0);\n  const totalElderly = elderlyDependents.reduce((sum, group) => sum + group.total, 0);\n\n  if (totalWorking === 0) {\n    return { total: 0, child: 0, elderly: 0 };\n  }\n\n  return {\n    total: ((totalChild + totalElderly) / totalWorking) * 100,\n    child: (totalChild / totalWorking) * 100,\n    elderly: (totalElderly / totalWorking) * 100,\n  };\n}\n\n// calculateAge and getAgeGroup imported from date-utils above\n\nfunction getAgeGroupLocal(age: number): string {\n  if (age < 5) return '0-4';\n  if (age < 10) return '5-9';\n  if (age < 15) return '10-14';\n  if (age < 20) return '15-19';\n  if (age < 25) return '20-24';\n  if (age < 30) return '25-29';\n  if (age < 35) return '30-34';\n  if (age < 40) return '35-39';\n  if (age < 45) return '40-44';\n  if (age < 50) return '45-49';\n  if (age < 55) return '50-54';\n  if (age < 60) return '55-59';\n  if (age < 65) return '60-64';\n  if (age < 70) return '65-69';\n  if (age < 75) return '70-74';\n  if (age < 80) return '75-79';\n  return '80+';\n}\n\n/**\n * CONSOLIDATED POPULATION PYRAMID UTILITIES\n * Moved from lib/ui/population-pyramid.ts and services/statistics/population-pyramid.ts\n */\n\n/**\n * Filter out empty age groups (where both male and female are 0)\n */\nexport function filterEmptyAgeGroups(data: AgeGroupData[]): AgeGroupData[] {\n  return data.filter(group => group.male > 0 || group.female > 0);\n}\n\n/**\n * Check if there's any population data in the age groups\n */\nexport function hasPopulationData(data: AgeGroupData[]): boolean {\n  return data.some(group => group.male > 0 || group.female > 0);\n}\n\n/**\n * Calculate population statistics from age group data\n */\nexport function calculatePopulationStats(data: AgeGroupData[]): PopulationStats {\n  const totalMale = data.reduce((sum, group) => sum + group.male, 0);\n  const totalFemale = data.reduce((sum, group) => sum + group.female, 0);\n  const totalPopulation = totalMale + totalFemale;\n\n  return {\n    totalMale,\n    totalFemale,\n    totalPopulation,\n    malePercentage: totalPopulation > 0 ? (totalMale / totalPopulation) * 100 : 0,\n    femalePercentage: totalPopulation > 0 ? (totalFemale / totalPopulation) * 100 : 0,\n  };\n}\n\n/**\n * Calculate the maximum percentage for chart scaling\n */\nexport function calculateMaxPercentage(data: AgeGroupData[]): number {\n  const filteredData = filterEmptyAgeGroups(data);\n\n  if (filteredData.length === 0) return 0;\n\n  return Math.max(\n    ...filteredData.map(group => Math.max(group.malePercentage, group.femalePercentage))\n  );\n}\n\n/**\n * Generate tooltip data for a specific age group and side\n */\nexport function generateTooltipData(ageGroup: AgeGroupData, side?: 'male' | 'female'): TooltipData {\n  if (side === 'male') {\n    return {\n      label: `Male ${ageGroup.ageRange}`,\n      count: ageGroup.male,\n      percentage: ageGroup.malePercentage,\n      type: 'single',\n    };\n  } else if (side === 'female') {\n    return {\n      label: `Female ${ageGroup.ageRange}`,\n      count: ageGroup.female,\n      percentage: ageGroup.femalePercentage,\n      type: 'single',\n    };\n  } else {\n    // Comparison view\n    return {\n      label: `Age Group ${ageGroup.ageRange}`,\n      maleCount: ageGroup.male,\n      femaleCount: ageGroup.female,\n      malePercentage: ageGroup.malePercentage,\n      femalePercentage: ageGroup.femalePercentage,\n      total: ageGroup.male + ageGroup.female,\n      type: 'comparison',\n    };\n  }\n}\n\n/**\n * Comprehensive population pyramid statistics\n */\nexport function populationPyramidStats(data: AgeGroupData[]): PopulationStats & {\n  maxPercentage: number;\n  hasData: boolean;\n  dependencyRatio: {\n    total: number;\n    child: number;\n    elderly: number;\n  };\n} {\n  const basicStats = calculatePopulationStats(data);\n  const maxPercentage = calculateMaxPercentage(data);\n  const hasData = hasPopulationData(data);\n\n  // Calculate dependency ratio\n  const simplifiedData = data.map(group => ({\n    ageGroup: group.ageRange,\n    total: group.male + group.female,\n  }));\n  const dependencyRatio = calculateDependencyRatio(simplifiedData);\n\n  return {\n    ...basicStats,\n    maxPercentage,\n    hasData,\n    dependencyRatio,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/color-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/command-menu-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1356,1359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1356,1359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Command Menu Utilities - CONSOLIDATED\n * Pure utility functions for command menu operations\n * Database operations remain in services\n */\n\n/**\n * Command menu constants\n */\nexport const COMMAND_MENU_CONFIG = {\n  MAX_SEARCH_LENGTH: 100,\n  SEARCH_CACHE_TTL: 30000, // 30 seconds\n  MIN_QUERY_LENGTH: 1,\n  DEFAULT_LIMIT: 10,\n  MAX_RESULTS: 50,\n} as const;\n\n/**\n * Sanitize command menu search query\n */\nexport function sanitizeSearchQuery(query: string): string {\n  if (!query || typeof query !== 'string') {\n    return '';\n  }\n\n  return query.trim().slice(0, COMMAND_MENU_CONFIG.MAX_SEARCH_LENGTH);\n}\n\n/**\n * Validate search query\n */\nexport function isValidSearchQuery(query: string): boolean {\n  if (!query || typeof query !== 'string') {\n    return false;\n  }\n\n  const sanitized = sanitizeSearchQuery(query);\n  return sanitized.length >= COMMAND_MENU_CONFIG.MIN_QUERY_LENGTH;\n}\n\n/**\n * Generate cache key for search results\n */\nexport function generateCacheKey(query: string, limit: number): string {\n  const sanitized = sanitizeSearchQuery(query);\n  return `${sanitized}-${limit}`;\n}\n\n/**\n * Check if cache entry is valid\n */\nexport function isCacheValid(timestamp: number): boolean {\n  return Date.now() - timestamp < COMMAND_MENU_CONFIG.SEARCH_CACHE_TTL;\n}\n\n/**\n * Format search result for display\n */\nexport function formatSearchResult(\n  item: any,\n  type: 'resident' | 'household'\n): {\n  id: string;\n  title: string;\n  subtitle: string;\n  type: string;\n} {\n  if (type === 'resident') {\n    const name = [item.first_name, item.middle_name, item.last_name].filter(Boolean).join(' ');\n\n    return {\n      id: item.id,\n      title: name,\n      subtitle: item.household_code || 'No household',\n      type: 'resident',\n    };\n  }\n\n  if (type === 'household') {\n    const address = [item.house_number, item.street_name, item.barangay_name]\n      .filter(Boolean)\n      .join(', ');\n\n    return {\n      id: item.id,\n      title: `Household ${item.code}`,\n      subtitle: address || 'No address',\n      type: 'household',\n    };\n  }\n\n  return {\n    id: item.id,\n    title: 'Unknown',\n    subtitle: '',\n    type: 'unknown',\n  };\n}\n\n/**\n * Limit search results\n */\nexport function limitResults<T>(results: T[], limit: number): T[] {\n  const safeLimit = Math.min(limit, COMMAND_MENU_CONFIG.MAX_RESULTS);\n  return results.slice(0, safeLimit);\n}\n\n/**\n * Group search results by type\n */\nexport function groupResultsByType<T extends { type: string }>(results: T[]): Record<string, T[]> {\n  return results.reduce(\n    (groups, result) => {\n      const type = result.type;\n      if (!groups[type]) {\n        groups[type] = [];\n      }\n      groups[type].push(result);\n      return groups;\n    },\n    {} as Record<string, T[]>\n  );\n}\n\n/**\n * Sort search results by relevance\n */\nexport function sortResultsByRelevance<T extends { title: string }>(\n  results: T[],\n  query: string\n): T[] {\n  const lowerQuery = query.toLowerCase();\n\n  return results.sort((a, b) => {\n    const aTitle = a.title.toLowerCase();\n    const bTitle = b.title.toLowerCase();\n\n    // Exact matches first\n    if (aTitle === lowerQuery && bTitle !== lowerQuery) return -1;\n    if (bTitle === lowerQuery && aTitle !== lowerQuery) return 1;\n\n    // Starts with query\n    if (aTitle.startsWith(lowerQuery) && !bTitle.startsWith(lowerQuery)) return -1;\n    if (bTitle.startsWith(lowerQuery) && !aTitle.startsWith(lowerQuery)) return 1;\n\n    // Contains query\n    const aContains = aTitle.includes(lowerQuery);\n    const bContains = bTitle.includes(lowerQuery);\n    if (aContains && !bContains) return -1;\n    if (bContains && !aContains) return 1;\n\n    // Alphabetical order\n    return aTitle.localeCompare(bTitle);\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/csrf-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/css-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/data-transformers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/databaseUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1021,1024],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1021,1024],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Database Utilities\n * Consolidated database query and operation utilities\n */\n\n/**\n * Batch operations utility for large data operations\n */\nexport const performBatchOperation = async <T>(\n  items: T[],\n  batchSize: number,\n  operation: (batch: T[]) => Promise<void>\n): Promise<void> => {\n  for (let i = 0; i < items.length; i += batchSize) {\n    const batch = items.slice(i, i + batchSize);\n    await operation(batch);\n\n    // Small delay to prevent overwhelming the database\n    if (i + batchSize < items.length) {\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n  }\n};\n\n/**\n * Type guard for checking if data is fresh enough\n */\nexport const isDataFresh = (timestamp: string | Date, maxAgeMinutes: number): boolean => {\n  const dataTime = new Date(timestamp);\n  const cutoff = new Date();\n  cutoff.setMinutes(cutoff.getMinutes() - maxAgeMinutes);\n\n  return dataTime > cutoff;\n};\n\n/**\n * Build WHERE clause for database queries\n */\nexport function buildWhereClause(conditions: Record<string, any>): string {\n  const clauses = Object.entries(conditions)\n    .filter(([_, value]) => value !== undefined && value !== null && value !== '')\n    .map(([key, value]) => {\n      if (Array.isArray(value)) {\n        return `${key} IN (${value.map(v => `'${v}'`).join(', ')})`;\n      }\n      return `${key} = '${value}'`;\n    });\n\n  return clauses.length > 0 ? `WHERE ${clauses.join(' AND ')}` : '';\n}\n\n/**\n * Sanitize database query to prevent SQL injection\n */\nexport function sanitizeDatabaseQuery(input: string): string {\n  return input\n    .replace(/[^\\w\\s-_.]/g, '') // Remove special characters except safe ones\n    .replace(/\\s+/g, ' ') // Normalize whitespace\n    .trim()\n    .substring(0, 100); // Limit length\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/dateUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/errorUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FieldError' is defined but never used.","line":6,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":66},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[590,593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[590,593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1092,1095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1092,1095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1279,1282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1279,1282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1529,1532],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1529,1532],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":149,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3561,3564],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3561,3564],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":209,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":209,"endColumn":19,"suggestions":[{"fix":{"range":[5227,5263],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":217,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5395,5398],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5395,5398],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":222,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":222,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5560,5563],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5560,5563],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":259,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6397,6400],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6397,6400],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Error Handling Utilities - CONSOLIDATED COMPREHENSIVE VERSION\n * Merged from utils/error-utils.ts and lib/error-handling/error-utils.ts\n */\n\nimport type { AppError, ErrorLogContext, NetworkError, FieldError } from '@/types/errors';\nimport { ErrorSeverity, ErrorCode } from '@/types/errors';\nimport type { ValidationError } from '@/types/validation';\n\nimport { generateId } from './id-generators';\n\n/**\n * Create a standardized application error\n */\nexport function createAppError(\n  message: string,\n  options: {\n    code?: ErrorCode;\n    cause?: Error;\n    context?: Record<string, any>;\n    severity?: ErrorSeverity;\n  } = {}\n): AppError {\n  const error = new Error(message) as AppError;\n\n  error.code = options.code || ErrorCode.UNKNOWN_ERROR;\n  error.context = options.context || {};\n  error.timestamp = new Date();\n  error.severity = options.severity || ErrorSeverity.MEDIUM;\n\n  if (options.cause) {\n    error.cause = options.cause;\n    error.stack = options.cause.stack;\n  }\n\n  return error;\n}\n\n/**\n * Check if error is an application error\n */\nexport function isAppError(error: any): error is AppError {\n  return error instanceof Error && 'code' in error && 'severity' in error;\n}\n\n/**\n * Check if error is a network error\n */\nexport function isNetworkError(error: any): error is NetworkError {\n  return (\n    error instanceof Error &&\n    ('status' in error || 'response' in error || error.message.includes('fetch'))\n  );\n}\n\n/**\n * Check if error is a validation error\n */\nexport function isValidationError(error: any): error is ValidationError {\n  return error && typeof error === 'object' && 'field' in error && 'message' in error;\n}\n\n/**\n * Extract error message safely\n */\nexport function getErrorMessage(error: unknown): string {\n  if (typeof error === 'string') {\n    return error;\n  }\n\n  if (error instanceof Error) {\n    return error.message;\n  }\n\n  if (error && typeof error === 'object' && 'message' in error) {\n    return String(error.message);\n  }\n\n  return 'An unknown error occurred';\n}\n\n/**\n * Determine error severity\n */\nexport function getErrorSeverity(error: unknown): ErrorSeverity {\n  if (isAppError(error)) {\n    return error.severity || ErrorSeverity.LOW;\n  }\n\n  if (isNetworkError(error)) {\n    const status = ('status' in error ? error.status : 0) as number;\n    if (status >= 500) return ErrorSeverity.HIGH;\n    if (status >= 400) return ErrorSeverity.MEDIUM;\n    return ErrorSeverity.LOW;\n  }\n\n  if (isValidationError(error)) {\n    return ErrorSeverity.LOW;\n  }\n\n  return ErrorSeverity.MEDIUM;\n}\n\n/**\n * Classify error type\n */\nexport function classifyError(error: unknown): ErrorCode {\n  if (isNetworkError(error)) {\n    const status = 'status' in error ? error.status : 0;\n    switch (status) {\n      case 400:\n        return ErrorCode.BAD_REQUEST;\n      case 401:\n        return ErrorCode.UNAUTHORIZED;\n      case 403:\n        return ErrorCode.FORBIDDEN;\n      case 404:\n        return ErrorCode.NOT_FOUND;\n      case 429:\n        return ErrorCode.RATE_LIMITED;\n      case 500:\n        return ErrorCode.INTERNAL_SERVER_ERROR;\n      default:\n        return ErrorCode.NETWORK_ERROR;\n    }\n  }\n\n  if (isValidationError(error)) {\n    return ErrorCode.VALIDATION_ERROR;\n  }\n\n  if (error instanceof TypeError) {\n    return ErrorCode.TYPE_ERROR;\n  }\n\n  if (error instanceof ReferenceError) {\n    return ErrorCode.REFERENCE_ERROR;\n  }\n\n  return ErrorCode.UNKNOWN_ERROR;\n}\n\n/**\n * Create error log context\n */\nexport function createErrorLogContext(\n  operation: string,\n  userId?: string,\n  additionalContext: Record<string, any> = {}\n): ErrorLogContext {\n  return {\n    id: generateId(),\n    operation,\n    userId,\n    timestamp: new Date(),\n    userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : undefined,\n    environment:\n      process.env.NODE_ENV === 'production'\n        ? ('production' as const)\n        : process.env.VERCEL_ENV === 'staging'\n          ? ('staging' as const)\n          : ('development' as const),\n    ...additionalContext,\n  } as ErrorLogContext;\n}\n\n/**\n * Log error with context\n */\nexport function logError(error: unknown, context: Partial<ErrorLogContext> = {}): void {\n  const errorMessage = getErrorMessage(error);\n  const severity = getErrorSeverity(error);\n  const code = classifyError(error);\n\n  const logContext: ErrorLogContext = {\n    id: generateId(),\n    operation: context.operation || 'unknown',\n    userId: context.userId,\n    timestamp: new Date(),\n    userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : undefined,\n    environment:\n      process.env.NODE_ENV === 'production'\n        ? ('production' as const)\n        : process.env.VERCEL_ENV === 'staging'\n          ? ('staging' as const)\n          : ('development' as const),\n    ...context,\n  };\n\n  const logData = {\n    message: errorMessage,\n    code,\n    severity,\n    context: logContext,\n  };\n\n  // Log based on severity\n  switch (severity) {\n    case ErrorSeverity.CRITICAL:\n      console.error('CRITICAL ERROR:', logData);\n      break;\n    case ErrorSeverity.HIGH:\n      console.error('HIGH ERROR:', logData);\n      break;\n    case ErrorSeverity.MEDIUM:\n      console.warn('MEDIUM ERROR:', logData);\n      break;\n    case ErrorSeverity.LOW:\n      console.info('LOW ERROR:', logData);\n      break;\n  }\n}\n\n/**\n * Sanitize error for client consumption\n */\nexport function sanitizeError(error: unknown): Record<string, any> {\n  const message = getErrorMessage(error);\n  const code = classifyError(error);\n  const severity = getErrorSeverity(error);\n\n  const sanitized: Record<string, any> = {\n    message,\n    code,\n    severity,\n    timestamp: new Date().toISOString(),\n  };\n\n  if (error instanceof Error) {\n    sanitized.name = error.name;\n    // Only include stack trace in development\n    if (process.env.NODE_ENV === 'development') {\n      sanitized.stack = error.stack;\n    }\n  }\n\n  if (isAppError(error)) {\n    // Filter out sensitive context data\n    const safeContext = Object.fromEntries(\n      Object.entries(error.context || {}).filter(\n        ([key]) =>\n          !key.toLowerCase().includes('password') &&\n          !key.toLowerCase().includes('token') &&\n          !key.toLowerCase().includes('secret')\n      )\n    );\n    sanitized.context = safeContext;\n  }\n\n  return sanitized;\n}\n\n/**\n * Create a validation error\n */\nexport function createValidationError(\n  field: string,\n  message: string,\n  value?: any,\n  code?: string\n): ValidationError {\n  return {\n    field,\n    message,\n    value,\n    code: code || 'VALIDATION_FAILED',\n  };\n}\n\n/**\n * Create a network error\n */\nexport async function createNetworkError(\n  response: Response,\n  message?: string\n): Promise<NetworkError> {\n  const error = new Error(message || `Network error: ${response.status}`) as NetworkError;\n  error.status = response.status;\n  error.response = {\n    data: await response.text(),\n    headers: Object.fromEntries(response.headers.entries()),\n  };\n  return error;\n}\n\n/**\n * Format validation errors for client display\n */\nexport function formatValidationErrors(errors: ValidationError[]): Record<string, string> {\n  return errors.reduce(\n    (formatted, error) => {\n      formatted[error.field] = error.message;\n      return formatted;\n    },\n    {} as Record<string, string>\n  );\n}\n\n/**\n * Extract error message for client display (sanitized)\n */\nexport function extractErrorMessage(error: unknown): string {\n  const message = getErrorMessage(error);\n\n  // Don't expose sensitive technical details to client\n  if (message.toLowerCase().includes('internal server error')) {\n    return 'A server error occurred. Please try again later.';\n  }\n\n  if (message.toLowerCase().includes('database')) {\n    return 'A data processing error occurred. Please try again.';\n  }\n\n  return message;\n}\n\n/**\n * Sanitize error for client consumption (safe version)\n */\nexport function sanitizeErrorForClient(error: unknown): { message: string; code?: string } {\n  return {\n    message: extractErrorMessage(error),\n    code: classifyError(error),\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/file-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/geographic-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'digitsOnly' is assigned a value but never used.","line":94,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":94,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Geographic Utilities\n * Consolidated geographic data utilities aligned with database schema\n */\n\nimport type { CompleteAddress } from '@/types/addresses';\n\n// CompleteAddress interface moved to @/types/addresses - removed duplicate\n// AddressComponent was identical to CompleteAddress - using CompleteAddress type alias\nexport type AddressComponent = CompleteAddress;\n\n/**\n * Format complete address from components\n */\nexport function formatFullAddress(address: Partial<CompleteAddress>): string {\n  if (!address) return '';\n\n  const parts = [\n    address.barangay_name,\n    address.city_municipality_name,\n    address.province_name,\n    address.region_name,\n  ].filter(Boolean);\n\n  return parts.join(', ') || '';\n}\n\n/**\n * Format barangay display name\n */\nexport function formatBarangayName(name: string): string {\n  if (!name) return '';\n\n  // Add \"Barangay\" prefix if not already present\n  if (name.toLowerCase().startsWith('barangay ')) {\n    return name;\n  }\n\n  return `Barangay ${name}`;\n}\n\n/**\n * Format city/municipality display name\n */\nexport function formatCityName(name: string, type: string): string {\n  if (!name) return '';\n\n  const cityType = type?.toLowerCase();\n\n  if (cityType === 'city' && !name.toLowerCase().includes('city')) {\n    return `${name} City`;\n  }\n\n  if (cityType === 'municipality' && !name.toLowerCase().includes('municipality')) {\n    return `Municipality of ${name}`;\n  }\n\n  return name;\n}\n\n/**\n * Extract PSGC level from code length\n */\nexport function getPsgcLevel(\n  code: string\n): 'region' | 'province' | 'city' | 'barangay' | 'unknown' {\n  if (!code) return 'unknown';\n\n  const length = code.replace(/\\D/g, '').length;\n\n  switch (length) {\n    case 2:\n      return 'region';\n    case 4:\n      return 'province';\n    case 6:\n      return 'city';\n    case 9:\n      return 'barangay';\n    default:\n      return 'unknown';\n  }\n}\n\n/**\n * Validate PSGC code format\n */\nexport function isValidPsgcCode(\n  code: string,\n  level?: 'region' | 'province' | 'city' | 'barangay'\n): boolean {\n  if (!code) return false;\n\n  const digitsOnly = code.replace(/\\D/g, '');\n  const detectedLevel = getPsgcLevel(code);\n\n  if (level && detectedLevel !== level) {\n    return false;\n  }\n\n  return detectedLevel !== 'unknown';\n}\n\n/**\n * Format address for search display\n */\nexport function formatSearchAddress(address: Partial<CompleteAddress>): string {\n  if (!address) return '';\n\n  const parts = [];\n\n  if (address.barangay_name) {\n    parts.push(formatBarangayName(address.barangay_name));\n  }\n\n  if (address.city_municipality_name && address.city_municipality_type) {\n    parts.push(formatCityName(address.city_municipality_name, address.city_municipality_type));\n  }\n\n  if (address.province_name) {\n    parts.push(address.province_name);\n  }\n\n  return parts.join(', ') || '';\n}\n\n/**\n * Check if address is in Metro Manila\n */\nexport function isMetroManilaAddress(address: Partial<CompleteAddress>): boolean {\n  if (!address.region_code) return false;\n\n  // NCR (National Capital Region) code\n  return address.region_code === '13' || address.region_code === '130000000';\n}\n\n/**\n * Extract parent codes from PSGC code\n */\nexport function extractParentCodes(barangayCode: string): {\n  regionCode: string;\n  provinceCode: string;\n  cityCode: string;\n} {\n  if (!barangayCode || barangayCode.length < 9) {\n    return { regionCode: '', provinceCode: '', cityCode: '' };\n  }\n\n  const digits = barangayCode.replace(/\\D/g, '');\n\n  return {\n    regionCode: digits.substring(0, 2),\n    provinceCode: digits.substring(0, 4),\n    cityCode: digits.substring(0, 6),\n  };\n}\n\n/**\n * Normalize address search term\n */\nexport function normalizeAddressSearch(searchTerm: string): string {\n  if (!searchTerm) return '';\n\n  return searchTerm\n    .toLowerCase()\n    .replace(/barangay\\s+/g, '') // Remove \"barangay\" prefix for search\n    .replace(/city\\s*$/g, '') // Remove \"city\" suffix for search\n    .replace(/municipality\\s+of\\s+/g, '') // Remove \"municipality of\" prefix\n    .replace(/\\s+/g, ' ') // Normalize spaces\n    .trim();\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/id-generators.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/input-sanitizer.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":271,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7418,7421],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7418,7421],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":273,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":273,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7492,7495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7492,7495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":279,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":279,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7636,7639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7636,7639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":306,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":306,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8414,8417],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8414,8417],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":306,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":306,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8436,8439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8436,8439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":307,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":307,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8477,8480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8477,8480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Input Sanitization Utilities\n * Philippine government-grade input sanitization following BSP Circular 808 and NIST standards.\n */\n\nimport DOMPurify from 'isomorphic-dompurify';\n\n// Types moved to src/types/utilities.ts for consolidation\nimport type { SanitizationType, SanitizationOptions } from '@/types/utilities';\n\nconst DEFAULT_FIELD_TYPE_MAPPING: Readonly<Record<string, SanitizationType>> = {\n  first_name: 'name',\n  middle_name: 'name',\n  last_name: 'name',\n  extension_name: 'name',\n  mother_maiden_first: 'name',\n  mother_maiden_middle: 'name',\n  mother_maiden_last: 'name',\n  email: 'email',\n  mobile_number: 'mobile',\n  telephone_number: 'text',\n  philsys_card_number: 'philsys',\n  region_code: 'psgc',\n  province_code: 'psgc',\n  city_municipality_code: 'psgc',\n  barangay_code: 'psgc',\n  height: 'numeric',\n  weight: 'numeric',\n} as const;\n\n/**\n * Sanitize general input to prevent XSS and injection attacks\n */\nexport function sanitizeInput(input: string | null): string {\n  if (!input) return '';\n\n  // Remove potentially dangerous characters and scripts\n  const cleaned = input\n    .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n    .replace(/[<>]/g, '')\n    .replace(/javascript:/gi, '')\n    .replace(/on\\w+\\s*=/gi, '')\n    .replace(/data:/gi, '')\n    .replace(/vbscript:/gi, '')\n    .replace(/expression\\s*\\(/gi, '');\n\n  // Use DOMPurify for additional sanitization\n  return DOMPurify.sanitize(cleaned, {\n    ALLOWED_TAGS: [],\n    ALLOWED_ATTR: [],\n  }).trim();\n}\n\n/**\n * Sanitize name input for Philippine names (supports Filipino naming patterns)\n */\nexport function sanitizeNameInput(input: string | null): string {\n  if (!input) return '';\n\n  // Allow letters, spaces, hyphens, apostrophes, and periods for Filipino names\n  // Includes support for Spanish-influenced names and indigenous names\n  return input\n    .replace(/[^a-zA-ZÀ-ÿ\\s\\-'.ñÑ]/g, '') // Include Spanish characters (fixed regex)\n    .replace(/\\s+/g, ' ') // Normalize spaces\n    .trim()\n    .substring(0, 100); // Limit length per government standards\n}\n\n/**\n * Validate name input format\n */\nexport function validateNameInput(name: string): boolean {\n  // Philippine name validation pattern\n  // Supports: Juan, María José, Rizal y López, O'Connor, Dela Cruz Jr.\n  const nameRegex = /^[a-zA-ZÀ-ÿ\\s\\-'.ñÑ]{1,100}$/;\n  return nameRegex.test(name) && name.trim().length > 0;\n}\n\n/**\n * Sanitize PhilSys card number format\n */\nexport function sanitizePhilSysNumber(input: string | null): string {\n  if (!input) return '';\n\n  // Remove all non-digits and format properly\n  const digitsOnly = input.replace(/\\D/g, '');\n\n  // Validate length (PhilSys is 12 digits)\n  if (digitsOnly.length !== 12) return '';\n\n  // Format as XXXX-XXXX-XXXX\n  return `${digitsOnly.substring(0, 4)}-${digitsOnly.substring(4, 8)}-${digitsOnly.substring(8, 12)}`;\n}\n\n/**\n * Validate PhilSys card number format\n */\n// validatePhilSysFormat moved to sanitization-utils.ts - removed duplicate\n\n/**\n * Sanitize mobile number for Philippine format\n */\nexport function sanitizeMobileNumber(input: string | null): string {\n  if (!input) return '';\n\n  // Remove all non-digits\n  const digitsOnly = input.replace(/\\D/g, '');\n\n  // Handle different Philippine mobile number formats\n  if (digitsOnly.startsWith('63')) {\n    // +63 format\n    return `+${digitsOnly}`;\n  } else if (digitsOnly.startsWith('0')) {\n    // 0xxx format - convert to +63\n    return `+63${digitsOnly.substring(1)}`;\n  } else if (digitsOnly.length === 10) {\n    // xxx format - add +63\n    return `+63${digitsOnly}`;\n  }\n\n  return input.trim();\n}\n\n/**\n * Validate Philippine mobile number format\n */\nexport function validatePhilippineMobile(mobile: string): boolean {\n  // Philippine mobile number patterns\n  const mobileRegex = /^(\\+63|0)[89]\\d{9}$/;\n  return mobileRegex.test(mobile.replace(/\\s/g, ''));\n}\n\n/**\n * Sanitize email address\n */\nexport function sanitizeEmail(input: string | null): string {\n  if (!input) return '';\n\n  return input\n    .toLowerCase()\n    .replace(/[<>\"'&]/g, '') // Remove dangerous characters\n    .trim()\n    .substring(0, 254); // RFC 5321 limit\n}\n\n/**\n * Validate email format\n */\nexport function validateEmailFormat(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email) && email.length <= 254;\n}\n\n/**\n * Sanitize barangay code\n */\nexport function sanitizeBarangayCode(input: string | null): string {\n  if (!input) return '';\n\n  // Barangay codes are typically 9-10 digit numbers\n  const digitsOnly = input.replace(/\\D/g, '');\n  return digitsOnly.substring(0, 10);\n}\n\n/**\n * Validate PSGC (Philippine Standard Geographic Code)\n */\nexport function validatePSGC(code: string): boolean {\n  const psgcRegex = /^\\d{9,10}$/;\n  return psgcRegex.test(code);\n}\n\n/**\n * Generic sanitization function with configurable type-specific processing\n * Consolidates all sanitization logic into a single, flexible function\n *\n * @param input - Raw input string that may contain unsafe content\n * @param type - Sanitization type determining processing rules\n * @param options - Additional configuration for sanitization behavior\n * @returns Sanitized string safe for storage and display\n *\n * @example\n * ```typescript\n * // Basic text sanitization with XSS protection\n * const clean = sanitizeByType('<script>alert(\"xss\")</script>', 'text');\n *\n * // Name sanitization with Filipino character support\n * const name = sanitizeByType('José María', 'name');\n *\n * // Custom options for length limiting\n * const limited = sanitizeByType('Very long text...', 'text', { maxLength: 50 });\n * ```\n *\n * @since 2025.1.0\n * @security Philippine BSP Circular 808 compliant\n * @performance Early exit patterns for optimal performance\n */\nexport function sanitizeByType(\n  input: string | null,\n  type: SanitizationType,\n  options: SanitizationOptions = {}\n): string {\n  // Handle null/empty inputs - early exit for performance\n  if (!input) {\n    return '';\n  }\n\n  // No sanitization - pass through for maximum performance\n  if (type === 'none') {\n    return input;\n  }\n\n  // Early length check to avoid unnecessary processing\n  if (options.maxLength && input.length > options.maxLength * 2) {\n    input = input.substring(0, options.maxLength * 2);\n  }\n\n  let result: string;\n\n  // Apply type-specific sanitization\n  switch (type) {\n    case 'text':\n      result = sanitizeInput(input);\n      break;\n\n    case 'name':\n      result = sanitizeNameInput(input);\n      break;\n\n    case 'email':\n      result = sanitizeEmail(input);\n      break;\n\n    case 'mobile':\n      result = sanitizeMobileNumber(input);\n      break;\n\n    case 'philsys':\n      result = sanitizePhilSysNumber(input);\n      break;\n\n    case 'psgc':\n      result = sanitizeBarangayCode(input);\n      break;\n\n    case 'numeric':\n      result = input.replace(/[^\\d]/g, '');\n      break;\n\n    default:\n      result = sanitizeInput(input);\n  }\n\n  // Apply additional options\n  if (options.maxLength && result.length > options.maxLength) {\n    result = result.substring(0, options.maxLength);\n  }\n\n  if (options.customPattern && !options.customPattern.test(result)) {\n    result = options.replacement || '';\n  }\n\n  return result;\n}\n\n/**\n * Enhanced sanitization function for objects with field-specific rules\n * Provides intelligent sanitization based on field names and patterns\n */\nexport function sanitizeObjectByFieldTypes(\n  data: Record<string, any>,\n  fieldTypeMap?: Record<string, SanitizationType>\n): Record<string, any> {\n  // Early exit for empty objects\n  if (!data || Object.keys(data).length === 0) {\n    return {};\n  }\n\n  const sanitized: Record<string, any> = {};\n\n  // Use cached field types for performance\n  const fieldTypes = fieldTypeMap\n    ? { ...DEFAULT_FIELD_TYPE_MAPPING, ...fieldTypeMap }\n    : DEFAULT_FIELD_TYPE_MAPPING;\n\n  // Optimized iteration using for...in for better performance\n  for (const key in data) {\n    if (data.hasOwnProperty(key)) {\n      const value = data[key];\n      if (typeof value === 'string' && value.length > 0) {\n        const sanitizationType = fieldTypes[key] || 'text';\n        sanitized[key] = sanitizeByType(value, sanitizationType);\n      } else {\n        sanitized[key] = value;\n      }\n    }\n  }\n\n  return sanitized;\n}\n\n/**\n * Sanitize form data object\n * @deprecated Use sanitizeObjectByFieldTypes for better type safety\n */\nexport function sanitizeFormData(formData: Record<string, any>): Record<string, any> {\n  const sanitized: Record<string, any> = {};\n\n  Object.entries(formData).forEach(([key, value]) => {\n    if (typeof value === 'string') {\n      switch (key) {\n        case 'first_name':\n        case 'middle_name':\n        case 'last_name':\n        case 'extension_name':\n        case 'mother_maiden_first':\n        case 'mother_maiden_middle':\n        case 'mother_maiden_last':\n          sanitized[key] = sanitizeNameInput(value);\n          break;\n\n        case 'philsys_card_number':\n          sanitized[key] = sanitizePhilSysNumber(value);\n          break;\n\n        case 'mobile_number':\n        case 'telephone_number':\n          sanitized[key] = sanitizeMobileNumber(value);\n          break;\n\n        case 'email':\n          sanitized[key] = sanitizeEmail(value);\n          break;\n\n        case 'region_code':\n        case 'province_code':\n        case 'city_municipality_code':\n        case 'barangay_code':\n          sanitized[key] = sanitizeBarangayCode(value);\n          break;\n\n        case 'household_code':\n          // Household codes have format like 042114014-0000-0001-0001, preserve dashes\n          sanitized[key] = sanitizeInput(value);\n          break;\n\n        default:\n          sanitized[key] = sanitizeInput(value);\n      }\n    } else {\n      sanitized[key] = value;\n    }\n  });\n\n  return sanitized;\n}\n\n/**\n * Rate limiting utility for form submissions\n */\nconst submissionAttempts = new Map<string, { count: number; lastAttempt: number }>();\n\nexport function checkRateLimit(identifier: string, maxAttempts = 5, windowMs = 300000): boolean {\n  const now = Date.now();\n  const attempts = submissionAttempts.get(identifier);\n\n  if (!attempts || now - attempts.lastAttempt > windowMs) {\n    submissionAttempts.set(identifier, { count: 1, lastAttempt: now });\n    return true;\n  }\n\n  if (attempts.count >= maxAttempts) {\n    return false;\n  }\n\n  attempts.count++;\n  attempts.lastAttempt = now;\n  submissionAttempts.set(identifier, attempts);\n\n  return true;\n}\n\n/**\n * Clear rate limit for a specific identifier (development/admin use)\n */\nexport function clearRateLimit(identifier: string): void {\n  submissionAttempts.delete(identifier);\n}\n\n/**\n * Get current rate limit status for debugging\n */\nexport function getRateLimitStatus(identifier: string): {\n  hasAttempts: boolean;\n  count?: number;\n  lastAttempt?: Date;\n  remainingTime?: number;\n} {\n  const attempts = submissionAttempts.get(identifier);\n\n  if (!attempts) {\n    return { hasAttempts: false };\n  }\n\n  const now = Date.now();\n  const remainingTime = Math.max(0, 300000 - (now - attempts.lastAttempt));\n\n  return {\n    hasAttempts: true,\n    count: attempts.count,\n    lastAttempt: new Date(attempts.lastAttempt),\n    remainingTime,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/resident-form-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormProcessingStage' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":22},{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":22,"column":1,"nodeType":"ImportDeclaration","endLine":22,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hasRequiredFormFields' is defined but never used.","line":31,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2071,2074],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2071,2074],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4177,4180],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4177,4180],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4198,4201],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4198,4201],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":209,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6794,6797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6794,6797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":361,"column":10,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":361,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":370,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":370,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11715,11718],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11715,11718],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":400,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":400,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12586,12589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12586,12589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":400,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":400,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12600,12603],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12600,12603],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":415,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":415,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12941,12944],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12941,12944],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":415,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":415,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12962,12965],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12962,12965],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Resident Form Utility Functions\n * Philippine government standards and RA 10173 compliant form processing utilities.\n */\n\nimport {\n  REQUIRED_FIELDS,\n  FIELD_LABELS,\n  DEFAULT_VALUES,\n  VALIDATION_RULES,\n} from '@/constants/resident-form';\nimport { philippineCompliantLogger } from '@/lib/security/philippine-logging';\nimport { ResidentFormData } from '@/types/forms';\nimport type {\n  NameParts,\n  UnknownFormData,\n  FormProcessingStage,\n  FormProcessingOptions,\n  ProcessedFormResult,\n} from '@/types/utilities';\nimport type { SimpleValidationResult as ValidationResult } from '@/types/validation';\nimport { calculateAge } from '@/utils/dateUtils';\n\n// Types moved to src/types/utilities.ts for consolidation\nimport { sanitizeFormData, sanitizeNameInput, validateNameInput } from '@/utils/input-sanitizer';\n\nfunction isValidFormStructure(data: unknown): data is UnknownFormData {\n  return data !== null && typeof data === 'object' && !Array.isArray(data);\n}\n\nfunction hasRequiredFormFields(data: UnknownFormData): boolean {\n  return REQUIRED_FIELDS.every(field => field in data);\n}\n\nexport function validateRequiredFields(formData: unknown): ValidationResult {\n  if (!isValidFormStructure(formData)) {\n    return {\n      isValid: false,\n      errors: { _form: 'Invalid form data structure provided' },\n    };\n  }\n\n  const missingFields = REQUIRED_FIELDS.filter(field => {\n    const value = formData[field];\n    return !value || (typeof value === 'string' && value.trim() === '');\n  });\n\n  if (missingFields.length === 0) {\n    return { isValid: true, errors: {} };\n  }\n\n  const missingLabels = missingFields.map(field => FIELD_LABELS[field] || field);\n  return {\n    isValid: false,\n    errors: {\n      _form: `Please fill in required fields: ${missingLabels.join(', ')}`,\n    },\n  };\n}\n\nexport function transformFormData(formData: UnknownFormData): ResidentFormData {\n  if (!isValidFormStructure(formData)) {\n    throw new Error('Invalid form data structure provided for transformation');\n  }\n\n  const sanitizedData = sanitizeFormData(formData as Record<string, any>);\n\n  return {\n    id: sanitizedData.id || '',\n    first_name: sanitizedData.first_name || '',\n    middle_name: sanitizedData.middle_name || '',\n    last_name: sanitizedData.last_name || '',\n    extension_name: sanitizedData.extension_name || '',\n    birthdate: sanitizedData.birthdate || '',\n    sex: sanitizedData.sex as 'male' | 'female',\n    civil_status: sanitizedData.civil_status || DEFAULT_VALUES.CIVIL_STATUS,\n    citizenship: sanitizedData.citizenship || DEFAULT_VALUES.CITIZENSHIP,\n    education_attainment: sanitizedData.education_attainment || '',\n    is_graduate:\n      sanitizedData.is_graduate !== undefined\n        ? sanitizedData.is_graduate\n        : DEFAULT_VALUES.IS_GRADUATE,\n    occupation_code: sanitizedData.occupation_code || '',\n    employment_status: sanitizedData.employment_status || DEFAULT_VALUES.EMPLOYMENT_STATUS,\n    email: sanitizedData.email || '',\n    mobile_number: sanitizedData.mobile_number || '',\n    telephone_number: sanitizedData.telephone_number || '',\n    philsys_card_number: sanitizedData.philsys_card_number || '',\n    birth_place_code: sanitizedData.birth_place_code || '',\n    household_code: sanitizedData.household_code || '',\n    mother_maiden_first: sanitizedData.mother_maiden_first || '',\n    mother_maiden_middle: sanitizedData.mother_maiden_middle || '',\n    mother_maiden_last: sanitizedData.mother_maiden_last || '',\n    height: sanitizedData.height || null,\n    weight: sanitizedData.weight || null,\n    complexion: sanitizedData.complexion || '',\n    blood_type: sanitizedData.blood_type || '',\n    religion: sanitizedData.religion || DEFAULT_VALUES.RELIGION,\n    religion_others_specify: sanitizedData.religion_others_specify || '',\n    ethnicity: sanitizedData.ethnicity || '',\n    is_voter: sanitizedData.is_voter !== undefined ? sanitizedData.is_voter : null,\n    is_resident_voter:\n      sanitizedData.is_resident_voter !== undefined ? sanitizedData.is_resident_voter : null,\n    last_voted_date: sanitizedData.last_voted_date || '',\n    ...extractAdditionalFields(sanitizedData),\n  };\n}\n\nfunction extractAdditionalFields(formData: any): Record<string, any> {\n  const knownFields = new Set([\n    ...REQUIRED_FIELDS,\n    'middle_name',\n    'extension_name',\n    'civil_status',\n    'citizenship',\n    'education_attainment',\n    'is_graduate',\n    'occupation_code',\n    'employment_status',\n    'email',\n    'mobile_number',\n    'telephone_number',\n    'philsys_card_number',\n    'region_code',\n    'province_code',\n    'city_municipality_code',\n    'barangay_code',\n    'household_code',\n    'mother_maiden_first',\n    'mother_maiden_middle',\n    'mother_maiden_last',\n    'height',\n    'weight',\n    'complexion',\n    'blood_type',\n    'religion',\n    'religion_others_specify',\n    'ethnicity',\n    'is_voter',\n    'is_resident_voter',\n    'last_voted_date',\n  ]);\n\n  return Object.fromEntries(Object.entries(formData).filter(([key]) => !knownFields.has(key)));\n}\n\nexport function parseFullName(fullName: string, useSecureMode = true): NameParts {\n  if (!fullName?.trim()) {\n    return { first_name: '', middleName: '', last_name: '' };\n  }\n\n  try {\n    const processedName = useSecureMode ? sanitizeNameInput(fullName) : fullName.trim();\n\n    if (useSecureMode && !validateNameInput(processedName)) {\n      throw new Error('Invalid name format detected');\n    }\n\n    const nameParts = processedName.split(/\\s+/).filter(Boolean);\n\n    switch (nameParts.length) {\n      case 0:\n        return { first_name: '', middleName: '', last_name: '' };\n\n      case 1:\n        return {\n          first_name: nameParts[0],\n          middleName: '',\n          last_name: '',\n        };\n\n      case 2:\n        return {\n          first_name: nameParts[0],\n          middleName: '',\n          last_name: nameParts[1],\n        };\n\n      case 3:\n        return {\n          first_name: nameParts[0],\n          middleName: nameParts[1],\n          last_name: nameParts[2],\n        };\n\n      default:\n        return {\n          first_name: nameParts[0],\n          middleName: nameParts.slice(1, -1).join(' '),\n          last_name: nameParts[nameParts.length - 1],\n        };\n    }\n  } catch (error) {\n    philippineCompliantLogger.debug('Name parsing security validation failed', {\n      eventType: 'NAME_PARSING_VALIDATION_FAILED',\n      error: error instanceof Error ? error.message : 'Unknown parsing error',\n      useSecureMode,\n      complianceFramework: 'RA_10173_BSP_808',\n      timestamp: new Date().toISOString(),\n      complianceNote: 'Name parsing validation failed during form processing',\n    });\n    return { first_name: '', middleName: '', last_name: '' };\n  }\n}\n\n/**\n * Validate form data comprehensively\n */\nexport function validateFormData(formData: any): ValidationResult {\n  const errors: Record<string, string> = {};\n\n  // Check required fields\n  const requiredValidation = validateRequiredFields(formData);\n  if (!requiredValidation.isValid) {\n    Object.assign(errors, requiredValidation.errors);\n  }\n\n  // Validate email format if provided\n  if (formData.email && !VALIDATION_RULES.EMAIL_PATTERN.test(formData.email)) {\n    errors.email = 'Please enter a valid email address';\n  }\n\n  // Validate mobile number format if provided\n  if (formData.mobile_number && !VALIDATION_RULES.PHONE_PATTERN.test(formData.mobile_number)) {\n    errors.mobile_number = 'Please enter a valid Philippine mobile number (e.g., +639123456789)';\n  }\n\n  // Validate PhilSys card number format if provided\n  if (\n    formData.philsys_card_number &&\n    !VALIDATION_RULES.PHILSYS_PATTERN.test(formData.philsys_card_number)\n  ) {\n    errors.philsys_card_number = 'Please enter a valid PhilSys card number (XXXX-XXXX-XXXX)';\n  }\n\n  // Validate name fields\n  ['first_name', 'middle_name', 'last_name'].forEach(field => {\n    if (formData[field] && !VALIDATION_RULES.NAME_PATTERN.test(formData[field])) {\n      errors[field] = `${FIELD_LABELS[field]} contains invalid characters`;\n    }\n  });\n\n  // Validate age if birthdate provided\n  if (formData.birthdate) {\n    const age = calculateAge(formData.birthdate);\n    if (age < VALIDATION_RULES.MIN_AGE || age > VALIDATION_RULES.MAX_AGE) {\n      errors.birthdate = `Age must be between ${VALIDATION_RULES.MIN_AGE} and ${VALIDATION_RULES.MAX_AGE}`;\n    }\n  }\n\n  // Validate physical measurements\n  if (\n    formData.height &&\n    (formData.height < VALIDATION_RULES.MIN_HEIGHT || formData.height > VALIDATION_RULES.MAX_HEIGHT)\n  ) {\n    errors.height = `Height must be between ${VALIDATION_RULES.MIN_HEIGHT} and ${VALIDATION_RULES.MAX_HEIGHT} cm`;\n  }\n\n  if (\n    formData.weight &&\n    (formData.weight < VALIDATION_RULES.MIN_WEIGHT || formData.weight > VALIDATION_RULES.MAX_WEIGHT)\n  ) {\n    errors.weight = `Weight must be between ${VALIDATION_RULES.MIN_WEIGHT} and ${VALIDATION_RULES.MAX_WEIGHT} kg`;\n  }\n\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors,\n  };\n}\n\n/**\n * Calculate age from birthdate\n */\n// calculateAge moved to date-utils.ts - use that version instead\n// export function calculateAge... // REMOVED DUPLICATE\n\n/**\n * Generate secure form submission data with audit trail\n */\n// Import statements moved to top of file\n\n/**\n * Unified form processing function with configurable stages\n * Consolidates transformFormData and prepareFormSubmission functionality\n * @param formData - Form data from external sources (validated at runtime)\n * @param options - Processing configuration options\n * @returns Processed form result with optional audit information\n */\nexport function processFormData(\n  formData: UnknownFormData,\n  options: FormProcessingOptions = { stage: 'full' }\n): ProcessedFormResult {\n  const { stage = 'full', userId = '', sessionId = '', barangayCode = '' } = options;\n\n  // Stage 1: Basic transformation (always performed)\n  const transformedData = transformFormData(formData);\n\n  // Early return for basic transformation\n  if (stage === 'transform') {\n    return { transformedData };\n  }\n\n  // Stage 2: Security and audit info generation\n  if (stage === 'full' || stage === 'audit') {\n    const auditInfo = {\n      userId,\n      sessionId,\n      barangayCode,\n      timestamp: new Date().toISOString(),\n      fieldCount: Object.keys(formData).length,\n      hasPhilSys: !!formData.philsys_card_number,\n      hasVoterData: !!(formData.is_voter || formData.is_resident_voter),\n    };\n\n    return {\n      transformedData,\n      auditInfo,\n    };\n  }\n\n  return { transformedData };\n}\n\n/**\n * Legacy function for backward compatibility\n * @deprecated Use processFormData with stage: 'full' instead\n * @param formData - Form data from external sources (validated at runtime)\n * @param userId - User identifier for audit trail\n * @param sessionId - Session identifier for security tracking\n * @param barangayCode - Barangay code for geographic context\n * @returns Legacy format result with transformed data and audit info\n */\nexport function prepareFormSubmission(\n  formData: UnknownFormData,\n  userId: string,\n  sessionId: string,\n  barangayCode: string\n): {\n  transformedData: ResidentFormData;\n  auditInfo: {\n    userId: string;\n    sessionId: string;\n    barangayCode: string;\n    timestamp: string;\n    fieldCount: number;\n    hasPhilSys: boolean;\n    hasVoterData: boolean;\n  };\n} {\n  const result = processFormData(formData, {\n    stage: 'full',\n    userId,\n    sessionId,\n    barangayCode,\n  });\n\n  return {\n    transformedData: result.transformedData,\n    auditInfo: {\n      ...result.auditInfo!,\n      hasVoterData: !!(formData.is_voter || formData.is_resident_voter),\n    },\n  };\n}\n\n/**\n * Get field validation error message\n */\nexport function getFieldErrorMessage(field: string, value: any): string | null {\n  if (!value) return null;\n\n  switch (field) {\n    case 'email':\n      return VALIDATION_RULES.EMAIL_PATTERN.test(value) ? null : 'Invalid email format';\n\n    case 'mobile_number':\n    case 'telephone_number':\n      return VALIDATION_RULES.PHONE_PATTERN.test(value) ? null : 'Invalid phone number format';\n\n    case 'philsys_card_number':\n      return VALIDATION_RULES.PHILSYS_PATTERN.test(value)\n        ? null\n        : 'Invalid PhilSys card format (XXXX-XXXX-XXXX)';\n\n    case 'first_name':\n    case 'middle_name':\n    case 'last_name':\n    case 'extension_name':\n      return VALIDATION_RULES.NAME_PATTERN.test(value) ? null : 'Name contains invalid characters';\n\n    default:\n      return null;\n  }\n}\n\n/**\n * Check if form data has changed significantly (for preventing duplicate submissions)\n */\nexport function hasSignificantChanges(oldData: any, newData: any): boolean {\n  const significantFields = [\n    'first_name',\n    'last_name',\n    'birthdate',\n    'philsys_card_number',\n    'household_code',\n  ];\n\n  return significantFields.some(field => oldData[field] !== newData[field]);\n}\n\n/**\n * Generate form summary for audit purposes (non-PII)\n */\nexport function generateFormSummary(formData: any): Record<string, any> {\n  return {\n    hasPersonalInfo: !!(formData.first_name && formData.last_name),\n    hasContactInfo: !!(formData.email || formData.mobile_number),\n    hasPhilSysCard: !!formData.philsys_card_number,\n    hasVoterInfo: !!(formData.is_voter || formData.is_resident_voter),\n    hasHouseholdAssignment: !!formData.household_code,\n    educationLevel: formData.education_attainment || 'not_specified',\n    employmentStatus: formData.employment_status || 'not_specified',\n    civilStatus: formData.civil_status || 'not_specified',\n    citizenship: formData.citizenship || 'not_specified',\n    fieldCount: Object.keys(formData).length,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/sanitization-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":370,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":370,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9441,9444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9441,9444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":372,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":372,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9515,9518],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9515,9518],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":378,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":378,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9659,9662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9659,9662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":404,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":404,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10402,10405],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10402,10405],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":416,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":416,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10672,10675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10672,10675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":418,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":418,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10774,10777],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10774,10777],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":422,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":422,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10957,10960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10957,10960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Sanitization Utilities\n * CONSOLIDATED - Single source of truth for input sanitization\n * Philippine government-grade input sanitization following BSP Circular 808 and NIST standards\n * Database schema aligned - PhilSys format: 12 digits (VARCHAR(20))\n */\n\nimport DOMPurify from 'isomorphic-dompurify';\n\nimport type { SanitizationType, SanitizationOptions } from '@/types/utilities';\n\n/**\n * Default field type mapping for intelligent sanitization\n * Aligned with database schema constraints\n */\nconst DEFAULT_FIELD_TYPE_MAPPING: Readonly<Record<string, SanitizationType>> = {\n  first_name: 'name',\n  middle_name: 'name',\n  last_name: 'name',\n  extension_name: 'name',\n  mother_maiden_first: 'name',\n  mother_maiden_middle: 'name',\n  mother_maiden_last: 'name',\n  email: 'email',\n  mobile_number: 'mobile',\n  telephone_number: 'text',\n  philsys_card_number: 'philsys',\n  region_code: 'psgc',\n  province_code: 'psgc',\n  city_municipality_code: 'psgc',\n  barangay_code: 'psgc',\n  height: 'numeric',\n  weight: 'numeric',\n} as const;\n\n/**\n * Sanitize general input to prevent XSS and injection attacks\n * Consolidated from multiple implementations across lib and utils\n */\nexport function sanitizeInput(input: string | null, options: SanitizationOptions = {}): string {\n  if (!input) return '';\n\n  // Early length check to avoid unnecessary processing\n  if (options.maxLength && input.length > options.maxLength * 2) {\n    input = input.substring(0, options.maxLength * 2);\n  }\n\n  let result: string;\n\n  // Remove potentially dangerous characters and scripts\n  result = input\n    .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n    .replace(/[<>]/g, '')\n    .replace(/javascript:/gi, '')\n    .replace(/on\\w+\\s*=/gi, '')\n    .replace(/data:/gi, '')\n    .replace(/vbscript:/gi, '')\n    .replace(/expression\\s*\\(/gi, '');\n\n  // Apply options\n  if (options.normalizeUnicode !== false) {\n    result = result.normalize('NFC');\n  }\n\n  if (options.trim !== false) {\n    result = result.trim();\n  }\n\n  if (options.removeHtml !== false) {\n    result = result.replace(/<[^>]*>/g, '');\n  }\n\n  if (options.removeScripts !== false) {\n    result = result\n      .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n      .replace(/javascript:/gi, '')\n      .replace(/on\\w+\\s*=/gi, '');\n  }\n\n  if (options.allowedChars && options.allowedChars instanceof RegExp) {\n    result = result.replace(new RegExp(`[^${options.allowedChars.source}]`, 'g'), '');\n  }\n\n  if (options.maxLength && result.length > options.maxLength) {\n    result = result.substring(0, options.maxLength);\n  }\n\n  // Use DOMPurify for additional sanitization\n  return DOMPurify.sanitize(result, {\n    ALLOWED_TAGS: [],\n    ALLOWED_ATTR: [],\n  }).trim();\n}\n\n/**\n * Sanitize HTML content while allowing safe tags\n */\nexport function sanitizeHtml(html: string): string {\n  if (!html || typeof html !== 'string') {\n    return '';\n  }\n\n  // Remove dangerous patterns that could bypass DOMPurify\n  const dangerousPatterns = [\n    /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\n    /javascript:/gi,\n    /vbscript:/gi,\n    /on\\w+\\s*=/gi,\n    /data:/gi,\n    /expression\\s*\\(/gi,\n    /<iframe\\b[^>]*>/gi,\n    /<object\\b[^>]*>/gi,\n    /<embed\\b[^>]*>/gi,\n    /<link\\b[^>]*>/gi,\n    /<meta\\b[^>]*>/gi,\n  ];\n\n  let sanitized = html;\n  dangerousPatterns.forEach(pattern => {\n    sanitized = sanitized.replace(pattern, '');\n  });\n\n  return sanitized.trim();\n}\n\n/**\n * Sanitize name input for Philippine names\n * Supports Filipino naming patterns, Spanish influences, and indigenous names\n * Database constraint: VARCHAR(100)\n */\nexport function sanitizeName(name: string): string {\n  if (!name || typeof name !== 'string') {\n    return '';\n  }\n\n  return sanitizeInput(name, {\n    allowedChars: /[a-zA-ZÀ-ÿñÑ\\s\\-'.]/,\n    maxLength: 100,\n    normalizeUnicode: true,\n    trim: true,\n  });\n}\n\n/**\n * Validate name input format\n */\nexport function validateNameInput(name: string): boolean {\n  // Philippine name validation pattern\n  // Supports: Juan, María José, Rizal y López, O'Connor, Dela Cruz Jr.\n  const nameRegex = /^[a-zA-ZÀ-ÿñÑ\\s\\-'.]{1,100}$/;\n  return nameRegex.test(name) && name.trim().length > 0;\n}\n\n/**\n * Sanitize PhilSys card number format\n * CORRECT FORMAT: 12 digits formatted as XXXX-XXXX-XXXX\n * Database constraint: VARCHAR(20)\n */\nexport function sanitizePhilSysNumber(input: string | null): string {\n  if (!input || typeof input !== 'string') {\n    return '';\n  }\n\n  // Remove all non-digits and format properly\n  const digitsOnly = input.replace(/\\D/g, '');\n\n  // Validate length (PhilSys is 12 digits, not 16!)\n  if (digitsOnly.length !== 12) {\n    return '';\n  }\n\n  // Format as XXXX-XXXX-XXXX (14 characters with dashes)\n  return `${digitsOnly.substring(0, 4)}-${digitsOnly.substring(4, 8)}-${digitsOnly.substring(8, 12)}`;\n}\n\n/**\n * Validate PhilSys card number format\n * CORRECT: 12 digits in XXXX-XXXX-XXXX format\n */\nexport function validatePhilSysFormat(philsysNumber: string): boolean {\n  const philsysRegex = /^\\d{4}-\\d{4}-\\d{4}$/;\n  return philsysRegex.test(philsysNumber);\n}\n\n/**\n * Sanitize mobile number for Philippine format\n */\nexport function sanitizePhone(input: string | null): string {\n  if (!input || typeof input !== 'string') {\n    return '';\n  }\n\n  return sanitizeInput(input, {\n    allowedChars: /[0-9+\\-\\s()]/,\n    maxLength: 20,\n    normalizeUnicode: false,\n    removeHtml: true,\n  });\n}\n\n/**\n * Sanitize mobile number for Philippine format with proper formatting\n */\nexport function sanitizeMobileNumber(input: string | null): string {\n  if (!input) return '';\n\n  // Remove all non-digits\n  const digitsOnly = input.replace(/\\D/g, '');\n\n  // Handle different Philippine mobile number formats\n  if (digitsOnly.startsWith('63')) {\n    // +63 format\n    return `+${digitsOnly}`;\n  } else if (digitsOnly.startsWith('0')) {\n    // 0xxx format - convert to +63\n    return `+63${digitsOnly.substring(1)}`;\n  } else if (digitsOnly.length === 10) {\n    // xxx format - add +63\n    return `+63${digitsOnly}`;\n  }\n\n  return input.trim();\n}\n\n/**\n * Validate Philippine mobile number format\n */\nexport function validatePhilippineMobile(mobile: string): boolean {\n  // Philippine mobile number patterns\n  const mobileRegex = /^(\\+63|0)[89]\\d{9}$/;\n  return mobileRegex.test(mobile.replace(/\\s/g, ''));\n}\n\n/**\n * Sanitize email address\n */\nexport function sanitizeEmail(email: string | null): string {\n  if (!email || typeof email !== 'string') {\n    return '';\n  }\n\n  return sanitizeInput(email.toLowerCase(), {\n    allowedChars: /[a-zA-Z0-9@._-]/,\n    maxLength: 254, // RFC 5321 limit\n    normalizeUnicode: false,\n    removeHtml: true,\n  });\n}\n\n/**\n * Validate email format\n */\nexport function validateEmailFormat(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email) && email.length <= 254;\n}\n\n/**\n * Sanitize PSGC codes (barangay codes)\n * Barangay codes are typically 9-10 digit numbers\n */\nexport function sanitizeBarangayCode(input: string | null): string {\n  if (!input) return '';\n\n  // Barangay codes are typically 9-10 digit numbers\n  const digitsOnly = input.replace(/\\D/g, '');\n  return digitsOnly.substring(0, 10);\n}\n\n/**\n * Validate PSGC (Philippine Standard Geographic Code)\n */\nexport function validatePSGC(code: string): boolean {\n  const psgcRegex = /^\\d{9,10}$/;\n  return psgcRegex.test(code);\n}\n\n/**\n * Sanitize search query\n */\nexport function sanitizeSearchQuery(query: string): string {\n  if (!query || typeof query !== 'string') {\n    return '';\n  }\n\n  return sanitizeInput(query, {\n    allowedChars: /[a-zA-Z0-9À-ÿñÑ\\s\\-'.]/,\n    maxLength: 100,\n    normalizeUnicode: true,\n    trim: true,\n  });\n}\n\n/**\n * Generic sanitization function with configurable type-specific processing\n * CONSOLIDATED from multiple implementations\n */\nexport function sanitizeByType(\n  input: string | null,\n  type: SanitizationType,\n  options: SanitizationOptions = {}\n): string {\n  // Handle null/empty inputs - early exit for performance\n  if (!input) {\n    return '';\n  }\n\n  // No sanitization - pass through for maximum performance\n  if (type === 'none') {\n    return input;\n  }\n\n  // Early length check to avoid unnecessary processing\n  if (options.maxLength && input.length > options.maxLength * 2) {\n    input = input.substring(0, options.maxLength * 2);\n  }\n\n  let result: string;\n\n  // Apply type-specific sanitization\n  switch (type) {\n    case 'text':\n      result = sanitizeInput(input, options);\n      break;\n\n    case 'name':\n      result = sanitizeName(input);\n      break;\n\n    case 'email':\n      result = sanitizeEmail(input);\n      break;\n\n    case 'mobile':\n      result = sanitizeMobileNumber(input);\n      break;\n\n    case 'philsys':\n      result = sanitizePhilSysNumber(input);\n      break;\n\n    case 'psgc':\n      result = sanitizeBarangayCode(input);\n      break;\n\n    case 'numeric':\n      result = input.replace(/[^\\d]/g, '');\n      break;\n\n    default:\n      result = sanitizeInput(input, options);\n  }\n\n  // Apply additional options\n  if (options.maxLength && result.length > options.maxLength) {\n    result = result.substring(0, options.maxLength);\n  }\n\n  if (options.customPattern && !options.customPattern.test(result)) {\n    result = options.replacement || '';\n  }\n\n  return result;\n}\n\n/**\n * Enhanced sanitization function for objects with field-specific rules\n */\nexport function sanitizeObjectByFieldTypes(\n  data: Record<string, any>,\n  fieldTypeMap?: Record<string, SanitizationType>\n): Record<string, any> {\n  // Early exit for empty objects\n  if (!data || Object.keys(data).length === 0) {\n    return {};\n  }\n\n  const sanitized: Record<string, any> = {};\n\n  // Use cached field types for performance\n  const fieldTypes = fieldTypeMap\n    ? { ...DEFAULT_FIELD_TYPE_MAPPING, ...fieldTypeMap }\n    : DEFAULT_FIELD_TYPE_MAPPING;\n\n  // Optimized iteration using for...in for better performance\n  for (const key in data) {\n    if (data.hasOwnProperty(key)) {\n      const value = data[key];\n      if (typeof value === 'string' && value.length > 0) {\n        const sanitizationType = fieldTypes[key] || 'text';\n        sanitized[key] = sanitizeByType(value, sanitizationType);\n      } else {\n        sanitized[key] = value;\n      }\n    }\n  }\n\n  return sanitized;\n}\n\n/**\n * Deep sanitize object (recursively sanitize all string values)\n */\nexport function sanitizeObject<T extends Record<string, any>>(\n  obj: T,\n  options: SanitizationOptions = {}\n): T {\n  if (!obj || typeof obj !== 'object') {\n    return obj;\n  }\n\n  const sanitized = { ...obj };\n\n  for (const [key, value] of Object.entries(sanitized)) {\n    if (typeof value === 'string') {\n      (sanitized as any)[key] = sanitizeInput(value, options);\n    } else if (Array.isArray(value)) {\n      (sanitized as any)[key] = value.map(item =>\n        typeof item === 'string' ? sanitizeInput(item, options) : item\n      );\n    } else if (value && typeof value === 'object') {\n      (sanitized as any)[key] = sanitizeObject(value, options);\n    }\n  }\n\n  return sanitized;\n}\n\n/**\n * Rate limiting utility for form submissions\n */\nconst submissionAttempts = new Map<string, { count: number; lastAttempt: number }>();\n\nexport function checkRateLimit(identifier: string, maxAttempts = 5, windowMs = 300000): boolean {\n  const now = Date.now();\n  const attempts = submissionAttempts.get(identifier);\n\n  if (!attempts || now - attempts.lastAttempt > windowMs) {\n    submissionAttempts.set(identifier, { count: 1, lastAttempt: now });\n    return true;\n  }\n\n  if (attempts.count >= maxAttempts) {\n    return false;\n  }\n\n  attempts.count++;\n  attempts.lastAttempt = now;\n  submissionAttempts.set(identifier, attempts);\n\n  return true;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/search-utilities.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":8,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":29},{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useDebounce' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PaginatedSearchResult' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Common Search Utilities\n *\n * @description Shared utilities and patterns for search functionality across hooks.\n * Extracted from multiple search hooks to eliminate duplication.\n */\n\nimport { useState, useEffect, useMemo } from 'react';\n\nimport { useDebounce } from '@/hooks/utilities/useDebounce';\n\n// Re-export consolidated search utility types\nexport type {\n  BaseSearchConfig,\n  PaginatedSearchConfig,\n  PaginatedSearchResult,\n  SearchState,\n  PaginatedSearchState,\n  SearchFunction,\n  PaginatedSearchFunction\n} from '@/types/utilities';\n\n// Import for local usage\nimport type {\n  SearchState,\n  PaginatedSearchState,\n  BaseSearchConfig,\n  PaginatedSearchConfig,\n  PaginatedSearchResult,\n  SearchFunction,\n  PaginatedSearchFunction\n} from '@/types/utilities';\n\n/**\n * Create search state with default values\n */\nexport function createSearchState<T>(initialQuery = ''): SearchState<T> {\n  return {\n    query: initialQuery,\n    results: [],\n    isLoading: false,\n    error: null,\n  };\n}\n\n/**\n * Create paginated search state with default values\n */\nexport function createPaginatedSearchState<T>(\n  initialQuery = '',\n  initialPageSize = 20\n): PaginatedSearchState<T> {\n  return {\n    ...createSearchState<T>(initialQuery),\n    pagination: {\n      current: 1,\n      pageSize: initialPageSize,\n      total: 0,\n      hasMore: false,\n    },\n  };\n}\n\n/**\n * Generic search error handler\n */\nexport function createSearchErrorHandler(onError?: (error: Error) => void) {\n  return (error: unknown, fallbackMessage = 'Search failed') => {\n    const searchError = error instanceof Error ? error : new Error(fallbackMessage);\n    if (onError) {\n      onError(searchError);\n    }\n    return searchError;\n  };\n}\n\n/**\n * Create search execution function\n */\nexport function createSearchExecutor<T>(\n  searchFn: SearchFunction<T>,\n  setState: React.Dispatch<React.SetStateAction<SearchState<T>>>,\n  config: BaseSearchConfig\n) {\n  const { minQueryLength = 0, onError } = config;\n\n  return async (searchQuery: string) => {\n    if (searchQuery.length < minQueryLength) {\n      setState(prev => ({\n        ...prev,\n        results: [],\n        error: null,\n        isLoading: false,\n      }));\n      return;\n    }\n\n    setState(prev => ({\n      ...prev,\n      isLoading: true,\n      error: null,\n    }));\n\n    try {\n      const searchResults = await searchFn(searchQuery);\n      setState(prev => ({\n        ...prev,\n        results: searchResults,\n        isLoading: false,\n      }));\n    } catch (error) {\n      const searchError = error instanceof Error ? error : new Error('Search failed');\n      if (onError) {\n        onError(searchError);\n      }\n      setState(prev => ({\n        ...prev,\n        results: [],\n        error: searchError,\n        isLoading: false,\n      }));\n    }\n  };\n}\n\n/**\n * Create paginated search execution function\n */\nexport function createPaginatedSearchExecutor<T, F>(\n  searchFn: PaginatedSearchFunction<T, F>,\n  setState: React.Dispatch<React.SetStateAction<PaginatedSearchState<T>>>,\n  config: PaginatedSearchConfig\n) {\n  const { minQueryLength = 0, onError } = config;\n\n  return async (searchQuery: string, page = 1, filters?: F, resetResults = true) => {\n    if (searchQuery.length < minQueryLength && page === 1) {\n      setState(prev => ({\n        ...prev,\n        results: [],\n        pagination: { ...prev.pagination, total: 0, hasMore: false },\n        error: null,\n        isLoading: false,\n      }));\n      return;\n    }\n\n    setState(prev => ({\n      ...prev,\n      isLoading: true,\n      error: null,\n    }));\n\n    try {\n      const response = await searchFn({\n        query: searchQuery,\n        page,\n        pageSize: config.initialPageSize || 20,\n        filters,\n      });\n\n      setState(prev => ({\n        ...prev,\n        results: resetResults || page === 1 ? response.data : [...prev.results, ...response.data],\n        pagination: {\n          current: page,\n          pageSize: response.pageSize,\n          total: response.total,\n          hasMore: response.hasMore,\n        },\n        isLoading: false,\n      }));\n    } catch (error) {\n      const searchError = error instanceof Error ? error : new Error('Search failed');\n      if (onError) {\n        onError(searchError);\n      }\n      setState(prev => ({\n        ...prev,\n        results: resetResults || page === 1 ? [] : prev.results,\n        pagination:\n          resetResults || page === 1\n            ? { ...prev.pagination, total: 0, hasMore: false }\n            : prev.pagination,\n        error: searchError,\n        isLoading: false,\n      }));\n    }\n  };\n}\n\n/**\n * Create common search utilities\n */\nexport function createSearchUtilities<T>(\n  state: SearchState<T>,\n  setState: React.Dispatch<React.SetStateAction<SearchState<T>>>,\n  executeSearch: (query: string) => Promise<void>\n) {\n  const clearSearch = () => {\n    setState(prev => ({\n      ...prev,\n      query: '',\n      results: [],\n      error: null,\n    }));\n  };\n\n  const refresh = () => {\n    executeSearch(state.query);\n  };\n\n  const setQuery = (newQuery: string) => {\n    setState(prev => ({ ...prev, query: newQuery }));\n  };\n\n  return { clearSearch, refresh, setQuery };\n}\n\n/**\n * Create paginated search utilities\n */\nexport function createPaginatedSearchUtilities<T, F>(\n  state: PaginatedSearchState<T>,\n  setState: React.Dispatch<React.SetStateAction<PaginatedSearchState<T>>>,\n  executeSearch: (\n    query: string,\n    page?: number,\n    filters?: F,\n    resetResults?: boolean\n  ) => Promise<void>\n) {\n  const baseUtils = createSearchUtilities(\n    state,\n    setState as React.Dispatch<React.SetStateAction<SearchState<T>>>,\n    executeSearch\n  );\n\n  const loadMore = () => {\n    if (!state.isLoading && state.pagination.hasMore) {\n      executeSearch(state.query, state.pagination.current + 1, undefined, false);\n    }\n  };\n\n  const setPage = (page: number) => {\n    executeSearch(state.query, page, undefined, true);\n  };\n\n  const setPageSize = (pageSize: number) => {\n    setState(prev => ({\n      ...prev,\n      pagination: { ...prev.pagination, pageSize, current: 1 },\n    }));\n    executeSearch(state.query, 1, undefined, true);\n  };\n\n  return {\n    ...baseUtils,\n    loadMore,\n    setPage,\n    setPageSize,\n  };\n}\n\n/**\n * Memoized search results filter utility\n */\nexport function useSearchResultsFilter<T>(\n  results: T[],\n  filterFn: (item: T, query: string) => boolean,\n  query: string\n) {\n  return useMemo(() => {\n    if (!query.trim()) return results;\n    return results.filter(item => filterFn(item, query));\n  }, [results, filterFn, query]);\n}\n\n/**\n * Search highlighting utility\n */\nexport function highlightSearchText(\n  text: string,\n  query: string,\n  className = 'bg-yellow-200'\n): string {\n  if (!query.trim()) return text;\n\n  const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`, 'gi');\n  return text.replace(regex, `<span class=\"${className}\">$1</span>`);\n}\n\n/**\n * Common search result formatting utilities\n */\nexport const searchFormatters = {\n  /**\n   * Format name with proper spacing\n   */\n  formatName: (firstName?: string, middleName?: string, lastName?: string): string => {\n    return [firstName, middleName, lastName].filter(Boolean).join(' ') || 'No name';\n  },\n\n  /**\n   * Format address from parts\n   */\n  formatAddress: (parts: (string | undefined)[]): string => {\n    const filtered = parts.filter(Boolean);\n    return filtered.length > 0 ? filtered.join(', ') : 'No address';\n  },\n\n  /**\n   * Truncate text with ellipsis\n   */\n  truncateText: (text: string, maxLength = 50): string => {\n    if (text.length <= maxLength) return text;\n    return text.slice(0, maxLength) + '...';\n  },\n\n  /**\n   * Format phone number\n   */\n  formatPhoneNumber: (phone?: string): string => {\n    if (!phone) return 'No phone';\n    // Basic Philippine number formatting\n    const cleaned = phone.replace(/\\D/g, '');\n    if (cleaned.startsWith('63')) {\n      return `+${cleaned.slice(0, 2)} ${cleaned.slice(2, 5)} ${cleaned.slice(5, 8)} ${cleaned.slice(8)}`;\n    }\n    if (cleaned.startsWith('09')) {\n      return `${cleaned.slice(0, 4)} ${cleaned.slice(4, 7)} ${cleaned.slice(7)}`;\n    }\n    return phone;\n  },\n};\n\n/**\n * Search performance optimization hooks\n */\nexport function useSearchCache<T>(key: string, maxSize = 100) {\n  const [cache] = useState(() => new Map<string, { data: T[]; timestamp: number }>());\n  const maxAge = 5 * 60 * 1000; // 5 minutes\n\n  const getCachedResult = (query: string): T[] | null => {\n    const cacheKey = `${key}:${query}`;\n    const cached = cache.get(cacheKey);\n\n    if (cached && Date.now() - cached.timestamp < maxAge) {\n      return cached.data;\n    }\n\n    return null;\n  };\n\n  const setCachedResult = (query: string, data: T[]) => {\n    const cacheKey = `${key}:${query}`;\n\n    if (cache.size >= maxSize) {\n      const firstKey = cache.keys().next().value;\n      if (firstKey !== undefined) {\n        cache.delete(firstKey);\n      }\n    }\n\n    cache.set(cacheKey, { data, timestamp: Date.now() });\n  };\n\n  return { getCachedResult, setCachedResult };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/security-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2872,2875],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2872,2875],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":133,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":133,"endColumn":14,"suggestions":[{"fix":{"range":[3058,3100],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Security Utilities\n * Consolidated security, crypto, and PhilSys utilities aligned with database schema\n */\n\nimport crypto from 'crypto';\n\nimport bcrypt from 'bcryptjs';\n\nimport { validatePhilSysFormat } from './sanitization-utils';\n\nconst SALT_ROUNDS = 12;\n\n/**\n * Securely hash a PhilSys card number\n */\nexport async function hashPhilSysNumber(philsysNumber: string): Promise<string> {\n  if (!philsysNumber) {\n    throw new Error('PhilSys card number is required for hashing');\n  }\n\n  if (!validatePhilSysFormat(philsysNumber)) {\n    throw new Error('Invalid PhilSys card number format');\n  }\n\n  try {\n    return await bcrypt.hash(philsysNumber, SALT_ROUNDS);\n  } catch (error) {\n    console.error('Error hashing PhilSys number:', error);\n    throw new Error('Failed to securely hash PhilSys card number');\n  }\n}\n\n/**\n * Verify a PhilSys card number against its hash\n */\nexport async function verifyPhilSysNumber(\n  philsysNumber: string,\n  hashedNumber: string\n): Promise<boolean> {\n  if (!philsysNumber || !hashedNumber) {\n    return false;\n  }\n\n  try {\n    return await bcrypt.compare(philsysNumber, hashedNumber);\n  } catch (error) {\n    console.error('Error verifying PhilSys number:', error);\n    return false;\n  }\n}\n\n/**\n * Extract the last 4 digits of PhilSys number for lookup purposes\n */\nexport function extractPhilSysLast4(philsysNumber: string): string {\n  if (!philsysNumber) {\n    throw new Error('PhilSys card number is required');\n  }\n\n  const digitsOnly = philsysNumber.replace(/\\D/g, '');\n\n  if (digitsOnly.length < 4) {\n    throw new Error('PhilSys card number must contain at least 4 digits');\n  }\n\n  return digitsOnly.slice(-4);\n}\n\n/**\n * Mask PhilSys number for display (****-****-****-1234)\n */\nexport function maskPhilSysNumber(philsysNumber: string): string {\n  if (!philsysNumber) {\n    return '';\n  }\n\n  const last4 = extractPhilSysLast4(philsysNumber);\n  return `****-****-****-${last4}`;\n}\n\n/**\n * Validate PhilSys card number format (matches database schema constraints)\n */\n// validatePhilSysFormat imported from sanitization-utils above - removed duplicate\n\n/**\n * Generate secure random token\n */\nexport function generateSecureToken(length: number = 32): string {\n  return crypto.randomBytes(length).toString('hex');\n}\n\n/**\n * Hash data securely\n */\nexport function hashData(data: string): string {\n  return crypto.createHash('sha256').update(data).digest('hex');\n}\n\n/**\n * Secure comparison to prevent timing attacks\n */\nexport function secureCompare(a: string, b: string): boolean {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result |= a.charCodeAt(i) ^ b.charCodeAt(i);\n  }\n\n  return result === 0;\n}\n\n/**\n * Log security operation for audit trail\n */\nexport function logSecurityOperation(\n  operation: string,\n  userId: string,\n  context: Record<string, any> = {}\n): void {\n  const logEntry = {\n    operation,\n    userId,\n    timestamp: new Date().toISOString(),\n    context,\n  };\n\n  // In production, this would go to a secure audit log\n  console.log('[SECURITY AUDIT]', logEntry);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/stringUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/tests/file-utils.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3551,3554],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3551,3554],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3652,3655],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3652,3655],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3747,3750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3747,3750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5335,5338],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5335,5338],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5422,5425],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5422,5425],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5503,5506],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5503,5506],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @file Unit tests for file utility functions\n * @description Comprehensive test coverage for file-utils module\n */\n\nimport { describe, it, expect } from 'vitest';\n\nimport { formatFileSize, getFileExtension, isImageFile, exceedsMaxSize } from '../file-utils';\n\ndescribe('formatFileSize', () => {\n  it('should format zero bytes correctly', () => {\n    expect(formatFileSize(0)).toBe('0 Bytes');\n  });\n\n  it('should format bytes correctly', () => {\n    expect(formatFileSize(512)).toBe('512 Bytes');\n    expect(formatFileSize(1023)).toBe('1023 Bytes');\n  });\n\n  it('should format kilobytes correctly', () => {\n    expect(formatFileSize(1024)).toBe('1 KB');\n    expect(formatFileSize(1536)).toBe('1.5 KB');\n    expect(formatFileSize(2048)).toBe('2 KB');\n  });\n\n  it('should format megabytes correctly', () => {\n    expect(formatFileSize(1048576)).toBe('1 MB');\n    expect(formatFileSize(1572864)).toBe('1.5 MB');\n    expect(formatFileSize(5242880)).toBe('5 MB');\n  });\n\n  it('should format gigabytes correctly', () => {\n    expect(formatFileSize(1073741824)).toBe('1 GB');\n    expect(formatFileSize(2147483648)).toBe('2 GB');\n  });\n\n  it('should format terabytes correctly', () => {\n    expect(formatFileSize(1099511627776)).toBe('1 TB');\n  });\n\n  it('should handle very large files without overflow', () => {\n    expect(formatFileSize(Number.MAX_SAFE_INTEGER)).toMatch(/TB$/);\n  });\n\n  it('should throw error for negative values', () => {\n    expect(() => formatFileSize(-1)).toThrow('File size must be a non-negative finite number');\n  });\n\n  it('should throw error for non-finite values', () => {\n    expect(() => formatFileSize(Infinity)).toThrow(\n      'File size must be a non-negative finite number'\n    );\n    expect(() => formatFileSize(NaN)).toThrow('File size must be a non-negative finite number');\n  });\n\n  it('should round to 2 decimal places', () => {\n    expect(formatFileSize(1536.123)).toBe('1.5 KB');\n    expect(formatFileSize(1638.4)).toBe('1.6 KB');\n  });\n});\n\ndescribe('getFileExtension', () => {\n  it('should extract common file extensions', () => {\n    expect(getFileExtension('document.pdf')).toBe('pdf');\n    expect(getFileExtension('image.jpg')).toBe('jpg');\n    expect(getFileExtension('archive.zip')).toBe('zip');\n    expect(getFileExtension('script.js')).toBe('js');\n  });\n\n  it('should handle uppercase extensions by converting to lowercase', () => {\n    expect(getFileExtension('Document.PDF')).toBe('pdf');\n    expect(getFileExtension('Image.JPEG')).toBe('jpeg');\n    expect(getFileExtension('Archive.TAR.GZ')).toBe('gz');\n  });\n\n  it('should handle files with multiple dots', () => {\n    expect(getFileExtension('archive.tar.gz')).toBe('gz');\n    expect(getFileExtension('backup.2023.12.01.sql')).toBe('sql');\n    expect(getFileExtension('config.local.json')).toBe('json');\n  });\n\n  it('should return empty string for files without extensions', () => {\n    expect(getFileExtension('README')).toBe('');\n    expect(getFileExtension('Dockerfile')).toBe('');\n    expect(getFileExtension('makefile')).toBe('');\n  });\n\n  it('should handle hidden files (starting with dot)', () => {\n    expect(getFileExtension('.gitignore')).toBe('');\n    expect(getFileExtension('.env')).toBe('');\n    expect(getFileExtension('.htaccess')).toBe('');\n  });\n\n  it('should handle hidden files with extensions', () => {\n    expect(getFileExtension('.config.json')).toBe('json');\n    expect(getFileExtension('.eslintrc.js')).toBe('js');\n  });\n\n  it('should throw error for non-string input', () => {\n    expect(() => getFileExtension(null as any)).toThrow('Filename must be a non-empty string');\n    expect(() => getFileExtension(undefined as any)).toThrow('Filename must be a non-empty string');\n    expect(() => getFileExtension(123 as any)).toThrow('Filename must be a non-empty string');\n  });\n\n  it('should throw error for empty string', () => {\n    expect(() => getFileExtension('')).toThrow('Filename must be a non-empty string');\n  });\n\n  it('should handle edge cases with dots', () => {\n    expect(getFileExtension('.')).toBe('');\n    expect(getFileExtension('..')).toBe('');\n    expect(getFileExtension('...')).toBe('');\n  });\n});\n\ndescribe('isImageFile', () => {\n  it('should return true for image MIME types', () => {\n    expect(isImageFile('image/jpeg')).toBe(true);\n    expect(isImageFile('image/jpg')).toBe(true);\n    expect(isImageFile('image/png')).toBe(true);\n    expect(isImageFile('image/gif')).toBe(true);\n    expect(isImageFile('image/webp')).toBe(true);\n    expect(isImageFile('image/svg+xml')).toBe(true);\n    expect(isImageFile('image/bmp')).toBe(true);\n    expect(isImageFile('image/tiff')).toBe(true);\n  });\n\n  it('should return false for non-image MIME types', () => {\n    expect(isImageFile('application/pdf')).toBe(false);\n    expect(isImageFile('text/plain')).toBe(false);\n    expect(isImageFile('application/json')).toBe(false);\n    expect(isImageFile('video/mp4')).toBe(false);\n    expect(isImageFile('audio/mpeg')).toBe(false);\n    expect(isImageFile('application/octet-stream')).toBe(false);\n  });\n\n  it('should handle case sensitivity correctly', () => {\n    expect(isImageFile('IMAGE/JPEG')).toBe(false); // MIME types are case-sensitive\n    expect(isImageFile('Image/jpeg')).toBe(false);\n  });\n\n  it('should throw error for non-string input', () => {\n    expect(() => isImageFile(null as any)).toThrow('MIME type must be a string');\n    expect(() => isImageFile(undefined as any)).toThrow('MIME type must be a string');\n    expect(() => isImageFile(123 as any)).toThrow('MIME type must be a string');\n  });\n\n  it('should handle empty strings', () => {\n    expect(isImageFile('')).toBe(false);\n  });\n\n  it('should handle malformed MIME types', () => {\n    expect(isImageFile('image')).toBe(true); // Still starts with 'image/'\n    expect(isImageFile('image/')).toBe(true);\n    expect(isImageFile('notimage/jpeg')).toBe(false);\n  });\n});\n\ndescribe('exceedsMaxSize', () => {\n  it('should return false when file size is within limit', () => {\n    expect(exceedsMaxSize(1048576, 1)).toBe(false); // 1MB = 1MB limit\n    expect(exceedsMaxSize(524288, 1)).toBe(false); // 0.5MB < 1MB limit\n    expect(exceedsMaxSize(0, 5)).toBe(false); // 0 bytes < 5MB limit\n  });\n\n  it('should return true when file size exceeds limit', () => {\n    expect(exceedsMaxSize(2097152, 1)).toBe(true); // 2MB > 1MB limit\n    expect(exceedsMaxSize(1048577, 1)).toBe(true); // 1MB + 1 byte > 1MB limit\n    expect(exceedsMaxSize(10485760, 5)).toBe(true); // 10MB > 5MB limit\n  });\n\n  it('should handle edge cases at exact limits', () => {\n    expect(exceedsMaxSize(1048576, 1)).toBe(false); // Exactly 1MB\n    expect(exceedsMaxSize(5242880, 5)).toBe(false); // Exactly 5MB\n  });\n\n  it('should handle zero limits', () => {\n    expect(exceedsMaxSize(0, 0)).toBe(false); // 0 bytes = 0MB limit\n    expect(exceedsMaxSize(1, 0)).toBe(true); // Any size > 0MB limit\n  });\n\n  it('should handle fractional MB limits', () => {\n    expect(exceedsMaxSize(524288, 0.5)).toBe(false); // 0.5MB = 0.5MB limit\n    expect(exceedsMaxSize(524289, 0.5)).toBe(true); // 0.5MB + 1 byte > 0.5MB limit\n  });\n\n  it('should throw error for negative file size', () => {\n    expect(() => exceedsMaxSize(-1, 1)).toThrow('File size must be a non-negative finite number');\n  });\n\n  it('should throw error for negative max size', () => {\n    expect(() => exceedsMaxSize(1000, -1)).toThrow(\n      'Maximum size must be a non-negative finite number'\n    );\n  });\n\n  it('should throw error for non-finite values', () => {\n    expect(() => exceedsMaxSize(Infinity, 1)).toThrow(\n      'File size must be a non-negative finite number'\n    );\n    expect(() => exceedsMaxSize(NaN, 1)).toThrow('File size must be a non-negative finite number');\n    expect(() => exceedsMaxSize(1000, Infinity)).toThrow(\n      'Maximum size must be a non-negative finite number'\n    );\n    expect(() => exceedsMaxSize(1000, NaN)).toThrow(\n      'Maximum size must be a non-negative finite number'\n    );\n  });\n\n  it('should handle large file sizes accurately', () => {\n    // Test with GB-sized files\n    const oneGB = 1024 * 1024 * 1024;\n    expect(exceedsMaxSize(oneGB, 1024)).toBe(false); // 1GB < 1024MB\n    expect(exceedsMaxSize(oneGB, 1023)).toBe(true); // 1GB > 1023MB\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/validation-utilities.ts","messages":[{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":16,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":161,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3876,3879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3876,3879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4387,4390],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4387,4390],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4773,4776],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4773,4776],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":233,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5528,5531],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5528,5531],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":266,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6458,6461],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6458,6461],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":269,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6570,6573],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6570,6573],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":282,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":282,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6915,6918],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6915,6918],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":301,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":301,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7435,7438],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7435,7438],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":324,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":324,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8177,8180],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8177,8180],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":339,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":339,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8585,8588],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8585,8588],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":388,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":388,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9736,9739],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9736,9739],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":393,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":393,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9875,9878],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9875,9878],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":400,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":400,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":414,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":414,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10397,10400],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10397,10400],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":416,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":416,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10485,10488],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10485,10488],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":421,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":421,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Common Validation Utilities\n *\n * @description Shared utilities and patterns for validation functionality across hooks.\n * Extracted from multiple validation hooks to eliminate duplication.\n */\n\nimport { useState, useCallback } from 'react';\n\nimport {\n  ValidationResult,\n  FieldValidationResult,\n  BaseValidationConfig,\n  ValidateFormFunction,\n  ValidateFieldFunction,\n} from '@/lib/validation/types';\n\n// Re-export types for easier access\nexport type {\n  ValidationResult,\n  FieldValidationResult,\n  BaseValidationConfig,\n  ValidateFormFunction,\n  ValidateFieldFunction,\n};\nimport { isValidEmail, isValidPhilippineMobile } from '@/lib/validation/utilities';\nimport type { UtilityValidationState as ValidationState } from '@/types/utilities';\n\nimport { toTitleCase } from './stringUtils';\n\n// All types are now imported from the centralized validation types\n// This eliminates duplication and ensures consistency\n\n// ValidationState moved to src/types/utilities.ts as UtilityValidationState\n\n/**\n * Create initial validation state\n */\nexport function createValidationState(): ValidationState {\n  return {\n    errors: {},\n    isValid: true,\n    hasValidated: false,\n  };\n}\n\n/**\n * Validation state management hook\n */\nexport function useValidationState(config: BaseValidationConfig = {}) {\n  const [state, setState] = useState<ValidationState>(createValidationState);\n\n  /**\n   * Set validation errors\n   */\n  const setErrors = useCallback(\n    (errors: Record<string, string>) => {\n      const isValid = Object.keys(errors).length === 0;\n\n      setState({\n        errors,\n        isValid,\n        hasValidated: true,\n      });\n\n      // Trigger callbacks\n      if (isValid && config.onValidationSuccess) {\n        config.onValidationSuccess();\n      } else if (!isValid && config.onValidationError) {\n        config.onValidationError(errors);\n      }\n    },\n    [config]\n  );\n\n  /**\n   * Clear all errors\n   */\n  const clearErrors = useCallback(() => {\n    setState(createValidationState());\n  }, []);\n\n  /**\n   * Set error for specific field\n   */\n  const setFieldError = useCallback((field: string, error: string) => {\n    setState(prev => ({\n      ...prev,\n      errors: { ...prev.errors, [field]: error },\n      isValid: false,\n      hasValidated: true,\n    }));\n  }, []);\n\n  /**\n   * Clear error for specific field\n   */\n  const clearFieldError = useCallback((field: string) => {\n    setState(prev => {\n      const newErrors = { ...prev.errors };\n      delete newErrors[field];\n      const isValid = Object.keys(newErrors).length === 0;\n\n      return {\n        errors: newErrors,\n        isValid,\n        hasValidated: prev.hasValidated,\n      };\n    });\n  }, []);\n\n  /**\n   * Get error for specific field\n   */\n  const getFieldError = useCallback(\n    (field: string): string | undefined => {\n      return state.errors[field];\n    },\n    [state.errors]\n  );\n\n  /**\n   * Check if field has error\n   */\n  const hasFieldError = useCallback(\n    (field: string): boolean => {\n      return Boolean(state.errors[field]);\n    },\n    [state.errors]\n  );\n\n  return {\n    ...state,\n    setErrors,\n    clearErrors,\n    setFieldError,\n    clearFieldError,\n    getFieldError,\n    hasFieldError,\n  };\n}\n\n/**\n * Create validation executor for forms\n */\nexport function createFormValidationExecutor<T>(\n  validateFn: ValidateFormFunction<T>,\n  setErrors: (errors: Record<string, string>) => void\n) {\n  return (formData: T): ValidationResult => {\n    const result = validateFn(formData);\n\n    // Normalize result format\n    const normalizedResult: ValidationResult = {\n      isValid: result.isValid || result.success === true,\n      errors: result.errors || {},\n    };\n\n    // Convert ValidationError[] to Record<string, string> if needed\n    const errorsForState = Array.isArray(normalizedResult.errors)\n      ? normalizedResult.errors.reduce((acc: Record<string, string>, err: any) => {\n          acc[err.field || err.path || 'general'] = err.message || err.error || String(err);\n          return acc;\n        }, {})\n      : normalizedResult.errors;\n\n    setErrors(errorsForState);\n\n    return normalizedResult;\n  };\n}\n\n/**\n * Create field validation executor\n */\nexport function createFieldValidationExecutor(\n  validateFn: ValidateFieldFunction,\n  setFieldError: (field: string, error: string) => void,\n  clearFieldError: (field: string) => void\n) {\n  return (fieldName: string, value: any): FieldValidationResult => {\n    const result = validateFn(fieldName, value);\n\n    if (result.isValid) {\n      clearFieldError(fieldName);\n    } else if (result.error) {\n      setFieldError(fieldName, result.error);\n    }\n\n    return result;\n  };\n}\n\n/**\n * Common validation utilities\n */\nexport const validationUtils = {\n  /**\n   * Check if value is empty\n   */\n  isEmpty: (value: any): boolean => {\n    return value === null || value === undefined || value === '';\n  },\n\n  /**\n   * Check if string is valid email (uses centralized string utility)\n   */\n  isValidEmail,\n\n  /**\n   * Check if string is valid Philippine mobile number (uses centralized string utility)\n   */\n  isValidPhilippineMobile,\n\n  /**\n   * Check if string contains only letters and common name characters\n   */\n  isValidName: (name: string): boolean => {\n    return /^[a-zA-Z\\s\\-'\\.]*$/.test(name);\n  },\n\n  /**\n   * Check if number is within range\n   */\n  isInRange: (value: number, min: number, max: number): boolean => {\n    return value >= min && value <= max;\n  },\n\n  /**\n   * Validate required fields\n   */\n  validateRequiredFields: (\n    data: Record<string, any>,\n    requiredFields: string[]\n  ): Record<string, string> => {\n    const errors: Record<string, string> = {};\n\n    requiredFields.forEach(field => {\n      if (validationUtils.isEmpty(data[field])) {\n        errors[field] = `${field.replace(/([A-Z])/g, ' $1').toLowerCase()} is required`;\n      }\n    });\n\n    return errors;\n  },\n\n  /**\n   * Merge validation errors from multiple sources\n   */\n  mergeValidationErrors: (...errorSets: Record<string, string>[]): Record<string, string> => {\n    return errorSets.reduce((merged, errors) => ({ ...merged, ...errors }), {});\n  },\n\n  /**\n   * Format field name for display (uses centralized string utility)\n   */\n  formatFieldName: (fieldName: string): string => {\n    const formatted = fieldName.replace(/([A-Z])/g, ' $1').trim();\n    return toTitleCase(formatted);\n  },\n\n  /**\n   * Create field validator with custom message\n   */\n  createFieldValidator: (\n    predicate: (value: any) => boolean,\n    errorMessage: string\n  ): ValidateFieldFunction => {\n    return (fieldName: string, value: any): FieldValidationResult => {\n      const isValid = predicate(value);\n      return {\n        isValid,\n        error: isValid ? undefined : errorMessage,\n      };\n    };\n  },\n\n  /**\n   * Create required field validator\n   */\n  createRequiredValidator: (customMessage?: string): ValidateFieldFunction => {\n    return (fieldName: string, value: any): FieldValidationResult => {\n      const isValid = !validationUtils.isEmpty(value);\n      const fieldDisplayName = validationUtils.formatFieldName(fieldName);\n\n      return {\n        isValid,\n        error: isValid ? undefined : customMessage || `${fieldDisplayName} is required`,\n      };\n    };\n  },\n\n  /**\n   * Create length validator\n   */\n  createLengthValidator: (\n    minLength?: number,\n    maxLength?: number,\n    customMessage?: string\n  ): ValidateFieldFunction => {\n    return (fieldName: string, value: any): FieldValidationResult => {\n      const stringValue = String(value || '');\n      const length = stringValue.length;\n\n      let isValid = true;\n      let error: string | undefined;\n\n      if (minLength !== undefined && length < minLength) {\n        isValid = false;\n        error = customMessage || `Minimum length is ${minLength} characters`;\n      } else if (maxLength !== undefined && length > maxLength) {\n        isValid = false;\n        error = customMessage || `Maximum length is ${maxLength} characters`;\n      }\n\n      return { isValid, error };\n    };\n  },\n\n  /**\n   * Create regex validator\n   */\n  createRegexValidator: (pattern: RegExp, errorMessage: string): ValidateFieldFunction => {\n    return (fieldName: string, value: any): FieldValidationResult => {\n      const stringValue = String(value || '');\n      const isValid = pattern.test(stringValue);\n\n      return {\n        isValid,\n        error: isValid ? undefined : errorMessage,\n      };\n    };\n  },\n\n  /**\n   * Compose multiple validators\n   */\n  composeValidators: (...validators: ValidateFieldFunction[]): ValidateFieldFunction => {\n    return (fieldName: string, value: any): FieldValidationResult => {\n      for (const validator of validators) {\n        const result = validator(fieldName, value);\n        if (!result.isValid) {\n          return result;\n        }\n      }\n      return { isValid: true };\n    };\n  },\n};\n\n/**\n * Validation hooks factory\n */\nexport function createValidationHook<T>(\n  validateFormFn: ValidateFormFunction<T>,\n  validateFieldFn?: ValidateFieldFunction,\n  config: BaseValidationConfig = {}\n) {\n  return function useValidation() {\n    const validationState = useValidationState(config);\n\n    const validateForm = createFormValidationExecutor(validateFormFn, validationState.setErrors);\n\n    const validateField = validateFieldFn\n      ? createFieldValidationExecutor(\n          validateFieldFn,\n          validationState.setFieldError,\n          validationState.clearFieldError\n        )\n      : undefined;\n\n    return {\n      ...validationState,\n      validateForm,\n      validateField,\n    };\n  };\n}\n\n/**\n * Async validation utilities\n */\nexport const asyncValidationUtils = {\n  /**\n   * Create debounced async validator\n   */\n  createDebouncedAsyncValidator: (\n    asyncValidator: (value: any) => Promise<FieldValidationResult>,\n    delay = 500\n  ) => {\n    let timeoutId: NodeJS.Timeout;\n\n    return (fieldName: string, value: any, onResult: (result: FieldValidationResult) => void) => {\n      clearTimeout(timeoutId);\n\n      timeoutId = setTimeout(async () => {\n        try {\n          const result = await asyncValidator(value);\n          onResult(result);\n        } catch (error) {\n          onResult({\n            isValid: false,\n            error: 'Validation failed',\n          });\n        }\n      }, delay);\n    };\n  },\n\n  /**\n   * Create batch async validator\n   */\n  createBatchAsyncValidator: (\n    asyncValidators: Record<string, (value: any) => Promise<FieldValidationResult>>\n  ) => {\n    return async (data: Record<string, any>): Promise<Record<string, string>> => {\n      const validationPromises = Object.entries(asyncValidators).map(async ([field, validator]) => {\n        try {\n          const result = await validator(data[field]);\n          return [field, result.error] as const;\n        } catch (error) {\n          return [field, 'Validation failed'] as const;\n        }\n      });\n\n      const results = await Promise.all(validationPromises);\n      const errors: Record<string, string> = {};\n\n      results.forEach(([field, error]) => {\n        if (error) {\n          errors[field] = error;\n        }\n      });\n\n      return errors;\n    };\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jasperjohnlepardo/Documents/GitHub/citizenly/src/utils/validationUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1578,1581],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1578,1581],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Validation Utilities\n * Consolidated validation functions aligned with database schema\n */\n\nimport type { ValidationError } from '@/types/validation';\n\n/**\n * Check if email is valid\n */\nexport function isValidEmail(email: string): boolean {\n  if (!email || typeof email !== 'string') {\n    return false;\n  }\n\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\n/**\n * Check if Philippine mobile number is valid\n */\nexport function isValidPhilippineMobile(mobile: string): boolean {\n  if (!mobile || typeof mobile !== 'string') {\n    return false;\n  }\n\n  const cleaned = mobile.replace(/\\D/g, '');\n  return /^09\\d{9}$/.test(cleaned) || /^639\\d{9}$/.test(cleaned);\n}\n\n/**\n * Check if PhilSys format is valid (aligned with database schema)\n */\nexport function isValidPhilSysFormat(philsys: string): boolean {\n  if (!philsys || typeof philsys !== 'string') {\n    return false;\n  }\n\n  return /^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/.test(philsys);\n}\n\n/**\n * Check if name is valid (contains only allowed characters)\n */\nexport function isValidName(name: string): boolean {\n  if (!name || typeof name !== 'string') {\n    return false;\n  }\n\n  // Allow letters, spaces, hyphens, apostrophes, periods (Filipino names)\n  const nameRegex = /^[a-zA-Z\\s\\-\\.']+$/;\n  return nameRegex.test(name) && name.trim().length > 0;\n}\n\n/**\n * Check if age is valid and reasonable\n */\nexport function isValidAge(age: number): boolean {\n  return typeof age === 'number' && age >= 0 && age <= 150;\n}\n\n/**\n * Validate required field\n */\nexport function validateRequired(value: any, fieldName: string): ValidationError | null {\n  if (value === null || value === undefined || value === '') {\n    return {\n      field: fieldName,\n      message: `${fieldName} is required`,\n      code: 'REQUIRED',\n    };\n  }\n  return null;\n}\n\n/**\n * Validate field length\n */\nexport function validateLength(\n  value: string,\n  fieldName: string,\n  min?: number,\n  max?: number\n): ValidationError | null {\n  if (!value) return null;\n\n  if (min && value.length < min) {\n    return {\n      field: fieldName,\n      message: `${fieldName} must be at least ${min} characters`,\n      code: 'MIN_LENGTH',\n    };\n  }\n\n  if (max && value.length > max) {\n    return {\n      field: fieldName,\n      message: `${fieldName} must not exceed ${max} characters`,\n      code: 'MAX_LENGTH',\n    };\n  }\n\n  return null;\n}\n\n/**\n * Validate numeric range\n */\nexport function validateRange(\n  value: number,\n  fieldName: string,\n  min?: number,\n  max?: number\n): ValidationError | null {\n  if (value === null || value === undefined) return null;\n\n  if (min !== undefined && value < min) {\n    return {\n      field: fieldName,\n      message: `${fieldName} must be at least ${min}`,\n      code: 'MIN_VALUE',\n    };\n  }\n\n  if (max !== undefined && value > max) {\n    return {\n      field: fieldName,\n      message: `${fieldName} must not exceed ${max}`,\n      code: 'MAX_VALUE',\n    };\n  }\n\n  return null;\n}\n\n/**\n * Validate date format and range\n */\nexport function validateDate(dateString: string, fieldName: string): ValidationError | null {\n  if (!dateString) return null;\n\n  const date = new Date(dateString);\n  if (isNaN(date.getTime())) {\n    return {\n      field: fieldName,\n      message: `${fieldName} must be a valid date`,\n      code: 'INVALID_DATE',\n    };\n  }\n\n  // Check reasonable date range (1900 to current year + 1)\n  const minYear = 1900;\n  const maxYear = new Date().getFullYear() + 1;\n  const year = date.getFullYear();\n\n  if (year < minYear || year > maxYear) {\n    return {\n      field: fieldName,\n      message: `${fieldName} must be between ${minYear} and ${maxYear}`,\n      code: 'DATE_RANGE',\n    };\n  }\n\n  return null;\n}\n\n/**\n * Create validation error\n */\nexport function createValidationError(\n  field: string,\n  message: string,\n  code?: string\n): ValidationError {\n  return { field, message, code: code || 'VALIDATION_ERROR' };\n}\n\n/**\n * Combine multiple validation results\n */\nexport function combineValidationResults(\n  ...results: (ValidationError | null)[]\n): ValidationError[] {\n  return results.filter((result): result is ValidationError => result !== null);\n}\n","usedDeprecatedRules":[]}]
