{
  "summary": {
    "totalFiles": 216,
    "totalFunctions": 862,
    "totalIssues": 377,
    "issuesBySeverity": {
      "high": 104,
      "medium": 273,
      "low": 0
    },
    "issuesByType": {
      "file_too_large": 98,
      "function_too_large": 175,
      "high_cyclomatic_complexity": 55,
      "high_cognitive_complexity": 49
    },
    "mostComplexFiles": [
      {
        "filePath": "src/components/templates/HouseholdFormWizard/HouseholdFormWizard.tsx",
        "lineCount": 991
      },
      {
        "filePath": "src/components/tokens/Colors/Colors.stories.tsx",
        "lineCount": 965
      },
      {
        "filePath": "src/components/tokens/Shadows/Shadows.stories.tsx",
        "lineCount": 851
      },
      {
        "filePath": "src/components/organisms/AddressSelector/AddressSelector.stories.tsx",
        "lineCount": 806
      },
      {
        "filePath": "src/components/templates/ResidentFormWizard/ResidentFormWizard.stories.tsx",
        "lineCount": 780
      },
      {
        "filePath": "src/components/tokens/Layout/Layout.stories.tsx",
        "lineCount": 740
      },
      {
        "filePath": "src/components/templates/HouseholdFormWizard/HouseholdFormWizard.stories.tsx",
        "lineCount": 714
      },
      {
        "filePath": "src/components/tokens/Shadows/Shadows.tsx",
        "lineCount": 685
      },
      {
        "filePath": "src/app/settings/page.tsx",
        "lineCount": 663
      },
      {
        "filePath": "src/components/organisms/AddressSearch/AddressSearch.stories.tsx",
        "lineCount": 659
      }
    ],
    "mostComplexFunctions": [
      {
        "name": "CascadingGeographicSelector",
        "filePath": "src/components/molecules/CascadingGeographicSelector/CascadingGeographicSelector.tsx",
        "startLine": 48,
        "cognitiveComplexity": 159,
        "cyclomaticComplexity": 85,
        "lineCount": 540
      },
      {
        "name": "AuthProvider",
        "filePath": "src/contexts/AuthContext.tsx",
        "startLine": 55,
        "cognitiveComplexity": 104,
        "cyclomaticComplexity": 74,
        "lineCount": 429
      },
      {
        "name": "HouseholdFormWizard",
        "filePath": "src/components/templates/HouseholdFormWizard/HouseholdFormWizard.tsx",
        "startLine": 70,
        "cognitiveComplexity": 85,
        "cyclomaticComplexity": 49,
        "lineCount": 412
      },
      {
        "name": "SimpleGeographicSelector",
        "filePath": "src/components/organisms/SimpleGeographicSelector/SimpleGeographicSelector.tsx",
        "startLine": 20,
        "cognitiveComplexity": 69,
        "cyclomaticComplexity": 57,
        "lineCount": 264
      },
      {
        "name": "ResidentStatusSelector",
        "filePath": "src/components/organisms/rbi-specific/ResidentStatusSelector/ResidentStatusSelector.tsx",
        "startLine": 119,
        "cognitiveComplexity": 67,
        "cyclomaticComplexity": 59,
        "lineCount": 351
      },
      {
        "name": "DataTable",
        "filePath": "src/components/organisms/DataTable/DataTable.tsx",
        "startLine": 60,
        "cognitiveComplexity": 62,
        "cyclomaticComplexity": 57,
        "lineCount": 348
      },
      {
        "name": "FamilyRelationshipSelector",
        "filePath": "src/components/organisms/rbi-specific/FamilyRelationshipSelector/FamilyRelationshipSelector.tsx",
        "startLine": 159,
        "cognitiveComplexity": 56,
        "cyclomaticComplexity": 40,
        "lineCount": 220
      },
      {
        "name": "CreateHouseholdModal",
        "filePath": "src/components/organisms/CreateHouseholdModal/CreateHouseholdModal.tsx",
        "startLine": 60,
        "cognitiveComplexity": 54,
        "cyclomaticComplexity": 38,
        "lineCount": 506
      },
      {
        "name": "AddressSelector",
        "filePath": "src/components/organisms/AddressSelector/AddressSelector.tsx",
        "startLine": 39,
        "cognitiveComplexity": 51,
        "cyclomaticComplexity": 33,
        "lineCount": 283
      },
      {
        "name": "HouseholdSelector",
        "filePath": "src/components/organisms/HouseholdSelector/HouseholdSelector.tsx",
        "startLine": 77,
        "cognitiveComplexity": 49,
        "cyclomaticComplexity": 45,
        "lineCount": 402
      }
    ]
  },
  "details": [
    {
      "filePath": "src/__tests__/test-utils.tsx",
      "lineCount": 484,
      "functions": [
        {
          "name": "customRender",
          "startLine": 24,
          "endLine": 25,
          "code": "function customRender(\n  ui: ReactElement,\n",
          "filePath": "src/__tests__/test-utils.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "Wrapper",
          "startLine": 44,
          "endLine": 46,
          "code": "  function Wrapper({ children }: Readonly<{ children: React.ReactNode }>) {\n    return <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>;\n  }\n",
          "filePath": "src/__tests__/test-utils.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "renderWithForm",
          "startLine": 59,
          "endLine": 60,
          "code": "function renderWithForm(\n  ui: ReactElement,\n",
          "filePath": "src/__tests__/test-utils.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "FormWrapper",
          "startLine": 63,
          "endLine": 64,
          "code": "  const FormWrapper = ({ children }: Readonly<{ children: React.ReactNode }>) => (\n    <form data-testid=\"test-form\">{children}</form>\n",
          "filePath": "src/__tests__/test-utils.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "CombinedWrapper",
          "startLine": 69,
          "endLine": 72,
          "code": "  const CombinedWrapper = ({ children }: Readonly<{ children: React.ReactNode }>) => {\n    const content = <FormWrapper>{children}</FormWrapper>;\n    return ExistingWrapper ? <ExistingWrapper>{content}</ExistingWrapper> : content;\n  };\n",
          "filePath": "src/__tests__/test-utils.tsx",
          "lineCount": 4,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "expectAccessibleElement",
          "startLine": 268,
          "endLine": 281,
          "code": "export const expectAccessibleElement = (element: HTMLElement) => {\n  // Should have proper role or semantic element\n  const hasRole = element.getAttribute('role');\n  const hasSemanticTag = ['button', 'input', 'select', 'textarea', 'a', 'label'].includes(\n    element.tagName.toLowerCase()\n  );\n\n  expect(hasRole || hasSemanticTag).toBe(true);\n\n  // Interactive elements should be focusable\n  if (['button', 'input', 'select', 'textarea', 'a'].includes(element.tagName.toLowerCase())) {\n    expect(element).not.toHaveAttribute('tabindex', '-1');\n  }\n};\n",
          "filePath": "src/__tests__/test-utils.tsx",
          "lineCount": 14,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3
        },
        {
          "name": "expectDesignSystemColors",
          "startLine": 286,
          "endLine": 310,
          "code": "export const expectDesignSystemColors = (element: HTMLElement) => {\n  const computedStyle = window.getComputedStyle(element);\n  const backgroundColor = computedStyle.backgroundColor;\n  const color = computedStyle.color;\n\n  // Check if colors are from design system (not hardcoded)\n  const designSystemColors = [\n    'rgb(59, 130, 246)', // primary-500\n    'rgb(124, 58, 237)', // secondary-700\n    'rgb(5, 150, 105)', // success-600\n    'rgb(234, 88, 12)', // warning-600\n    'rgb(220, 38, 38)', // danger-600\n    'rgb(64, 64, 64)', // neutral-700\n    'rgb(38, 38, 38)', // neutral-800\n    'rgb(255, 255, 255)', // white\n  ];\n\n  if (backgroundColor !== 'rgba(0, 0, 0, 0)') {\n    expect(designSystemColors).toContain(backgroundColor);\n  }\n\n  if (color !== 'rgba(0, 0, 0, 0)') {\n    expect(designSystemColors).toContain(color);\n  }\n};\n",
          "filePath": "src/__tests__/test-utils.tsx",
          "lineCount": 25,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 4
        },
        {
          "name": "expectRBINamingConvention",
          "startLine": 315,
          "endLine": 329,
          "code": "export const expectRBINamingConvention = (element: HTMLElement) => {\n  const testId = element.getAttribute('data-testid');\n  const className = element.className;\n\n  if (testId) {\n    // Should use kebab-case\n    expect(testId).toMatch(/^[a-z0-9-]+$/);\n  }\n\n  // Should not have generic class names\n  const genericClasses = ['container', 'wrapper', 'content', 'item'];\n  genericClasses.forEach(genericClass => {\n    expect(className).not.toContain(genericClass);\n  });\n};\n",
          "filePath": "src/__tests__/test-utils.tsx",
          "lineCount": 15,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 2
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 484 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/app/addresses/page.tsx",
      "lineCount": 327,
      "functions": [
        {
          "name": "AddressesPage",
          "startLine": 16,
          "endLine": 326,
          "code": "export default function AddressesPage() {\n  const [addressResults, setAddressResults] = useState<AddressHierarchy[]>([]);\n  const [dbStats, setDbStats] = useState({\n    regions: 0,\n    provinces: 0,\n    cities: 0,\n    barangays: 0,\n    connected: false,\n  });\n  const [loading, setLoading] = useState(true);\n\n  // Test database connection and get real stats\n  useEffect(() => {\n    async function loadDatabaseStats() {\n      try {\n        setLoading(true);\n        const result = await testDatabaseConnection();\n        if (result.success && result.data) {\n          setDbStats({\n            regions: result.data.regions,\n            provinces: result.data.provinces,\n            cities: result.data.cities,\n            barangays: result.data.barangays,\n            connected: true,\n          });\n        } else {\n          logger.warn('Database connection failed', {\n            errors: result.errors,\n            context: 'addresses_db_connection',\n          });\n          // Fallback to estimated values if DB is not available\n          setDbStats({\n            regions: 17,\n            provinces: 86,\n            cities: 1637,\n            barangays: 38372,\n            connected: false,\n          });\n        }\n      } catch (error) {\n        const err = error instanceof Error ? error : new Error(String(error));\n        logError(err, 'DATABASE_CONNECTION_ERROR');\n        logger.error('Database connection failed on addresses page');\n        setDbStats({\n          regions: 17,\n          provinces: 86,\n          cities: 1637,\n          barangays: 38372,\n          connected: false,\n        });\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    loadDatabaseStats();\n  }, []);\n\n  // Calculate coverage percentage\n  const calculateCoverage = (current: number, total: number) => {\n    if (total === 0) return '0%';\n    return `${Math.round((current / total) * 100)}%`;\n  };\n\n  // Address hierarchy statistics (dynamic based on real data)\n  const addressStats = [\n    {\n      name: 'Regions',\n      value: loading ? '...' : dbStats.regions.toLocaleString(),\n      description: 'Administrative regions',\n      gradient: 'from-blue-500 to-indigo-600',\n      coverage: dbStats.connected ? '100%' : 'Offline',\n    },\n    {\n      name: 'Provinces',\n      value: loading ? '...' : dbStats.provinces.toLocaleString(),\n      description: 'Provinces and NCR',\n      gradient: 'from-emerald-500 to-green-600',\n      coverage: dbStats.connected ? '100%' : 'Offline',\n    },\n    {\n      name: 'Cities/Municipalities',\n      value: loading ? '...' : dbStats.cities.toLocaleString(),\n      description: 'Cities and municipalities',\n      gradient: 'from-purple-500 to-pink-600',\n      coverage: dbStats.connected ? '100%' : 'Offline',\n    },\n    {\n      name: 'Barangays',\n      value: loading ? '...' : dbStats.barangays.toLocaleString(),\n      description: 'Barangay coverage',\n      gradient: 'from-orange-500 to-red-600',\n      coverage: dbStats.connected ? calculateCoverage(dbStats.barangays, 42028) : 'Offline',\n    },\n  ];\n\n  // Handle address selection\n  const handleAddressSelect = (address: AddressHierarchy) => {\n    logger.debug('Address selected', {\n      barangayCode: address.barangay_code,\n      barangayName: address.barangay_name,\n      context: 'address_selection',\n    });\n    // Add the selected address to results for display\n    setAddressResults(prev => {\n      // Check if already exists\n      const exists = prev.some(addr => addr.barangay_code === address.barangay_code);\n      if (exists) return prev;\n      return [address, ...prev.slice(0, 9)]; // Keep only 10 results\n    });\n  };\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"font-montserrat text-2xl font-semibold text-primary\">\n            Address Management\n          </h1>\n          <p className=\"font-montserrat mt-1 text-secondary\">\n            Complete Philippine administrative address hierarchy and location services\n          </p>\n        </div>\n\n        {/* Address Statistics Cards - Dashboard Style */}\n        <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4\">\n          {addressStats.map(stat => (\n            <div key={stat.name} className=\"rounded-lg border p-6 bg-surface border-default\">\n              <div className=\"font-montserrat mb-2 text-sm font-medium text-secondary\">\n                {stat.name}\n              </div>\n              <div className=\"font-montserrat mb-1 text-4xl font-bold text-primary\">\n                {stat.value}\n              </div>\n              <div className=\"flex items-center text-sm\">\n                <div className=\"mr-2 size-2 rounded-full bg-emerald-500\"></div>\n                <span className=\"font-medium text-emerald-600 dark:text-emerald-400\">\n                  {stat.coverage}\n                </span>\n              </div>\n              <p className=\"mt-2 text-xs text-muted\">{stat.description}</p>\n            </div>\n          ))}\n        </div>\n\n        {/* Address Search Section */}\n        <div className=\"rounded-lg border p-6 bg-surface border-default\">\n          <div className=\"mb-6 border-b pb-4 border-default\">\n            <h3 className=\"font-montserrat text-lg font-semibold text-primary\">\n              Search Philippine Addresses\n            </h3>\n            <p className=\"font-montserrat mt-1 text-sm text-secondary\">\n              Search across {loading ? '...' : dbStats.barangays.toLocaleString()} barangays\n              nationwide\n            </p>\n          </div>\n          <AddressSearch\n            onSelect={handleAddressSelect}\n            placeholder=\"Search for region, province, city, or barangay...\"\n            maxResults={50}\n            className=\"w-full\"\n          />\n        </div>\n\n        {/* Search Results */}\n        {addressResults.length > 0 && (\n          <div className=\"rounded-lg border bg-surface border-default\">\n            <div className=\"p-6\">\n              <div className=\"mb-6 border-b pb-4 border-default\">\n                <h3 className=\"font-montserrat text-lg font-semibold text-primary\">\n                  Recent Selections\n                </h3>\n                <p className=\"font-montserrat mt-1 text-sm text-secondary\">\n                  Recently selected {addressResults.length} address\n                  {addressResults.length !== 1 ? 'es' : ''}\n                </p>\n              </div>\n              <div className=\"flow-root\">\n                <div className=\"-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n                  <div className=\"inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8\">\n                    <table className=\"min-w-full\">\n                      <thead>\n                        <tr className=\"border-b border-default\">\n                          <th\n                            scope=\"col\"\n                            className=\"py-4 pl-4 pr-3 text-left text-sm font-semibold text-primary sm:pl-0\"\n                          >\n                            Region\n                          </th>\n                          <th\n                            scope=\"col\"\n                            className=\"px-3 py-4 text-left text-sm font-semibold text-primary\"\n                          >\n                            Province\n                          </th>\n                          <th\n                            scope=\"col\"\n                            className=\"px-3 py-4 text-left text-sm font-semibold text-primary\"\n                          >\n                            City/Municipality\n                          </th>\n                          <th\n                            scope=\"col\"\n                            className=\"px-3 py-4 text-left text-sm font-semibold text-primary\"\n                          >\n                            Barangay\n                          </th>\n                          <th\n                            scope=\"col\"\n                            className=\"px-3 py-4 text-left text-sm font-semibold text-primary\"\n                          >\n                            Type\n                          </th>\n                          <th\n                            scope=\"col\"\n                            className=\"px-3 py-4 text-left text-sm font-semibold text-primary\"\n                          >\n                            Status\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"divide-default divide-y\">\n                        {addressResults.map((address, index) => {\n                          const status = address.urban_rural_status ? 'complete' : 'partial';\n\n                          return (\n                            <tr\n                              key={`${address.barangay_code}-${index}`}\n                              className=\"transition-colors duration-200 hover:bg-surface-hover\"\n                            >\n                              <td className=\"whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-primary sm:pl-0\">\n                                {address.region_name}\n                              </td>\n                              <td className=\"whitespace-nowrap px-3 py-4 text-sm text-secondary\">\n                                {address.province_name || 'Metro Manila'}\n                              </td>\n                              <td className=\"whitespace-nowrap px-3 py-4 text-sm text-secondary\">\n                                {address.city_municipality_name}\n                              </td>\n                              <td className=\"whitespace-nowrap px-3 py-4 text-sm text-secondary\">\n                                {address.barangay_name}\n                              </td>\n                              <td className=\"whitespace-nowrap px-3 py-4 text-sm text-secondary\">\n                                {address.city_municipality_type}\n                              </td>\n                              <td className=\"whitespace-nowrap px-3 py-4 text-sm text-secondary\">\n                                <span\n                                  className={`inline-flex items-center rounded-full px-3 py-1 text-xs font-semibold ring-1 ring-inset ${\n                                    status === 'complete'\n                                      ? 'bg-emerald-50 text-emerald-700 ring-emerald-600/20 dark:bg-emerald-900/20 dark:text-emerald-400'\n                                      : 'bg-amber-50 text-amber-700 ring-amber-600/20 dark:bg-amber-900/20 dark:text-amber-400'\n                                  }`}\n                                >\n                                  {status === 'complete' ? 'Complete' : 'Partial'}\n                                </span>\n                                {address.is_independent && (\n                                  <span className=\"ml-2 inline-flex items-center rounded-full bg-blue-50 px-2 py-0.5 text-xs font-medium text-blue-700 dark:bg-blue-900/20 dark:text-blue-400\">\n                                    Independent\n                                  </span>\n                                )}\n                              </td>\n                            </tr>\n                          );\n                        })}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Coverage Summary */}\n        <div className=\"rounded-lg border p-6 bg-surface border-default\">\n          <div className=\"mb-6 border-b pb-4 border-default\">\n            <h3 className=\"font-montserrat text-lg font-semibold text-primary\">\n              Philippine Address Coverage\n            </h3>\n            <p className=\"font-montserrat mt-1 text-sm text-secondary\">\n              Comprehensive nationwide coverage with real-time data integration\n            </p>\n          </div>\n          <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n            <div className=\"rounded-lg border p-4 bg-background border-default\">\n              <div className=\"text-2xl font-bold text-emerald-600\">\n                {loading ? '...' : calculateCoverage(dbStats.barangays, 42028)}\n              </div>\n              <div className=\"mt-1 text-sm font-medium text-secondary\">\n                Nationwide Coverage {dbStats.connected ? '(Live)' : '(Offline)'}\n              </div>\n            </div>\n            <div className=\"rounded-lg border p-4 bg-background border-default\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {loading ? '...' : dbStats.barangays.toLocaleString()}\n              </div>\n              <div className=\"mt-1 text-sm font-medium text-secondary\">\n                Barangays {dbStats.connected ? 'Available' : 'Cached'}\n              </div>\n            </div>\n            <div className=\"rounded-lg border p-4 bg-background border-default\">\n              <div className=\"text-2xl font-bold text-purple-600\">{loading ? '...' : '17'}</div>\n              <div className=\"mt-1 text-sm font-medium text-secondary\">Regions Covered</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n}\n",
          "filePath": "src/app/addresses/page.tsx",
          "lineCount": 311,
          "cyclomaticComplexity": 29,
          "cognitiveComplexity": 32
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 327 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "AddressesPage",
          "line": 16,
          "message": "Function 'AddressesPage' has 311 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "AddressesPage",
          "line": 16,
          "complexity": 29,
          "message": "Function 'AddressesPage' has cyclomatic complexity of 29 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "AddressesPage",
          "line": 16,
          "complexity": 32,
          "message": "Function 'AddressesPage' has cognitive complexity of 32 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/app/admin/create-user/page.tsx",
      "lineCount": 44,
      "functions": [
        {
          "name": "CreateUserPage",
          "startLine": 37,
          "endLine": 43,
          "code": "export default function CreateUserPage() {\n  return (\n    <ProtectedRoute requirePermission=\"manage_users\">\n      <CreateUserContent />\n    </ProtectedRoute>\n  );\n}\n",
          "filePath": "src/app/admin/create-user/page.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/admin/users/page.tsx",
      "lineCount": 52,
      "functions": [
        {
          "name": "onApprove",
          "startLine": 27,
          "endLine": 28,
          "code": "  onApprove: (userId: string, userEmail: string) => void;\n  onReject: (userId: string, userEmail: string) => void;\n",
          "filePath": "src/app/admin/users/page.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onSuspend",
          "startLine": 29,
          "endLine": 30,
          "code": "  onSuspend: (userId: string, userEmail: string) => void;\n}\n",
          "filePath": "src/app/admin/users/page.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "UsersManagementPage",
          "startLine": 45,
          "endLine": 51,
          "code": "export default function UsersManagementPage() {\n  return (\n    <ProtectedRoute requirePermission=\"manage_users\">\n      <UsersManagementContent />\n    </ProtectedRoute>\n  );\n}\n",
          "filePath": "src/app/admin/users/page.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/api/residents/__tests__/residents.post.test.ts",
      "lineCount": 283,
      "functions": [
        {
          "name": "buildRequest",
          "startLine": 32,
          "endLine": 36,
          "code": "function buildRequest(body: any, token = 'test-token') {\n  const headers = new Headers({ 'Content-Type': 'application/json', Authorization: `Bearer ${token}` });\n  const req = new Request('http://localhost/api/residents', { method: 'POST', headers, body: JSON.stringify(body) });\n  return new NextRequest(req);\n}\n",
          "filePath": "src/app/api/residents/__tests__/residents.post.test.ts",
          "lineCount": 5,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/business/page.tsx",
      "lineCount": 25,
      "functions": [
        {
          "name": "BusinessPage",
          "startLine": 18,
          "endLine": 24,
          "code": "export default function BusinessPage() {\n  return (\n    <ProtectedRoute>\n      <BusinessContent />\n    </ProtectedRoute>\n  );\n}\n",
          "filePath": "src/app/business/page.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/certification/page.tsx",
      "lineCount": 25,
      "functions": [
        {
          "name": "CertificationPage",
          "startLine": 18,
          "endLine": 24,
          "code": "export default function CertificationPage() {\n  return (\n    <ProtectedRoute>\n      <CertificationContent />\n    </ProtectedRoute>\n  );\n}\n",
          "filePath": "src/app/certification/page.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/dashboard/page.tsx",
      "lineCount": 81,
      "functions": [
        {
          "name": "DashboardPage",
          "startLine": 74,
          "endLine": 80,
          "code": "export default function DashboardPage() {\n  return (\n    <ProtectedRoute>\n      <DashboardContent />\n    </ProtectedRoute>\n  );\n}\n",
          "filePath": "src/app/dashboard/page.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/error.js",
      "lineCount": 5,
      "functions": [
        {
          "name": "Error",
          "startLine": 2,
          "endLine": 4,
          "code": "export default function Error({ error: _error, reset: _reset }) {\n  return <div>Error</div>;\n}\n",
          "filePath": "src/app/error.js",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/error.tsx",
      "lineCount": 41,
      "functions": [
        {
          "name": "reset",
          "startLine": 5,
          "endLine": 6,
          "code": "  readonly reset: () => void;\n}\n",
          "filePath": "src/app/error.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "ErrorPage",
          "startLine": 23,
          "endLine": 40,
          "code": "export default function ErrorPage({ error, reset }: ErrorPageProps) {\n  return (\n    <div className=\"flex min-h-screen flex-col items-center justify-center bg-background\">\n      <div className=\"text-center\">\n        <h1 className=\"mb-4 text-4xl font-bold text-red-600\">Something went wrong!</h1>\n        <p className=\"mb-6 max-w-md text-secondary\">\n          {error?.message || 'An unexpected error occurred. Please try again.'}\n        </p>\n        <button\n          onClick={() => reset()}\n          className=\"rounded bg-blue-600 px-4 py-2 font-medium text-white transition-colors hover:bg-blue-700\"\n        >\n          Try again\n        </button>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/app/error.tsx",
          "lineCount": 18,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/global-error.js",
      "lineCount": 9,
      "functions": [
        {
          "name": "GlobalError",
          "startLine": 2,
          "endLine": 8,
          "code": "export default function GlobalError({ error: _error, reset: _reset }) {\n  return (\n    <html>\n      <body>Error</body>\n    </html>\n  );\n}\n",
          "filePath": "src/app/global-error.js",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/global-error.tsx",
      "lineCount": 81,
      "functions": [
        {
          "name": "reset",
          "startLine": 5,
          "endLine": 6,
          "code": "  readonly reset: () => void;\n}\n",
          "filePath": "src/app/global-error.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "GlobalError",
          "startLine": 23,
          "endLine": 80,
          "code": "export default function GlobalError({ error, reset }: GlobalErrorProps) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>Error - Citizenly</title>\n      </head>\n      <body style={{ margin: 0, fontFamily: 'system-ui, sans-serif' }}>\n        <div\n          style={{\n            display: 'flex',\n            minHeight: '100vh',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center',\n            backgroundColor: '#fafafa',\n            padding: '20px',\n          }}\n        >\n          <div style={{ textAlign: 'center' }}>\n            <h1\n              style={{\n                fontSize: '2rem',\n                fontWeight: 'bold',\n                color: '#dc2626',\n                marginBottom: '1rem',\n              }}\n            >\n              Application Error\n            </h1>\n            <p\n              style={{\n                color: '#6b7280',\n                marginBottom: '1.5rem',\n                maxWidth: '400px',\n              }}\n            >\n              {error?.message || 'A critical error occurred. Please refresh the page.'}\n            </p>\n            <button\n              onClick={() => reset()}\n              style={{\n                backgroundColor: '#2563eb',\n                color: 'white',\n                padding: '8px 16px',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer',\n                fontWeight: '500',\n              }}\n            >\n              Try again\n            </button>\n          </div>\n        </div>\n      </body>\n    </html>\n  );\n}\n",
          "filePath": "src/app/global-error.tsx",
          "lineCount": 58,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "GlobalError",
          "line": 23,
          "message": "Function 'GlobalError' has 58 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/app/help/page.tsx",
      "lineCount": 405,
      "functions": [
        {
          "name": "HelpContent",
          "startLine": 20,
          "endLine": 377,
          "code": "function HelpContent() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [faqSearchTerm, setFaqSearchTerm] = useState('');\n  const [openAccordions, setOpenAccordions] = useState<number[]>([]);\n\n  const allFaqContent = [\n    // Getting Started\n    {\n      category: 'Getting Started',\n      question: 'How do I get started with Citizenly?',\n      answer:\n        'Welcome to Citizenly! Start by exploring the dashboard to get an overview of your barangay data. Then navigate to the Residents section to begin managing your community records.',\n    },\n    {\n      category: 'Getting Started',\n      question: 'What is my role in the system?',\n      answer:\n        'Your role determines what features you can access. Barangay Admins can manage all aspects of the system, while Clerks have limited access to data entry and basic operations.',\n    },\n    {\n      category: 'Getting Started',\n      question: 'How do I navigate between different sections?',\n      answer:\n        'Use the sidebar on the left to navigate between Dashboard, Residents, Households, Business, Judiciary, Certification, and Reports sections.',\n    },\n    // Resident Management\n    {\n      category: 'Resident Management',\n      question: 'How do I add a new resident?',\n      answer:\n        'Go to the Residents page and click \"Add new resident\". Fill out the required information including personal details, address, and household assignment.',\n    },\n    {\n      category: 'Resident Management',\n      question: 'How do I search for residents?',\n      answer:\n        'Use the search bar in the Residents section. You can search by name, email, occupation, or other resident information.',\n    },\n    {\n      category: 'Resident Management',\n      question: 'Can I edit resident information?',\n      answer:\n        'Yes, click on a resident&apos;s name or use the action menu (three dots) to edit their information. Make sure you have the necessary permissions.',\n    },\n    // Household Management\n    {\n      category: 'Household Management',\n      question: 'How do I create a new household?',\n      answer:\n        'Households are typically created automatically when you add a new resident. You can also manually create households from the Household section.',\n    },\n    {\n      category: 'Household Management',\n      question: 'How do I assign a household head?',\n      answer:\n        'When adding a resident, you can select their role as \"Head\" in the household section. Only one person can be the head of each household.',\n    },\n    {\n      category: 'Household Management',\n      question: 'What is a household code?',\n      answer:\n        'Each household gets a unique PSGC-compliant code that identifies it within your barangay. This code is automatically generated based on your barangay location.',\n    },\n    // Certificates\n    {\n      category: 'Certificates',\n      question: 'What types of certificates can I issue?',\n      answer:\n        'Currently available certificates include Barangay Certificate, Certificate of Residency, Barangay Clearance, and Certificate of Indigency.',\n    },\n    {\n      category: 'Certificates',\n      question: 'How do I process certificate requests?',\n      answer:\n        'Certificate requests will appear in the Certification section. You can review, approve, and generate the certificates from there.',\n    },\n    {\n      category: 'Certificates',\n      question: 'Can residents request certificates online?',\n      answer:\n        'This feature is being developed. Currently, certificate requests are managed through the admin interface.',\n    },\n    // Reports & Analytics\n    {\n      category: 'Reports & Analytics',\n      question: 'What reports are available?',\n      answer:\n        'The Reports section provides demographics data, population statistics, and various analytics about your barangay residents and households.',\n    },\n    {\n      category: 'Reports & Analytics',\n      question: 'How do I export data?',\n      answer:\n        'Use the \"Export Data\" button in the Reports section to download your data in various formats for external analysis.',\n    },\n    {\n      category: 'Reports & Analytics',\n      question: 'Can I customize report filters?',\n      answer:\n        'Report filtering and customization features are being developed to provide more detailed analytics options.',\n    },\n    // Troubleshooting\n    {\n      category: 'Troubleshooting',\n      question: 'I can&apos;t access certain features. What should I do?',\n      answer:\n        'Check your user role and permissions. Some features are restricted to specific roles. Contact your system administrator if you need additional access.',\n    },\n    {\n      category: 'Troubleshooting',\n      question: 'The system is running slowly. How can I improve performance?',\n      answer:\n        'Try refreshing your browser, clearing your cache, or using a modern browser like Chrome or Firefox. If issues persist, contact support.',\n    },\n    {\n      category: 'Troubleshooting',\n      question: 'I made a mistake in data entry. Can I undo it?',\n      answer:\n        'You can edit most records through their respective edit functions. For major changes or deletions, contact your system administrator.',\n    },\n  ];\n\n  // Helper functions for accordion\n  const toggleAccordion = (index: number) => {\n    setOpenAccordions(prev =>\n      prev.includes(index) ? prev.filter(i => i !== index) : [...prev, index]\n    );\n  };\n\n  const isAccordionOpen = (index: number) => openAccordions.includes(index);\n\n  // Get category icon\n  const getCategoryIcon = (category: string) => {\n    const icons: { [key: string]: string } = {\n      'Getting Started': '🚀',\n      'Resident Management': '👥',\n      'Household Management': '🏠',\n      Certificates: '📄',\n      'Reports & Analytics': '📊',\n      Troubleshooting: '🔧',\n    };\n    return icons[category] || '📋';\n  };\n\n  // Group content by category\n  const getGroupedContent = () => {\n    const groups: { [key: string]: typeof allFaqContent } = {};\n\n    allFaqContent.forEach(item => {\n      if (!groups[item.category]) {\n        groups[item.category] = [];\n      }\n      groups[item.category].push(item);\n    });\n\n    return groups;\n  };\n\n  // Filter help content based on search\n  const getFilteredGroupedContent = () => {\n    const grouped = getGroupedContent();\n\n    if (!faqSearchTerm.trim()) return grouped;\n\n    const searchLower = faqSearchTerm.toLowerCase();\n    const filteredGroups: { [key: string]: typeof allFaqContent } = {};\n\n    Object.entries(grouped).forEach(([category, items]) => {\n      const filteredItems = items.filter(\n        item =>\n          item.question.toLowerCase().includes(searchLower) ||\n          item.answer.toLowerCase().includes(searchLower) ||\n          item.category.toLowerCase().includes(searchLower)\n      );\n\n      if (filteredItems.length > 0) {\n        filteredGroups[category] = filteredItems;\n      }\n    });\n\n    return filteredGroups;\n  };\n\n  const groupedContent = getFilteredGroupedContent();\n  const totalResults = Object.values(groupedContent).flat().length;\n\n  return (\n    <DashboardLayout searchTerm={searchTerm} onSearchChange={setSearchTerm}>\n      <div className=\"p-6\">\n        {/* Page Header */}\n        <div className=\"mb-6\">\n          <h1 className=\"font-montserrat text-foreground mb-0.5 text-xl font-semibold\">\n            Help & Support\n          </h1>\n          <p className=\"font-montserrat text-sm font-normal text-secondary\">\n            Find answers to common questions and get help using Citizenly\n          </p>\n        </div>\n\n        {/* Help Content */}\n        <div className=\"rounded-lg border p-6 bg-surface border-default\">\n          <div className=\"mb-6 flex items-center justify-between\">\n            <h2 className=\"font-montserrat text-lg font-semibold text-primary\">\n              Frequently Asked Questions\n            </h2>\n            <div className=\"text-sm text-muted\">\n              {totalResults} {totalResults === 1 ? 'result' : 'results'}\n            </div>\n          </div>\n\n          {/* FAQ Search Box */}\n          <div className=\"mb-6\">\n            <InputField\n              type=\"text\"\n              placeholder=\"Search FAQs...\"\n              value={faqSearchTerm}\n              onChange={e => setFaqSearchTerm(e.target.value)}\n              size=\"lg\"\n              clearable\n              onClear={() => setFaqSearchTerm('')}\n              leftIcon={\n                <svg className=\"size-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                  />\n                </svg>\n              }\n            />\n          </div>\n\n          {/* FAQ Sections by Category */}\n          <div className=\"space-y-8\">\n            {Object.keys(groupedContent).length === 0 ? (\n              <div className=\"py-8 text-center\">\n                <svg\n                  className=\"mx-auto mb-4 size-12 text-muted\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.034 0-3.91.616-5.471 1.661M12 3a9 9 0 11-7.99 14.045l1.45 1.45A7.966 7.966 0 0012 21a7.966 7.966 0 006.54-3.505l1.45-1.45A9 9 0 0012 3z\"\n                  />\n                </svg>\n                <h3 className=\"font-montserrat text-foreground mb-2 font-medium\">\n                  No results found\n                </h3>\n                <p className=\"font-montserrat text-sm text-secondary\">\n                  Try adjusting your search terms or browse by category\n                </p>\n              </div>\n            ) : (\n              Object.entries(groupedContent).map(([category, items]) => (\n                <div key={category} className=\"space-y-4\">\n                  {/* Category Header */}\n                  <div className=\"border-b pb-2 border-default\">\n                    <h3 className=\"font-montserrat flex items-center space-x-2 text-lg font-semibold text-primary\">\n                      <span className=\"text-primary-600\">{getCategoryIcon(category)}</span>\n                      <span>{category}</span>\n                      <span className=\"text-sm font-normal text-muted\">({items.length})</span>\n                    </h3>\n                  </div>\n\n                  {/* Category FAQ Items */}\n                  <div className=\"space-y-3\">\n                    {items.map(item => {\n                      const globalIndex = allFaqContent.findIndex(faq => faq === item);\n                      return (\n                        <div\n                          key={globalIndex}\n                          className=\"overflow-hidden rounded-lg border border-default\"\n                        >\n                          <button\n                            onClick={() => toggleAccordion(globalIndex)}\n                            className=\"w-full p-4 text-left transition-colors bg-background-muted hover:bg-surface-hover focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary-500\"\n                          >\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex-1 pr-4\">\n                                <h4 className=\"font-montserrat text-foreground text-base font-semibold\">\n                                  {item.question}\n                                </h4>\n                              </div>\n                              <svg\n                                className={`size-5 shrink-0 transition-transform text-muted ${\n                                  isAccordionOpen(globalIndex) ? 'rotate-180' : ''\n                                }`}\n                                fill=\"none\"\n                                stroke=\"currentColor\"\n                                viewBox=\"0 0 24 24\"\n                              >\n                                <path\n                                  strokeLinecap=\"round\"\n                                  strokeLinejoin=\"round\"\n                                  strokeWidth={2}\n                                  d=\"M19 9l-7 7-7-7\"\n                                />\n                              </svg>\n                            </div>\n                          </button>\n                          {isAccordionOpen(globalIndex) && (\n                            <div className=\"border-t p-4 bg-surface border-default\">\n                              <p className=\"font-montserrat text-sm leading-relaxed text-secondary\">\n                                {item.answer}\n                              </p>\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n\n        {/* Contact Support Card */}\n        <div className=\"mt-6 rounded-lg border border-primary-200 bg-primary-50 p-6\">\n          <div className=\"flex items-start space-x-4\">\n            <div className=\"flex size-12 shrink-0 items-center justify-center rounded-full bg-primary-100\">\n              <svg\n                className=\"size-6 text-primary-600\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192L5.636 18.364M12 2.5a9.5 9.5 0 100 19 9.5 9.5 0 000-19z\"\n                />\n              </svg>\n            </div>\n            <div>\n              <h3 className=\"font-montserrat mb-2 text-base font-semibold text-primary-900\">\n                Still need help?\n              </h3>\n              <p className=\"font-montserrat mb-4 text-sm text-primary-800\">\n                If you can&apos;t find the answer you&apos;re looking for, our support team is here\n                to help.\n              </p>\n              <button className=\"font-montserrat rounded bg-primary-600 px-4 py-2 text-sm font-medium text-white transition-colors hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2\">\n                Contact Support\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n}\n",
          "filePath": "src/app/help/page.tsx",
          "lineCount": 358,
          "cyclomaticComplexity": 19,
          "cognitiveComplexity": 13
        },
        {
          "name": "HelpPage",
          "startLine": 398,
          "endLine": 404,
          "code": "export default function HelpPage() {\n  return (\n    <ProtectedRoute>\n      <HelpContent />\n    </ProtectedRoute>\n  );\n}\n",
          "filePath": "src/app/help/page.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 405 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "HelpContent",
          "line": 20,
          "message": "Function 'HelpContent' has 358 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "HelpContent",
          "line": 20,
          "complexity": 19,
          "message": "Function 'HelpContent' has cyclomatic complexity of 19 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        }
      ]
    },
    {
      "filePath": "src/app/households/[id]/page.tsx",
      "lineCount": 49,
      "functions": [
        {
          "name": "HouseholdDetailPage",
          "startLine": 42,
          "endLine": 48,
          "code": "export default function HouseholdDetailPage() {\n  return (\n    <ProtectedRoute requirePermission=\"residents_view\">\n      <HouseholdDetailContent />\n    </ProtectedRoute>\n  );\n}\n",
          "filePath": "src/app/households/[id]/page.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/households/create/page.tsx",
      "lineCount": 27,
      "functions": [
        {
          "name": "CreateHouseholdPage",
          "startLine": 20,
          "endLine": 26,
          "code": "export default function CreateHouseholdPage() {\n  return (\n    <ProtectedRoute requirePermission=\"residents_create\">\n      <CreateHouseholdForm />\n    </ProtectedRoute>\n  );\n}\n",
          "filePath": "src/app/households/create/page.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/households/page.tsx",
      "lineCount": 64,
      "functions": [
        {
          "name": "HouseholdsPage",
          "startLine": 57,
          "endLine": 63,
          "code": "export default function HouseholdsPage() {\n  return (\n    <ProtectedRoute requirePermission=\"residents_view\">\n      <HouseholdsContent />\n    </ProtectedRoute>\n  );\n}\n",
          "filePath": "src/app/households/page.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/judiciary/page.tsx",
      "lineCount": 25,
      "functions": [
        {
          "name": "JudiciaryPage",
          "startLine": 18,
          "endLine": 24,
          "code": "export default function JudiciaryPage() {\n  return (\n    <ProtectedRoute>\n      <JudiciaryContent />\n    </ProtectedRoute>\n  );\n}\n",
          "filePath": "src/app/judiciary/page.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/layout.tsx",
      "lineCount": 46,
      "functions": [
        {
          "name": "RootLayout",
          "startLine": 34,
          "endLine": 45,
          "code": "export default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\" className={montserrat.variable}>\n      <body className={montserrat.className} suppressHydrationWarning={true}>\n        <Providers>\n          {children}\n          <VersionTag />\n        </Providers>\n      </body>\n    </html>\n  );\n}\n",
          "filePath": "src/app/layout.tsx",
          "lineCount": 12,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/loading.js",
      "lineCount": 4,
      "functions": [
        {
          "name": "Loading",
          "startLine": 1,
          "endLine": 3,
          "code": "export default function Loading() {\n  return <div>Loading</div>;\n}\n",
          "filePath": "src/app/loading.js",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/loading.tsx",
      "lineCount": 25,
      "functions": [
        {
          "name": "Loading",
          "startLine": 15,
          "endLine": 24,
          "code": "export default function Loading(): ReactElement {\n  return (\n    <div className=\"flex min-h-screen flex-col items-center justify-center bg-background\">\n      <div className=\"text-center\">\n        <div className=\"inline-block size-8 animate-spin rounded-full border-4 border-solid border-blue-600 border-r-transparent\"></div>\n        <p className=\"mt-4 text-secondary\">Loading...</p>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/app/loading.tsx",
          "lineCount": 10,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/login/page.tsx",
      "lineCount": 65,
      "functions": [
        {
          "name": "LoginPage",
          "startLine": 21,
          "endLine": 64,
          "code": "export default function LoginPage() {\n  const [showDevLogin, setShowDevLogin] = useState(false);\n\n  return (\n    <div className=\"relative flex min-h-screen flex-col justify-center py-12 bg-background sm:px-6 lg:px-8\">\n      {/* Theme Toggle - positioned in top right */}\n      <div className=\"absolute right-4 top-4\">\n        <ThemeToggle variant=\"ghost\" size=\"md\" />\n      </div>\n\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"text-center\">\n          <h1 className=\"mb-2 text-3xl font-bold text-primary\">Citizenly</h1>\n          <p className=\"mb-8 text-sm text-secondary\">Records of Barangay Inhabitant System</p>\n        </div>\n\n        {showDevLogin ? (\n          <DevLogin\n            onSuccess={() => {\n              window.location.href = '/dashboard';\n            }}\n          />\n        ) : (\n          <LoginForm />\n        )}\n\n        <div className=\"mt-8 text-center\">\n          <div className=\"rounded-lg border p-4 bg-surface border-default\">\n            <h3 className=\"mb-2 text-sm font-medium text-primary-400\">Development Mode</h3>\n            <div className=\"space-y-2 text-xs text-secondary\">\n              <div>If you can&apos;t login, the demo users may not exist yet.</div>\n              <button\n                onClick={() => setShowDevLogin(!showDevLogin)}\n                className=\"text-primary-400 underline hover:text-primary-300\"\n              >\n                {showDevLogin ? 'Back to Login Form' : 'Setup Demo Users'}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/app/login/page.tsx",
          "lineCount": 44,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "LoginPage",
          "line": 21,
          "message": "Function 'LoginPage' has 44 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/app/not-found.js",
      "lineCount": 4,
      "functions": [
        {
          "name": "NotFound",
          "startLine": 1,
          "endLine": 3,
          "code": "export default function NotFound() {\n  return <div>Not Found</div>;\n}\n",
          "filePath": "src/app/not-found.js",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/not-found.tsx",
      "lineCount": 35,
      "functions": [
        {
          "name": "NotFound",
          "startLine": 16,
          "endLine": 34,
          "code": "export default function NotFound(): ReactElement {\n  return (\n    <div className=\"flex min-h-screen flex-col items-center justify-center bg-background\">\n      <div className=\"text-center\">\n        <h1 className=\"mb-4 text-6xl font-bold text-primary\">404</h1>\n        <h2 className=\"mb-2 text-2xl font-semibold text-primary\">Page Not Found</h2>\n        <p className=\"mb-6 max-w-md text-secondary\">\n          The page you&apos;re looking for doesn&apos;t exist or has been moved.\n        </p>\n        <Link\n          href=\"/\"\n          className=\"inline-block rounded bg-blue-600 px-4 py-2 font-medium text-white transition-colors hover:bg-blue-700\"\n        >\n          Go back home\n        </Link>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/app/not-found.tsx",
          "lineCount": 19,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/notifications/page.tsx",
      "lineCount": 25,
      "functions": [
        {
          "name": "NotificationsPage",
          "startLine": 18,
          "endLine": 24,
          "code": "export default function NotificationsPage() {\n  return (\n    <ProtectedRoute>\n      <NotificationsContent />\n    </ProtectedRoute>\n  );\n}\n",
          "filePath": "src/app/notifications/page.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/page-simple.tsx",
      "lineCount": 58,
      "functions": [
        {
          "name": "SimpleHomePage",
          "startLine": 5,
          "endLine": 57,
          "code": "export default function SimpleHomePage() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12\">\n      <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-12 text-center\">\n          <h1 className=\"mb-4 text-4xl font-bold text-gray-900\">Welcome to RBI System</h1>\n          <p className=\"mb-8 text-xl text-gray-600\">Records of Barangay Inhabitant System</p>\n          <p className=\"text-lg text-gray-500\">\n            Complete digital solution for Philippine barangay resident management\n          </p>\n        </div>\n\n        <div className=\"mb-8 text-center\">\n          <Link\n            href=\"/login\"\n            className=\"inline-flex items-center rounded-md border border-transparent bg-blue-600 px-6 py-3 text-base font-medium text-white hover:bg-blue-700\"\n          >\n            Go to Login\n          </Link>\n        </div>\n\n        <div className=\"mt-12 grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3\">\n          <div className=\"overflow-hidden rounded-lg bg-white shadow\">\n            <div className=\"p-6\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Resident Management</h3>\n              <p className=\"mt-2 text-sm text-gray-500\">\n                5-step registration with validation, complete demographics, and PSOC integration.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"overflow-hidden rounded-lg bg-white shadow\">\n            <div className=\"p-6\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Address System</h3>\n              <p className=\"mt-2 text-sm text-gray-500\">\n                Complete Philippine geographic hierarchy with cascading dropdowns and validation.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"overflow-hidden rounded-lg bg-white shadow\">\n            <div className=\"p-6\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Search & Analytics</h3>\n              <p className=\"mt-2 text-sm text-gray-500\">\n                Global search, advanced filtering, and comprehensive analytics dashboard.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/app/page-simple.tsx",
          "lineCount": 53,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "SimpleHomePage",
          "line": 5,
          "message": "Function 'SimpleHomePage' has 53 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/app/page.tsx",
      "lineCount": 287,
      "functions": [
        {
          "name": "HomePage",
          "startLine": 17,
          "endLine": 286,
          "code": "export default function HomePage() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary-50 to-primary-100 dark:from-neutral-900 dark:to-neutral-800\">\n      {/* Header */}\n      <header className=\"border-b shadow-sm bg-surface border-default\">\n        <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex h-16 items-center justify-between\">\n            <div className=\"flex items-center\">\n              <span className=\"font-display text-xl font-semibold text-primary\">Citizenly</span>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Link\n                href=\"/login\"\n                className=\"rounded-md px-3 py-2 text-sm font-medium transition-colors text-secondary hover:text-primary\"\n              >\n                Sign In\n              </Link>\n              <Link href=\"/login\">\n                <Button variant=\"primary\" size=\"sm\">\n                  Get Started\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <main className=\"mx-auto max-w-7xl px-4 py-12 sm:px-6 lg:px-8\">\n        <div className=\"text-center\">\n          <h1 className=\"font-display text-4xl font-extrabold tracking-tight text-primary sm:text-5xl md:text-6xl\">\n            <span className=\"block\">Citizenly</span>\n            <span className=\"mt-2 block text-2xl text-primary-600 sm:text-3xl md:text-4xl\">\n              Records of Barangay Inhabitant System\n            </span>\n          </h1>\n          <p className=\"mx-auto mt-3 max-w-md text-base font-body text-secondary sm:text-lg md:mt-5 md:max-w-3xl md:text-xl\">\n            Complete digital solution for Philippine barangay resident management, built for local\n            government units to efficiently manage their communities.\n          </p>\n          <div className=\"mx-auto mt-5 max-w-md sm:flex sm:justify-center md:mt-8\">\n            <div className=\"rounded-md shadow\">\n              <Link href=\"/login\">\n                <Button variant=\"primary\" size=\"lg\" className=\"w-full sm:w-auto\">\n                  Get Started\n                </Button>\n              </Link>\n            </div>\n            <div className=\"mt-3 rounded-md shadow sm:ml-3 sm:mt-0\">\n              <Link href=\"/dashboard\">\n                <Button variant=\"secondary\" size=\"lg\" className=\"w-full sm:w-auto\">\n                  View Demo\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"mt-20\">\n          <div className=\"text-center\">\n            <h2 className=\"mb-12 font-display text-3xl font-extrabold text-primary\">\n              Everything you need to manage your barangay\n            </h2>\n          </div>\n\n          <div className=\"grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3\">\n            {/* Resident Management */}\n            <div className=\"rounded-xl border p-8 shadow-md transition-shadow bg-surface border-default hover:shadow-lg dark:border-neutral-700 dark:bg-neutral-800\">\n              <div className=\"mb-4 flex size-12 items-center justify-center rounded-lg bg-primary-100 dark:bg-primary-900/20\">\n                <svg\n                  className=\"size-6 text-primary-600 dark:text-primary-400\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z\"\n                  />\n                </svg>\n              </div>\n              <h3 className=\"mb-2 font-display text-xl font-semibold text-primary\">\n                Resident Management\n              </h3>\n              <p className=\"font-body text-secondary\">\n                Complete resident registration with demographics, family relationships, and PSOC\n                integration for comprehensive household management.\n              </p>\n            </div>\n\n            {/* Address System */}\n            <div className=\"rounded-xl border p-8 shadow-md transition-shadow bg-surface border-default hover:shadow-lg dark:border-neutral-700 dark:bg-neutral-800\">\n              <div className=\"mb-4 flex size-12 items-center justify-center rounded-lg bg-success-100 dark:bg-success-900/20\">\n                <svg\n                  className=\"size-6 text-success-600 dark:text-success-400\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M17.657 16.657L13.414 12.414a2 2 0 10-2.828 2.828l4.243 4.243a2 2 0 002.828-2.828z\"\n                  />\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M15 11a4 4 0 11-8 0 4 4 0 018 0z\"\n                  />\n                </svg>\n              </div>\n              <h3 className=\"mb-2 font-display text-xl font-semibold text-primary\">\n                Smart Address System\n              </h3>\n              <p className=\"font-body text-secondary\">\n                Complete Philippine geographic hierarchy with cascading dropdowns, address\n                validation, and PSGC compliance.\n              </p>\n            </div>\n\n            {/* Analytics */}\n            <div className=\"rounded-xl border p-8 shadow-md transition-shadow bg-surface border-default hover:shadow-lg dark:border-neutral-700 dark:bg-neutral-800\">\n              <div className=\"mb-4 flex size-12 items-center justify-center rounded-lg bg-secondary-100 dark:bg-secondary-900/20\">\n                <svg\n                  className=\"size-6 text-secondary-600 dark:text-secondary-400\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"\n                  />\n                </svg>\n              </div>\n              <h3 className=\"mb-2 font-display text-xl font-semibold text-primary\">\n                Reports & Analytics\n              </h3>\n              <p className=\"font-body text-secondary\">\n                Generate comprehensive reports, population analytics, and demographic insights for\n                informed decision making.\n              </p>\n            </div>\n\n            {/* Search & Filter */}\n            <div className=\"rounded-xl border p-8 shadow-md transition-shadow bg-surface border-default hover:shadow-lg dark:border-neutral-700 dark:bg-neutral-800\">\n              <div className=\"mb-4 flex size-12 items-center justify-center rounded-lg bg-warning-100 dark:bg-warning-900/20\">\n                <svg\n                  className=\"size-6 text-warning-600 dark:text-warning-400\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                  />\n                </svg>\n              </div>\n              <h3 className=\"mb-2 font-display text-xl font-semibold text-primary\">\n                Advanced Search\n              </h3>\n              <p className=\"font-body text-secondary\">\n                Powerful search and filtering capabilities to quickly find residents, households,\n                and generate targeted lists.\n              </p>\n            </div>\n\n            {/* Security */}\n            <div className=\"rounded-xl border p-8 shadow-md transition-shadow bg-surface border-default hover:shadow-lg dark:border-neutral-700 dark:bg-neutral-800\">\n              <div className=\"mb-4 flex size-12 items-center justify-center rounded-lg bg-danger-100 dark:bg-danger-900/20\">\n                <svg\n                  className=\"size-6 text-danger-600 dark:text-danger-400\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\"\n                  />\n                </svg>\n              </div>\n              <h3 className=\"mb-2 font-display text-xl font-semibold text-primary\">\n                Secure & Compliant\n              </h3>\n              <p className=\"font-body text-secondary\">\n                Built with security best practices, data privacy compliance, and role-based access\n                control for safe operations.\n              </p>\n            </div>\n\n            {/* Digital Forms */}\n            <div className=\"rounded-xl border p-8 shadow-md transition-shadow bg-surface border-default hover:shadow-lg dark:border-neutral-700 dark:bg-neutral-800\">\n              <div className=\"mb-4 flex size-12 items-center justify-center rounded-lg bg-rbi-govBlue/10 dark:bg-rbi-govBlue/20\">\n                <svg\n                  className=\"size-6 text-rbi-govBlue dark:text-rbi-govBlue\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\n                  />\n                </svg>\n              </div>\n              <h3 className=\"mb-2 font-display text-xl font-semibold text-primary\">\n                Digital Forms\n              </h3>\n              <p className=\"font-body text-secondary\">\n                Streamlined digital forms for certifications, business permits, and other barangay\n                documents with automated processing.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* CTA Section */}\n        <div className=\"mt-20 rounded-2xl bg-primary-600 shadow-xl dark:bg-primary-700\">\n          <div className=\"px-6 py-12 sm:px-12 sm:py-16 lg:px-16\">\n            <div className=\"text-center\">\n              <h2 className=\"font-display text-3xl font-extrabold text-inverse\">\n                Ready to modernize your barangay?\n              </h2>\n              <p className=\"mt-4 text-lg text-primary-100 font-body dark:text-primary-200\">\n                Join local government units across the Philippines in digitizing their resident\n                management systems.\n              </p>\n              <div className=\"mt-8\">\n                <Link href=\"/login\">\n                  <Button variant=\"secondary\" size=\"lg\">\n                    Start Your Digital Transformation\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"mt-20 border-t bg-surface border-default dark:border-neutral-700 dark:bg-neutral-900\">\n        <div className=\"mx-auto max-w-7xl px-4 py-12 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <div className=\"mb-4 flex items-center justify-center\">\n              <span className=\"font-display text-xl font-semibold text-primary\">Citizenly</span>\n            </div>\n            <p className=\"font-body text-secondary\">\n              © 2024 Citizenly. Built for Philippine Local Government Units.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n",
          "filePath": "src/app/page.tsx",
          "lineCount": 270,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "HomePage",
          "line": 17,
          "message": "Function 'HomePage' has 270 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/app/rbi-form/page.tsx",
      "lineCount": 72,
      "functions": [
        {
          "name": "RBIFormPage",
          "startLine": 65,
          "endLine": 71,
          "code": "export default function RBIFormPage() {\n  return (\n    <ProtectedRoute requirePermission=\"residents_view\">\n      <RBIFormContent />\n    </ProtectedRoute>\n  );\n}\n",
          "filePath": "src/app/rbi-form/page.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/reports/page.tsx",
      "lineCount": 25,
      "functions": [
        {
          "name": "ReportsPage",
          "startLine": 18,
          "endLine": 24,
          "code": "export default function ReportsPage() {\n  return (\n    <ProtectedRoute>\n      <ReportsContent />\n    </ProtectedRoute>\n  );\n}\n",
          "filePath": "src/app/reports/page.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/residents/[id]/page.tsx",
      "lineCount": 156,
      "functions": [
        {
          "name": "Tooltip",
          "startLine": 18,
          "endLine": 38,
          "code": "const Tooltip = ({ children, content }: { children: React.ReactNode; content: string }) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  return (\n    <div className=\"relative inline-block\">\n      <div\n        onMouseEnter={() => setIsVisible(true)}\n        onMouseLeave={() => setIsVisible(false)}\n        className=\"cursor-help\"\n      >\n        {children}\n      </div>\n      {isVisible && (\n        <div className=\"tooltip text-inverse absolute bottom-full left-1/2 z-10 -translate-x-1/2 -translate-y-2 whitespace-nowrap rounded-lg bg-neutral-800 px-3 py-2 text-sm font-medium shadow-sm\">\n          {content}\n          <div className=\"tooltip-arrow absolute left-1/2 top-full -translate-x-1/2 border-4 border-transparent border-t-neutral-800\"></div>\n        </div>\n      )}\n    </div>\n  );\n};\n",
          "filePath": "src/app/residents/[id]/page.tsx",
          "lineCount": 21,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "ResidentDetailPage",
          "startLine": 149,
          "endLine": 155,
          "code": "export default function ResidentDetailPage() {\n  return (\n    <ProtectedRoute requirePermission=\"residents_view\">\n      <ResidentDetailContent />\n    </ProtectedRoute>\n  );\n}\n",
          "filePath": "src/app/residents/[id]/page.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/residents/create/page.tsx",
      "lineCount": 27,
      "functions": [
        {
          "name": "CreateResidentPage",
          "startLine": 20,
          "endLine": 26,
          "code": "export default function CreateResidentPage() {\n  return (\n    <ProtectedRoute requirePermission=\"residents_create\">\n      <CreateResidentForm />\n    </ProtectedRoute>\n  );\n}\n",
          "filePath": "src/app/residents/create/page.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/residents/page.tsx",
      "lineCount": 55,
      "functions": [
        {
          "name": "ResidentsPage",
          "startLine": 48,
          "endLine": 54,
          "code": "export default function ResidentsPage() {\n  return (\n    <ProtectedRoute requirePermission=\"residents_view\">\n      <ResidentsContent />\n    </ProtectedRoute>\n  );\n}\n",
          "filePath": "src/app/residents/page.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/app/settings/page.tsx",
      "lineCount": 663,
      "functions": [
        {
          "name": "SettingsPage",
          "startLine": 16,
          "endLine": 662,
          "code": "export default function SettingsPage() {\n  const { theme, actualTheme, setTheme } = useTheme();\n  const [activeTab, setActiveTab] = useState('general');\n  const [notifications, setNotifications] = useState({\n    email: true,\n    sms: false,\n    push: true,\n  });\n  const [systemSettings, setSystemSettings] = useState({\n    autoBackup: true,\n    maintenance: false,\n    debugMode: false,\n  });\n\n  const tabs = [\n    { id: 'general', name: 'General', description: 'Basic configuration' },\n    { id: 'security', name: 'Security', description: 'Authentication & policies' },\n    { id: 'database', name: 'Database', description: 'Connection & performance' },\n    { id: 'notifications', name: 'Notifications', description: 'Alerts & messaging' },\n    { id: 'users', name: 'Users', description: 'Access management' },\n    { id: 'system', name: 'System', description: 'Advanced settings' },\n  ];\n\n  return (\n    <DashboardLayout>\n      <div className=\"p-6\">\n        {/* Page Header */}\n        <div className=\"mb-6 flex items-start justify-between\">\n          <div>\n            <h1 className=\"font-montserrat mb-0.5 text-xl font-semibold text-primary\">Settings</h1>\n            <p className=\"font-montserrat text-sm font-normal text-secondary\">\n              Configure your system preferences and administrative settings\n            </p>\n          </div>\n        </div>\n\n        {/* Tab Navigation */}\n        <div className=\"mb-6\">\n          <div className=\"border-b border-default\">\n            <nav className=\"flex space-x-8\">\n              {tabs.map(tab => (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  className={`font-montserrat whitespace-nowrap border-b-2 px-1 py-2 text-sm font-medium ${\n                    activeTab === tab.id\n                      ? 'border-blue-500 text-primary'\n                      : 'border-transparent text-secondary hover:text-primary hover:border-default'\n                  }`}\n                >\n                  {tab.name}\n                </button>\n              ))}\n            </nav>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"overflow-hidden rounded border bg-surface border-default\">\n          <div className=\"p-6\">\n            {/* General Settings */}\n            {activeTab === 'general' && (\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"font-montserrat mb-2 text-lg font-semibold text-primary\">\n                    General Settings\n                  </h3>\n                  <p className=\"font-montserrat text-sm font-normal text-secondary\">\n                    Basic system configuration and preferences\n                  </p>\n                </div>\n\n                {/* Theme Selection */}\n                <div className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-montserrat mb-1 text-base font-medium text-primary\">\n                      Appearance\n                    </h4>\n                    <p className=\"font-montserrat text-sm font-normal text-secondary\">\n                      {theme === 'system'\n                        ? `Following system preference (${actualTheme})`\n                        : `Using ${theme} theme`}\n                    </p>\n                  </div>\n\n                  <div className=\"grid grid-cols-3 gap-3\">\n                    {/* Light Theme */}\n                    <button\n                      onClick={() => setTheme('light')}\n                      className={`relative flex flex-col items-center rounded border p-4 transition-colors ${\n                        theme === 'light'\n                          ? 'border-blue-500 bg-blue-50'\n                          : 'bg-surface border-default hover:bg-surface-hover'\n                      }`}\n                    >\n                      <div className=\"mb-2 flex size-8 items-center justify-center rounded border bg-surface border-default\">\n                        <svg\n                          className=\"size-4 text-amber-500\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"\n                          />\n                        </svg>\n                      </div>\n                      <span\n                        className={`font-montserrat text-sm font-medium ${theme === 'light' ? 'text-blue-700' : 'text-primary'}`}\n                      >\n                        Light\n                      </span>\n                      {theme === 'light' && (\n                        <div className=\"absolute right-2 top-2 size-2 rounded-full bg-blue-500\"></div>\n                      )}\n                    </button>\n\n                    {/* Dark Theme */}\n                    <button\n                      onClick={() => setTheme('dark')}\n                      className={`relative flex flex-col items-center rounded border p-4 transition-colors ${\n                        theme === 'dark'\n                          ? 'border-blue-500 bg-blue-50'\n                          : 'bg-surface border-default hover:bg-surface-hover'\n                      }`}\n                    >\n                      <div className=\"mb-2 flex size-8 items-center justify-center rounded border border-slate-600 bg-slate-800\">\n                        <svg\n                          className=\"size-4 text-slate-300\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\"\n                          />\n                        </svg>\n                      </div>\n                      <span\n                        className={`font-montserrat text-sm font-medium ${theme === 'dark' ? 'text-blue-700' : 'text-primary'}`}\n                      >\n                        Dark\n                      </span>\n                      {theme === 'dark' && (\n                        <div className=\"absolute right-2 top-2 size-2 rounded-full bg-blue-500\"></div>\n                      )}\n                    </button>\n\n                    {/* System Theme */}\n                    <button\n                      onClick={() => setTheme('system')}\n                      className={`relative flex flex-col items-center rounded border p-4 transition-colors ${\n                        theme === 'system'\n                          ? 'border-blue-500 bg-blue-50'\n                          : 'bg-surface border-default hover:bg-surface-hover'\n                      }`}\n                    >\n                      <div className=\"from-surface mb-2 flex size-8 items-center justify-center rounded border bg-gradient-to-br to-slate-800 border-default\">\n                        <svg\n                          className=\"size-4 text-secondary\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"\n                          />\n                        </svg>\n                      </div>\n                      <span\n                        className={`font-montserrat text-sm font-medium ${theme === 'system' ? 'text-blue-700' : 'text-primary'}`}\n                      >\n                        System\n                      </span>\n                      {theme === 'system' && (\n                        <div className=\"absolute right-2 top-2 size-2 rounded-full bg-blue-500\"></div>\n                      )}\n                    </button>\n                  </div>\n                </div>\n\n                <div className=\"mt-6 grid grid-cols-1 gap-6 sm:grid-cols-2\">\n                  <div className=\"space-y-2\">\n                    <label className=\"font-montserrat block text-sm font-medium text-secondary\">\n                      System Name\n                    </label>\n                    <input\n                      type=\"text\"\n                      defaultValue=\"RBI System - Barangay Records\"\n                      className=\"block w-full rounded border px-3 py-2 text-primary bg-surface border-default focus:border-blue-500 focus:ring-2 focus:ring-blue-500\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <label className=\"font-montserrat block text-sm font-medium text-secondary\">\n                      Timezone\n                    </label>\n                    <DropdownSelect\n                      options={[\n                        { value: 'Asia/Manila', label: 'Asia/Manila (GMT+8)' },\n                        { value: 'UTC', label: 'UTC (GMT+0)' },\n                      ]}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <label className=\"font-montserrat block text-sm font-medium text-secondary\">\n                      Default Language\n                    </label>\n                    <DropdownSelect\n                      options={[\n                        { value: 'en', label: 'English' },\n                        { value: 'fil', label: 'Filipino' },\n                      ]}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <label className=\"font-montserrat block text-sm font-medium text-secondary\">\n                      Date Format\n                    </label>\n                    <DropdownSelect\n                      options={[\n                        { value: 'MM/DD/YYYY', label: 'MM/DD/YYYY' },\n                        { value: 'DD/MM/YYYY', label: 'DD/MM/YYYY' },\n                        { value: 'YYYY-MM-DD', label: 'YYYY-MM-DD' },\n                      ]}\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Security Settings */}\n            {activeTab === 'security' && (\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"font-montserrat mb-2 text-lg font-semibold text-primary\">\n                    Security Settings\n                  </h3>\n                  <p className=\"font-montserrat text-sm font-normal text-secondary\">\n                    Configure authentication and security policies\n                  </p>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between rounded border p-4 bg-surface-hover border-default\">\n                    <div>\n                      <h4 className=\"font-montserrat text-base font-medium text-primary\">\n                        Two-Factor Authentication\n                      </h4>\n                      <p className=\"font-montserrat mt-1 text-sm font-normal text-secondary\">\n                        Require 2FA for all admin accounts\n                      </p>\n                    </div>\n                    <button\n                      type=\"button\"\n                      className=\"relative inline-flex h-6 w-11 shrink-0 cursor-pointer rounded-full border-2 border-transparent bg-blue-600 transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n                    >\n                      <span className=\"inline-block size-4 translate-x-5 rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out dark:bg-neutral-200\"></span>\n                    </button>\n                  </div>\n\n                  <div className=\"flex items-center justify-between rounded border p-4 bg-surface-hover border-default\">\n                    <div>\n                      <h4 className=\"font-montserrat text-base font-medium text-primary\">\n                        Session Timeout\n                      </h4>\n                      <p className=\"font-montserrat mt-1 text-sm font-normal text-secondary\">\n                        Automatic logout after inactivity\n                      </p>\n                    </div>\n                    <div className=\"w-48\">\n                      <DropdownSelect\n                        options={[\n                          { value: '30', label: '30 minutes' },\n                          { value: '60', label: '1 hour' },\n                          { value: '120', label: '2 hours' },\n                          { value: 'never', label: 'Never' },\n                        ]}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between rounded border p-4 bg-surface-hover border-default\">\n                    <div>\n                      <h4 className=\"font-montserrat text-base font-medium text-primary\">\n                        Password Complexity\n                      </h4>\n                      <p className=\"font-montserrat mt-1 text-sm font-normal text-secondary\">\n                        Enforce strong password requirements\n                      </p>\n                    </div>\n                    <button\n                      type=\"button\"\n                      className=\"relative inline-flex h-6 w-11 shrink-0 cursor-pointer rounded-full border-2 border-transparent bg-blue-600 transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n                    >\n                      <span className=\"inline-block size-4 translate-x-5 rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out dark:bg-neutral-200\"></span>\n                    </button>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Database Settings */}\n            {activeTab === 'database' && (\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"font-montserrat mb-2 text-lg font-semibold text-primary\">\n                    Database Configuration\n                  </h3>\n                  <p className=\"font-montserrat text-sm font-normal text-secondary\">\n                    Database connection and maintenance settings\n                  </p>\n                </div>\n\n                <div className=\"rounded border border-green-200 bg-green-50 p-4\">\n                  <div className=\"flex items-center\">\n                    <div className=\"shrink-0\">\n                      <div className=\"flex size-8 items-center justify-center rounded bg-green-500\">\n                        <div className=\"size-2 rounded-full bg-white dark:bg-neutral-200\"></div>\n                      </div>\n                    </div>\n                    <div className=\"ml-3\">\n                      <h4 className=\"font-montserrat text-base font-medium text-green-900\">\n                        Database Connected\n                      </h4>\n                      <p className=\"font-montserrat text-sm font-normal text-green-700\">\n                        Successfully connected to Supabase PostgreSQL database\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n                  <div className=\"rounded border p-4 bg-surface-hover border-default\">\n                    <h4 className=\"font-montserrat mb-4 text-base font-medium text-primary\">\n                      Connection Status\n                    </h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-montserrat text-sm font-normal text-secondary\">\n                          Host:\n                        </span>\n                        <span className=\"font-montserrat text-sm font-medium text-primary\">\n                          Supabase\n                        </span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-montserrat text-sm font-normal text-secondary\">\n                          Database:\n                        </span>\n                        <span className=\"font-montserrat text-sm font-medium text-primary\">\n                          postgres\n                        </span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-montserrat text-sm font-normal text-secondary\">\n                          Status:\n                        </span>\n                        <span className=\"inline-flex items-center rounded bg-green-100 px-2 py-1 text-xs font-medium text-green-800\">\n                          Connected\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"rounded border p-4 bg-surface-hover border-default\">\n                    <h4 className=\"font-montserrat mb-4 text-base font-medium text-primary\">\n                      Performance\n                    </h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-montserrat text-sm font-normal text-secondary\">\n                          Avg Response:\n                        </span>\n                        <span className=\"font-montserrat text-sm font-medium text-primary\">\n                          &lt;50ms\n                        </span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-montserrat text-sm font-normal text-secondary\">\n                          Uptime:\n                        </span>\n                        <span className=\"font-montserrat text-sm font-medium text-primary\">\n                          99.9%\n                        </span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-montserrat text-sm font-normal text-secondary\">\n                          Coverage:\n                        </span>\n                        <span className=\"font-montserrat text-sm font-medium text-primary\">\n                          91.3%\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Notifications Settings */}\n            {activeTab === 'notifications' && (\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"font-montserrat mb-2 text-lg font-semibold text-primary\">\n                    Notification Preferences\n                  </h3>\n                  <p className=\"font-montserrat text-sm font-normal text-secondary\">\n                    Configure how you receive system notifications\n                  </p>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between rounded border p-4 bg-surface-hover border-default\">\n                    <div>\n                      <h4 className=\"font-montserrat text-base font-medium text-primary\">\n                        Email Notifications\n                      </h4>\n                      <p className=\"font-montserrat text-sm font-normal text-secondary\">\n                        Receive updates via email\n                      </p>\n                    </div>\n                    <button\n                      type=\"button\"\n                      onClick={() =>\n                        setNotifications({ ...notifications, email: !notifications.email })\n                      }\n                      className={`relative inline-flex h-6 w-11 shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${\n                        notifications.email ? 'bg-blue-600' : 'bg-neutral-300 dark:bg-neutral-600'\n                      }`}\n                    >\n                      <span\n                        className={`${notifications.email ? 'translate-x-5' : 'translate-x-0'} inline-block size-4 rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out dark:bg-neutral-200`}\n                      ></span>\n                    </button>\n                  </div>\n\n                  <div className=\"flex items-center justify-between rounded border p-4 bg-surface-hover border-default\">\n                    <div>\n                      <h4 className=\"font-montserrat text-base font-medium text-primary\">\n                        SMS Notifications\n                      </h4>\n                      <p className=\"font-montserrat text-sm font-normal text-secondary\">\n                        Receive urgent alerts via SMS\n                      </p>\n                    </div>\n                    <button\n                      type=\"button\"\n                      onClick={() =>\n                        setNotifications({ ...notifications, sms: !notifications.sms })\n                      }\n                      className={`relative inline-flex h-6 w-11 shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${\n                        notifications.sms ? 'bg-blue-600' : 'bg-neutral-300 dark:bg-neutral-600'\n                      }`}\n                    >\n                      <span\n                        className={`${notifications.sms ? 'translate-x-5' : 'translate-x-0'} inline-block size-4 rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out dark:bg-neutral-200`}\n                      ></span>\n                    </button>\n                  </div>\n\n                  <div className=\"flex items-center justify-between rounded border p-4 bg-surface-hover border-default\">\n                    <div>\n                      <h4 className=\"font-montserrat text-base font-medium text-primary\">\n                        Push Notifications\n                      </h4>\n                      <p className=\"font-montserrat text-sm font-normal text-secondary\">\n                        Browser push notifications\n                      </p>\n                    </div>\n                    <button\n                      type=\"button\"\n                      onClick={() =>\n                        setNotifications({ ...notifications, push: !notifications.push })\n                      }\n                      className={`relative inline-flex h-6 w-11 shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${\n                        notifications.push ? 'bg-blue-600' : 'bg-neutral-300 dark:bg-neutral-600'\n                      }`}\n                    >\n                      <span\n                        className={`${notifications.push ? 'translate-x-5' : 'translate-x-0'} inline-block size-4 rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out dark:bg-neutral-200`}\n                      ></span>\n                    </button>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Users Settings */}\n            {activeTab === 'users' && (\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"font-montserrat mb-2 text-lg font-semibold text-primary\">\n                    User Management\n                  </h3>\n                  <p className=\"font-montserrat text-sm font-normal text-secondary\">\n                    Manage system users and access permissions\n                  </p>\n                </div>\n\n                <div className=\"rounded border border-amber-200 bg-amber-50 p-4\">\n                  <div className=\"flex items-center\">\n                    <div className=\"shrink-0\">\n                      <div className=\"flex size-8 items-center justify-center rounded bg-amber-500\">\n                        <div className=\"size-1 rounded-full bg-white dark:bg-neutral-200\"></div>\n                        <div className=\"ml-0.5 size-1 rounded-full bg-white dark:bg-neutral-200\"></div>\n                        <div className=\"ml-0.5 size-1 rounded-full bg-white dark:bg-neutral-200\"></div>\n                      </div>\n                    </div>\n                    <div className=\"ml-3\">\n                      <h4 className=\"font-montserrat text-base font-medium text-amber-900\">\n                        Feature Coming Soon\n                      </h4>\n                      <p className=\"font-montserrat text-sm font-normal text-amber-700\">\n                        User management functionality will be available in the next release.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* System Settings */}\n            {activeTab === 'system' && (\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"font-montserrat mb-2 text-lg font-semibold text-primary\">\n                    System Settings\n                  </h3>\n                  <p className=\"font-montserrat text-sm font-normal text-secondary\">\n                    Advanced system configuration and maintenance\n                  </p>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between rounded border p-4 bg-surface-hover border-default\">\n                    <div>\n                      <h4 className=\"font-montserrat text-base font-medium text-primary\">\n                        Automatic Backup\n                      </h4>\n                      <p className=\"font-montserrat text-sm font-normal text-secondary\">\n                        Daily database backups\n                      </p>\n                    </div>\n                    <button\n                      type=\"button\"\n                      onClick={() =>\n                        setSystemSettings({\n                          ...systemSettings,\n                          autoBackup: !systemSettings.autoBackup,\n                        })\n                      }\n                      className={`relative inline-flex h-6 w-11 shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${\n                        systemSettings.autoBackup ? 'bg-blue-600' : 'bg-gray-200'\n                      }`}\n                    >\n                      <span\n                        className={`${systemSettings.autoBackup ? 'translate-x-5' : 'translate-x-0'} inline-block size-4 rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out dark:bg-neutral-200`}\n                      ></span>\n                    </button>\n                  </div>\n\n                  <div className=\"flex items-center justify-between rounded border p-4 bg-surface-hover border-default\">\n                    <div>\n                      <h4 className=\"font-montserrat text-base font-medium text-primary\">\n                        Maintenance Mode\n                      </h4>\n                      <p className=\"font-montserrat text-sm font-normal text-secondary\">\n                        Temporarily disable public access\n                      </p>\n                    </div>\n                    <button\n                      type=\"button\"\n                      onClick={() =>\n                        setSystemSettings({\n                          ...systemSettings,\n                          maintenance: !systemSettings.maintenance,\n                        })\n                      }\n                      className={`relative inline-flex h-6 w-11 shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 ${\n                        systemSettings.maintenance ? 'bg-red-600' : 'bg-gray-200'\n                      }`}\n                    >\n                      <span\n                        className={`${systemSettings.maintenance ? 'translate-x-5' : 'translate-x-0'} inline-block size-4 rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out dark:bg-neutral-200`}\n                      ></span>\n                    </button>\n                  </div>\n\n                  <div className=\"flex items-center justify-between rounded border p-4 bg-surface-hover border-default\">\n                    <div>\n                      <h4 className=\"font-montserrat text-base font-medium text-primary\">\n                        Debug Mode\n                      </h4>\n                      <p className=\"font-montserrat text-sm font-normal text-secondary\">\n                        Enable detailed error logging\n                      </p>\n                    </div>\n                    <button\n                      type=\"button\"\n                      onClick={() =>\n                        setSystemSettings({\n                          ...systemSettings,\n                          debugMode: !systemSettings.debugMode,\n                        })\n                      }\n                      className={`relative inline-flex h-6 w-11 shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${\n                        systemSettings.debugMode ? 'bg-blue-600' : 'bg-gray-200'\n                      }`}\n                    >\n                      <span\n                        className={`${systemSettings.debugMode ? 'translate-x-5' : 'translate-x-0'} inline-block size-4 rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out dark:bg-neutral-200`}\n                      ></span>\n                    </button>\n                  </div>\n                </div>\n\n                <div className=\"border-t pt-6 border-default\">\n                  <Button variant=\"danger\" size=\"md\">\n                    Reset System Settings\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            {/* Save Button */}\n            <div className=\"border-t pt-8 border-default\">\n              <div className=\"flex justify-end\">\n                <Button variant=\"primary\" size=\"md\">\n                  Save Changes\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n}\n",
          "filePath": "src/app/settings/page.tsx",
          "lineCount": 647,
          "cyclomaticComplexity": 30,
          "cognitiveComplexity": 25
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 663 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "SettingsPage",
          "line": 16,
          "message": "Function 'SettingsPage' has 647 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "SettingsPage",
          "line": 16,
          "complexity": 30,
          "message": "Function 'SettingsPage' has cyclomatic complexity of 30 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "SettingsPage",
          "line": 16,
          "complexity": 25,
          "message": "Function 'SettingsPage' has cognitive complexity of 25 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/app/signup/page.tsx",
      "lineCount": 544,
      "functions": [
        {
          "name": "SignupPage",
          "startLine": 37,
          "endLine": 543,
          "code": "export default function SignupPage() {\n  const [formData, setFormData] = useState<SignupFormData>({\n    email: '',\n    password: '',\n    confirmPassword: '',\n    firstName: '',\n    lastName: '',\n    mobileNumber: '',\n    barangayCode: '',\n  });\n  const [errors, setErrors] = useState<{ [key: string]: string }>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [step, setStep] = useState<'form' | 'success'>('form');\n  const [assignedRole, setAssignedRole] = useState<string>('');\n  const [submitStatus, setSubmitStatus] = useState<string>('');\n\n  // Barangay admin checking now handled by database trigger after email confirmation\n\n  const handleChange = (field: keyof SignupFormData, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors: { [key: string]: string } = {};\n\n    // Email validation\n    if (!formData.email.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n      newErrors.email = 'Please enter a valid email address';\n    }\n\n    // Password validation\n    if (!formData.password) {\n      newErrors.password = 'Password is required';\n    } else if (formData.password.length < 8) {\n      newErrors.password = 'Password must be at least 8 characters';\n    } else if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(formData.password)) {\n      newErrors.password =\n        'Password must contain at least one uppercase letter, one lowercase letter, and one number';\n    }\n\n    // Confirm password validation\n    if (!formData.confirmPassword) {\n      newErrors.confirmPassword = 'Please confirm your password';\n    } else if (formData.password !== formData.confirmPassword) {\n      newErrors.confirmPassword = 'Passwords do not match';\n    }\n\n    // Name validation\n    if (!formData.firstName.trim()) {\n      newErrors.firstName = 'First name is required';\n    }\n    if (!formData.lastName.trim()) {\n      newErrors.lastName = 'Last name is required';\n    }\n\n    // Mobile number validation\n    if (!formData.mobileNumber.trim()) {\n      newErrors.mobileNumber = 'Mobile number is required';\n    } else if (!/^(09|\\+639)\\d{9}$/.test(formData.mobileNumber.replace(/\\s+/g, ''))) {\n      newErrors.mobileNumber = 'Please enter a valid Philippine mobile number';\n    }\n\n    // Barangay validation\n    if (!formData.barangayCode) {\n      newErrors.barangayCode = 'Please select your barangay';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) return;\n\n    setIsSubmitting(true);\n\n    // Add timeout to prevent infinite loading\n    const timeoutId = setTimeout(() => {\n      logger.error('Signup process timed out after 30 seconds');\n      setIsSubmitting(false);\n      setErrors({ general: 'Signup process timed out. Please try again.' });\n    }, 30000); // 30 second timeout\n\n    try {\n      // Step 1: Create auth user with metadata for post-confirmation processing\n      setSubmitStatus('Creating your account...');\n      console.log('🔄 Attempting signup with email:', formData.email);\n      \n      // Check if we're in development mode (disable emails to prevent bounces)\n      const isDevelopment = process.env.NODE_ENV === 'development';\n      \n      const { data: authData, error: authError } = await supabase.auth.signUp({\n        email: formData.email,\n        password: formData.password,\n        options: {\n          data: {\n            first_name: formData.firstName,\n            last_name: formData.lastName,\n            phone: formData.mobileNumber,\n            barangay_code: formData.barangayCode,\n            signup_step: 'awaiting_confirmation'\n          },\n          // In development, don't send confirmation emails\n          emailRedirectTo: isDevelopment ? undefined : `${window.location.origin}/auth/callback`\n        }\n      });\n\n      console.log('📋 Signup result:', {\n        success: !authError,\n        hasUser: !!authData.user,\n        userId: authData.user?.id,\n        error: authError?.message,\n        errorCode: authError?.code\n      });\n\n      if (authError || !authData.user) {\n        console.error('❌ Signup failed:', { \n          error: authError?.message, \n          code: authError?.code,\n          status: authError?.status\n        });\n        throw new Error(authError?.message || 'Failed to create account');\n      }\n\n      console.log('✅ Auth user created successfully:', authData.user.id);\n      console.log('📧 Email confirmation required:', !authData.user.email_confirmed_at);\n\n      // Signup data is already stored in user metadata during supabase.auth.signUp()\n      // Database trigger will process this after email confirmation\n\n      // Success\n      setSubmitStatus('Account created successfully!');\n      setStep('success');\n      setAssignedRole('Barangay Administrator');\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      setErrors({ general: errorMessage });\n      \n      // Log error for debugging\n      logError(\n        error instanceof Error ? error : new Error(errorMessage),\n        'SIGNUP_PROCESS'\n      );\n    } finally {\n      clearTimeout(timeoutId);\n      setIsSubmitting(false);\n      setSubmitStatus('');\n    }\n  };\n\n  // Role assignment now handled by database trigger after email confirmation\n\n  // No auth loading check needed for signup page\n\n  // Success step\n  if (step === 'success') {\n    return (\n      <div className=\"flex min-h-screen flex-col justify-center bg-gray-50 py-12 sm:px-6 lg:px-8\">\n        <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n          <div className=\"rounded-lg bg-white p-8 shadow-md\">\n            <div className=\"text-center\">\n              <div className=\"mx-auto flex size-12 items-center justify-center rounded-full bg-green-100\">\n                <svg\n                  className=\"size-6 text-green-600\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth=\"2\"\n                    d=\"M5 13l4 4L19 7\"\n                  ></path>\n                </svg>\n              </div>\n              <h2 className=\"mt-6 text-2xl font-bold text-gray-900\">\n                Account Created Successfully!\n              </h2>\n\n              <div className=\"mt-4 rounded-lg border border-blue-200 bg-blue-50 p-4\">\n                <h3 className=\"mb-2 text-sm font-medium text-blue-800\">Pending Role Assignment:</h3>\n                <p className=\"text-blue-700\">\n                  You will be assigned as <strong>Barangay Administrator</strong> once you verify your email address.\n                </p>\n                <p className=\"mt-2 text-sm text-blue-600\">\n                  Your role will be automatically assigned after email verification, allowing you to\n                  manage users and data for your barangay.\n                </p>\n              </div>\n\n              <div className=\"mt-4 rounded-lg border border-yellow-200 bg-yellow-50 p-4\">\n                <h3 className=\"mb-2 text-sm font-medium text-yellow-800\">Next Steps:</h3>\n                <ol className=\"list-inside list-decimal space-y-1 text-left text-sm text-yellow-700\">\n                  <li><strong>Check your email</strong> for a verification link from Citizenly</li>\n                  <li><strong>Click the verification link</strong> to confirm your email address</li>\n                  <li><strong>Your administrator account will be automatically activated</strong> after verification</li>\n                  <li><strong>Return to login</strong> and access your dashboard</li>\n                  <li><strong>Start managing your barangay</strong> - add residents and data</li>\n                </ol>\n              </div>\n\n              <div className=\"mt-6\">\n                <Link href=\"/login\">\n                  <Button variant=\"primary\" size=\"regular\">\n                    Go to Login\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex min-h-screen flex-col justify-center bg-gray-50 py-12 sm:px-6 lg:px-8\">\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"text-center\">\n          <h1 className=\"mb-2 text-3xl font-bold text-gray-900\">Create RBI Account</h1>\n          <p className=\"mb-8 text-sm text-gray-600\">\n            Join the Records of Barangay Inhabitant System\n          </p>\n        </div>\n\n        <div className=\"rounded-lg bg-white p-8 shadow-md\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Status Message */}\n            {isSubmitting && submitStatus && (\n              <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"></div>\n                  <div>\n                    <h4 className=\"font-medium text-blue-800\">Creating Account</h4>\n                    <p className=\"text-sm text-blue-700\">{submitStatus}</p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* General Error */}\n            {errors.general && (\n              <div className=\"rounded-lg border border-red-200 bg-red-50 p-4\">\n                <div className=\"flex items-start gap-3\">\n                  <span className=\"mt-0.5 text-red-600\">⚠️</span>\n                  <div>\n                    <h4 className=\"font-medium text-red-800\">Registration Failed</h4>\n                    <p className=\"text-sm text-red-700\">{errors.general}</p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Personal Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"border-b pb-2 text-lg font-medium text-gray-900\">\n                Personal Information\n              </h3>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <InputField\n                  id=\"firstName\"\n                  type=\"text\"\n                  label=\"First Name *\"\n                  value={formData.firstName}\n                  onChange={e => handleChange('firstName', e.target.value)}\n                  placeholder=\"Juan\"\n                  errorMessage={errors.firstName}\n                  disabled={isSubmitting}\n                  autoComplete=\"given-name\"\n                  leftIcon={\n                    <svg\n                      width=\"20\"\n                      height=\"20\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeWidth=\"2\"\n                    >\n                      <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\"></path>\n                      <circle cx=\"12\" cy=\"7\" r=\"4\"></circle>\n                    </svg>\n                  }\n                />\n                <InputField\n                  id=\"lastName\"\n                  type=\"text\"\n                  label=\"Last Name *\"\n                  value={formData.lastName}\n                  onChange={e => handleChange('lastName', e.target.value)}\n                  placeholder=\"Dela Cruz\"\n                  errorMessage={errors.lastName}\n                  disabled={isSubmitting}\n                  autoComplete=\"family-name\"\n                  leftIcon={\n                    <svg\n                      width=\"20\"\n                      height=\"20\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeWidth=\"2\"\n                    >\n                      <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\"></path>\n                      <circle cx=\"12\" cy=\"7\" r=\"4\"></circle>\n                    </svg>\n                  }\n                />\n              </div>\n\n              <InputField\n                id=\"email\"\n                type=\"email\"\n                label=\"Email Address *\"\n                value={formData.email}\n                onChange={e => handleChange('email', e.target.value)}\n                placeholder=\"juan.delacruz@gmail.com\"\n                errorMessage={errors.email}\n                helperText=\"Use a valid email address for account verification\"\n                disabled={isSubmitting}\n                autoComplete=\"email\"\n                leftIcon={\n                  <svg\n                    width=\"20\"\n                    height=\"20\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                  >\n                    <path d=\"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z\"></path>\n                    <polyline points=\"22,6 12,13 2,6\"></polyline>\n                  </svg>\n                }\n              />\n\n              <InputField\n                id=\"mobileNumber\"\n                type=\"tel\"\n                label=\"Mobile Number *\"\n                value={formData.mobileNumber}\n                onChange={e => handleChange('mobileNumber', e.target.value)}\n                placeholder=\"09XX XXX XXXX\"\n                errorMessage={errors.mobileNumber}\n                disabled={isSubmitting}\n                autoComplete=\"tel\"\n                leftIcon={\n                  <svg\n                    width=\"20\"\n                    height=\"20\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                  >\n                    <path d=\"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z\"></path>\n                  </svg>\n                }\n              />\n            </div>\n\n            {/* Location Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"border-b pb-2 text-lg font-medium text-gray-900\">\n                Location Information\n              </h3>\n\n              <div>\n                <label\n                  htmlFor=\"barangayCode\"\n                  className=\"mb-2 block text-sm font-medium text-gray-700\"\n                >\n                  Barangay *\n                </label>\n                <SimpleBarangaySelector\n                  value={formData.barangayCode}\n                  onChange={code => handleChange('barangayCode', code)}\n                  error={errors.barangayCode}\n                  disabled={isSubmitting}\n                  placeholder=\"Search for your barangay...\"\n                />\n              </div>\n            </div>\n\n            {/* Barangay Selection Info */}\n            <div className=\"space-y-4\">\n              <h3 className=\"border-b pb-2 text-lg font-medium text-gray-900\">Role Assignment</h3>\n              <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4\">\n                <h4 className=\"mb-2 text-sm font-medium text-blue-800\">\n                  Automatic Role Assignment\n                </h4>\n                <p className=\"text-sm text-blue-700\">\n                  Your role will be automatically assigned based on your barangay:\n                </p>\n                <ul className=\"mt-2 list-inside list-disc text-sm text-blue-600\">\n                  <li>\n                    If no administrator exists for your barangay →{' '}\n                    <strong>Barangay Administrator</strong>\n                  </li>\n                  <li>\n                    If an administrator already exists → <strong>Registration blocked</strong>\n                    <br />\n                    <small className=\"text-blue-500\">Contact your barangay admin to be invited to the system</small>\n                  </li>\n                </ul>\n              </div>\n            </div>\n\n            {/* Account Security */}\n            <div className=\"space-y-4\">\n              <h3 className=\"border-b pb-2 text-lg font-medium text-gray-900\">Account Security</h3>\n\n              <InputField\n                id=\"password\"\n                type=\"password\"\n                label=\"Password *\"\n                value={formData.password}\n                onChange={e => handleChange('password', e.target.value)}\n                placeholder=\"Create a strong password\"\n                errorMessage={errors.password}\n                disabled={isSubmitting}\n                autoComplete=\"new-password\"\n                leftIcon={\n                  <svg\n                    width=\"20\"\n                    height=\"20\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                  >\n                    <rect x=\"3\" y=\"11\" width=\"18\" height=\"11\" rx=\"2\" ry=\"2\"></rect>\n                    <circle cx=\"12\" cy=\"16\" r=\"1\"></circle>\n                    <path d=\"M7 11V7a5 5 0 0 1 10 0v4\"></path>\n                  </svg>\n                }\n              />\n\n              <InputField\n                id=\"confirmPassword\"\n                type=\"password\"\n                label=\"Confirm Password *\"\n                value={formData.confirmPassword}\n                onChange={e => handleChange('confirmPassword', e.target.value)}\n                placeholder=\"Confirm your password\"\n                errorMessage={errors.confirmPassword}\n                disabled={isSubmitting}\n                autoComplete=\"new-password\"\n                leftIcon={\n                  <svg\n                    width=\"20\"\n                    height=\"20\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                  >\n                    <rect x=\"3\" y=\"11\" width=\"18\" height=\"11\" rx=\"2\" ry=\"2\"></rect>\n                    <circle cx=\"12\" cy=\"16\" r=\"1\"></circle>\n                    <path d=\"M7 11V7a5 5 0 0 1 10 0v4\"></path>\n                  </svg>\n                }\n              />\n            </div>\n\n            {/* Submit Button */}\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting}\n              loading={isSubmitting}\n              variant=\"primary\"\n              size=\"regular\"\n              fullWidth\n            >\n              Create Account\n            </Button>\n          </form>\n\n          {/* Footer */}\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              Already have an account?{' '}\n              <Link href=\"/login\" className=\"font-medium text-blue-600 hover:text-blue-500\">\n                Sign in here\n              </Link>\n            </p>\n            <p className=\"mt-2 text-xs text-gray-500\">\n              By creating an account, you agree to follow barangay policies and data privacy\n              guidelines.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/app/signup/page.tsx",
          "lineCount": 507,
          "cyclomaticComplexity": 37,
          "cognitiveComplexity": 45
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 544 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "SignupPage",
          "line": 37,
          "message": "Function 'SignupPage' has 507 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "SignupPage",
          "line": 37,
          "complexity": 37,
          "message": "Function 'SignupPage' has cyclomatic complexity of 37 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "SignupPage",
          "line": 37,
          "complexity": 45,
          "message": "Function 'SignupPage' has cognitive complexity of 45 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/app/template.tsx",
      "lineCount": 18,
      "functions": [
        {
          "name": "Template",
          "startLine": 15,
          "endLine": 17,
          "code": "export default function Template({ children }: { children: React.ReactNode }) {\n  return <div>{children}</div>;\n}\n",
          "filePath": "src/app/template.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/atoms/Button/Button.stories.tsx",
      "lineCount": 513,
      "functions": [
        {
          "name": "render",
          "startLine": 225,
          "endLine": 226,
          "code": "  render: () => (\n    <div className=\"space-y-6 p-4\">\n",
          "filePath": "src/components/atoms/Button/Button.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 513 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/atoms/Checkbox/Checkbox.stories.tsx",
      "lineCount": 162,
      "functions": [
        {
          "name": "render",
          "startLine": 113,
          "endLine": 114,
          "code": "  render: () => (\n    <div className=\"flex flex-col gap-4\">\n",
          "filePath": "src/components/atoms/Checkbox/Checkbox.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "InteractiveCheckbox",
          "startLine": 122,
          "endLine": 157,
          "code": "const InteractiveCheckbox = () => {\n  const [checked, setChecked] = useState(false);\n  const [indeterminate, setIndeterminate] = useState(false);\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <Checkbox\n        label=\"Interactive checkbox\"\n        description=\"Click to toggle the state\"\n        checked={checked}\n        indeterminate={indeterminate}\n        onChange={e => {\n          setChecked(e.target.checked);\n          setIndeterminate(false);\n        }}\n      />\n      <div className=\"flex gap-2\">\n        <button\n          onClick={() => setIndeterminate(!indeterminate)}\n          className=\"rounded bg-blue-500 px-3 py-1 text-sm text-white\"\n        >\n          Toggle Indeterminate\n        </button>\n        <button\n          onClick={() => {\n            setChecked(false);\n            setIndeterminate(false);\n          }}\n          className=\"rounded bg-gray-500 px-3 py-1 text-sm text-white\"\n        >\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/atoms/Checkbox/Checkbox.stories.tsx",
          "lineCount": 36,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 160,
          "endLine": 161,
          "code": "  render: () => <InteractiveCheckbox />,\n};\n",
          "filePath": "src/components/atoms/Checkbox/Checkbox.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "InteractiveCheckbox",
          "line": 122,
          "message": "Function 'InteractiveCheckbox' has 36 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/atoms/ErrorMessage/ErrorMessage.stories.tsx",
      "lineCount": 226,
      "functions": [
        {
          "name": "render",
          "startLine": 73,
          "endLine": 74,
          "code": "  render: () => (\n    <div className=\"w-full max-w-md space-y-2\">\n",
          "filePath": "src/components/atoms/ErrorMessage/ErrorMessage.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 102,
          "endLine": 103,
          "code": "  render: () => (\n    <div className=\"w-full max-w-md space-y-4\">\n",
          "filePath": "src/components/atoms/ErrorMessage/ErrorMessage.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 136,
          "endLine": 137,
          "code": "  render: () => (\n    <div className=\"w-full max-w-md space-y-4\">\n",
          "filePath": "src/components/atoms/ErrorMessage/ErrorMessage.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 173,
          "endLine": 174,
          "code": "  render: () => (\n    <div className=\"flex items-center space-x-2\">\n",
          "filePath": "src/components/atoms/ErrorMessage/ErrorMessage.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 199,
          "endLine": 200,
          "code": "  render: () => (\n    <div className=\"dark bg-gray-900 p-6 rounded-lg\">\n",
          "filePath": "src/components/atoms/ErrorMessage/ErrorMessage.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/atoms/ErrorMessage/ErrorMessage.tsx",
      "lineCount": 33,
      "functions": [
        {
          "name": "ErrorMessage",
          "startLine": 16,
          "endLine": 29,
          "code": "export default function ErrorMessage({ id, error, className }: ErrorMessageProps) {\n  if (!error) return null;\n\n  return (\n    <span\n      id={id}\n      role=\"alert\"\n      aria-live=\"polite\"\n      className={cn('mt-1 text-sm text-red-600 dark:text-red-400', className)}\n    >\n      {error}\n    </span>\n  );\n}\n",
          "filePath": "src/components/atoms/ErrorMessage/ErrorMessage.tsx",
          "lineCount": 14,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/atoms/IconButton/IconButton.stories.tsx",
      "lineCount": 256,
      "functions": [
        {
          "name": "render",
          "startLine": 122,
          "endLine": 123,
          "code": "  render: () => (\n    <div className=\"flex items-center gap-4\">\n",
          "filePath": "src/components/atoms/IconButton/IconButton.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 134,
          "endLine": 135,
          "code": "  render: () => (\n    <div className=\"grid grid-cols-4 gap-4 items-center\">\n",
          "filePath": "src/components/atoms/IconButton/IconButton.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 164,
          "endLine": 165,
          "code": "  render: () => (\n    <div className=\"flex items-center gap-4\">\n",
          "filePath": "src/components/atoms/IconButton/IconButton.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 174,
          "endLine": 175,
          "code": "  render: () => (\n    <div className=\"flex items-center gap-1 p-2 bg-gray-50 rounded-lg\">\n",
          "filePath": "src/components/atoms/IconButton/IconButton.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 186,
          "endLine": 187,
          "code": "  render: () => (\n    <div className=\"space-y-4\">\n",
          "filePath": "src/components/atoms/IconButton/IconButton.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 240,
          "endLine": 241,
          "code": "  render: () => (\n    <div className=\"relative h-64 bg-gray-100 rounded-lg p-4\">\n",
          "filePath": "src/components/atoms/IconButton/IconButton.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
      "lineCount": 378,
      "functions": [
        {
          "name": "mockUseArrowKeyNavigation",
          "startLine": 6,
          "endLine": 8,
          "code": "const mockUseArrowKeyNavigation = (length: number, onSelect: (index: number) => void) => {\n  return { current: null };\n};\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "DefaultKeyboardNavigableList",
          "startLine": 89,
          "endLine": 104,
          "code": "const DefaultKeyboardNavigableList = () => {\n  const [selected, setSelected] = useState<string>('1');\n\n  return (\n    <div className=\"w-64\">\n      <KeyboardNavigableList\n        items={sampleItems}\n        selectedId={selected}\n        onSelect={item => {\n          setSelected(item.id);\n          console.log('Selected:', item);\n        }}\n      />\n    </div>\n  );\n};\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
          "lineCount": 16,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onSelect",
          "startLine": 109,
          "endLine": 110,
          "code": "    onSelect: () => {},\n  },\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 111,
          "endLine": 112,
          "code": "  render: () => <DefaultKeyboardNavigableList />,\n};\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "MenuKeyboardNavigableList",
          "startLine": 114,
          "endLine": 141,
          "code": "const MenuKeyboardNavigableList = () => {\n  const [selected, setSelected] = useState<string>('');\n\n  const menuItems = [\n    { id: 'new', label: 'New File', value: 'new' },\n    { id: 'open', label: 'Open...', value: 'open' },\n    { id: 'save', label: 'Save', value: 'save' },\n    { id: 'separator', label: '---', disabled: true },\n    { id: 'exit', label: 'Exit', value: 'exit' },\n  ];\n\n  return (\n    <div className=\"w-48 rounded-md border bg-white shadow-lg\">\n      <KeyboardNavigableList\n        role=\"menu\"\n        items={menuItems}\n        selectedId={selected}\n        onSelect={item => {\n          if (item.value !== 'separator') {\n            setSelected(item.id);\n            console.log('Menu action:', item.value);\n          }\n        }}\n        className=\"py-1\"\n      />\n    </div>\n  );\n};\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
          "lineCount": 28,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2
        },
        {
          "name": "onSelect",
          "startLine": 146,
          "endLine": 147,
          "code": "    onSelect: () => {},\n  },\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 148,
          "endLine": 149,
          "code": "  render: () => <MenuKeyboardNavigableList />,\n};\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "HorizontalTabsKeyboardNavigableList",
          "startLine": 151,
          "endLine": 183,
          "code": "const HorizontalTabsKeyboardNavigableList = () => {\n  const [selected, setSelected] = useState<string>('tab1');\n\n  const tabItems = [\n    { id: 'tab1', label: 'General', value: 'general' },\n    { id: 'tab2', label: 'Security', value: 'security' },\n    { id: 'tab3', label: 'Notifications', value: 'notifications' },\n    { id: 'tab4', label: 'Advanced', value: 'advanced' },\n  ];\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"border-b\">\n        <KeyboardNavigableList\n          role=\"tablist\"\n          orientation=\"horizontal\"\n          items={tabItems}\n          selectedId={selected}\n          onSelect={item => {\n            setSelected(item.id);\n            console.log('Tab selected:', item.value);\n          }}\n          className=\"flex border-b-0\"\n          itemClassName=\"border-b-2 border-transparent data-[selected=true]:border-blue-500 rounded-none\"\n        />\n      </div>\n\n      <div className=\"bg-gray-50 p-4\">\n        <p>Content for {tabItems.find(t => t.id === selected)?.label} tab</p>\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
          "lineCount": 33,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onSelect",
          "startLine": 188,
          "endLine": 189,
          "code": "    onSelect: () => {},\n  },\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 190,
          "endLine": 191,
          "code": "  render: () => <HorizontalTabsKeyboardNavigableList />,\n};\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "WithIconsKeyboardNavigableList",
          "startLine": 193,
          "endLine": 230,
          "code": "const WithIconsKeyboardNavigableList = () => {\n  const [selected, setSelected] = useState<string>('');\n\n  const iconItems = [\n    {\n      id: 'profile',\n      label: 'User Profile',\n      icon: UserIcon,\n      value: 'profile',\n    },\n    {\n      id: 'settings',\n      label: 'Settings',\n      icon: SettingsIcon,\n      value: 'settings',\n    },\n    {\n      id: 'documents',\n      label: 'My Documents',\n      icon: FileIcon,\n      value: 'documents',\n    },\n  ];\n\n  return (\n    <div className=\"w-64 rounded-md border\">\n      <KeyboardNavigableList\n        items={iconItems}\n        selectedId={selected}\n        onSelect={item => {\n          setSelected(item.id);\n          console.log('Selected:', item);\n        }}\n        className=\"p-2\"\n      />\n    </div>\n  );\n};\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
          "lineCount": 38,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onSelect",
          "startLine": 235,
          "endLine": 236,
          "code": "    onSelect: () => {},\n  },\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 237,
          "endLine": 238,
          "code": "  render: () => <WithIconsKeyboardNavigableList />,\n};\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "ComposableListItemsComponent",
          "startLine": 240,
          "endLine": 290,
          "code": "const ComposableListItemsComponent = () => {\n  const [selected, setSelected] = useState<string>('item1');\n\n  return (\n    <div className=\"w-80 rounded-md border\" role=\"listbox\">\n      <ListItem\n        selected={selected === 'item1'}\n        onClick={() => setSelected('item1')}\n        className=\"p-3\"\n      >\n        <div className=\"flex items-center gap-3\">\n          <div className=\"flex size-8 items-center justify-center rounded-full bg-blue-500 text-sm font-bold text-white\">\n            JD\n          </div>\n          <div>\n            <div className=\"font-medium\">John Doe</div>\n            <div className=\"text-sm text-gray-500\">john@example.com</div>\n          </div>\n        </div>\n      </ListItem>\n\n      <ListItem\n        selected={selected === 'item2'}\n        onClick={() => setSelected('item2')}\n        className=\"p-3\"\n      >\n        <div className=\"flex items-center gap-3\">\n          <div className=\"flex size-8 items-center justify-center rounded-full bg-green-500 text-sm font-bold text-white\">\n            JS\n          </div>\n          <div>\n            <div className=\"font-medium\">Jane Smith</div>\n            <div className=\"text-sm text-gray-500\">jane@example.com</div>\n          </div>\n        </div>\n      </ListItem>\n\n      <ListItem selected={selected === 'item3'} disabled className=\"p-3\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"flex size-8 items-center justify-center rounded-full bg-gray-400 text-sm font-bold text-white\">\n            BJ\n          </div>\n          <div>\n            <div className=\"font-medium\">Bob Johnson</div>\n            <div className=\"text-sm text-gray-500\">Unavailable</div>\n          </div>\n        </div>\n      </ListItem>\n    </div>\n  );\n};\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
          "lineCount": 51,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onSelect",
          "startLine": 295,
          "endLine": 296,
          "code": "    onSelect: () => {},\n  },\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 297,
          "endLine": 298,
          "code": "  render: () => <ComposableListItemsComponent />,\n};\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "LongListKeyboardNavigableList",
          "startLine": 300,
          "endLine": 322,
          "code": "const LongListKeyboardNavigableList = () => {\n  const [selected, setSelected] = useState<string>('');\n\n  const longList = Array.from({ length: 10 }, (_, i) => ({\n    id: `item-${i}`,\n    label: `List Item ${i + 1}`,\n    value: `value-${i}`,\n    disabled: i === 3 || i === 7, // Disable some items\n  }));\n\n  return (\n    <div className=\"max-h-64 w-64 overflow-y-auto rounded-md border\">\n      <KeyboardNavigableList\n        items={longList}\n        selectedId={selected}\n        onSelect={item => {\n          setSelected(item.id);\n          console.log('Selected:', item);\n        }}\n      />\n    </div>\n  );\n};\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
          "lineCount": 23,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "onSelect",
          "startLine": 327,
          "endLine": 328,
          "code": "    onSelect: () => {},\n  },\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 329,
          "endLine": 330,
          "code": "  render: () => <LongListKeyboardNavigableList />,\n};\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "AccessibilityDemoComponent",
          "startLine": 332,
          "endLine": 369,
          "code": "const AccessibilityDemoComponent = () => {\n  const [selected, setSelected] = useState<string>('');\n  const [message, setMessage] = useState<string>('');\n\n  return (\n    <div className=\"space-y-4\">\n      <div>\n        <h3 className=\"mb-2 text-lg font-semibold\">Keyboard Navigation Instructions</h3>\n        <ul className=\"space-y-1 text-sm text-gray-600\">\n          <li>\n            • Use <kbd className=\"rounded bg-gray-100 px-1 py-0.5\">↑</kbd> and{' '}\n            <kbd className=\"rounded bg-gray-100 px-1 py-0.5\">↓</kbd> to navigate\n          </li>\n          <li>\n            • Use <kbd className=\"rounded bg-gray-100 px-1 py-0.5\">Enter</kbd> or{' '}\n            <kbd className=\"rounded bg-gray-100 px-1 py-0.5\">Space</kbd> to select\n          </li>\n          <li>• Focus starts on the first item</li>\n        </ul>\n      </div>\n\n      <div className=\"w-64 rounded-md border\">\n        <KeyboardNavigableList\n          items={sampleItems}\n          selectedId={selected}\n          onSelect={item => {\n            setSelected(item.id);\n            setMessage(`Selected: ${item.label}`);\n          }}\n        />\n      </div>\n\n      {message && (\n        <div className=\"rounded border border-blue-200 bg-blue-50 p-3 text-sm\">{message}</div>\n      )}\n    </div>\n  );\n};\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
          "lineCount": 38,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "onSelect",
          "startLine": 374,
          "endLine": 375,
          "code": "    onSelect: () => {},\n  },\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 376,
          "endLine": 377,
          "code": "  render: () => <AccessibilityDemoComponent />,\n};\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 378 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "HorizontalTabsKeyboardNavigableList",
          "line": 151,
          "message": "Function 'HorizontalTabsKeyboardNavigableList' has 33 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "WithIconsKeyboardNavigableList",
          "line": 193,
          "message": "Function 'WithIconsKeyboardNavigableList' has 38 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "ComposableListItemsComponent",
          "line": 240,
          "message": "Function 'ComposableListItemsComponent' has 51 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "AccessibilityDemoComponent",
          "line": 332,
          "message": "Function 'AccessibilityDemoComponent' has 38 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.tsx",
      "lineCount": 151,
      "functions": [
        {
          "name": "onSelect",
          "startLine": 22,
          "endLine": 23,
          "code": "  readonly onSelect: (item: ListItem) => void;\n  readonly selectedId?: string;\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "KeyboardNavigableList",
          "startLine": 31,
          "endLine": 104,
          "code": "export default function KeyboardNavigableList({\n  items,\n  onSelect,\n  selectedId,\n  className,\n  itemClassName,\n  role = 'listbox',\n  orientation = 'vertical',\n  wrap: _wrap = true,\n}: KeyboardNavigableListProps) {\n  const handleSelect = useCallback(\n    (index: number) => {\n      const item = items[index];\n      if (item && !item.disabled) {\n        onSelect(item);\n      }\n    },\n    [items, onSelect]\n  );\n\n  const containerRef = useArrowKeyNavigation(items.length, handleSelect);\n\n  const getItemRole = () => {\n    switch (role) {\n      case 'listbox':\n        return 'option';\n      case 'menu':\n        return 'menuitem';\n      case 'tablist':\n        return 'tab';\n      default:\n        return 'option';\n    }\n  };\n\n  const itemRole = getItemRole();\n\n  return (\n    <div\n      ref={containerRef as React.RefObject<HTMLDivElement>}\n      role={role}\n      aria-orientation={orientation}\n      className={cn(\n        'focus:outline-none',\n        orientation === 'horizontal' ? 'flex flex-row' : 'flex flex-col',\n        className\n      )}\n    >\n      {items.map((item, index) => (\n        <button\n          key={item.id}\n          role={itemRole}\n          aria-selected={selectedId === item.id}\n          aria-disabled={item.disabled}\n          tabIndex={index === 0 ? 0 : -1}\n          onClick={() => !item.disabled && onSelect(item)}\n          className={cn(\n            'flex items-center gap-2 px-3 py-2 text-left transition-colors',\n            'focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500',\n            selectedId === item.id\n              ? 'bg-blue-50 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400'\n              : 'hover:bg-gray-100 dark:hover:bg-gray-800',\n            item.disabled && 'cursor-not-allowed opacity-50',\n            itemClassName\n          )}\n          disabled={item.disabled}\n        >\n          {item.icon && <span className=\"shrink-0\">{item.icon}</span>}\n          <span className=\"grow\">{item.label}</span>\n        </button>\n      ))}\n    </div>\n  );\n}\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.tsx",
          "lineCount": 74,
          "cyclomaticComplexity": 13,
          "cognitiveComplexity": 12
        },
        {
          "name": "ListItem",
          "startLine": 115,
          "endLine": 148,
          "code": "export function ListItem({\n  children,\n  selected,\n  disabled,\n  onClick,\n  className,\n}: ListItemComponentProps) {\n  return (\n    <div\n      role=\"option\"\n      aria-selected={selected}\n      aria-disabled={disabled}\n      tabIndex={selected ? 0 : -1}\n      onClick={!disabled ? onClick : undefined}\n      onKeyDown={e => {\n        if ((e.key === 'Enter' || e.key === ' ') && !disabled && onClick) {\n          e.preventDefault();\n          onClick();\n        }\n      }}\n      className={cn(\n        'flex cursor-pointer items-center gap-2 px-3 py-2 transition-colors',\n        'focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500',\n        selected\n          ? 'bg-blue-50 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400'\n          : 'hover:bg-gray-100 dark:hover:bg-gray-800',\n        disabled && 'cursor-not-allowed opacity-50',\n        className\n      )}\n    >\n      {children}\n    </div>\n  );\n}\n",
          "filePath": "src/components/atoms/KeyboardNavigableList/KeyboardNavigableList.tsx",
          "lineCount": 34,
          "cyclomaticComplexity": 9,
          "cognitiveComplexity": 8
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "KeyboardNavigableList",
          "line": 31,
          "message": "Function 'KeyboardNavigableList' has 74 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "KeyboardNavigableList",
          "line": 31,
          "complexity": 13,
          "message": "Function 'KeyboardNavigableList' has cyclomatic complexity of 13 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "ListItem",
          "line": 115,
          "message": "Function 'ListItem' has 34 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/atoms/LiveRegion/LiveRegion.stories.tsx",
      "lineCount": 427,
      "functions": [
        {
          "name": "FormValidationComponent",
          "startLine": 80,
          "endLine": 127,
          "code": "const FormValidationComponent = () => {\n  const [email, setEmail] = useState('');\n  const [error, setError] = useState('');\n\n  const validateEmail = (value: string) => {\n    if (!value) {\n      setError('Email is required');\n    } else if (!/\\S+@\\S+\\.\\S+/.test(value)) {\n      setError('Please enter a valid email address');\n    } else {\n      setError('');\n    }\n  };\n\n  return (\n    <div className=\"w-full max-w-md space-y-4\">\n      <div>\n        <label htmlFor=\"email\" className=\"mb-2 block text-sm font-medium text-gray-700\">\n          Email Address\n        </label>\n        <input\n          id=\"email\"\n          type=\"email\"\n          value={email}\n          onChange={e => {\n            setEmail(e.target.value);\n            validateEmail(e.target.value);\n          }}\n          onBlur={e => validateEmail(e.target.value)}\n          className={`w-full rounded-md border px-3 py-2 focus:outline-none focus:ring-2 ${\n            error\n              ? 'border-red-300 focus:border-red-500 focus:ring-red-500'\n              : 'border-gray-300 focus:border-blue-500 focus:ring-blue-500'\n          }`}\n          placeholder=\"Enter your email\"\n          aria-invalid={!!error}\n          aria-describedby={error ? 'email-error' : undefined}\n        />\n\n        {error && (\n          <div id=\"email-error\" className=\"mt-1\">\n            <LiveRegion message={error} type=\"polite\" visible={true} clearAfter={0} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/atoms/LiveRegion/LiveRegion.stories.tsx",
          "lineCount": 48,
          "cyclomaticComplexity": 9,
          "cognitiveComplexity": 8
        },
        {
          "name": "render",
          "startLine": 133,
          "endLine": 141,
          "code": "  render: () => <FormValidationComponent />,\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Example of using LiveRegion for form validation errors that are announced to screen readers.',\n      },\n    },\n  },\n",
          "filePath": "src/components/atoms/LiveRegion/LiveRegion.stories.tsx",
          "lineCount": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "StatusUpdatesComponent",
          "startLine": 144,
          "endLine": 190,
          "code": "const StatusUpdatesComponent = () => {\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const simulateAction = async (action: string) => {\n    setIsLoading(true);\n    setStatus(`${action} in progress...`);\n\n    // Simulate async operation\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    setIsLoading(false);\n    setStatus(`${action} completed successfully`);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex gap-2\">\n        <button\n          onClick={() => simulateAction('Saving')}\n          disabled={isLoading}\n          className=\"rounded bg-blue-500 px-4 py-2 text-white disabled:opacity-50\"\n        >\n          {isLoading ? 'Saving...' : 'Save Document'}\n        </button>\n\n        <button\n          onClick={() => simulateAction('Uploading')}\n          disabled={isLoading}\n          className=\"rounded bg-green-500 px-4 py-2 text-white disabled:opacity-50\"\n        >\n          {isLoading ? 'Uploading...' : 'Upload File'}\n        </button>\n\n        <button\n          onClick={() => simulateAction('Deleting')}\n          disabled={isLoading}\n          className=\"rounded bg-red-500 px-4 py-2 text-white disabled:opacity-50\"\n        >\n          {isLoading ? 'Deleting...' : 'Delete Item'}\n        </button>\n      </div>\n\n      <LiveRegion message={status} type=\"polite\" visible={true} clearAfter={3000} />\n    </div>\n  );\n};\n",
          "filePath": "src/components/atoms/LiveRegion/LiveRegion.stories.tsx",
          "lineCount": 47,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 3
        },
        {
          "name": "render",
          "startLine": 196,
          "endLine": 203,
          "code": "  render: () => <StatusUpdatesComponent />,\n  parameters: {\n    docs: {\n      description: {\n        story: 'Example of using LiveRegion for status updates during async operations.',\n      },\n    },\n  },\n",
          "filePath": "src/components/atoms/LiveRegion/LiveRegion.stories.tsx",
          "lineCount": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "AlertMessagesComponent",
          "startLine": 206,
          "endLine": 260,
          "code": "const AlertMessagesComponent = () => {\n  const [alerts, setAlerts] = useState<\n    Array<{ id: number; message: string; type: 'success' | 'error' | 'warning' }>\n  >([]);\n\n  const addAlert = (message: string, type: 'success' | 'error' | 'warning') => {\n    const id = Date.now();\n    setAlerts(prev => [...prev, { id, message, type }]);\n\n    // Remove alert after 5 seconds\n    setTimeout(() => {\n      setAlerts(prev => prev.filter(alert => alert.id !== id));\n    }, 5000);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex gap-2\">\n        <button\n          onClick={() => addAlert('Operation completed successfully!', 'success')}\n          className=\"rounded bg-green-500 px-4 py-2 text-white\"\n        >\n          Success Alert\n        </button>\n\n        <button\n          onClick={() => addAlert('An error occurred. Please try again.', 'error')}\n          className=\"rounded bg-red-500 px-4 py-2 text-white\"\n        >\n          Error Alert\n        </button>\n\n        <button\n          onClick={() => addAlert('Please review your information before proceeding.', 'warning')}\n          className=\"rounded bg-orange-500 px-4 py-2 text-white\"\n        >\n          Warning Alert\n        </button>\n      </div>\n\n      <div className=\"space-y-2\">\n        {alerts.map(alert => (\n          <div key={alert.id}>\n            <LiveRegion\n              message={alert.message}\n              type={alert.type === 'error' ? 'assertive' : 'polite'}\n              visible={true}\n              clearAfter={0}\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/atoms/LiveRegion/LiveRegion.stories.tsx",
          "lineCount": 55,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "render",
          "startLine": 266,
          "endLine": 274,
          "code": "  render: () => <AlertMessagesComponent />,\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Example of using LiveRegion for different types of alert messages with appropriate urgency levels.',\n      },\n    },\n  },\n",
          "filePath": "src/components/atoms/LiveRegion/LiveRegion.stories.tsx",
          "lineCount": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "SearchResultsComponent",
          "startLine": 277,
          "endLine": 355,
          "code": "const SearchResultsComponent = () => {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState<string[]>([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const [resultMessage, setResultMessage] = useState('');\n\n  // Mock data\n  const mockData = [\n    'Apple',\n    'Banana',\n    'Cherry',\n    'Date',\n    'Elderberry',\n    'Fig',\n    'Grape',\n    'Honeydew',\n    'Kiwi',\n    'Lemon',\n  ];\n\n  const performSearch = async (searchTerm: string) => {\n    if (!searchTerm.trim()) {\n      setResults([]);\n      setResultMessage('');\n      return;\n    }\n\n    setIsSearching(true);\n    setResultMessage('Searching...');\n\n    // Simulate search delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    const filtered = mockData.filter(item => item.toLowerCase().includes(searchTerm.toLowerCase()));\n\n    setResults(filtered);\n    setIsSearching(false);\n    setResultMessage(\n      `Found ${filtered.length} result${filtered.length !== 1 ? 's' : ''} for \"${searchTerm}\"`\n    );\n  };\n\n  return (\n    <div className=\"w-full max-w-md space-y-4\">\n      <div>\n        <label htmlFor=\"search\" className=\"mb-2 block text-sm font-medium text-gray-700\">\n          Search Fruits\n        </label>\n        <input\n          id=\"search\"\n          type=\"text\"\n          value={query}\n          onChange={e => {\n            setQuery(e.target.value);\n            performSearch(e.target.value);\n          }}\n          className=\"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          placeholder=\"Type to search...\"\n        />\n      </div>\n\n      <LiveRegion message={resultMessage} type=\"polite\" visible={false} clearAfter={0} />\n\n      {resultMessage && !isSearching && (\n        <div className=\"text-sm text-gray-600\">{resultMessage}</div>\n      )}\n\n      {results.length > 0 && (\n        <ul className=\"divide-y rounded-md border\">\n          {results.map((result, index) => (\n            <li key={index} className=\"px-3 py-2 hover:bg-gray-50\">\n              {result}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n",
          "filePath": "src/components/atoms/LiveRegion/LiveRegion.stories.tsx",
          "lineCount": 79,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 5
        },
        {
          "name": "render",
          "startLine": 361,
          "endLine": 368,
          "code": "  render: () => <SearchResultsComponent />,\n  parameters: {\n    docs: {\n      description: {\n        story: 'Example of using LiveRegion to announce search results count to screen readers.',\n      },\n    },\n  },\n",
          "filePath": "src/components/atoms/LiveRegion/LiveRegion.stories.tsx",
          "lineCount": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "MultipleRegionsComponent",
          "startLine": 371,
          "endLine": 411,
          "code": "const MultipleRegionsComponent = () => {\n  const [generalMessage, setGeneralMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex gap-2\">\n        <button\n          onClick={() => setGeneralMessage('General information updated')}\n          className=\"rounded bg-blue-500 px-4 py-2 text-white\"\n        >\n          General Update\n        </button>\n\n        <button\n          onClick={() => setErrorMessage('Critical error occurred!')}\n          className=\"rounded bg-red-500 px-4 py-2 text-white\"\n        >\n          Trigger Error\n        </button>\n\n        <button\n          onClick={() => setSuccessMessage('Task completed successfully')}\n          className=\"rounded bg-green-500 px-4 py-2 text-white\"\n        >\n          Success Action\n        </button>\n      </div>\n\n      {/* General announcements */}\n      <LiveRegion message={generalMessage} type=\"polite\" visible={true} clearAfter={3000} />\n\n      {/* Error announcements */}\n      <LiveRegion message={errorMessage} type=\"assertive\" visible={true} clearAfter={5000} />\n\n      {/* Success announcements */}\n      <LiveRegion message={successMessage} type=\"polite\" visible={true} clearAfter={3000} />\n    </div>\n  );\n};\n",
          "filePath": "src/components/atoms/LiveRegion/LiveRegion.stories.tsx",
          "lineCount": 41,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 417,
          "endLine": 425,
          "code": "  render: () => <MultipleRegionsComponent />,\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Example of using multiple LiveRegions for different types of announcements with different urgency levels.',\n      },\n    },\n  },\n",
          "filePath": "src/components/atoms/LiveRegion/LiveRegion.stories.tsx",
          "lineCount": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 427 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "FormValidationComponent",
          "line": 80,
          "message": "Function 'FormValidationComponent' has 48 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "StatusUpdatesComponent",
          "line": 144,
          "message": "Function 'StatusUpdatesComponent' has 47 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "AlertMessagesComponent",
          "line": 206,
          "message": "Function 'AlertMessagesComponent' has 55 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "SearchResultsComponent",
          "line": 277,
          "message": "Function 'SearchResultsComponent' has 79 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "MultipleRegionsComponent",
          "line": 371,
          "message": "Function 'MultipleRegionsComponent' has 41 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/atoms/LiveRegion/LiveRegion.tsx",
      "lineCount": 50,
      "functions": [
        {
          "name": "LiveRegion",
          "startLine": 16,
          "endLine": 46,
          "code": "export default function LiveRegion({\n  message,\n  type = 'polite',\n  visible = false,\n  clearAfter = 5000,\n}: LiveRegionProps) {\n  const [currentMessage, setCurrentMessage] = useState(message);\n\n  useEffect(() => {\n    setCurrentMessage(message);\n\n    if (message && clearAfter > 0) {\n      const timer = setTimeout(() => {\n        setCurrentMessage('');\n      }, clearAfter);\n\n      return () => clearTimeout(timer);\n    }\n  }, [message, clearAfter]);\n\n  return (\n    <div\n      role=\"status\"\n      aria-live={type}\n      aria-atomic=\"true\"\n      className={visible ? 'text-sm text-secondary' : 'sr-only'}\n    >\n      {currentMessage}\n    </div>\n  );\n}\n",
          "filePath": "src/components/atoms/LiveRegion/LiveRegion.tsx",
          "lineCount": 31,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 6
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "LiveRegion",
          "line": 16,
          "message": "Function 'LiveRegion' has 31 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/atoms/Radio/Radio.stories.tsx",
      "lineCount": 252,
      "functions": [
        {
          "name": "render",
          "startLine": 113,
          "endLine": 114,
          "code": "  render: () => (\n    <div className=\"flex flex-col gap-4\">\n",
          "filePath": "src/components/atoms/Radio/Radio.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "RadioGroupExampleComponent",
          "startLine": 122,
          "endLine": 132,
          "code": "const RadioGroupExampleComponent = () => {\n  const [value, setValue] = useState('option1');\n\n  return (\n    <RadioGroup name=\"example-group\" value={value} onChange={setValue} orientation=\"vertical\">\n      <Radio value=\"option1\" label=\"Option 1\" description=\"This is the first option\" />\n      <Radio value=\"option2\" label=\"Option 2\" description=\"This is the second option\" />\n      <Radio value=\"option3\" label=\"Option 3\" description=\"This is the third option\" />\n    </RadioGroup>\n  );\n};\n",
          "filePath": "src/components/atoms/Radio/Radio.stories.tsx",
          "lineCount": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 140,
          "endLine": 141,
          "code": "  render: () => <RadioGroupExampleComponent />,\n};\n",
          "filePath": "src/components/atoms/Radio/Radio.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "RadioGroupHorizontalComponent",
          "startLine": 143,
          "endLine": 153,
          "code": "const RadioGroupHorizontalComponent = () => {\n  const [value, setValue] = useState('small');\n\n  return (\n    <RadioGroup name=\"size-group\" value={value} onChange={setValue} orientation=\"horizontal\">\n      <Radio value=\"small\" label=\"Small\" />\n      <Radio value=\"medium\" label=\"Medium\" />\n      <Radio value=\"large\" label=\"Large\" />\n    </RadioGroup>\n  );\n};\n",
          "filePath": "src/components/atoms/Radio/Radio.stories.tsx",
          "lineCount": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 161,
          "endLine": 162,
          "code": "  render: () => <RadioGroupHorizontalComponent />,\n};\n",
          "filePath": "src/components/atoms/Radio/Radio.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "RadioGroupWithErrorComponent",
          "startLine": 164,
          "endLine": 179,
          "code": "const RadioGroupWithErrorComponent = () => {\n  const [value, setValue] = useState('');\n\n  return (\n    <RadioGroup\n      name=\"error-group\"\n      value={value}\n      onChange={setValue}\n      errorMessage=\"Please select an option\"\n    >\n      <Radio value=\"yes\" label=\"Yes\" />\n      <Radio value=\"no\" label=\"No\" />\n      <Radio value=\"maybe\" label=\"Maybe\" />\n    </RadioGroup>\n  );\n};\n",
          "filePath": "src/components/atoms/Radio/Radio.stories.tsx",
          "lineCount": 16,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 187,
          "endLine": 188,
          "code": "  render: () => <RadioGroupWithErrorComponent />,\n};\n",
          "filePath": "src/components/atoms/Radio/Radio.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "InteractiveRadioComponent",
          "startLine": 190,
          "endLine": 242,
          "code": "const InteractiveRadioComponent = () => {\n  const [selectedValue, setSelectedValue] = useState('');\n  const [variant, setVariant] = useState<'default' | 'primary' | 'error'>('default');\n\n  const options = [\n    { value: 'apple', label: 'Apple', description: 'A sweet red fruit' },\n    { value: 'banana', label: 'Banana', description: 'A yellow curved fruit' },\n    { value: 'cherry', label: 'Cherry', description: 'A small red stone fruit' },\n  ];\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <div className=\"mb-4 flex gap-2\">\n        <button\n          onClick={() => setVariant('default')}\n          className={`rounded px-3 py-1 text-sm ${variant === 'default' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}\n        >\n          Default\n        </button>\n        <button\n          onClick={() => setVariant('primary')}\n          className={`rounded px-3 py-1 text-sm ${variant === 'primary' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}\n        >\n          Primary\n        </button>\n        <button\n          onClick={() => setVariant('error')}\n          className={`rounded px-3 py-1 text-sm ${variant === 'error' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}\n        >\n          Error\n        </button>\n      </div>\n\n      <RadioGroup name=\"interactive-group\" value={selectedValue} onChange={setSelectedValue}>\n        {options.map(option => (\n          <Radio\n            key={option.value}\n            value={option.value}\n            label={option.label}\n            description={option.description}\n            variant={variant}\n          />\n        ))}\n      </RadioGroup>\n\n      {selectedValue && (\n        <p className=\"mt-4 rounded bg-gray-100 p-3\">\n          Selected: {options.find(opt => opt.value === selectedValue)?.label}\n        </p>\n      )}\n    </div>\n  );\n};\n",
          "filePath": "src/components/atoms/Radio/Radio.stories.tsx",
          "lineCount": 53,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 4
        },
        {
          "name": "render",
          "startLine": 250,
          "endLine": 251,
          "code": "  render: () => <InteractiveRadioComponent />,\n};\n",
          "filePath": "src/components/atoms/Radio/Radio.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "InteractiveRadioComponent",
          "line": 190,
          "message": "Function 'InteractiveRadioComponent' has 53 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/atoms/Radio/Radio.tsx",
      "lineCount": 211,
      "functions": [
        {
          "name": "handleChange",
          "startLine": 179,
          "endLine": 181,
          "code": "  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onChange?.(e.target.value);\n  };\n",
          "filePath": "src/components/atoms/Radio/Radio.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/atoms/Select/Select.stories.tsx",
      "lineCount": 185,
      "functions": [
        {
          "name": "onChange",
          "startLine": 58,
          "endLine": 59,
          "code": "    onChange: () => {},\n  },\n",
          "filePath": "src/components/atoms/Select/Select.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 103,
          "endLine": 104,
          "code": "  render: () => (\n    <div className=\"w-80 space-y-6\">\n",
          "filePath": "src/components/atoms/Select/Select.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/atoms/Select/Select.tsx",
      "lineCount": 169,
      "functions": [
        {
          "name": "onChange",
          "startLine": 57,
          "endLine": 58,
          "code": "  onChange: (value: string) => void;\n  placeholder?: string;\n",
          "filePath": "src/components/atoms/Select/Select.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/atoms/SkipNavigation/SkipNavigation.stories.tsx",
      "lineCount": 389,
      "functions": [
        {
          "name": "render",
          "startLine": 33,
          "endLine": 34,
          "code": "  render: () => (\n    <div className=\"min-h-screen\">\n",
          "filePath": "src/components/atoms/SkipNavigation/SkipNavigation.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 78,
          "endLine": 79,
          "code": "  render: () => (\n    <div className=\"min-h-screen\">\n",
          "filePath": "src/components/atoms/SkipNavigation/SkipNavigation.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 137,
          "endLine": 138,
          "code": "  render: () => (\n    <div className=\"min-h-screen\">\n",
          "filePath": "src/components/atoms/SkipNavigation/SkipNavigation.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 221,
          "endLine": 222,
          "code": "  render: () => (\n    <div className=\"min-h-screen\">\n",
          "filePath": "src/components/atoms/SkipNavigation/SkipNavigation.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 337,
          "endLine": 338,
          "code": "  render: () => (\n    <div className=\"space-y-8 p-8\">\n",
          "filePath": "src/components/atoms/SkipNavigation/SkipNavigation.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 389 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/atoms/SkipNavigation/SkipNavigation.tsx",
      "lineCount": 64,
      "functions": [
        {
          "name": "SkipNavigation",
          "startLine": 15,
          "endLine": 27,
          "code": "export default function SkipNavigation({\n  skipTo = '#main-content',\n  children = 'Skip to main content',\n}: SkipNavigationProps) {\n  return (\n    <a\n      href={skipTo}\n      className=\"sr-only focus:not-sr-only focus:absolute focus:left-4 focus:top-4 focus:z-50 focus:rounded-md focus:bg-blue-600 focus:px-4 focus:py-2 focus:text-white focus:shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-600 focus:ring-offset-2\"\n    >\n      {children}\n    </a>\n  );\n}\n",
          "filePath": "src/components/atoms/SkipNavigation/SkipNavigation.tsx",
          "lineCount": 13,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "SkipLinks",
          "startLine": 37,
          "endLine": 61,
          "code": "export function SkipLinks({\n  links = [\n    { href: '#main-content', label: 'Skip to main content' },\n    { href: '#navigation', label: 'Skip to navigation' },\n  ],\n}: SkipLinksProps) {\n  return (\n    <div className=\"sr-only focus-within:not-sr-only focus-within:absolute focus-within:left-4 focus-within:top-4 focus-within:z-50\">\n      <nav aria-label=\"Skip links\">\n        <ul className=\"focus-within:flex focus-within:flex-col focus-within:gap-2\">\n          {links.map(link => (\n            <li key={link.href}>\n              <a\n                href={link.href}\n                className=\"focus:inline-block focus:rounded-md focus:bg-blue-600 focus:px-4 focus:py-2 focus:text-white focus:shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-600 focus:ring-offset-2\"\n              >\n                {link.label}\n              </a>\n            </li>\n          ))}\n        </ul>\n      </nav>\n    </div>\n  );\n}\n",
          "filePath": "src/components/atoms/SkipNavigation/SkipNavigation.tsx",
          "lineCount": 25,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/atoms/Textarea/Textarea.stories.tsx",
      "lineCount": 226,
      "functions": [
        {
          "name": "render",
          "startLine": 138,
          "endLine": 139,
          "code": "  render: () => (\n    <div className=\"flex w-full max-w-md flex-col gap-6\">\n",
          "filePath": "src/components/atoms/Textarea/Textarea.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 148,
          "endLine": 149,
          "code": "  render: () => (\n    <div className=\"flex w-full max-w-md flex-col gap-6\">\n",
          "filePath": "src/components/atoms/Textarea/Textarea.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "InteractiveTextareaComponent",
          "startLine": 169,
          "endLine": 218,
          "code": "const InteractiveTextareaComponent = () => {\n  const [value, setValue] = useState('');\n  const [showError, setShowError] = useState(false);\n\n  const maxLength = 200;\n  const isNearLimit = value.length > maxLength * 0.8;\n  const isOverLimit = value.length > maxLength;\n\n  return (\n    <div className=\"w-full max-w-md\">\n      <Textarea\n        label=\"Interactive Textarea\"\n        value={value}\n        onChange={e => {\n          setValue(e.target.value);\n          setShowError(e.target.value.length === 0);\n        }}\n        placeholder=\"Start typing to see character count...\"\n        maxLength={maxLength}\n        showCharCount={true}\n        errorMessage={showError ? 'This field cannot be empty' : undefined}\n        helperText={\n          isOverLimit\n            ? `You've exceeded the limit by ${value.length - maxLength} characters`\n            : isNearLimit\n              ? \"You're approaching the character limit\"\n              : 'Share your thoughts with us'\n        }\n        resizable\n      />\n\n      <div className=\"mt-4 flex gap-2\">\n        <button\n          onClick={() => setValue('')}\n          className=\"rounded bg-gray-500 px-3 py-1 text-sm text-white\"\n        >\n          Clear\n        </button>\n        <button\n          onClick={() =>\n            setValue('This is a sample text to demonstrate the textarea functionality.')\n          }\n          className=\"rounded bg-blue-500 px-3 py-1 text-sm text-white\"\n        >\n          Fill Sample\n        </button>\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/atoms/Textarea/Textarea.stories.tsx",
          "lineCount": 50,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 1
        },
        {
          "name": "render",
          "startLine": 224,
          "endLine": 225,
          "code": "  render: () => <InteractiveTextareaComponent />,\n};\n",
          "filePath": "src/components/atoms/Textarea/Textarea.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "InteractiveTextareaComponent",
          "line": 169,
          "message": "Function 'InteractiveTextareaComponent' has 50 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/atoms/Toggle/Toggle.stories.tsx",
      "lineCount": 278,
      "functions": [
        {
          "name": "render",
          "startLine": 103,
          "endLine": 104,
          "code": "  render: () => (\n    <div className=\"flex flex-col gap-6\">\n",
          "filePath": "src/components/atoms/Toggle/Toggle.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 128,
          "endLine": 129,
          "code": "  render: () => (\n    <div className=\"flex flex-col gap-6\">\n",
          "filePath": "src/components/atoms/Toggle/Toggle.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "SettingsPanelComponent",
          "startLine": 153,
          "endLine": 205,
          "code": "const SettingsPanelComponent = () => {\n  const [notifications, setNotifications] = useState(true);\n  const [darkMode, setDarkMode] = useState(false);\n  const [autoSave, setAutoSave] = useState(true);\n  const [analytics, setAnalytics] = useState(false);\n\n  return (\n    <div className=\"w-full max-w-md rounded-lg border bg-white p-6\">\n      <h3 className=\"mb-4 text-lg font-semibold\">Settings</h3>\n\n      <div className=\"space-y-4\">\n        <Toggle\n          label=\"Push Notifications\"\n          description=\"Receive notifications on your device\"\n          checked={notifications}\n          onToggle={setNotifications}\n        />\n\n        <Toggle\n          label=\"Dark Mode\"\n          description=\"Use dark theme across the application\"\n          variant=\"primary\"\n          checked={darkMode}\n          onToggle={setDarkMode}\n        />\n\n        <Toggle\n          label=\"Auto-save\"\n          description=\"Automatically save your work every 5 minutes\"\n          checked={autoSave}\n          onToggle={setAutoSave}\n        />\n\n        <Toggle\n          label=\"Analytics\"\n          description=\"Help us improve by sharing anonymous usage data\"\n          checked={analytics}\n          onToggle={setAnalytics}\n        />\n      </div>\n\n      <div className=\"mt-6 border-t pt-4\">\n        <h4 className=\"mb-2 text-sm font-medium\">Current Settings:</h4>\n        <ul className=\"space-y-1 text-xs text-gray-600\">\n          <li>Notifications: {notifications ? 'Enabled' : 'Disabled'}</li>\n          <li>Dark Mode: {darkMode ? 'Enabled' : 'Disabled'}</li>\n          <li>Auto-save: {autoSave ? 'Enabled' : 'Disabled'}</li>\n          <li>Analytics: {analytics ? 'Enabled' : 'Disabled'}</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/atoms/Toggle/Toggle.stories.tsx",
          "lineCount": 53,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 4
        },
        {
          "name": "render",
          "startLine": 212,
          "endLine": 213,
          "code": "  render: () => <SettingsPanelComponent />,\n};\n",
          "filePath": "src/components/atoms/Toggle/Toggle.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "InteractiveToggleComponent",
          "startLine": 215,
          "endLine": 269,
          "code": "const InteractiveToggleComponent = () => {\n  const [checked, setChecked] = useState(false);\n  const [variant, setVariant] = useState<'default' | 'primary' | 'error'>('default');\n  const [size, setSize] = useState<'sm' | 'md' | 'lg'>('md');\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-wrap gap-2\">\n        <div className=\"flex gap-1\">\n          <span className=\"text-sm text-gray-600\">Variant:</span>\n          {(['default', 'primary', 'error'] as const).map(v => (\n            <button\n              key={v}\n              onClick={() => setVariant(v)}\n              className={`rounded px-2 py-1 text-xs ${\n                variant === v ? 'bg-blue-500 text-white' : 'bg-gray-200'\n              }`}\n            >\n              {v}\n            </button>\n          ))}\n        </div>\n\n        <div className=\"flex gap-1\">\n          <span className=\"text-sm text-gray-600\">Size:</span>\n          {(['sm', 'md', 'lg'] as const).map(s => (\n            <button\n              key={s}\n              onClick={() => setSize(s)}\n              className={`rounded px-2 py-1 text-xs ${\n                size === s ? 'bg-blue-500 text-white' : 'bg-gray-200'\n              }`}\n            >\n              {s}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      <Toggle\n        label=\"Interactive Toggle\"\n        description=\"This toggle demonstrates different variants and sizes\"\n        checked={checked}\n        variant={variant}\n        size={size}\n        onToggle={setChecked}\n      />\n\n      <div className=\"rounded bg-gray-100 p-3 text-sm\">\n        <strong>State:</strong> {checked ? 'ON' : 'OFF'} |<strong> Variant:</strong> {variant} |\n        <strong> Size:</strong> {size}\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/atoms/Toggle/Toggle.stories.tsx",
          "lineCount": 55,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 3
        },
        {
          "name": "render",
          "startLine": 276,
          "endLine": 277,
          "code": "  render: () => <InteractiveToggleComponent />,\n};\n",
          "filePath": "src/components/atoms/Toggle/Toggle.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "SettingsPanelComponent",
          "line": 153,
          "message": "Function 'SettingsPanelComponent' has 53 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "InteractiveToggleComponent",
          "line": 215,
          "message": "Function 'InteractiveToggleComponent' has 55 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/atoms/Toggle/Toggle.tsx",
      "lineCount": 176,
      "functions": [
        {
          "name": "handleChange",
          "startLine": 72,
          "endLine": 76,
          "code": "    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const newChecked = e.target.checked\n      onChange?.(e)\n      onToggle?.(newChecked)\n    }\n",
          "filePath": "src/components/atoms/Toggle/Toggle.tsx",
          "lineCount": 5,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "getBackgroundColor",
          "startLine": 79,
          "endLine": 94,
          "code": "    const getBackgroundColor = () => {\n      if (disabled) {\n        return checked ? 'bg-[#d4d4d4]' : 'bg-[#fafafa]'\n      }\n      if (!checked) {\n        return 'bg-[#d4d4d4]'\n      }\n      switch (actualVariant) {\n        case 'primary':\n          return 'bg-[#2563eb]'\n        case 'error':\n          return 'bg-[#dc2626]'\n        default:\n          return 'bg-[#7c3aed]'\n      }\n    }\n",
          "filePath": "src/components/atoms/Toggle/Toggle.tsx",
          "lineCount": 16,
          "cyclomaticComplexity": 7,
          "cognitiveComplexity": 8
        },
        {
          "name": "getThumbClasses",
          "startLine": 97,
          "endLine": 108,
          "code": "    const getThumbClasses = () => {\n      const baseClasses = \"inline-block bg-white rounded-full shadow transform transition-transform duration-200 ease-in-out\"\n      \n      switch (size) {\n        case 'sm':\n          return cn(baseClasses, \"h-3 w-3\", checked ? \"translate-x-4\" : \"translate-x-0\")\n        case 'lg':\n          return cn(baseClasses, \"h-5 w-5\", checked ? \"translate-x-6\" : \"translate-x-0\")\n        default: // md\n          return cn(baseClasses, \"h-4 w-4\", checked ? \"translate-x-5\" : \"translate-x-0\")\n      }\n    }\n",
          "filePath": "src/components/atoms/Toggle/Toggle.tsx",
          "lineCount": 12,
          "cyclomaticComplexity": 7,
          "cognitiveComplexity": 8
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/atoms/Typography/Typography.stories.tsx",
      "lineCount": 224,
      "functions": [
        {
          "name": "render",
          "startLine": 47,
          "endLine": 48,
          "code": "  render: () => (\n    <div className=\"space-y-4\">\n",
          "filePath": "src/components/atoms/Typography/Typography.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 60,
          "endLine": 61,
          "code": "  render: () => (\n    <div className=\"space-y-4 max-w-2xl\">\n",
          "filePath": "src/components/atoms/Typography/Typography.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 86,
          "endLine": 87,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/atoms/Typography/Typography.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 113,
          "endLine": 114,
          "code": "  render: () => (\n    <div className=\"space-y-4\">\n",
          "filePath": "src/components/atoms/Typography/Typography.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 124,
          "endLine": 125,
          "code": "  render: () => (\n    <div className=\"space-y-4\">\n",
          "filePath": "src/components/atoms/Typography/Typography.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 144,
          "endLine": 145,
          "code": "  render: () => (\n    <article className=\"max-w-3xl space-y-4\">\n",
          "filePath": "src/components/atoms/Typography/Typography.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 182,
          "endLine": 183,
          "code": "  render: () => (\n    <div className=\"space-y-4\">\n",
          "filePath": "src/components/atoms/Typography/Typography.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 197,
          "endLine": 198,
          "code": "  render: () => (\n    <div className=\"space-y-4\">\n",
          "filePath": "src/components/atoms/Typography/Typography.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/base/BaseSelector.tsx",
      "lineCount": 242,
      "functions": [
        {
          "name": "onChange",
          "startLine": 14,
          "endLine": 15,
          "code": "  onChange: (value: string) => void;\n  options: T[];\n",
          "filePath": "src/components/base/BaseSelector.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onSearchChange",
          "startLine": 21,
          "endLine": 22,
          "code": "  onSearchChange: (term: string) => void;\n  isOpen: boolean;\n",
          "filePath": "src/components/base/BaseSelector.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onOpenChange",
          "startLine": 23,
          "endLine": 24,
          "code": "  onOpenChange: (open: boolean) => void;\n  renderOption?: (option: T, searchTerm: string) => ReactNode;\n",
          "filePath": "src/components/base/BaseSelector.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "BaseSelector",
          "startLine": 32,
          "endLine": 242,
          "code": "export function BaseSelector<T extends BaseSelectorOption>({\n  value,\n  onChange,\n  options,\n  loading = false,\n  error,\n  disabled = false,\n  placeholder = 'Search...',\n  searchTerm,\n  onSearchChange,\n  isOpen,\n  onOpenChange,\n  renderOption,\n  renderSelectedValue,\n  emptyMessage = 'No results found',\n  searchInstructions = 'Start typing to search',\n  minSearchLength = 2,\n  className,\n}: BaseSelectorProps<T>) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const selectedOption = options.find(opt => opt.value === value) || null;\n\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (containerRef.current && !containerRef.current.contains(event.target as Node)) {\n        onOpenChange(false);\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [onOpenChange]);\n\n  const handleSelect = (option: T) => {\n    onChange(option.value);\n    onSearchChange(renderSelectedValue ? renderSelectedValue(option) : option.label);\n    onOpenChange(false);\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value;\n    onSearchChange(newValue);\n    onOpenChange(true);\n\n    if (!newValue && value) {\n      onChange('');\n    }\n  };\n\n  const highlightMatch = (text: string, search: string) => {\n    if (!search.trim()) return text;\n\n    const regex = new RegExp(`(${search.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`, 'gi');\n    const parts = text.split(regex);\n\n    return parts.map((part, index) =>\n      regex.test(part) ? (\n        <mark key={index} className=\"bg-yellow-200 font-medium text-primary\">\n          {part}\n        </mark>\n      ) : (\n        part\n      )\n    );\n  };\n\n  const defaultRenderOption = (option: T) => (\n    <div className=\"font-medium\">{highlightMatch(option.label, searchTerm)}</div>\n  );\n\n  return (\n    <div ref={containerRef} className={cn('relative', className)}>\n      <div className=\"relative\">\n        <input\n          type=\"text\"\n          value={searchTerm}\n          onChange={handleInputChange}\n          onFocus={() => onOpenChange(true)}\n          placeholder={placeholder}\n          disabled={disabled}\n          className={cn(\n            'w-full rounded-md border p-3 pr-10',\n            'focus:border-blue-500 focus:ring-2 focus:ring-blue-500',\n            'disabled:cursor-not-allowed disabled:opacity-50',\n            error ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : 'border-gray-300'\n          )}\n        />\n\n        {loading && (\n          <div className=\"absolute right-3 top-1/2 -translate-y-1/2\">\n            <svg\n              className=\"size-5 animate-spin text-muted\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n            >\n              <circle\n                className=\"opacity-25\"\n                cx=\"12\"\n                cy=\"12\"\n                r=\"10\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"\n              />\n              <path\n                className=\"opacity-75\"\n                fill=\"currentColor\"\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n              />\n            </svg>\n          </div>\n        )}\n\n        {!loading && (\n          <div className=\"absolute right-3 top-1/2 -translate-y-1/2 pointer-events-none\">\n            <svg\n              className=\"size-5 text-muted\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"2\"\n                d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n              />\n            </svg>\n          </div>\n        )}\n      </div>\n\n      {isOpen && options.length > 0 && searchTerm.length >= minSearchLength && (\n        <div className=\"absolute z-50 mt-1 max-h-60 w-full overflow-auto rounded-md border shadow-lg bg-white border-gray-200\">\n          {options.map(option => (\n            <button\n              key={option.value}\n              type=\"button\"\n              onClick={() => handleSelect(option)}\n              className=\"w-full px-4 py-3 text-left border-b border-gray-100 last:border-b-0 hover:bg-gray-50 focus:bg-gray-50 focus:outline-none\"\n            >\n              {renderOption ? renderOption(option, searchTerm) : defaultRenderOption(option)}\n            </button>\n          ))}\n        </div>\n      )}\n\n      {isOpen && !loading && options.length === 0 && searchTerm.length >= minSearchLength && (\n        <div className=\"absolute z-50 mt-1 w-full rounded-md border p-4 shadow-lg bg-white border-gray-200\">\n          <div className=\"text-center text-muted\">\n            {typeof emptyMessage === 'string' ? (\n              <>\n                <svg\n                  className=\"mx-auto mb-2 size-8 text-muted\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth=\"2\"\n                    d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                  />\n                </svg>\n                <p className=\"text-sm\">{emptyMessage}</p>\n              </>\n            ) : (\n              emptyMessage\n            )}\n          </div>\n        </div>\n      )}\n\n      {isOpen && !loading && searchTerm.length < minSearchLength && (\n        <div className=\"absolute z-50 mt-1 w-full rounded-md border p-4 shadow-lg bg-white border-gray-200\">\n          <div className=\"text-center text-muted\">\n            {typeof searchInstructions === 'string' ? (\n              <>\n                <svg\n                  className=\"mx-auto mb-2 size-8 text-muted\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth=\"2\"\n                    d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                  />\n                </svg>\n                <p className=\"text-sm\">{searchInstructions}</p>\n                <p className=\"mt-1 text-xs\">Type at least {minSearchLength} characters</p>\n              </>\n            ) : (\n              searchInstructions\n            )}\n          </div>\n        </div>\n      )}\n\n      {error && (\n        <p className=\"mt-2 text-sm text-red-600\" role=\"alert\">\n          {error}\n        </p>\n      )}\n    </div>\n  );\n}\n",
          "filePath": "src/components/base/BaseSelector.tsx",
          "lineCount": 211,
          "cyclomaticComplexity": 23,
          "cognitiveComplexity": 20
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "BaseSelector",
          "line": 32,
          "message": "Function 'BaseSelector' has 211 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "BaseSelector",
          "line": 32,
          "complexity": 23,
          "message": "Function 'BaseSelector' has cyclomatic complexity of 23 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "BaseSelector",
          "line": 32,
          "complexity": 20,
          "message": "Function 'BaseSelector' has cognitive complexity of 20 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/examples/GeographicSelectorExample.tsx",
      "lineCount": 83,
      "functions": [
        {
          "name": "GeographicSelectorExample",
          "startLine": 5,
          "endLine": 83,
          "code": "export function GeographicSelectorExample() {\n  const [formData, setFormData] = useState({\n    regionCode: null,\n    regionName: null,\n    provinceCode: null,\n    provinceName: null,\n    cityCode: null,\n    cityName: null,\n    barangayCode: null,\n    barangayName: null,\n  });\n\n  const handleSelectionChange = (selection: any) => {\n    setFormData(selection);\n    console.log('Geographic Selection Updated:', selection);\n  };\n\n  const handleSubmit = () => {\n    // This is what gets sent to the API - only the codes\n    const dataToSubmit = {\n      regionCode: formData.regionCode,\n      provinceCode: formData.provinceCode,\n      cityMunicipalityCode: formData.cityCode,\n      barangayCode: formData.barangayCode,\n      // Names are stored locally for display but not submitted\n    };\n    \n    console.log('Data to submit to API:', dataToSubmit);\n    alert('Check console for submitted data');\n  };\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-6 space-y-6\">\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-6\">\n          Geographic Selector Example\n        </h1>\n        \n        <CascadingGeographicSelector\n          onSelectionChange={handleSelectionChange}\n          required\n        />\n        \n        <div className=\"mt-6\">\n          <button\n            onClick={handleSubmit}\n            disabled={!formData.barangayCode}\n            className=\"w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors\"\n          >\n            Submit (Check Console)\n          </button>\n        </div>\n      </div>\n\n      {/* Current Selection Display */}\n      <div className=\"bg-gray-50 rounded-lg p-4\">\n        <h3 className=\"font-semibold text-gray-800 mb-3\">Current Selection Data:</h3>\n        <pre className=\"text-sm text-gray-600 overflow-auto\">\n          {JSON.stringify(formData, null, 2)}\n        </pre>\n      </div>\n\n      {/* API Data Preview */}\n      {formData.barangayCode && (\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n          <h3 className=\"font-semibold text-blue-800 mb-3\">Data sent to API (codes only):</h3>\n          <pre className=\"text-sm text-blue-700\">\n            {JSON.stringify({\n              regionCode: formData.regionCode,\n              provinceCode: formData.provinceCode,\n              cityMunicipalityCode: formData.cityCode,\n              barangayCode: formData.barangayCode,\n            }, null, 2)}\n          </pre>\n        </div>\n      )}\n    </div>\n  );\n}\n",
          "filePath": "src/components/examples/GeographicSelectorExample.tsx",
          "lineCount": 79,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "GeographicSelectorExample",
          "line": 5,
          "message": "Function 'GeographicSelectorExample' has 79 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/lazy/LazyComponents.tsx",
      "lineCount": 231,
      "functions": [
        {
          "name": "LoadingFallback",
          "startLine": 9,
          "endLine": 21,
          "code": "function LoadingFallback({ height = '200px' }: { height?: string }) {\n  return (\n    <div \n      className=\"flex items-center justify-center bg-gray-50 rounded-lg border border-gray-200\"\n      style={{ minHeight: height }}\n    >\n      <div className=\"flex flex-col items-center gap-3\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        <span className=\"text-sm text-gray-600\">Loading...</span>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/lazy/LazyComponents.tsx",
          "lineCount": 13,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "FormSkeleton",
          "startLine": 24,
          "endLine": 39,
          "code": "function FormSkeleton() {\n  return (\n    <div className=\"space-y-6 p-6\">\n      {Array.from({ length: 5 }).map((_, i) => (\n        <div key={i} className=\"space-y-2\">\n          <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"h-10 bg-gray-100 rounded\"></div>\n        </div>\n      ))}\n      <div className=\"flex gap-3\">\n        <div className=\"h-10 bg-gray-200 rounded w-24\"></div>\n        <div className=\"h-10 bg-gray-200 rounded w-24\"></div>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/lazy/LazyComponents.tsx",
          "lineCount": 16,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "TableSkeleton",
          "startLine": 42,
          "endLine": 62,
          "code": "function TableSkeleton() {\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n      <div className=\"space-y-2\">\n        <div className=\"grid grid-cols-4 gap-4\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <div key={i} className=\"h-6 bg-gray-300 rounded\"></div>\n          ))}\n        </div>\n        {Array.from({ length: 5 }).map((_, i) => (\n          <div key={i} className=\"grid grid-cols-4 gap-4\">\n            {Array.from({ length: 4 }).map((_, j) => (\n              <div key={j} className=\"h-6 bg-gray-100 rounded\"></div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/lazy/LazyComponents.tsx",
          "lineCount": 21,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "withLazyLoading",
          "startLine": 65,
          "endLine": 66,
          "code": "function withLazyLoading<P extends object>(\n  LazyComponent: ComponentType<P>,\n",
          "filePath": "src/components/lazy/LazyComponents.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "createHouseholdModal",
          "startLine": 210,
          "endLine": 211,
          "code": "  createHouseholdModal: () => import('@/components/organisms/CreateHouseholdModal'),\n  dataTable: () => import('@/components/organisms/DataTable'),\n",
          "filePath": "src/components/lazy/LazyComponents.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "populationPyramid",
          "startLine": 212,
          "endLine": 213,
          "code": "  populationPyramid: () => import('@/components/organisms/PopulationPyramid'),\n  userProfile: () => import('@/components/organisms/UserProfile'),\n",
          "filePath": "src/components/lazy/LazyComponents.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "addressSelector",
          "startLine": 214,
          "endLine": 215,
          "code": "  addressSelector: () => import('@/components/organisms/AddressSelector'),\n  personalInformation: () => import('@/components/organisms/PersonalInformation'),\n",
          "filePath": "src/components/lazy/LazyComponents.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "sectoralInfo",
          "startLine": 216,
          "endLine": 217,
          "code": "  sectoralInfo: () => import('@/components/organisms/SectoralInfo'),\n  educationEmployment: () => import('@/components/organisms/EducationEmployment'),\n",
          "filePath": "src/components/lazy/LazyComponents.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "errorModal",
          "startLine": 218,
          "endLine": 219,
          "code": "  errorModal: () => import('@/components/molecules/ErrorModal'),\n  successModal: () => import('@/components/molecules/SuccessModal'),\n",
          "filePath": "src/components/lazy/LazyComponents.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "cascadingGeographicSelector",
          "startLine": 220,
          "endLine": 221,
          "code": "  cascadingGeographicSelector: () => import('@/components/molecules/CascadingGeographicSelector'),\n  geographicLocationStep: () => import('@/components/organisms/GeographicLocationStep'),\n",
          "filePath": "src/components/lazy/LazyComponents.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "usePreloadOnHover",
          "startLine": 225,
          "endLine": 231,
          "code": "export function usePreloadOnHover(componentKey: keyof typeof preloadComponents) {\n  return {\n    onMouseEnter: () => {\n      preloadComponents[componentKey]();\n    },\n  };\n}\n",
          "filePath": "src/components/lazy/LazyComponents.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 2
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/molecules/AccessibleModal/AccessibleModal.tsx",
      "lineCount": 153,
      "functions": [
        {
          "name": "AccessibleModal",
          "startLine": 16,
          "endLine": 149,
          "code": "export default function AccessibleModal({\n  isOpen,\n  onClose,\n  title,\n  description,\n  children,\n  size = 'md',\n  closeOnEscape = true,\n  closeOnBackdropClick = true,\n  className,\n  showCloseButton = true,\n  footer,\n}: AccessibleModalProps) {\n  const focusTrapRef = useFocusTrap(isOpen);\n  const backdropRef = useRef<HTMLDivElement>(null);\n\n  // Handle Escape key\n  useEffect(() => {\n    if (!isOpen || !closeOnEscape) return;\n\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        onClose();\n      }\n    };\n\n    document.addEventListener('keydown', handleEscape);\n    return () => document.removeEventListener('keydown', handleEscape);\n  }, [isOpen, onClose, closeOnEscape]);\n\n  // Announce modal opening to screen readers\n  useEffect(() => {\n    if (isOpen) {\n      announceToScreenReader(`${title} dialog opened`, 'assertive');\n    }\n  }, [isOpen, title]);\n\n  // Prevent body scroll when modal is open\n  useEffect(() => {\n    if (isOpen) {\n      document.body.style.overflow = 'hidden';\n    }\n    return () => {\n      document.body.style.overflow = '';\n    };\n  }, [isOpen]);\n\n  // Handle backdrop click\n  const handleBackdropClick = (event: React.MouseEvent) => {\n    if (closeOnBackdropClick && event.target === backdropRef.current) {\n      onClose();\n    }\n  };\n\n  if (!isOpen) return null;\n\n  const sizeClasses = {\n    sm: 'max-w-sm',\n    md: 'max-w-md',\n    lg: 'max-w-lg',\n    xl: 'max-w-xl',\n  };\n\n  const modalContent = (\n    <div\n      ref={backdropRef}\n      className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50 p-4 backdrop-blur-sm\"\n      onClick={handleBackdropClick}\n      aria-modal=\"true\"\n      role=\"dialog\"\n      aria-labelledby=\"modal-title\"\n      aria-describedby={description ? 'modal-description' : undefined}\n    >\n      <div\n        ref={focusTrapRef}\n        className={cn(\n          'relative w-full rounded-lg bg-white shadow-xl dark:bg-gray-800',\n          'transform transition-all duration-200',\n          'animate-in fade-in-0 zoom-in-95',\n          sizeClasses[size],\n          className\n        )}\n      >\n        {/* Header */}\n        <div className=\"flex items-start justify-between border-b border-gray-200 p-4 dark:border-gray-700\">\n          <div>\n            <h2 id=\"modal-title\" className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n              {title}\n            </h2>\n            {description && (\n              <p id=\"modal-description\" className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">\n                {description}\n              </p>\n            )}\n          </div>\n          {showCloseButton && (\n            <button\n              onClick={onClose}\n              className=\"ml-4 rounded-md p-1.5 text-gray-400 transition-colors hover:bg-gray-100 hover:text-gray-600 dark:hover:bg-gray-700 dark:hover:text-gray-200\"\n              aria-label=\"Close dialog\"\n            >\n              <svg\n                className=\"size-5\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n                strokeWidth={2}\n              >\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n          )}\n        </div>\n\n        {/* Content */}\n        <div className=\"max-h-[60vh] overflow-y-auto p-4\">{children}</div>\n\n        {/* Footer */}\n        {footer && (\n          <div className=\"flex items-center justify-end gap-2 border-t border-gray-200 p-4 dark:border-gray-700\">\n            {footer}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  // Portal to render modal at root level\n  if (typeof document !== 'undefined') {\n    return createPortal(modalContent, document.body);\n  }\n\n  return null;\n}\n",
          "filePath": "src/components/molecules/AccessibleModal/AccessibleModal.tsx",
          "lineCount": 134,
          "cyclomaticComplexity": 14,
          "cognitiveComplexity": 19
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "AccessibleModal",
          "line": 16,
          "message": "Function 'AccessibleModal' has 134 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "AccessibleModal",
          "line": 16,
          "complexity": 14,
          "message": "Function 'AccessibleModal' has cyclomatic complexity of 14 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "AccessibleModal",
          "line": 16,
          "complexity": 19,
          "message": "Function 'AccessibleModal' has cognitive complexity of 19 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/ButtonGroup/ButtonGroup.stories.tsx",
      "lineCount": 406,
      "functions": [
        {
          "name": "render",
          "startLine": 53,
          "endLine": 54,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/molecules/ButtonGroup/ButtonGroup.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 68,
          "endLine": 69,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/molecules/ButtonGroup/ButtonGroup.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 83,
          "endLine": 84,
          "code": "  render: () => (\n    <div className=\"space-y-8\">\n",
          "filePath": "src/components/molecules/ButtonGroup/ButtonGroup.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 107,
          "endLine": 108,
          "code": "  render: () => (\n    <div className=\"space-y-8\">\n",
          "filePath": "src/components/molecules/ButtonGroup/ButtonGroup.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 149,
          "endLine": 150,
          "code": "  render: () => (\n    <div className=\"space-y-8\">\n",
          "filePath": "src/components/molecules/ButtonGroup/ButtonGroup.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "ToggleComponent",
          "startLine": 179,
          "endLine": 260,
          "code": "const ToggleComponent = () => {\n  const [alignment, setAlignment] = useState('left');\n  const [view, setView] = useState('grid');\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"mb-4 text-lg font-semibold\">Text Alignment Toggle</h3>\n        <ButtonGroup attached>\n          <Button\n            variant={alignment === 'left' ? 'primary' : 'primary-outline'}\n            onClick={() => setAlignment('left')}\n            iconOnly\n            aria-label=\"Align left\"\n          >\n            <svg className=\"size-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path d=\"M15 15H3v2h12v-2zm0-8H3v2h12V7zM3 13h18v-2H3v2zm0 8h18v-2H3v2zM3 3v2h18V3H3z\" />\n            </svg>\n          </Button>\n          <Button\n            variant={alignment === 'center' ? 'primary' : 'primary-outline'}\n            onClick={() => setAlignment('center')}\n            iconOnly\n            aria-label=\"Align center\"\n          >\n            <svg className=\"size-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path d=\"M7 15v2h10v-2H7zm-4 6h18v-2H3v2zm0-8h18v-2H3v2zm4-6v2h10V7H7zM3 3v2h18V3H3z\" />\n            </svg>\n          </Button>\n          <Button\n            variant={alignment === 'right' ? 'primary' : 'primary-outline'}\n            onClick={() => setAlignment('right')}\n            iconOnly\n            aria-label=\"Align right\"\n          >\n            <svg className=\"size-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path d=\"M3 21h18v-2H3v2zm6-4h12v-2H9v2zm-6-4h18v-2H3v2zm6-4h12V7H9v2zM3 3v2h18V3H3z\" />\n            </svg>\n          </Button>\n        </ButtonGroup>\n        <p className=\"mt-2 text-sm text-gray-600\">Current: {alignment}</p>\n      </div>\n\n      <div>\n        <h3 className=\"mb-4 text-lg font-semibold\">View Toggle</h3>\n        <ButtonGroup attached>\n          <Button\n            variant={view === 'list' ? 'secondary' : 'secondary-outline'}\n            onClick={() => setView('list')}\n            iconOnly\n            aria-label=\"List view\"\n          >\n            <svg className=\"size-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M4 6h16M4 10h16M4 14h16M4 18h16\"\n              />\n            </svg>\n          </Button>\n          <Button\n            variant={view === 'grid' ? 'secondary' : 'secondary-outline'}\n            onClick={() => setView('grid')}\n            iconOnly\n            aria-label=\"Grid view\"\n          >\n            <svg className=\"size-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M4 5a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM14 5a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1V5zM4 15a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1H5a1 1 0 01-1-1v-4zM14 15a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1v-4z\"\n              />\n            </svg>\n          </Button>\n        </ButtonGroup>\n        <p className=\"mt-2 text-sm text-gray-600\">Current view: {view}</p>\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/molecules/ButtonGroup/ButtonGroup.stories.tsx",
          "lineCount": 82,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 5
        },
        {
          "name": "render",
          "startLine": 263,
          "endLine": 264,
          "code": "  render: () => <ToggleComponent />,\n};\n",
          "filePath": "src/components/molecules/ButtonGroup/ButtonGroup.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 267,
          "endLine": 268,
          "code": "  render: () => (\n    <div className=\"space-y-8\">\n",
          "filePath": "src/components/molecules/ButtonGroup/ButtonGroup.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 370,
          "endLine": 371,
          "code": "  render: () => (\n    <div className=\"space-y-8\">\n",
          "filePath": "src/components/molecules/ButtonGroup/ButtonGroup.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 406 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "ToggleComponent",
          "line": 179,
          "message": "Function 'ToggleComponent' has 82 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/CascadingGeographicSelector/CascadingGeographicSelector.tsx",
      "lineCount": 588,
      "functions": [
        {
          "name": "CascadingGeographicSelector",
          "startLine": 48,
          "endLine": 587,
          "code": "export function CascadingGeographicSelector({\n  onSelectionChange,\n  initialValues,\n  disabled = false,\n  required = false,\n  autoPopulateFromUser = false,\n}: CascadingGeographicSelectorProps) {\n  // State for each level\n  const [regions, setRegions] = useState<GeographicOption[]>([]);\n  const [provinces, setProvinces] = useState<GeographicOption[]>([]);\n  const [cities, setCities] = useState<GeographicOption[]>([]);\n  const [barangays, setBarangays] = useState<GeographicOption[]>([]);\n\n  // Selected values\n  const [selectedRegion, setSelectedRegion] = useState<GeographicOption | null>(null);\n  const [selectedProvince, setSelectedProvince] = useState<GeographicOption | null>(null);\n  const [selectedCity, setSelectedCity] = useState<GeographicOption | null>(null);\n  const [selectedBarangay, setSelectedBarangay] = useState<GeographicOption | null>(null);\n\n  // Search states\n  const [regionSearch, setRegionSearch] = useState('');\n  const [provinceSearch, setProvinceSearch] = useState('');\n  const [citySearch, setCitySearch] = useState('');\n  const [barangaySearch, setBarangaySearch] = useState('');\n\n  // Loading states\n  const [loadingRegions, setLoadingRegions] = useState(false);\n  const [loadingProvinces, setLoadingProvinces] = useState(false);\n  const [loadingCities, setLoadingCities] = useState(false);\n  const [loadingBarangays, setLoadingBarangays] = useState(false);\n  const [initialHierarchyLoaded, setInitialHierarchyLoaded] = useState(false);\n\n  // Helper function to get auth headers\n  const getAuthHeaders = useCallback(async (): Promise<HeadersInit> => {\n    const {\n      data: { session },\n    } = await supabase.auth.getSession();\n    return session?.access_token ? { Authorization: `Bearer ${session.access_token}` } : {};\n  }, []);\n\n  // API calls\n  const fetchRegions = useCallback(async () => {\n    setLoadingRegions(true);\n    try {\n      const response = await fetch('/api/addresses/regions/public');\n      if (response.ok) {\n        const data = await response.json();\n        setRegions(data.data || []);\n      } else {\n        console.error('Failed to fetch regions:', response.status);\n      }\n    } catch (error) {\n      console.error('Error fetching regions:', error);\n    } finally {\n      setLoadingRegions(false);\n    }\n  }, []);\n\n  const fetchProvinces = useCallback(\n    async (regionCode: string) => {\n      if (!regionCode) return;\n      setLoadingProvinces(true);\n      try {\n        const response = await fetch(`/api/addresses/provinces/public?regionCode=${regionCode}`);\n        if (response.ok) {\n          const data = await response.json();\n          setProvinces(data.data || []);\n        } else {\n          console.error('Failed to fetch provinces:', response.status);\n        }\n      } catch (error) {\n        console.error('Error fetching provinces:', error);\n      } finally {\n        setLoadingProvinces(false);\n      }\n    },\n    []\n  );\n\n  const fetchCities = useCallback(\n    async (provinceCode: string) => {\n      if (!provinceCode) return;\n      setLoadingCities(true);\n      try {\n        const response = await fetch(`/api/addresses/cities/public?provinceCode=${provinceCode}`);\n        if (response.ok) {\n          const data = await response.json();\n          setCities(data.data || []);\n        } else {\n          console.error('Failed to fetch cities:', response.status);\n        }\n      } catch (error) {\n        console.error('Error fetching cities:', error);\n      } finally {\n        setLoadingCities(false);\n      }\n    },\n    []\n  );\n\n  const fetchBarangays = useCallback(\n    async (cityCode: string) => {\n      if (!cityCode) return;\n      setLoadingBarangays(true);\n      try {\n        const response = await fetch(`/api/addresses/barangays/public?cityCode=${cityCode}`);\n        if (response.ok) {\n          const data = await response.json();\n          setBarangays(data.data || []);\n        } else {\n          console.error('Failed to fetch barangays:', response.status);\n        }\n      } catch (error) {\n        console.error('Error fetching barangays:', error);\n      } finally {\n        setLoadingBarangays(false);\n      }\n    },\n    []\n  );\n\n  // Auto-populate from logged-in user's location using dedicated API\n  const autoPopulateFromUserLocation = useCallback(async () => {\n    if (!autoPopulateFromUser) return;\n    \n    console.log('🔄 Auto-populating from user location...');\n    \n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session?.user) {\n        console.log('❌ No user session found');\n        return;\n      }\n      \n      console.log('✅ User session found:', session.user.email);\n\n      // Use dedicated API endpoint for secure multi-tenant auto-populate\n      const response = await fetch('/api/user/geographic-location', {\n        headers: {\n          'Authorization': `Bearer ${session.access_token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('❌ Auto-populate API error:', response.status, errorText);\n        return;\n      }\n\n      const hierarchy = await response.json();\n      console.log('✅ Geographic hierarchy received:', hierarchy);\n\n      // Set region and load provinces\n      if (hierarchy.region) {\n        setSelectedRegion(hierarchy.region);\n        setRegionSearch(hierarchy.region.name);\n        await fetchProvinces(hierarchy.region.code);\n\n        // Set province and load cities\n        if (hierarchy.province) {\n          setSelectedProvince(hierarchy.province);\n          setProvinceSearch(hierarchy.province.name);\n          await fetchCities(hierarchy.province.code);\n\n          // Set city and load barangays\n          if (hierarchy.city) {\n            setSelectedCity(hierarchy.city);\n            setCitySearch(hierarchy.city.name);\n            await fetchBarangays(hierarchy.city.code);\n\n            // Set barangay\n            if (hierarchy.barangay) {\n              setSelectedBarangay(hierarchy.barangay);\n              setBarangaySearch(hierarchy.barangay.name);\n            }\n          }\n        }\n      }\n\n      console.log('🎉 Auto-population completed successfully');\n    } catch (error) {\n      console.error('❌ Error auto-populating user location:', error);\n    }\n  }, [autoPopulateFromUser, fetchProvinces, fetchCities, fetchBarangays]);\n\n  // Load initial data\n  useEffect(() => {\n    fetchRegions();\n  }, [fetchRegions]);\n\n  // Handle initialValues - load the full hierarchy if codes are provided (only once)\n  useEffect(() => {\n    const loadInitialHierarchy = async () => {\n      if (!initialValues?.regionCode || !regions.length || initialHierarchyLoaded) return;\n      \n      console.log('🔧 Loading initial hierarchy from form data:', initialValues);\n      setInitialHierarchyLoaded(true); // Prevent re-runs\n      \n      try {\n        // Find and set region\n        const region = regions.find(r => r.code === initialValues.regionCode);\n        if (region) {\n          setSelectedRegion(region);\n          setRegionSearch(region.name);\n          \n          // Load provinces and find the selected one\n          if (initialValues.provinceCode) {\n            const provinceResponse = await fetch(`/api/addresses/provinces/public?regionCode=${initialValues.regionCode}`);\n            if (provinceResponse.ok) {\n              const provinceResult = await provinceResponse.json();\n              setProvinces(provinceResult.data || []);\n              const province = provinceResult.data?.find((p: any) => p.code === initialValues.provinceCode);\n              \n              if (province) {\n                setSelectedProvince(province);\n                setProvinceSearch(province.name);\n                \n                // Load cities and find the selected one\n                if (initialValues.cityCode) {\n                  const cityResponse = await fetch(`/api/addresses/cities/public?provinceCode=${initialValues.provinceCode}`);\n                  if (cityResponse.ok) {\n                    const cityResult = await cityResponse.json();\n                    setCities(cityResult.data || []);\n                    const city = cityResult.data?.find((c: any) => c.code === initialValues.cityCode);\n                    \n                    if (city) {\n                      setSelectedCity(city);\n                      setCitySearch(city.name);\n                      \n                      // Load barangays and find the selected one\n                      if (initialValues.barangayCode) {\n                        const barangayResponse = await fetch(`/api/addresses/barangays/public?cityCode=${initialValues.cityCode}`);\n                        if (barangayResponse.ok) {\n                          const barangayResult = await barangayResponse.json();\n                          setBarangays(barangayResult.data || []);\n                          const barangay = barangayResult.data?.find((b: any) => b.code === initialValues.barangayCode);\n                          \n                          if (barangay) {\n                            setSelectedBarangay(barangay);\n                            setBarangaySearch(barangay.name);\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        \n        console.log('✅ Initial hierarchy loaded successfully');\n      } catch (error) {\n        console.error('❌ Error loading initial hierarchy:', error);\n      }\n    };\n    \n    loadInitialHierarchy();\n  }, [initialValues?.regionCode, initialValues?.provinceCode, initialValues?.cityCode, initialValues?.barangayCode, regions.length, initialHierarchyLoaded]);\n\n  // Auto-populate after regions are loaded (only if no initial values provided)\n  useEffect(() => {\n    if (regions.length > 0 && autoPopulateFromUser && !initialValues?.regionCode) {\n      autoPopulateFromUserLocation();\n    }\n  }, [regions, autoPopulateFromUser, autoPopulateFromUserLocation, initialValues?.regionCode]);\n\n  // Handle selection changes\n  const handleRegionSelect = useCallback(\n    (region: GeographicOption) => {\n      setSelectedRegion(region);\n      setSelectedProvince(null);\n      setSelectedCity(null);\n      setSelectedBarangay(null);\n      setProvinces([]);\n      setCities([]);\n      setBarangays([]);\n      setRegionSearch(region.name);\n      setProvinceSearch('');\n      setCitySearch('');\n      setBarangaySearch('');\n      fetchProvinces(region.code);\n    },\n    [fetchProvinces]\n  );\n\n  const handleProvinceSelect = useCallback(\n    (province: GeographicOption) => {\n      setSelectedProvince(province);\n      setSelectedCity(null);\n      setSelectedBarangay(null);\n      setCities([]);\n      setBarangays([]);\n      setProvinceSearch(province.name);\n      setCitySearch('');\n      setBarangaySearch('');\n      fetchCities(province.code);\n    },\n    [fetchCities]\n  );\n\n  const handleCitySelect = useCallback(\n    (city: GeographicOption) => {\n      setSelectedCity(city);\n      setSelectedBarangay(null);\n      setBarangays([]);\n      setCitySearch(`${city.name}${city.type ? ` (${city.type})` : ''}`);\n      setBarangaySearch('');\n      fetchBarangays(city.code);\n    },\n    [fetchBarangays]\n  );\n\n  const handleBarangaySelect = useCallback((barangay: GeographicOption) => {\n    setSelectedBarangay(barangay);\n    setBarangaySearch(barangay.name);\n  }, []);\n\n  // Update parent component when selection changes\n  useEffect(() => {\n    onSelectionChange({\n      regionCode: selectedRegion?.code || null,\n      regionName: selectedRegion?.name || null,\n      provinceCode: selectedProvince?.code || null,\n      provinceName: selectedProvince?.name || null,\n      cityCode: selectedCity?.code || null,\n      cityName: selectedCity?.name || null,\n      barangayCode: selectedBarangay?.code || null,\n      barangayName: selectedBarangay?.name || null,\n    });\n  }, [selectedRegion, selectedProvince, selectedCity, selectedBarangay]);\n\n  // Filter functions\n  const filterOptions = (options: GeographicOption[], searchTerm: string) => {\n    if (!searchTerm) return options.slice(0, 10); // Limit to 10 for performance\n    return options\n      .filter(\n        option =>\n          option.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          option.code.includes(searchTerm)\n      )\n      .slice(0, 10);\n  };\n\n  // Dropdown component\n  const DropdownSelector = ({\n    label,\n    icon: Icon,\n    value,\n    searchValue,\n    onSearchChange,\n    options,\n    onSelect,\n    loading,\n    disabled: fieldDisabled,\n    placeholder,\n    required: fieldRequired,\n  }: {\n    label: string;\n    icon: any;\n    value: string;\n    searchValue: string;\n    onSearchChange: (value: string) => void;\n    options: GeographicOption[];\n    onSelect: (option: GeographicOption) => void;\n    loading: boolean;\n    disabled: boolean;\n    placeholder: string;\n    required?: boolean;\n  }) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const filteredOptions = filterOptions(options, searchValue);\n\n    return (\n      <div className=\"relative\">\n        <label className=\"mb-1 block text-sm font-medium text-gray-700\">\n          {label}\n          {fieldRequired && <span className=\"ml-1 text-red-500\">*</span>}\n        </label>\n        <div className=\"relative\">\n          <div className=\"pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3\">\n            <Icon className=\"h-4 w-4 text-gray-400\" />\n          </div>\n          <input\n            type=\"text\"\n            value={searchValue}\n            onChange={e => {\n              onSearchChange(e.target.value);\n              setIsOpen(true);\n            }}\n            onFocus={() => setIsOpen(true)}\n            disabled={fieldDisabled || disabled}\n            placeholder={placeholder}\n            className=\"block w-full rounded-lg border border-gray-300 py-2 pl-10 pr-10 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 disabled:cursor-not-allowed disabled:bg-gray-100\"\n          />\n          <div className=\"absolute inset-y-0 right-0 flex items-center pr-3\">\n            {loading ? (\n              <div className=\"h-4 w-4 animate-spin rounded-full border-2 border-blue-500 border-t-transparent\" />\n            ) : (\n              <ChevronDown\n                className={`h-4 w-4 text-gray-400 transition-transform ${isOpen ? 'rotate-180 transform' : ''}`}\n                onClick={() => !fieldDisabled && !disabled && setIsOpen(!isOpen)}\n              />\n            )}\n          </div>\n        </div>\n\n        {isOpen && !fieldDisabled && !disabled && (\n          <>\n            <div className=\"fixed inset-0 z-10\" onClick={() => setIsOpen(false)} />\n            <div className=\"absolute z-20 mt-1 max-h-60 w-full overflow-auto rounded-lg border border-gray-300 bg-white shadow-lg\">\n              {loading ? (\n                <div className=\"px-4 py-3 text-sm text-gray-500\">Loading...</div>\n              ) : filteredOptions.length > 0 ? (\n                filteredOptions.map(option => (\n                  <button\n                    key={option.code}\n                    type=\"button\"\n                    onClick={() => {\n                      onSelect(option);\n                      setIsOpen(false);\n                    }}\n                    className=\"w-full px-4 py-2 text-left text-sm first:rounded-t-lg last:rounded-b-lg hover:bg-blue-50 focus:bg-blue-50 focus:outline-none\"\n                  >\n                    <div className=\"font-medium text-gray-900\">\n                      {option.name}\n                      {option.type && <span className=\"text-gray-500\"> ({option.type})</span>}\n                    </div>\n                    <div className=\"text-xs text-gray-500\">Code: {option.code}</div>\n                  </button>\n                ))\n              ) : (\n                <div className=\"px-4 py-3 text-sm text-gray-500\">\n                  {searchValue ? 'No matches found' : 'Start typing to search...'}\n                </div>\n              )}\n            </div>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center gap-2 text-lg font-semibold text-gray-800\">\n        <MapPin className=\"h-5 w-5 text-blue-600\" />\n        Geographic Location\n      </div>\n\n      {/* Region Selector */}\n      <DropdownSelector\n        label=\"Region\"\n        icon={Users}\n        value={selectedRegion?.name || ''}\n        searchValue={regionSearch}\n        onSearchChange={setRegionSearch}\n        options={regions}\n        onSelect={handleRegionSelect}\n        loading={loadingRegions}\n        disabled={disabled}\n        placeholder=\"Search for a region...\"\n        required={required}\n      />\n\n      {/* Province Selector */}\n      <DropdownSelector\n        label=\"Province\"\n        icon={Building2}\n        value={selectedProvince?.name || ''}\n        searchValue={provinceSearch}\n        onSearchChange={setProvinceSearch}\n        options={provinces}\n        onSelect={handleProvinceSelect}\n        loading={loadingProvinces}\n        disabled={!selectedRegion || disabled}\n        placeholder={selectedRegion ? 'Search for a province...' : 'Select a region first'}\n        required={required}\n      />\n\n      {/* City/Municipality Selector */}\n      <DropdownSelector\n        label=\"City/Municipality\"\n        icon={Building2}\n        value={\n          selectedCity\n            ? `${selectedCity.name}${selectedCity.type ? ` (${selectedCity.type})` : ''}`\n            : ''\n        }\n        searchValue={citySearch}\n        onSearchChange={setCitySearch}\n        options={cities}\n        onSelect={handleCitySelect}\n        loading={loadingCities}\n        disabled={!selectedProvince || disabled}\n        placeholder={\n          selectedProvince ? 'Search for a city/municipality...' : 'Select a province first'\n        }\n        required={required}\n      />\n\n      {/* Barangay Selector */}\n      <DropdownSelector\n        label=\"Barangay\"\n        icon={Home}\n        value={selectedBarangay?.name || ''}\n        searchValue={barangaySearch}\n        onSearchChange={setBarangaySearch}\n        options={barangays}\n        onSelect={handleBarangaySelect}\n        loading={loadingBarangays}\n        disabled={!selectedCity || disabled}\n        placeholder={selectedCity ? 'Search for a barangay...' : 'Select a city/municipality first'}\n        required={required}\n      />\n\n      {/* Selection Summary */}\n      {selectedBarangay && (\n        <div className=\"mt-4 rounded-lg border border-green-200 bg-green-50 p-4\">\n          <h4 className=\"mb-2 text-sm font-medium text-green-800\">Selected Location:</h4>\n          <div className=\"space-y-1 text-sm text-green-700\">\n            <div>\n              Region: {selectedRegion?.name} ({selectedRegion?.code})\n            </div>\n            <div>\n              Province: {selectedProvince?.name} ({selectedProvince?.code})\n            </div>\n            <div>\n              City/Municipality: {selectedCity?.name} ({selectedCity?.code})\n            </div>\n            <div>\n              Barangay: {selectedBarangay?.name} ({selectedBarangay?.code})\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n",
          "filePath": "src/components/molecules/CascadingGeographicSelector/CascadingGeographicSelector.tsx",
          "lineCount": 540,
          "cyclomaticComplexity": 85,
          "cognitiveComplexity": 159
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 588 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "CascadingGeographicSelector",
          "line": 48,
          "message": "Function 'CascadingGeographicSelector' has 540 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "CascadingGeographicSelector",
          "line": 48,
          "complexity": 85,
          "message": "Function 'CascadingGeographicSelector' has cyclomatic complexity of 85 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "CascadingGeographicSelector",
          "line": 48,
          "complexity": 159,
          "message": "Function 'CascadingGeographicSelector' has cognitive complexity of 159 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/CivilStatusPieChart/CivilStatusPieChart.stories.tsx",
      "lineCount": 364,
      "functions": [
        {
          "name": "render",
          "startLine": 240,
          "endLine": 241,
          "code": "  render: () => (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 p-6\">\n",
          "filePath": "src/components/molecules/CivilStatusPieChart/CivilStatusPieChart.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 277,
          "endLine": 278,
          "code": "  render: () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 p-6 bg-gray-50 min-h-screen\">\n",
          "filePath": "src/components/molecules/CivilStatusPieChart/CivilStatusPieChart.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 327,
          "endLine": 328,
          "code": "  render: () => (\n    <div className=\"space-y-8\">\n",
          "filePath": "src/components/molecules/CivilStatusPieChart/CivilStatusPieChart.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 364 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/CivilStatusPieChart/CivilStatusPieChart.tsx",
      "lineCount": 112,
      "functions": [
        {
          "name": "CivilStatusPieChart",
          "startLine": 35,
          "endLine": 111,
          "code": "export default function CivilStatusPieChart({\n  data,\n  title = 'Civil Status Distribution',\n  className = '',\n}: CivilStatusPieChartProps) {\n  const { single, married, widowed, divorced, separated, annulled, registeredPartnership, liveIn } =\n    data;\n\n  const total =\n    single + married + widowed + divorced + separated + annulled + registeredPartnership + liveIn;\n\n  // Let GenericPieChart generate beautiful colors automatically\n  const colors = {\n    single: '',\n    married: '',\n    widowed: '',\n    divorced: '',\n    separated: '',\n    annulled: '',\n    registeredPartnership: '',\n    liveIn: '',\n  };\n\n  // Prepare chart data with semantic colors\n  const chartData = [\n    {\n      label: 'Single',\n      value: single,\n      percentage: total > 0 ? (single / total) * 100 : 0,\n      color: colors.single,\n    },\n    {\n      label: 'Married',\n      value: married,\n      percentage: total > 0 ? (married / total) * 100 : 0,\n      color: colors.married,\n    },\n    {\n      label: 'Widowed',\n      value: widowed,\n      percentage: total > 0 ? (widowed / total) * 100 : 0,\n      color: colors.widowed,\n    },\n    {\n      label: 'Divorced',\n      value: divorced,\n      percentage: total > 0 ? (divorced / total) * 100 : 0,\n      color: colors.divorced,\n    },\n    {\n      label: 'Separated',\n      value: separated,\n      percentage: total > 0 ? (separated / total) * 100 : 0,\n      color: colors.separated,\n    },\n    {\n      label: 'Annulled',\n      value: annulled,\n      percentage: total > 0 ? (annulled / total) * 100 : 0,\n      color: colors.annulled,\n    },\n    {\n      label: 'Registered Partnership',\n      value: registeredPartnership,\n      percentage: total > 0 ? (registeredPartnership / total) * 100 : 0,\n      color: colors.registeredPartnership,\n    },\n    {\n      label: 'Live-in',\n      value: liveIn,\n      percentage: total > 0 ? (liveIn / total) * 100 : 0,\n      color: colors.liveIn,\n    },\n  ]; // Show all categories including zero values\n\n  return <GenericPieChart data={chartData} title={title} className={className} />;\n}\n",
          "filePath": "src/components/molecules/CivilStatusPieChart/CivilStatusPieChart.tsx",
          "lineCount": 77,
          "cyclomaticComplexity": 9,
          "cognitiveComplexity": 9
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "CivilStatusPieChart",
          "line": 35,
          "message": "Function 'CivilStatusPieChart' has 77 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/DependencyRatioPieChart/DependencyRatioPieChart.stories.tsx",
      "lineCount": 366,
      "functions": [
        {
          "name": "render",
          "startLine": 229,
          "endLine": 230,
          "code": "  render: () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 p-6 bg-gray-50 min-h-screen\">\n",
          "filePath": "src/components/molecules/DependencyRatioPieChart/DependencyRatioPieChart.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 288,
          "endLine": 289,
          "code": "  render: () => (\n    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 p-6\">\n",
          "filePath": "src/components/molecules/DependencyRatioPieChart/DependencyRatioPieChart.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 323,
          "endLine": 324,
          "code": "  render: () => (\n    <div className=\"space-y-8 p-6\">\n",
          "filePath": "src/components/molecules/DependencyRatioPieChart/DependencyRatioPieChart.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 366 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/DependencyRatioPieChart/DependencyRatioPieChart.tsx",
      "lineCount": 72,
      "functions": [
        {
          "name": "DependencyRatioPieChart",
          "startLine": 30,
          "endLine": 71,
          "code": "export default function DependencyRatioPieChart({\n  data,\n  title,\n  className = '',\n}: DependencyRatioPieChartProps) {\n  const { youngDependents, workingAge, oldDependents } = data;\n  const total = youngDependents + workingAge + oldDependents;\n  \n  console.log('DependencyRatioPieChart received data:', data);\n  console.log('Calculated total:', total);\n\n  // Let GenericPieChart generate beautiful colors automatically\n  const colors = {\n    youngDependents: '',\n    workingAge: '',\n    oldDependents: '',\n  };\n\n  // Prepare chart data with semantic colors\n  const chartData = [\n    {\n      label: 'Young (0-14)',\n      value: youngDependents,\n      percentage: total > 0 ? (youngDependents / total) * 100 : 0,\n      color: colors.youngDependents,\n    },\n    {\n      label: 'Working (15-64)',\n      value: workingAge,\n      percentage: total > 0 ? (workingAge / total) * 100 : 0,\n      color: colors.workingAge,\n    },\n    {\n      label: 'Elderly (65+)',\n      value: oldDependents,\n      percentage: total > 0 ? (oldDependents / total) * 100 : 0,\n      color: colors.oldDependents,\n    },\n  ]; // Show all categories including zero values\n\n  return <GenericPieChart data={chartData} title={title} className={className} />;\n}\n",
          "filePath": "src/components/molecules/DependencyRatioPieChart/DependencyRatioPieChart.tsx",
          "lineCount": 42,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "DependencyRatioPieChart",
          "line": 30,
          "message": "Function 'DependencyRatioPieChart' has 42 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/DropdownSelect/DropdownSelect.stories.tsx",
      "lineCount": 464,
      "functions": [
        {
          "name": "render",
          "startLine": 91,
          "endLine": 105,
          "code": "  render: (args) => {\n    const [value, setValue] = useState('');\n    \n    return (\n      <div className=\"w-80\">\n        <DropdownSelect\n          {...args}\n          options={sampleOptions}\n          value={value}\n          onChange={setValue}\n          placeholder=\"Select a fruit...\"\n        />\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/DropdownSelect/DropdownSelect.stories.tsx",
          "lineCount": 15,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 112,
          "endLine": 127,
          "code": "  render: () => {\n    const [value, setValue] = useState('');\n    \n    return (\n      <div className=\"w-80\">\n        <DropdownSelect\n          label=\"Select Country\"\n          helperText=\"Choose your primary location\"\n          options={countriesOptions}\n          value={value}\n          onChange={setValue}\n          placeholder=\"Select a country...\"\n        />\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/DropdownSelect/DropdownSelect.stories.tsx",
          "lineCount": 16,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 131,
          "endLine": 147,
          "code": "  render: () => {\n    const [value, setValue] = useState('');\n    \n    return (\n      <div className=\"w-80\">\n        <DropdownSelect\n          label=\"Searchable Countries\"\n          helperText=\"Start typing to search...\"\n          options={countriesOptions}\n          value={value}\n          onChange={setValue}\n          placeholder=\"Type to search countries...\"\n          searchable\n        />\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/DropdownSelect/DropdownSelect.stories.tsx",
          "lineCount": 17,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 151,
          "endLine": 167,
          "code": "  render: () => {\n    const [value, setValue] = useState('');\n    \n    return (\n      <div className=\"w-96\">\n        <DropdownSelect\n          label=\"Choose Plan\"\n          helperText=\"Select the plan that best fits your needs\"\n          options={optionsWithDescriptions}\n          value={value}\n          onChange={setValue}\n          placeholder=\"Select a plan...\"\n          maxHeight={300}\n        />\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/DropdownSelect/DropdownSelect.stories.tsx",
          "lineCount": 17,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 171,
          "endLine": 187,
          "code": "  render: () => {\n    const [value, setValue] = useState('apple');\n    \n    return (\n      <div className=\"w-80\">\n        <DropdownSelect\n          label=\"Clearable Selection\"\n          helperText=\"You can clear the selection using the X button\"\n          options={sampleOptions}\n          value={value}\n          onChange={setValue}\n          placeholder=\"Select a fruit...\"\n          clearable\n        />\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/DropdownSelect/DropdownSelect.stories.tsx",
          "lineCount": 17,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 191,
          "endLine": 216,
          "code": "  render: () => {\n    const [value, setValue] = useState('');\n    \n    const userIcon = (\n      <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n      </svg>\n    );\n    \n    return (\n      <div className=\"w-80\">\n        <DropdownSelect\n          label=\"Select User\"\n          leftIcon={userIcon}\n          options={[\n            { value: 'john', label: 'John Doe' },\n            { value: 'jane', label: 'Jane Smith' },\n            { value: 'bob', label: 'Bob Johnson' },\n          ]}\n          value={value}\n          onChange={setValue}\n          placeholder=\"Choose user...\"\n        />\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/DropdownSelect/DropdownSelect.stories.tsx",
          "lineCount": 26,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 220,
          "endLine": 273,
          "code": "  render: () => {\n    const [value, setValue] = useState('apple');\n    \n    return (\n      <div className=\"space-y-6 w-80\">\n        <DropdownSelect\n          label=\"Normal State\"\n          options={sampleOptions}\n          value={value}\n          onChange={setValue}\n          placeholder=\"Select option...\"\n        />\n        \n        <DropdownSelect\n          label=\"Error State\"\n          options={sampleOptions}\n          value=\"\"\n          onChange={() => {}}\n          placeholder=\"Select option...\"\n          errorMessage=\"This field is required\"\n        />\n        \n        <DropdownSelect\n          label=\"Success State\"\n          variant=\"success\"\n          options={sampleOptions}\n          value=\"apple\"\n          onChange={() => {}}\n          placeholder=\"Select option...\"\n          helperText=\"Great choice!\"\n        />\n        \n        <DropdownSelect\n          label=\"Disabled State\"\n          options={sampleOptions}\n          value=\"apple\"\n          onChange={() => {}}\n          placeholder=\"Select option...\"\n          disabled\n          helperText=\"This field is currently disabled\"\n        />\n        \n        <DropdownSelect\n          label=\"Loading State\"\n          options={[]}\n          value=\"\"\n          onChange={() => {}}\n          placeholder=\"Select option...\"\n          loading\n          helperText=\"Loading options...\"\n        />\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/DropdownSelect/DropdownSelect.stories.tsx",
          "lineCount": 54,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 277,
          "endLine": 310,
          "code": "  render: () => {\n    const [values, setValues] = useState({ sm: '', md: 'banana', lg: '' });\n    \n    return (\n      <div className=\"space-y-6 w-80\">\n        <DropdownSelect\n          label=\"Small Size\"\n          size=\"sm\"\n          options={sampleOptions}\n          value={values.sm}\n          onChange={(v) => setValues(prev => ({ ...prev, sm: v }))}\n          placeholder=\"Small dropdown...\"\n        />\n        \n        <DropdownSelect\n          label=\"Medium Size (Default)\"\n          size=\"md\"\n          options={sampleOptions}\n          value={values.md}\n          onChange={(v) => setValues(prev => ({ ...prev, md: v }))}\n          placeholder=\"Medium dropdown...\"\n        />\n        \n        <DropdownSelect\n          label=\"Large Size\"\n          size=\"lg\"\n          options={sampleOptions}\n          value={values.lg}\n          onChange={(v) => setValues(prev => ({ ...prev, lg: v }))}\n          placeholder=\"Large dropdown...\"\n        />\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/DropdownSelect/DropdownSelect.stories.tsx",
          "lineCount": 34,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 314,
          "endLine": 338,
          "code": "  render: () => {\n    const [value, setValue] = useState('');\n    \n    // Generate a long list of options\n    const longOptions: DropdownOption[] = Array.from({ length: 50 }, (_, i) => ({\n      value: `option-${i}`,\n      label: `Option ${i + 1}`,\n      description: `This is option number ${i + 1}`\n    }));\n    \n    return (\n      <div className=\"w-80\">\n        <DropdownSelect\n          label=\"Long Options List\"\n          helperText=\"Scroll through many options with keyboard navigation\"\n          options={longOptions}\n          value={value}\n          onChange={setValue}\n          placeholder=\"Choose from many options...\"\n          searchable\n          maxHeight={200}\n        />\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/DropdownSelect/DropdownSelect.stories.tsx",
          "lineCount": 25,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 342,
          "endLine": 428,
          "code": "  render: () => {\n    const [formData, setFormData] = useState({\n      country: '',\n      plan: '',\n      user: '',\n    });\n    \n    const [errors, setErrors] = useState<Record<string, string>>({});\n    \n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      \n      const newErrors: Record<string, string> = {};\n      if (!formData.country) newErrors.country = 'Country is required';\n      if (!formData.plan) newErrors.plan = 'Plan is required';\n      if (!formData.user) newErrors.user = 'User is required';\n      \n      setErrors(newErrors);\n      \n      if (Object.keys(newErrors).length === 0) {\n        alert('Form submitted successfully!');\n      }\n    };\n    \n    return (\n      <form onSubmit={handleSubmit} className=\"w-96 space-y-6\">\n        <DropdownSelect\n          label=\"Country\"\n          options={countriesOptions}\n          value={formData.country}\n          onChange={(v) => setFormData(prev => ({ ...prev, country: v }))}\n          placeholder=\"Select your country...\"\n          errorMessage={errors.country}\n          clearable\n          searchable\n        />\n        \n        <DropdownSelect\n          label=\"Plan\"\n          options={optionsWithDescriptions}\n          value={formData.plan}\n          onChange={(v) => setFormData(prev => ({ ...prev, plan: v }))}\n          placeholder=\"Choose a plan...\"\n          errorMessage={errors.plan}\n          helperText=\"You can change your plan later\"\n        />\n        \n        <DropdownSelect\n          label=\"Assign to User\"\n          leftIcon={\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n            </svg>\n          }\n          options={[\n            { value: 'john', label: 'John Doe', description: 'Administrator' },\n            { value: 'jane', label: 'Jane Smith', description: 'Manager' },\n            { value: 'bob', label: 'Bob Johnson', description: 'User' },\n          ]}\n          value={formData.user}\n          onChange={(v) => setFormData(prev => ({ ...prev, user: v }))}\n          placeholder=\"Select user...\"\n          errorMessage={errors.user}\n          clearable\n        />\n        \n        <div className=\"flex gap-4\">\n          <button \n            type=\"submit\"\n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            Submit\n          </button>\n          <button \n            type=\"button\"\n            onClick={() => {\n              setFormData({ country: '', plan: '', user: '' });\n              setErrors({});\n            }}\n            className=\"px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600\"\n          >\n            Reset\n          </button>\n        </div>\n      </form>\n    );\n  },\n",
          "filePath": "src/components/molecules/DropdownSelect/DropdownSelect.stories.tsx",
          "lineCount": 87,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 5
        },
        {
          "name": "render",
          "startLine": 432,
          "endLine": 463,
          "code": "  render: () => {\n    const [value, setValue] = useState('');\n    \n    return (\n      <div className=\"space-y-6\">\n        <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n          <h3 className=\"text-lg font-semibold text-blue-800 mb-2\">Keyboard Navigation</h3>\n          <ul className=\"text-sm text-blue-700 space-y-1\">\n            <li>• <kbd className=\"px-1 py-0.5 bg-blue-100 rounded\">Tab</kbd> to focus the dropdown</li>\n            <li>• <kbd className=\"px-1 py-0.5 bg-blue-100 rounded\">Space</kbd> or <kbd className=\"px-1 py-0.5 bg-blue-100 rounded\">Enter</kbd> to open</li>\n            <li>• <kbd className=\"px-1 py-0.5 bg-blue-100 rounded\">↑</kbd><kbd className=\"px-1 py-0.5 bg-blue-100 rounded\">↓</kbd> to navigate options</li>\n            <li>• <kbd className=\"px-1 py-0.5 bg-blue-100 rounded\">Enter</kbd> to select</li>\n            <li>• <kbd className=\"px-1 py-0.5 bg-blue-100 rounded\">Esc</kbd> to close</li>\n            <li>• Type letters for quick navigation</li>\n          </ul>\n        </div>\n        \n        <div className=\"w-80\">\n          <DropdownSelect\n            label=\"Fully Accessible Dropdown\"\n            helperText=\"Try using keyboard navigation\"\n            options={countriesOptions}\n            value={value}\n            onChange={setValue}\n            placeholder=\"Select a country...\"\n            searchable\n            clearable\n          />\n        </div>\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/DropdownSelect/DropdownSelect.stories.tsx",
          "lineCount": 32,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 464 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 220,
          "message": "Function 'render' has 54 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 277,
          "message": "Function 'render' has 34 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 342,
          "message": "Function 'render' has 87 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 432,
          "message": "Function 'render' has 32 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/DropdownSelect/DropdownSelect.tsx",
      "lineCount": 614,
      "functions": [
        {
          "name": "handleClickOutside",
          "startLine": 152,
          "endLine": 159,
          "code": "      const handleClickOutside = (event: MouseEvent) => {\n        if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n          setIsOpen(false);\n          setSearchTerm('');\n          setHighlightedIndex(-1);\n          onBlur?.();\n        }\n      };\n",
          "filePath": "src/components/molecules/DropdownSelect/DropdownSelect.tsx",
          "lineCount": 8,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3
        },
        {
          "name": "handleKeyDown",
          "startLine": 218,
          "endLine": 320,
          "code": "      const handleKeyDown = (event: KeyboardEvent) => {\n        // Don't handle keyboard events if search input is focused\n        if (searchable && document.activeElement === searchInputRef.current) {\n          return;\n        }\n\n        // Handle keyboard events when dropdown is open\n        if (isOpen) {\n          // Handle alphanumeric keys for quick selection (only for non-searchable dropdowns)\n          if (!searchable && event.key.length === 1 && /^[a-zA-Z0-9]$/.test(event.key)) {\n            event.preventDefault();\n            const matchingIndex = filteredOptions.findIndex(option =>\n              option.label.toLowerCase().startsWith(event.key.toLowerCase())\n            );\n            if (matchingIndex >= 0) {\n              setHighlightedIndex(matchingIndex);\n            }\n            return;\n          }\n\n          switch (event.key) {\n            case 'ArrowDown':\n              event.preventDefault();\n              setHighlightedIndex(prev => {\n                const nextIndex = prev < filteredOptions.length - 1 ? prev + 1 : 0;\n                return nextIndex;\n              });\n              break;\n            case 'ArrowUp':\n              event.preventDefault();\n              setHighlightedIndex(prev => {\n                const nextIndex = prev > 0 ? prev - 1 : filteredOptions.length - 1;\n                return nextIndex;\n              });\n              break;\n            case 'Enter':\n              // Don't prevent default for Enter in search input - it's handled by onKeyDown\n              if (!searchable || document.activeElement !== searchInputRef.current) {\n                event.preventDefault();\n                if (highlightedIndex >= 0 && filteredOptions[highlightedIndex]) {\n                  handleSelect(filteredOptions[highlightedIndex]);\n                }\n              }\n              break;\n            case ' ': // Space key\n              event.preventDefault();\n              if (highlightedIndex >= 0 && filteredOptions[highlightedIndex]) {\n                handleSelect(filteredOptions[highlightedIndex]);\n              }\n              break;\n            case 'Tab':\n              // Tab key: Select highlighted option and close dropdown\n              if (highlightedIndex >= 0 && filteredOptions[highlightedIndex]) {\n                event.preventDefault();\n                handleSelect(filteredOptions[highlightedIndex]);\n              } else {\n                // If no option is highlighted, just close the dropdown and allow normal tab behavior\n                setIsOpen(false);\n                setSearchTerm('');\n                setHighlightedIndex(-1);\n              }\n              break;\n            case 'Escape':\n              event.preventDefault();\n              setIsOpen(false);\n              setSearchTerm('');\n              setHighlightedIndex(-1);\n              // Return focus to the trigger element\n              if (dropdownRef.current) {\n                const trigger = dropdownRef.current.querySelector(\n                  '[role=\"combobox\"]'\n                ) as HTMLElement;\n                trigger?.focus();\n              }\n              break;\n            case 'Home':\n              event.preventDefault();\n              setHighlightedIndex(0);\n              break;\n            case 'End':\n              event.preventDefault();\n              setHighlightedIndex(filteredOptions.length - 1);\n              break;\n          }\n        } else {\n          // Handle keyboard events when dropdown is closed\n          switch (event.key) {\n            case 'ArrowDown':\n            case 'ArrowUp':\n            case 'Enter':\n            case ' ': // Space key\n              // Open dropdown if trigger is focused\n              if (\n                document.activeElement === dropdownRef.current?.querySelector('[role=\"combobox\"]')\n              ) {\n                event.preventDefault();\n                setIsOpen(true);\n                setHighlightedIndex(0);\n              }\n              break;\n          }\n        }\n      };\n",
          "filePath": "src/components/molecules/DropdownSelect/DropdownSelect.tsx",
          "lineCount": 103,
          "cyclomaticComplexity": 36,
          "cognitiveComplexity": 43
        },
        {
          "name": "handleClear",
          "startLine": 326,
          "endLine": 331,
          "code": "    const handleClear = (e: React.MouseEvent) => {\n      e.stopPropagation();\n      onChange?.('');\n      setSearchTerm('');\n      setIsOpen(false);\n    };\n",
          "filePath": "src/components/molecules/DropdownSelect/DropdownSelect.tsx",
          "lineCount": 6,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "toggleDropdown",
          "startLine": 333,
          "endLine": 337,
          "code": "    const toggleDropdown = () => {\n      if (disabled || loading) return;\n      setIsOpen(prev => !prev);\n      setHighlightedIndex(-1);\n    };\n",
          "filePath": "src/components/molecules/DropdownSelect/DropdownSelect.tsx",
          "lineCount": 5,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 2
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 614 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "handleKeyDown",
          "line": 218,
          "message": "Function 'handleKeyDown' has 103 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "handleKeyDown",
          "line": 218,
          "complexity": 36,
          "message": "Function 'handleKeyDown' has cyclomatic complexity of 36 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "handleKeyDown",
          "line": 218,
          "complexity": 43,
          "message": "Function 'handleKeyDown' has cognitive complexity of 43 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/EmploymentStatusPieChart/EmploymentStatusPieChart.stories.tsx",
      "lineCount": 430,
      "functions": [
        {
          "name": "render",
          "startLine": 308,
          "endLine": 309,
          "code": "  render: () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 p-6 bg-gray-50 min-h-screen\">\n",
          "filePath": "src/components/molecules/EmploymentStatusPieChart/EmploymentStatusPieChart.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 397,
          "endLine": 398,
          "code": "  render: () => (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 p-6\">\n",
          "filePath": "src/components/molecules/EmploymentStatusPieChart/EmploymentStatusPieChart.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 430 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/EmploymentStatusPieChart/EmploymentStatusPieChart.tsx",
      "lineCount": 111,
      "functions": [
        {
          "name": "EmploymentStatusPieChart",
          "startLine": 35,
          "endLine": 110,
          "code": "export default function EmploymentStatusPieChart({\n  data,\n  title = 'Employment Status',\n  className = '',\n}: EmploymentStatusPieChartProps) {\n  const { employed, unemployed, selfEmployed, student, retired, homemaker, disabled, other } = data;\n\n  const total =\n    employed + unemployed + selfEmployed + student + retired + homemaker + disabled + other;\n\n  // Let GenericPieChart generate beautiful colors automatically\n  const colors = {\n    employed: '',\n    unemployed: '',\n    selfEmployed: '',\n    student: '',\n    retired: '',\n    homemaker: '',\n    disabled: '',\n    other: '',\n  };\n\n  // Prepare chart data with semantic colors\n  const chartData = [\n    {\n      label: 'Employed',\n      value: employed,\n      percentage: total > 0 ? (employed / total) * 100 : 0,\n      color: colors.employed,\n    },\n    {\n      label: 'Unemployed',\n      value: unemployed,\n      percentage: total > 0 ? (unemployed / total) * 100 : 0,\n      color: colors.unemployed,\n    },\n    {\n      label: 'Self-employed',\n      value: selfEmployed,\n      percentage: total > 0 ? (selfEmployed / total) * 100 : 0,\n      color: colors.selfEmployed,\n    },\n    {\n      label: 'Student',\n      value: student,\n      percentage: total > 0 ? (student / total) * 100 : 0,\n      color: colors.student,\n    },\n    {\n      label: 'Retired',\n      value: retired,\n      percentage: total > 0 ? (retired / total) * 100 : 0,\n      color: colors.retired,\n    },\n    {\n      label: 'Homemaker',\n      value: homemaker,\n      percentage: total > 0 ? (homemaker / total) * 100 : 0,\n      color: colors.homemaker,\n    },\n    {\n      label: 'Disabled',\n      value: disabled,\n      percentage: total > 0 ? (disabled / total) * 100 : 0,\n      color: colors.disabled,\n    },\n    {\n      label: 'Other',\n      value: other,\n      percentage: total > 0 ? (other / total) * 100 : 0,\n      color: colors.other,\n    },\n  ]; // Show all categories including zero values\n\n  return <GenericPieChart data={chartData} title={title} className={className} />;\n}\n",
          "filePath": "src/components/molecules/EmploymentStatusPieChart/EmploymentStatusPieChart.tsx",
          "lineCount": 76,
          "cyclomaticComplexity": 9,
          "cognitiveComplexity": 9
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "EmploymentStatusPieChart",
          "line": 35,
          "message": "Function 'EmploymentStatusPieChart' has 76 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/ErrorModal/ErrorModal.tsx",
      "lineCount": 92,
      "functions": [
        {
          "name": "onClose",
          "startLine": 6,
          "endLine": 7,
          "code": "  onClose: () => void;\n  title: string;\n",
          "filePath": "src/components/molecules/ErrorModal/ErrorModal.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "ErrorModal",
          "startLine": 25,
          "endLine": 92,
          "code": "export function ErrorModal({ isOpen, onClose, title, message, details }: ErrorModalProps) {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-50\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full max-h-[80vh] overflow-y-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <svg\n                className=\"w-6 h-6 text-red-600\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                strokeWidth=\"2\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  d=\"M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z\"\n                />\n              </svg>\n            </div>\n            <h3 className=\"ml-3 text-lg font-semibold text-gray-900\">{title}</h3>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n          >\n            <svg className=\"w-5 h-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n\n        {/* Body */}\n        <div className=\"p-6\">\n          <p className=\"text-gray-700 mb-4\">{message}</p>\n          \n          {details && details.length > 0 && (\n            <div className=\"mt-4\">\n              <h4 className=\"text-sm font-medium text-gray-900 mb-2\">Details:</h4>\n              <ul className=\"text-sm text-gray-600 space-y-1\">\n                {details.map((detail, index) => (\n                  <li key={index} className=\"flex items-start\">\n                    <span className=\"text-red-500 mr-2\">•</span>\n                    <span>{detail}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"flex justify-end px-6 py-4 bg-gray-50 rounded-b-lg\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors\"\n          >\n            OK\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/molecules/ErrorModal/ErrorModal.tsx",
          "lineCount": 68,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 2
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "ErrorModal",
          "line": 25,
          "message": "Function 'ErrorModal' has 68 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/FileUpload/FileUpload.stories.tsx",
      "lineCount": 416,
      "functions": [
        {
          "name": "mockValidateUploadedFile",
          "startLine": 6,
          "endLine": 10,
          "code": "const mockValidateUploadedFile = async (file: File) => ({\n  isValid: true,\n  errors: [],\n  fileInfo: { hash: 'mock-hash' }\n});\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.stories.tsx",
          "lineCount": 5,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "mockScanFileForViruses",
          "startLine": 12,
          "endLine": 15,
          "code": "const mockScanFileForViruses = async (file: File) => ({\n  clean: true,\n  threats: []\n});\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.stories.tsx",
          "lineCount": 4,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "mockLogFileOperation",
          "startLine": 17,
          "endLine": 19,
          "code": "const mockLogFileOperation = (operation: string, filename: string, user: string, status: string, metadata: any) => {\n  console.log('File operation:', { operation, filename, user, status, metadata });\n};\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.stories.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "error",
          "startLine": 23,
          "endLine": 24,
          "code": "  error: (message: string, data: any) => console.error(message, data)\n};\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 68,
          "endLine": 88,
          "code": "  render: (args) => {\n    const [files, setFiles] = useState<FileList | null>(null);\n    \n    return (\n      <div className=\"w-96\">\n        <FileUpload\n          {...args}\n          onFileSelect={(fileList) => {\n            setFiles(fileList);\n            console.log('Files selected:', fileList);\n          }}\n        />\n        \n        {files && (\n          <div className=\"mt-4 p-3 bg-gray-100 rounded text-sm\">\n            <strong>Selected:</strong> {Array.from(files).map(f => f.name).join(', ')}\n          </div>\n        )}\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.stories.tsx",
          "lineCount": 21,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "render",
          "startLine": 96,
          "endLine": 111,
          "code": "  render: () => {\n    const [files, setFiles] = useState<FileList | null>(null);\n    \n    return (\n      <div className=\"w-96\">\n        <FileUpload\n          label=\"Document Upload\"\n          helperText=\"Upload your supporting documents (PDF, DOC, DOCX)\"\n          acceptedFileTypes=\".pdf,.doc,.docx\"\n          maxFileSize={10}\n          showPreview\n          onFileSelect={setFiles}\n        />\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.stories.tsx",
          "lineCount": 16,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 115,
          "endLine": 130,
          "code": "  render: () => {\n    const [files, setFiles] = useState<FileList | null>(null);\n    \n    return (\n      <div className=\"w-96\">\n        <FileUpload\n          label=\"Multiple File Upload\"\n          helperText=\"You can select multiple files at once\"\n          multiple\n          showPreview\n          maxFileSize={5}\n          onFileSelect={setFiles}\n        />\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.stories.tsx",
          "lineCount": 16,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 134,
          "endLine": 151,
          "code": "  render: () => {\n    const [files, setFiles] = useState<FileList | null>(null);\n    \n    return (\n      <div className=\"w-96\">\n        <FileUpload\n          label=\"Profile Picture\"\n          dragText=\"Drop your profile picture here\"\n          browseText=\"or choose from device\"\n          helperText=\"Upload a profile picture to personalize your account\"\n          acceptedFileTypes=\"image/*\"\n          maxFileSize={2}\n          showPreview\n          onFileSelect={setFiles}\n        />\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.stories.tsx",
          "lineCount": 18,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 155,
          "endLine": 156,
          "code": "  render: () => (\n    <div className=\"space-y-8 w-full max-w-2xl\">\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 191,
          "endLine": 192,
          "code": "  render: () => (\n    <div className=\"space-y-8 w-96\">\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 224,
          "endLine": 225,
          "code": "  render: () => (\n    <div className=\"space-y-8 w-96\">\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 257,
          "endLine": 273,
          "code": "  render: () => {\n    const [files, setFiles] = useState<FileList | null>(null);\n    \n    return (\n      <div className=\"w-96\">\n        <FileUpload\n          label=\"Upload with Preview\"\n          helperText=\"Files will be shown below after selection\"\n          multiple\n          showPreview\n          acceptedFileTypes=\".pdf,.jpg,.jpeg,.png,.doc,.docx\"\n          maxFileSize={10}\n          onFileSelect={setFiles}\n        />\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.stories.tsx",
          "lineCount": 17,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 277,
          "endLine": 357,
          "code": "  render: () => {\n    const [formData, setFormData] = useState({\n      documents: null as FileList | null,\n      avatar: null as FileList | null,\n      resume: null as FileList | null,\n    });\n    \n    const [errors, setErrors] = useState<Record<string, string>>({});\n    \n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      \n      const newErrors: Record<string, string> = {};\n      if (!formData.documents) newErrors.documents = 'Please upload at least one document';\n      if (!formData.resume) newErrors.resume = 'Resume is required';\n      \n      setErrors(newErrors);\n      \n      if (Object.keys(newErrors).length === 0) {\n        alert('Form submitted successfully!');\n        console.log('Form data:', formData);\n      }\n    };\n    \n    return (\n      <form onSubmit={handleSubmit} className=\"w-full max-w-md space-y-6\">\n        <FileUpload\n          label=\"Profile Picture\"\n          dragText=\"Drop your photo here\"\n          browseText=\"or select from device\"\n          helperText=\"Optional: Add a profile picture (max 2MB)\"\n          acceptedFileTypes=\"image/*\"\n          maxFileSize={2}\n          showPreview\n          onFileSelect={(files) => setFormData(prev => ({ ...prev, avatar: files }))}\n        />\n        \n        <FileUpload\n          label=\"Resume/CV *\"\n          helperText=\"Upload your resume or CV (PDF preferred)\"\n          acceptedFileTypes=\".pdf,.doc,.docx\"\n          maxFileSize={5}\n          showPreview\n          errorMessage={errors.resume}\n          variant={errors.resume ? 'error' : 'default'}\n          onFileSelect={(files) => setFormData(prev => ({ ...prev, resume: files }))}\n        />\n        \n        <FileUpload\n          label=\"Supporting Documents *\"\n          helperText=\"Upload any supporting documents (certificates, portfolios, etc.)\"\n          multiple\n          acceptedFileTypes=\".pdf,.jpg,.jpeg,.png,.doc,.docx\"\n          maxFileSize={10}\n          showPreview\n          errorMessage={errors.documents}\n          variant={errors.documents ? 'error' : 'default'}\n          onFileSelect={(files) => setFormData(prev => ({ ...prev, documents: files }))}\n        />\n        \n        <div className=\"flex gap-4\">\n          <button\n            type=\"submit\"\n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            Submit Application\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => {\n              setFormData({ documents: null, avatar: null, resume: null });\n              setErrors({});\n            }}\n            className=\"px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600\"\n          >\n            Reset\n          </button>\n        </div>\n      </form>\n    );\n  },\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.stories.tsx",
          "lineCount": 81,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 6
        },
        {
          "name": "render",
          "startLine": 361,
          "endLine": 362,
          "code": "  render: () => (\n    <div className=\"space-y-8\">\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 391,
          "endLine": 392,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 416 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 277,
          "message": "Function 'render' has 81 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/FileUpload/FileUpload.tsx",
      "lineCount": 343,
      "functions": [
        {
          "name": "handleDragOver",
          "startLine": 77,
          "endLine": 82,
          "code": "    const handleDragOver = (e: React.DragEvent) => {\n      e.preventDefault();\n      if (!disabled) {\n        setIsDragOver(true);\n      }\n    };\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.tsx",
          "lineCount": 6,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2
        },
        {
          "name": "handleDragLeave",
          "startLine": 84,
          "endLine": 87,
          "code": "    const handleDragLeave = (e: React.DragEvent) => {\n      e.preventDefault();\n      setIsDragOver(false);\n    };\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.tsx",
          "lineCount": 4,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "handleDrop",
          "startLine": 89,
          "endLine": 97,
          "code": "    const handleDrop = (e: React.DragEvent) => {\n      e.preventDefault();\n      setIsDragOver(false);\n\n      if (disabled) return;\n\n      const files = e.dataTransfer.files;\n      handleFileSelection(files);\n    };\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.tsx",
          "lineCount": 9,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "handleFileSelection",
          "startLine": 99,
          "endLine": 164,
          "code": "    const handleFileSelection = async (files: FileList | null) => {\n      if (!files) return;\n\n      const fileArray = Array.from(files);\n      const validFiles: File[] = [];\n      const errors: string[] = [];\n\n      // Validate each file\n      for (const file of fileArray) {\n        try {\n          // Security validation\n          const validation = await validateUploadedFile(file);\n\n          if (!validation.isValid) {\n            errors.push(`${file.name}: ${validation.errors.join(', ')}`);\n            logFileOperation('upload', file.name, 'current-user', 'blocked', {\n              errors: validation.errors,\n              fileSize: file.size,\n              fileType: file.type,\n            });\n            continue;\n          }\n\n          // Virus scanning\n          const virusScan = await scanFileForViruses(file);\n          if (!virusScan.clean) {\n            errors.push(`${file.name}: Security threat detected - ${virusScan.threats.join(', ')}`);\n            logFileOperation('upload', file.name, 'current-user', 'blocked', {\n              threats: virusScan.threats,\n            });\n            continue;\n          }\n\n          // Additional size check if maxFileSize is specified\n          if (maxFileSize && file.size > maxFileSize * 1024 * 1024) {\n            errors.push(`${file.name}: File size exceeds maximum allowed (${maxFileSize}MB)`);\n            continue;\n          }\n\n          validFiles.push(file);\n          logFileOperation('upload', file.name, 'current-user', 'success', {\n            fileSize: file.size,\n            fileType: file.type,\n            fileHash: validation.fileInfo?.hash,\n          });\n        } catch (error) {\n          errors.push(`${file.name}: Validation error occurred`);\n          logFileOperation('upload', file.name, 'current-user', 'failure', {\n            error: String(error),\n          });\n        }\n      }\n\n      // Show errors if any\n      if (errors.length > 0) {\n        logger.error('File upload validation errors', { errors, filesAttempted: fileArray.length });\n        // You might want to show these errors in the UI\n        alert('File validation errors:\\n' + errors.join('\\n'));\n      }\n\n      // Only proceed with valid files\n      if (validFiles.length > 0) {\n        setSelectedFiles(multiple ? [...selectedFiles, ...validFiles] : validFiles);\n        onFileSelect?.(files);\n      }\n    };\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.tsx",
          "lineCount": 66,
          "cyclomaticComplexity": 11,
          "cognitiveComplexity": 19
        },
        {
          "name": "handleInputChange",
          "startLine": 166,
          "endLine": 168,
          "code": "    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      handleFileSelection(e.target.files);\n    };\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "handleBrowseClick",
          "startLine": 170,
          "endLine": 174,
          "code": "    const handleBrowseClick = () => {\n      if (!disabled) {\n        inputRef.current?.click();\n      }\n    };\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.tsx",
          "lineCount": 5,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2
        },
        {
          "name": "removeFile",
          "startLine": 176,
          "endLine": 179,
          "code": "    const removeFile = (index: number) => {\n      const newFiles = selectedFiles.filter((_, i) => i !== index);\n      setSelectedFiles(newFiles);\n    };\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.tsx",
          "lineCount": 4,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "formatFileSize",
          "startLine": 181,
          "endLine": 187,
          "code": "    const formatFileSize = (bytes: number) => {\n      if (bytes === 0) return '0 Bytes';\n      const k = 1024;\n      const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    };\n",
          "filePath": "src/components/molecules/FileUpload/FileUpload.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 343 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "handleFileSelection",
          "line": 99,
          "message": "Function 'handleFileSelection' has 66 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "handleFileSelection",
          "line": 99,
          "complexity": 11,
          "message": "Function 'handleFileSelection' has cyclomatic complexity of 11 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "handleFileSelection",
          "line": 99,
          "complexity": 19,
          "message": "Function 'handleFileSelection' has cognitive complexity of 19 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/FormField/FormField.stories.tsx",
      "lineCount": 460,
      "functions": [
        {
          "name": "render",
          "startLine": 57,
          "endLine": 58,
          "code": "  render: () => (\n    <div className=\"w-80\">\n",
          "filePath": "src/components/molecules/FormField/FormField.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 72,
          "endLine": 73,
          "code": "  render: () => (\n    <div className=\"w-full max-w-2xl space-y-4\">\n",
          "filePath": "src/components/molecules/FormField/FormField.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 101,
          "endLine": 102,
          "code": "  render: () => (\n    <div className=\"w-80 space-y-6\">\n",
          "filePath": "src/components/molecules/FormField/FormField.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 131,
          "endLine": 132,
          "code": "  render: () => (\n    <div className=\"w-full max-w-2xl\">\n",
          "filePath": "src/components/molecules/FormField/FormField.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 155,
          "endLine": 318,
          "code": "  render: () => {\n    const [formData, setFormData] = useState({\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: '',\n      company: '',\n      message: '',\n      newsletter: false,\n      priority: '',\n    });\n\n    const [errors, setErrors] = useState<Record<string, string>>({});\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n\n      const newErrors: Record<string, string> = {};\n      if (!formData.firstName) newErrors.firstName = 'First name is required';\n      if (!formData.lastName) newErrors.lastName = 'Last name is required';\n      if (!formData.email) newErrors.email = 'Email is required';\n      else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n        newErrors.email = 'Please enter a valid email address';\n      }\n      if (!formData.message) newErrors.message = 'Message is required';\n\n      setErrors(newErrors);\n\n      if (Object.keys(newErrors).length === 0) {\n        alert('Form submitted successfully!');\n        console.log('Form data:', formData);\n      }\n    };\n\n    const updateField = (field: string, value: any) => {\n      setFormData(prev => ({ ...prev, [field]: value }));\n      // Clear error when user starts typing\n      if (errors[field]) {\n        setErrors(prev => ({ ...prev, [field]: '' }));\n      }\n    };\n\n    return (\n      <Form onSubmit={handleSubmit} spacing=\"lg\" className=\"w-full max-w-2xl\">\n        <FormGroup\n          title=\"Contact Information\"\n          description=\"We'll use this information to get back to you\"\n        >\n          <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n            <FormField label=\"First Name\" required errorMessage={errors.firstName}>\n              <Input\n                placeholder=\"John\"\n                value={formData.firstName}\n                onChange={e => updateField('firstName', e.target.value)}\n              />\n            </FormField>\n\n            <FormField label=\"Last Name\" required errorMessage={errors.lastName}>\n              <Input\n                placeholder=\"Doe\"\n                value={formData.lastName}\n                onChange={e => updateField('lastName', e.target.value)}\n              />\n            </FormField>\n          </div>\n\n          <FormField\n            label=\"Email Address\"\n            required\n            errorMessage={errors.email}\n            helperText=\"We'll never share your email with anyone\"\n          >\n            <Input\n              type=\"email\"\n              placeholder=\"john@example.com\"\n              value={formData.email}\n              onChange={e => updateField('email', e.target.value)}\n            />\n          </FormField>\n\n          <FormField label=\"Phone Number\" helperText=\"Optional - for urgent matters only\">\n            <Input\n              type=\"tel\"\n              placeholder=\"+1 (555) 123-4567\"\n              value={formData.phone}\n              onChange={e => updateField('phone', e.target.value)}\n            />\n          </FormField>\n        </FormGroup>\n\n        <FormGroup title=\"Additional Details\" description=\"Help us understand your needs better\">\n          <FormField label=\"Company/Organization\">\n            <Input\n              placeholder=\"Acme Corp\"\n              value={formData.company}\n              onChange={e => updateField('company', e.target.value)}\n            />\n          </FormField>\n\n          <FormField\n            label=\"Message\"\n            required\n            errorMessage={errors.message}\n            helperText=\"Tell us how we can help you\"\n          >\n            <Textarea\n              placeholder=\"I'm interested in...\"\n              value={formData.message}\n              onChange={e => updateField('message', e.target.value)}\n              showCharCount\n              maxLength={500}\n            />\n          </FormField>\n\n          <FormField label=\"Priority Level\">\n            <RadioGroup\n              name=\"priority\"\n              value={formData.priority}\n              onChange={value => updateField('priority', value)}\n            >\n              <Radio value=\"low\" label=\"Low - General inquiry\" />\n              <Radio value=\"medium\" label=\"Medium - Business inquiry\" />\n              <Radio value=\"high\" label=\"High - Urgent support needed\" />\n            </RadioGroup>\n          </FormField>\n        </FormGroup>\n\n        <FormGroup title=\"Preferences\">\n          <FormField helperText=\"Stay updated with our latest news and offers\">\n            <Checkbox\n              label=\"Subscribe to newsletter\"\n              checked={formData.newsletter}\n              onChange={e => updateField('newsletter', e.target.checked)}\n            />\n          </FormField>\n        </FormGroup>\n\n        <div className=\"flex justify-end space-x-4 border-t pt-4\">\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            onClick={() => {\n              setFormData({\n                firstName: '',\n                lastName: '',\n                email: '',\n                phone: '',\n                company: '',\n                message: '',\n                newsletter: false,\n                priority: '',\n              });\n              setErrors({});\n            }}\n          >\n            Reset\n          </Button>\n          <Button type=\"submit\" variant=\"primary\">\n            Send Message\n          </Button>\n        </div>\n      </Form>\n    );\n  },\n",
          "filePath": "src/components/molecules/FormField/FormField.stories.tsx",
          "lineCount": 164,
          "cyclomaticComplexity": 10,
          "cognitiveComplexity": 11
        },
        {
          "name": "render",
          "startLine": 322,
          "endLine": 323,
          "code": "  render: () => (\n    <div className=\"w-full max-w-2xl space-y-8\">\n",
          "filePath": "src/components/molecules/FormField/FormField.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 373,
          "endLine": 374,
          "code": "  render: () => (\n    <div className=\"w-full max-w-4xl\">\n",
          "filePath": "src/components/molecules/FormField/FormField.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 416,
          "endLine": 417,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/molecules/FormField/FormField.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 460 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 155,
          "message": "Function 'render' has 164 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/FormField/FormField.tsx",
      "lineCount": 131,
      "functions": [
        {
          "name": "Form",
          "startLine": 118,
          "endLine": 130,
          "code": "export const Form = ({ children, className, spacing = 'md', ...props }: FormProps) => {\n  const spacingClasses = {\n    sm: 'space-y-4',\n    md: 'space-y-6',\n    lg: 'space-y-8',\n  };\n\n  return (\n    <form className={cn('w-full', spacingClasses[spacing], className)} {...props}>\n      {children}\n    </form>\n  );\n};\n",
          "filePath": "src/components/molecules/FormField/FormField.tsx",
          "lineCount": 13,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/molecules/FormSection/FormSection.tsx",
      "lineCount": 55,
      "functions": [
        {
          "name": "FormSection",
          "startLine": 16,
          "endLine": 51,
          "code": "export default function FormSection({\n  legend,\n  description,\n  children,\n  className,\n  required = false,\n}: FormSectionProps) {\n  return (\n    <fieldset className={cn('space-y-4', className)}>\n      <legend className=\"border-b pb-2 text-lg font-medium text-primary\">\n        {legend}\n        {required && (\n          <span className=\"ml-1 text-red-500\" aria-label=\"required\">\n            *\n          </span>\n        )}\n      </legend>\n      {description && (\n        <p\n          className=\"mt-1 text-sm text-secondary\"\n          id={`${legend.toLowerCase().replace(/\\s+/g, '-')}-description`}\n        >\n          {description}\n        </p>\n      )}\n      <div\n        className=\"space-y-4\"\n        aria-describedby={\n          description ? `${legend.toLowerCase().replace(/\\s+/g, '-')}-description` : undefined\n        }\n      >\n        {children}\n      </div>\n    </fieldset>\n  );\n}\n",
          "filePath": "src/components/molecules/FormSection/FormSection.tsx",
          "lineCount": 36,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "FormSection",
          "line": 16,
          "message": "Function 'FormSection' has 36 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/GenericPieChart/GenericPieChart.stories.tsx",
      "lineCount": 270,
      "functions": [
        {
          "name": "render",
          "startLine": 200,
          "endLine": 201,
          "code": "  render: () => (\n    <div className=\"space-y-8\">\n",
          "filePath": "src/components/molecules/GenericPieChart/GenericPieChart.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 230,
          "endLine": 231,
          "code": "  render: () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 p-6\">\n",
          "filePath": "src/components/molecules/GenericPieChart/GenericPieChart.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/molecules/GenericPieChart/GenericPieChart.tsx",
      "lineCount": 303,
      "functions": [
        {
          "name": "GenericPieChart",
          "startLine": 32,
          "endLine": 302,
          "code": "export default function GenericPieChart({\n  data,\n  title,\n  baseColor: _baseColor = '#3b82f6',\n  className = '',\n}: GenericPieChartProps) {\n  const [hoveredSlice, setHoveredSlice] = useState<string | null>(null);\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n\n  // Chart.js default color palette - extended for better variety\n  const generateColorVariations = (count: number) => {\n    // Chart.js default brand colors extended with complementary colors\n    const chartJsColors = [\n      '#36a2eb', // Blue\n      '#ff6384', // Pink/Red\n      '#ff9f40', // Orange\n      '#ffcd56', // Yellow\n      '#4bc0c0', // Cyan/Teal\n      '#9966ff', // Purple\n      '#c9cbcf', // Light Gray\n      '#ff4757', // Bright Red\n      '#2ed573', // Green\n      '#ffa502', // Dark Orange\n      '#3742fa', // Indigo\n      '#ff3838', // Coral\n      '#70a1ff', // Light Blue\n      '#7bed9f', // Light Green\n      '#5352ed', // Blue Violet\n    ];\n\n    // Return colors cycling through the extended Chart.js palette\n    return Array.from({ length: count }, (_, index) => {\n      return chartJsColors[index % chartJsColors.length];\n    });\n  };\n\n  // Generate Chart.js colors for all items\n  const colorVariations = generateColorVariations(data.length);\n  const dataWithColors = data.map((item, index) => {\n    // If item has a valid predefined color, use it; otherwise use generated color\n    if (item.color && item.color !== '' && item.color !== '#000000') {\n      return item;\n    }\n    return {\n      ...item,\n      color: colorVariations[index],\n    };\n  });\n\n  const total = dataWithColors.reduce((sum, item) => sum + item.value, 0);\n\n  if (total === 0) {\n    return (\n      <div className={`rounded-lg border p-6 bg-surface border-default ${className}`}>\n        <h3 className=\"mb-4 font-display text-lg font-semibold text-primary\">{title}</h3>\n        <div className=\"text-center text-secondary\">No data available</div>\n      </div>\n    );\n  }\n\n  // Create SVG path for pie slices\n  const createPieSlicePath = (startAngle: number, endAngle: number, radius: number) => {\n    // Convert angles to radians and adjust for SVG coordinate system (start from top)\n    const startAngleRad = ((startAngle - 90) * Math.PI) / 180;\n    const endAngleRad = ((endAngle - 90) * Math.PI) / 180;\n\n    const x1 = 50 + radius * Math.cos(startAngleRad);\n    const y1 = 50 + radius * Math.sin(startAngleRad);\n    const x2 = 50 + radius * Math.cos(endAngleRad);\n    const y2 = 50 + radius * Math.sin(endAngleRad);\n\n    const largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n\n    return ['M', 50, 50, 'L', x1, y1, 'A', radius, radius, 0, largeArcFlag, 1, x2, y2, 'Z'].join(\n      ' '\n    );\n  };\n\n  const radius = 45;\n\n  const handleMouseMove = (event: React.MouseEvent, label: string) => {\n    setHoveredSlice(label);\n    setMousePosition({ x: event.clientX, y: event.clientY });\n  };\n\n  const handleMouseLeave = () => {\n    setHoveredSlice(null);\n  };\n\n  const getTooltipData = (label: string) => {\n    const item = dataWithColors.find(d => d.label === label);\n    return item\n      ? {\n          label: item.label,\n          count: item.value,\n          percentage: item.percentage,\n        }\n      : null;\n  };\n\n  // Calculate angles for each slice\n  let currentAngle = 0;\n  const slices = dataWithColors.map(item => {\n    const angle = (item.percentage / 100) * 360;\n    const slice = {\n      ...item,\n      startAngle: currentAngle,\n      endAngle: currentAngle + angle,\n    };\n    currentAngle += angle;\n    return slice;\n  });\n\n  return (\n    <div className={`rounded-lg border p-6 bg-surface border-default ${className}`}>\n      <h3 className=\"mb-4 font-display text-lg font-semibold text-primary\">{title}</h3>\n\n      <div className=\"grid grid-cols-2 gap-6\">\n        {/* Pie Chart */}\n        <div className=\"relative flex items-center justify-center\">\n          <svg width=\"240\" height=\"240\" viewBox=\"0 0 100 100\">\n            {/* Handle 100% case with full circle */}\n            {dataWithColors.filter(item => item.value > 0).length === 1 ? (\n              (() => {\n                const singleItem = dataWithColors.find(item => item.value > 0)!;\n                return (\n                  <circle\n                    cx=\"50\"\n                    cy=\"50\"\n                    r={hoveredSlice === singleItem.label ? '47' : '45'}\n                    fill={singleItem.color}\n                    className={`cursor-pointer transition-all duration-200 ${\n                      hoveredSlice === singleItem.label ? 'drop-shadow-lg' : 'hover:opacity-90'\n                    }`}\n                    onMouseMove={e => handleMouseMove(e, singleItem.label)}\n                    onMouseLeave={handleMouseLeave}\n                  />\n                );\n              })()\n            ) : (\n              <>\n                {slices.map((slice, index) => {\n                  const isHovered = hoveredSlice === slice.label;\n                  const isOtherHovered = hoveredSlice && hoveredSlice !== slice.label;\n\n                  return (\n                    slice.value > 0 && (\n                      <path\n                        key={index}\n                        d={createPieSlicePath(\n                          slice.startAngle,\n                          slice.endAngle,\n                          isHovered ? radius + 2 : radius\n                        )}\n                        fill={slice.color}\n                        className={`cursor-pointer transition-all duration-200 ${\n                          isHovered\n                            ? 'drop-shadow-lg'\n                            : isOtherHovered\n                              ? 'opacity-60'\n                              : 'hover:opacity-90'\n                        }`}\n                        onMouseMove={e => handleMouseMove(e, slice.label)}\n                        onMouseLeave={handleMouseLeave}\n                      />\n                    )\n                  );\n                })}\n              </>\n            )}\n          </svg>\n        </div>\n\n        {/* Legend - show all items including zero values */}\n        <div className=\"flex flex-col justify-center space-y-1\">\n          {dataWithColors.map((item, index) => {\n            const isHovered = hoveredSlice === item.label;\n            const isOtherHovered = hoveredSlice && hoveredSlice !== item.label;\n            const hasNoData = item.value === 0;\n\n            return (\n              <div\n                key={index}\n                className={`flex cursor-pointer items-center justify-between rounded-md px-2 py-1 transition-all duration-200 ${\n                  hasNoData\n                    ? 'cursor-default opacity-50'\n                    : isHovered\n                      ? 'shadow-sm bg-surface-hover'\n                      : isOtherHovered\n                        ? 'opacity-60'\n                        : 'hover:bg-surface-hover'\n                }`}\n                onMouseEnter={hasNoData ? undefined : e => handleMouseMove(e, item.label)}\n                onMouseLeave={hasNoData ? undefined : handleMouseLeave}\n              >\n                <div className=\"flex items-center gap-2\">\n                  <div\n                    className={`size-3 rounded-full transition-all duration-200 ${\n                      hasNoData\n                        ? ''\n                        : isHovered\n                          ? 'scale-125 shadow-md ring-2 ring-primary-200'\n                          : ''\n                    }`}\n                    style={{ backgroundColor: item.color }}\n                  ></div>\n                  <span\n                    className={`text-sm transition-all duration-200 font-body ${\n                      hasNoData\n                        ? 'text-gray-400 dark:text-gray-600'\n                        : isHovered\n                          ? 'font-medium text-primary'\n                          : 'text-gray-700 dark:text-gray-300'\n                    }`}\n                  >\n                    {item.label}\n                  </span>\n                </div>\n                <div\n                  className={`font-display text-sm font-semibold transition-all duration-200 ${\n                    hasNoData\n                      ? 'text-gray-400 dark:text-gray-600'\n                      : isHovered\n                        ? 'font-bold text-primary'\n                        : 'text-gray-900 dark:text-gray-100'\n                  }`}\n                >\n                  {item.value.toLocaleString()} ({item.percentage.toFixed(1)}%)\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Tooltip */}\n      {hoveredSlice && (\n        <div\n          className=\"pointer-events-none fixed z-50 rounded-lg border-2 border-primary-200 bg-white px-4 py-3 shadow-2xl dark:border-primary-700 dark:bg-gray-900\"\n          style={{\n            left: mousePosition.x + 10,\n            top: mousePosition.y - 10,\n            transform: 'translate(-50%, -100%)',\n          }}\n        >\n          {(() => {\n            const tooltipData = getTooltipData(hoveredSlice);\n            if (!tooltipData) return null;\n\n            const item = dataWithColors.find(d => d.label === hoveredSlice);\n\n            return (\n              <div className=\"text-sm\">\n                <div className=\"mb-1 flex items-center gap-2 font-semibold text-gray-900 dark:text-gray-100\">\n                  <div\n                    className=\"size-3 rounded-full\"\n                    style={{ backgroundColor: item?.color }}\n                  ></div>\n                  {tooltipData.label}\n                </div>\n                <div className=\"text-gray-700 dark:text-gray-300\">\n                  {tooltipData.count.toLocaleString()} ({tooltipData.percentage.toFixed(1)}%)\n                </div>\n              </div>\n            );\n          })()}\n        </div>\n      )}\n    </div>\n  );\n}\n",
          "filePath": "src/components/molecules/GenericPieChart/GenericPieChart.tsx",
          "lineCount": 271,
          "cyclomaticComplexity": 28,
          "cognitiveComplexity": 19
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 303 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "GenericPieChart",
          "line": 32,
          "message": "Function 'GenericPieChart' has 271 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "GenericPieChart",
          "line": 32,
          "complexity": 28,
          "message": "Function 'GenericPieChart' has cyclomatic complexity of 28 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "GenericPieChart",
          "line": 32,
          "complexity": 19,
          "message": "Function 'GenericPieChart' has cognitive complexity of 19 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/InputField/InputField.stories.tsx",
      "lineCount": 362,
      "functions": [
        {
          "name": "onChange",
          "startLine": 66,
          "endLine": 67,
          "code": "    onChange: (e: React.ChangeEvent<HTMLInputElement>) => setValue(e.target.value),\n    onClear: () => setValue(''),\n",
          "filePath": "src/components/molecules/InputField/InputField.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 254,
          "endLine": 255,
          "code": "  render: () => (\n    <div className=\"w-96 space-y-6\">\n",
          "filePath": "src/components/molecules/InputField/InputField.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 304,
          "endLine": 305,
          "code": "  render: () => (\n    <div className=\"w-96 space-y-4\">\n",
          "filePath": "src/components/molecules/InputField/InputField.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 362 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/PhilSysNumberInput/PhilSysNumberInput.stories.tsx",
      "lineCount": 278,
      "functions": [
        {
          "name": "onChange",
          "startLine": 47,
          "endLine": 49,
          "code": "    onChange: (value, hashedValue) => {\n      console.log('Value changed:', value, 'Hashed:', hashedValue);\n    },\n",
          "filePath": "src/components/molecules/PhilSysNumberInput/PhilSysNumberInput.stories.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onValidation",
          "startLine": 50,
          "endLine": 52,
          "code": "    onValidation: (isValid, error) => {\n      console.log('Validation:', isValid, error);\n    },\n",
          "filePath": "src/components/molecules/PhilSysNumberInput/PhilSysNumberInput.stories.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onChange",
          "startLine": 59,
          "endLine": 61,
          "code": "    onChange: (value, hashedValue) => {\n      console.log('Value changed:', value, 'Hashed:', hashedValue);\n    },\n",
          "filePath": "src/components/molecules/PhilSysNumberInput/PhilSysNumberInput.stories.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onValidation",
          "startLine": 62,
          "endLine": 64,
          "code": "    onValidation: (isValid, error) => {\n      console.log('Validation:', isValid, error);\n    },\n",
          "filePath": "src/components/molecules/PhilSysNumberInput/PhilSysNumberInput.stories.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onChange",
          "startLine": 72,
          "endLine": 74,
          "code": "    onChange: (value, hashedValue) => {\n      console.log('Value changed:', value, 'Hashed:', hashedValue);\n    },\n",
          "filePath": "src/components/molecules/PhilSysNumberInput/PhilSysNumberInput.stories.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onChange",
          "startLine": 81,
          "endLine": 83,
          "code": "    onChange: (value, hashedValue) => {\n      console.log('Value changed:', value, 'Hashed:', hashedValue);\n    },\n",
          "filePath": "src/components/molecules/PhilSysNumberInput/PhilSysNumberInput.stories.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onChange",
          "startLine": 91,
          "endLine": 93,
          "code": "    onChange: (value, hashedValue) => {\n      console.log('Value changed:', value, 'Hashed:', hashedValue);\n    },\n",
          "filePath": "src/components/molecules/PhilSysNumberInput/PhilSysNumberInput.stories.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onChange",
          "startLine": 101,
          "endLine": 103,
          "code": "    onChange: (value, hashedValue) => {\n      console.log('Value changed:', value, 'Hashed:', hashedValue);\n    },\n",
          "filePath": "src/components/molecules/PhilSysNumberInput/PhilSysNumberInput.stories.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onChange",
          "startLine": 111,
          "endLine": 113,
          "code": "    onChange: (value, hashedValue) => {\n      console.log('Value changed:', value, 'Hashed:', hashedValue);\n    },\n",
          "filePath": "src/components/molecules/PhilSysNumberInput/PhilSysNumberInput.stories.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onChange",
          "startLine": 120,
          "endLine": 122,
          "code": "    onChange: (value, hashedValue) => {\n      console.log('Value changed:', value, 'Hashed:', hashedValue);\n    },\n",
          "filePath": "src/components/molecules/PhilSysNumberInput/PhilSysNumberInput.stories.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onChange",
          "startLine": 129,
          "endLine": 131,
          "code": "    onChange: (value, hashedValue) => {\n      console.log('Value changed:', value, 'Hashed:', hashedValue);\n    },\n",
          "filePath": "src/components/molecules/PhilSysNumberInput/PhilSysNumberInput.stories.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "InteractiveComponent",
          "startLine": 136,
          "endLine": 187,
          "code": "const InteractiveComponent = () => {\n  const [value, setValue] = useState('');\n  const [hashedValue, setHashedValue] = useState('');\n  const [isValid, setIsValid] = useState(false);\n  const [error, setError] = useState('');\n\n  return (\n    <div className=\"space-y-4\">\n      <PhilSysNumberInput\n        value={value}\n        required\n        onChange={(newValue, newHashedValue) => {\n          setValue(newValue);\n          setHashedValue(newHashedValue || '');\n        }}\n        onValidation={(valid, validationError) => {\n          setIsValid(valid);\n          setError(validationError || '');\n        }}\n      />\n\n      <div className=\"rounded-lg border p-4 bg-background border-default\">\n        <h3 className=\"mb-2 font-semibold text-primary\">Real-time Status:</h3>\n        <div className=\"space-y-2 text-sm\">\n          <div>\n            <strong>Current Value:</strong>{' '}\n            <code className=\"rounded px-2 py-1 bg-background-muted\">{value || 'empty'}</code>\n          </div>\n          <div>\n            <strong>Is Valid:</strong>{' '}\n            <span className={isValid ? 'text-green-600' : 'text-red-600'}>\n              {isValid ? 'Yes' : 'No'}\n            </span>\n          </div>\n          {error && (\n            <div>\n              <strong>Error:</strong> <span className=\"text-red-600\">{error}</span>\n            </div>\n          )}\n          {hashedValue && (\n            <div>\n              <strong>Hashed Value:</strong>{' '}\n              <code className=\"break-all rounded px-2 py-1 text-xs bg-background-muted\">\n                {hashedValue.substring(0, 20)}...\n              </code>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/molecules/PhilSysNumberInput/PhilSysNumberInput.stories.tsx",
          "lineCount": 52,
          "cyclomaticComplexity": 8,
          "cognitiveComplexity": 7
        },
        {
          "name": "MaskingDemoComponent",
          "startLine": 194,
          "endLine": 220,
          "code": "const MaskingDemoComponent = () => {\n  const [value, setValue] = useState('1234567890123');\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"rounded-lg border border-yellow-200 bg-yellow-50 p-4 dark:border-yellow-800 dark:bg-yellow-900/20\">\n        <h3 className=\"mb-2 font-semibold text-yellow-800 dark:text-yellow-200\">Masking Demo</h3>\n        <p className=\"text-sm text-yellow-700 dark:text-yellow-300\">\n          Click on the input field to see the full number. When you click away, it will be masked\n          for security.\n        </p>\n      </div>\n\n      <PhilSysNumberInput\n        value={value}\n        label=\"PhilSys Number (Try focusing/unfocusing)\"\n        showLastFourDigits={true}\n        onChange={newValue => setValue(newValue)}\n      />\n\n      <div className=\"text-sm text-muted\">\n        <strong>Tip:</strong> The input automatically formats as you type and masks the number when\n        not focused.\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/molecules/PhilSysNumberInput/PhilSysNumberInput.stories.tsx",
          "lineCount": 27,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 228,
          "endLine": 229,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/molecules/PhilSysNumberInput/PhilSysNumberInput.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "InteractiveComponent",
          "line": 136,
          "message": "Function 'InteractiveComponent' has 52 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/PhilSysNumberInput/PhilSysNumberInput.tsx",
      "lineCount": 252,
      "functions": [
        {
          "name": "onChange",
          "startLine": 16,
          "endLine": 17,
          "code": "  onChange: (value: string, hashedValue?: string) => void;\n  onValidation?: (isValid: boolean, error?: string) => void;\n",
          "filePath": "src/components/molecules/PhilSysNumberInput/PhilSysNumberInput.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 2
        },
        {
          "name": "PhilSysNumberInput",
          "startLine": 45,
          "endLine": 248,
          "code": "export default function PhilSysNumberInput({\n  value = '',\n  onChange,\n  onValidation,\n  disabled = false,\n  required = false,\n  error,\n  className = '',\n  label = 'PhilSys Card Number',\n  placeholder = 'XXXX-XXXX-XXXX',\n  showLastFourDigits = true,\n  autoHash = true,\n}: PhilSysNumberInputProps) {\n  const [displayValue, setDisplayValue] = useState('');\n  const [maskedDisplay, setMaskedDisplay] = useState('');\n  const [isValid, setIsValid] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n  const [validationError, setValidationError] = useState<string>('');\n\n  // Validate PhilSys number format\n  const validatePhilSysNumber = useCallback(\n    (philsysNumber: string): boolean => {\n      let error = '';\n      let valid = false;\n\n      if (!philsysNumber && required) {\n        error = 'PhilSys card number is required';\n      } else if (philsysNumber && !PHILSYS_REGEX.test(philsysNumber)) {\n        if (philsysNumber.replace(/\\D/g, '').length < 12) {\n          error = 'PhilSys number must be 12 digits';\n        } else {\n          error = 'Invalid PhilSys number format (XXXX-XXXX-XXXX)';\n        }\n      } else if (philsysNumber) {\n        // Additional validation logic can be added here\n        // For now, just check format\n        valid = true;\n      }\n\n      setIsValid(valid);\n      setValidationError(error);\n\n      if (onValidation) {\n        onValidation(valid, error || undefined);\n      }\n\n      return valid;\n    },\n    [required, onValidation]\n  );\n\n  // Initialize display value\n  useEffect(() => {\n    if (value) {\n      const formatted = formatPhilSysNumber(value);\n      setDisplayValue(formatted);\n      setMaskedDisplay(maskPhilSysNumber(formatted));\n      validatePhilSysNumber(formatted);\n    }\n  }, [value, validatePhilSysNumber]);\n\n  // Format PhilSys number with dashes\n  const formatPhilSysNumber = (input: string): string => {\n    // Remove all non-digits\n    const digits = input.replace(/\\D/g, '');\n\n    // Limit to 12 digits\n    const limited = digits.substring(0, 12);\n\n    // Add dashes: XXXX-XXXX-XXXX\n    if (limited.length >= 8) {\n      return `${limited.substring(0, 4)}-${limited.substring(4, 8)}-${limited.substring(8)}`;\n    } else if (limited.length >= 4) {\n      return `${limited.substring(0, 4)}-${limited.substring(4)}`;\n    } else {\n      return limited;\n    }\n  };\n\n  // Handle input change\n  const handleInputChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const rawValue = e.target.value;\n    const formatted = formatPhilSysNumber(rawValue);\n\n    setDisplayValue(formatted);\n\n    // Update masked display for when not focused\n    if (formatted.length === 13) {\n      // Full format XXXX-XXXX-XXXX\n      setMaskedDisplay(maskPhilSysNumber(formatted));\n    }\n\n    // Validate\n    const isValidNumber = validatePhilSysNumber(formatted);\n\n    // Hash and send to parent if valid and auto-hash is enabled\n    if (isValidNumber && autoHash && formatted.length === 13) {\n      try {\n        const hashedValue = await hashPhilSysNumber(formatted);\n        onChange(formatted, hashedValue);\n      } catch (error) {\n        logError(error as Error, 'PHILSYS_HASH_ERROR');\n        onChange(formatted);\n      }\n    } else {\n      onChange(formatted);\n    }\n  };\n\n  // Handle focus events for masking\n  const handleFocus = () => {\n    setIsFocused(true);\n  };\n\n  const handleBlur = () => {\n    setIsFocused(false);\n  };\n\n  // Determine what to show in input\n  const inputValue = isFocused\n    ? displayValue\n    : showLastFourDigits && maskedDisplay\n      ? maskedDisplay\n      : displayValue;\n\n  return (\n    <div className={`space-y-2 ${className}`}>\n      {label && (\n        <label className=\"block text-sm font-medium text-primary\">\n          {label}\n          {required && <span className=\"ml-1 text-red-500\">*</span>}\n        </label>\n      )}\n\n      <div className=\"relative\">\n        <InputField\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          placeholder={placeholder}\n          disabled={disabled}\n          errorMessage={error || validationError}\n          className={`font-mono ${isValid ? 'border-green-500' : ''}`}\n          maxLength={14} // XXXX-XXXX-XXXX + potential extra char\n        />\n\n        {/* Security Icon */}\n        <div className=\"absolute right-3 top-1/2 -translate-y-1/2\">\n          {isValid ? (\n            <span className=\"text-green-500\" title=\"Valid PhilSys number\">\n              🔒\n            </span>\n          ) : displayValue.length > 0 ? (\n            <span className=\"text-yellow-500\" title=\"Invalid format\">\n              ⚠️\n            </span>\n          ) : (\n            <span className=\"text-muted\" title=\"PhilSys number\">\n              🆔\n            </span>\n          )}\n        </div>\n      </div>\n\n      {/* Helper Text */}\n      <div className=\"text-xs text-muted\">\n        {!isFocused && displayValue && showLastFourDigits ? (\n          <span>\n            Number is masked for security. Click to edit. Last 4 digits: {displayValue.slice(-4)}\n          </span>\n        ) : (\n          <span>Enter 12-digit PhilSys card number. Format: XXXX-XXXX-XXXX</span>\n        )}\n      </div>\n\n      {/* Validation Status */}\n      {displayValue && !validationError && isValid && (\n        <div className=\"flex items-center space-x-2 text-green-600\">\n          <span className=\"text-xs\">✓</span>\n          <span className=\"text-xs\">Valid PhilSys number format</span>\n          {autoHash && (\n            <span className=\"rounded bg-green-100 px-2 py-1 text-xs dark:bg-green-900/20\">\n              🔐 Auto-encrypted\n            </span>\n          )}\n        </div>\n      )}\n\n      {/* Security Notice */}\n      <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-3 text-xs dark:border-blue-800 dark:bg-blue-900/20\">\n        <div className=\"flex items-start space-x-2\">\n          <span className=\"text-blue-600 dark:text-blue-400\">🔐</span>\n          <div className=\"text-blue-700 dark:text-blue-300\">\n            <strong>Security Notice:</strong> PhilSys numbers are automatically encrypted and masked\n            for protection. Only the last 4 digits are shown when not editing.\n            {autoHash && ' Data is hashed before storage.'}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/molecules/PhilSysNumberInput/PhilSysNumberInput.tsx",
          "lineCount": 204,
          "cyclomaticComplexity": 40,
          "cognitiveComplexity": 39
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "PhilSysNumberInput",
          "line": 45,
          "message": "Function 'PhilSysNumberInput' has 204 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "PhilSysNumberInput",
          "line": 45,
          "complexity": 40,
          "message": "Function 'PhilSysNumberInput' has cyclomatic complexity of 40 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "PhilSysNumberInput",
          "line": 45,
          "complexity": 39,
          "message": "Function 'PhilSysNumberInput' has cognitive complexity of 39 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/SearchBar/SearchBar.stories.tsx",
      "lineCount": 420,
      "functions": [
        {
          "name": "render",
          "startLine": 43,
          "endLine": 57,
          "code": "  render: (args) => {\n    const [value, setValue] = useState('');\n    \n    return (\n      <div className=\"w-80\">\n        <SearchBar\n          {...args}\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          onClear={() => setValue('')}\n          onSearch={(searchValue) => console.log('Searching for:', searchValue)}\n        />\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/SearchBar/SearchBar.stories.tsx",
          "lineCount": 15,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 64,
          "endLine": 78,
          "code": "  render: () => {\n    const [value, setValue] = useState('React components');\n    \n    return (\n      <div className=\"w-80\">\n        <SearchBar\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          onClear={() => setValue('')}\n          onSearch={(searchValue) => console.log('Searching for:', searchValue)}\n          placeholder=\"Search components...\"\n        />\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/SearchBar/SearchBar.stories.tsx",
          "lineCount": 15,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 82,
          "endLine": 103,
          "code": "  render: () => {\n    const [value, setValue] = useState('');\n    \n    const customIcon = (\n      <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z\" />\n      </svg>\n    );\n    \n    return (\n      <div className=\"w-80\">\n        <SearchBar\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          onClear={() => setValue('')}\n          leftIcon={customIcon}\n          placeholder=\"Search by tags...\"\n          onSearch={(searchValue) => console.log('Tag search:', searchValue)}\n        />\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/SearchBar/SearchBar.stories.tsx",
          "lineCount": 22,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 107,
          "endLine": 150,
          "code": "  render: () => {\n    const [values, setValues] = useState({ sm: '', md: '', lg: '' });\n    \n    const updateValue = (size: 'sm' | 'md' | 'lg', newValue: string) => {\n      setValues(prev => ({ ...prev, [size]: newValue }));\n    };\n    \n    return (\n      <div className=\"space-y-4 w-80\">\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Small</label>\n          <SearchBar\n            size=\"sm\"\n            value={values.sm}\n            onChange={(e) => updateValue('sm', e.target.value)}\n            onClear={() => updateValue('sm', '')}\n            placeholder=\"Small search...\"\n          />\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Medium (Default)</label>\n          <SearchBar\n            size=\"md\"\n            value={values.md}\n            onChange={(e) => updateValue('md', e.target.value)}\n            onClear={() => updateValue('md', '')}\n            placeholder=\"Medium search...\"\n          />\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Large</label>\n          <SearchBar\n            size=\"lg\"\n            value={values.lg}\n            onChange={(e) => updateValue('lg', e.target.value)}\n            onClear={() => updateValue('lg', '')}\n            placeholder=\"Large search...\"\n          />\n        </div>\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/SearchBar/SearchBar.stories.tsx",
          "lineCount": 44,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 154,
          "endLine": 197,
          "code": "  render: () => {\n    const [values, setValues] = useState({ default: '', filled: '', outlined: '' });\n    \n    const updateValue = (variant: 'default' | 'filled' | 'outlined', newValue: string) => {\n      setValues(prev => ({ ...prev, [variant]: newValue }));\n    };\n    \n    return (\n      <div className=\"space-y-4 w-80\">\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Default</label>\n          <SearchBar\n            variant=\"default\"\n            value={values.default}\n            onChange={(e) => updateValue('default', e.target.value)}\n            onClear={() => updateValue('default', '')}\n            placeholder=\"Default search...\"\n          />\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Filled</label>\n          <SearchBar\n            variant=\"filled\"\n            value={values.filled}\n            onChange={(e) => updateValue('filled', e.target.value)}\n            onClear={() => updateValue('filled', '')}\n            placeholder=\"Filled search...\"\n          />\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Outlined</label>\n          <SearchBar\n            variant=\"outlined\"\n            value={values.outlined}\n            onChange={(e) => updateValue('outlined', e.target.value)}\n            onClear={() => updateValue('outlined', '')}\n            placeholder=\"Outlined search...\"\n          />\n        </div>\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/SearchBar/SearchBar.stories.tsx",
          "lineCount": 44,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 201,
          "endLine": 202,
          "code": "  render: () => (\n    <div className=\"space-y-4 w-80\">\n",
          "filePath": "src/components/molecules/SearchBar/SearchBar.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 241,
          "endLine": 326,
          "code": "  render: () => {\n    const [searchTerm, setSearchTerm] = useState('');\n    const [results, setResults] = useState<string[]>([]);\n    const [isSearching, setIsSearching] = useState(false);\n    \n    // Mock data\n    const mockData = [\n      'React', 'Vue.js', 'Angular', 'Svelte', 'Next.js',\n      'Nuxt.js', 'Gatsby', 'TypeScript', 'JavaScript', 'Node.js',\n      'Express', 'Fastify', 'MongoDB', 'PostgreSQL', 'Redis'\n    ];\n    \n    const performSearch = async (query: string) => {\n      if (!query.trim()) {\n        setResults([]);\n        return;\n      }\n      \n      setIsSearching(true);\n      \n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      const filtered = mockData.filter(item =>\n        item.toLowerCase().includes(query.toLowerCase())\n      );\n      \n      setResults(filtered);\n      setIsSearching(false);\n    };\n    \n    const handleSearch = (query: string) => {\n      performSearch(query);\n    };\n    \n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setSearchTerm(e.target.value);\n      // Debounced search as user types\n      performSearch(e.target.value);\n    };\n    \n    const handleClear = () => {\n      setSearchTerm('');\n      setResults([]);\n      setIsSearching(false);\n    };\n    \n    return (\n      <div className=\"w-80\">\n        <SearchBar\n          value={searchTerm}\n          onChange={handleInputChange}\n          onSearch={handleSearch}\n          onClear={handleClear}\n          placeholder=\"Search technologies...\"\n        />\n        \n        {isSearching && (\n          <div className=\"mt-4 p-3 text-sm text-gray-600 bg-gray-50 rounded\">\n            Searching...\n          </div>\n        )}\n        \n        {results.length > 0 && !isSearching && (\n          <div className=\"mt-4 border rounded-md\">\n            <div className=\"p-2 bg-gray-50 border-b text-sm font-medium text-gray-700\">\n              Found {results.length} result{results.length !== 1 ? 's' : ''}\n            </div>\n            <ul className=\"divide-y\">\n              {results.map((result, index) => (\n                <li key={index} className=\"p-3 hover:bg-gray-50 cursor-pointer\">\n                  {result}\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n        \n        {searchTerm && results.length === 0 && !isSearching && (\n          <div className=\"mt-4 p-3 text-sm text-gray-500 bg-gray-50 rounded\">\n            No results found for \"{searchTerm}\"\n          </div>\n        )}\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/SearchBar/SearchBar.stories.tsx",
          "lineCount": 86,
          "cyclomaticComplexity": 9,
          "cognitiveComplexity": 6
        },
        {
          "name": "render",
          "startLine": 330,
          "endLine": 382,
          "code": "  render: () => {\n    const [filter, setFilter] = useState('');\n    \n    const items = [\n      { id: 1, name: 'Apple iPhone 14', category: 'Electronics', price: 999 },\n      { id: 2, name: 'Samsung Galaxy S23', category: 'Electronics', price: 899 },\n      { id: 3, name: 'MacBook Pro', category: 'Computers', price: 1999 },\n      { id: 4, name: 'iPad Air', category: 'Tablets', price: 599 },\n      { id: 5, name: 'AirPods Pro', category: 'Audio', price: 249 },\n      { id: 6, name: 'Sony WH-1000XM4', category: 'Audio', price: 349 },\n    ];\n    \n    const filteredItems = items.filter(item =>\n      item.name.toLowerCase().includes(filter.toLowerCase()) ||\n      item.category.toLowerCase().includes(filter.toLowerCase())\n    );\n    \n    return (\n      <div className=\"w-full max-w-md\">\n        <SearchBar\n          value={filter}\n          onChange={(e) => setFilter(e.target.value)}\n          onClear={() => setFilter('')}\n          placeholder=\"Filter products...\"\n          leftIcon={\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.207A1 1 0 013 6.5V4z\" />\n            </svg>\n          }\n        />\n        \n        <div className=\"mt-4\">\n          <p className=\"text-sm text-gray-600 mb-3\">\n            {filteredItems.length} of {items.length} products\n          </p>\n          \n          <div className=\"space-y-2\">\n            {filteredItems.map(item => (\n              <div key={item.id} className=\"p-3 border rounded-lg\">\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <h3 className=\"font-medium\">{item.name}</h3>\n                    <p className=\"text-sm text-gray-600\">{item.category}</p>\n                  </div>\n                  <span className=\"font-semibold\">${item.price}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/SearchBar/SearchBar.stories.tsx",
          "lineCount": 53,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "render",
          "startLine": 386,
          "endLine": 419,
          "code": "  render: () => {\n    const [value, setValue] = useState('');\n    \n    return (\n      <div className=\"space-y-6\">\n        <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n          <h3 className=\"text-lg font-semibold text-blue-800 mb-2\">Keyboard Shortcuts</h3>\n          <ul className=\"text-sm text-blue-700 space-y-1\">\n            <li>• <kbd className=\"px-1 py-0.5 bg-blue-100 rounded\">Enter</kbd> to perform search</li>\n            <li>• <kbd className=\"px-1 py-0.5 bg-blue-100 rounded\">Escape</kbd> to clear and blur</li>\n            <li>• Clear button is excluded from tab order (tabindex=\"-1\")</li>\n            <li>• Proper ARIA labels for screen readers</li>\n          </ul>\n        </div>\n        \n        <div className=\"w-80\">\n          <SearchBar\n            value={value}\n            onChange={(e) => setValue(e.target.value)}\n            onClear={() => setValue('')}\n            onSearch={(searchValue) => {\n              console.log('Search performed:', searchValue);\n              alert(`Searching for: \"${searchValue}\"`);\n            }}\n            placeholder=\"Try typing and pressing Enter...\"\n          />\n          \n          <p className=\"mt-2 text-sm text-gray-600\">\n            Type something and press Enter to search, or Escape to clear.\n          </p>\n        </div>\n      </div>\n    );\n  },\n",
          "filePath": "src/components/molecules/SearchBar/SearchBar.stories.tsx",
          "lineCount": 34,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 420 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 107,
          "message": "Function 'render' has 44 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 154,
          "message": "Function 'render' has 44 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 241,
          "message": "Function 'render' has 86 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 330,
          "message": "Function 'render' has 53 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 386,
          "message": "Function 'render' has 34 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/SearchBar/SearchBar.tsx",
      "lineCount": 166,
      "functions": [
        {
          "name": "handleKeyDown",
          "startLine": 61,
          "endLine": 71,
          "code": "    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        onSearch?.(e.currentTarget.value);\n      } else if (e.key === 'Escape') {\n        e.preventDefault();\n        e.currentTarget.blur();\n        onClear?.();\n      }\n      onKeyDown?.(e);\n    };\n",
          "filePath": "src/components/molecules/SearchBar/SearchBar.tsx",
          "lineCount": 11,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 5
        },
        {
          "name": "handleClear",
          "startLine": 73,
          "endLine": 79,
          "code": "    const handleClear = () => {\n      onClear?.();\n      // Focus back to input after clearing\n      if (ref && 'current' in ref && ref.current) {\n        ref.current.focus();\n      }\n    };\n",
          "filePath": "src/components/molecules/SearchBar/SearchBar.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 3
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/molecules/SelectField/SelectField.stories.tsx",
      "lineCount": 419,
      "functions": [
        {
          "name": "onChange",
          "startLine": 87,
          "endLine": 88,
          "code": "    onChange: (e: React.ChangeEvent<HTMLSelectElement>) => setValue(e.target.value),\n  });\n",
          "filePath": "src/components/molecules/SelectField/SelectField.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 214,
          "endLine": 215,
          "code": "  render: () => (\n    <div className=\"w-96 space-y-6\">\n",
          "filePath": "src/components/molecules/SelectField/SelectField.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "FormExampleComponent",
          "startLine": 270,
          "endLine": 335,
          "code": "const FormExampleComponent = () => {\n  const [formData, setFormData] = useState({\n    country: '',\n    priority: '',\n    size: 'md',\n    category: '',\n  });\n\n  const handleChange = (field: string) => (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setFormData(prev => ({ ...prev, [field]: e.target.value }));\n  };\n\n  const categoryOptions = [\n    { value: '', label: 'Select category' },\n    { value: 'bug', label: 'Bug Report' },\n    { value: 'feature', label: 'Feature Request' },\n    { value: 'support', label: 'Support' },\n    { value: 'question', label: 'Question' },\n  ];\n\n  return (\n    <div className=\"w-96 space-y-4\">\n      <h3 className=\"text-lg font-semibold\">Issue Report Form</h3>\n\n      <SelectField\n        label=\"Country\"\n        placeholder=\"Select your country\"\n        options={countryOptions}\n        value={formData.country}\n        onChange={handleChange('country')}\n        helperText=\"This helps us provide localized support\"\n      />\n\n      <SelectField\n        label=\"Issue Category\"\n        placeholder=\"What type of issue is this?\"\n        options={categoryOptions}\n        value={formData.category}\n        onChange={handleChange('category')}\n        variant={!formData.category ? 'error' : 'default'}\n        errorMessage={!formData.category ? 'Please select a category' : undefined}\n      />\n\n      <SelectField\n        label=\"Priority Level\"\n        options={priorityOptions}\n        value={formData.priority}\n        onChange={handleChange('priority')}\n        helperText=\"How urgent is this issue?\"\n      />\n\n      <SelectField\n        label=\"Affected Component Size\"\n        options={sizeOptions}\n        value={formData.size}\n        onChange={handleChange('size')}\n        size=\"sm\"\n        helperText=\"Size of the affected component\"\n      />\n\n      <div className=\"border-t pt-4 text-sm text-gray-600\">\n        <p>Form data: {JSON.stringify(formData, null, 2)}</p>\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/molecules/SelectField/SelectField.stories.tsx",
          "lineCount": 66,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 2
        },
        {
          "name": "NestedOptionsComponent",
          "startLine": 344,
          "endLine": 411,
          "code": "const NestedOptionsComponent = () => {\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [selectedItem, setSelectedItem] = useState('');\n\n  const categories = [\n    { value: '', label: 'Select category' },\n    { value: 'electronics', label: 'Electronics' },\n    { value: 'clothing', label: 'Clothing' },\n    { value: 'books', label: 'Books' },\n  ];\n\n  const getItemsForCategory = (category: string) => {\n    const items: Record<string, Array<{ value: string; label: string }>> = {\n      electronics: [\n        { value: '', label: 'Select item' },\n        { value: 'laptop', label: 'Laptop' },\n        { value: 'phone', label: 'Smartphone' },\n        { value: 'tablet', label: 'Tablet' },\n      ],\n      clothing: [\n        { value: '', label: 'Select item' },\n        { value: 'shirt', label: 'T-Shirt' },\n        { value: 'jeans', label: 'Jeans' },\n        { value: 'jacket', label: 'Jacket' },\n      ],\n      books: [\n        { value: '', label: 'Select item' },\n        { value: 'fiction', label: 'Fiction' },\n        { value: 'nonfiction', label: 'Non-Fiction' },\n        { value: 'textbook', label: 'Textbook' },\n      ],\n    };\n    return items[category] || [{ value: '', label: 'Select category first' }];\n  };\n\n  return (\n    <div className=\"w-96 space-y-4\">\n      <h3 className=\"text-lg font-semibold\">Dependent Dropdowns</h3>\n\n      <SelectField\n        label=\"Product Category\"\n        options={categories}\n        value={selectedCategory}\n        onChange={e => {\n          setSelectedCategory(e.target.value);\n          setSelectedItem(''); // Reset item when category changes\n        }}\n        placeholder=\"Choose a category\"\n      />\n\n      <SelectField\n        label=\"Product Item\"\n        options={getItemsForCategory(selectedCategory)}\n        value={selectedItem}\n        onChange={e => setSelectedItem(e.target.value)}\n        disabled={!selectedCategory}\n        placeholder={selectedCategory ? 'Choose an item' : 'Select category first'}\n        helperText={selectedCategory ? 'Select a specific item' : 'Choose a category above first'}\n      />\n\n      {selectedCategory && selectedItem && (\n        <div className=\"rounded-md border border-green-200 bg-green-50 p-3 text-sm\">\n          Selected: {selectedCategory} → {selectedItem}\n        </div>\n      )}\n    </div>\n  );\n};\n",
          "filePath": "src/components/molecules/SelectField/SelectField.stories.tsx",
          "lineCount": 68,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 4
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 419 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "FormExampleComponent",
          "line": 270,
          "message": "Function 'FormExampleComponent' has 66 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "NestedOptionsComponent",
          "line": 344,
          "message": "Function 'NestedOptionsComponent' has 68 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/SexDistributionPieChart/SexDistributionPieChart.stories.tsx",
      "lineCount": 459,
      "functions": [
        {
          "name": "render",
          "startLine": 300,
          "endLine": 301,
          "code": "  render: () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6 p-6 bg-gray-50 min-h-screen\">\n",
          "filePath": "src/components/molecules/SexDistributionPieChart/SexDistributionPieChart.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 339,
          "endLine": 340,
          "code": "  render: () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6\">\n",
          "filePath": "src/components/molecules/SexDistributionPieChart/SexDistributionPieChart.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 392,
          "endLine": 393,
          "code": "  render: () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 p-6\">\n",
          "filePath": "src/components/molecules/SexDistributionPieChart/SexDistributionPieChart.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 424,
          "endLine": 425,
          "code": "  render: () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 p-6\">\n",
          "filePath": "src/components/molecules/SexDistributionPieChart/SexDistributionPieChart.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 459 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/SexDistributionPieChart/SexDistributionPieChart.tsx",
      "lineCount": 55,
      "functions": [
        {
          "name": "SexDistributionPieChart",
          "startLine": 29,
          "endLine": 54,
          "code": "export default function SexDistributionPieChart({\n  data,\n  title = 'Sex Distribution',\n  className = '',\n}: SexDistributionPieChartProps) {\n  const { male, female } = data;\n  const total = male + female;\n\n  // Use population pyramid colors: primary-500 for male, secondary-500 for female\n  const chartData = [\n    {\n      label: 'Male',\n      value: male,\n      percentage: total > 0 ? (male / total) * 100 : 0,\n      color: '#3b82f6', // primary-500 (matches population pyramid)\n    },\n    {\n      label: 'Female',\n      value: female,\n      percentage: total > 0 ? (female / total) * 100 : 0,\n      color: '#a855f7', // secondary-500 (matches population pyramid)\n    },\n  ]; // Show all categories including zero values\n\n  return <GenericPieChart data={chartData} title={title} className={className} />;\n}\n",
          "filePath": "src/components/molecules/SexDistributionPieChart/SexDistributionPieChart.tsx",
          "lineCount": 26,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/molecules/StatCard/StatCard.stories.tsx",
      "lineCount": 260,
      "functions": [
        {
          "name": "render",
          "startLine": 179,
          "endLine": 180,
          "code": "  render: () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6 bg-gray-50\">\n",
          "filePath": "src/components/molecules/StatCard/StatCard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 220,
          "endLine": 221,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/molecules/StatCard/StatCard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/molecules/StatCard/StatCard.tsx",
      "lineCount": 70,
      "functions": [
        {
          "name": "StatCard",
          "startLine": 24,
          "endLine": 69,
          "code": "export default function StatCard({ title, value, trend, className = '' }: StatCardProps) {\n  const getTrendColor = () => {\n    if (!trend) return '';\n    switch (trend.direction) {\n      case 'up':\n        return 'text-green-600';\n      case 'down':\n        return 'text-red-600';\n      default:\n        return 'text-neutral-500';\n    }\n  };\n\n  const getTrendIcon = () => {\n    if (!trend) return null;\n    switch (trend.direction) {\n      case 'up':\n        return '↗';\n      case 'down':\n        return '↘';\n      default:\n        return '→';\n    }\n  };\n\n  return (\n    <div\n      className={`relative box-border flex w-80 shrink-0 flex-col content-stretch items-start justify-start gap-4 text-clip text-nowrap rounded border border-neutral-300 bg-white p-4 text-left leading-5 text-neutral-900 transition-colors hover:border-neutral-400 ${className}`}\n    >\n      <div className=\"flex w-full items-center justify-between\">\n        <div className=\"font-montserrat relative flex shrink-0 flex-col justify-center text-lg font-semibold\">\n          <p className=\"block whitespace-pre text-nowrap leading-[22px]\">{title}</p>\n        </div>\n        {trend && (\n          <div className={`font-montserrat flex items-center gap-1 text-sm ${getTrendColor()}`}>\n            <span>{getTrendIcon()}</span>\n            <span>{trend.percentage}%</span>\n          </div>\n        )}\n      </div>\n      <div className=\"font-montserrat relative flex shrink-0 flex-col justify-center text-[72px] font-normal\">\n        <p className=\"block whitespace-pre text-nowrap leading-[80px]\">{value}</p>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/molecules/StatCard/StatCard.tsx",
          "lineCount": 46,
          "cyclomaticComplexity": 10,
          "cognitiveComplexity": 7
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "StatCard",
          "line": 24,
          "message": "Function 'StatCard' has 46 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/StatsCard/StatsCard.stories.tsx",
      "lineCount": 332,
      "functions": [
        {
          "name": "PopulationIcon",
          "startLine": 48,
          "endLine": 49,
          "code": "const PopulationIcon = () => (\n  <svg className=\"size-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n",
          "filePath": "src/components/molecules/StatsCard/StatsCard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "HouseIcon",
          "startLine": 54,
          "endLine": 55,
          "code": "const HouseIcon = () => (\n  <svg className=\"size-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n",
          "filePath": "src/components/molecules/StatsCard/StatsCard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "SchoolIcon",
          "startLine": 60,
          "endLine": 61,
          "code": "const SchoolIcon = () => (\n  <svg className=\"size-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n",
          "filePath": "src/components/molecules/StatsCard/StatsCard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "HealthIcon",
          "startLine": 67,
          "endLine": 68,
          "code": "const HealthIcon = () => (\n  <svg className=\"size-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n",
          "filePath": "src/components/molecules/StatsCard/StatsCard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "MoneyIcon",
          "startLine": 73,
          "endLine": 74,
          "code": "const MoneyIcon = () => (\n  <svg className=\"size-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n",
          "filePath": "src/components/molecules/StatsCard/StatsCard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "JobIcon",
          "startLine": 79,
          "endLine": 80,
          "code": "const JobIcon = () => (\n  <svg className=\"size-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n",
          "filePath": "src/components/molecules/StatsCard/StatsCard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "WarningIcon",
          "startLine": 85,
          "endLine": 86,
          "code": "const WarningIcon = () => (\n  <svg className=\"size-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n",
          "filePath": "src/components/molecules/StatsCard/StatsCard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 255,
          "endLine": 256,
          "code": "  render: () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6 bg-gray-50 min-h-screen\">\n",
          "filePath": "src/components/molecules/StatsCard/StatsCard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 332 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/StatsCard/StatsCard.tsx",
      "lineCount": 84,
      "functions": [
        {
          "name": "StatsCard",
          "startLine": 29,
          "endLine": 83,
          "code": "export default function StatsCard({\n  title,\n  value,\n  icon,\n  trend,\n  description,\n  color = 'primary',\n}: StatsCardProps) {\n  // Map design system colors to Tailwind classes\n  const colorClasses = {\n    primary: `bg-primary-50 dark:bg-primary-950/30 text-primary-600 dark:text-primary-400 border-primary-200 dark:border-primary-800`,\n    success: `bg-success-50 dark:bg-success-950/30 text-success-600 dark:text-success-400 border-success-200 dark:border-success-800`,\n    secondary: `bg-secondary-50 dark:bg-secondary-950/30 text-secondary-600 dark:text-secondary-400 border-secondary-200 dark:border-secondary-800`,\n    warning: `bg-warning-50 dark:bg-warning-950/30 text-warning-600 dark:text-warning-400 border-warning-200 dark:border-warning-800`,\n    danger: `bg-danger-50 dark:bg-danger-950/30 text-danger-600 dark:text-danger-400 border-danger-200 dark:border-danger-800`,\n  };\n\n  return (\n    <div className=\"rounded-lg border p-6 bg-surface border-default\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex-1\">\n          <p className=\"text-sm font-medium font-body text-secondary\">{title}</p>\n          <p className=\"mt-1 font-display text-2xl font-semibold text-primary\">{value}</p>\n\n          {description && <p className=\"mt-1 text-sm text-secondary\">{description}</p>}\n\n          {trend && (\n            <div\n              className={`mt-2 flex items-center text-sm ${\n                trend.isPositive\n                  ? 'text-green-600 dark:text-green-400'\n                  : 'text-red-600 dark:text-red-400'\n              }`}\n            >\n              <svg\n                className={`mr-1 size-4 ${trend.isPositive ? 'rotate-0' : 'rotate-180'}`}\n                fill=\"currentColor\"\n                viewBox=\"0 0 20 20\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M5.293 7.707a1 1 0 010-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L6.707 7.707a1 1 0 01-1.414 0z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n              {trend.value}%\n            </div>\n          )}\n        </div>\n\n        <div className={`rounded-lg p-3 ${colorClasses[color]}`}>{icon}</div>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/molecules/StatsCard/StatsCard.tsx",
          "lineCount": 55,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 5
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "StatsCard",
          "line": 29,
          "message": "Function 'StatsCard' has 55 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/SuccessModal/SuccessModal.tsx",
      "lineCount": 77,
      "functions": [
        {
          "name": "onClose",
          "startLine": 6,
          "endLine": 7,
          "code": "  onClose: () => void;\n  title: string;\n",
          "filePath": "src/components/molecules/SuccessModal/SuccessModal.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "SuccessModal",
          "startLine": 24,
          "endLine": 77,
          "code": "export function SuccessModal({ isOpen, onClose, title, message }: SuccessModalProps) {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-50\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <svg\n                className=\"w-6 h-6 text-green-600\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                strokeWidth=\"2\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  d=\"M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                />\n              </svg>\n            </div>\n            <h3 className=\"ml-3 text-lg font-semibold text-gray-900\">{title}</h3>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n          >\n            <svg className=\"w-5 h-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n\n        {/* Body */}\n        <div className=\"p-6\">\n          <p className=\"text-gray-700\">{message}</p>\n        </div>\n\n        {/* Footer */}\n        <div className=\"flex justify-end px-6 py-4 bg-gray-50 rounded-b-lg\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 text-sm font-medium text-white bg-green-600 border border-transparent rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors\"\n          >\n            OK\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/molecules/SuccessModal/SuccessModal.tsx",
          "lineCount": 54,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "SuccessModal",
          "line": 24,
          "message": "Function 'SuccessModal' has 54 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/ThemeToggle/ThemeToggle.stories.tsx",
      "lineCount": 343,
      "functions": [
        {
          "name": "MockThemeProvider",
          "startLine": 6,
          "endLine": 45,
          "code": "const MockThemeProvider = ({ children, initialTheme = 'system' }: { children: React.ReactNode; initialTheme?: 'light' | 'dark' | 'system' }) => {\n  const [theme, setTheme] = useState<'light' | 'dark' | 'system'>(initialTheme);\n  const [systemTheme] = useState<'light' | 'dark'>('light');\n  \n  const actualTheme = theme === 'system' ? systemTheme : theme;\n  \n  const toggleTheme = () => {\n    setTheme(current => {\n      if (current === 'light') return 'dark';\n      if (current === 'dark') return 'system';\n      return 'light';\n    });\n  };\n\n  // Mock context value\n  const contextValue = {\n    theme,\n    actualTheme,\n    toggleTheme,\n    setTheme,\n  };\n\n  return (\n    <div className={actualTheme === 'dark' ? 'dark' : ''}>\n      <div className=\"min-h-screen bg-white dark:bg-gray-900 text-gray-900 dark:text-white p-4\">\n        {/* Provide mock context via global variable for component to use */}\n        {React.Children.map(children, child =>\n          React.isValidElement(child) && child.type === ThemeToggle\n            ? React.cloneElement(child as React.ReactElement<any>, {\n                onClick: () => {\n                  child.props.onClick?.();\n                  toggleTheme();\n                },\n              })\n            : child\n        )}\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/molecules/ThemeToggle/ThemeToggle.stories.tsx",
          "lineCount": 40,
          "cyclomaticComplexity": 7,
          "cognitiveComplexity": 6
        },
        {
          "name": "render",
          "startLine": 85,
          "endLine": 86,
          "code": "  render: (args) => (\n    <div className=\"space-y-4\">\n",
          "filePath": "src/components/molecules/ThemeToggle/ThemeToggle.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 122,
          "endLine": 123,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/molecules/ThemeToggle/ThemeToggle.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 171,
          "endLine": 172,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/molecules/ThemeToggle/ThemeToggle.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 209,
          "endLine": 210,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/molecules/ThemeToggle/ThemeToggle.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 247,
          "endLine": 248,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/molecules/ThemeToggle/ThemeToggle.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 278,
          "endLine": 279,
          "code": "  render: () => (\n    <div className=\"w-full\">\n",
          "filePath": "src/components/molecules/ThemeToggle/ThemeToggle.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 313,
          "endLine": 314,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/molecules/ThemeToggle/ThemeToggle.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 343 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "MockThemeProvider",
          "line": 6,
          "message": "Function 'MockThemeProvider' has 40 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/molecules/ThemeToggle/ThemeToggle.tsx",
      "lineCount": 113,
      "functions": [
        {
          "name": "getIcon",
          "startLine": 41,
          "endLine": 67,
          "code": "    const getIcon = () => {\n      if (theme === 'system') {\n        // Monitor/system icon for system theme\n        return (\n          <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \n                  d=\"M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\n          </svg>\n        )\n      } else if (actualTheme === 'dark') {\n        // Moon icon for dark theme\n        return (\n          <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \n                  d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\" />\n          </svg>\n        )\n      } else {\n        // Sun icon for light theme\n        return (\n          <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \n                  d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\" />\n          </svg>\n        )\n      }\n    }\n",
          "filePath": "src/components/molecules/ThemeToggle/ThemeToggle.tsx",
          "lineCount": 27,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 4
        },
        {
          "name": "getLabel",
          "startLine": 69,
          "endLine": 80,
          "code": "    const getLabel = () => {\n      switch (theme) {\n        case 'light':\n          return 'Light'\n        case 'dark':\n          return 'Dark'\n        case 'system':\n          return 'System'\n        default:\n          return 'Theme'\n      }\n    }\n",
          "filePath": "src/components/molecules/ThemeToggle/ThemeToggle.tsx",
          "lineCount": 12,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 2
        },
        {
          "name": "handleClick",
          "startLine": 82,
          "endLine": 84,
          "code": "    const handleClick = () => {\n      toggleTheme()\n    }\n",
          "filePath": "src/components/molecules/ThemeToggle/ThemeToggle.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/molecules/VersionTag/VersionTag.tsx",
      "lineCount": 90,
      "functions": [
        {
          "name": "getEnvironmentStyles",
          "startLine": 46,
          "endLine": 57,
          "code": "  const getEnvironmentStyles = (env: string) => {\n    switch (env.toLowerCase()) {\n      case 'production':\n        return 'bg-green-100 text-green-800 border-green-200';\n      case 'staging':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'development':\n        return 'bg-blue-100 text-blue-800 border-blue-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n",
          "filePath": "src/components/molecules/VersionTag/VersionTag.tsx",
          "lineCount": 12,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 2
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/organisms/AddressSearch/AddressSearch.stories.tsx",
      "lineCount": 659,
      "functions": [
        {
          "name": "DefaultTemplate",
          "startLine": 160,
          "endLine": 187,
          "code": "const DefaultTemplate = (args: any) => {\n  const [selectedAddress, setSelectedAddress] = useState<AddressHierarchy | null>(null);\n\n  return (\n    <div className=\"w-96 space-y-4\">\n      <AddressSearch {...args} onSelect={setSelectedAddress} />\n      {selectedAddress && (\n        <div className=\"rounded-lg border border-green-200 bg-green-50 p-4\">\n          <h4 className=\"mb-2 text-sm font-medium text-green-800\">Selected Address:</h4>\n          <div className=\"text-sm text-green-700\">\n            <div>\n              <strong>Full Address:</strong> {selectedAddress.full_address}\n            </div>\n            <div>\n              <strong>PSGC Code:</strong> {selectedAddress.barangay_code}\n            </div>\n            <div>\n              <strong>Type:</strong> {selectedAddress.city_municipality_type}\n            </div>\n            <div>\n              <strong>Status:</strong> {selectedAddress.urban_rural_status}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n",
          "filePath": "src/components/organisms/AddressSearch/AddressSearch.stories.tsx",
          "lineCount": 28,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "onSelect",
          "startLine": 194,
          "endLine": 195,
          "code": "    onSelect: () => {},\n  },\n",
          "filePath": "src/components/organisms/AddressSearch/AddressSearch.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "BasicSearchTemplate",
          "startLine": 198,
          "endLine": 227,
          "code": "const BasicSearchTemplate = () => {\n  const [selectedAddress, setSelectedAddress] = useState<AddressHierarchy | null>(null);\n\n  return (\n    <div className=\"w-96 space-y-4\">\n      <div className=\"space-y-2\">\n        <label className=\"text-sm font-medium text-gray-700\">Philippine Address Search</label>\n        <AddressSearch\n          onSelect={setSelectedAddress}\n          placeholder=\"Type 'Quezon', 'Manila', or 'Cebu'...\"\n        />\n        <p className=\"text-xs text-gray-500\">\n          Try searching for popular Philippine cities or regions\n        </p>\n      </div>\n\n      {selectedAddress && (\n        <div className=\"rounded border border-blue-200 bg-blue-50 p-3\">\n          <div className=\"text-sm\">\n            <div className=\"font-medium\">{selectedAddress.barangay_name}</div>\n            <div className=\"text-gray-600\">\n              {selectedAddress.city_municipality_name}, {selectedAddress.province_name || 'NCR'}\n            </div>\n            <div className=\"text-gray-500\">{selectedAddress.region_name}</div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n",
          "filePath": "src/components/organisms/AddressSearch/AddressSearch.stories.tsx",
          "lineCount": 30,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 2
        },
        {
          "name": "onSelect",
          "startLine": 232,
          "endLine": 233,
          "code": "    onSelect: () => {},\n  },\n",
          "filePath": "src/components/organisms/AddressSearch/AddressSearch.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "WithCustomPlaceholderTemplate",
          "startLine": 236,
          "endLine": 251,
          "code": "const WithCustomPlaceholderTemplate = () => {\n  const [selectedAddress, setSelectedAddress] = useState<AddressHierarchy | null>(null);\n\n  return (\n    <div className=\"w-96 space-y-4\">\n      <AddressSearch\n        onSelect={setSelectedAddress}\n        placeholder=\"Maghanap ng barangay, lungsod, o lalawigan...\"\n        maxResults={15}\n      />\n      <div className=\"text-xs text-gray-500\">\n        Using Filipino placeholder text for better localization\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/organisms/AddressSearch/AddressSearch.stories.tsx",
          "lineCount": 16,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onSelect",
          "startLine": 256,
          "endLine": 257,
          "code": "    onSelect: () => {},\n  },\n",
          "filePath": "src/components/organisms/AddressSearch/AddressSearch.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "LimitedResultsTemplate",
          "startLine": 260,
          "endLine": 278,
          "code": "const LimitedResultsTemplate = () => {\n  const [selectedAddress, setSelectedAddress] = useState<AddressHierarchy | null>(null);\n\n  return (\n    <div className=\"w-96 space-y-4\">\n      <div className=\"space-y-2\">\n        <label className=\"text-sm font-medium text-gray-700\">Limited to 5 Results</label>\n        <AddressSearch\n          onSelect={setSelectedAddress}\n          placeholder=\"Search with limited results...\"\n          maxResults={5}\n        />\n        <p className=\"text-xs text-gray-500\">\n          This search is limited to showing only 5 results maximum\n        </p>\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/organisms/AddressSearch/AddressSearch.stories.tsx",
          "lineCount": 19,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onSelect",
          "startLine": 283,
          "endLine": 284,
          "code": "    onSelect: () => {},\n  },\n",
          "filePath": "src/components/organisms/AddressSearch/AddressSearch.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "ErrorHandlingTemplate",
          "startLine": 287,
          "endLine": 316,
          "code": "const ErrorHandlingTemplate = () => {\n  const [selectedAddress, setSelectedAddress] = useState<AddressHierarchy | null>(null);\n\n  // Mock implementation that throws errors\n  const errorProneSearch = async (query: string) => {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    if (query.toLowerCase().includes('error')) {\n      throw new Error('Network connection failed');\n    }\n    return mockSearchAddresses(query, 10);\n  };\n\n  return (\n    <div className=\"w-96 space-y-4\">\n      <div className=\"space-y-2\">\n        <label className=\"text-sm font-medium text-gray-700\">Error Handling Demo</label>\n        <AddressSearch\n          onSelect={setSelectedAddress}\n          placeholder=\"Type 'error' to simulate network failure...\"\n        />\n        <div className=\"rounded border border-yellow-200 bg-yellow-50 p-3\">\n          <p className=\"text-xs text-yellow-800\">\n            <strong>Try this:</strong> Type \"error\" to simulate a network failure and see how the\n            component handles it gracefully.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/organisms/AddressSearch/AddressSearch.stories.tsx",
          "lineCount": 30,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2
        },
        {
          "name": "onSelect",
          "startLine": 321,
          "endLine": 322,
          "code": "    onSelect: () => {},\n  },\n",
          "filePath": "src/components/organisms/AddressSearch/AddressSearch.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "LoadingStatesTemplate",
          "startLine": 325,
          "endLine": 362,
          "code": "const LoadingStatesTemplate = () => {\n  const [selectedAddress, setSelectedAddress] = useState<AddressHierarchy | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Mock slow search to demonstrate loading states\n  const slowSearch = async (query: string, maxResults: number) => {\n    setIsLoading(true);\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    const results = await mockSearchAddresses(query, maxResults);\n    setIsLoading(false);\n    return results;\n  };\n\n  return (\n    <div className=\"w-96 space-y-4\">\n      <div className=\"space-y-2\">\n        <label className=\"text-sm font-medium text-gray-700\">Slow Network Demo</label>\n        <AddressSearch\n          onSelect={setSelectedAddress}\n          placeholder=\"Search to see loading indicator...\"\n        />\n        <div className=\"rounded border border-blue-200 bg-blue-50 p-3\">\n          <p className=\"text-xs text-blue-800\">\n            This demo simulates a slow network connection (2-second delay) to showcase the loading\n            spinner.\n          </p>\n        </div>\n      </div>\n\n      {isLoading && (\n        <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n          <div className=\"size-4 animate-spin rounded-full border-2 border-blue-600 border-t-transparent\"></div>\n          <span>Searching PSGC database...</span>\n        </div>\n      )}\n    </div>\n  );\n};\n",
          "filePath": "src/components/organisms/AddressSearch/AddressSearch.stories.tsx",
          "lineCount": 38,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "onSelect",
          "startLine": 367,
          "endLine": 368,
          "code": "    onSelect: () => {},\n  },\n",
          "filePath": "src/components/organisms/AddressSearch/AddressSearch.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "RegionSearchTemplate",
          "startLine": 371,
          "endLine": 405,
          "code": "const RegionSearchTemplate = () => {\n  const [selectedAddress, setSelectedAddress] = useState<AddressHierarchy | null>(null);\n\n  return (\n    <div className=\"w-96 space-y-4\">\n      <div className=\"space-y-2\">\n        <label className=\"text-sm font-medium text-gray-700\">Region-focused Search</label>\n        <AddressSearch\n          onSelect={setSelectedAddress}\n          placeholder=\"Search by region (e.g., 'NCR', 'Region I', 'CALABARZON')...\"\n        />\n        <div className=\"grid grid-cols-2 gap-2 text-xs\">\n          <div className=\"rounded bg-gray-50 p-2\">\n            <strong>Regions to try:</strong>\n            <ul className=\"mt-1 space-y-1 text-gray-600\">\n              <li>• NCR</li>\n              <li>• Region I</li>\n              <li>• CALABARZON</li>\n              <li>• Central Visayas</li>\n            </ul>\n          </div>\n          <div className=\"rounded bg-gray-50 p-2\">\n            <strong>Cities to try:</strong>\n            <ul className=\"mt-1 space-y-1 text-gray-600\">\n              <li>• Manila</li>\n              <li>• Cebu City</li>\n              <li>• Davao City</li>\n              <li>• Quezon City</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/organisms/AddressSearch/AddressSearch.stories.tsx",
          "lineCount": 35,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onSelect",
          "startLine": 410,
          "endLine": 411,
          "code": "    onSelect: () => {},\n  },\n",
          "filePath": "src/components/organisms/AddressSearch/AddressSearch.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "FormIntegrationTemplate",
          "startLine": 414,
          "endLine": 512,
          "code": "const FormIntegrationTemplate = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    address: null as AddressHierarchy | null,\n    phone: '',\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const newErrors: Record<string, string> = {};\n    if (!formData.name.trim()) newErrors.name = 'Name is required';\n    if (!formData.address) newErrors.address = 'Address is required';\n    if (!formData.phone.trim()) newErrors.phone = 'Phone number is required';\n\n    setErrors(newErrors);\n\n    if (Object.keys(newErrors).length === 0) {\n      alert(\n        `Registration submitted!\\nName: ${formData.name}\\nAddress: ${formData.address?.full_address}\\nPhone: ${formData.phone}`\n      );\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"w-96 space-y-4\">\n      <h3 className=\"text-lg font-medium text-gray-900\">Resident Registration Form</h3>\n\n      <div>\n        <label className=\"mb-1 block text-sm font-medium text-gray-700\">Full Name</label>\n        <input\n          type=\"text\"\n          value={formData.name}\n          onChange={e => setFormData(prev => ({ ...prev, name: e.target.value }))}\n          className={`w-full rounded-md border px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n            errors.name ? 'border-red-500' : 'border-gray-300'\n          }`}\n          placeholder=\"Enter your full name\"\n        />\n        {errors.name && <p className=\"mt-1 text-xs text-red-600\">{errors.name}</p>}\n      </div>\n\n      <div>\n        <label className=\"mb-1 block text-sm font-medium text-gray-700\">Address</label>\n        <AddressSearch\n          onSelect={address => {\n            setFormData(prev => ({ ...prev, address }));\n            if (errors.address) {\n              setErrors(prev => ({ ...prev, address: '' }));\n            }\n          }}\n          placeholder=\"Search for your barangay address...\"\n          className={errors.address ? 'border-red-500' : ''}\n        />\n        {errors.address && <p className=\"mt-1 text-xs text-red-600\">{errors.address}</p>}\n        {formData.address && (\n          <div className=\"mt-2 rounded border border-green-200 bg-green-50 p-2 text-xs\">\n            <strong>Selected:</strong> {formData.address.full_address}\n          </div>\n        )}\n      </div>\n\n      <div>\n        <label className=\"mb-1 block text-sm font-medium text-gray-700\">Phone Number</label>\n        <input\n          type=\"tel\"\n          value={formData.phone}\n          onChange={e => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n          className={`w-full rounded-md border px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n            errors.phone ? 'border-red-500' : 'border-gray-300'\n          }`}\n          placeholder=\"+63 912 345 6789\"\n        />\n        {errors.phone && <p className=\"mt-1 text-xs text-red-600\">{errors.phone}</p>}\n      </div>\n\n      <div className=\"flex gap-3\">\n        <button\n          type=\"submit\"\n          className=\"flex-1 rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          Submit Registration\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => {\n            setFormData({ name: '', address: null, phone: '' });\n            setErrors({});\n          }}\n          className=\"rounded-md border border-gray-300 px-4 py-2 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          Reset\n        </button>\n      </div>\n    </form>\n  );\n};\n",
          "filePath": "src/components/organisms/AddressSearch/AddressSearch.stories.tsx",
          "lineCount": 99,
          "cyclomaticComplexity": 14,
          "cognitiveComplexity": 15
        },
        {
          "name": "onSelect",
          "startLine": 517,
          "endLine": 518,
          "code": "    onSelect: () => {},\n  },\n",
          "filePath": "src/components/organisms/AddressSearch/AddressSearch.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "PSGCIntegrationTemplate",
          "startLine": 521,
          "endLine": 603,
          "code": "const PSGCIntegrationTemplate = () => {\n  const [selectedAddress, setSelectedAddress] = useState<AddressHierarchy | null>(null);\n\n  return (\n    <div className=\"w-96 space-y-4\">\n      <div className=\"space-y-2\">\n        <label className=\"text-sm font-medium text-gray-700\">PSGC Code Integration Demo</label>\n        <AddressSearch onSelect={setSelectedAddress} placeholder=\"Search to see PSGC codes...\" />\n      </div>\n\n      {selectedAddress && (\n        <div className=\"space-y-3\">\n          <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4\">\n            <h4 className=\"mb-3 text-sm font-medium text-blue-800\">PSGC Breakdown</h4>\n            <div className=\"space-y-2 text-xs\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-blue-700\">Region Code:</span>\n                <span className=\"rounded bg-blue-100 px-2 py-1 font-mono\">\n                  {selectedAddress.region_code}\n                </span>\n              </div>\n              {selectedAddress.province_code && (\n                <div className=\"flex justify-between\">\n                  <span className=\"text-blue-700\">Province Code:</span>\n                  <span className=\"rounded bg-blue-100 px-2 py-1 font-mono\">\n                    {selectedAddress.province_code}\n                  </span>\n                </div>\n              )}\n              <div className=\"flex justify-between\">\n                <span className=\"text-blue-700\">City/Municipality Code:</span>\n                <span className=\"rounded bg-blue-100 px-2 py-1 font-mono\">\n                  {selectedAddress.city_municipality_code}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-blue-700\">Barangay Code:</span>\n                <span className=\"rounded bg-blue-100 px-2 py-1 font-mono\">\n                  {selectedAddress.barangay_code}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"rounded-lg border border-green-200 bg-green-50 p-4\">\n            <h4 className=\"mb-3 text-sm font-medium text-green-800\">Geographic Properties</h4>\n            <div className=\"space-y-2 text-xs\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-green-700\">Municipality Type:</span>\n                <span className=\"rounded bg-green-100 px-2 py-1\">\n                  {selectedAddress.city_municipality_type}\n                </span>\n              </div>\n              {selectedAddress.is_independent && (\n                <div className=\"flex justify-between\">\n                  <span className=\"text-green-700\">Independent City:</span>\n                  <span className=\"rounded bg-green-100 px-2 py-1\">Yes</span>\n                </div>\n              )}\n              {selectedAddress.urban_rural_status && (\n                <div className=\"flex justify-between\">\n                  <span className=\"text-green-700\">Classification:</span>\n                  <span className=\"rounded bg-green-100 px-2 py-1\">\n                    {selectedAddress.urban_rural_status}\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"rounded border border-gray-200 bg-gray-50 p-3\">\n        <p className=\"text-xs text-gray-600\">\n          <strong>About PSGC:</strong> The Philippine Standard Geographic Code (PSGC) is the\n          official coding system used to represent the geographic and political subdivisions of the\n          Philippines. This component integrates with the complete PSGC database covering all 17\n          regions, 86 provinces, 1,637 cities/municipalities, and 38,372 barangays.\n        </p>\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/organisms/AddressSearch/AddressSearch.stories.tsx",
          "lineCount": 83,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 4
        },
        {
          "name": "onSelect",
          "startLine": 608,
          "endLine": 609,
          "code": "    onSelect: () => {},\n  },\n",
          "filePath": "src/components/organisms/AddressSearch/AddressSearch.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "AccessibilityDemoTemplate",
          "startLine": 612,
          "endLine": 651,
          "code": "const AccessibilityDemoTemplate = () => {\n  const [selectedAddress, setSelectedAddress] = useState<AddressHierarchy | null>(null);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4\">\n        <h3 className=\"mb-2 text-lg font-semibold text-blue-800\">Keyboard Navigation</h3>\n        <ul className=\"space-y-1 text-sm text-blue-700\">\n          <li>\n            • <kbd className=\"rounded bg-blue-100 px-1 py-0.5\">Tab</kbd> to focus the search input\n          </li>\n          <li>\n            • <kbd className=\"rounded bg-blue-100 px-1 py-0.5\">↑</kbd>\n            <kbd className=\"rounded bg-blue-100 px-1 py-0.5\">↓</kbd> to navigate search results\n          </li>\n          <li>\n            • <kbd className=\"rounded bg-blue-100 px-1 py-0.5\">Enter</kbd> to select highlighted\n            result\n          </li>\n          <li>\n            • <kbd className=\"rounded bg-blue-100 px-1 py-0.5\">Escape</kbd> to close dropdown\n          </li>\n          <li>• Type to search and filter results in real-time</li>\n          <li>• Clear button (X) to reset search</li>\n        </ul>\n      </div>\n\n      <div className=\"w-96\">\n        <AddressSearch onSelect={setSelectedAddress} placeholder=\"Try keyboard navigation...\" />\n      </div>\n\n      <div className=\"rounded border border-green-200 bg-green-50 p-3\">\n        <p className=\"text-sm text-green-800\">\n          This component follows WCAG accessibility guidelines with proper ARIA labels, keyboard\n          navigation, and screen reader support for Philippine government system compliance.\n        </p>\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/organisms/AddressSearch/AddressSearch.stories.tsx",
          "lineCount": 40,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onSelect",
          "startLine": 656,
          "endLine": 657,
          "code": "    onSelect: () => {},\n  },\n",
          "filePath": "src/components/organisms/AddressSearch/AddressSearch.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 659 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "LoadingStatesTemplate",
          "line": 325,
          "message": "Function 'LoadingStatesTemplate' has 38 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "RegionSearchTemplate",
          "line": 371,
          "message": "Function 'RegionSearchTemplate' has 35 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "FormIntegrationTemplate",
          "line": 414,
          "message": "Function 'FormIntegrationTemplate' has 99 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "FormIntegrationTemplate",
          "line": 414,
          "complexity": 14,
          "message": "Function 'FormIntegrationTemplate' has cyclomatic complexity of 14 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "PSGCIntegrationTemplate",
          "line": 521,
          "message": "Function 'PSGCIntegrationTemplate' has 83 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "AccessibilityDemoTemplate",
          "line": 612,
          "message": "Function 'AccessibilityDemoTemplate' has 40 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/AddressSearch/AddressSearch.tsx",
      "lineCount": 251,
      "functions": [
        {
          "name": "onSelect",
          "startLine": 12,
          "endLine": 13,
          "code": "  onSelect: (address: AddressHierarchy) => void;\n  placeholder?: string;\n",
          "filePath": "src/components/organisms/AddressSearch/AddressSearch.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "AddressSearch",
          "startLine": 18,
          "endLine": 250,
          "code": "export default function AddressSearch({\n  onSelect,\n  placeholder = 'Search for region, province, city, or barangay...',\n  className = '',\n  maxResults = 20,\n}: AddressSearchProps) {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState<AddressHierarchy[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState(-1);\n\n  const searchRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Debounced search\n  useEffect(() => {\n    const timeoutId = setTimeout(async () => {\n      if (query.trim().length < 2) {\n        setResults([]);\n        setIsOpen(false);\n        return;\n      }\n\n      try {\n        setIsLoading(true);\n        const searchResults = await searchAddresses(query.trim(), maxResults);\n        setResults(searchResults);\n        setIsOpen(searchResults.length > 0);\n        setSelectedIndex(-1);\n      } catch (error) {\n        console.error('Search error:', error);\n        setResults([]);\n        setIsOpen(false);\n      } finally {\n        setIsLoading(false);\n      }\n    }, 300);\n\n    return () => clearTimeout(timeoutId);\n  }, [query, maxResults]);\n\n  // Handle click outside\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n        setSelectedIndex(-1);\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  // Handle keyboard navigation\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (!isOpen || results.length === 0) return;\n\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        setSelectedIndex(prev => Math.min(prev + 1, results.length - 1));\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        setSelectedIndex(prev => Math.max(prev - 1, -1));\n        break;\n      case 'Enter':\n        e.preventDefault();\n        if (selectedIndex >= 0) {\n          handleSelect(results[selectedIndex]);\n        }\n        break;\n      case 'Escape':\n        setIsOpen(false);\n        setSelectedIndex(-1);\n        inputRef.current?.blur();\n        break;\n    }\n  };\n\n  const handleSelect = (address: AddressHierarchy) => {\n    onSelect(address);\n    setQuery(address.full_address);\n    setIsOpen(false);\n    setSelectedIndex(-1);\n  };\n\n  const highlightMatch = (text: string, query: string) => {\n    if (!query.trim()) return text;\n\n    const regex = new RegExp(`(${query.trim().replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`, 'gi');\n    const parts = text.split(regex);\n\n    return parts.map((part, index) =>\n      regex.test(part) ? (\n        <mark key={index} className=\"rounded bg-yellow-200 px-0.5\">\n          {part}\n        </mark>\n      ) : (\n        part\n      )\n    );\n  };\n\n  return (\n    <div ref={searchRef} className={`relative ${className}`}>\n      {/* Search Input */}\n      <div className=\"relative\">\n        <input\n          ref={inputRef}\n          type=\"text\"\n          value={query}\n          onChange={e => setQuery(e.target.value)}\n          onKeyDown={handleKeyDown}\n          placeholder={placeholder}\n          className=\"w-full rounded-md border px-4 py-2 outline-none text-primary bg-surface border-default focus:border-blue-500 focus:ring-2 focus:ring-blue-500\"\n        />\n\n        {/* Loading indicator only */}\n        {isLoading && (\n          <div className=\"pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3\">\n            <div className=\"size-4 animate-spin rounded-full border-2 border-t-blue-600 border-default\"></div>\n          </div>\n        )}\n\n        {/* Clear Button */}\n        {query && (\n          <button\n            onClick={() => {\n              setQuery('');\n              setResults([]);\n              setIsOpen(false);\n              inputRef.current?.focus();\n            }}\n            className=\"absolute inset-y-0 right-0 flex items-center pr-3 text-muted hover:text-secondary\"\n          >\n            <svg className=\"size-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        )}\n      </div>\n\n      {/* Search Results Dropdown */}\n      {isOpen && results.length > 0 && (\n        <div className=\"absolute z-50 mt-1 max-h-96 w-full overflow-y-auto rounded-md border shadow-lg bg-surface border-default\">\n          {results.map((address, index) => (\n            <button\n              key={`${address.barangay_code}-${index}`}\n              onClick={() => handleSelect(address)}\n              className={`w-full border-b px-4 py-3 text-left border-default last:border-b-0 hover:bg-surface-hover focus:bg-blue-50 focus:outline-none dark:focus:bg-blue-900/20 ${\n                index === selectedIndex ? 'bg-blue-50 dark:bg-blue-900/20' : ''\n              }`}\n            >\n              <div className=\"space-y-1\">\n                {/* Full Address */}\n                <div className=\"text-sm font-medium text-primary\">\n                  {highlightMatch(address.full_address, query)}\n                </div>\n\n                {/* Geographic Details */}\n                <div className=\"space-y-0.5 text-xs text-secondary\">\n                  <div>\n                    <span className=\"text-xs\">📍</span>{' '}\n                    {highlightMatch(address.barangay_name, query)}, {address.city_municipality_name}\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <span>\n                      <span className=\"text-xs\">🏛️</span> {address.city_municipality_type}\n                    </span>\n                    {address.is_independent && (\n                      <span className=\"rounded bg-blue-100 px-1.5 py-0.5 text-xs text-blue-700 dark:bg-blue-900/30 dark:text-blue-300\">\n                        Independent\n                      </span>\n                    )}\n                    {address.urban_rural_status && (\n                      <span className=\"rounded bg-green-100 px-1.5 py-0.5 text-xs text-green-700 dark:bg-green-900/30 dark:text-green-300\">\n                        {address.urban_rural_status}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </button>\n          ))}\n\n          {/* Search Stats */}\n          <div className=\"border-t px-4 py-2 text-xs text-muted bg-background-muted border-default\">\n            Found {results.length} result{results.length !== 1 ? 's' : ''}\n            {results.length === maxResults && ` (showing first ${maxResults})`}\n          </div>\n        </div>\n      )}\n\n      {/* No Results */}\n      {isOpen && !isLoading && query.trim().length >= 2 && results.length === 0 && (\n        <div className=\"absolute z-50 mt-1 w-full rounded-md border p-4 text-center text-sm shadow-lg text-secondary bg-surface border-default\">\n          <div className=\"space-y-2\">\n            <div className=\"text-muted\">\n              <svg className=\"mx-auto size-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                />\n              </svg>\n            </div>\n            <div>No addresses found for &quot;{query}&quot;</div>\n            <div className=\"text-xs\">\n              Try searching for region, province, city, or barangay names\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Search Help */}\n      {!query && (\n        <div className=\"mt-2 text-xs text-muted\">\n          <span className=\"text-xs\">💡</span> Search across 38,372 barangays in 1,637 cities\n          nationwide\n        </div>\n      )}\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/AddressSearch/AddressSearch.tsx",
          "lineCount": 233,
          "cyclomaticComplexity": 28,
          "cognitiveComplexity": 28
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "AddressSearch",
          "line": 18,
          "message": "Function 'AddressSearch' has 233 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "AddressSearch",
          "line": 18,
          "complexity": 28,
          "message": "Function 'AddressSearch' has cyclomatic complexity of 28 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "AddressSearch",
          "line": 18,
          "complexity": 28,
          "message": "Function 'AddressSearch' has cognitive complexity of 28 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/AddressSelector/AddressSelector.stories.tsx",
      "lineCount": 806,
      "functions": [
        {
          "name": "mockGetRegions",
          "startLine": 149,
          "endLine": 152,
          "code": "const mockGetRegions = async () => {\n  await new Promise(resolve => setTimeout(resolve, 300));\n  return mockRegions;\n};\n",
          "filePath": "src/components/organisms/AddressSelector/AddressSelector.stories.tsx",
          "lineCount": 4,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "mockGetProvincesByRegion",
          "startLine": 154,
          "endLine": 157,
          "code": "const mockGetProvincesByRegion = async (regionCode: string) => {\n  await new Promise(resolve => setTimeout(resolve, 400));\n  return mockProvincesByRegion[regionCode] || [];\n};\n",
          "filePath": "src/components/organisms/AddressSelector/AddressSelector.stories.tsx",
          "lineCount": 4,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "mockGetCitiesByProvince",
          "startLine": 159,
          "endLine": 162,
          "code": "const mockGetCitiesByProvince = async (provinceCode: string) => {\n  await new Promise(resolve => setTimeout(resolve, 300));\n  return mockCitiesByProvince[provinceCode] || [];\n};\n",
          "filePath": "src/components/organisms/AddressSelector/AddressSelector.stories.tsx",
          "lineCount": 4,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "mockGetMetroManilaCities",
          "startLine": 164,
          "endLine": 167,
          "code": "const mockGetMetroManilaCities = async () => {\n  await new Promise(resolve => setTimeout(resolve, 300));\n  return mockCitiesByProvince['13'] || [];\n};\n",
          "filePath": "src/components/organisms/AddressSelector/AddressSelector.stories.tsx",
          "lineCount": 4,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "mockGetBarangaysByCity",
          "startLine": 169,
          "endLine": 172,
          "code": "const mockGetBarangaysByCity = async (cityCode: string) => {\n  await new Promise(resolve => setTimeout(resolve, 500));\n  return mockBarangaysByCity[cityCode] || [];\n};\n",
          "filePath": "src/components/organisms/AddressSelector/AddressSelector.stories.tsx",
          "lineCount": 4,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "render",
          "startLine": 175,
          "endLine": 205,
          "code": "  render: (args) => {\n    const [address, setAddress] = useState<AddressSelection>({\n      region: '',\n      province: '',\n      city: '',\n      barangay: '',\n    });\n    \n    return (\n      <div className=\"w-full max-w-4xl space-y-4\">\n        <AddressSelector\n          {...args}\n          value={address}\n          onChange={setAddress}\n        />\n        \n        {/* Address Summary */}\n        {(address.region || address.province || address.city || address.barangay) && (\n          <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n            <h4 className=\"text-sm font-medium text-green-800 mb-2\">Current Selection:</h4>\n            <div className=\"text-sm text-green-700 space-y-1\">\n              <div><strong>Region:</strong> {address.region || 'Not selected'}</div>\n              <div><strong>Province:</strong> {address.province || 'Not selected'}</div>\n              <div><strong>City/Municipality:</strong> {address.city || 'Not selected'}</div>\n              <div><strong>Barangay:</strong> {address.barangay || 'Not selected'}</div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  },\n",
          "filePath": "src/components/organisms/AddressSelector/AddressSelector.stories.tsx",
          "lineCount": 31,
          "cyclomaticComplexity": 9,
          "cognitiveComplexity": 5
        },
        {
          "name": "render",
          "startLine": 215,
          "endLine": 239,
          "code": "  render: () => {\n    const [address, setAddress] = useState<AddressSelection>({\n      region: '',\n      province: '',\n      city: '',\n      barangay: '',\n    });\n    \n    return (\n      <div className=\"w-full max-w-4xl space-y-4\">\n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-medium text-gray-900\">Select Your Address</h3>\n          <p className=\"text-sm text-gray-600\">\n            Choose your location following the Philippine administrative hierarchy\n          </p>\n        </div>\n        \n        <AddressSelector\n          value={address}\n          onChange={setAddress}\n          showLabels={true}\n        />\n      </div>\n    );\n  },\n",
          "filePath": "src/components/organisms/AddressSelector/AddressSelector.stories.tsx",
          "lineCount": 25,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 243,
          "endLine": 268,
          "code": "  render: () => {\n    const [address, setAddress] = useState<AddressSelection>({\n      region: '',\n      province: '',\n      city: '',\n      barangay: '',\n    });\n    \n    return (\n      <div className=\"w-full max-w-4xl space-y-4\">\n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-medium text-gray-900\">Compact Address Selection</h3>\n          <p className=\"text-sm text-gray-600\">\n            Grid layout for space-efficient address input\n          </p>\n        </div>\n        \n        <AddressSelector\n          value={address}\n          onChange={setAddress}\n          showLabels={true}\n          compact={true}\n        />\n      </div>\n    );\n  },\n",
          "filePath": "src/components/organisms/AddressSelector/AddressSelector.stories.tsx",
          "lineCount": 26,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 272,
          "endLine": 306,
          "code": "  render: () => {\n    const [address, setAddress] = useState<AddressSelection>({\n      region: '13', // Pre-select NCR\n      province: '',\n      city: '',\n      barangay: '',\n    });\n    \n    return (\n      <div className=\"w-full max-w-4xl space-y-4\">\n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-medium text-gray-900\">National Capital Region (NCR) Demo</h3>\n          <p className=\"text-sm text-gray-600\">\n            NCR has independent cities without provinces. Notice how the province field is handled.\n          </p>\n        </div>\n        \n        <AddressSelector\n          value={address}\n          onChange={setAddress}\n          showLabels={true}\n        />\n        \n        <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n          <h4 className=\"text-sm font-medium text-blue-800 mb-2\">NCR Special Handling:</h4>\n          <ul className=\"text-sm text-blue-700 space-y-1\">\n            <li>• Independent cities (Manila, Quezon City, Makati, etc.)</li>\n            <li>• No provincial-level government structure</li>\n            <li>• Direct Region → City → Barangay hierarchy</li>\n            <li>• Component automatically detects and adapts to NCR structure</li>\n          </ul>\n        </div>\n      </div>\n    );\n  },\n",
          "filePath": "src/components/organisms/AddressSelector/AddressSelector.stories.tsx",
          "lineCount": 35,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 310,
          "endLine": 341,
          "code": "  render: () => {\n    const [address, setAddress] = useState<AddressSelection>({\n      region: '04', // CALABARZON\n      province: '0434', // Laguna\n      city: '',\n      barangay: '',\n    });\n    \n    return (\n      <div className=\"w-full max-w-4xl space-y-4\">\n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-medium text-gray-900\">Pre-selected Address</h3>\n          <p className=\"text-sm text-gray-600\">\n            Demonstrates loading with pre-selected region and province (CALABARZON → Laguna)\n          </p>\n        </div>\n        \n        <AddressSelector\n          value={address}\n          onChange={setAddress}\n          showLabels={true}\n        />\n        \n        <div className=\"p-4 bg-amber-50 border border-amber-200 rounded-lg\">\n          <p className=\"text-sm text-amber-800\">\n            <strong>Note:</strong> When region and province are pre-selected, \n            the component automatically loads the available cities. Select a city to load barangays.\n          </p>\n        </div>\n      </div>\n    );\n  },\n",
          "filePath": "src/components/organisms/AddressSelector/AddressSelector.stories.tsx",
          "lineCount": 32,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 345,
          "endLine": 390,
          "code": "  render: () => {\n    const [address, setAddress] = useState<AddressSelection>({\n      region: '',\n      province: '',\n      city: '',\n      barangay: '',\n    });\n    \n    // Mock error simulation\n    const [simulateError, setSimulateError] = useState(false);\n    \n    return (\n      <div className=\"w-full max-w-4xl space-y-4\">\n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-medium text-gray-900\">Error Handling Demo</h3>\n          <div className=\"flex items-center space-x-4\">\n            <label className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                checked={simulateError}\n                onChange={(e) => setSimulateError(e.target.checked)}\n                className=\"rounded border-gray-300\"\n              />\n              <span className=\"text-sm text-gray-600\">Simulate network errors</span>\n            </label>\n          </div>\n        </div>\n        \n        <AddressSelector\n          value={address}\n          onChange={setAddress}\n          showLabels={true}\n        />\n        \n        {simulateError && (\n          <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\n            <h4 className=\"text-sm font-medium text-red-800 mb-2\">Error Simulation Active</h4>\n            <p className=\"text-sm text-red-700\">\n              API calls will fail to demonstrate error handling. Try selecting different regions\n              to see how the component handles network failures gracefully.\n            </p>\n          </div>\n        )}\n      </div>\n    );\n  },\n",
          "filePath": "src/components/organisms/AddressSelector/AddressSelector.stories.tsx",
          "lineCount": 46,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "render",
          "startLine": 394,
          "endLine": 441,
          "code": "  render: () => {\n    const [address, setAddress] = useState<AddressSelection>({\n      region: '',\n      province: '',\n      city: '',\n      barangay: '',\n    });\n    \n    const [slowMode, setSlowMode] = useState(true);\n    \n    return (\n      <div className=\"w-full max-w-4xl space-y-4\">\n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-medium text-gray-900\">Loading States Demo</h3>\n          <div className=\"flex items-center space-x-4\">\n            <label className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                checked={slowMode}\n                onChange={(e) => setSlowMode(e.target.checked)}\n                className=\"rounded border-gray-300\"\n              />\n              <span className=\"text-sm text-gray-600\">Slow network simulation (2s delay)</span>\n            </label>\n          </div>\n          <p className=\"text-sm text-gray-600\">\n            Watch the loading indicators appear as you make selections\n          </p>\n        </div>\n        \n        <AddressSelector\n          value={address}\n          onChange={setAddress}\n          showLabels={true}\n        />\n        \n        <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n          <h4 className=\"text-sm font-medium text-blue-800 mb-2\">Loading Behavior:</h4>\n          <ul className=\"text-sm text-blue-700 space-y-1\">\n            <li>• Each dropdown shows loading spinner during API calls</li>\n            <li>• Dependent dropdowns are disabled until parent selection loads</li>\n            <li>• Cascade resets clear child selections appropriately</li>\n            <li>• Error states preserve user selections when possible</li>\n          </ul>\n        </div>\n      </div>\n    );\n  },\n",
          "filePath": "src/components/organisms/AddressSelector/AddressSelector.stories.tsx",
          "lineCount": 48,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 445,
          "endLine": 477,
          "code": "  render: () => {\n    const [address, setAddress] = useState<AddressSelection>({\n      region: '07', // Central Visayas\n      province: '0722', // Cebu\n      city: '072209000', // Cebu City\n      barangay: '072209001', // Adlaon\n    });\n    \n    return (\n      <div className=\"w-full max-w-4xl space-y-4\">\n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-medium text-gray-900\">Disabled State</h3>\n          <p className=\"text-sm text-gray-600\">\n            All address fields are disabled but still display current values\n          </p>\n        </div>\n        \n        <AddressSelector\n          value={address}\n          onChange={setAddress}\n          showLabels={true}\n          disabled={true}\n        />\n        \n        <div className=\"p-4 bg-gray-50 border border-gray-200 rounded-lg\">\n          <p className=\"text-sm text-gray-600\">\n            <strong>Use case:</strong> Display address information in read-only mode, \n            such as when viewing submitted forms or during form processing.\n          </p>\n        </div>\n      </div>\n    );\n  },\n",
          "filePath": "src/components/organisms/AddressSelector/AddressSelector.stories.tsx",
          "lineCount": 33,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 481,
          "endLine": 654,
          "code": "  render: () => {\n    const [formData, setFormData] = useState({\n      businessName: '',\n      address: {\n        region: '',\n        province: '',\n        city: '',\n        barangay: '',\n      } as AddressSelection,\n      businessType: '',\n      contactNumber: '',\n    });\n    \n    const [errors, setErrors] = useState<Record<string, string>>({});\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    \n    const validateAddress = (address: AddressSelection) => {\n      const addressErrors: string[] = [];\n      if (!address.region) addressErrors.push('Region is required');\n      if (!address.city) addressErrors.push('City/Municipality is required');\n      if (!address.barangay) addressErrors.push('Barangay is required');\n      // Province is optional for NCR\n      if (address.region && address.region !== '13' && !address.province) {\n        addressErrors.push('Province is required');\n      }\n      return addressErrors;\n    };\n    \n    const handleSubmit = async (e: React.FormEvent) => {\n      e.preventDefault();\n      \n      const newErrors: Record<string, string> = {};\n      \n      // Validate fields\n      if (!formData.businessName.trim()) newErrors.businessName = 'Business name is required';\n      if (!formData.businessType) newErrors.businessType = 'Business type is required';\n      if (!formData.contactNumber.trim()) newErrors.contactNumber = 'Contact number is required';\n      \n      // Validate address\n      const addressErrors = validateAddress(formData.address);\n      if (addressErrors.length > 0) {\n        newErrors.address = addressErrors.join(', ');\n      }\n      \n      setErrors(newErrors);\n      \n      if (Object.keys(newErrors).length === 0) {\n        setIsSubmitting(true);\n        // Simulate API submission\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        setIsSubmitting(false);\n        alert(`Business Registration Submitted!\\n\\nBusiness: ${formData.businessName}\\nAddress: Complete Philippine address selected\\nType: ${formData.businessType}\\nContact: ${formData.contactNumber}`);\n      }\n    };\n    \n    return (\n      <form onSubmit={handleSubmit} className=\"w-full max-w-4xl space-y-6\">\n        <div className=\"space-y-2\">\n          <h2 className=\"text-xl font-semibold text-gray-900\">Business Registration Form</h2>\n          <p className=\"text-sm text-gray-600\">\n            Register your business with complete Philippine address details\n          </p>\n        </div>\n        \n        {/* Business Name */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Business Name *\n          </label>\n          <input\n            type=\"text\"\n            value={formData.businessName}\n            onChange={(e) => setFormData(prev => ({ ...prev, businessName: e.target.value }))}\n            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n              errors.businessName ? 'border-red-500' : 'border-gray-300'\n            }`}\n            placeholder=\"Enter your business name\"\n          />\n          {errors.businessName && <p className=\"mt-1 text-xs text-red-600\">{errors.businessName}</p>}\n        </div>\n        \n        {/* Address Selection */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n            Business Address *\n          </label>\n          <AddressSelector\n            value={formData.address}\n            onChange={(address) => {\n              setFormData(prev => ({ ...prev, address }));\n              if (errors.address) {\n                setErrors(prev => ({ ...prev, address: '' }));\n              }\n            }}\n            showLabels={true}\n          />\n          {errors.address && <p className=\"mt-2 text-xs text-red-600\">{errors.address}</p>}\n        </div>\n        \n        {/* Business Type */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Business Type *\n          </label>\n          <select\n            value={formData.businessType}\n            onChange={(e) => setFormData(prev => ({ ...prev, businessType: e.target.value }))}\n            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n              errors.businessType ? 'border-red-500' : 'border-gray-300'\n            }`}\n          >\n            <option value=\"\">Select business type</option>\n            <option value=\"retail\">Retail Store</option>\n            <option value=\"restaurant\">Restaurant/Food Service</option>\n            <option value=\"service\">Service Business</option>\n            <option value=\"manufacturing\">Manufacturing</option>\n            <option value=\"technology\">Technology/IT</option>\n            <option value=\"other\">Other</option>\n          </select>\n          {errors.businessType && <p className=\"mt-1 text-xs text-red-600\">{errors.businessType}</p>}\n        </div>\n        \n        {/* Contact Number */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Contact Number *\n          </label>\n          <input\n            type=\"tel\"\n            value={formData.contactNumber}\n            onChange={(e) => setFormData(prev => ({ ...prev, contactNumber: e.target.value }))}\n            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n              errors.contactNumber ? 'border-red-500' : 'border-gray-300'\n            }`}\n            placeholder=\"+63 912 345 6789\"\n          />\n          {errors.contactNumber && <p className=\"mt-1 text-xs text-red-600\">{errors.contactNumber}</p>}\n        </div>\n        \n        {/* Submit Buttons */}\n        <div className=\"flex gap-4 pt-4\">\n          <button\n            type=\"submit\"\n            disabled={isSubmitting}\n            className=\"flex-1 bg-blue-600 text-white py-3 px-6 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center\"\n          >\n            {isSubmitting ? (\n              <>\n                <div className=\"animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2\"></div>\n                Submitting Registration...\n              </>\n            ) : (\n              'Submit Business Registration'\n            )}\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => {\n              setFormData({\n                businessName: '',\n                address: { region: '', province: '', city: '', barangay: '' },\n                businessType: '',\n                contactNumber: '',\n              });\n              setErrors({});\n            }}\n            className=\"px-6 py-3 border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            Reset Form\n          </button>\n        </div>\n      </form>\n    );\n  },\n",
          "filePath": "src/components/organisms/AddressSelector/AddressSelector.stories.tsx",
          "lineCount": 174,
          "cyclomaticComplexity": 20,
          "cognitiveComplexity": 22
        },
        {
          "name": "render",
          "startLine": 658,
          "endLine": 748,
          "code": "  render: () => {\n    const [address, setAddress] = useState<AddressSelection>({\n      region: '',\n      province: '',\n      city: '',\n      barangay: '',\n    });\n    \n    const [validationErrors, setValidationErrors] = useState<string[]>([]);\n    \n    const validateSelection = (selection: AddressSelection) => {\n      const errors: string[] = [];\n      \n      if (!selection.region) {\n        errors.push('Region must be selected');\n      }\n      \n      if (selection.region && selection.region !== '13' && !selection.province) {\n        errors.push('Province is required for non-NCR regions');\n      }\n      \n      if (!selection.city) {\n        errors.push('City/Municipality must be selected');\n      }\n      \n      if (!selection.barangay) {\n        errors.push('Barangay must be selected for complete address');\n      }\n      \n      setValidationErrors(errors);\n    };\n    \n    const handleAddressChange = (newAddress: AddressSelection) => {\n      setAddress(newAddress);\n      validateSelection(newAddress);\n    };\n    \n    return (\n      <div className=\"w-full max-w-4xl space-y-4\">\n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-medium text-gray-900\">Address Validation Demo</h3>\n          <p className=\"text-sm text-gray-600\">\n            Real-time validation shows requirements for complete Philippine address\n          </p>\n        </div>\n        \n        <AddressSelector\n          value={address}\n          onChange={handleAddressChange}\n          showLabels={true}\n          required={true}\n        />\n        \n        {/* Validation Results */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {/* Errors */}\n          {validationErrors.length > 0 && (\n            <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\n              <h4 className=\"text-sm font-medium text-red-800 mb-2\">Validation Errors</h4>\n              <ul className=\"text-sm text-red-700 space-y-1\">\n                {validationErrors.map((error, index) => (\n                  <li key={index}>• {error}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n          \n          {/* Success */}\n          {validationErrors.length === 0 && address.barangay && (\n            <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n              <h4 className=\"text-sm font-medium text-green-800 mb-2\">✓ Complete Address</h4>\n              <p className=\"text-sm text-green-700\">\n                All required address components have been selected according to Philippine administrative structure.\n              </p>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n          <h4 className=\"text-sm font-medium text-blue-800 mb-2\">Validation Rules:</h4>\n          <ul className=\"text-sm text-blue-700 space-y-1\">\n            <li>• Region is always required</li>\n            <li>• Province is required except for NCR (independent cities)</li>\n            <li>• City/Municipality is required for all locations</li>\n            <li>• Barangay is required for complete address validation</li>\n            <li>• Selection hierarchy must follow Region → Province → City → Barangay</li>\n          </ul>\n        </div>\n      </div>\n    );\n  },\n",
          "filePath": "src/components/organisms/AddressSelector/AddressSelector.stories.tsx",
          "lineCount": 91,
          "cyclomaticComplexity": 10,
          "cognitiveComplexity": 11
        },
        {
          "name": "render",
          "startLine": 752,
          "endLine": 805,
          "code": "  render: () => {\n    const [address, setAddress] = useState<AddressSelection>({\n      region: '',\n      province: '',\n      city: '',\n      barangay: '',\n    });\n    \n    return (\n      <div className=\"space-y-6\">\n        <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n          <h3 className=\"text-lg font-semibold text-blue-800 mb-2\">Accessibility Features</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-blue-700\">\n            <div>\n              <h4 className=\"font-medium mb-2\">Keyboard Navigation:</h4>\n              <ul className=\"space-y-1\">\n                <li>• <kbd className=\"px-1 py-0.5 bg-blue-100 rounded\">Tab</kbd> to navigate between dropdowns</li>\n                <li>• <kbd className=\"px-1 py-0.5 bg-blue-100 rounded\">Space</kbd>/<kbd className=\"px-1 py-0.5 bg-blue-100 rounded\">Enter</kbd> to open dropdowns</li>\n                <li>• <kbd className=\"px-1 py-0.5 bg-blue-100 rounded\">↑</kbd><kbd className=\"px-1 py-0.5 bg-blue-100 rounded\">↓</kbd> to navigate options</li>\n                <li>• <kbd className=\"px-1 py-0.5 bg-blue-100 rounded\">Enter</kbd> to select options</li>\n                <li>• <kbd className=\"px-1 py-0.5 bg-blue-100 rounded\">Esc</kbd> to close dropdowns</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-medium mb-2\">Screen Reader Support:</h4>\n              <ul className=\"space-y-1\">\n                <li>• Proper ARIA labels and roles</li>\n                <li>• Loading state announcements</li>\n                <li>• Error message association</li>\n                <li>• Required field indicators</li>\n                <li>• Selection change announcements</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"w-full max-w-4xl\">\n          <AddressSelector\n            value={address}\n            onChange={setAddress}\n            showLabels={true}\n            required={true}\n          />\n        </div>\n        \n        <div className=\"p-3 bg-green-50 border border-green-200 rounded\">\n          <p className=\"text-sm text-green-800\">\n            <strong>WCAG Compliance:</strong> This component follows Web Content Accessibility Guidelines (WCAG) 2.1 AA standards,\n            making it suitable for Philippine government systems that require accessibility compliance.\n          </p>\n        </div>\n      </div>\n    );\n  },\n",
          "filePath": "src/components/organisms/AddressSelector/AddressSelector.stories.tsx",
          "lineCount": 54,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 806 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 175,
          "message": "Function 'render' has 31 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 272,
          "message": "Function 'render' has 35 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 310,
          "message": "Function 'render' has 32 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 345,
          "message": "Function 'render' has 46 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 394,
          "message": "Function 'render' has 48 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 445,
          "message": "Function 'render' has 33 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 481,
          "message": "Function 'render' has 174 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "render",
          "line": 481,
          "complexity": 20,
          "message": "Function 'render' has cyclomatic complexity of 20 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "render",
          "line": 481,
          "complexity": 22,
          "message": "Function 'render' has cognitive complexity of 22 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 658,
          "message": "Function 'render' has 91 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 752,
          "message": "Function 'render' has 54 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/AddressSelector/AddressSelector.tsx",
      "lineCount": 322,
      "functions": [
        {
          "name": "onChange",
          "startLine": 31,
          "endLine": 32,
          "code": "  onChange: (address: AddressSelection) => void;\n  disabled?: boolean;\n",
          "filePath": "src/components/organisms/AddressSelector/AddressSelector.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "AddressSelector",
          "startLine": 39,
          "endLine": 321,
          "code": "export default function AddressSelector({\n  value,\n  onChange,\n  disabled = false,\n  required: _required = false,\n  className = '',\n  showLabels = true,\n  compact = false,\n}: AddressSelectorProps) {\n  // Data states\n  const [regions, setRegions] = useState<Region[]>([]);\n  const [provinces, setProvinces] = useState<Province[]>([]);\n  const [cities, setCities] = useState<City[]>([]);\n  const [barangays, setBarangays] = useState<Barangay[]>([]);\n\n  // Loading states\n  const [loadingRegions, setLoadingRegions] = useState(true);\n  const [loadingProvinces, setLoadingProvinces] = useState(false);\n  const [loadingCities, setLoadingCities] = useState(false);\n  const [loadingBarangays, setLoadingBarangays] = useState(false);\n\n  // Error states\n  const [errors, setErrors] = useState({\n    region: '',\n    province: '',\n    city: '',\n    barangay: '',\n  });\n\n  // Load regions on component mount\n  useEffect(() => {\n    async function loadRegions() {\n      try {\n        setLoadingRegions(true);\n        const regionsData = await getRegions();\n        setRegions(regionsData);\n        setErrors(prev => ({ ...prev, region: '' }));\n      } catch (error) {\n        console.error('Error loading regions:', error);\n        setErrors(prev => ({ ...prev, region: 'Failed to load regions' }));\n      } finally {\n        setLoadingRegions(false);\n      }\n    }\n\n    loadRegions();\n  }, []);\n\n  // Load provinces when region changes\n  useEffect(() => {\n    async function loadProvinces() {\n      if (!value.region) {\n        setProvinces([]);\n        return;\n      }\n\n      try {\n        setLoadingProvinces(true);\n        const provincesData = await getProvincesByRegion(value.region);\n        setProvinces(provincesData);\n        setErrors(prev => ({ ...prev, province: '' }));\n\n        // Special handling for NCR (Metro Manila)\n        if (value.region === '13' || value.region === 'NCR') {\n          const metroManilaCities = await getMetroManilaCities();\n          if (metroManilaCities.length > 0) {\n            // For NCR, we can directly load cities since they're independent\n            setCities(metroManilaCities);\n          }\n        }\n      } catch (error) {\n        console.error('Error loading provinces:', error);\n        setErrors(prev => ({ ...prev, province: 'Failed to load provinces' }));\n      } finally {\n        setLoadingProvinces(false);\n      }\n    }\n\n    loadProvinces();\n  }, [value.region]);\n\n  // Load cities when province changes\n  useEffect(() => {\n    async function loadCities() {\n      if (!value.province) {\n        setCities([]);\n        return;\n      }\n\n      try {\n        setLoadingCities(true);\n        const citiesData = await getCitiesByProvince(value.province);\n        setCities(citiesData);\n        setErrors(prev => ({ ...prev, city: '' }));\n      } catch (error) {\n        console.error('Error loading cities:', error);\n        setErrors(prev => ({ ...prev, city: 'Failed to load cities' }));\n      } finally {\n        setLoadingCities(false);\n      }\n    }\n\n    loadCities();\n  }, [value.province]);\n\n  // Load barangays when city changes\n  useEffect(() => {\n    async function loadBarangays() {\n      if (!value.city) {\n        setBarangays([]);\n        return;\n      }\n\n      try {\n        setLoadingBarangays(true);\n        const barangaysData = await getBarangaysByCity(value.city);\n        setBarangays(barangaysData);\n        setErrors(prev => ({ ...prev, barangay: '' }));\n      } catch (error) {\n        console.error('Error loading barangays:', error);\n        setErrors(prev => ({ ...prev, barangay: 'Failed to load barangays' }));\n      } finally {\n        setLoadingBarangays(false);\n      }\n    }\n\n    loadBarangays();\n  }, [value.city]);\n\n  // Handle selection changes with cascade reset\n  const handleRegionChange = (regionCode: string) => {\n    onChange({\n      region: regionCode,\n      province: '',\n      city: '',\n      barangay: '',\n    });\n    setProvinces([]);\n    setCities([]);\n    setBarangays([]);\n  };\n\n  const handleProvinceChange = (provinceCode: string) => {\n    onChange({\n      ...value,\n      province: provinceCode,\n      city: '',\n      barangay: '',\n    });\n    setCities([]);\n    setBarangays([]);\n  };\n\n  const handleCityChange = (cityCode: string) => {\n    onChange({\n      ...value,\n      city: cityCode,\n      barangay: '',\n    });\n    setBarangays([]);\n  };\n\n  const handleBarangayChange = (barangayCode: string) => {\n    onChange({\n      ...value,\n      barangay: barangayCode,\n    });\n  };\n\n  // Convert data to select options\n  const regionOptions = regions.map(region => ({\n    value: region.code,\n    label: region.name,\n  }));\n\n  const provinceOptions = provinces.map(province => ({\n    value: province.code,\n    label: province.name,\n  }));\n\n  const cityOptions = cities.map(city => ({\n    value: city.code,\n    label: `${city.name} (${city.type})`,\n  }));\n\n  const barangayOptions = barangays.map(barangay => ({\n    value: barangay.code,\n    label: barangay.name,\n  }));\n\n  // Check if NCR (independent cities, no provinces)\n  const isNCR = value.region === '13' || value.region === 'NCR';\n  const showProvinceSelect = !isNCR || provinces.length > 0;\n\n  const containerClass = compact ? 'grid grid-cols-2 md:grid-cols-4 gap-3' : 'space-y-4';\n\n  return (\n    <div className={`${className}`}>\n      {showLabels && !compact && (\n        <h3 className=\"mb-4 text-lg font-medium text-primary\">\n          <span className=\"text-base\">📍</span> Address Selection\n        </h3>\n      )}\n\n      <div className={containerClass}>\n        {/* Region Selection */}\n        <DropdownSelect\n          label={showLabels ? 'Region' : undefined}\n          options={regionOptions}\n          value={value.region}\n          onChange={val => handleRegionChange(val)}\n          placeholder=\"Select Region\"\n          disabled={disabled}\n          loading={loadingRegions}\n          errorMessage={errors.region}\n        />\n\n        {/* Province Selection */}\n        {showProvinceSelect && (\n          <DropdownSelect\n            label={showLabels ? 'Province' : undefined}\n            options={provinceOptions}\n            value={value.province}\n            onChange={val => handleProvinceChange(val)}\n            placeholder={isNCR ? 'Metro Manila' : 'Select Province'}\n            disabled={disabled || !value.region}\n            loading={loadingProvinces}\n            errorMessage={errors.province}\n          />\n        )}\n\n        {/* City Selection */}\n        <DropdownSelect\n          label={showLabels ? 'City/Municipality' : undefined}\n          options={cityOptions}\n          value={value.city}\n          onChange={val => handleCityChange(val)}\n          placeholder=\"Select City/Municipality\"\n          disabled={disabled || (!isNCR ? !value.province : !value.region)}\n          loading={loadingCities}\n          errorMessage={errors.city}\n        />\n\n        {/* Barangay Selection */}\n        <DropdownSelect\n          label={showLabels ? 'Barangay' : undefined}\n          options={barangayOptions}\n          value={value.barangay}\n          onChange={val => handleBarangayChange(val)}\n          placeholder=\"Select Barangay\"\n          disabled={disabled || !value.city}\n          loading={loadingBarangays}\n          errorMessage={errors.barangay}\n        />\n      </div>\n\n      {/* Address Summary */}\n      {!compact && (value.region || value.province || value.city || value.barangay) && (\n        <div className=\"mt-4 rounded-md p-3 bg-background-muted\">\n          <h4 className=\"mb-2 text-sm font-medium text-primary\">Selected Address:</h4>\n          <div className=\"text-sm text-secondary\">\n            {[\n              regions.find(r => r.code === value.region)?.name,\n              provinces.find(p => p.code === value.province)?.name,\n              cities.find(c => c.code === value.city)?.name,\n              barangays.find(b => b.code === value.barangay)?.name,\n            ]\n              .filter(Boolean)\n              .join(', ') || 'Incomplete address'}\n          </div>\n        </div>\n      )}\n\n      {/* Coverage Info */}\n      {!compact && (\n        <div className=\"mt-4 text-xs text-muted\">\n          <span className=\"text-xs\">🗺️</span> Coverage: 17 regions, 86 provinces, 1,637 cities,\n          38,372 barangays (91% nationwide)\n        </div>\n      )}\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/AddressSelector/AddressSelector.tsx",
          "lineCount": 283,
          "cyclomaticComplexity": 33,
          "cognitiveComplexity": 51
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 322 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "AddressSelector",
          "line": 39,
          "message": "Function 'AddressSelector' has 283 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "AddressSelector",
          "line": 39,
          "complexity": 33,
          "message": "Function 'AddressSelector' has cyclomatic complexity of 33 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "AddressSelector",
          "line": 39,
          "complexity": 51,
          "message": "Function 'AddressSelector' has cognitive complexity of 51 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/AdvancedSearchBar/SearchBar/SearchBar.stories.tsx",
      "lineCount": 526,
      "functions": [
        {
          "name": "ResidentSearchComponent",
          "startLine": 165,
          "endLine": 320,
          "code": "const ResidentSearchComponent = () => {\n  const [searchResults, setSearchResults] = React.useState<any[]>([]);\n  const [isSearching, setIsSearching] = React.useState(false);\n\n  const handleSearch = (searchTerm: string, filters: SearchFilter[]) => {\n    setIsSearching(true);\n    action('resident-search')({ searchTerm, filters });\n\n    // Simulate search results\n    setTimeout(() => {\n      const mockResults = [\n        {\n          id: 1,\n          name: 'Juan dela Cruz',\n          age: 34,\n          status: 'active',\n          gender: 'male',\n          household: 'HH-001',\n        },\n        {\n          id: 2,\n          name: 'Maria Santos',\n          age: 29,\n          status: 'active',\n          gender: 'female',\n          household: 'HH-002',\n        },\n        {\n          id: 3,\n          name: 'Pedro Garcia',\n          age: 45,\n          status: 'inactive',\n          gender: 'male',\n          household: 'HH-003',\n        },\n      ];\n\n      let results = mockResults;\n\n      // Apply search term filter\n      if (searchTerm) {\n        results = results.filter(r => r.name.toLowerCase().includes(searchTerm.toLowerCase()));\n      }\n\n      // Apply additional filters\n      filters.forEach(filter => {\n        if (filter.operator === 'equals' && filter.value) {\n          results = results.filter(r => r[filter.field] === filter.value);\n        }\n        if (filter.operator === 'greater_than' && filter.value) {\n          results = results.filter(r => r[filter.field] > filter.value);\n        }\n      });\n\n      setSearchResults(results);\n      setIsSearching(false);\n    }, 1000);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"mb-3 text-lg font-semibold\">Barangay Resident Search</h3>\n        <SearchBar\n          placeholder=\"Search residents by name, household, or other criteria...\"\n          onSearch={handleSearch}\n          onClear={() => setSearchResults([])}\n          filterOptions={[\n            { field: 'name', label: 'Full Name', type: 'text' },\n            { field: 'age', label: 'Age', type: 'number' },\n            {\n              field: 'status',\n              label: 'Status',\n              type: 'select',\n              options: [\n                { value: 'active', label: 'Active' },\n                { value: 'inactive', label: 'Inactive' },\n                { value: 'pending', label: 'Pending Registration' },\n              ],\n            },\n            {\n              field: 'gender',\n              label: 'Gender',\n              type: 'select',\n              options: [\n                { value: 'male', label: 'Male' },\n                { value: 'female', label: 'Female' },\n              ],\n            },\n            {\n              field: 'civil_status',\n              label: 'Civil Status',\n              type: 'select',\n              options: [\n                { value: 'single', label: 'Single' },\n                { value: 'married', label: 'Married' },\n                { value: 'widowed', label: 'Widowed' },\n              ],\n            },\n            { field: 'household', label: 'Household Code', type: 'text' },\n          ]}\n        />\n      </div>\n\n      {/* Search Results */}\n      <div className=\"rounded-lg border border-gray-200\">\n        <div className=\"border-b border-gray-200 bg-gray-50 p-4\">\n          <h4 className=\"font-semibold text-gray-900\">\n            Search Results\n            {isSearching ? ' (Searching...)' : ` (${searchResults.length} found)`}\n          </h4>\n        </div>\n\n        <div className=\"divide-y divide-gray-200\">\n          {isSearching ? (\n            <div className=\"p-8 text-center text-gray-500\">\n              <div className=\"animate-pulse\">Searching residents...</div>\n            </div>\n          ) : searchResults.length > 0 ? (\n            searchResults.map(resident => (\n              <div key={resident.id} className=\"p-4 hover:bg-gray-50\">\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <h5 className=\"font-medium text-gray-900\">{resident.name}</h5>\n                    <div className=\"space-x-4 text-sm text-gray-600\">\n                      <span>{resident.age} years old</span>\n                      <span>•</span>\n                      <span className=\"capitalize\">{resident.gender}</span>\n                      <span>•</span>\n                      <span>Household: {resident.household}</span>\n                    </div>\n                  </div>\n                  <span\n                    className={`rounded-full px-2 py-1 text-xs ${\n                      resident.status === 'active'\n                        ? 'bg-green-100 text-green-800'\n                        : 'bg-red-100 text-red-800'\n                    }`}\n                  >\n                    {resident.status}\n                  </span>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"p-8 text-center text-gray-500\">\n              <div className=\"mb-2 text-4xl\">🔍</div>\n              <div>No residents found matching your criteria</div>\n              <div className=\"mt-1 text-sm\">Try adjusting your search or filters</div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/organisms/AdvancedSearchBar/SearchBar/SearchBar.stories.tsx",
          "lineCount": 156,
          "cyclomaticComplexity": 8,
          "cognitiveComplexity": 9
        },
        {
          "name": "render",
          "startLine": 330,
          "endLine": 331,
          "code": "  render: () => <ResidentSearchComponent />,\n};\n",
          "filePath": "src/components/organisms/AdvancedSearchBar/SearchBar/SearchBar.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 341,
          "endLine": 342,
          "code": "  render: () => (\n    <div className=\"space-y-4\">\n",
          "filePath": "src/components/organisms/AdvancedSearchBar/SearchBar/SearchBar.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 378,
          "endLine": 379,
          "code": "  render: () => (\n    <div className=\"space-y-4\">\n",
          "filePath": "src/components/organisms/AdvancedSearchBar/SearchBar/SearchBar.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 426,
          "endLine": 427,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/organisms/AdvancedSearchBar/SearchBar/SearchBar.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 488,
          "endLine": 489,
          "code": "  render: () => (\n    <div className=\"space-y-8\">\n",
          "filePath": "src/components/organisms/AdvancedSearchBar/SearchBar/SearchBar.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 526 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "ResidentSearchComponent",
          "line": 165,
          "message": "Function 'ResidentSearchComponent' has 156 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/AdvancedSearchBar/SearchBar/SearchBar.tsx",
      "lineCount": 375,
      "functions": [
        {
          "name": "onSearch",
          "startLine": 20,
          "endLine": 21,
          "code": "  onSearch: (searchTerm: string, filters: SearchFilter[]) => void;\n  onClear?: () => void;\n",
          "filePath": "src/components/organisms/AdvancedSearchBar/SearchBar/SearchBar.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "SearchBar",
          "startLine": 34,
          "endLine": 374,
          "code": "export default function SearchBar({\n  placeholder = 'Search...',\n  onSearch,\n  onClear,\n  filterOptions = [],\n  initialSearchTerm = '',\n  initialFilters = [],\n  showAdvancedFilters = false,\n  className = '',\n}: SearchBarProps) {\n  const [searchTerm, setSearchTerm] = useState(initialSearchTerm);\n  const [filters, setFilters] = useState<SearchFilter[]>(initialFilters);\n  const [showFilters, setShowFilters] = useState(showAdvancedFilters);\n  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState(searchTerm);\n\n  // Debounce search term\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedSearchTerm(searchTerm);\n    }, 300);\n\n    return () => clearTimeout(timer);\n  }, [searchTerm]);\n\n  // Trigger search when debounced term or filters change\n  useEffect(() => {\n    onSearch(debouncedSearchTerm, filters);\n  }, [debouncedSearchTerm, filters, onSearch]);\n\n  const handleAddFilter = () => {\n    if (filterOptions.length > 0) {\n      const newFilter: SearchFilter = {\n        field: filterOptions[0].field,\n        operator: 'contains',\n        value: '',\n        label: filterOptions[0].label,\n      };\n      setFilters([...filters, newFilter]);\n    }\n  };\n\n  const handleUpdateFilter = (index: number, updates: Partial<SearchFilter>) => {\n    const updatedFilters = filters.map((filter, i) =>\n      i === index ? { ...filter, ...updates } : filter\n    );\n    setFilters(updatedFilters);\n  };\n\n  const handleRemoveFilter = (index: number) => {\n    setFilters(filters.filter((_, i) => i !== index));\n  };\n\n  const handleClear = () => {\n    setSearchTerm('');\n    setFilters([]);\n    if (onClear) {\n      onClear();\n    }\n  };\n\n  const getOperatorOptions = (fieldType: string) => {\n    const baseOptions = [\n      { value: 'contains', label: 'Contains' },\n      { value: 'equals', label: 'Equals' },\n      { value: 'starts_with', label: 'Starts with' },\n      { value: 'ends_with', label: 'Ends with' },\n    ];\n\n    if (fieldType === 'number' || fieldType === 'date') {\n      return [\n        ...baseOptions,\n        { value: 'greater_than', label: 'Greater than' },\n        { value: 'less_than', label: 'Less than' },\n        { value: 'between', label: 'Between' },\n      ];\n    }\n\n    return baseOptions;\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {/* Main Search Bar */}\n      <div className=\"flex items-center gap-2\">\n        <div className=\"relative flex-1\">\n          <InputField\n            value={searchTerm}\n            onChange={e => setSearchTerm(e.target.value)}\n            placeholder={placeholder}\n            leftIcon={\n              <svg\n                className=\"size-5 text-muted\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                />\n              </svg>\n            }\n            rightIcon={\n              searchTerm && (\n                <Button\n                  onClick={() => setSearchTerm('')}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  iconOnly\n                  className=\"size-4 p-0 text-muted hover:text-secondary\"\n                >\n                  <svg className=\"size-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M6 18L18 6M6 6l12 12\"\n                    />\n                  </svg>\n                </Button>\n              )\n            }\n          />\n        </div>\n\n        {filterOptions.length > 0 && (\n          <Button\n            variant={showFilters ? 'primary' : 'secondary-outline'}\n            onClick={() => setShowFilters(!showFilters)}\n            leftIcon={\n              <svg className=\"size-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.414A1 1 0 013 6.707V4z\"\n                />\n              </svg>\n            }\n          >\n            Filters {filters.length > 0 && `(${filters.length})`}\n          </Button>\n        )}\n\n        {(searchTerm || filters.length > 0) && (\n          <Button variant=\"secondary-outline\" onClick={handleClear}>\n            Clear All\n          </Button>\n        )}\n      </div>\n\n      {/* Advanced Filters */}\n      {showFilters && filterOptions.length > 0 && (\n        <div className=\"space-y-4 rounded-lg border p-4 bg-surface-hover border-default\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-sm font-medium text-primary\">Advanced Filters</h3>\n            <Button size=\"sm\" variant=\"primary-outline\" onClick={handleAddFilter}>\n              Add Filter\n            </Button>\n          </div>\n\n          {filters.length === 0 ? (\n            <p className=\"text-sm text-muted\">\n              No filters applied. Click &quot;Add Filter&quot; to add search criteria.\n            </p>\n          ) : (\n            <div className=\"space-y-3\">\n              {filters.map((filter, index) => {\n                const fieldOption = filterOptions.find(opt => opt.field === filter.field);\n                const operatorOptions = getOperatorOptions(fieldOption?.type || 'text');\n\n                return (\n                  <div\n                    key={index}\n                    className=\"flex items-center gap-2 rounded border p-3 bg-surface border-default\"\n                  >\n                    {/* Field Selection */}\n                    <div className=\"w-40\">\n                      <DropdownSelect\n                        value={filter.field}\n                        onChange={value => {\n                          const selectedOption = filterOptions.find(opt => opt.field === value);\n                          handleUpdateFilter(index, {\n                            field: value,\n                            label: selectedOption?.label || value,\n                            value: '',\n                          });\n                        }}\n                        options={filterOptions.map(opt => ({ value: opt.field, label: opt.label }))}\n                      />\n                    </div>\n\n                    {/* Operator Selection */}\n                    <div className=\"w-32\">\n                      <DropdownSelect\n                        value={filter.operator}\n                        onChange={value =>\n                          handleUpdateFilter(index, {\n                            operator: value as SearchFilter['operator'],\n                            value: '',\n                          })\n                        }\n                        options={operatorOptions}\n                      />\n                    </div>\n\n                    {/* Value Input */}\n                    <div className=\"flex-1\">\n                      {fieldOption?.type === 'select' ? (\n                        <DropdownSelect\n                          value={filter.value.toString()}\n                          onChange={value => handleUpdateFilter(index, { value: value })}\n                          options={fieldOption.options || []}\n                          placeholder=\"Select value...\"\n                        />\n                      ) : filter.operator === 'between' ? (\n                        <div className=\"flex items-center gap-2\">\n                          <InputField\n                            type={\n                              fieldOption?.type === 'number'\n                                ? 'number'\n                                : fieldOption?.type === 'date'\n                                  ? 'date'\n                                  : 'text'\n                            }\n                            value={\n                              Array.isArray(filter.value) ? filter.value[0]?.toString() || '' : ''\n                            }\n                            onChange={e => {\n                              const currentValue = Array.isArray(filter.value)\n                                ? filter.value\n                                : ['', ''];\n                              handleUpdateFilter(index, {\n                                value: [e.target.value, currentValue[1]],\n                              });\n                            }}\n                            placeholder=\"From\"\n                          />\n                          <span className=\"text-muted\">to</span>\n                          <InputField\n                            type={\n                              fieldOption?.type === 'number'\n                                ? 'number'\n                                : fieldOption?.type === 'date'\n                                  ? 'date'\n                                  : 'text'\n                            }\n                            value={\n                              Array.isArray(filter.value) ? filter.value[1]?.toString() || '' : ''\n                            }\n                            onChange={e => {\n                              const currentValue = Array.isArray(filter.value)\n                                ? filter.value\n                                : ['', ''];\n                              handleUpdateFilter(index, {\n                                value: [currentValue[0], e.target.value],\n                              });\n                            }}\n                            placeholder=\"To\"\n                          />\n                        </div>\n                      ) : (\n                        <InputField\n                          type={\n                            fieldOption?.type === 'number'\n                              ? 'number'\n                              : fieldOption?.type === 'date'\n                                ? 'date'\n                                : 'text'\n                          }\n                          value={Array.isArray(filter.value) ? '' : filter.value.toString()}\n                          onChange={e => handleUpdateFilter(index, { value: e.target.value })}\n                          placeholder=\"Enter value...\"\n                        />\n                      )}\n                    </div>\n\n                    {/* Remove Filter Button */}\n                    <Button\n                      size=\"sm\"\n                      variant=\"danger-outline\"\n                      onClick={() => handleRemoveFilter(index)}\n                      iconOnly\n                    >\n                      <svg className=\"size-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth={2}\n                          d=\"M6 18L18 6M6 6l12 12\"\n                        />\n                      </svg>\n                    </Button>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Active Filters Summary */}\n      {filters.length > 0 && (\n        <div className=\"flex flex-wrap gap-2\">\n          {filters.map((filter, index) => (\n            <div\n              key={index}\n              className=\"inline-flex items-center gap-1 rounded-full bg-blue-100 px-3 py-1 text-sm text-blue-800\"\n            >\n              <span className=\"font-medium\">{filter.label}</span>\n              <span className=\"text-blue-600\">{filter.operator.replace('_', ' ')}</span>\n              <span className=\"font-medium\">\n                {Array.isArray(filter.value)\n                  ? `${filter.value[0]} - ${filter.value[1]}`\n                  : filter.value}\n              </span>\n              <Button\n                onClick={() => handleRemoveFilter(index)}\n                variant=\"ghost\"\n                size=\"sm\"\n                iconOnly\n                className=\"ml-1 size-3 p-0 text-blue-600 hover:text-blue-800\"\n              >\n                <svg className=\"size-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M6 18L18 6M6 6l12 12\"\n                  />\n                </svg>\n              </Button>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/AdvancedSearchBar/SearchBar/SearchBar.tsx",
          "lineCount": 341,
          "cyclomaticComplexity": 32,
          "cognitiveComplexity": 24
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 375 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "SearchBar",
          "line": 34,
          "message": "Function 'SearchBar' has 341 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "SearchBar",
          "line": 34,
          "complexity": 32,
          "message": "Function 'SearchBar' has cyclomatic complexity of 32 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "SearchBar",
          "line": 34,
          "complexity": 24,
          "message": "Function 'SearchBar' has cognitive complexity of 24 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/BarangaySelector/BarangaySelector.stories.tsx",
      "lineCount": 325,
      "functions": [
        {
          "name": "render",
          "startLine": 193,
          "endLine": 194,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/organisms/BarangaySelector/BarangaySelector.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "FormIntegrationComponent",
          "startLine": 236,
          "endLine": 272,
          "code": "const FormIntegrationComponent = () => {\n  const [selectedBarangay, setSelectedBarangay] = React.useState('');\n  const [error, setError] = React.useState('');\n\n  const handleSubmit = () => {\n    if (!selectedBarangay) {\n      setError('Please select your barangay');\n      return;\n    }\n    setError('');\n    action('form-submit')(selectedBarangay);\n    alert(`Form submitted with barangay: ${selectedBarangay}`);\n  };\n\n  return (\n    <div className=\"max-w-md space-y-4\">\n      <div>\n        <label className=\"mb-2 block text-sm font-medium text-gray-700\">Your Barangay *</label>\n        <BarangaySelector\n          value={selectedBarangay}\n          onChange={code => {\n            setSelectedBarangay(code);\n            if (error) setError(''); // Clear error when user makes selection\n          }}\n          error={error}\n          placeholder=\"Search and select your barangay\"\n        />\n      </div>\n      <button\n        onClick={handleSubmit}\n        className=\"w-full rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n      >\n        Submit\n      </button>\n    </div>\n  );\n};\n",
          "filePath": "src/components/organisms/BarangaySelector/BarangaySelector.stories.tsx",
          "lineCount": 37,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3
        },
        {
          "name": "render",
          "startLine": 283,
          "endLine": 284,
          "code": "  render: () => <FormIntegrationComponent />,\n};\n",
          "filePath": "src/components/organisms/BarangaySelector/BarangaySelector.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 294,
          "endLine": 295,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/organisms/BarangaySelector/BarangaySelector.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 325 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "FormIntegrationComponent",
          "line": 236,
          "message": "Function 'FormIntegrationComponent' has 37 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/BarangaySelector/BarangaySelector.tsx",
      "lineCount": 290,
      "functions": [
        {
          "name": "onChange",
          "startLine": 23,
          "endLine": 24,
          "code": "  onChange: (code: string) => void;\n  error?: string;\n",
          "filePath": "src/components/organisms/BarangaySelector/BarangaySelector.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "BarangaySelector",
          "startLine": 29,
          "endLine": 289,
          "code": "export default function BarangaySelector({\n  value,\n  onChange,\n  error,\n  disabled = false,\n  placeholder = 'Search for your barangay...',\n}: BarangaySelectorProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isOpen, setIsOpen] = useState(false);\n\n  const [searchResults, setSearchResults] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [selectedBarangay, setSelectedBarangay] = useState<any>(null);\n  const searchTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Fetch barangay data from API (works with or without authentication)\n  const searchBarangays = async (searchTerm: string) => {\n    if (searchTerm.length < 2) {\n      setSearchResults([]);\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setIsError(false);\n\n      // Try to get session, but don't require it\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n\n      if (session?.access_token) {\n        // Authenticated search - use API with jurisdiction filtering\n        const response = await fetch(\n          `/api/addresses/barangays?search=${encodeURIComponent(searchTerm)}`,\n          {\n            headers: {\n              Authorization: `Bearer ${session.access_token}`,\n            },\n          }\n        );\n\n        if (!response.ok) {\n          throw new Error(`HTTP ${response.status}`);\n        }\n\n        const data = await response.json();\n        setSearchResults(data.barangays || []);\n      } else {\n        // Public search - simplified direct query for reliability\n        logSearch(searchTerm, 'BarangaySelector');\n        \n        const { data, error } = await supabase\n          .from('psgc_barangays')\n          .select('code, name, city_municipality_code')\n          .ilike('name', `%${searchTerm}%`)\n          .limit(20)\n          .order('name');\n\n        if (error) {\n          logError('Public search error', { component: 'BarangaySelector', error });\n          throw error;\n        }\n\n        logDataLoad('barangays', data?.length);\n\n        // Transform to match expected format (simplified)\n        const transformedData = data?.map((item: any) => ({\n          code: item.code,\n          name: item.name,\n          city_name: 'Loading...', // Will be populated by separate queries if needed\n          province_name: 'Loading...',\n          region_name: 'Loading...',\n          full_address: `${item.name} (Code: ${item.code})`,\n        })) || [];\n\n        setSearchResults(transformedData);\n      }\n    } catch (error) {\n      console.error('Error searching barangays:', error);\n      setIsError(true);\n      setSearchResults([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Get selected barangay details\n  useEffect(() => {\n    if (value && searchResults.length > 0) {\n      const barangay = searchResults.find(b => b.code === value);\n      setSelectedBarangay(barangay);\n    } else if (!value) {\n      setSelectedBarangay(null);\n    }\n  }, [value, searchResults]);\n\n  // Transform search results to match BaseSelector format\n  const options: BarangayOption[] = (searchResults || []).map(barangay => ({\n    value: barangay.code,\n    label: barangay.name,\n    metadata: {\n      code: barangay.code,\n      name: barangay.name,\n      city_name: barangay.city_name || 'Unknown City',\n      province_name: barangay.province_name || 'Unknown Province',\n      region_name: barangay.region_name || 'Unknown Region',\n      full_address: `${barangay.name}, ${barangay.city_name || 'Unknown City'}, ${barangay.province_name || 'Unknown Province'}, ${barangay.region_name || 'Unknown Region'}`,\n    },\n  }));\n\n  // Set search term to selected barangay name when value changes\n  React.useEffect(() => {\n    if (selectedBarangay && searchTerm !== selectedBarangay.name) {\n      setSearchTerm(selectedBarangay.name);\n    }\n  }, [selectedBarangay, searchTerm]);\n\n  const handleSearchChange = (term: string) => {\n    setSearchTerm(term);\n\n    // Clear selection if user is typing and it doesn't match selected\n    if (selectedBarangay && term !== selectedBarangay.name) {\n      onChange('');\n    }\n\n    // Debounce the search\n    if (searchTimeoutRef.current) {\n      clearTimeout(searchTimeoutRef.current);\n    }\n\n    searchTimeoutRef.current = setTimeout(() => {\n      searchBarangays(term);\n    }, 300);\n  };\n\n  const handleOpenChange = (open: boolean) => {\n    setIsOpen(open);\n  };\n\n  const handleChange = (code: string) => {\n    onChange(code);\n    setIsOpen(false);\n  };\n\n  const renderOption = (option: BarangayOption, search: string) => {\n    const highlightMatch = (text: string) => {\n      if (!search.trim()) return text;\n      const regex = new RegExp(`(${search.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`, 'gi');\n      const parts = text.split(regex);\n      return parts.map((part, index) =>\n        regex.test(part) ? (\n          <mark key={`${part}-${index}`} className=\"bg-yellow-200 font-medium text-primary\">\n            {part}\n          </mark>\n        ) : (\n          part\n        )\n      );\n    };\n\n    return (\n      <div className=\"flex flex-col\">\n        <div className=\"font-medium text-primary\">{highlightMatch(option.metadata.name)}</div>\n        <div className=\"text-sm text-secondary\">\n          {highlightMatch(`${option.metadata.city_name}, ${option.metadata.province_name}`)}\n        </div>\n        <div className=\"text-muted text-xs\">{option.metadata.region_name}</div>\n      </div>\n    );\n  };\n\n  const emptyMessage = isError ? (\n    <>\n      <svg\n        className=\"text-muted mx-auto mb-2 size-8\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        viewBox=\"0 0 24 24\"\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth=\"2\"\n          d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n        />\n      </svg>\n      <p className=\"text-sm text-red-600\">Unable to load barangays</p>\n      <p className=\"mt-1 text-xs text-red-500\">Please check your connection and try again</p>\n    </>\n  ) : (\n    <>\n      <svg\n        className=\"text-muted mx-auto mb-2 size-8\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        viewBox=\"0 0 24 24\"\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth=\"2\"\n          d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n        />\n      </svg>\n      <p className=\"text-sm\">No barangays found for &quot;{searchTerm}&quot;</p>\n      <p className=\"mt-1 text-xs\">Try searching with a different term or check your spelling</p>\n    </>\n  );\n\n  const searchInstructions = (\n    <>\n      <svg\n        className=\"text-muted mx-auto mb-2 size-8\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        viewBox=\"0 0 24 24\"\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth=\"2\"\n          d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n        />\n      </svg>\n      <p className=\"text-sm\">Start typing to search barangays</p>\n      <p className=\"mt-1 text-xs\">\n        Type at least 2 characters (e.g., &quot;San&quot;, &quot;Manila&quot;, &quot;Cebu&quot;)\n      </p>\n    </>\n  );\n\n  return (\n    <div>\n      <BaseSelector\n        value={value}\n        onChange={handleChange}\n        options={options}\n        loading={isLoading}\n        error={error}\n        disabled={disabled}\n        placeholder={placeholder}\n        searchTerm={searchTerm}\n        onSearchChange={handleSearchChange}\n        isOpen={isOpen}\n        onOpenChange={handleOpenChange}\n        renderOption={renderOption}\n        emptyMessage={emptyMessage}\n        searchInstructions={searchInstructions}\n        minSearchLength={2}\n      />\n      {!error && (\n        <p className=\"text-muted mt-1 text-xs\">\n          Start typing to search by barangay name, city, or province (e.g., &quot;Poblacion&quot;,\n          &quot;Manila&quot;, &quot;Cebu City&quot;)\n        </p>\n      )}\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/BarangaySelector/BarangaySelector.tsx",
          "lineCount": 261,
          "cyclomaticComplexity": 29,
          "cognitiveComplexity": 34
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "BarangaySelector",
          "line": 29,
          "message": "Function 'BarangaySelector' has 261 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "BarangaySelector",
          "line": 29,
          "complexity": 29,
          "message": "Function 'BarangaySelector' has cyclomatic complexity of 29 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "BarangaySelector",
          "line": 29,
          "complexity": 34,
          "message": "Function 'BarangaySelector' has cognitive complexity of 34 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/CreateHouseholdModal/CreateHouseholdModal.stories.tsx",
      "lineCount": 479,
      "functions": [
        {
          "name": "withMockAuth",
          "startLine": 59,
          "endLine": 66,
          "code": "const withMockAuth = (Story: any) => {\n  return (\n    <div>\n      {/* Mock auth context would be provided here in real implementation */}\n      <Story />\n    </div>\n  );\n};\n",
          "filePath": "src/components/organisms/CreateHouseholdModal/CreateHouseholdModal.stories.tsx",
          "lineCount": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 155,
          "endLine": 238,
          "code": "  render: () => {\n    const [currentModal, setCurrentModal] = React.useState<string | null>(null);\n\n    const locations = [\n      {\n        id: 'makati',\n        name: 'Makati City Location',\n        context: {\n          region: 'National Capital Region (NCR)',\n          province: 'Metro Manila',\n          cityMunicipality: 'Makati City (City)',\n          barangay: 'San Lorenzo',\n          code: '042109001',\n        },\n      },\n      {\n        id: 'quezon',\n        name: 'Quezon City Location',\n        context: {\n          region: 'National Capital Region (NCR)',\n          province: 'Metro Manila',\n          cityMunicipality: 'Quezon City (City)',\n          barangay: 'Bagumbayan',\n          code: '174212001',\n        },\n      },\n      {\n        id: 'cebu',\n        name: 'Cebu Province Location',\n        context: {\n          region: 'Central Visayas (Region VII)',\n          province: 'Cebu',\n          cityMunicipality: 'Cebu City (City)',\n          barangay: 'Lahug',\n          code: '071234001',\n        },\n      },\n    ];\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n          {locations.map(location => (\n            <div key={location.id} className=\"rounded-lg border border-gray-200 p-4\">\n              <h3 className=\"mb-2 font-semibold text-gray-900\">{location.name}</h3>\n              <div className=\"mb-3 space-y-1 text-sm text-gray-600\">\n                <div>\n                  <strong>Region:</strong> {location.context.region}\n                </div>\n                <div>\n                  <strong>Province:</strong> {location.context.province}\n                </div>\n                <div>\n                  <strong>City:</strong> {location.context.cityMunicipality}\n                </div>\n                <div>\n                  <strong>Barangay:</strong> {location.context.barangay}\n                </div>\n                <div className=\"text-xs text-gray-500\">Code: {location.context.code}</div>\n              </div>\n              <button\n                onClick={() => setCurrentModal(location.id)}\n                className=\"w-full rounded bg-blue-600 px-3 py-2 text-sm text-white hover:bg-blue-700\"\n              >\n                Create Household Here\n              </button>\n            </div>\n          ))}\n        </div>\n\n        {locations.map(location => (\n          <CreateHouseholdModal\n            key={location.id}\n            isOpen={currentModal === location.id}\n            onClose={() => setCurrentModal(null)}\n            onHouseholdCreated={code => {\n              action('household-created')(code, location.context);\n              setCurrentModal(null);\n            }}\n          />\n        ))}\n      </div>\n    );\n  },\n",
          "filePath": "src/components/organisms/CreateHouseholdModal/CreateHouseholdModal.stories.tsx",
          "lineCount": 84,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 249,
          "endLine": 282,
          "code": "  render: () => {\n    const [isOpen, setIsOpen] = React.useState(true);\n\n    return (\n      <div className=\"space-y-4\">\n        <CreateHouseholdModal\n          isOpen={isOpen}\n          onClose={() => setIsOpen(false)}\n          onHouseholdCreated={code => {\n            action('household-created')(code);\n            setIsOpen(false);\n          }}\n        />\n\n        {!isOpen && (\n          <div className=\"text-center\">\n            <button\n              onClick={() => setIsOpen(true)}\n              className=\"rounded bg-blue-600 px-4 py-2 text-white hover:bg-blue-700\"\n            >\n              Reopen Modal\n            </button>\n            <div className=\"mt-4 rounded border border-yellow-200 bg-yellow-50 p-4 text-left\">\n              <h4 className=\"mb-2 font-semibold text-yellow-800\">Form Validation Demo</h4>\n              <p className=\"text-sm text-yellow-700\">\n                Try submitting the form without filling in the required \"Street Name\" field to see\n                validation in action.\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  },\n",
          "filePath": "src/components/organisms/CreateHouseholdModal/CreateHouseholdModal.stories.tsx",
          "lineCount": 34,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "render",
          "startLine": 319,
          "endLine": 381,
          "code": "  render: () => {\n    const [currentDemo, setCurrentDemo] = React.useState<'initial' | 'submitting' | 'success'>(\n      'initial'\n    );\n    const [isOpen, setIsOpen] = React.useState(true);\n\n    const handleSubmit = async () => {\n      setCurrentDemo('submitting');\n\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      setCurrentDemo('success');\n\n      // Auto close after success\n      setTimeout(() => {\n        setIsOpen(false);\n        setCurrentDemo('initial');\n      }, 1500);\n    };\n\n    return (\n      <div className=\"space-y-4\">\n        <CreateHouseholdModal\n          isOpen={isOpen}\n          onClose={() => {\n            setIsOpen(false);\n            setCurrentDemo('initial');\n          }}\n          onHouseholdCreated={code => {\n            action('household-created')(code);\n            handleSubmit();\n          }}\n        />\n\n        {!isOpen && (\n          <div className=\"space-y-4 text-center\">\n            <button\n              onClick={() => setIsOpen(true)}\n              className=\"rounded bg-blue-600 px-4 py-2 text-white hover:bg-blue-700\"\n            >\n              Try Loading States Demo\n            </button>\n\n            <div className=\"rounded border border-blue-200 bg-blue-50 p-4 text-left\">\n              <h4 className=\"mb-2 font-semibold text-blue-800\">Loading States Demo</h4>\n              <div className=\"space-y-2 text-sm text-blue-700\">\n                <p>\n                  <strong>1. Initial:</strong> Form ready for input\n                </p>\n                <p>\n                  <strong>2. Submitting:</strong> Shows loading spinner and disabled inputs\n                </p>\n                <p>\n                  <strong>3. Success:</strong> Confirmation and auto-close\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  },\n",
          "filePath": "src/components/organisms/CreateHouseholdModal/CreateHouseholdModal.stories.tsx",
          "lineCount": 63,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "render",
          "startLine": 392,
          "endLine": 477,
          "code": "  render: () => {\n    const [selectedScenario, setSelectedScenario] = React.useState<string | null>(null);\n\n    const scenarios = [\n      {\n        id: 'subdivision',\n        title: 'Subdivision Address',\n        description: 'Creating household in a gated subdivision',\n        example: {\n          houseNumber: 'Block 5 Lot 12',\n          streetName: 'San Lorenzo Street',\n          subdivision: 'Greenview Subdivision',\n          zipCode: '1223',\n        },\n      },\n      {\n        id: 'rural',\n        title: 'Rural/Zone Address',\n        description: 'Creating household in rural area with zone system',\n        example: {\n          houseNumber: '',\n          streetName: 'Maharlika Highway',\n          subdivision: 'Zone 3, Purok 2',\n          zipCode: '',\n        },\n      },\n      {\n        id: 'urban',\n        title: 'Urban Street Address',\n        description: 'Creating household on regular city street',\n        example: {\n          houseNumber: '#123',\n          streetName: 'Rizal Avenue',\n          subdivision: '',\n          zipCode: '1000',\n        },\n      },\n    ];\n\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n          {scenarios.map(scenario => (\n            <div key={scenario.id} className=\"rounded-lg border border-gray-200 p-4\">\n              <h3 className=\"mb-2 font-semibold text-gray-900\">{scenario.title}</h3>\n              <p className=\"mb-3 text-sm text-gray-600\">{scenario.description}</p>\n\n              <div className=\"mb-3 space-y-1 text-xs text-gray-500\">\n                <div>\n                  <strong>House:</strong> {scenario.example.houseNumber || 'None'}\n                </div>\n                <div>\n                  <strong>Street:</strong> {scenario.example.streetName}\n                </div>\n                <div>\n                  <strong>Subdivision:</strong> {scenario.example.subdivision || 'None'}\n                </div>\n                <div>\n                  <strong>ZIP:</strong> {scenario.example.zipCode || 'None'}\n                </div>\n              </div>\n\n              <button\n                onClick={() => setSelectedScenario(scenario.id)}\n                className=\"w-full rounded bg-green-600 px-3 py-2 text-sm text-white hover:bg-green-700\"\n              >\n                Try This Scenario\n              </button>\n            </div>\n          ))}\n        </div>\n\n        {scenarios.map(scenario => (\n          <CreateHouseholdModal\n            key={scenario.id}\n            isOpen={selectedScenario === scenario.id}\n            onClose={() => setSelectedScenario(null)}\n            onHouseholdCreated={code => {\n              action('household-created')(code, scenario);\n              setSelectedScenario(null);\n            }}\n          />\n        ))}\n      </div>\n    );\n  },\n",
          "filePath": "src/components/organisms/CreateHouseholdModal/CreateHouseholdModal.stories.tsx",
          "lineCount": 86,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 3
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 479 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 155,
          "message": "Function 'render' has 84 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 249,
          "message": "Function 'render' has 34 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 319,
          "message": "Function 'render' has 63 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 392,
          "message": "Function 'render' has 86 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/CreateHouseholdModal/CreateHouseholdModal.tsx",
      "lineCount": 566,
      "functions": [
        {
          "name": "onClose",
          "startLine": 14,
          "endLine": 15,
          "code": "  onClose: () => void;\n  onHouseholdCreated: (householdCode: string) => void;\n",
          "filePath": "src/components/organisms/CreateHouseholdModal/CreateHouseholdModal.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "CreateHouseholdModal",
          "startLine": 60,
          "endLine": 565,
          "code": "export default function CreateHouseholdModal({\n  isOpen,\n  onClose,\n  onHouseholdCreated,\n}: CreateHouseholdModalProps) {\n  const { userProfile } = useAuth();\n  const [formData, setFormData] = useState<HouseholdFormData>({\n    house_number: '',\n    street_id: '',\n    subdivision_id: '',\n  });\n  const [errors, setErrors] = useState<Partial<Record<keyof HouseholdFormData, string>>>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleInputChange = (field: keyof HouseholdFormData, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: undefined }));\n    }\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Partial<Record<keyof HouseholdFormData, string>> = {};\n\n    if (!formData.street_id.trim()) {\n      newErrors.street_id = 'Street is required';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const generateHouseholdCode = async (): Promise<string> => {\n    // Generate PSGC-compliant household code: RRPPMMBBB-SSSS-TTTT-HHHH\n    const barangayCode = userProfile?.barangay_code || '000000000';\n\n    // Get next household sequence number for this barangay\n    const { count } = await supabase\n      .from('households')\n      .select('*', { count: 'exact', head: true })\n      .eq('barangay_code', barangayCode);\n\n    const nextSequence = (count || 0) + 1;\n\n    // Format: RRPPMMBBB-SSSS-TTTT-HHHH\n    // RRPPMMBBB = Full barangay code (9 digits)\n    // SSSS = Subdivision (0000 = no subdivision)\n    // TTTT = Street (0001 = default street)\n    // HHHH = House sequence number\n    return `${barangayCode}-0000-0001-${nextSequence.toString().padStart(4, '0')}`;\n  };\n\n  const deriveGeographicCodes = (barangayCode: string) => {\n    // Extract geographic codes from barangay code\n    // Format: RRPPCCBBB where RR=region, PP=province, CC=city/municipality, BBB=barangay\n    if (barangayCode.length !== 9) return null;\n\n    const regionCode = barangayCode.substring(0, 2); // Just the first 2 digits\n    const provinceCode = barangayCode.substring(0, 4); // First 4 digits\n    const cityMunicipalityCode = barangayCode.substring(0, 6); // First 6 digits\n\n    return {\n      region_code: regionCode,\n      province_code: provinceCode,\n      city_municipality_code: cityMunicipalityCode,\n    };\n  };\n\n  const [addressDisplayInfo, setAddressDisplayInfo] = useState({\n    region: 'Loading...',\n    province: 'Loading...',\n    cityMunicipality: 'Loading...',\n    barangay: 'Loading...',\n  });\n\n  // Load address display info from database\n  const loadAddressDisplayInfo = async (barangayCode: string) => {\n    try {\n      logger.debug('Loading address display info', { barangayCode });\n\n      // Query the PSGC tables to get full address hierarchy\n      const { data: barangayData, error } = await supabase\n        .from('psgc_barangays')\n        .select(\n          `\n          name,\n          psgc_cities_municipalities!inner(\n            name,\n            type,\n            psgc_provinces!inner(\n              name,\n              psgc_regions!inner(\n                name\n              )\n            )\n          )\n        `\n        )\n        .eq('code', barangayCode)\n        .single();\n\n      if (error) {\n        logger.error('Error loading address display info', { error, barangayCode });\n        setAddressDisplayInfo({\n          region: 'Region information not available',\n          province: 'Province information not available',\n          cityMunicipality: 'City/Municipality information not available',\n          barangay: `Barangay ${barangayCode}`,\n        });\n        return;\n      }\n\n      if (barangayData) {\n        const cityMun = (barangayData as unknown as BarangayData).psgc_cities_municipalities;\n        const province = cityMun.psgc_provinces;\n        const region = province.psgc_regions;\n\n        setAddressDisplayInfo({\n          region: region.name,\n          province: province.name,\n          cityMunicipality: `${cityMun.name} (${cityMun.type})`,\n          barangay: barangayData.name,\n        });\n        logger.debug('Loaded address display info from database');\n      }\n    } catch (error) {\n      logError(error as Error, 'ADDRESS_INFO_LOAD_ERROR');\n      setAddressDisplayInfo({\n        region: 'Region information not available',\n        province: 'Province information not available',\n        cityMunicipality: 'City/Municipality information not available',\n        barangay: `Barangay ${barangayCode}`,\n      });\n    }\n  };\n\n  // Load address info when userProfile changes\n  useEffect(() => {\n    if (userProfile?.barangay_code) {\n      loadAddressDisplayInfo(userProfile.barangay_code);\n    }\n  }, [userProfile?.barangay_code]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    if (!userProfile?.barangay_code) {\n      alert('Unable to create household: No barangay assignment found');\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      logger.info('Creating household', { barangayCode: userProfile.barangay_code });\n\n      // Try to get address hierarchy info, fallback to direct table queries if view doesn't exist\n      let addressInfo: AddressHierarchy | null = null;\n\n      try {\n        logger.debug('Attempting to query psgc_address_hierarchy view');\n        const { data, error } = await supabase\n          .from('psgc_address_hierarchy')\n          .select('*')\n          .eq('barangay_code', userProfile.barangay_code)\n          .single();\n\n        if (error) {\n          logger.debug('View query error', { error });\n        } else {\n          logger.debug('View query successful', { hasData: !!data });\n          addressInfo = data;\n        }\n      } catch (viewError) {\n        logger.debug('Address hierarchy view not available, using direct queries', {\n          error: viewError,\n        });\n      }\n\n      // If view query failed, get address info from individual tables\n      if (!addressInfo) {\n        logger.debug('Using fallback query to get address info');\n        try {\n          // Get barangay info with related geographic data\n          const { data: barangayData, error: barangayError } = await supabase\n            .from('psgc_barangays')\n            .select(\n              `\n              code,\n              name,\n              city_municipality_code,\n              psgc_cities_municipalities!inner(\n                code,\n                name,\n                type,\n                province_code,\n                psgc_provinces!inner(\n                  code,\n                  name,\n                  region_code,\n                  psgc_regions!inner(\n                    code,\n                    name\n                  )\n                )\n              )\n            `\n            )\n            .eq('code', userProfile.barangay_code)\n            .single();\n\n          if (barangayError) {\n            logger.error('Error fetching barangay info', { error: barangayError });\n            logger.debug('Fallback query failed, will use minimal data approach');\n            // Don't return here, let it fall through to minimal data approach\n          }\n\n          if (barangayData && !barangayError) {\n            logger.debug('Fallback query successful', { hasData: !!barangayData });\n\n            // Map the data to match expected format\n            const cityMun = (barangayData as unknown as BarangayData).psgc_cities_municipalities;\n            const province = cityMun.psgc_provinces;\n            const region = province.psgc_regions;\n\n            addressInfo = {\n              barangay_code: barangayData.code,\n              barangay_name: barangayData.name,\n              city_municipality_code: cityMun.code,\n              city_municipality_name: cityMun.name,\n              city_municipality_type: cityMun.type,\n              province_code: province.code,\n              province_name: province.name,\n              region_code: region.code,\n              region_name: region.name,\n            };\n          }\n        } catch (fallbackError) {\n          logError(fallbackError as Error, 'FALLBACK_ADDRESS_QUERY_ERROR');\n        }\n      }\n\n      // If both queries failed, use minimal data approach\n      if (!addressInfo) {\n        logger.debug('Creating household with minimal data - no PSGC lookup needed');\n\n        // Final fallback - derive geographic codes from barangay code\n        const derivedCodes = deriveGeographicCodes(userProfile.barangay_code);\n        addressInfo = {\n          barangay_code: userProfile.barangay_code,\n          region_code: derivedCodes?.region_code || null,\n          province_code: derivedCodes?.province_code || null,\n          city_municipality_code: derivedCodes?.city_municipality_code || null,\n        };\n        logger.debug('Using minimal fallback data', { addressInfo });\n      }\n\n      logger.debug('Final address info', { addressInfo });\n\n      // Debug: Check current user and auth state\n      const {\n        data: { user },\n      } = await supabase.auth.getUser();\n      logger.debug('Authentication state', {\n        userId: user?.id,\n        profileId: userProfile.id,\n        barangayCode: userProfile.barangay_code,\n        authMatch: user?.id === userProfile.id,\n      });\n\n      // Test RLS policy by checking if user can query their own profile\n      const { data: testProfile, error: testProfileError } = await supabase\n        .from('auth_user_profiles')\n        .select('id, barangay_code, is_active, role_id')\n        .eq('id', user?.id)\n        .single();\n\n      logger.debug('User profile data', { hasProfile: !!testProfile, error: testProfileError });\n\n      // Check if user has proper role\n      if (testProfile?.role_id) {\n        const { data: roleData, error: roleError } = await supabase\n          .from('auth_roles')\n          .select('id, name')\n          .eq('id', testProfile.role_id)\n          .single();\n\n        logger.debug('User role data', { hasRole: !!roleData, error: roleError });\n      }\n\n      // Fix: If user is not active, make them active\n      if (testProfile && testProfile.is_active !== true) {\n        logger.info('User is not active, updating profile to active status');\n        const { error: updateError } = await supabase\n          .from('auth_user_profiles')\n          .update({ is_active: true })\n          .eq('id', user?.id);\n\n        if (updateError) {\n          logger.error('Failed to activate user', { error: updateError });\n        } else {\n          logger.info('User successfully activated');\n        }\n      }\n\n      // Use the actual user's barangay_code from the real profile data\n      const actualBarangayCode = testProfile?.barangay_code || userProfile.barangay_code;\n\n      // Derive geographic codes for the user's actual barangay\n      const actualDerivedCodes = deriveGeographicCodes(actualBarangayCode);\n      logger.debug('Derived geographic codes', { codes: actualDerivedCodes });\n\n      // Use the selected street and subdivision IDs directly\n      const streetId = formData.street_id;\n      const subdivisionId = formData.subdivision_id || null;\n\n      // Generate PSGC-compliant household code\n      const householdCode = await generateHouseholdCode();\n\n      // Create household record with proper schema fields\n      const householdData = {\n        code: householdCode,\n        house_number: formData.house_number.trim() || '1', // Default to '1' if empty since it's required\n        street_id: streetId, // Required UUID reference\n        subdivision_id: subdivisionId, // Optional UUID reference\n        barangay_code: actualBarangayCode,\n        city_municipality_code: actualDerivedCodes?.city_municipality_code,\n        province_code: actualDerivedCodes?.province_code,\n        region_code: actualDerivedCodes?.region_code,\n        created_by: userProfile.id,\n      };\n\n      logger.info('Creating household with data', { householdCode: householdData.code });\n\n      const { data, error } = await supabase\n        .from('households')\n        .insert([householdData])\n        .select('code, barangay_code, house_number')\n        .single();\n\n      if (error) {\n        logger.error('Error creating household', { error });\n        alert(`Failed to create household: ${error.message}`);\n        return;\n      }\n\n      logger.info('Household created successfully', { householdCode: data.code });\n      onHouseholdCreated(data.code);\n      onClose();\n\n      // Reset form\n      setFormData({\n        house_number: '',\n        street_id: '',\n        subdivision_id: '',\n      });\n      setErrors({});\n    } catch (error) {\n      logError(error as Error, 'HOUSEHOLD_CREATION_ERROR');\n      alert('An unexpected error occurred. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleClose = () => {\n    if (!isSubmitting) {\n      onClose();\n      // Reset form when closing\n      setFormData({\n        house_number: '',\n        street_id: '',\n        subdivision_id: '',\n      });\n      setErrors({});\n    }\n  };\n\n  return (\n    <AccessibleModal\n      isOpen={isOpen}\n      onClose={handleClose}\n      title=\"Create New Household\"\n      description=\"Create a new household for this resident in your assigned barangay\"\n      size=\"md\"\n      closeOnEscape={!isSubmitting}\n      closeOnBackdropClick={!isSubmitting}\n      showCloseButton={!isSubmitting}\n      footer={\n        <div className=\"flex gap-3\">\n          <Button\n            type=\"button\"\n            onClick={handleClose}\n            disabled={isSubmitting}\n            variant=\"neutral\"\n            size=\"regular\"\n            fullWidth\n          >\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            form=\"household-form\"\n            disabled={isSubmitting}\n            loading={isSubmitting}\n            variant=\"primary\"\n            size=\"regular\"\n            fullWidth\n          >\n            Create Household\n          </Button>\n        </div>\n      }\n    >\n      {/* Address Info Display */}\n      <div className=\"mb-6 border-b border-green-200 bg-green-50 p-4 -m-4\">\n        <div className=\"flex items-start gap-3\">\n          <span className=\"mt-0.5 text-green-600\">📍</span>\n          <div>\n            <h5 className=\"mb-2 font-medium text-green-800\">Household Location</h5>\n            <div className=\"space-y-1 text-sm text-green-700\">\n              <div>\n                <strong>Region:</strong> {addressDisplayInfo.region}\n              </div>\n              <div>\n                <strong>Province:</strong> {addressDisplayInfo.province}\n              </div>\n              <div>\n                <strong>City/Municipality:</strong> {addressDisplayInfo.cityMunicipality}\n              </div>\n              <div>\n                <strong>Barangay:</strong> {addressDisplayInfo.barangay}\n              </div>\n              <div className=\"mt-1 text-xs text-neutral-500\">\n                Code: {userProfile?.barangay_code}\n              </div>\n              <div className=\"mt-2 text-xs text-green-600\">\n                All household geographic details are auto-populated from your barangay assignment.\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Form */}\n      <form id=\"household-form\" onSubmit={handleSubmit} className=\"space-y-4\">\n        {/* House Number */}\n        <div>\n          <label htmlFor=\"house-number\" className=\"font-montserrat mb-2 block text-sm font-medium text-neutral-700\">\n            House/Block/Lot Number\n          </label>\n          <input\n            id=\"house-number\"\n            type=\"text\"\n            value={formData.house_number}\n            onChange={e => handleInputChange('house_number', e.target.value)}\n            placeholder=\"e.g., Blk 1 Lot 5, #123\"\n            className=\"font-montserrat w-full rounded border border-neutral-300 px-3 py-2 text-base focus:border-transparent focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            disabled={isSubmitting}\n          />\n        </div>\n\n        {/* Subdivision */}\n        <div>\n          <label className=\"font-montserrat mb-2 block text-sm font-medium text-neutral-700\">\n            Subdivision/Zone/Sitio/Purok\n          </label>\n          <SubdivisionSelector\n            value={formData.subdivision_id}\n            onSelect={(subdivisionId) => handleInputChange('subdivision_id', subdivisionId || '')}\n            error={errors.subdivision_id}\n            placeholder=\"🏘️ Select subdivision or create new\"\n          />\n        </div>\n\n        {/* Street Name */}\n        <div>\n          <label className=\"font-montserrat mb-2 block text-sm font-medium text-neutral-700\">\n            Street Name *\n          </label>\n          <StreetSelector\n            value={formData.street_id}\n            onSelect={(streetId) => handleInputChange('street_id', streetId || '')}\n            error={errors.street_id}\n            placeholder=\"🛣️ Select street or create new\"\n            subdivisionId={formData.subdivision_id || null}\n          />\n        </div>\n\n\n        {/* Info Note */}\n        <div className=\"rounded border border-blue-200 bg-blue-50 p-4\">\n          <p className=\"font-montserrat text-sm text-blue-800\">\n            <strong>Note:</strong> This household will be created in your assigned barangay. You\n            can assign a resident as the household head after creating the household.\n          </p>\n        </div>\n      </form>\n    </AccessibleModal>\n  );\n}\n",
          "filePath": "src/components/organisms/CreateHouseholdModal/CreateHouseholdModal.tsx",
          "lineCount": 506,
          "cyclomaticComplexity": 38,
          "cognitiveComplexity": 54
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 566 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "CreateHouseholdModal",
          "line": 60,
          "message": "Function 'CreateHouseholdModal' has 506 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "CreateHouseholdModal",
          "line": 60,
          "complexity": 38,
          "message": "Function 'CreateHouseholdModal' has cyclomatic complexity of 38 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "CreateHouseholdModal",
          "line": 60,
          "complexity": 54,
          "message": "Function 'CreateHouseholdModal' has cognitive complexity of 54 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/DataTable/DataTable.stories.tsx",
      "lineCount": 556,
      "functions": [
        {
          "name": "render",
          "startLine": 138,
          "endLine": 151,
          "code": "    render: (value: string) => {\n      const statusColors = {\n        active: 'bg-green-100 text-green-800',\n        inactive: 'bg-gray-100 text-gray-800',\n        pending: 'bg-yellow-100 text-yellow-800',\n      };\n      return (\n        <span\n          className={`rounded-full px-2 py-1 text-xs font-medium ${statusColors[value as keyof typeof statusColors]}`}\n        >\n          {value.charAt(0).toUpperCase() + value.slice(1)}\n        </span>\n      );\n    },\n",
          "filePath": "src/components/organisms/DataTable/DataTable.stories.tsx",
          "lineCount": 14,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 158,
          "endLine": 159,
          "code": "    render: (value: string) => new Date(value).toLocaleDateString(),\n    sortable: true,\n",
          "filePath": "src/components/organisms/DataTable/DataTable.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onClick",
          "startLine": 167,
          "endLine": 168,
          "code": "    onClick: (record: UserData) => action('edit-user')(record),\n    variant: 'primary' as const,\n",
          "filePath": "src/components/organisms/DataTable/DataTable.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onClick",
          "startLine": 173,
          "endLine": 174,
          "code": "    onClick: (record: UserData) => action('delete-user')(record),\n    variant: 'danger' as const,\n",
          "filePath": "src/components/organisms/DataTable/DataTable.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "visible",
          "startLine": 175,
          "endLine": 176,
          "code": "    visible: (record: UserData) => record.status !== 'active',\n  },\n",
          "filePath": "src/components/organisms/DataTable/DataTable.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "href",
          "startLine": 180,
          "endLine": 181,
          "code": "    href: (record: UserData) => `/users/${record.id}`,\n    variant: 'secondary' as const,\n",
          "filePath": "src/components/organisms/DataTable/DataTable.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "getCheckboxProps",
          "startLine": 222,
          "endLine": 224,
          "code": "      getCheckboxProps: (record: UserData) => ({\n        disabled: record.status === 'pending',\n      }),\n",
          "filePath": "src/components/organisms/DataTable/DataTable.stories.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 302,
          "endLine": 303,
          "code": "  render: () => (\n    <div className=\"space-y-8\">\n",
          "filePath": "src/components/organisms/DataTable/DataTable.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 329,
          "endLine": 330,
          "code": "        render: (_, record: UserData) => (\n          <div className=\"flex items-center space-x-3\">\n",
          "filePath": "src/components/organisms/DataTable/DataTable.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 348,
          "endLine": 349,
          "code": "        render: (_, record: UserData) => (\n          <div>\n",
          "filePath": "src/components/organisms/DataTable/DataTable.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 369,
          "endLine": 370,
          "code": "        render: (_, record: UserData) => (\n          <div className=\"text-sm\">\n",
          "filePath": "src/components/organisms/DataTable/DataTable.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onRow",
          "startLine": 410,
          "endLine": 413,
          "code": "    onRow: (record: UserData) => ({\n      onClick: () => action('row-clicked')(record),\n      className: 'cursor-pointer hover:bg-blue-50',\n    }),\n",
          "filePath": "src/components/organisms/DataTable/DataTable.stories.tsx",
          "lineCount": 4,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 433,
          "endLine": 554,
          "code": "  render: () => {\n    const residents = [\n      {\n        id: '1',\n        fullName: 'Juan Carlos dela Cruz',\n        age: 34,\n        gender: 'Male',\n        civilStatus: 'Married',\n        occupation: 'Barangay Captain',\n        household: 'HH-001',\n        status: 'active',\n      },\n      {\n        id: '2',\n        fullName: 'Maria Esperanza Santos',\n        age: 29,\n        gender: 'Female',\n        civilStatus: 'Single',\n        occupation: 'Teacher',\n        household: 'HH-002',\n        status: 'active',\n      },\n      {\n        id: '3',\n        fullName: 'Pedro Antonio Rodriguez',\n        age: 45,\n        gender: 'Male',\n        civilStatus: 'Married',\n        occupation: 'Tricycle Driver',\n        household: 'HH-003',\n        status: 'inactive',\n      },\n    ];\n\n    const residentColumns = [\n      {\n        key: 'fullName',\n        title: 'Full Name',\n        dataIndex: 'fullName' as keyof (typeof residents)[0],\n        sortable: true,\n      },\n      {\n        key: 'demographics',\n        title: 'Demographics',\n        render: (_, record: (typeof residents)[0]) => (\n          <div className=\"text-sm\">\n            <div>\n              {record.age} years old, {record.gender}\n            </div>\n            <div className=\"text-gray-500\">{record.civilStatus}</div>\n          </div>\n        ),\n      },\n      {\n        key: 'occupation',\n        title: 'Occupation',\n        dataIndex: 'occupation' as keyof (typeof residents)[0],\n        sortable: true,\n      },\n      {\n        key: 'household',\n        title: 'Household',\n        dataIndex: 'household' as keyof (typeof residents)[0],\n        render: (value: string) => (\n          <span className=\"rounded bg-gray-100 px-2 py-1 font-mono text-sm\">{value}</span>\n        ),\n      },\n      {\n        key: 'status',\n        title: 'Status',\n        dataIndex: 'status' as keyof (typeof residents)[0],\n        render: (value: string) => (\n          <span\n            className={`rounded-full px-2 py-1 text-xs font-medium ${\n              value === 'active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n            }`}\n          >\n            {value.charAt(0).toUpperCase() + value.slice(1)}\n          </span>\n        ),\n      },\n    ];\n\n    const residentActions = [\n      {\n        key: 'edit',\n        label: 'Edit',\n        onClick: (record: (typeof residents)[0]) => action('edit-resident')(record),\n        variant: 'primary' as const,\n      },\n      {\n        key: 'household',\n        label: 'View Household',\n        href: (record: (typeof residents)[0]) => `/households/${record.household}`,\n        variant: 'secondary' as const,\n      },\n      {\n        key: 'deactivate',\n        label: record => (record.status === 'active' ? 'Deactivate' : 'Activate'),\n        onClick: (record: (typeof residents)[0]) => action('toggle-status')(record),\n        variant: 'warning' as const,\n      },\n    ];\n\n    return (\n      <DataTable\n        data={residents}\n        columns={residentColumns}\n        actions={residentActions}\n        selection={{\n          selectedRowKeys: [],\n          onChange: action('residents-selection-changed'),\n        }}\n        pagination={{\n          current: 1,\n          pageSize: 5,\n          total: residents.length,\n          onChange: action('residents-page-changed'),\n        }}\n      />\n    );\n  },\n",
          "filePath": "src/components/organisms/DataTable/DataTable.stories.tsx",
          "lineCount": 122,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 2
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 556 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 433,
          "message": "Function 'render' has 122 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/DataTable/DataTable.tsx",
      "lineCount": 408,
      "functions": [
        {
          "name": "onChange",
          "startLine": 37,
          "endLine": 38,
          "code": "    onChange: (page: number, pageSize: number) => void;\n    showSizeChanger?: boolean;\n",
          "filePath": "src/components/organisms/DataTable/DataTable.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "onChange",
          "startLine": 43,
          "endLine": 44,
          "code": "    onChange: (selectedRowKeys: string[], selectedRows: T[]) => void;\n    getCheckboxProps?: (record: T) => { disabled?: boolean };\n",
          "filePath": "src/components/organisms/DataTable/DataTable.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "DataTable",
          "startLine": 60,
          "endLine": 407,
          "code": "export default function DataTable<T extends Record<string, any>>({\n  data,\n  columns,\n  actions = [],\n  loading = false,\n  pagination,\n  selection,\n  rowKey = 'id',\n  onRow,\n  emptyText = 'No data available',\n  className = '',\n  size = 'middle',\n}: DataTableProps<T>) {\n  const [sortField, setSortField] = useState<string>('');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\n\n  // Get row key\n  const getRowKey = (record: T, index: number): string => {\n    if (typeof rowKey === 'function') {\n      return rowKey(record);\n    }\n    return record[rowKey]?.toString() || index.toString();\n  };\n\n  // Handle sorting\n  const handleSort = (columnKey: string) => {\n    if (sortField === columnKey) {\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(columnKey);\n      setSortOrder('asc');\n    }\n  };\n\n  // Sort data\n  const sortedData = useMemo(() => {\n    if (!sortField) return data;\n\n    return [...data].sort((a, b) => {\n      const column = columns.find(col => col.key === sortField);\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (column?.dataIndex && typeof column.dataIndex === 'function') {\n        aValue = column.dataIndex(a);\n        bValue = column.dataIndex(b);\n      } else if (column?.dataIndex && typeof column.dataIndex === 'string') {\n        aValue = a[column.dataIndex];\n        bValue = b[column.dataIndex];\n      }\n\n      // Handle null/undefined values\n      if (aValue == null && bValue == null) return 0;\n      if (aValue == null) return sortOrder === 'asc' ? 1 : -1;\n      if (bValue == null) return sortOrder === 'asc' ? -1 : 1;\n\n      // Convert to strings for comparison\n      const aStr = aValue.toString().toLowerCase();\n      const bStr = bValue.toString().toLowerCase();\n\n      if (aStr < bStr) return sortOrder === 'asc' ? -1 : 1;\n      if (aStr > bStr) return sortOrder === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }, [data, sortField, sortOrder, columns]);\n\n  // Handle select all\n  const handleSelectAll = (checked: boolean) => {\n    if (!selection) return;\n\n    if (checked) {\n      const allKeys = sortedData.map((record, index) => getRowKey(record, index));\n      selection.onChange(allKeys, sortedData);\n    } else {\n      selection.onChange([], []);\n    }\n  };\n\n  // Handle single row selection\n  const handleRowSelect = (record: T, index: number, checked: boolean) => {\n    if (!selection) return;\n\n    const rowKeyValue = getRowKey(record, index);\n    let newSelectedKeys = [...selection.selectedRowKeys];\n    let newSelectedRows = sortedData.filter((item, idx) =>\n      selection.selectedRowKeys.includes(getRowKey(item, idx))\n    );\n\n    if (checked) {\n      newSelectedKeys.push(rowKeyValue);\n      newSelectedRows.push(record);\n    } else {\n      newSelectedKeys = newSelectedKeys.filter(key => key !== rowKeyValue);\n      newSelectedRows = newSelectedRows.filter(item => getRowKey(item, 0) !== rowKeyValue);\n    }\n\n    selection.onChange(newSelectedKeys, newSelectedRows);\n  };\n\n  // Get cell value\n  const getCellValue = (record: T, column: TableColumn<T>, index: number) => {\n    let value: any;\n\n    if (column.dataIndex) {\n      if (typeof column.dataIndex === 'function') {\n        value = column.dataIndex(record);\n      } else {\n        value = record[column.dataIndex];\n      }\n    } else {\n      value = record[column.key];\n    }\n\n    if (column.render) {\n      return column.render(value, record, index);\n    }\n\n    return value;\n  };\n\n  const sizeClasses = {\n    small: 'text-sm',\n    middle: 'text-base',\n    large: 'text-lg',\n  };\n\n  const paddingClasses = {\n    small: 'px-3 py-2',\n    middle: 'px-4 py-3',\n    large: 'px-6 py-4',\n  };\n\n  if (loading) {\n    return (\n      <div className={`rounded-lg border bg-surface border-default ${className}`}>\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"size-6 animate-spin rounded-full border-b-2 border-blue-600\"></div>\n            <span className=\"text-sm text-secondary\">Loading...</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`overflow-hidden rounded-lg border bg-surface border-default ${className}`}>\n      {/* Table */}\n      <div className=\"overflow-x-auto\">\n        <table className=\"border-default min-w-full divide-y\">\n          {/* Header */}\n          <thead className=\"bg-background-muted\">\n            <tr>\n              {/* Selection column */}\n              {selection && (\n                <th className={`${paddingClasses[size]} w-12`}>\n                  <input\n                    type=\"checkbox\"\n                    className=\"size-4 rounded text-blue-600 bg-surface border-default focus:ring-blue-500\"\n                    checked={\n                      selection.selectedRowKeys.length === sortedData.length &&\n                      sortedData.length > 0\n                    }\n                    onChange={e => handleSelectAll(e.target.checked)}\n                  />\n                </th>\n              )}\n\n              {/* Data columns */}\n              {columns.map(column => (\n                <th\n                  key={column.key}\n                  className={`${paddingClasses[size]} text-left ${sizeClasses[size]} font-medium text-primary ${\n                    column.sortable ? 'cursor-pointer hover:bg-surface-hover' : ''\n                  }`}\n                  style={{ width: column.width }}\n                  onClick={column.sortable ? () => handleSort(column.key) : undefined}\n                >\n                  <div className=\"flex items-center space-x-1\">\n                    <span>{column.title}</span>\n                    {column.sortable && (\n                      <div className=\"flex flex-col\">\n                        <svg\n                          className={`size-3 ${\n                            sortField === column.key && sortOrder === 'asc'\n                              ? 'text-blue-600'\n                              : 'text-muted'\n                          }`}\n                          fill=\"currentColor\"\n                          viewBox=\"0 0 20 20\"\n                        >\n                          <path d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" />\n                        </svg>\n                      </div>\n                    )}\n                  </div>\n                </th>\n              ))}\n\n              {/* Actions column */}\n              {actions.length > 0 && (\n                <th\n                  className={`${paddingClasses[size]} text-right ${sizeClasses[size]} font-medium text-primary`}\n                >\n                  Actions\n                </th>\n              )}\n            </tr>\n          </thead>\n\n          {/* Body */}\n          <tbody className=\"border-default divide-y bg-surface\">\n            {sortedData.length === 0 ? (\n              <tr>\n                <td\n                  colSpan={columns.length + (selection ? 1 : 0) + (actions.length > 0 ? 1 : 0)}\n                  className=\"px-6 py-12 text-center text-secondary\"\n                >\n                  {emptyText}\n                </td>\n              </tr>\n            ) : (\n              sortedData.map((record, index) => {\n                const rowKeyValue = getRowKey(record, index);\n                const rowProps = onRow?.(record, index) || {};\n                const isSelected = selection?.selectedRowKeys.includes(rowKeyValue) || false;\n\n                return (\n                  <tr\n                    key={rowKeyValue}\n                    className={`hover:bg-surface-hover ${isSelected ? 'bg-blue-50 dark:bg-blue-900/20' : ''} ${rowProps.className || ''}`}\n                    onClick={rowProps.onClick}\n                    onDoubleClick={rowProps.onDoubleClick}\n                  >\n                    {/* Selection column */}\n                    {selection && (\n                      <td className={paddingClasses[size]}>\n                        <input\n                          type=\"checkbox\"\n                          className=\"size-4 rounded text-blue-600 bg-surface border-default focus:ring-blue-500\"\n                          checked={isSelected}\n                          onChange={e => handleRowSelect(record, index, e.target.checked)}\n                          disabled={selection.getCheckboxProps?.(record)?.disabled}\n                        />\n                      </td>\n                    )}\n\n                    {/* Data columns */}\n                    {columns.map(column => (\n                      <td\n                        key={column.key}\n                        className={`${paddingClasses[size]} ${sizeClasses[size]} text-primary`}\n                        style={{ textAlign: column.align || 'left' }}\n                      >\n                        {getCellValue(record, column, index)}\n                      </td>\n                    ))}\n\n                    {/* Actions column */}\n                    {actions.length > 0 && (\n                      <td className={`${paddingClasses[size]} text-right`}>\n                        <div className=\"flex items-center justify-end space-x-2\">\n                          {actions\n                            .filter(action => action.visible?.(record) !== false)\n                            .map(action => {\n                              const isDisabled = action.disabled?.(record) || false;\n\n                              if (action.href) {\n                                return (\n                                  <Link\n                                    key={action.key}\n                                    href={action.href(record)}\n                                    className=\"inline-flex items-center px-3 py-1 text-sm font-medium text-blue-600 hover:text-blue-800\"\n                                  >\n                                    {action.icon && <span className=\"mr-1\">{action.icon}</span>}\n                                    {action.label}\n                                  </Link>\n                                );\n                              }\n\n                              return (\n                                <Button\n                                  key={action.key}\n                                  size=\"sm\"\n                                  variant={action.variant || 'secondary-outline'}\n                                  onClick={\n                                    action.onClick\n                                      ? () => action.onClick!(record, index)\n                                      : undefined\n                                  }\n                                  disabled={isDisabled}\n                                  leftIcon={action.icon}\n                                >\n                                  {action.label}\n                                </Button>\n                              );\n                            })}\n                        </div>\n                      </td>\n                    )}\n                  </tr>\n                );\n              })\n            )}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Pagination */}\n      {pagination && (\n        <div className=\"flex items-center justify-between border-t px-4 py-3 bg-surface border-default\">\n          <div className=\"flex items-center text-sm text-secondary\">\n            <span>\n              Showing{' '}\n              {Math.min((pagination.current - 1) * pagination.pageSize + 1, pagination.total)} to{' '}\n              {Math.min(pagination.current * pagination.pageSize, pagination.total)} of{' '}\n              {pagination.total} results\n            </span>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              size=\"sm\"\n              variant=\"secondary-outline\"\n              onClick={() => pagination.onChange(pagination.current - 1, pagination.pageSize)}\n              disabled={pagination.current <= 1}\n            >\n              Previous\n            </Button>\n\n            <span className=\"text-sm text-secondary\">\n              Page {pagination.current} of {Math.ceil(pagination.total / pagination.pageSize)}\n            </span>\n\n            <Button\n              size=\"sm\"\n              variant=\"secondary-outline\"\n              onClick={() => pagination.onChange(pagination.current + 1, pagination.pageSize)}\n              disabled={pagination.current >= Math.ceil(pagination.total / pagination.pageSize)}\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/DataTable/DataTable.tsx",
          "lineCount": 348,
          "cyclomaticComplexity": 57,
          "cognitiveComplexity": 62
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 408 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "DataTable",
          "line": 60,
          "message": "Function 'DataTable' has 348 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "DataTable",
          "line": 60,
          "complexity": 57,
          "message": "Function 'DataTable' has cyclomatic complexity of 57 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "DataTable",
          "line": 60,
          "complexity": 62,
          "message": "Function 'DataTable' has cognitive complexity of 62 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/DevLogin/DevLogin.stories.tsx",
      "lineCount": 376,
      "functions": [
        {
          "name": "mockIsDevFeatureEnabled",
          "startLine": 6,
          "endLine": 10,
          "code": "const mockIsDevFeatureEnabled = (enabled: boolean) => enabled;\nconst mockGetDevCredentials = () => ({\n  email: 'admin@demo.gov.ph',\n  password: 'dev123456',\n});\n",
          "filePath": "src/components/organisms/DevLogin/DevLogin.stories.tsx",
          "lineCount": 5,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "mockGetDemoUserConfig",
          "startLine": 11,
          "endLine": 15,
          "code": "const mockGetDemoUserConfig = () => ({\n  first_name: 'Juan',\n  last_name: 'Cruz',\n  mobile_number: '+639123456789',\n});\n",
          "filePath": "src/components/organisms/DevLogin/DevLogin.stories.tsx",
          "lineCount": 5,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "mockLogDevModeWarning",
          "startLine": 16,
          "endLine": 20,
          "code": "const mockLogDevModeWarning = () => console.warn('Development mode active');\nconst mockValidateDevEnvironment = (isValid: boolean) => ({\n  isValid,\n  errors: isValid ? [] : ['NODE_ENV not set to development', 'Missing SUPABASE_URL'],\n});\n",
          "filePath": "src/components/organisms/DevLogin/DevLogin.stories.tsx",
          "lineCount": 5,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "mockDecorator",
          "startLine": 33,
          "endLine": 51,
          "code": "const mockDecorator = (Story: any, context: any) => {\n  // Mock the imports based on story parameters\n  const { devModeEnabled = true, hasConfigErrors = false } = context.parameters;\n\n  // Apply mocks\n  jest.doMock('@/lib/dev-config', () => ({\n    isDevFeatureEnabled: () => devModeEnabled,\n    getDevCredentials: mockGetDevCredentials,\n    getDemoUserConfig: mockGetDemoUserConfig,\n    logDevModeWarning: mockLogDevModeWarning,\n    validateDevEnvironment: () => mockValidateDevEnvironment(!hasConfigErrors),\n  }));\n\n  jest.doMock('@/lib/supabase', () => ({\n    supabase: mockSupabase,\n  }));\n\n  return <Story />;\n};\n",
          "filePath": "src/components/organisms/DevLogin/DevLogin.stories.tsx",
          "lineCount": 19,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "play",
          "startLine": 109,
          "endLine": 138,
          "code": "  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // Mock the supabase responses for user creation\n    mockSupabase.auth.signUp.mockResolvedValueOnce({\n      data: { user: { id: 'test-id' } },\n      error: null,\n    });\n    mockSupabase.from.mockReturnValue({\n      insert: jest.fn().mockResolvedValue({ error: null }),\n      update: jest.fn().mockReturnValue({\n        eq: jest.fn().mockResolvedValue({ error: null }),\n      }),\n      select: jest.fn().mockReturnValue({\n        limit: jest.fn().mockReturnValue({\n          single: jest.fn().mockResolvedValue({\n            data: { code: '123456789' },\n            error: null,\n          }),\n        }),\n      }),\n    });\n\n    // Click the setup button to trigger user creation\n    const setupButton = canvas.getByRole('button', { name: /create demo users/i });\n\n    // Verify initial state\n    expect(setupButton).toBeInTheDocument();\n    expect(setupButton).toBeEnabled();\n  },\n",
          "filePath": "src/components/organisms/DevLogin/DevLogin.stories.tsx",
          "lineCount": 30,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "play",
          "startLine": 149,
          "endLine": 160,
          "code": "  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // Mock user already exists error\n    mockSupabase.auth.signUp.mockResolvedValueOnce({\n      error: { message: 'User already registered' },\n    });\n    mockSupabase.auth.signInWithPassword.mockResolvedValueOnce({ error: null });\n\n    const setupButton = canvas.getByRole('button', { name: /create demo users/i });\n    expect(setupButton).toBeInTheDocument();\n  },\n",
          "filePath": "src/components/organisms/DevLogin/DevLogin.stories.tsx",
          "lineCount": 12,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "play",
          "startLine": 171,
          "endLine": 187,
          "code": "  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // Mock database error\n    mockSupabase.from.mockReturnValue({\n      select: jest.fn().mockReturnValue({\n        limit: jest.fn().mockReturnValue({\n          single: jest.fn().mockResolvedValue({\n            error: { message: 'Database connection failed' },\n          }),\n        }),\n      }),\n    });\n\n    const setupButton = canvas.getByRole('button', { name: /create demo users/i });\n    expect(setupButton).toBeInTheDocument();\n  },\n",
          "filePath": "src/components/organisms/DevLogin/DevLogin.stories.tsx",
          "lineCount": 17,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "play",
          "startLine": 198,
          "endLine": 210,
          "code": "  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // Mock successful login\n    mockSupabase.auth.signInWithPassword.mockResolvedValueOnce({ error: null });\n\n    // Verify quick login buttons are present\n    const adminLoginButton = canvas.getByRole('button', { name: /login as barangay admin/i });\n    const clerkLoginButton = canvas.getByRole('button', { name: /login as clerk/i });\n\n    expect(adminLoginButton).toBeInTheDocument();\n    expect(clerkLoginButton).toBeInTheDocument();\n  },\n",
          "filePath": "src/components/organisms/DevLogin/DevLogin.stories.tsx",
          "lineCount": 13,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "play",
          "startLine": 221,
          "endLine": 231,
          "code": "  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // Mock login error\n    mockSupabase.auth.signInWithPassword.mockResolvedValueOnce({\n      error: { message: 'Invalid login credentials' },\n    });\n\n    const adminLoginButton = canvas.getByRole('button', { name: /login as barangay admin/i });\n    expect(adminLoginButton).toBeInTheDocument();\n  },\n",
          "filePath": "src/components/organisms/DevLogin/DevLogin.stories.tsx",
          "lineCount": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "play",
          "startLine": 242,
          "endLine": 252,
          "code": "  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // Verify setup button is disabled when dev mode is off\n    const setupButton = canvas.getByRole('button', { name: /create demo users/i });\n    expect(setupButton).toBeDisabled();\n\n    // Quick login buttons should be disabled\n    const adminLoginButton = canvas.getByRole('button', { name: /login as barangay admin/i });\n    expect(adminLoginButton).toBeDisabled();\n  },\n",
          "filePath": "src/components/organisms/DevLogin/DevLogin.stories.tsx",
          "lineCount": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "play",
          "startLine": 263,
          "endLine": 269,
          "code": "  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // Verify error message is displayed\n    const errorMessage = canvas.getByText(/configuration errors/i);\n    expect(errorMessage).toBeInTheDocument();\n  },\n",
          "filePath": "src/components/organisms/DevLogin/DevLogin.stories.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "play",
          "startLine": 280,
          "endLine": 286,
          "code": "  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // Verify security warning is displayed\n    const warningText = canvas.getByText(/development mode only/i);\n    expect(warningText).toBeInTheDocument();\n  },\n",
          "filePath": "src/components/organisms/DevLogin/DevLogin.stories.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 376 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/DevLogin/DevLogin.tsx",
      "lineCount": 307,
      "functions": [
        {
          "name": "DevLogin",
          "startLine": 15,
          "endLine": 306,
          "code": "export default function DevLogin({ onSuccess }: DevLoginProps) {\n  const [isCreating, setIsCreating] = useState(false);\n  const [message, setMessage] = useState('');\n  const [devModeAvailable, setDevModeAvailable] = useState(false);\n  const [configErrors, setConfigErrors] = useState<string[]>([]);\n\n  useEffect(() => {\n    // Check if development features are properly configured\n    const validation = validateDevEnvironment();\n    setDevModeAvailable(isDevFeatureEnabled() && validation.isValid);\n    setConfigErrors(validation.errors);\n\n    if (isDevFeatureEnabled()) {\n      logDevModeWarning();\n    }\n  }, []);\n\n  const createDemoUser = async (\n    email: string,\n    password: string,\n    userData: Record<string, unknown>\n  ) => {\n    try {\n      setMessage(`Creating user: ${email}...`);\n\n      // Try to sign up the user\n      const { error: authError } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: userData,\n        },\n      });\n\n      if (authError) {\n        // If user already exists, try to sign in\n        if (authError.message.includes('already')) {\n          setMessage(`User exists, trying to sign in: ${email}...`);\n          const { error: signInError } = await supabase.auth.signInWithPassword({\n            email,\n            password,\n          });\n\n          if (signInError) {\n            throw signInError;\n          }\n\n          setMessage(`✅ Signed in successfully: ${email}`);\n          return true;\n        }\n        throw authError;\n      }\n\n      setMessage(`✅ Created and signed in: ${email}`);\n      return true;\n    } catch (error: unknown) {\n      setMessage(\n        `❌ Error with ${email}: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n      return false;\n    }\n  };\n\n  const setupDemoData = async () => {\n    setIsCreating(true);\n    setMessage('Setting up demo authentication...');\n\n    try {\n      // First, ensure we have the required data in the database\n      const barangayCode = await setupDatabaseData();\n\n      // Get secure development credentials\n      const devCredentials = getDevCredentials();\n      const demoUserConfig = getDemoUserConfig();\n\n      // Create Barangay Admin user with proper metadata\n      const adminSuccess = await createDemoUser(devCredentials.email, devCredentials.password, {\n        first_name: demoUserConfig.first_name,\n        last_name: demoUserConfig.last_name,\n        mobile_number: demoUserConfig.mobile_number,\n        barangay_code: barangayCode,\n      });\n\n      if (adminSuccess) {\n        // After creating the user, we need to approve their barangay account\n        setMessage('✅ Setting up admin permissions...');\n\n        // Wait a moment for the user profile to be created\n        await new Promise(resolve => setTimeout(resolve, 2000));\n\n        // Get the created user\n        const {\n          data: { user },\n        } = await supabase.auth.getUser();\n\n        if (user) {\n          // Update user profile status to active\n          await supabase\n            .from('auth_user_profiles')\n            .update({ status: 'active' })\n            .eq('email', devCredentials.email);\n\n          // Update barangay account to active with admin role\n          await supabase\n            .from('barangay_accounts')\n            .update({\n              status: 'active',\n              role_id: '550e8400-e29b-41d4-a716-446655440002', // barangay_admin\n              approved_at: new Date().toISOString(),\n              approved_by: user.id,\n            })\n            .eq('user_id', user.id);\n        }\n\n        setMessage('✅ Admin account created and activated!');\n\n        if (onSuccess) {\n          setTimeout(() => {\n            onSuccess();\n          }, 2000);\n        }\n      }\n    } catch (error: unknown) {\n      setMessage(`❌ Setup failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  const setupDatabaseData = async () => {\n    setMessage('Setting up database data...');\n\n    try {\n      // Get a sample barangay code for the admin\n      const { data: barangayData, error: barangayError } = await supabase\n        .from('psgc_barangays')\n        .select('code')\n        .limit(1)\n        .single();\n\n      if (barangayError) {\n        console.error('Failed to get barangay:', barangayError);\n        throw new Error('Failed to get barangay data');\n      }\n\n      const barangayCode = barangayData.code;\n\n      setMessage('✅ Database data ready');\n      return barangayCode;\n    } catch (error: unknown) {\n      console.error('Database setup error:', error);\n      throw new Error(\n        `Database setup failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  };\n\n  const directLogin = async (email: string) => {\n    try {\n      if (!devModeAvailable) {\n        setMessage('❌ Development mode not properly configured');\n        return;\n      }\n\n      const devCredentials = getDevCredentials();\n\n      setMessage(`Attempting login: ${email}...`);\n      const { error } = await supabase.auth.signInWithPassword({\n        email,\n        password: devCredentials.password,\n      });\n\n      if (error) {\n        throw error;\n      }\n\n      setMessage(`✅ Logged in successfully: ${email}`);\n      if (onSuccess) {\n        setTimeout(() => {\n          onSuccess();\n        }, 1000);\n      }\n    } catch (error: unknown) {\n      setMessage(`❌ Login failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  };\n\n  return (\n    <div className=\"mx-auto max-w-md rounded-lg border p-6 shadow-md bg-surface border-default\">\n      <div className=\"mb-6 text-center\">\n        <h2 className=\"mb-2 text-xl font-bold text-primary\">Development Setup</h2>\n        <p className=\"text-sm text-secondary\">Create demo users for testing the RBI System</p>\n      </div>\n\n      <div className=\"space-y-4\">\n        {/* Setup Button */}\n        <button\n          onClick={setupDemoData}\n          disabled={isCreating}\n          className=\"bg-primary flex w-full items-center justify-center rounded-md border border-transparent px-4 py-2 text-sm font-medium text-inverse hover:bg-primary-600 disabled:cursor-not-allowed disabled:opacity-50\"\n        >\n          {isCreating ? (\n            <>\n              <svg\n                className=\"-ml-1 mr-3 size-5 animate-spin text-inverse\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n              >\n                <circle\n                  className=\"opacity-25\"\n                  cx=\"12\"\n                  cy=\"12\"\n                  r=\"10\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"4\"\n                ></circle>\n                <path\n                  className=\"opacity-75\"\n                  fill=\"currentColor\"\n                  d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                ></path>\n              </svg>\n              Setting up...\n            </>\n          ) : (\n            'Create Demo Users & Login'\n          )}\n        </button>\n\n        {/* Quick Login Buttons */}\n        <div className=\"border-t pt-4 border-default\">\n          <p className=\"mb-2 text-xs text-secondary\">If users already exist:</p>\n          <div className=\"space-y-2\">\n            <button\n              onClick={() => {\n                if (devModeAvailable) {\n                  const devCredentials = getDevCredentials();\n                  directLogin(devCredentials.email);\n                }\n              }}\n              disabled={!devModeAvailable}\n              className=\"w-full rounded-md border px-3 py-2 text-sm text-primary border-default hover:bg-surface-hover disabled:cursor-not-allowed disabled:bg-background-muted\"\n            >\n              Login as Barangay Admin\n            </button>\n            <button\n              onClick={() => directLogin('clerk@gmail.com')}\n              className=\"w-full rounded-md border px-3 py-2 text-sm text-primary border-default hover:bg-surface-hover\"\n            >\n              Login as Clerk\n            </button>\n          </div>\n        </div>\n\n        {/* Status Message */}\n        {message && (\n          <div className=\"rounded-md border p-3 bg-surface-hover border-default\">\n            <p className=\"font-mono text-sm text-primary\">{message}</p>\n          </div>\n        )}\n\n        {/* Instructions */}\n        <div className=\"space-y-1 text-xs text-secondary\">\n          {!devModeAvailable ? (\n            <div className=\"text-danger\">\n              <p>\n                <strong>Development Mode Not Available</strong>\n              </p>\n              {configErrors.map((error, index) => (\n                <p key={index}>• {error}</p>\n              ))}\n              <p className=\"pt-2\">\n                Check your .env file configuration and ensure NODE_ENV=development\n              </p>\n            </div>\n          ) : (\n            <>\n              <p>\n                <strong>Development Mode Active</strong>\n              </p>\n              <p className=\"text-warning\">\n                <strong>⚠️ Warning:</strong> This should only be used in development!\n              </p>\n              <p>Credentials are loaded from environment variables</p>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/DevLogin/DevLogin.tsx",
          "lineCount": 292,
          "cyclomaticComplexity": 23,
          "cognitiveComplexity": 38
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 307 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "DevLogin",
          "line": 15,
          "message": "Function 'DevLogin' has 292 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "DevLogin",
          "line": 15,
          "complexity": 23,
          "message": "Function 'DevLogin' has cyclomatic complexity of 23 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "DevLogin",
          "line": 15,
          "complexity": 38,
          "message": "Function 'DevLogin' has cognitive complexity of 38 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/EducationEmployment/EducationEmployment.stories.tsx",
      "lineCount": 531,
      "functions": [
        {
          "name": "ValidationDemoComponent",
          "startLine": 273,
          "endLine": 354,
          "code": "const ValidationDemoComponent = () => {\n  const [formData, setFormData] = React.useState<EducationEmploymentData>(defaultFormData);\n  const [errors, setErrors] = React.useState<\n    Partial<Record<keyof EducationEmploymentData, string>>\n  >({});\n\n  const validateForm = () => {\n    const newErrors: Partial<Record<keyof EducationEmploymentData, string>> = {};\n\n    if (!formData.educationLevel) {\n      newErrors.educationLevel = 'Education level is required';\n    }\n\n    if (!formData.educationStatus) {\n      newErrors.educationStatus = 'Education status is required';\n    }\n\n    if (formData.employmentStatus === 'employed' && !formData.occupationDescription) {\n      newErrors.occupationDescription = 'Occupation is required for employed residents';\n    }\n\n    if (!formData.employmentStatus) {\n      newErrors.employmentStatus = 'Employment status is required';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = () => {\n    if (validateForm()) {\n      action('form-submitted')(formData);\n      alert('Form is valid! Data: ' + JSON.stringify(formData, null, 2));\n    } else {\n      alert('Please fix the errors before submitting.');\n    }\n  };\n\n  const handleChange = (newData: EducationEmploymentData) => {\n    setFormData(newData);\n    // Clear errors for fields that are now valid\n    const newErrors = { ...errors };\n    Object.keys(newErrors).forEach(key => {\n      const fieldKey = key as keyof EducationEmploymentData;\n      if (newData[fieldKey]) {\n        delete newErrors[fieldKey];\n      }\n    });\n    setErrors(newErrors);\n  };\n\n  return (\n    <div className=\"mx-auto max-w-4xl space-y-6\">\n      <EducationEmployment value={formData} onChange={handleChange} errors={errors} />\n\n      <div className=\"flex gap-4 border-t pt-6\">\n        <button\n          onClick={handleSubmit}\n          className=\"rounded bg-blue-600 px-6 py-2 text-white hover:bg-blue-700\"\n        >\n          Validate & Submit\n        </button>\n        <button\n          onClick={() => {\n            setFormData(defaultFormData);\n            setErrors({});\n          }}\n          className=\"rounded bg-gray-600 px-6 py-2 text-white hover:bg-gray-700\"\n        >\n          Clear Form\n        </button>\n      </div>\n\n      <div className=\"rounded border bg-gray-50 p-4\">\n        <h4 className=\"mb-2 font-semibold\">Current Form Data:</h4>\n        <pre className=\"overflow-auto rounded border bg-white p-2 text-xs\">\n          {JSON.stringify(formData, null, 2)}\n        </pre>\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/organisms/EducationEmployment/EducationEmployment.stories.tsx",
          "lineCount": 82,
          "cyclomaticComplexity": 9,
          "cognitiveComplexity": 13
        },
        {
          "name": "render",
          "startLine": 364,
          "endLine": 365,
          "code": "  render: () => <ValidationDemoComponent />,\n};\n",
          "filePath": "src/components/organisms/EducationEmployment/EducationEmployment.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "CommonOccupationsComponent",
          "startLine": 367,
          "endLine": 466,
          "code": "const CommonOccupationsComponent = () => {\n  const [currentProfile, setCurrentProfile] = React.useState(0);\n\n  const profiles = [\n    {\n      title: 'Barangay Captain',\n      data: {\n        educationLevel: 'college',\n        educationStatus: 'graduated',\n        psocCode: '1112',\n        psocLevel: 'unit_group',\n        positionTitleId: '',\n        occupationDescription: 'Senior Government Officials',\n        employmentStatus: 'employed',\n        workplace: 'Barangay San Lorenzo',\n      },\n    },\n    {\n      title: 'Elementary Teacher',\n      data: {\n        educationLevel: 'college',\n        educationStatus: 'graduated',\n        psocCode: '2341',\n        psocLevel: 'unit_group',\n        positionTitleId: '',\n        occupationDescription: 'Primary School Teachers',\n        employmentStatus: 'employed',\n        workplace: 'San Lorenzo Elementary School',\n      },\n    },\n    {\n      title: 'Tricycle Driver',\n      data: {\n        educationLevel: 'high_school',\n        educationStatus: 'graduated',\n        psocCode: '8322',\n        psocLevel: 'unit_group',\n        positionTitleId: '',\n        occupationDescription: 'Car, Taxi and Van Drivers',\n        employmentStatus: 'self_employed',\n        workplace: 'San Lorenzo-Makati Route',\n      },\n    },\n    {\n      title: 'Store Owner',\n      data: {\n        educationLevel: 'high_school',\n        educationStatus: 'graduated',\n        psocCode: '5223',\n        psocLevel: 'unit_group',\n        positionTitleId: '',\n        occupationDescription: 'Shop Keepers',\n        employmentStatus: 'self_employed',\n        workplace: 'Sari-sari Store, San Lorenzo Street',\n      },\n    },\n    {\n      title: 'Call Center Agent',\n      data: {\n        educationLevel: 'college',\n        educationStatus: 'graduated',\n        psocCode: '4222',\n        psocLevel: 'unit_group',\n        positionTitleId: '',\n        occupationDescription: 'Contact Centre Information Clerks',\n        employmentStatus: 'employed',\n        workplace: 'Convergys Philippines, Makati',\n      },\n    },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-wrap gap-2\">\n        {profiles.map((profile, index) => (\n          <button\n            key={profile.title}\n            onClick={() => setCurrentProfile(index)}\n            className={`rounded px-4 py-2 text-sm ${\n              currentProfile === index\n                ? 'bg-blue-600 text-white'\n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n            }`}\n          >\n            {profile.title}\n          </button>\n        ))}\n      </div>\n\n      <div className=\"rounded-lg border border-gray-200 p-6\">\n        <h3 className=\"mb-4 text-lg font-semibold\">{profiles[currentProfile].title} Profile</h3>\n        <EducationEmployment\n          value={profiles[currentProfile].data}\n          onChange={action('profile-changed')}\n          errors={{}}\n        />\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/organisms/EducationEmployment/EducationEmployment.stories.tsx",
          "lineCount": 100,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 476,
          "endLine": 477,
          "code": "  render: () => <CommonOccupationsComponent />,\n};\n",
          "filePath": "src/components/organisms/EducationEmployment/EducationEmployment.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 487,
          "endLine": 488,
          "code": "  render: () => (\n    <div className=\"space-y-8\">\n",
          "filePath": "src/components/organisms/EducationEmployment/EducationEmployment.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 531 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "ValidationDemoComponent",
          "line": 273,
          "message": "Function 'ValidationDemoComponent' has 82 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "CommonOccupationsComponent",
          "line": 367,
          "message": "Function 'CommonOccupationsComponent' has 100 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/EducationEmployment/EducationEmployment.tsx",
      "lineCount": 153,
      "functions": [
        {
          "name": "onChange",
          "startLine": 18,
          "endLine": 19,
          "code": "  onChange: (value: EducationEmploymentData) => void;\n  errors?: Partial<Record<keyof EducationEmploymentData, string>>;\n",
          "filePath": "src/components/organisms/EducationEmployment/EducationEmployment.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "EducationEmployment",
          "startLine": 49,
          "endLine": 152,
          "code": "export default function EducationEmployment({\n  value,\n  onChange,\n  errors = {},\n  className = '',\n}: EducationEmploymentProps) {\n  const handleChange = (field: keyof EducationEmploymentData, newValue: string | boolean) => {\n    onChange({\n      ...value,\n      [field]: newValue,\n    });\n  };\n\n  const handleOccupationSelect = (\n    option: { occupation_code: string; level_type: string; occupation_title: string } | null\n  ) => {\n    if (option) {\n      onChange({\n        ...value,\n        psocCode: option.occupation_code,\n        psocLevel: option.level_type,\n        occupationDescription: option.occupation_title,\n        // Clear position title ID if not unit group level\n        positionTitleId: option.level_type !== 'unit_group' ? '' : value.positionTitleId,\n      });\n    } else {\n      onChange({\n        ...value,\n        psocCode: '',\n        psocLevel: '',\n        occupationDescription: '',\n        positionTitleId: '',\n      });\n    }\n  };\n\n  return (\n    <div className={`space-y-8 ${className}`}>\n      <div>\n        <h3 className=\"text-base/7 font-semibold text-zinc-950 dark:text-white\">\n          Education & Employment\n        </h3>\n        <p className=\"mt-1 text-sm/6 text-zinc-500 dark:text-zinc-400\">\n          Academic background and work information.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-2\">\n        <DropdownSelect\n          label=\"Education Attainment\"\n          value={value.educationAttainment}\n          onChange={val => handleChange('educationAttainment', val)}\n          options={EDUCATION_LEVEL_OPTIONS}\n          placeholder=\"Select education attainment\"\n          errorMessage={errors.educationAttainment}\n        />\n\n        <Toggle\n          label=\"Is Graduate\"\n          description=\"Has this person completed their highest level of education?\"\n          checked={value.isGraduate}\n          onToggle={checked => handleChange('isGraduate', checked)}\n          errorMessage={errors.isGraduate}\n        />\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-2\">\n        <div>\n          <label className=\"block text-sm/6 font-medium text-zinc-950 dark:text-white\">\n            Occupation <span className=\"text-zinc-500\">(PSOC Compliant)</span>\n          </label>\n          <div className=\"mt-2\">\n            <PSOCSelector\n              value={value.psocCode}\n              onSelect={handleOccupationSelect}\n              placeholder=\"Search for occupation (e.g., Manager, Teacher, Engineer)\"\n              error={errors.occupationDescription}\n            />\n          </div>\n          <p className=\"mt-1 text-xs text-zinc-500 dark:text-zinc-400\">\n            Search by job title or occupation category. Uses Philippine Standard Occupational\n            Classification (PSOC).\n          </p>\n        </div>\n\n        <DropdownSelect\n          label=\"Employment Status\"\n          value={value.employmentStatus}\n          onChange={val => handleChange('employmentStatus', val)}\n          options={EMPLOYMENT_STATUS_OPTIONS}\n          placeholder=\"Select employment status\"\n        />\n      </div>\n\n      <InputField\n        label=\"Workplace\"\n        value={value.workplace}\n        onChange={e => handleChange('workplace', e.target.value)}\n        placeholder=\"Company or workplace name\"\n        helperText=\"Optional\"\n      />\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/EducationEmployment/EducationEmployment.tsx",
          "lineCount": 104,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 5
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "EducationEmployment",
          "line": 49,
          "message": "Function 'EducationEmployment' has 104 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/GeographicLocationStep/GeographicLocationStep.tsx",
      "lineCount": 152,
      "functions": [
        {
          "name": "updateFormData",
          "startLine": 16,
          "endLine": 17,
          "code": "  updateFormData: (data: Partial<any>) => void;\n  errors: Record<string, string>;\n",
          "filePath": "src/components/organisms/GeographicLocationStep/GeographicLocationStep.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "GeographicLocationStep",
          "startLine": 21,
          "endLine": 152,
          "code": "export function GeographicLocationStep({\n  formData,\n  updateFormData,\n  errors,\n  required = true\n}: GeographicLocationStepProps) {\n  const [names, setNames] = useState({\n    regionName: '',\n    provinceName: '',\n    cityName: '',\n    barangayName: ''\n  });\n  const [loading, setLoading] = useState(true);\n\n  // Fetch names for the codes\n  useEffect(() => {\n    const fetchNames = async () => {\n      if (!formData.barangayCode) return;\n      \n      try {\n        const { data: { session } } = await supabase.auth.getSession();\n        if (!session?.user) return;\n\n        const response = await fetch('/api/user/geographic-location', {\n          headers: {\n            'Authorization': `Bearer ${session.access_token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n\n        if (response.ok) {\n          const hierarchy = await response.json();\n          setNames({\n            regionName: hierarchy.region?.name || '',\n            provinceName: hierarchy.province?.name || '',\n            cityName: hierarchy.city?.name || '',\n            barangayName: hierarchy.barangay?.name || ''\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching geographic names:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchNames();\n  }, [formData.barangayCode]);\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-2xl font-bold text-gray-900\">Geographic Location</h2>\n        <p className=\"mt-2 text-gray-600\">\n          Select your geographic location. This information will be used for administrative purposes and data collection.\n        </p>\n      </div>\n\n      <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-6\">\n        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Geographic Location</h3>\n        <p className=\"text-sm text-gray-600 mb-4\">\n          This resident will be assigned to your barangay's jurisdiction:\n        </p>\n        \n        <div className=\"space-y-3\">\n          <div className=\"flex justify-between\">\n            <span className=\"font-medium text-gray-700\">Region:</span>\n            <span className=\"text-gray-900\">\n              {loading ? 'Loading...' : \n                formData.regionCode ? `${names.regionName} (${formData.regionCode})` : 'Not assigned'\n              }\n            </span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"font-medium text-gray-700\">Province:</span>\n            <span className=\"text-gray-900\">\n              {loading ? 'Loading...' : \n                formData.provinceCode ? `${names.provinceName} (${formData.provinceCode})` : 'Not assigned'\n              }\n            </span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"font-medium text-gray-700\">City/Municipality:</span>\n            <span className=\"text-gray-900\">\n              {loading ? 'Loading...' : \n                formData.cityMunicipalityCode ? `${names.cityName} (${formData.cityMunicipalityCode})` : 'Not assigned'\n              }\n            </span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"font-medium text-gray-700\">Barangay:</span>\n            <span className=\"text-gray-900 font-semibold\">\n              {loading ? 'Loading...' : \n                formData.barangayCode ? `${names.barangayName} (${formData.barangayCode})` : 'Not assigned'\n              }\n            </span>\n          </div>\n        </div>\n        \n        <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded\">\n          <p className=\"text-sm text-blue-800\">\n            ✓ Geographic location automatically assigned from your barangay admin profile\n          </p>\n        </div>\n      </div>\n\n      {/* Error Display */}\n      {Object.keys(errors).length > 0 && (\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n          <h4 className=\"text-sm font-medium text-red-800 mb-2\">Please fix the following errors:</h4>\n          <ul className=\"text-sm text-red-700 space-y-1\">\n            {Object.entries(errors).map(([field, error]) => (\n              <li key={field}>• {error}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Information Note */}\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n        <h4 className=\"text-sm font-medium text-blue-800 mb-2\">Important Information</h4>\n        <ul className=\"text-sm text-blue-700 space-y-1\">\n          <li>• Location automatically populated from your barangay admin profile</li>\n          <li>• Geographic location is required for proper data organization</li>\n          <li>• Only the location codes are stored in the system, not the names</li>\n          <li>• This information helps with statistical reporting and administration</li>\n          <li>• You can search by typing the location name to change selection</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/GeographicLocationStep/GeographicLocationStep.tsx",
          "lineCount": 132,
          "cyclomaticComplexity": 18,
          "cognitiveComplexity": 19
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "GeographicLocationStep",
          "line": 21,
          "message": "Function 'GeographicLocationStep' has 132 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "GeographicLocationStep",
          "line": 21,
          "complexity": 18,
          "message": "Function 'GeographicLocationStep' has cyclomatic complexity of 18 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "GeographicLocationStep",
          "line": 21,
          "complexity": 19,
          "message": "Function 'GeographicLocationStep' has cognitive complexity of 19 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/HouseholdSelector/HouseholdSelector.stories.tsx",
      "lineCount": 430,
      "functions": [
        {
          "name": "render",
          "startLine": 141,
          "endLine": 246,
          "code": "  render: () => {\n    const [selectedHousehold, setSelectedHousehold] = React.useState<string | null>(null);\n    const [step, setStep] = React.useState<'select' | 'confirm' | 'complete'>('select');\n\n    const handleSelect = (householdCode: string | null) => {\n      setSelectedHousehold(householdCode);\n      if (householdCode) {\n        setStep('confirm');\n      }\n    };\n\n    const handleConfirm = () => {\n      action('workflow-completed')(selectedHousehold);\n      setStep('complete');\n    };\n\n    const handleReset = () => {\n      setSelectedHousehold(null);\n      setStep('select');\n    };\n\n    return (\n      <div className=\"max-w-2xl space-y-6\">\n        <div className=\"flex items-center space-x-2 text-sm\">\n          <div\n            className={`rounded px-3 py-1 ${step === 'select' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-600'}`}\n          >\n            1. Select Household\n          </div>\n          <div\n            className={`rounded px-3 py-1 ${step === 'confirm' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-600'}`}\n          >\n            2. Confirm\n          </div>\n          <div\n            className={`rounded px-3 py-1 ${step === 'complete' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-600'}`}\n          >\n            3. Complete\n          </div>\n        </div>\n\n        {step === 'select' && (\n          <div>\n            <label className=\"mb-2 block text-sm font-medium text-gray-700\">\n              Select Household for New Resident\n            </label>\n            <HouseholdSelector\n              value={selectedHousehold || ''}\n              onSelect={handleSelect}\n              placeholder=\"Search for existing household or create new\"\n            />\n            <p className=\"mt-2 text-sm text-gray-500\">\n              Search by household code, head resident name, or address. Select \"Create New\n              Household\" if none exist.\n            </p>\n          </div>\n        )}\n\n        {step === 'confirm' && selectedHousehold && (\n          <div className=\"space-y-4\">\n            <div className=\"rounded border border-green-200 bg-green-50 p-4\">\n              <h3 className=\"mb-2 font-semibold text-green-800\">Household Selected</h3>\n              <p className=\"text-sm text-green-700\">Selected Household: {selectedHousehold}</p>\n              <p className=\"mt-1 text-xs text-green-600\">\n                The new resident will be added to this household.\n              </p>\n            </div>\n\n            <div className=\"flex gap-3\">\n              <button\n                onClick={handleConfirm}\n                className=\"rounded bg-blue-600 px-4 py-2 text-white hover:bg-blue-700\"\n              >\n                Confirm Selection\n              </button>\n              <button\n                onClick={handleReset}\n                className=\"rounded bg-gray-300 px-4 py-2 text-gray-700 hover:bg-gray-400\"\n              >\n                Change Household\n              </button>\n            </div>\n          </div>\n        )}\n\n        {step === 'complete' && (\n          <div className=\"space-y-4 text-center\">\n            <div className=\"rounded border border-green-200 bg-green-50 p-6\">\n              <div className=\"mb-2 text-4xl text-green-600\">✅</div>\n              <h3 className=\"mb-2 font-semibold text-green-800\">Household Assignment Complete</h3>\n              <p className=\"text-sm text-green-700\">\n                Household {selectedHousehold} has been selected for the new resident.\n              </p>\n            </div>\n\n            <button\n              onClick={handleReset}\n              className=\"rounded bg-blue-600 px-4 py-2 text-white hover:bg-blue-700\"\n            >\n              Start Over\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  },\n",
          "filePath": "src/components/organisms/HouseholdSelector/HouseholdSelector.stories.tsx",
          "lineCount": 106,
          "cyclomaticComplexity": 10,
          "cognitiveComplexity": 9
        },
        {
          "name": "render",
          "startLine": 257,
          "endLine": 258,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/organisms/HouseholdSelector/HouseholdSelector.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 323,
          "endLine": 392,
          "code": "  render: () => {\n    const [householdCode, setHouseholdCode] = React.useState<string>('');\n    const [error, setError] = React.useState<string>('');\n    const [residentName, setResidentName] = React.useState<string>('');\n\n    const handleSubmit = () => {\n      if (!residentName.trim()) {\n        alert('Please enter resident name');\n        return;\n      }\n\n      if (!householdCode) {\n        setError('Please select or create a household');\n        return;\n      }\n\n      setError('');\n      action('form-submitted')({ residentName, householdCode });\n      alert(`Resident \"${residentName}\" assigned to household: ${householdCode}`);\n    };\n\n    const handleHouseholdSelect = (code: string | null) => {\n      setHouseholdCode(code || '');\n      if (error && code) {\n        setError(''); // Clear error when valid selection is made\n      }\n    };\n\n    return (\n      <div className=\"max-w-md space-y-4\">\n        <div>\n          <label className=\"mb-2 block text-sm font-medium text-gray-700\">Resident Name *</label>\n          <input\n            type=\"text\"\n            value={residentName}\n            onChange={e => setResidentName(e.target.value)}\n            className=\"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            placeholder=\"Enter full name\"\n          />\n        </div>\n\n        <div>\n          <label className=\"mb-2 block text-sm font-medium text-gray-700\">\n            Household Assignment *\n          </label>\n          <HouseholdSelector\n            value={householdCode}\n            onSelect={handleHouseholdSelect}\n            error={error}\n            placeholder=\"Select household or create new\"\n          />\n        </div>\n\n        <button\n          onClick={handleSubmit}\n          className=\"w-full rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          Add Resident to Household\n        </button>\n\n        {householdCode && (\n          <div className=\"rounded border border-blue-200 bg-blue-50 p-3\">\n            <p className=\"text-sm text-blue-800\">\n              <strong>Selected:</strong> {householdCode}\n            </p>\n          </div>\n        )}\n      </div>\n    );\n  },\n",
          "filePath": "src/components/organisms/HouseholdSelector/HouseholdSelector.stories.tsx",
          "lineCount": 70,
          "cyclomaticComplexity": 7,
          "cognitiveComplexity": 9
        },
        {
          "name": "render",
          "startLine": 403,
          "endLine": 404,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/organisms/HouseholdSelector/HouseholdSelector.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 430 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 141,
          "message": "Function 'render' has 106 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 323,
          "message": "Function 'render' has 70 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/HouseholdSelector/HouseholdSelector.tsx",
      "lineCount": 479,
      "functions": [
        {
          "name": "onSelect",
          "startLine": 72,
          "endLine": 73,
          "code": "  onSelect: (householdCode: string | null) => void;\n  error?: string;\n",
          "filePath": "src/components/organisms/HouseholdSelector/HouseholdSelector.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "HouseholdSelector",
          "startLine": 77,
          "endLine": 478,
          "code": "export default function HouseholdSelector({\n  value,\n  onSelect,\n  error,\n  placeholder = '🏠 Search households or leave blank to create new',\n}: HouseholdSelectorProps) {\n  const { userProfile } = useAuth();\n  const [households, setHouseholds] = useState<Household[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Load households for the user's barangay\n  const loadHouseholds = useCallback(async () => {\n    if (!userProfile?.barangay_code) {\n      logger.debug('No barangay_code available, cannot load households', { userProfile });\n      return;\n    }\n\n    logger.debug('Loading households for barangay', { \n      barangayCode: userProfile.barangay_code,\n      userProfileId: userProfile.id \n    });\n    setLoading(true);\n    try {\n      // Get households with optional head resident, street, and subdivision info\n      const { data: householdsData, error } = await supabase\n        .from('households')\n        .select(\n          `\n            code,\n            name,\n            house_number,\n            street_id,\n            subdivision_id,\n            barangay_code,\n            household_head_id,\n            geo_streets(\n              id,\n              name\n            ),\n            geo_subdivisions(\n              id,\n              name,\n              type\n            )\n          `\n        )\n        .eq('barangay_code', userProfile.barangay_code)\n        .order('code', { ascending: true });\n\n      if (error) {\n        logger.error('Error loading households', { error });\n        return;\n      }\n\n      logger.debug('Raw households data from query', { \n        count: householdsData?.length || 0, \n        userBarangay: userProfile.barangay_code,\n        rawData: householdsData,\n        queryWithoutBarangayFilter: true \n      });\n\n      console.log('🏠 HOUSEHOLD DEBUG:', {\n        userBarangayCode: userProfile.barangay_code,\n        householdsFound: householdsData?.length || 0,\n        households: householdsData\n      });\n\n      // Get member counts, head resident info, and geographic information for each household\n      const householdsWithCounts = await Promise.all(\n        (householdsData || []).map(async household => {\n          // Get member count\n          const { count } = await supabase\n            .from('residents')\n            .select('*', { count: 'exact', head: true })\n            .eq('household_code', household.code);\n\n          // Get head resident info if household_head_id exists\n          let headResident = null;\n          if (household.household_head_id) {\n            const { data: headData } = await supabase\n              .from('residents')\n              .select('id, first_name, middle_name, last_name')\n              .eq('id', household.household_head_id)\n              .single();\n            headResident = headData;\n          }\n\n          // Get geographic information from PSGC tables\n          let geoInfo = {};\n          try {\n            const { data: barangayData } = await supabase\n              .from('psgc_barangays')\n              .select(\n                `\n                  code,\n                  name,\n                  psgc_cities_municipalities!inner(\n                    code,\n                    name,\n                    type,\n                    psgc_provinces!inner(\n                      code,\n                      name,\n                      psgc_regions!inner(\n                        code,\n                        name\n                      )\n                    )\n                  )\n                `\n              )\n              .eq('code', household.barangay_code)\n              .single();\n\n            if (barangayData) {\n              const cityMun =\n                barangayData.psgc_cities_municipalities as unknown as CityMunicipality;\n              const province = cityMun.psgc_provinces as Province;\n              const region = province.psgc_regions as Region;\n\n              geoInfo = {\n                barangay_info: {\n                  code: barangayData.code,\n                  name: barangayData.name,\n                },\n                city_municipality_info: {\n                  code: cityMun.code,\n                  name: cityMun.name,\n                  type: cityMun.type,\n                },\n                province_info: {\n                  code: province.code,\n                  name: province.name,\n                },\n                region_info: {\n                  code: region.code,\n                  name: region.name,\n                },\n              };\n            }\n          } catch (geoError) {\n            logger.warn('Could not load geographic info for household', {\n              householdCode: household.code,\n              error: geoError,\n            });\n          }\n\n          return {\n            ...household,\n            head_resident: headResident || undefined,\n            member_count: count || 0,\n            // Fix geo_streets to be single object, not array\n            geo_streets: household.geo_streets && household.geo_streets.length > 0 \n              ? household.geo_streets[0] \n              : { id: '', name: '' },\n            // Fix geo_subdivisions to be single object, not array  \n            geo_subdivisions: household.geo_subdivisions && household.geo_subdivisions.length > 0\n              ? household.geo_subdivisions[0]\n              : undefined,\n            ...geoInfo,\n          } as Household;\n        })\n      );\n\n      logger.debug('Loaded households', { count: householdsWithCounts.length });\n      setHouseholds(householdsWithCounts);\n    } catch (error) {\n      logError(error as Error, 'HOUSEHOLD_LOAD_ERROR');\n    } finally {\n      setLoading(false);\n    }\n  }, [userProfile?.barangay_code]);\n\n  // Load households when barangay changes\n  useEffect(() => {\n    loadHouseholds();\n  }, [loadHouseholds]);\n\n  // Helper function to format full name\n  const formatFullName = (person?: {\n    first_name: string;\n    middle_name?: string;\n    last_name: string;\n  }) => {\n    if (!person) return 'No head assigned';\n    return [person.first_name, person.middle_name, person.last_name].filter(Boolean).join(' ');\n  };\n\n  // Helper function to format address\n  const formatAddress = (household: Household) => {\n    const parts = [\n      household.house_number,\n      household.geo_streets?.name,\n      household.geo_subdivisions?.name\n    ].filter(Boolean);\n    return parts.length > 0 ? parts.join(', ') : 'No address';\n  };\n\n  // Helper function to format full address with geographic hierarchy\n  const formatFullAddress = (household: Household) => {\n    const localAddress = formatAddress(household);\n    const geoParts = [];\n\n    if (household.barangay_info?.name) {\n      geoParts.push(`Brgy. ${household.barangay_info.name}`);\n    }\n\n    if (household.city_municipality_info?.name && household.city_municipality_info?.type) {\n      geoParts.push(\n        `${household.city_municipality_info.name} (${household.city_municipality_info.type})`\n      );\n    }\n\n    if (household.province_info?.name) {\n      geoParts.push(household.province_info.name);\n    }\n\n    if (localAddress === 'No address' && geoParts.length === 0) {\n      return 'Address not available';\n    }\n\n    if (localAddress === 'No address') {\n      return geoParts.join(', ');\n    }\n\n    return geoParts.length > 0 ? `${localAddress}, ${geoParts.join(', ')}` : localAddress;\n  };\n\n  // Filter households based on search term\n  const filteredHouseholds = households.filter(household => {\n    const searchLower = searchTerm.toLowerCase();\n    return (\n      household.code.toLowerCase().includes(searchLower) ||\n      formatFullName(household.head_resident).toLowerCase().includes(searchLower) ||\n      household.geo_streets?.name?.toLowerCase().includes(searchLower) ||\n      household.house_number?.toLowerCase().includes(searchLower) ||\n      household.geo_subdivisions?.name?.toLowerCase().includes(searchLower)\n    );\n  });\n\n  const selectedHousehold = households.find(h => h.code === value);\n\n  // Debug logging for selection state\n  React.useEffect(() => {\n    logger.debug('HouseholdSelector state', {\n      value,\n      householdsCount: households.length,\n      selectedHousehold: selectedHousehold\n        ? `${selectedHousehold.code} - ${formatFullName(selectedHousehold.head_resident)}`\n        : 'None found',\n    });\n  }, [value, households, selectedHousehold]);\n\n  return (\n    <div className=\"relative\">\n      <div\n        className={`font-montserrat relative rounded border text-base focus-within:border-transparent focus-within:ring-2 ${\n          error\n            ? 'border-red-500 focus-within:ring-red-500'\n            : 'border-neutral-300 focus-within:ring-blue-500'\n        }`}\n      >\n        <input\n          type=\"text\"\n          value={\n            selectedHousehold\n              ? `#${selectedHousehold.code} - ${formatFullAddress(selectedHousehold)} (${formatFullName(selectedHousehold.head_resident)})`\n              : searchTerm\n          }\n          onChange={e => {\n            setSearchTerm(e.target.value);\n            setIsOpen(true);\n            if (!e.target.value) {\n              onSelect(null);\n            }\n          }}\n          onFocus={() => setIsOpen(true)}\n          className=\"w-full bg-transparent px-3 py-2 outline-none\"\n          placeholder={placeholder}\n        />\n\n        <button\n          type=\"button\"\n          onClick={() => setIsOpen(!isOpen)}\n          className=\"absolute right-2 top-1/2 -translate-y-1/2 text-neutral-500 hover:text-neutral-700\"\n        >\n          <svg className=\"size-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d={isOpen ? 'M5 15l7-7 7 7' : 'M19 9l-7 7-7-7'}\n            />\n          </svg>\n        </button>\n      </div>\n\n      {/* Dropdown */}\n      {isOpen && (\n        <div className=\"absolute z-10 mt-1 max-h-60 w-full overflow-y-auto rounded-lg border border-neutral-300 bg-white shadow-lg\">\n          {loading ? (\n            <div className=\"p-3 text-center text-neutral-500\">\n              <div className=\"animate-pulse\">Loading households...</div>\n            </div>\n          ) : (\n            <div>\n              {/* Always show option to create new household */}\n              <button\n                type=\"button\"\n                onClick={() => {\n                  setIsOpen(false);\n                  setShowCreateModal(true);\n                }}\n                className=\"w-full border-b border-neutral-100 p-3 text-left hover:bg-blue-50\"\n              >\n                <div className=\"font-medium text-blue-600\">+ Create New Household</div>\n                <div className=\"text-xs text-blue-500\">\n                  This resident will start a new household\n                </div>\n              </button>\n\n              {/* Show message when no existing households */}\n              {filteredHouseholds.length === 0 && !searchTerm && (\n                <div className=\"p-3 text-center text-neutral-500\">\n                  <div className=\"text-sm\">No existing households in this barangay</div>\n                  <div className=\"mt-1 text-xs text-green-600\">\n                    ✓ Perfect! This will be the first household\n                  </div>\n                </div>\n              )}\n\n              {/* Show \"no search results\" when searching */}\n              {filteredHouseholds.length === 0 && searchTerm && (\n                <div className=\"p-3 text-center text-neutral-500\">\n                  <div className=\"text-sm\">No households match your search</div>\n                </div>\n              )}\n\n              {/* Existing households */}\n              {filteredHouseholds.map(household => (\n                <button\n                  key={household.code}\n                  type=\"button\"\n                  onClick={() => {\n                    onSelect(household.code);\n                    setSearchTerm('');\n                    setIsOpen(false);\n                  }}\n                  className=\"w-full border-b border-neutral-100 p-3 text-left last:border-b-0 hover:bg-neutral-50\"\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-neutral-900\">\n                        Household #{household.code}\n                      </div>\n                      <div className=\"text-sm text-neutral-600\">\n                        Head: {formatFullName(household.head_resident)}\n                      </div>\n                      <div className=\"text-xs text-neutral-500\">{formatFullAddress(household)}</div>\n                    </div>\n                    <div className=\"ml-2 text-xs text-neutral-500\">\n                      {household.member_count} member{household.member_count !== 1 ? 's' : ''}\n                    </div>\n                  </div>\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Click outside to close */}\n      {isOpen && <div className=\"fixed inset-0 z-0\" onClick={() => setIsOpen(false)} />}\n\n      {/* Error message */}\n      {error && (\n        <p className=\"mt-2 text-sm text-red-600\" role=\"alert\">\n          {error}\n        </p>\n      )}\n\n      {/* Create Household Modal */}\n      <CreateHouseholdModal\n        isOpen={showCreateModal}\n        onClose={() => setShowCreateModal(false)}\n        onHouseholdCreated={householdCode => {\n          logger.info('Auto-selecting newly created household', { householdCode });\n          onSelect(householdCode);\n          setShowCreateModal(false);\n          // Refresh households list after a small delay to ensure database consistency\n          setTimeout(() => {\n            logger.debug('Refreshing households list');\n            loadHouseholds();\n          }, 500);\n        }}\n      />\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/HouseholdSelector/HouseholdSelector.tsx",
          "lineCount": 402,
          "cyclomaticComplexity": 45,
          "cognitiveComplexity": 49
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 479 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "HouseholdSelector",
          "line": 77,
          "message": "Function 'HouseholdSelector' has 402 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "HouseholdSelector",
          "line": 77,
          "complexity": 45,
          "message": "Function 'HouseholdSelector' has cyclomatic complexity of 45 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "HouseholdSelector",
          "line": 77,
          "complexity": 49,
          "message": "Function 'HouseholdSelector' has cognitive complexity of 49 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/LoginForm/LoginForm.stories.tsx",
      "lineCount": 240,
      "functions": [
        {
          "name": "createMockAuthContext",
          "startLine": 6,
          "endLine": 13,
          "code": "const createMockAuthContext = (overrides = {}) => ({\n  signIn: jest.fn(),\n  loading: false,\n  user: null,\n  userProfile: null,\n  role: null,\n  ...overrides,\n});\n",
          "filePath": "src/components/organisms/LoginForm/LoginForm.stories.tsx",
          "lineCount": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "mockUseAuth",
          "startLine": 23,
          "endLine": 24,
          "code": "  const mockUseAuth = () => authValue;\n\n",
          "filePath": "src/components/organisms/LoginForm/LoginForm.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/organisms/LoginForm/LoginForm.tsx",
      "lineCount": 192,
      "functions": [
        {
          "name": "LoginForm",
          "startLine": 14,
          "endLine": 191,
          "code": "export default function LoginForm({\n  onSuccess,\n  redirectTo = '/dashboard',\n  className = '',\n}: LoginFormProps) {\n  const { signIn, loading } = useAuth();\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n  });\n  const [errors, setErrors] = useState<{ [key: string]: string }>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors: { [key: string]: string } = {};\n\n    if (!formData.email.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n      newErrors.email = 'Please enter a valid email address';\n    }\n\n    if (!formData.password) {\n      newErrors.password = 'Password is required';\n    } else if (formData.password.length < 6) {\n      newErrors.password = 'Password must be at least 6 characters';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) return;\n\n    setIsSubmitting(true);\n\n    try {\n      const { error } = await signIn(formData.email, formData.password);\n\n      if (error) {\n        if (error.message.includes('Invalid login credentials')) {\n          setErrors({ general: 'Invalid email or password. Please try again.' });\n        } else if (error.message.includes('Email not confirmed')) {\n          setErrors({ general: 'Please check your email and click the confirmation link.' });\n        } else {\n          setErrors({ general: error.message || 'Login failed. Please try again.' });\n        }\n      } else {\n        // Success - redirect or call onSuccess\n        if (onSuccess) {\n          onSuccess();\n        } else {\n          window.location.href = redirectTo;\n        }\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      setErrors({ general: 'An unexpected error occurred. Please try again.' });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className={`mx-auto w-full max-w-md ${className}`}>\n      <div className=\"rounded-lg border p-8 shadow-lg bg-surface border-default\">\n        <div className=\"mb-8 text-center\">\n          <h1 className=\"mb-2 text-2xl font-bold text-primary\">Sign In to RBI System</h1>\n          <p className=\"text-sm text-secondary\">Records of Barangay Inhabitant System</p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* General Error */}\n          {errors.general && (\n            <div className=\"rounded-lg border border-danger-300 bg-danger-50 p-4\">\n              <div className=\"flex items-start gap-3\">\n                <span className=\"mt-0.5 text-danger-600\">⚠️</span>\n                <div>\n                  <h4 className=\"font-medium text-danger-800\">Login Failed</h4>\n                  <p className=\"text-sm text-danger-700\">{errors.general}</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Email Field */}\n          <InputField\n            id=\"email\"\n            type=\"email\"\n            label=\"Email Address\"\n            value={formData.email}\n            onChange={e => handleChange('email', e.target.value)}\n            placeholder=\"your.email@barangay.gov.ph\"\n            errorMessage={errors.email}\n            disabled={isSubmitting}\n            autoComplete=\"email\"\n            autoFocus\n            leftIcon={\n              <svg\n                width=\"20\"\n                height=\"20\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n              >\n                <path d=\"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z\"></path>\n                <polyline points=\"22,6 12,13 2,6\"></polyline>\n              </svg>\n            }\n          />\n\n          {/* Password Field */}\n          <InputField\n            id=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            value={formData.password}\n            onChange={e => handleChange('password', e.target.value)}\n            placeholder=\"Enter your password\"\n            errorMessage={errors.password}\n            disabled={isSubmitting}\n            autoComplete=\"current-password\"\n            leftIcon={\n              <svg\n                width=\"20\"\n                height=\"20\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n              >\n                <rect x=\"3\" y=\"11\" width=\"18\" height=\"11\" rx=\"2\" ry=\"2\"></rect>\n                <circle cx=\"12\" cy=\"16\" r=\"1\"></circle>\n                <path d=\"M7 11V7a5 5 0 0 1 10 0v4\"></path>\n              </svg>\n            }\n          />\n\n          {/* Submit Button */}\n          <Button\n            type=\"submit\"\n            disabled={isSubmitting || loading}\n            loading={isSubmitting}\n            variant=\"primary\"\n            size=\"regular\"\n            fullWidth\n          >\n            Sign In\n          </Button>\n        </form>\n\n        {/* Footer */}\n        <div className=\"mt-6 space-y-3 text-center\">\n          <p className=\"text-sm text-secondary\">\n            Don&apos;t have an account?{' '}\n            <a href=\"/signup\" className=\"font-medium text-primary-400 hover:text-primary-300\">\n              Create one here\n            </a>\n          </p>\n          <p className=\"text-xs text-muted\">Need help? Contact your Barangay Administrator</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/LoginForm/LoginForm.tsx",
          "lineCount": 178,
          "cyclomaticComplexity": 24,
          "cognitiveComplexity": 29
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "LoginForm",
          "line": 14,
          "message": "Function 'LoginForm' has 178 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "LoginForm",
          "line": 14,
          "complexity": 24,
          "message": "Function 'LoginForm' has cyclomatic complexity of 24 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "LoginForm",
          "line": 14,
          "complexity": 29,
          "message": "Function 'LoginForm' has cognitive complexity of 29 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/Navigation/Navigation.stories.tsx",
      "lineCount": 402,
      "functions": [
        {
          "name": "HomeIcon",
          "startLine": 54,
          "endLine": 55,
          "code": "const HomeIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n",
          "filePath": "src/components/organisms/Navigation/Navigation.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "UsersIcon",
          "startLine": 64,
          "endLine": 65,
          "code": "const UsersIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n",
          "filePath": "src/components/organisms/Navigation/Navigation.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "ChartBarIcon",
          "startLine": 74,
          "endLine": 75,
          "code": "const ChartBarIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n",
          "filePath": "src/components/organisms/Navigation/Navigation.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "CogIcon",
          "startLine": 84,
          "endLine": 85,
          "code": "const CogIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n",
          "filePath": "src/components/organisms/Navigation/Navigation.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 250,
          "endLine": 301,
          "code": "  render: () => {\n    const barangayNavItems: NavigationItem[] = [\n      {\n        name: 'Dashboard',\n        href: '/dashboard',\n        icon: HomeIcon,\n        description: 'Barangay overview',\n      },\n      {\n        name: 'Mga Residente',\n        href: '/residents',\n        icon: UsersIcon,\n        description: 'Resident management',\n        children: [\n          { name: 'Lahat ng Residente', href: '/residents' },\n          { name: 'Dagdag Residente', href: '/residents/add' },\n          { name: 'Pamilyang Records', href: '/residents/households' },\n        ],\n      },\n      {\n        name: 'Mga Ulat',\n        href: '/reports',\n        icon: ChartBarIcon,\n        description: 'Reports and analytics',\n        children: [\n          { name: 'Demographics', href: '/reports/demographics' },\n          { name: 'Sectoral Groups', href: '/reports/sectoral' },\n          { name: 'Barangay Profile', href: '/reports/profile' },\n        ],\n      },\n    ];\n\n    const barangayBottomItems: NavigationItem[] = [\n      {\n        name: 'Settings',\n        href: '/settings',\n        icon: CogIcon,\n      },\n    ];\n\n    return (\n      <div className=\"h-96 w-72 rounded-lg border border-gray-200 bg-white shadow-sm\">\n        <div className=\"border-b border-gray-200 p-4\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">Barangay San Lorenzo</h2>\n          <p className=\"text-sm text-gray-500\">Makati City, Metro Manila</p>\n        </div>\n        <div className=\"p-4\">\n          <Navigation items={barangayNavItems} bottomItems={barangayBottomItems} />\n        </div>\n      </div>\n    );\n  },\n",
          "filePath": "src/components/organisms/Navigation/Navigation.stories.tsx",
          "lineCount": 52,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 339,
          "endLine": 377,
          "code": "  render: () => {\n    const notificationNavItems: NavigationItem[] = [\n      {\n        name: 'Dashboard',\n        href: '/dashboard',\n        icon: HomeIcon,\n      },\n      {\n        name: 'Residents',\n        href: '/residents',\n        icon: UsersIcon,\n        children: [\n          { name: 'All Residents (1,234)', href: '/residents' },\n          { name: 'Pending Approval (5)', href: '/residents/pending' },\n          { name: 'New Registrations (12)', href: '/residents/new' },\n        ],\n      },\n      {\n        name: 'Reports',\n        href: '/reports',\n        icon: ChartBarIcon,\n        children: [\n          { name: 'Demographics', href: '/reports/demographics' },\n          { name: 'Monthly Report (Due)', href: '/reports/monthly' },\n        ],\n      },\n    ];\n\n    return (\n      <div className=\"w-80 space-y-4\">\n        <Navigation items={notificationNavItems} bottomItems={bottomNavItems} showSubmenu={true} />\n        <div className=\"rounded-lg border border-yellow-200 bg-yellow-50 p-3\">\n          <p className=\"text-sm text-yellow-800\">\n            <strong>5</strong> residents pending approval\n          </p>\n        </div>\n      </div>\n    );\n  },\n",
          "filePath": "src/components/organisms/Navigation/Navigation.stories.tsx",
          "lineCount": 39,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 402 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 250,
          "message": "Function 'render' has 52 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 339,
          "message": "Function 'render' has 39 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/Navigation/Navigation.tsx",
      "lineCount": 307,
      "functions": [
        {
          "name": "HomeIcon",
          "startLine": 22,
          "endLine": 32,
          "code": "function HomeIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        d=\"m2.25 12 8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25\"\n      />\n    </svg>\n  );\n}\n",
          "filePath": "src/components/organisms/Navigation/Navigation.tsx",
          "lineCount": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "UsersIcon",
          "startLine": 34,
          "endLine": 44,
          "code": "function UsersIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        d=\"M15 19.128a9.38 9.38 0 0 0 2.625.372 9.337 9.337 0 0 0 4.121-.952 4.125 4.125 0 0 0-7.533-2.493M15 19.128v-.003c0-1.113-.285-2.16-.786-3.07M15 19.128v.106A12.318 12.318 0 0 1 8.624 21c-2.331 0-4.512-.645-6.374-1.766l-.001-.109a6.375 6.375 0 0 1 11.964-3.07M12 6.375a3.375 3.375 0 1 1-6.75 0 3.375 3.375 0 0 1 6.75 0Zm8.25 2.25a2.625 2.625 0 1 1-5.25 0 2.625 2.625 0 0 1 5.25 0Z\"\n      />\n    </svg>\n  );\n}\n",
          "filePath": "src/components/organisms/Navigation/Navigation.tsx",
          "lineCount": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "HomeModernIcon",
          "startLine": 46,
          "endLine": 56,
          "code": "function HomeModernIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        d=\"M8.25 21v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21m0 0h4.5V3.545M12.75 21h7.5V10.75M2.25 21h1.5m18 0h-18M2.25 9l4.5-1.636M18.75 3l-1.5.545m0 6.205 3 1m1.5.5-1.5-.5M6.75 7.364V3h-3v18m3-13.636 10.5-3.819\"\n      />\n    </svg>\n  );\n}\n",
          "filePath": "src/components/organisms/Navigation/Navigation.tsx",
          "lineCount": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "MapIcon",
          "startLine": 58,
          "endLine": 68,
          "code": "function MapIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        d=\"M9 6.75V15m6-6v8.25m.503 3.498 4.875-2.437c.381-.19.622-.58.622-1.006V4.82c0-.836-.88-1.38-1.628-1.006l-3.869 1.934c-.317.159-.69.159-1.006 0L9.503 3.252a1.125 1.125 0 0 0-1.006 0L3.622 5.689C3.24 5.88 3 6.27 3 6.695V19.18c0 .836.88 1.38 1.628 1.006l3.869-1.934c.317-.159.69-.159 1.006 0l4.994 2.497c.317.158.69.158 1.006 0Z\"\n      />\n    </svg>\n  );\n}\n",
          "filePath": "src/components/organisms/Navigation/Navigation.tsx",
          "lineCount": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "DocumentChartBarIcon",
          "startLine": 70,
          "endLine": 80,
          "code": "function DocumentChartBarIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        d=\"M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25M9 16.5v.75m3-3v3M15 12v5.25m-4.5-15H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z\"\n      />\n    </svg>\n  );\n}\n",
          "filePath": "src/components/organisms/Navigation/Navigation.tsx",
          "lineCount": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "CogIcon",
          "startLine": 82,
          "endLine": 93,
          "code": "function CogIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        d=\"M9.594 3.94c.09-.542.56-.94 1.11-.94h2.593c.55 0 1.02.398 1.11.94l.213 1.281c.063.374.313.686.645.87.074.04.147.083.22.127.325.196.72.257 1.075.124l1.217-.456a1.125 1.125 0 0 1 1.37.49l1.296 2.247a1.125 1.125 0 0 1-.26 1.431l-1.003.827c-.293.241-.438.613-.43.992a6.759 6.759 0 0 1 0 .255c-.008.378.137.75.43.991l1.004.827c.424.35.534.955.26 1.43l-1.298 2.247a1.125 1.125 0 0 1-1.369.491l-1.217-.456c-.355-.133-.75-.072-1.076.124a6.57 6.57 0 0 1-.22.128c-.331.183-.581.495-.644.869l-.213 1.281c-.09.543-.56.94-1.11.94h-2.594c-.55 0-1.019-.398-1.11-.94l-.213-1.281c-.062-.374-.312-.686-.644-.87a6.52 6.52 0 0 1-.22-.127c-.325-.196-.72-.257-1.076-.124l-1.217.456a1.125 1.125 0 0 1-1.369-.49l-1.297-2.247a1.125 1.125 0 0 1 .26-1.431l1.004-.827c.292-.24.437-.613.43-.991a6.932 6.932 0 0 1 0-.255c.007-.38-.138-.751-.43-.992l-1.004-.827a1.125 1.125 0 0 1-.26-1.43l1.297-2.247a1.125 1.125 0 0 1 1.37-.491l1.216.456c.356.133.751.072 1.076-.124.072-.044.146-.086.22-.128.332-.183.582-.495.644-.869l.214-1.28Z\"\n      />\n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\" />\n    </svg>\n  );\n}\n",
          "filePath": "src/components/organisms/Navigation/Navigation.tsx",
          "lineCount": 12,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "BusinessIcon",
          "startLine": 95,
          "endLine": 105,
          "code": "function BusinessIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        d=\"M2.25 21h19.5m-18-18v18m2.25-18v18m13.5-18v18m2.25-18v18M6.75 6.75h.75m-.75 3h.75m-.75 3h.75m3-6h.75m-.75 3h.75m-.75 3h.75M6.75 21v-3.375c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21M3 3h12m-.75 4.5H21m-3.75 3.75h.008v.008h-.008v-.008zm0 3h.008v.008h-.008v-.008zm0 3h.008v.008h-.008v-.008z\"\n      />\n    </svg>\n  );\n}\n",
          "filePath": "src/components/organisms/Navigation/Navigation.tsx",
          "lineCount": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "ScaleIcon",
          "startLine": 107,
          "endLine": 117,
          "code": "function ScaleIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        d=\"M12 3v17.25m0 0c-1.472 0-2.882.265-4.185.75L12 21l4.185-.75A17.8 17.8 0 0 0 12 20.25zm0 0L7.5 21l4.5.75 4.5-.75L12 20.25zm0-16.5L16.5 3l-4.5.75L7.5 3l4.5.75z\"\n      />\n    </svg>\n  );\n}\n",
          "filePath": "src/components/organisms/Navigation/Navigation.tsx",
          "lineCount": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "DocumentIcon",
          "startLine": 119,
          "endLine": 129,
          "code": "function DocumentIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        d=\"M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m2.25 0H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z\"\n      />\n    </svg>\n  );\n}\n",
          "filePath": "src/components/organisms/Navigation/Navigation.tsx",
          "lineCount": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "QuestionMarkCircleIcon",
          "startLine": 131,
          "endLine": 141,
          "code": "function QuestionMarkCircleIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        d=\"M9.879 7.519c0-1.628 1.32-2.948 2.948-2.948s2.948 1.32 2.948 2.948c0 1.628-1.32 2.948-2.948 2.948s-2.948-1.32-2.948-2.948zM12 16.5V14m0 0V9.75m0 4.25h.008v.008H12v-.008z\"\n      />\n    </svg>\n  );\n}\n",
          "filePath": "src/components/organisms/Navigation/Navigation.tsx",
          "lineCount": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "BellIcon",
          "startLine": 143,
          "endLine": 153,
          "code": "function BellIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        d=\"M14.857 17.082a23.848 23.848 0 0 0 5.454-1.31A8.967 8.967 0 0 1 18 9.75V9A6 6 0 0 0 6 9v.75a8.967 8.967 0 0 1-2.312 6.022c1.733.64 3.56 1.085 5.455 1.31m5.714 0a24.255 24.255 0 0 1-5.714 0m5.714 0a3 3 0 1 1-5.714 0\"\n      />\n    </svg>\n  );\n}\n",
          "filePath": "src/components/organisms/Navigation/Navigation.tsx",
          "lineCount": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "NavigationItemComponent",
          "startLine": 206,
          "endLine": 246,
          "code": "function NavigationItemComponent({\n  item,\n  currentPath,\n  showSubmenu = true,\n  className = '',\n}: NavigationItemProps) {\n  const isActive = currentPath === item.href;\n  const hasActiveChild = item.children?.some(child => currentPath === child.href);\n  const shouldShowSubmenu = showSubmenu && (isActive || hasActiveChild) && item.children;\n\n  return (\n    <li key={item.name} className={className}>\n      <Link\n        href={item.href}\n        className={`${navigationStyles.base} ${\n          isActive ? navigationStyles.active : navigationStyles.inactive\n        }`}\n        aria-current={isActive ? 'page' : undefined}\n      >\n        {item.icon && (\n          <item.icon\n            className={isActive ? navigationStyles.iconActive : navigationStyles.iconInactive}\n          />\n        )}\n        {item.name}\n      </Link>\n\n      {shouldShowSubmenu && (\n        <div className={navigationStyles.submenu}>\n          {item.children?.map(child => (\n            <div key={child.name} className={navigationStyles.submenuItem}>\n              <Link href={child.href}>\n                <div className={navigationStyles.submenuLink}>{child.name}</div>\n              </Link>\n            </div>\n          ))}\n        </div>\n      )}\n    </li>\n  );\n}\n",
          "filePath": "src/components/organisms/Navigation/Navigation.tsx",
          "lineCount": 41,
          "cyclomaticComplexity": 9,
          "cognitiveComplexity": 7
        },
        {
          "name": "Navigation",
          "startLine": 258,
          "endLine": 303,
          "code": "export default function Navigation({\n  items = defaultNavigation,\n  bottomItems = bottomNavigation,\n  showIcons: _showIcons = true,\n  showSubmenu = true,\n  variant: _variant = 'default',\n  className = '',\n}: NavigationProps) {\n  const pathname = usePathname();\n\n  return (\n    <nav className={`flex flex-1 flex-col ${className}`}>\n      <ul role=\"list\" className=\"flex flex-1 flex-col gap-y-7\">\n        {/* Main navigation */}\n        <li>\n          <ul role=\"list\" className=\"-mx-2 space-y-1\">\n            {items.map(item => (\n              <NavigationItemComponent\n                key={item.name}\n                item={item}\n                currentPath={pathname}\n                showSubmenu={showSubmenu}\n              />\n            ))}\n          </ul>\n        </li>\n\n        {/* Bottom navigation */}\n        {bottomItems.length > 0 && (\n          <li className=\"mt-auto\">\n            <ul role=\"list\" className=\"-mx-2 space-y-1\">\n              {bottomItems.map(item => (\n                <NavigationItemComponent\n                  key={item.name}\n                  item={item}\n                  currentPath={pathname}\n                  showSubmenu={showSubmenu}\n                />\n              ))}\n            </ul>\n          </li>\n        )}\n      </ul>\n    </nav>\n  );\n}\n",
          "filePath": "src/components/organisms/Navigation/Navigation.tsx",
          "lineCount": 46,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 307 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "NavigationItemComponent",
          "line": 206,
          "message": "Function 'NavigationItemComponent' has 41 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "Navigation",
          "line": 258,
          "message": "Function 'Navigation' has 46 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/PSOCSelector/PSOCSelector.stories.tsx",
      "lineCount": 532,
      "functions": [
        {
          "name": "render",
          "startLine": 125,
          "endLine": 126,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/organisms/PSOCSelector/PSOCSelector.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "FormIntegrationComponent",
          "startLine": 175,
          "endLine": 277,
          "code": "const FormIntegrationComponent = () => {\n  const [selectedOccupation, setSelectedOccupation] = React.useState<any>(null);\n  const [employmentStatus, setEmploymentStatus] = React.useState('');\n  const [workplace, setWorkplace] = React.useState('');\n  const [error, setError] = React.useState('');\n\n  const handleOccupationSelect = (occupation: any) => {\n    setSelectedOccupation(occupation);\n    if (error) setError('');\n  };\n\n  const handleSubmit = () => {\n    if (employmentStatus === 'employed' && !selectedOccupation) {\n      setError('Please select your occupation');\n      return;\n    }\n\n    const formData = {\n      occupation: selectedOccupation,\n      employmentStatus,\n      workplace,\n    };\n\n    action('employment-form-submitted')(formData);\n    alert('Employment information submitted successfully!');\n  };\n\n  return (\n    <div className=\"max-w-2xl space-y-6\">\n      <div className=\"space-y-4\">\n        <div>\n          <label className=\"mb-2 block text-sm font-medium text-gray-700\">\n            Employment Status *\n          </label>\n          <select\n            value={employmentStatus}\n            onChange={e => setEmploymentStatus(e.target.value)}\n            className=\"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"\">Select employment status</option>\n            <option value=\"employed\">Employed</option>\n            <option value=\"self_employed\">Self-Employed</option>\n            <option value=\"unemployed\">Unemployed</option>\n            <option value=\"student\">Student</option>\n            <option value=\"retired\">Retired</option>\n          </select>\n        </div>\n\n        {(employmentStatus === 'employed' || employmentStatus === 'self_employed') && (\n          <>\n            <div>\n              <label className=\"mb-2 block text-sm font-medium text-gray-700\">Occupation *</label>\n              <PSOCSelector\n                value={selectedOccupation?.occupation_code || ''}\n                onSelect={handleOccupationSelect}\n                placeholder=\"Search for your occupation\"\n                error={error}\n              />\n              <p className=\"mt-1 text-xs text-gray-500\">\n                Search by job title, industry, or occupation category\n              </p>\n            </div>\n\n            <div>\n              <label className=\"mb-2 block text-sm font-medium text-gray-700\">Workplace</label>\n              <input\n                type=\"text\"\n                value={workplace}\n                onChange={e => setWorkplace(e.target.value)}\n                className=\"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"Company or workplace name\"\n              />\n            </div>\n          </>\n        )}\n      </div>\n\n      {selectedOccupation && (\n        <div className=\"rounded border border-green-200 bg-green-50 p-4\">\n          <h4 className=\"mb-2 font-semibold text-green-800\">Selected Occupation</h4>\n          <div className=\"space-y-1 text-sm text-green-700\">\n            <div>\n              <strong>Title:</strong> {selectedOccupation.occupation_title}\n            </div>\n            <div>\n              <strong>Code:</strong> {selectedOccupation.occupation_code}\n            </div>\n            <div>\n              <strong>Level:</strong> {selectedOccupation.level_type.replace('_', ' ')}\n            </div>\n          </div>\n        </div>\n      )}\n\n      <button\n        onClick={handleSubmit}\n        className=\"w-full rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n      >\n        Submit Employment Information\n      </button>\n    </div>\n  );\n};\n",
          "filePath": "src/components/organisms/PSOCSelector/PSOCSelector.stories.tsx",
          "lineCount": 103,
          "cyclomaticComplexity": 8,
          "cognitiveComplexity": 7
        },
        {
          "name": "render",
          "startLine": 287,
          "endLine": 288,
          "code": "  render: () => <FormIntegrationComponent />,\n};\n",
          "filePath": "src/components/organisms/PSOCSelector/PSOCSelector.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "CommonOccupationsComponent",
          "startLine": 290,
          "endLine": 393,
          "code": "const CommonOccupationsComponent = () => {\n  const [selectedExample, setSelectedExample] = React.useState<any>(null);\n\n  const commonOccupations = [\n    {\n      title: 'Elementary Teacher',\n      code: '2341',\n      level: 'unit_group',\n      description: 'Primary School Teachers',\n      category: 'Education',\n    },\n    {\n      title: 'Barangay Captain',\n      code: '1112',\n      level: 'unit_group',\n      description: 'Senior Government Officials',\n      category: 'Government',\n    },\n    {\n      title: 'Tricycle Driver',\n      code: '8322',\n      level: 'unit_group',\n      description: 'Car, Taxi and Van Drivers',\n      category: 'Transportation',\n    },\n    {\n      title: 'Store Keeper',\n      code: '5223',\n      level: 'unit_group',\n      description: 'Shop Keepers',\n      category: 'Retail',\n    },\n    {\n      title: 'Security Guard',\n      code: '5414',\n      level: 'unit_group',\n      description: 'Security Guards',\n      category: 'Security',\n    },\n    {\n      title: 'Call Center Agent',\n      code: '4222',\n      level: 'unit_group',\n      description: 'Contact Centre Information Clerks',\n      category: 'Business Process Outsourcing',\n    },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"mb-3 text-lg font-semibold\">Common Occupations in Filipino Communities</h3>\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {commonOccupations.map((occupation, index) => (\n            <div\n              key={index}\n              className=\"cursor-pointer rounded-lg border border-gray-200 p-4 hover:bg-gray-50\"\n              onClick={() => setSelectedExample(occupation)}\n            >\n              <h4 className=\"font-semibold text-gray-900\">{occupation.title}</h4>\n              <p className=\"text-sm text-gray-600\">{occupation.category}</p>\n              <p className=\"mt-1 text-xs text-gray-500\">Code: {occupation.code}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div>\n        <label className=\"mb-2 block text-sm font-medium text-gray-700\">\n          Try selecting an occupation:\n        </label>\n        <PSOCSelector\n          value={selectedExample?.code || ''}\n          onSelect={occupation => {\n            action('common-occupation-selected')(occupation);\n            setSelectedExample(occupation);\n          }}\n          placeholder=\"Click an occupation above or search manually\"\n        />\n      </div>\n\n      {selectedExample && (\n        <div className=\"rounded border border-blue-200 bg-blue-50 p-4\">\n          <h4 className=\"mb-2 font-semibold text-blue-800\">Occupation Details</h4>\n          <div className=\"space-y-1 text-sm text-blue-700\">\n            <div>\n              <strong>Title:</strong> {selectedExample.occupation_title || selectedExample.title}\n            </div>\n            <div>\n              <strong>Description:</strong>{' '}\n              {selectedExample.occupation_description || selectedExample.description}\n            </div>\n            <div>\n              <strong>Code:</strong> {selectedExample.occupation_code || selectedExample.code}\n            </div>\n            <div>\n              <strong>Level:</strong> {selectedExample.level_type || selectedExample.level}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n",
          "filePath": "src/components/organisms/PSOCSelector/PSOCSelector.stories.tsx",
          "lineCount": 104,
          "cyclomaticComplexity": 7,
          "cognitiveComplexity": 6
        },
        {
          "name": "render",
          "startLine": 403,
          "endLine": 404,
          "code": "  render: () => <CommonOccupationsComponent />,\n};\n",
          "filePath": "src/components/organisms/PSOCSelector/PSOCSelector.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "LoadingAndErrorStatesComponent",
          "startLine": 406,
          "endLine": 488,
          "code": "const LoadingAndErrorStatesComponent = () => {\n  const [currentState, setCurrentState] = React.useState<\n    'default' | 'loading' | 'no_data' | 'error'\n  >('default');\n\n  const states = [\n    { key: 'default', label: 'Default' },\n    { key: 'loading', label: 'Loading' },\n    { key: 'no_data', label: 'No Results' },\n    { key: 'error', label: 'Error State' },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"mb-3 text-lg font-semibold\">Component States</h3>\n        <div className=\"flex flex-wrap gap-2\">\n          {states.map(state => (\n            <button\n              key={state.key}\n              onClick={() => setCurrentState(state.key as any)}\n              className={`rounded px-4 py-2 text-sm ${\n                currentState === state.key\n                  ? 'bg-blue-600 text-white'\n                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n              }`}\n            >\n              {state.label}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      <div>\n        <label className=\"mb-2 block text-sm font-medium text-gray-700\">\n          PSOC Selector - {states.find(s => s.key === currentState)?.label} State\n        </label>\n\n        {currentState === 'default' && (\n          <PSOCSelector\n            value=\"\"\n            onSelect={action('state-demo-select')}\n            placeholder=\"Normal state - type to search\"\n          />\n        )}\n\n        {currentState === 'loading' && (\n          <div>\n            <PSOCSelector\n              value=\"\"\n              onSelect={action('state-demo-select')}\n              placeholder=\"Loading state simulation\"\n            />\n            <p className=\"mt-2 text-sm text-gray-600\">\n              💡 In real usage, this shows spinner while searching PSOC database\n            </p>\n          </div>\n        )}\n\n        {currentState === 'no_data' && (\n          <div>\n            <PSOCSelector\n              value=\"\"\n              onSelect={action('state-demo-select')}\n              placeholder='Type \"xyz123\" to simulate no results'\n            />\n            <p className=\"mt-2 text-sm text-gray-600\">\n              💡 Shows \"No occupations found\" message when search returns empty\n            </p>\n          </div>\n        )}\n\n        {currentState === 'error' && (\n          <PSOCSelector\n            value=\"\"\n            onSelect={action('state-demo-select')}\n            error=\"Unable to connect to PSOC database. Please try again.\"\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/organisms/PSOCSelector/PSOCSelector.stories.tsx",
          "lineCount": 83,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 4
        },
        {
          "name": "render",
          "startLine": 498,
          "endLine": 499,
          "code": "  render: () => <LoadingAndErrorStatesComponent />,\n};\n",
          "filePath": "src/components/organisms/PSOCSelector/PSOCSelector.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 509,
          "endLine": 510,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/organisms/PSOCSelector/PSOCSelector.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 532 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "FormIntegrationComponent",
          "line": 175,
          "message": "Function 'FormIntegrationComponent' has 103 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "CommonOccupationsComponent",
          "line": 290,
          "message": "Function 'CommonOccupationsComponent' has 104 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "LoadingAndErrorStatesComponent",
          "line": 406,
          "message": "Function 'LoadingAndErrorStatesComponent' has 83 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/PSOCSelector/PSOCSelector.tsx",
      "lineCount": 354,
      "functions": [
        {
          "name": "onSelect",
          "startLine": 18,
          "endLine": 19,
          "code": "  onSelect: (option: PSOCOption | null) => void;\n  placeholder?: string;\n",
          "filePath": "src/components/organisms/PSOCSelector/PSOCSelector.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "PSOCSelector",
          "startLine": 24,
          "endLine": 353,
          "code": "export default function PSOCSelector({\n  value,\n  onSelect,\n  placeholder = 'Search for occupation...',\n  className = '',\n  error,\n}: PSOCSelectorProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [options, setOptions] = useState<PSOCOption[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedOption, setSelectedOption] = useState<PSOCOption | null>(null);\n  const [debounceTimer, setDebounceTimer] = useState<NodeJS.Timeout | null>(null);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  // Generate unique ID for ARIA attributes\n  const listboxId = `psoc-listbox-${Math.random().toString(36).substr(2, 9)}`;\n\n  // Search PSOC occupations\n  const searchOccupations = useCallback(async (query: string) => {\n    if (!query.trim()) {\n      setOptions([]);\n      return;\n    }\n\n    setLoading(true);\n    try {\n      logger.debug('Searching PSOC for', { query });\n\n      // Try the view first\n      const { data, error } = await supabase\n        .from('psoc_occupation_search')\n        .select('*')\n        .or(`occupation_title.ilike.%${query}%, full_hierarchy.ilike.%${query}%`)\n        .order('hierarchy_level', { ascending: true })\n        .order('occupation_title', { ascending: true })\n        .limit(50);\n\n      logger.debug('PSOC view search result', { hasData: !!data, error, dataLength: data?.length });\n\n      // If view works and has data, use it\n      if (!error && data && data.length > 0) {\n        setOptions(data);\n        return;\n      }\n\n      // If view doesn't exist or has no data, try direct table queries\n      if (error || !data || data.length === 0) {\n        logger.debug('Trying direct PSOC table queries');\n\n        // Try major groups first\n        const { data: majorGroups } = await supabase\n          .from('psoc_major_groups')\n          .select('code, title')\n          .ilike('title', `%${query}%`)\n          .limit(10);\n\n        if (majorGroups && majorGroups.length > 0) {\n          const formattedData = majorGroups.map(group => ({\n            occupation_code: group.code,\n            level_type: 'major_group',\n            occupation_title: group.title,\n            occupation_description: null,\n            full_hierarchy: group.title,\n            hierarchy_level: 4,\n          }));\n          setOptions(formattedData);\n          return;\n        }\n\n        // Try unit groups\n        const { data: unitGroups } = await supabase\n          .from('psoc_unit_groups')\n          .select('code, title')\n          .ilike('title', `%${query}%`)\n          .limit(20);\n\n        if (unitGroups && unitGroups.length > 0) {\n          const formattedData = unitGroups.map(group => ({\n            occupation_code: group.code,\n            level_type: 'unit_group',\n            occupation_title: group.title,\n            occupation_description: null,\n            full_hierarchy: group.title,\n            hierarchy_level: 1,\n          }));\n          setOptions(formattedData);\n          return;\n        }\n\n        // Try unit sub-groups (most specific occupations like \"Radiology technician\")\n        const { data: unitSubGroups } = await supabase\n          .from('psoc_unit_sub_groups')\n          .select('code, title')\n          .ilike('title', `%${query}%`)\n          .limit(30);\n\n        if (unitSubGroups && unitSubGroups.length > 0) {\n          const formattedData = unitSubGroups.map(group => ({\n            occupation_code: group.code,\n            level_type: 'unit_sub_group',\n            occupation_title: group.title,\n            occupation_description: null,\n            full_hierarchy: group.title,\n            hierarchy_level: 0,\n          }));\n          setOptions(formattedData);\n          return;\n        }\n\n        logger.warn('No PSOC data found in any table');\n        setOptions([]);\n      }\n    } catch (error) {\n      logError(error as Error, 'PSOC_SEARCH_ERROR');\n      setOptions([]);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Debounced search\n  useEffect(() => {\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n\n    const timer = setTimeout(() => {\n      searchOccupations(searchQuery);\n    }, 300);\n\n    setDebounceTimer(timer);\n\n    return () => {\n      if (timer) clearTimeout(timer);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchQuery, searchOccupations]);\n\n  // Handle input changes\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const query = e.target.value;\n    setSearchQuery(query);\n    setIsOpen(true);\n\n    if (!query.trim()) {\n      setSelectedOption(null);\n      onSelect(null);\n    }\n  };\n\n  // Handle option selection\n  const handleOptionSelect = (option: PSOCOption) => {\n    setSelectedOption(option);\n    setSearchQuery(option.occupation_title);\n    setIsOpen(false);\n    onSelect(option);\n  };\n\n  // Handle click outside to close dropdown\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  // Load initial value if provided\n  useEffect(() => {\n    if (value && !selectedOption) {\n      // Load the selected PSOC option by code\n      const loadSelectedOption = async () => {\n        try {\n          const { data, error } = await supabase\n            .from('psoc_occupation_search')\n            .select('*')\n            .eq('occupation_code', value)\n            .maybeSingle(); // Use maybeSingle instead of single to handle no results gracefully\n\n          if (data && !error) {\n            setSelectedOption(data);\n            setSearchQuery(data.occupation_title);\n          } else if (error) {\n            logger.debug('Could not load PSOC option by code', { value, error: error.message });\n          }\n        } catch (error) {\n          logError(error as Error, 'PSOC_OPTION_LOAD_ERROR');\n        }\n      };\n      loadSelectedOption();\n    }\n  }, [value, selectedOption]);\n\n  return (\n    <div className=\"relative\" ref={dropdownRef}>\n      {/* Input Container - Figma: exact 8px padding, structured like InputField */}\n      <div\n        className={`relative flex w-full items-center transition-colors font-system focus-within:outline-none ${\n          error\n            ? 'rounded border border-red-600 bg-surface focus-within:border-red-600 focus-within:shadow-[0px_0px_0px_4px_rgba(220,38,38,0.32)]'\n            : 'rounded border bg-surface border-default focus-within:border-blue-600 focus-within:shadow-[0px_0px_0px_4px_rgba(59,130,246,0.32)]'\n        } min-h-10 p-2 text-base ${className}`}\n      >\n        {/* Content Area - Figma: basis-0 grow flex-col gap-0.5 items-center justify-center px-1 py-0 */}\n        <div className=\"flex min-h-0 min-w-0 grow basis-0 flex-col items-center justify-center gap-0.5 px-1 py-0\">\n          {/* Input wrapped in flex container - Figma: flex flex-col justify-center */}\n          <div className=\"font-montserrat flex w-full flex-col justify-center overflow-hidden text-ellipsis text-nowrap font-normal leading-5\">\n            <input\n              ref={inputRef}\n              type=\"text\"\n              value={searchQuery}\n              onChange={handleInputChange}\n              onFocus={() => setIsOpen(true)}\n              className=\"font-montserrat w-full border-0 bg-transparent text-base font-normal leading-5 shadow-none outline-0 ring-0 text-primary placeholder:text-muted focus:border-0 focus:shadow-none focus:outline-0 focus:ring-0 active:border-0 active:shadow-none active:outline-0 active:ring-0\"\n              style={{\n                border: 'none',\n                outline: 'none',\n                boxShadow: 'none',\n                appearance: 'none',\n              }}\n              placeholder={placeholder}\n              role=\"combobox\"\n              aria-expanded={isOpen}\n              aria-haspopup=\"listbox\"\n              aria-controls={listboxId}\n              aria-invalid={error ? 'true' : 'false'}\n            />\n          </div>\n        </div>\n\n        {/* Loading indicator - Figma: w-5 (20px width) */}\n        {loading && (\n          <div className=\"flex size-5 shrink-0 items-center justify-center text-secondary\">\n            <svg className=\"size-4 animate-spin\" fill=\"none\" viewBox=\"0 0 24 24\">\n              <circle\n                className=\"opacity-25\"\n                cx=\"12\"\n                cy=\"12\"\n                r=\"10\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"\n              ></circle>\n              <path\n                className=\"opacity-75\"\n                fill=\"currentColor\"\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n              ></path>\n            </svg>\n          </div>\n        )}\n      </div>\n\n      {/* Dropdown */}\n      {isOpen && (\n        <div\n          id={listboxId}\n          role=\"listbox\"\n          className=\"ring-border-default absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-lg shadow-lg ring-1 bg-surface\"\n        >\n          {loading ? (\n            <div className=\"flex items-center gap-2 px-3 py-2 text-sm/6 text-muted\">\n              <svg className=\"size-4 animate-spin\" fill=\"none\" viewBox=\"0 0 24 24\">\n                <circle\n                  className=\"opacity-25\"\n                  cx=\"12\"\n                  cy=\"12\"\n                  r=\"10\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"4\"\n                ></circle>\n                <path\n                  className=\"opacity-75\"\n                  fill=\"currentColor\"\n                  d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                ></path>\n              </svg>\n              Searching occupations...\n            </div>\n          ) : options.length > 0 ? (\n            <ul className=\"py-1\">\n              {options.map(option => (\n                <li key={option.occupation_code}>\n                  <button\n                    type=\"button\"\n                    onClick={() => handleOptionSelect(option)}\n                    role=\"option\"\n                    aria-selected={selectedOption?.occupation_code === option.occupation_code}\n                    className=\"w-full px-3 py-2 text-left text-sm/6 text-primary hover:bg-surface-hover focus:outline-none focus:bg-surface-hover\"\n                  >\n                    <div className=\"font-medium\">{option.occupation_title}</div>\n                    <div className=\"text-xs text-muted\">\n                      {option.full_hierarchy} • {option.occupation_code} •{' '}\n                      {option.level_type.replace('_', ' ')}\n                    </div>\n                  </button>\n                </li>\n              ))}\n            </ul>\n          ) : searchQuery.trim() ? (\n            <div className=\"px-3 py-2 text-sm/6 text-muted\">\n              <div>No occupations found for &quot;{searchQuery}&quot;</div>\n              <div className=\"mt-1 text-xs text-muted\">\n                Note: PSOC data may not be loaded in the database yet.\n              </div>\n            </div>\n          ) : (\n            <div className=\"px-3 py-2 text-sm/6 text-muted\">\n              Start typing to search occupations...\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Error message styled like InputField */}\n      {error && (\n        <div className=\"mt-2\">\n          <p className=\"text-xs leading-[14px] text-red-500 font-system\" role=\"alert\">\n            {error}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/PSOCSelector/PSOCSelector.tsx",
          "lineCount": 330,
          "cyclomaticComplexity": 33,
          "cognitiveComplexity": 48
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 354 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "PSOCSelector",
          "line": 24,
          "message": "Function 'PSOCSelector' has 330 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "PSOCSelector",
          "line": 24,
          "complexity": 33,
          "message": "Function 'PSOCSelector' has cyclomatic complexity of 33 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "PSOCSelector",
          "line": 24,
          "complexity": 48,
          "message": "Function 'PSOCSelector' has cognitive complexity of 48 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/PersonalInformation/PersonalInformation.stories.tsx",
      "lineCount": 559,
      "functions": [
        {
          "name": "ValidationDemoComponent",
          "startLine": 276,
          "endLine": 395,
          "code": "const ValidationDemoComponent = () => {\n  const [formData, setFormData] = React.useState<PersonalInformationData>(defaultFormData);\n  const [errors, setErrors] = React.useState<\n    Partial<Record<keyof PersonalInformationData, string>>\n  >({});\n\n  const validateForm = () => {\n    const newErrors: Partial<Record<keyof PersonalInformationData, string>> = {};\n\n    if (!formData.firstName.trim()) {\n      newErrors.firstName = 'First name is required';\n    }\n\n    if (!formData.lastName.trim()) {\n      newErrors.lastName = 'Last name is required';\n    }\n\n    if (!formData.birthdate) {\n      newErrors.birthdate = 'Birth date is required';\n    } else {\n      const birthDate = new Date(formData.birthdate);\n      const today = new Date();\n      if (birthDate > today) {\n        newErrors.birthdate = 'Birth date cannot be in the future';\n      }\n      if (birthDate.getFullYear() < 1900) {\n        newErrors.birthdate = 'Please enter a valid birth date';\n      }\n    }\n\n    if (!formData.sex) {\n      newErrors.sex = 'Please select sex';\n    }\n\n    if (!formData.civilStatus) {\n      newErrors.civilStatus = 'Civil status is required';\n    }\n\n    if (!formData.citizenship) {\n      newErrors.citizenship = 'Citizenship is required';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const calculateAge = (birthdate: string) => {\n    if (!birthdate) return 0;\n    const today = new Date();\n    const birth = new Date(birthdate);\n    let age = today.getFullYear() - birth.getFullYear();\n    const monthDiff = today.getMonth() - birth.getMonth();\n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\n      age--;\n    }\n    return age;\n  };\n\n  const handleSubmit = () => {\n    if (validateForm()) {\n      const age = calculateAge(formData.birthdate);\n      action('form-submitted')({ ...formData, age });\n      alert(`Form is valid! ${formData.firstName} ${formData.lastName} is ${age} years old.`);\n    } else {\n      alert('Please fix the errors before submitting.');\n    }\n  };\n\n  const handleChange = (newData: PersonalInformationData) => {\n    setFormData(newData);\n    // Clear errors for fields that are now valid\n    const newErrors = { ...errors };\n    Object.keys(newErrors).forEach(key => {\n      const fieldKey = key as keyof PersonalInformationData;\n      if (newData[fieldKey]) {\n        delete newErrors[fieldKey];\n      }\n    });\n    setErrors(newErrors);\n  };\n\n  return (\n    <div className=\"mx-auto max-w-4xl space-y-6\">\n      <PersonalInformation value={formData} onChange={handleChange} errors={errors} />\n\n      {formData.birthdate && (\n        <div className=\"rounded border border-blue-200 bg-blue-50 p-4\">\n          <p className=\"text-sm text-blue-800\">\n            <strong>Age:</strong> {calculateAge(formData.birthdate)} years old\n          </p>\n        </div>\n      )}\n\n      <div className=\"flex gap-4 border-t pt-6\">\n        <button\n          onClick={handleSubmit}\n          className=\"rounded bg-blue-600 px-6 py-2 text-white hover:bg-blue-700\"\n        >\n          Validate & Submit\n        </button>\n        <button\n          onClick={() => {\n            setFormData(defaultFormData);\n            setErrors({});\n          }}\n          className=\"rounded bg-gray-600 px-6 py-2 text-white hover:bg-gray-700\"\n        >\n          Clear Form\n        </button>\n      </div>\n\n      <div className=\"rounded border bg-gray-50 p-4\">\n        <h4 className=\"mb-2 font-semibold\">Current Form Data:</h4>\n        <pre className=\"overflow-auto rounded border bg-white p-2 text-xs\">\n          {JSON.stringify(formData, null, 2)}\n        </pre>\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/organisms/PersonalInformation/PersonalInformation.stories.tsx",
          "lineCount": 120,
          "cyclomaticComplexity": 18,
          "cognitiveComplexity": 25
        },
        {
          "name": "render",
          "startLine": 405,
          "endLine": 406,
          "code": "  render: () => <ValidationDemoComponent />,\n};\n",
          "filePath": "src/components/organisms/PersonalInformation/PersonalInformation.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 416,
          "endLine": 417,
          "code": "  render: () => (\n    <div className=\"space-y-8\">\n",
          "filePath": "src/components/organisms/PersonalInformation/PersonalInformation.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "CommonScenariosComponent",
          "startLine": 461,
          "endLine": 547,
          "code": "const CommonScenariosComponent = () => {\n  const [currentProfile, setCurrentProfile] = React.useState(0);\n\n  const profiles = [\n    {\n      title: 'Typical Filipino Name',\n      data: {\n        firstName: 'Maria Clara',\n        middleName: 'Santos',\n        lastName: 'dela Cruz',\n        extensionName: '',\n        birthdate: '1992-06-12',\n        sex: 'female' as const,\n        civilStatus: 'married',\n        citizenship: 'filipino',\n      },\n    },\n    {\n      title: 'With Name Extension',\n      data: {\n        firstName: 'Juan',\n        middleName: 'Bautista',\n        lastName: 'Rodriguez',\n        extensionName: 'III',\n        birthdate: '1985-03-08',\n        sex: 'male' as const,\n        civilStatus: 'married',\n        citizenship: 'filipino',\n      },\n    },\n    {\n      title: 'Single Name (Mononym)',\n      data: {\n        firstName: 'Isko',\n        middleName: '',\n        lastName: 'Moreno',\n        extensionName: '',\n        birthdate: '1974-10-24',\n        sex: 'male' as const,\n        civilStatus: 'married',\n        citizenship: 'filipino',\n      },\n    },\n    {\n      title: 'Chinese-Filipino',\n      data: {\n        firstName: 'Li Wei',\n        middleName: '',\n        lastName: 'Tan',\n        extensionName: '',\n        birthdate: '1988-11-15',\n        sex: 'male' as const,\n        civilStatus: 'single',\n        citizenship: 'filipino',\n      },\n    },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-wrap gap-2\">\n        {profiles.map((profile, index) => (\n          <button\n            key={profile.title}\n            onClick={() => setCurrentProfile(index)}\n            className={`rounded px-4 py-2 text-sm ${\n              currentProfile === index\n                ? 'bg-blue-600 text-white'\n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n            }`}\n          >\n            {profile.title}\n          </button>\n        ))}\n      </div>\n\n      <div className=\"rounded-lg border border-gray-200 p-6\">\n        <h3 className=\"mb-4 text-lg font-semibold\">{profiles[currentProfile].title}</h3>\n        <PersonalInformation\n          value={profiles[currentProfile].data}\n          onChange={action('profile-changed')}\n          errors={{}}\n        />\n      </div>\n    </div>\n  );\n};\n",
          "filePath": "src/components/organisms/PersonalInformation/PersonalInformation.stories.tsx",
          "lineCount": 87,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 557,
          "endLine": 558,
          "code": "  render: () => <CommonScenariosComponent />,\n};\n",
          "filePath": "src/components/organisms/PersonalInformation/PersonalInformation.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 559 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "ValidationDemoComponent",
          "line": 276,
          "message": "Function 'ValidationDemoComponent' has 120 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "ValidationDemoComponent",
          "line": 276,
          "complexity": 18,
          "message": "Function 'ValidationDemoComponent' has cyclomatic complexity of 18 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "ValidationDemoComponent",
          "line": 276,
          "complexity": 25,
          "message": "Function 'ValidationDemoComponent' has cognitive complexity of 25 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "CommonScenariosComponent",
          "line": 461,
          "message": "Function 'CommonScenariosComponent' has 87 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/PersonalInformation/PersonalInformation.tsx",
      "lineCount": 145,
      "functions": [
        {
          "name": "onChange",
          "startLine": 16,
          "endLine": 17,
          "code": "  onChange: (value: PersonalInformationData) => void;\n  errors?: Partial<Record<keyof PersonalInformationData, string>>;\n",
          "filePath": "src/components/organisms/PersonalInformation/PersonalInformation.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "PersonalInformation",
          "startLine": 43,
          "endLine": 144,
          "code": "export default function PersonalInformation({\n  value,\n  onChange,\n  errors = {},\n  className = '',\n}: PersonalInformationProps) {\n  const handleChange = (field: keyof PersonalInformationData, newValue: string) => {\n    onChange({\n      ...value,\n      [field]: newValue,\n    });\n  };\n\n  return (\n    <div className={`space-y-8 ${className}`}>\n      <div>\n        <h3 className=\"text-base/7 font-semibold text-primary\">Personal Information</h3>\n        <p className=\"mt-1 text-sm/6 text-secondary\">\n          Basic details and identification information.\n        </p>\n      </div>\n\n      {/* Name Fields */}\n      <div className=\"grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-2\">\n        <InputField\n          label=\"First Name\"\n          value={value.firstName}\n          onChange={e => handleChange('firstName', e.target.value)}\n          placeholder=\"Enter first name\"\n          required\n          errorMessage={errors.firstName}\n        />\n\n        <InputField\n          label=\"Middle Name\"\n          value={value.middleName}\n          onChange={e => handleChange('middleName', e.target.value)}\n          placeholder=\"Enter middle name\"\n        />\n\n        <InputField\n          label=\"Last Name\"\n          value={value.lastName}\n          onChange={e => handleChange('lastName', e.target.value)}\n          placeholder=\"Enter last name\"\n          required\n          errorMessage={errors.lastName}\n        />\n\n        <InputField\n          label=\"Extension Name\"\n          value={value.extensionName}\n          onChange={e => handleChange('extensionName', e.target.value)}\n          placeholder=\"Jr., Sr., III, etc.\"\n        />\n      </div>\n\n      {/* Birth Date and Basic Info */}\n      <div className=\"grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-3\">\n        <InputField\n          label=\"Birth Date\"\n          type=\"date\"\n          value={value.birthdate}\n          onChange={e => handleChange('birthdate', e.target.value)}\n          required\n          errorMessage={errors.birthdate}\n        />\n\n        <DropdownSelect\n          label=\"Sex\"\n          value={value.sex}\n          onChange={val => handleChange('sex', val)}\n          options={SEX_OPTIONS}\n          placeholder=\"Select sex\"\n          searchable={true}\n          required\n          errorMessage={errors.sex}\n        />\n\n        <DropdownSelect\n          label=\"Civil Status\"\n          value={value.civilStatus}\n          onChange={val => handleChange('civilStatus', val)}\n          options={CIVIL_STATUS_OPTIONS}\n          placeholder=\"Select civil status\"\n          errorMessage={errors.civilStatus}\n        />\n      </div>\n\n      {/* Citizenship */}\n      <div className=\"grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-2\">\n        <DropdownSelect\n          label=\"Citizenship\"\n          value={value.citizenship}\n          onChange={val => handleChange('citizenship', val)}\n          options={CITIZENSHIP_OPTIONS}\n          errorMessage={errors.citizenship}\n        />\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/PersonalInformation/PersonalInformation.tsx",
          "lineCount": 102,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "PersonalInformation",
          "line": 43,
          "message": "Function 'PersonalInformation' has 102 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/PopulationPyramid/PopulationPyramid.stories.tsx",
      "lineCount": 355,
      "functions": [
        {
          "name": "render",
          "startLine": 266,
          "endLine": 267,
          "code": "  render: () => (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 p-6 bg-gray-50 min-h-screen\">\n",
          "filePath": "src/components/organisms/PopulationPyramid/PopulationPyramid.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 307,
          "endLine": 308,
          "code": "  render: () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 p-6 bg-gray-50 min-h-screen\">\n",
          "filePath": "src/components/organisms/PopulationPyramid/PopulationPyramid.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 355 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/PopulationPyramid/PopulationPyramid.tsx",
      "lineCount": 358,
      "functions": [
        {
          "name": "PopulationPyramid",
          "startLine": 19,
          "endLine": 357,
          "code": "export default function PopulationPyramid({\n  data,\n  className = '',\n  onAgeGroupClick,\n}: PopulationPyramidProps) {\n  const [hoveredGroup, setHoveredGroup] = useState<string | null>(null);\n  const [hoveredSide, setHoveredSide] = useState<'male' | 'female' | null>(null);\n  const [selectedGroup, setSelectedGroup] = useState<string | null>(null);\n  const [isAnimated, setIsAnimated] = useState(false);\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n\n  // Random test data to test functionality\n  const defaultData: AgeGroup[] = [\n    { ageRange: '0-4', male: 124, female: 98, malePercentage: 8.2, femalePercentage: 6.5 },\n    { ageRange: '5-9', male: 87, female: 142, malePercentage: 5.8, femalePercentage: 9.4 },\n    { ageRange: '10-14', male: 156, female: 134, malePercentage: 10.3, femalePercentage: 8.9 },\n    { ageRange: '15-19', male: 43, female: 67, malePercentage: 2.8, femalePercentage: 4.4 },\n    { ageRange: '20-24', male: 189, female: 203, malePercentage: 12.5, femalePercentage: 13.4 },\n    { ageRange: '25-29', male: 78, female: 45, malePercentage: 5.2, femalePercentage: 3.0 },\n    { ageRange: '30-34', male: 167, female: 178, malePercentage: 11.0, femalePercentage: 11.8 },\n    { ageRange: '35-39', male: 0, female: 89, malePercentage: 0.0, femalePercentage: 5.9 },\n    { ageRange: '40-44', male: 112, female: 0, malePercentage: 7.4, femalePercentage: 0.0 },\n    { ageRange: '45-49', male: 94, female: 156, malePercentage: 6.2, femalePercentage: 10.3 },\n    { ageRange: '50-54', male: 67, female: 78, malePercentage: 4.4, femalePercentage: 5.2 },\n    { ageRange: '55-59', male: 145, female: 123, malePercentage: 9.6, femalePercentage: 8.1 },\n    { ageRange: '60-64', male: 23, female: 67, malePercentage: 1.5, femalePercentage: 4.4 },\n    { ageRange: '65-69', male: 89, female: 45, malePercentage: 5.9, femalePercentage: 3.0 },\n    { ageRange: '70-74', male: 34, female: 78, malePercentage: 2.2, femalePercentage: 5.2 },\n    { ageRange: '75-79', male: 56, female: 34, malePercentage: 3.7, femalePercentage: 2.2 },\n    { ageRange: '80-84', male: 12, female: 23, malePercentage: 0.8, femalePercentage: 1.5 },\n    { ageRange: '85-89', male: 7, female: 15, malePercentage: 0.5, femalePercentage: 1.0 },\n    { ageRange: '90-94', male: 3, female: 8, malePercentage: 0.2, femalePercentage: 0.5 },\n    { ageRange: '95-99', male: 0, female: 0, malePercentage: 0.0, femalePercentage: 0.0 },\n    { ageRange: '100+', male: 1, female: 2, malePercentage: 0.1, femalePercentage: 0.1 },\n  ];\n\n  const pyramidData = data || defaultData;\n  // Filter out empty rows (where both male and female are 0)\n  const filteredData = pyramidData.filter(group => group.male > 0 || group.female > 0);\n  const maxPercentage = Math.max(\n    ...filteredData.map(d => Math.max(d.malePercentage, d.femalePercentage))\n  );\n\n  useEffect(() => {\n    // Trigger animation after component mounts\n    const timer = setTimeout(() => setIsAnimated(true), 100);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleGroupClick = (group: AgeGroup) => {\n    if (selectedGroup === group.ageRange) {\n      setSelectedGroup(null);\n    } else {\n      setSelectedGroup(group.ageRange);\n      onAgeGroupClick?.(group);\n    }\n  };\n\n  const totalMale = filteredData.reduce((sum, group) => sum + group.male, 0);\n  const totalFemale = filteredData.reduce((sum, group) => sum + group.female, 0);\n  const totalPopulation = totalMale + totalFemale;\n\n  const handleMouseMove = (event: React.MouseEvent, ageRange: string, side?: 'male' | 'female') => {\n    setHoveredGroup(ageRange);\n    setHoveredSide(side || null);\n    setMousePosition({ x: event.clientX, y: event.clientY });\n  };\n\n  const handleMouseLeave = () => {\n    setHoveredGroup(null);\n    setHoveredSide(null);\n  };\n\n  const getTooltipData = () => {\n    if (!hoveredGroup) return null;\n    const group = filteredData.find(g => g.ageRange === hoveredGroup);\n    if (!group) return null;\n\n    // If hovering on a specific side (bar), show only that side\n    if (hoveredSide === 'male') {\n      return {\n        label: `Male ${group.ageRange}`,\n        count: group.male,\n        percentage: group.malePercentage,\n        type: 'single',\n      };\n    } else if (hoveredSide === 'female') {\n      return {\n        label: `Female ${group.ageRange}`,\n        count: group.female,\n        percentage: group.femalePercentage,\n        type: 'single',\n      };\n    } else {\n      // If hovering on row (not specific bar), show comparison\n      return {\n        label: `Age ${group.ageRange}`,\n        maleCount: group.male,\n        femaleCount: group.female,\n        malePercentage: group.malePercentage,\n        femalePercentage: group.femalePercentage,\n        total: group.male + group.female,\n        type: 'comparison',\n      };\n    }\n  };\n\n  return (\n    <div className={`rounded-lg border p-6 bg-surface border-default ${className}`}>\n      <div className=\"mb-6 flex items-center justify-between\">\n        <h3 className=\"font-display text-lg font-semibold text-primary\">Population Pyramid</h3>\n        <div className=\"text-sm font-body text-secondary\">\n          Total: {totalPopulation.toLocaleString()}\n        </div>\n      </div>\n\n      <div className=\"space-y-1\">\n        {/* Header */}\n        <div className=\"mb-3 flex items-center text-xs font-body text-secondary\">\n          <div className=\"w-[45%] pr-3 text-right\">Male</div>\n          <div className=\"w-[10%] px-3 text-center\">Age</div>\n          <div className=\"w-[45%] pl-3 text-left\">Female</div>\n        </div>\n\n        {/* Pyramid bars */}\n        {filteredData.map((group, index) => {\n          const isHovered = hoveredGroup === group.ageRange;\n          const isSelected = selectedGroup === group.ageRange;\n\n          return (\n            <div\n              key={index}\n              className={`flex h-6 cursor-pointer items-center rounded-md transition-all duration-200 ${\n                isSelected\n                  ? 'bg-primary-50 shadow-sm dark:bg-primary-900/20'\n                  : isHovered\n                    ? 'shadow-sm bg-surface-hover'\n                    : hoveredGroup && hoveredGroup !== group.ageRange\n                      ? 'opacity-60'\n                      : 'hover:bg-surface-hover'\n              }`}\n              onMouseMove={e => handleMouseMove(e, group.ageRange)}\n              onMouseLeave={handleMouseLeave}\n              onClick={() => handleGroupClick(group)}\n            >\n              {/* Male bar (right aligned) */}\n              <div className=\"flex w-[45%] justify-end pr-3\">\n                <div className=\"relative flex w-full items-center gap-4\">\n                  <span\n                    className={`min-w-[35px] text-right text-xs transition-all duration-200 font-body ${\n                      isHovered || isSelected ? 'font-medium text-primary' : 'text-secondary'\n                    }`}\n                  >\n                    {group.male}\n                  </span>\n                  <div className=\"relative flex flex-1 justify-end\">\n                    {group.male > 0 && (\n                      <div\n                        className={`h-4 cursor-pointer rounded-sm transition-all ${\n                          isSelected\n                            ? 'scale-y-110 bg-primary-600 shadow-md ring-2 ring-white'\n                            : isHovered && hoveredSide === 'male'\n                              ? 'scale-y-110 bg-primary-500/80 shadow-md ring-2 ring-white'\n                              : isHovered\n                                ? 'bg-primary-500 shadow-md ring-2 ring-white'\n                                : 'bg-primary-500'\n                        }`}\n                        style={{\n                          width: isAnimated\n                            ? `${(group.malePercentage / maxPercentage) * 100}%`\n                            : '0%',\n                          opacity: isHovered || isSelected ? 1 : 0.9,\n                          transition: `width ${0.5 + index * 0.05}s ease-out, opacity 0.3s ease`,\n                        }}\n                        onMouseMove={e => handleMouseMove(e, group.ageRange, 'male')}\n                      />\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Age group label */}\n              <div className=\"w-[10%] px-3 text-center\">\n                <span\n                  className={`text-xs transition-all duration-200 font-body ${\n                    isHovered || isSelected\n                      ? 'font-bold text-primary'\n                      : 'font-medium text-secondary'\n                  }`}\n                >\n                  {group.ageRange}\n                </span>\n              </div>\n\n              {/* Female bar (left aligned) */}\n              <div className=\"flex w-[45%] justify-start pl-3\">\n                <div className=\"relative flex w-full items-center gap-4\">\n                  <div className=\"relative flex flex-1 justify-start\">\n                    {group.female > 0 && (\n                      <div\n                        className={`h-4 cursor-pointer rounded-sm transition-all ${\n                          isSelected\n                            ? 'scale-y-110 bg-secondary-600 shadow-md ring-2 ring-white'\n                            : isHovered && hoveredSide === 'female'\n                              ? 'scale-y-110 bg-secondary-500/80 shadow-md ring-2 ring-white'\n                              : isHovered\n                                ? 'bg-secondary-500 shadow-md ring-2 ring-white'\n                                : 'bg-secondary-500'\n                        }`}\n                        style={{\n                          width: isAnimated\n                            ? `${(group.femalePercentage / maxPercentage) * 100}%`\n                            : '0%',\n                          opacity: isHovered || isSelected ? 1 : 0.9,\n                          transition: `width ${0.5 + index * 0.05}s ease-out, opacity 0.3s ease`,\n                        }}\n                        onMouseMove={e => handleMouseMove(e, group.ageRange, 'female')}\n                      />\n                    )}\n                  </div>\n                  <span\n                    className={`min-w-[35px] text-xs transition-all duration-200 font-body ${\n                      isHovered || isSelected ? 'font-medium text-primary' : 'text-secondary'\n                    }`}\n                  >\n                    {group.female}\n                  </span>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n\n        {/* Legend and Stats */}\n        <div className=\"mt-6 border-t pt-4 border-default\">\n          <div className=\"flex items-center justify-center gap-6\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"size-3 rounded bg-primary-500\" />\n              <span className=\"text-xs font-body text-secondary\">\n                Male: {totalMale.toLocaleString()} (\n                {((totalMale / totalPopulation) * 100).toFixed(1)}%)\n              </span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"size-3 rounded bg-secondary-500\" />\n              <span className=\"text-xs font-body text-secondary\">\n                Female: {totalFemale.toLocaleString()} (\n                {((totalFemale / totalPopulation) * 100).toFixed(1)}%)\n              </span>\n            </div>\n          </div>\n\n          {selectedGroup && (\n            <div className=\"mt-4 rounded-lg border border-primary-200 bg-primary-50 p-3 text-center dark:border-primary-800 dark:bg-primary-900/20\">\n              <p className=\"text-sm font-body text-primary\">\n                Age group <span className=\"font-semibold\">{selectedGroup}</span> selected\n              </p>\n              <p className=\"mt-1 text-xs font-body text-secondary\">\n                Click another group to compare or click outside to deselect\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Tooltip */}\n      {hoveredGroup && (\n        <div\n          className=\"pointer-events-none fixed z-50 rounded-lg border-2 border-primary-200 bg-white px-4 py-3 shadow-2xl dark:border-primary-700 dark:bg-gray-900\"\n          style={{\n            left: mousePosition.x + 10,\n            top: mousePosition.y - 10,\n            transform: 'translate(-50%, -100%)',\n          }}\n        >\n          {(() => {\n            const tooltipData = getTooltipData();\n            if (!tooltipData) return null;\n\n            if (tooltipData.type === 'single') {\n              const isMale = hoveredSide === 'male';\n              return (\n                <div className=\"text-sm\">\n                  <div className=\"mb-1 flex items-center gap-2 font-semibold text-gray-900 dark:text-gray-100\">\n                    <div\n                      className={`size-3 rounded-full ${isMale ? 'bg-primary-500' : 'bg-secondary-500'}`}\n                    ></div>\n                    {tooltipData.label}\n                  </div>\n                  <div className=\"text-gray-700 dark:text-gray-300\">\n                    {tooltipData.count?.toLocaleString()} ({tooltipData.percentage?.toFixed(1)}%)\n                  </div>\n                </div>\n              );\n            } else {\n              return (\n                <div className=\"text-sm\">\n                  <div className=\"mb-2 font-semibold text-gray-900 dark:text-gray-100\">\n                    {tooltipData.label}\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between gap-4\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"size-3 rounded-full bg-primary-500\"></div>\n                        <span className=\"text-gray-700 dark:text-gray-300\">Male:</span>\n                      </div>\n                      <span className=\"font-medium text-gray-900 dark:text-gray-100\">\n                        {tooltipData.maleCount?.toLocaleString()} (\n                        {tooltipData.malePercentage?.toFixed(1)}%)\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between gap-4\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"size-3 rounded-full bg-secondary-500\"></div>\n                        <span className=\"text-gray-700 dark:text-gray-300\">Female:</span>\n                      </div>\n                      <span className=\"font-medium text-gray-900 dark:text-gray-100\">\n                        {tooltipData.femaleCount?.toLocaleString()} (\n                        {tooltipData.femalePercentage?.toFixed(1)}%)\n                      </span>\n                    </div>\n                    <div className=\"mt-2 border-t border-gray-200 pt-2 dark:border-gray-700\">\n                      <div className=\"flex justify-between gap-4 font-semibold\">\n                        <span className=\"text-gray-900 dark:text-gray-100\">Total:</span>\n                        <span className=\"text-gray-900 dark:text-gray-100\">\n                          {tooltipData.total?.toLocaleString()}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              );\n            }\n          })()}\n        </div>\n      )}\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/PopulationPyramid/PopulationPyramid.tsx",
          "lineCount": 339,
          "cyclomaticComplexity": 46,
          "cognitiveComplexity": 34
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 358 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "PopulationPyramid",
          "line": 19,
          "message": "Function 'PopulationPyramid' has 339 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "PopulationPyramid",
          "line": 19,
          "complexity": 46,
          "message": "Function 'PopulationPyramid' has cyclomatic complexity of 46 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "PopulationPyramid",
          "line": 19,
          "complexity": 34,
          "message": "Function 'PopulationPyramid' has cognitive complexity of 34 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/ProtectedRoute/ProtectedRoute.stories.tsx",
      "lineCount": 584,
      "functions": [
        {
          "name": "MockNextRouter",
          "startLine": 12,
          "endLine": 17,
          "code": "const MockNextRouter = ({ children }: { children: React.ReactNode }) => {\n  jest.doMock('next/navigation', () => ({\n    useRouter: () => mockRouter,\n  }));\n  return <>{children}</>;\n};\n",
          "filePath": "src/components/organisms/ProtectedRoute/ProtectedRoute.stories.tsx",
          "lineCount": 6,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "createMockAuthContext",
          "startLine": 20,
          "endLine": 29,
          "code": "const createMockAuthContext = (overrides = {}) => ({\n  user: null,\n  userProfile: null,\n  role: null,\n  loading: false,\n  profileLoading: false,\n  hasPermission: jest.fn().mockReturnValue(false),\n  isInRole: jest.fn().mockReturnValue(false),\n  ...overrides,\n});\n",
          "filePath": "src/components/organisms/ProtectedRoute/ProtectedRoute.stories.tsx",
          "lineCount": 10,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "useAuth",
          "startLine": 39,
          "endLine": 40,
          "code": "    useAuth: () => authValue,\n  }));\n",
          "filePath": "src/components/organisms/ProtectedRoute/ProtectedRoute.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "ProtectedContent",
          "startLine": 46,
          "endLine": 47,
          "code": "const ProtectedContent = () => (\n  <div className=\"rounded-lg border border-green-200 bg-green-50 p-6\">\n",
          "filePath": "src/components/organisms/ProtectedRoute/ProtectedRoute.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 584 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/ProtectedRoute/ProtectedRoute.tsx",
      "lineCount": 271,
      "functions": [
        {
          "name": "ProtectedRoute",
          "startLine": 16,
          "endLine": 270,
          "code": "export default function ProtectedRoute({\n  children,\n  requireRole,\n  requirePermission,\n  fallback,\n  loadingComponent,\n}: ProtectedRouteProps) {\n  const router = useRouter();\n  const { user, userProfile, role, loading, profileLoading, hasPermission, isInRole } = useAuth();\n\n  // Show loading state - give extra time during navigation\n  const [isNavigating, setIsNavigating] = React.useState(false);\n\n  React.useEffect(() => {\n    if (loading || profileLoading) {\n      setIsNavigating(true);\n      const timer = setTimeout(() => setIsNavigating(false), 1000);\n      return () => clearTimeout(timer);\n    } else {\n      // Reset navigating state when loading is complete\n      setIsNavigating(false);\n    }\n  }, [loading, profileLoading]);\n\n  // Auto-redirect to login when not authenticated\n  React.useEffect(() => {\n    if (!loading && !profileLoading && !user && !fallback) {\n      const timer = setTimeout(() => {\n        router.push('/login');\n      }, 100);\n      return () => clearTimeout(timer);\n    }\n  }, [loading, profileLoading, user, fallback, router]);\n\n  // Only show loading screen for initial auth, not profile loading\n  if (loading || isNavigating) {\n    if (loadingComponent) {\n      return <>{loadingComponent}</>;\n    }\n\n    return (\n      <div className=\"flex min-h-screen items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <svg\n            className=\"mx-auto size-12 animate-spin text-blue-600\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n          >\n            <circle\n              className=\"opacity-25\"\n              cx=\"12\"\n              cy=\"12\"\n              r=\"10\"\n              stroke=\"currentColor\"\n              strokeWidth=\"4\"\n            ></circle>\n            <path\n              className=\"opacity-75\"\n              fill=\"currentColor\"\n              d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n            ></path>\n          </svg>\n          <p className=\"mt-4 text-sm text-secondary\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Not authenticated\n  if (!user) {\n    if (fallback) {\n      return <>{fallback}</>;\n    }\n\n    return (\n      <div className=\"flex min-h-screen items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <svg\n            className=\"mx-auto size-12 animate-spin text-blue-600\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n          >\n            <circle\n              className=\"opacity-25\"\n              cx=\"12\"\n              cy=\"12\"\n              r=\"10\"\n              stroke=\"currentColor\"\n              strokeWidth=\"4\"\n            ></circle>\n            <path\n              className=\"opacity-75\"\n              fill=\"currentColor\"\n              d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n            ></path>\n          </svg>\n          <p className=\"mt-4 text-sm text-secondary\">Redirecting to login...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show UI even if profile is loading - for better UX\n  // Only block if profile is required for permission checks\n  if (!userProfile && (requireRole || requirePermission)) {\n    // If profile is still loading, show loading state\n    if (profileLoading) {\n      return (\n        <div className=\"flex min-h-screen items-center justify-center bg-background\">\n          <div className=\"text-center\">\n            <svg\n              className=\"mx-auto size-12 animate-spin text-blue-600\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n            >\n              <circle\n                className=\"opacity-25\"\n                cx=\"12\"\n                cy=\"12\"\n                r=\"10\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"\n              ></circle>\n              <path\n                className=\"opacity-75\"\n                fill=\"currentColor\"\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n              ></path>\n            </svg>\n            <p className=\"mt-4 text-sm text-secondary\">Loading profile...</p>\n          </div>\n        </div>\n      );\n    }\n\n    // If not loading and no profile for permission checks, show error\n    return (\n      <div className=\"flex min-h-screen items-center justify-center bg-background\">\n        <div className=\"w-full max-w-md text-center\">\n          <div className=\"rounded-lg border p-6 shadow-md bg-surface border-default\">\n            <div className=\"mb-4 text-yellow-600\">\n              <svg\n                className=\"mx-auto size-12\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 15.5c-.77.833.192 2.5 1.732 2.5z\"\n                />\n              </svg>\n            </div>\n            <h1 className=\"mb-2 text-lg font-semibold text-primary\">Profile Loading Error</h1>\n            <p className=\"mb-4 text-sm text-secondary\">\n              Unable to load your profile. Please try refreshing the page.\n            </p>\n            <Button onClick={() => window.location.reload()} variant=\"primary\" size=\"sm\" fullWidth>\n              Refresh Page\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Check role requirement\n  if (requireRole && !isInRole(requireRole)) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center bg-background\">\n        <div className=\"w-full max-w-md text-center\">\n          <div className=\"rounded-lg border p-6 shadow-md bg-surface border-default\">\n            <div className=\"mb-4 text-yellow-600\">\n              <svg\n                className=\"mx-auto size-12\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 15.5c-.77.833.192 2.5 1.732 2.5z\"\n                />\n              </svg>\n            </div>\n            <h1 className=\"mb-2 text-lg font-semibold text-primary\">Access Denied</h1>\n            <p className=\"mb-2 text-sm text-secondary\">\n              You need the <strong>{requireRole}</strong> role to access this page.\n            </p>\n            <p className=\"mb-4 text-xs text-muted\">\n              Your current role: <strong>{role?.name}</strong>\n            </p>\n            <Button\n              onClick={() => window.history.back()}\n              variant=\"neutral-outline\"\n              size=\"sm\"\n              fullWidth\n            >\n              Go Back\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Check permission requirement\n  if (requirePermission && !hasPermission(requirePermission)) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center bg-background\">\n        <div className=\"w-full max-w-md text-center\">\n          <div className=\"rounded-lg border p-6 shadow-md bg-surface border-default\">\n            <div className=\"mb-4 text-red-600\">\n              <svg\n                className=\"mx-auto size-12\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728\"\n                />\n              </svg>\n            </div>\n            <h1 className=\"mb-2 text-lg font-semibold text-primary\">Insufficient Permissions</h1>\n            <p className=\"mb-2 text-sm text-secondary\">\n              You don&apos;t have permission to access this page.\n            </p>\n            <p className=\"mb-4 text-xs text-muted\">\n              Required permission: <strong>{requirePermission}</strong>\n            </p>\n            <Button\n              onClick={() => window.history.back()}\n              variant=\"neutral-outline\"\n              size=\"sm\"\n              fullWidth\n            >\n              Go Back\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // All checks passed, render children\n  return <>{children}</>;\n}\n",
          "filePath": "src/components/organisms/ProtectedRoute/ProtectedRoute.tsx",
          "lineCount": 255,
          "cyclomaticComplexity": 21,
          "cognitiveComplexity": 31
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "ProtectedRoute",
          "line": 16,
          "message": "Function 'ProtectedRoute' has 255 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "ProtectedRoute",
          "line": 16,
          "complexity": 21,
          "message": "Function 'ProtectedRoute' has cyclomatic complexity of 21 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "ProtectedRoute",
          "line": 16,
          "complexity": 31,
          "message": "Function 'ProtectedRoute' has cognitive complexity of 31 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/SectoralInfo/SectoralInfo.stories.tsx",
      "lineCount": 569,
      "functions": [
        {
          "name": "render",
          "startLine": 334,
          "endLine": 501,
          "code": "  render: () => {\n    const [sectoralInfo, setSectoralInfo] =\n      React.useState<SectoralInformation>(defaultSectoralInfo);\n    const [context, setContext] = React.useState<SectoralContext>({\n      age: 25,\n      birthdate: '1998-06-15',\n      employment_status: 'employed_full_time',\n      highest_educational_attainment: 'college_graduate',\n      marital_status: 'single',\n    });\n\n    const presetScenarios = [\n      {\n        name: 'Young Professional',\n        context: {\n          age: 25,\n          birthdate: '1998-06-15',\n          employment_status: 'employed_full_time',\n          highest_educational_attainment: 'college_graduate',\n          marital_status: 'single',\n        },\n      },\n      {\n        name: 'Senior Citizen',\n        context: {\n          age: 65,\n          birthdate: '1958-06-15',\n          employment_status: 'retired',\n          highest_educational_attainment: 'high_school_graduate',\n          marital_status: 'married',\n        },\n      },\n      {\n        name: 'Out-of-School Youth',\n        context: {\n          age: 20,\n          birthdate: '2003-06-15',\n          employment_status: 'unemployed_looking',\n          highest_educational_attainment: 'high_school_graduate',\n          marital_status: 'single',\n        },\n      },\n      {\n        name: 'Child (10 years old)',\n        context: {\n          age: 10,\n          birthdate: '2013-06-15',\n          employment_status: '',\n          highest_educational_attainment: '',\n          marital_status: 'single',\n        },\n      },\n    ];\n\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h3 className=\"mb-3 text-lg font-semibold\">Context Controls</h3>\n          <div className=\"grid grid-cols-1 gap-4 rounded border bg-gray-50 p-4 md:grid-cols-2\">\n            <div>\n              <label className=\"mb-1 block text-sm font-medium text-gray-700\">Age</label>\n              <input\n                type=\"number\"\n                value={context.age || ''}\n                onChange={e => setContext({ ...context, age: parseInt(e.target.value) || 0 })}\n                className=\"w-full rounded border border-gray-300 px-3 py-2 text-sm\"\n              />\n            </div>\n\n            <div>\n              <label className=\"mb-1 block text-sm font-medium text-gray-700\">\n                Employment Status\n              </label>\n              <select\n                value={context.employment_status}\n                onChange={e => setContext({ ...context, employment_status: e.target.value })}\n                className=\"w-full rounded border border-gray-300 px-3 py-2 text-sm\"\n              >\n                <option value=\"\">Not specified</option>\n                <option value=\"employed_full_time\">Employed (Full-time)</option>\n                <option value=\"employed_part_time\">Employed (Part-time)</option>\n                <option value=\"self_employed\">Self-employed</option>\n                <option value=\"unemployed_looking\">Unemployed (Looking)</option>\n                <option value=\"underemployed\">Underemployed</option>\n                <option value=\"student\">Student</option>\n                <option value=\"retired\">Retired</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"mb-1 block text-sm font-medium text-gray-700\">\n                Education Level\n              </label>\n              <select\n                value={context.highest_educational_attainment}\n                onChange={e =>\n                  setContext({ ...context, highest_educational_attainment: e.target.value })\n                }\n                className=\"w-full rounded border border-gray-300 px-3 py-2 text-sm\"\n              >\n                <option value=\"\">Not specified</option>\n                <option value=\"elementary_graduate\">Elementary Graduate</option>\n                <option value=\"high_school_graduate\">High School Graduate</option>\n                <option value=\"college_undergraduate\">College Undergraduate</option>\n                <option value=\"college_graduate\">College Graduate</option>\n                <option value=\"vocational_graduate\">Vocational Graduate</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"mb-1 block text-sm font-medium text-gray-700\">Marital Status</label>\n              <select\n                value={context.marital_status}\n                onChange={e => setContext({ ...context, marital_status: e.target.value })}\n                className=\"w-full rounded border border-gray-300 px-3 py-2 text-sm\"\n              >\n                <option value=\"\">Not specified</option>\n                <option value=\"single\">Single</option>\n                <option value=\"married\">Married</option>\n                <option value=\"widowed\">Widowed</option>\n                <option value=\"separated\">Separated</option>\n              </select>\n            </div>\n          </div>\n\n          <div className=\"mt-4\">\n            <h4 className=\"mb-2 text-sm font-medium text-gray-700\">Quick Scenarios:</h4>\n            <div className=\"flex flex-wrap gap-2\">\n              {presetScenarios.map(scenario => (\n                <button\n                  key={scenario.name}\n                  onClick={() => setContext(scenario.context)}\n                  className=\"rounded bg-blue-100 px-3 py-1 text-sm text-blue-700 hover:bg-blue-200\"\n                >\n                  {scenario.name}\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <SectoralInfo value={sectoralInfo} onChange={setSectoralInfo} context={context} />\n\n        <div className=\"rounded border bg-gray-50 p-4\">\n          <h4 className=\"mb-2 font-semibold\">Current Context & Results:</h4>\n          <div className=\"space-y-1 text-sm\">\n            <div>\n              <strong>Age:</strong> {context.age} years\n            </div>\n            <div>\n              <strong>Employment:</strong> {context.employment_status || 'Not specified'}\n            </div>\n            <div>\n              <strong>Education:</strong>{' '}\n              {context.highest_educational_attainment || 'Not specified'}\n            </div>\n            <div>\n              <strong>Active Flags:</strong>{' '}\n              {Object.entries(sectoralInfo)\n                .filter(([_, value]) => value === true)\n                .map(([key]) => key.replace('is_', '').replace(/_/g, ' '))\n                .join(', ') || 'None'}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  },\n",
          "filePath": "src/components/organisms/SectoralInfo/SectoralInfo.stories.tsx",
          "lineCount": 168,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 5
        },
        {
          "name": "render",
          "startLine": 512,
          "endLine": 567,
          "code": "  render: () => {\n    const [currentAge, setCurrentAge] = React.useState(25);\n\n    const ageGroups = [\n      { age: 8, label: 'Child (8 years)', description: 'Out-of-school children eligible' },\n      {\n        age: 16,\n        label: 'Teenager (16 years)',\n        description: 'Out-of-school children/youth transition',\n      },\n      { age: 22, label: 'Young Adult (22 years)', description: 'Out-of-school youth eligible' },\n      { age: 35, label: 'Adult (35 years)', description: 'Working age' },\n      { age: 65, label: 'Senior (65 years)', description: 'Senior citizen eligible' },\n    ];\n\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h3 className=\"mb-3 text-lg font-semibold\">Age-Based Classification Demo</h3>\n          <div className=\"mb-4 flex flex-wrap gap-2\">\n            {ageGroups.map(group => (\n              <button\n                key={group.age}\n                onClick={() => setCurrentAge(group.age)}\n                className={`rounded px-3 py-2 text-sm ${\n                  currentAge === group.age\n                    ? 'bg-blue-600 text-white'\n                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n                }`}\n              >\n                {group.label}\n              </button>\n            ))}\n          </div>\n\n          <div className=\"rounded border border-blue-200 bg-blue-50 p-3 text-sm text-blue-700\">\n            <strong>Current:</strong> {ageGroups.find(g => g.age === currentAge)?.description}\n          </div>\n        </div>\n\n        <SectoralInfo\n          value={defaultSectoralInfo}\n          onChange={action('age-demo-changed')}\n          context={{\n            age: currentAge,\n            birthdate: new Date(new Date().getFullYear() - currentAge, 5, 15)\n              .toISOString()\n              .split('T')[0],\n            employment_status: currentAge >= 18 ? 'unemployed_looking' : '',\n            highest_educational_attainment: currentAge >= 18 ? 'high_school_graduate' : '',\n            marital_status: 'single',\n          }}\n        />\n      </div>\n    );\n  },\n",
          "filePath": "src/components/organisms/SectoralInfo/SectoralInfo.stories.tsx",
          "lineCount": 56,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 2
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 569 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 334,
          "message": "Function 'render' has 168 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 512,
          "message": "Function 'render' has 56 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/SectoralInfo/SectoralInfo.tsx",
      "lineCount": 325,
      "functions": [
        {
          "name": "onChange",
          "startLine": 40,
          "endLine": 41,
          "code": "  onChange: (sectoral: SectoralInformation) => void;\n  context: SectoralContext;\n",
          "filePath": "src/components/organisms/SectoralInfo/SectoralInfo.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "SectoralInfo",
          "startLine": 59,
          "endLine": 324,
          "code": "export default function SectoralInfo({\n  value,\n  onChange,\n  context,\n  disabled = false,\n  className = '',\n}: SectoralInfoProps) {\n  const [_autoCalculated, setAutoCalculated] = useState({\n    is_labor_force: false,\n    is_employed: false,\n    is_unemployed: false,\n    is_out_of_school_children: false,\n    is_out_of_school_youth: false,\n    is_senior_citizen: false,\n  });\n\n  // Auto-calculate sectoral flags based on context\n  useEffect(() => {\n    const age = context.age || (context.birthdate ? calculateAge(context.birthdate) : 0);\n    const employment = context.employment_status || '';\n\n    const calculated = {\n      is_labor_force: LABOR_FORCE_STATUSES.includes(employment),\n      is_employed: EMPLOYED_STATUSES.includes(employment),\n      is_unemployed: UNEMPLOYED_STATUSES.includes(employment),\n      is_out_of_school_children: isOutOfSchoolChildren(age, context.highest_educational_attainment),\n      is_out_of_school_youth: isOutOfSchoolYouth(\n        age,\n        context.highest_educational_attainment,\n        employment\n      ),\n      is_senior_citizen: age >= 60,\n    };\n\n    setAutoCalculated(calculated);\n\n    // Update the sectoral information with auto-calculated values\n    const updatedSectoral = {\n      ...value,\n      ...calculated,\n      // Reset registered senior citizen if no longer senior\n      is_registered_senior_citizen: calculated.is_senior_citizen\n        ? value.is_registered_senior_citizen\n        : false,\n    };\n\n    // Only trigger onChange if values actually changed\n    if (JSON.stringify(updatedSectoral) !== JSON.stringify(value)) {\n      onChange(updatedSectoral);\n    }\n  }, [\n    context.age,\n    context.birthdate,\n    context.employment_status,\n    context.highest_educational_attainment,\n    onChange,\n    value,\n  ]);\n\n  // Calculate age from birthdate\n  function calculateAge(birthdate: string): number {\n    const today = new Date();\n    const birth = new Date(birthdate);\n    let age = today.getFullYear() - birth.getFullYear();\n    const monthDiff = today.getMonth() - birth.getMonth();\n\n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\n      age--;\n    }\n\n    return age;\n  }\n\n  // Check if person qualifies as out-of-school children (5-17 years old, not in school)\n  function isOutOfSchoolChildren(age: number, education?: string): boolean {\n    if (age < 5 || age > 17) return false;\n\n    // If still in elementary/high school, not out-of-school\n    const inSchoolEducation = [\n      'elementary_graduate',\n      'high_school_graduate',\n      'senior_high_graduate',\n    ];\n    return !inSchoolEducation.some(level => education?.includes(level));\n  }\n\n  // Check if person qualifies as out-of-school youth (18-30 years old, not in school, not employed)\n  function isOutOfSchoolYouth(age: number, education?: string, employment?: string): boolean {\n    if (age < 18 || age > 30) return false;\n\n    // Must not be in tertiary education\n    const inTertiaryEducation = [\n      'college_undergraduate',\n      'college_graduate',\n      'vocational_graduate',\n    ];\n    const isInSchool = inTertiaryEducation.some(level => education?.includes(level));\n\n    // Must not be employed\n    const isEmployed = EMPLOYED_STATUSES.includes(employment || '');\n\n    return !isInSchool && !isEmployed;\n  }\n\n  // Handle manual flag changes\n  const handleFlagChange =\n    (flag: keyof SectoralInformation) => (e: React.ChangeEvent<HTMLInputElement>) => {\n      const checked = e.target.checked;\n      const updatedSectoral = {\n        ...value,\n        [flag]: checked,\n      };\n\n      // Handle conditional logic for registered senior citizen\n      if (flag === 'is_senior_citizen' && !checked) {\n        updatedSectoral.is_registered_senior_citizen = false;\n      }\n\n      onChange(updatedSectoral);\n    };\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      <div className=\"border-b border-gray-200 pb-4\">\n        <h3 className=\"mb-2 text-lg font-medium text-gray-900\">\n          <span className=\"text-base\">👥</span> Sectoral Group Classification\n        </h3>\n        <p className=\"text-sm text-gray-600\">\n          Some flags are automatically calculated based on age, employment, and education data.\n        </p>\n      </div>\n\n      {/* Auto-Calculated Flags (Read-only) */}\n      <FormGroup title=\"Auto-Calculated Classifications\" className=\"rounded-lg bg-gray-50 p-4\">\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n          <Checkbox\n            label=\"Labor Force\"\n            description=\"Based on employment status\"\n            checked={_autoCalculated.is_labor_force}\n            disabled={true}\n            size=\"md\"\n          />\n\n          <Checkbox\n            label=\"Employed\"\n            description=\"Currently employed (full/part-time, self-employed)\"\n            checked={_autoCalculated.is_employed}\n            disabled={true}\n            size=\"md\"\n          />\n\n          <Checkbox\n            label=\"Unemployed\"\n            description=\"Unemployed but looking for work\"\n            checked={_autoCalculated.is_unemployed}\n            disabled={true}\n            size=\"md\"\n          />\n\n          <Checkbox\n            label=\"Out-of-School Children\"\n            description=\"Ages 5-17, not attending school\"\n            checked={_autoCalculated.is_out_of_school_children}\n            disabled={true}\n            size=\"md\"\n          />\n\n          <Checkbox\n            label=\"Out-of-School Youth\"\n            description=\"Ages 18-30, not in school/employed\"\n            checked={_autoCalculated.is_out_of_school_youth}\n            disabled={true}\n            size=\"md\"\n          />\n\n          <Checkbox\n            label=\"Senior Citizen\"\n            description=\"Age 60 and above\"\n            checked={_autoCalculated.is_senior_citizen}\n            disabled={true}\n            size=\"md\"\n          />\n        </div>\n      </FormGroup>\n\n      {/* Manual Flags */}\n      <FormGroup title=\"Manual Classifications\">\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n          <Checkbox\n            label=\"Overseas Filipino Worker (OFW)\"\n            description=\"Currently working abroad\"\n            checked={value.is_ofw}\n            onChange={handleFlagChange('is_ofw')}\n            disabled={disabled}\n            size=\"md\"\n          />\n\n          <Checkbox\n            label=\"Person with Disability (PWD)\"\n            description=\"Has physical, mental, or sensory disability\"\n            checked={value.is_pwd}\n            onChange={handleFlagChange('is_pwd')}\n            disabled={disabled}\n            size=\"md\"\n          />\n\n          <Checkbox\n            label=\"Solo Parent\"\n            description=\"Single parent raising children alone\"\n            checked={value.is_solo_parent}\n            onChange={handleFlagChange('is_solo_parent')}\n            disabled={disabled}\n            size=\"md\"\n          />\n\n          <Checkbox\n            label=\"Indigenous People\"\n            description=\"Belongs to indigenous cultural community\"\n            checked={value.is_indigenous_people}\n            onChange={handleFlagChange('is_indigenous_people')}\n            disabled={disabled}\n            size=\"md\"\n          />\n\n          <Checkbox\n            label=\"Migrant\"\n            description=\"Recently moved to this barangay\"\n            checked={value.is_migrant}\n            onChange={handleFlagChange('is_migrant')}\n            disabled={disabled}\n            size=\"md\"\n          />\n\n          {/* Conditional: Registered Senior Citizen */}\n          {value.is_senior_citizen && (\n            <Checkbox\n              label=\"Registered Senior Citizen\"\n              description=\"Officially registered with OSCA\"\n              checked={value.is_registered_senior_citizen}\n              onChange={handleFlagChange('is_registered_senior_citizen')}\n              disabled={disabled}\n              size=\"md\"\n            />\n          )}\n        </div>\n      </FormGroup>\n\n      {/* Summary */}\n      <div className=\"rounded-lg bg-blue-50 p-4\">\n        <h4 className=\"mb-2 text-sm font-medium text-blue-900\">Classification Summary</h4>\n        <div className=\"text-xs text-blue-700\">\n          <span className=\"font-medium\">Active Classifications:</span>{' '}\n          {(() => {\n            const allClassifications = { ..._autoCalculated, ...value };\n            return (\n              Object.entries(allClassifications)\n                .filter(([, val]) => val === true)\n                .map(([key]) => key.replace('is_', '').replace(/_/g, ' '))\n                .join(', ') || 'None'\n            );\n          })()}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/SectoralInfo/SectoralInfo.tsx",
          "lineCount": 266,
          "cyclomaticComplexity": 21,
          "cognitiveComplexity": 30
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 325 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "SectoralInfo",
          "line": 59,
          "message": "Function 'SectoralInfo' has 266 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "SectoralInfo",
          "line": 59,
          "complexity": 21,
          "message": "Function 'SectoralInfo' has cyclomatic complexity of 21 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "SectoralInfo",
          "line": 59,
          "complexity": 30,
          "message": "Function 'SectoralInfo' has cognitive complexity of 30 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/SimpleBarangaySelector/SimpleBarangaySelector.stories.tsx",
      "lineCount": 531,
      "functions": [
        {
          "name": "QuickRegistrationFormComponent",
          "startLine": 153,
          "endLine": 256,
          "code": "const QuickRegistrationFormComponent = () => {\n  const [formData, setFormData] = React.useState({\n    name: '',\n    barangayCode: '',\n    email: '',\n  });\n  const [errors, setErrors] = React.useState<any>({});\n\n  const handleSubmit = () => {\n    const newErrors: any = {};\n\n    if (!formData.name.trim()) {\n      newErrors.name = 'Name is required';\n    }\n\n    if (!formData.barangayCode) {\n      newErrors.barangayCode = 'Please select your barangay';\n    }\n\n    if (!formData.email.trim()) {\n      newErrors.email = 'Email is required';\n    }\n\n    setErrors(newErrors);\n\n    if (Object.keys(newErrors).length === 0) {\n      action('quick-form-submitted')(formData);\n      alert(\n        `Registration submitted!\\nName: ${formData.name}\\nBarangay Code: ${formData.barangayCode}\\nEmail: ${formData.email}`\n      );\n    }\n  };\n\n  return (\n    <div className=\"mx-auto max-w-md space-y-4\">\n      <div className=\"mb-6 text-center\">\n        <h2 className=\"text-xl font-semibold text-gray-900\">Quick Registration</h2>\n        <p className=\"text-sm text-gray-600\">Register for barangay services</p>\n      </div>\n\n      <div>\n        <label className=\"mb-2 block text-sm font-medium text-gray-700\">Full Name *</label>\n        <input\n          type=\"text\"\n          value={formData.name}\n          onChange={e => {\n            setFormData({ ...formData, name: e.target.value });\n            if (errors.name) setErrors({ ...errors, name: '' });\n          }}\n          className={`w-full rounded-md border px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n            errors.name ? 'border-red-500' : 'border-gray-300'\n          }`}\n          placeholder=\"Enter your full name\"\n        />\n        {errors.name && <p className=\"mt-1 text-xs text-red-600\">{errors.name}</p>}\n      </div>\n\n      <div>\n        <label className=\"mb-2 block text-sm font-medium text-gray-700\">Your Barangay *</label>\n        <SimpleBarangaySelector\n          value={formData.barangayCode}\n          onChange={code => {\n            setFormData({ ...formData, barangayCode: code });\n            if (errors.barangayCode) setErrors({ ...errors, barangayCode: '' });\n          }}\n          error={errors.barangayCode}\n          placeholder=\"Type to search your barangay\"\n        />\n      </div>\n\n      <div>\n        <label className=\"mb-2 block text-sm font-medium text-gray-700\">Email Address *</label>\n        <input\n          type=\"email\"\n          value={formData.email}\n          onChange={e => {\n            setFormData({ ...formData, email: e.target.value });\n            if (errors.email) setErrors({ ...errors, email: '' });\n          }}\n          className={`w-full rounded-md border px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n            errors.email ? 'border-red-500' : 'border-gray-300'\n          }`}\n          placeholder=\"your.email@example.com\"\n        />\n        {errors.email && <p className=\"mt-1 text-xs text-red-600\">{errors.email}</p>}\n      </div>\n\n      <button\n        onClick={handleSubmit}\n        className=\"w-full rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n      >\n        Register\n      </button>\n\n      {formData.barangayCode && (\n        <div className=\"rounded border border-green-200 bg-green-50 p-3 text-sm\">\n          <p className=\"text-green-800\">\n            <strong>Selected Barangay Code:</strong> {formData.barangayCode}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n",
          "filePath": "src/components/organisms/SimpleBarangaySelector/SimpleBarangaySelector.stories.tsx",
          "lineCount": 104,
          "cyclomaticComplexity": 13,
          "cognitiveComplexity": 16
        },
        {
          "name": "render",
          "startLine": 266,
          "endLine": 267,
          "code": "  render: () => <QuickRegistrationFormComponent />,\n};\n",
          "filePath": "src/components/organisms/SimpleBarangaySelector/SimpleBarangaySelector.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 277,
          "endLine": 278,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/organisms/SimpleBarangaySelector/SimpleBarangaySelector.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 341,
          "endLine": 342,
          "code": "  render: () => (\n    <div className=\"space-y-8\">\n",
          "filePath": "src/components/organisms/SimpleBarangaySelector/SimpleBarangaySelector.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 445,
          "endLine": 446,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/organisms/SimpleBarangaySelector/SimpleBarangaySelector.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 485,
          "endLine": 486,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/organisms/SimpleBarangaySelector/SimpleBarangaySelector.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 531 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "QuickRegistrationFormComponent",
          "line": 153,
          "message": "Function 'QuickRegistrationFormComponent' has 104 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "QuickRegistrationFormComponent",
          "line": 153,
          "complexity": 13,
          "message": "Function 'QuickRegistrationFormComponent' has cyclomatic complexity of 13 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "QuickRegistrationFormComponent",
          "line": 153,
          "complexity": 16,
          "message": "Function 'QuickRegistrationFormComponent' has cognitive complexity of 16 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/SimpleBarangaySelector/SimpleBarangaySelector.tsx",
      "lineCount": 297,
      "functions": [
        {
          "name": "onChange",
          "startLine": 19,
          "endLine": 20,
          "code": "  onChange: (code: string) => void;\n  error?: string;\n",
          "filePath": "src/components/organisms/SimpleBarangaySelector/SimpleBarangaySelector.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "SimpleBarangaySelector",
          "startLine": 25,
          "endLine": 296,
          "code": "export default function SimpleBarangaySelector({\n  value,\n  onChange,\n  error,\n  disabled = false,\n  placeholder = 'Search for your barangay...',\n}: SimpleBarangaySelectorProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isOpen, setIsOpen] = useState(false);\n\n  const [searchResults, setSearchResults] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const searchTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Check if barangays already have administrators\n  const checkAdminStatus = async (barangays: any[]) => {\n    try {\n      console.log('🔍 Checking admin status for', barangays.length, 'barangays');\n      \n      const promises = barangays.map(async (barangay) => {\n        try {\n          const response = await fetch('/api/auth/check-barangay-admin', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ barangayCode: barangay.code }),\n          });\n\n          if (!response.ok) {\n            throw new Error(`HTTP ${response.status}`);\n          }\n\n          const data = await response.json();\n          return {\n            code: barangay.code,\n            hasAdmin: data.hasAdmin || false,\n            adminCheckStatus: 'completed' as const\n          };\n        } catch (error) {\n          console.error('Admin check failed for', barangay.code, error);\n          return {\n            code: barangay.code,\n            hasAdmin: false, // Default to allowing signup if check fails\n            adminCheckStatus: 'error' as const\n          };\n        }\n      });\n\n      const results = await Promise.all(promises);\n      console.log('✅ Admin check results:', results);\n\n      // Update search results with admin status\n      setSearchResults(prevResults => \n        prevResults.map(barangay => {\n          const result = results.find(r => r.code === barangay.code);\n          if (result) {\n            return {\n              ...barangay,\n              hasAdmin: result.hasAdmin,\n              adminCheckStatus: result.adminCheckStatus\n            };\n          }\n          return barangay;\n        })\n      );\n\n    } catch (error) {\n      console.error('Error checking admin status:', error);\n      // Mark all as error status if batch check fails\n      setSearchResults(prevResults => \n        prevResults.map(barangay => ({\n          ...barangay,\n          adminCheckStatus: 'error' as const\n        }))\n      );\n    }\n  };\n\n  // Fetch barangay data (works with or without authentication)\n  const searchBarangays = async (searchTerm: string) => {\n    if (searchTerm.length < 2) {\n      setSearchResults([]);\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setIsError(false);\n\n      // Try to get session, but don't require it\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n\n      if (session?.access_token) {\n        // Authenticated search - use API\n        const response = await fetch(\n          `/api/addresses/barangays?search=${encodeURIComponent(searchTerm)}`,\n          {\n            headers: {\n              Authorization: `Bearer ${session.access_token}`,\n            },\n          }\n        );\n\n        if (!response.ok) {\n          throw new Error(`HTTP ${response.status}`);\n        }\n\n        const data = await response.json();\n        setSearchResults(data.barangays || []);\n      } else {\n        // Public search - direct Supabase query\n        console.log('🔍 Public barangay search for:', searchTerm);\n        \n        const { data, error } = await supabase\n          .from('psgc_barangays')\n          .select('code, name')\n          .ilike('name', `%${searchTerm}%`)\n          .limit(20)\n          .order('name');\n\n        if (error) {\n          console.error('Public search error:', error);\n          throw error;\n        }\n\n        console.log('✅ Found barangays:', data?.length);\n\n        // Transform to match expected format and check admin status\n        const transformedData = data?.map((item: any) => ({\n          code: item.code,\n          name: item.name,\n          full_address: item.name, // Simple version just shows name\n          hasAdmin: false,\n          adminCheckStatus: 'checking' as const,\n        })) || [];\n\n        setSearchResults(transformedData);\n        \n        // Check admin status for each barangay\n        await checkAdminStatus(transformedData);\n      }\n    } catch (error) {\n      console.error('Error searching barangays:', error);\n      setIsError(true);\n      setSearchResults([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Transform search results to match BaseSelector format\n  const options: BarangayOption[] = (searchResults || []).map(barangay => ({\n    value: barangay.code,\n    label: barangay.name,\n    disabled: barangay.hasAdmin && barangay.adminCheckStatus === 'completed',\n    metadata: {\n      code: barangay.code,\n      name: barangay.name,\n      hasAdmin: barangay.hasAdmin || false,\n      adminCheckStatus: barangay.adminCheckStatus || 'checking',\n    },\n  }));\n\n  const handleSearchChange = (term: string) => {\n    setSearchTerm(term);\n    if (!term) {\n      onChange('');\n    }\n\n    // Debounce the search\n    if (searchTimeoutRef.current) {\n      clearTimeout(searchTimeoutRef.current);\n    }\n\n    searchTimeoutRef.current = setTimeout(() => {\n      searchBarangays(term);\n    }, 300);\n  };\n\n  const handleOpenChange = (open: boolean) => {\n    setIsOpen(open);\n  };\n\n  const handleChange = (code: string) => {\n    // Find the selected barangay to check admin status\n    const selectedBarangay = searchResults.find(b => b.code === code);\n    \n    if (selectedBarangay?.hasAdmin && selectedBarangay?.adminCheckStatus === 'completed') {\n      // Don't allow selection of barangays with existing admins\n      console.log('❌ Cannot select barangay with existing admin:', code);\n      return;\n    }\n    \n    onChange(code);\n    setIsOpen(false);\n  };\n\n  const renderOption = (option: BarangayOption) => {\n    const { hasAdmin, adminCheckStatus } = option.metadata;\n    \n    return (\n      <>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"font-medium\">{option.metadata.name}</div>\n          {adminCheckStatus === 'checking' && (\n            <div className=\"text-xs text-blue-500 flex items-center\">\n              <div className=\"animate-spin rounded-full h-3 w-3 border border-blue-500 border-t-transparent mr-1\"></div>\n              Checking...\n            </div>\n          )}\n          {adminCheckStatus === 'completed' && hasAdmin && (\n            <div className=\"text-xs text-red-500 bg-red-50 px-2 py-1 rounded flex items-center\">\n              <svg className=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n              </svg>\n              Admin exists\n            </div>\n          )}\n          {adminCheckStatus === 'completed' && !hasAdmin && (\n            <div className=\"text-xs text-green-500 bg-green-50 px-2 py-1 rounded flex items-center\">\n              <svg className=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n              </svg>\n              Available\n            </div>\n          )}\n          {adminCheckStatus === 'error' && (\n            <div className=\"text-xs text-yellow-500 bg-yellow-50 px-2 py-1 rounded flex items-center\">\n              <svg className=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n              </svg>\n              Check failed\n            </div>\n          )}\n        </div>\n        <div className=\"text-sm text-gray-500\">Code: {option.metadata.code}</div>\n        {hasAdmin && adminCheckStatus === 'completed' && (\n          <div className=\"text-xs text-red-600 mt-1\">\n            This barangay already has an administrator. Contact them to be added to the system.\n          </div>\n        )}\n      </>\n    );\n  };\n\n  const emptyMessage = isError\n    ? 'Unable to load barangays. Please check your connection.'\n    : `No barangays found matching \"${searchTerm}\"`;\n\n  return (\n    <BaseSelector\n      value={value}\n      onChange={handleChange}\n      options={options}\n      loading={isLoading}\n      error={error}\n      disabled={disabled}\n      placeholder={placeholder}\n      searchTerm={searchTerm}\n      onSearchChange={handleSearchChange}\n      isOpen={isOpen}\n      onOpenChange={handleOpenChange}\n      renderOption={renderOption}\n      emptyMessage={emptyMessage}\n      minSearchLength={2}\n    />\n  );\n}\n",
          "filePath": "src/components/organisms/SimpleBarangaySelector/SimpleBarangaySelector.tsx",
          "lineCount": 272,
          "cyclomaticComplexity": 32,
          "cognitiveComplexity": 37
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "SimpleBarangaySelector",
          "line": 25,
          "message": "Function 'SimpleBarangaySelector' has 272 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "SimpleBarangaySelector",
          "line": 25,
          "complexity": 32,
          "message": "Function 'SimpleBarangaySelector' has cyclomatic complexity of 32 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "SimpleBarangaySelector",
          "line": 25,
          "complexity": 37,
          "message": "Function 'SimpleBarangaySelector' has cognitive complexity of 37 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/SimpleGeographicSelector/SimpleGeographicSelector.tsx",
      "lineCount": 283,
      "functions": [
        {
          "name": "SimpleGeographicSelector",
          "startLine": 20,
          "endLine": 283,
          "code": "export function SimpleGeographicSelector({\n  regionCode = '',\n  provinceCode = '',\n  cityCode = '',\n  barangayCode = '',\n  onRegionChange,\n  onProvinceChange,\n  onCityChange,\n  onBarangayChange,\n  required = false,\n  disabled = false,\n  autoPopulateFromUser = false,\n}: SimpleGeographicSelectorProps) {\n  // Options state\n  const [regionOptions, setRegionOptions] = useState<DropdownOption[]>([]);\n  const [provinceOptions, setProvinceOptions] = useState<DropdownOption[]>([]);\n  const [cityOptions, setCityOptions] = useState<DropdownOption[]>([]);\n  const [barangayOptions, setBarangayOptions] = useState<DropdownOption[]>([]);\n\n  // Loading states\n  const [loadingRegions, setLoadingRegions] = useState(false);\n  const [loadingProvinces, setLoadingProvinces] = useState(false);\n  const [loadingCities, setLoadingCities] = useState(false);\n  const [loadingBarangays, setLoadingBarangays] = useState(false);\n\n  // Fetch functions using public APIs\n  const fetchRegions = useCallback(async () => {\n    setLoadingRegions(true);\n    try {\n      const response = await fetch('/api/addresses/regions/public');\n      if (response.ok) {\n        const result = await response.json();\n        const options = (result.data || []).map((region: any) => ({\n          value: region.code,\n          label: region.name,\n        }));\n        setRegionOptions(options);\n      }\n    } catch (error) {\n      console.error('Error fetching regions:', error);\n    } finally {\n      setLoadingRegions(false);\n    }\n  }, []);\n\n  const fetchProvinces = useCallback(async (regionCode: string) => {\n    if (!regionCode) {\n      setProvinceOptions([]);\n      return;\n    }\n    \n    setLoadingProvinces(true);\n    try {\n      const response = await fetch(`/api/addresses/provinces/public?regionCode=${regionCode}`);\n      if (response.ok) {\n        const result = await response.json();\n        const options = (result.data || []).map((province: any) => ({\n          value: province.code,\n          label: province.name,\n        }));\n        setProvinceOptions(options);\n      }\n    } catch (error) {\n      console.error('Error fetching provinces:', error);\n    } finally {\n      setLoadingProvinces(false);\n    }\n  }, []);\n\n  const fetchCities = useCallback(async (provinceCode: string) => {\n    if (!provinceCode) {\n      setCityOptions([]);\n      return;\n    }\n    \n    setLoadingCities(true);\n    try {\n      const response = await fetch(`/api/addresses/cities/public?provinceCode=${provinceCode}`);\n      if (response.ok) {\n        const result = await response.json();\n        const options = (result.data || []).map((city: any) => ({\n          value: city.code,\n          label: city.name,\n        }));\n        setCityOptions(options);\n      }\n    } catch (error) {\n      console.error('Error fetching cities:', error);\n    } finally {\n      setLoadingCities(false);\n    }\n  }, []);\n\n  const fetchBarangays = useCallback(async (cityCode: string) => {\n    if (!cityCode) {\n      setBarangayOptions([]);\n      return;\n    }\n    \n    setLoadingBarangays(true);\n    try {\n      const response = await fetch(`/api/addresses/barangays/public?cityCode=${cityCode}`);\n      if (response.ok) {\n        const result = await response.json();\n        const options = (result.data || []).map((barangay: any) => ({\n          value: barangay.code,\n          label: barangay.name,\n        }));\n        setBarangayOptions(options);\n      }\n    } catch (error) {\n      console.error('Error fetching barangays:', error);\n    } finally {\n      setLoadingBarangays(false);\n    }\n  }, []);\n\n  // Auto-populate from user profile\n  const autoPopulateFromUserProfile = useCallback(async () => {\n    if (!autoPopulateFromUser) return;\n    \n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session?.user) return;\n\n      console.log('🚀 Auto-populating geographic data...');\n\n      const response = await fetch('/api/user/geographic-location', {\n        headers: {\n          'Authorization': `Bearer ${session.access_token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) return;\n\n      const hierarchy = await response.json();\n      console.log('✅ Geographic data loaded:', hierarchy);\n\n      // Trigger changes for each level\n      if (hierarchy.region && onRegionChange) {\n        onRegionChange(hierarchy.region.code);\n      }\n      if (hierarchy.province && onProvinceChange) {\n        onProvinceChange(hierarchy.province.code);\n      }\n      if (hierarchy.city && onCityChange) {\n        onCityChange(hierarchy.city.code);\n      }\n      if (hierarchy.barangay && onBarangayChange) {\n        onBarangayChange(hierarchy.barangay.code);\n      }\n\n    } catch (error) {\n      console.error('❌ Error auto-populating:', error);\n    }\n  }, [autoPopulateFromUser, onRegionChange, onProvinceChange, onCityChange, onBarangayChange]);\n\n  // Load initial data\n  useEffect(() => {\n    fetchRegions();\n  }, [fetchRegions]);\n\n  // Auto-populate on mount\n  useEffect(() => {\n    if (regionOptions.length > 0) {\n      autoPopulateFromUserProfile();\n    }\n  }, [regionOptions.length, autoPopulateFromUserProfile]);\n\n  // Load cascading data when parent selections change\n  useEffect(() => {\n    if (regionCode) {\n      fetchProvinces(regionCode);\n    } else {\n      setProvinceOptions([]);\n      setCityOptions([]);\n      setBarangayOptions([]);\n    }\n  }, [regionCode, fetchProvinces]);\n\n  useEffect(() => {\n    if (provinceCode) {\n      fetchCities(provinceCode);\n    } else {\n      setCityOptions([]);\n      setBarangayOptions([]);\n    }\n  }, [provinceCode, fetchCities]);\n\n  useEffect(() => {\n    if (cityCode) {\n      fetchBarangays(cityCode);\n    } else {\n      setBarangayOptions([]);\n    }\n  }, [cityCode, fetchBarangays]);\n\n  // Handle changes\n  const handleRegionChange = (value: string) => {\n    onRegionChange?.(value);\n    // Clear dependent selections\n    onProvinceChange?.('');\n    onCityChange?.('');\n    onBarangayChange?.('');\n  };\n\n  const handleProvinceChange = (value: string) => {\n    onProvinceChange?.(value);\n    // Clear dependent selections\n    onCityChange?.('');\n    onBarangayChange?.('');\n  };\n\n  const handleCityChange = (value: string) => {\n    onCityChange?.(value);\n    // Clear dependent selections\n    onBarangayChange?.('');\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <DropdownSelect\n        label=\"Region\"\n        placeholder={loadingRegions ? \"Loading regions...\" : \"Select a region\"}\n        options={regionOptions}\n        value={regionCode}\n        onChange={handleRegionChange}\n        disabled={disabled || loadingRegions}\n        variant={required && !regionCode ? 'error' : 'default'}\n      />\n\n      <DropdownSelect\n        label=\"Province\"\n        placeholder={loadingProvinces ? \"Loading provinces...\" : regionCode ? \"Select a province\" : \"Select a region first\"}\n        options={provinceOptions}\n        value={provinceCode}\n        onChange={handleProvinceChange}\n        disabled={disabled || !regionCode || loadingProvinces}\n        variant={required && regionCode && !provinceCode ? 'error' : 'default'}\n      />\n\n      <DropdownSelect\n        label=\"City/Municipality\"\n        placeholder={loadingCities ? \"Loading cities...\" : provinceCode ? \"Select a city/municipality\" : \"Select a province first\"}\n        options={cityOptions}\n        value={cityCode}\n        onChange={handleCityChange}\n        disabled={disabled || !provinceCode || loadingCities}\n        variant={required && provinceCode && !cityCode ? 'error' : 'default'}\n      />\n\n      <DropdownSelect\n        label=\"Barangay\"\n        placeholder={loadingBarangays ? \"Loading barangays...\" : cityCode ? \"Select a barangay\" : \"Select a city/municipality first\"}\n        options={barangayOptions}\n        value={barangayCode}\n        onChange={onBarangayChange}\n        disabled={disabled || !cityCode || loadingBarangays}\n        variant={required && cityCode && !barangayCode ? 'error' : 'default'}\n      />\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/SimpleGeographicSelector/SimpleGeographicSelector.tsx",
          "lineCount": 264,
          "cyclomaticComplexity": 57,
          "cognitiveComplexity": 69
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "SimpleGeographicSelector",
          "line": 20,
          "message": "Function 'SimpleGeographicSelector' has 264 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "SimpleGeographicSelector",
          "line": 20,
          "complexity": 57,
          "message": "Function 'SimpleGeographicSelector' has cyclomatic complexity of 57 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "SimpleGeographicSelector",
          "line": 20,
          "complexity": 69,
          "message": "Function 'SimpleGeographicSelector' has cognitive complexity of 69 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/StreetSelector/StreetSelector.tsx",
      "lineCount": 357,
      "functions": [
        {
          "name": "onSelect",
          "startLine": 18,
          "endLine": 19,
          "code": "  onSelect: (streetId: string | null) => void;\n  error?: string;\n",
          "filePath": "src/components/organisms/StreetSelector/StreetSelector.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "StreetSelector",
          "startLine": 24,
          "endLine": 357,
          "code": "export default function StreetSelector({\n  value,\n  onSelect,\n  error,\n  placeholder = '🛣️ Search streets or create new',\n  subdivisionId = null,\n}: StreetSelectorProps) {\n  const { userProfile } = useAuth();\n  const [streets, setStreets] = useState<Street[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isOpen, setIsOpen] = useState(false);\n  const [newStreetName, setNewStreetName] = useState('');\n  const [isCreating, setIsCreating] = useState(false);\n\n  // Load streets for the user's barangay\n  const loadStreets = useCallback(async () => {\n    if (!userProfile?.barangay_code) {\n      logger.debug('No barangay_code available, cannot load streets');\n      return;\n    }\n\n    logger.debug('Loading streets for barangay', { \n      barangayCode: userProfile.barangay_code,\n      subdivisionId \n    });\n    setLoading(true);\n    try {\n      let query = supabase\n        .from('geo_streets')\n        .select(`\n          id,\n          name,\n          barangay_code,\n          subdivision_id,\n          description,\n          geo_subdivisions (\n            name\n          )\n        `)\n        .eq('barangay_code', userProfile.barangay_code)\n        .eq('is_active', true)\n        .order('name', { ascending: true });\n\n      // Filter by subdivision if provided\n      if (subdivisionId) {\n        query = query.eq('subdivision_id', subdivisionId);\n      } else {\n        // Show streets without subdivision or null subdivision\n        query = query.is('subdivision_id', null);\n      }\n\n      const { data: streetsData, error } = await query;\n\n      if (error) {\n        logger.error('Error loading streets', { error });\n        return;\n      }\n\n      // Format the data\n      const formattedStreets = (streetsData || []).map(street => ({\n        id: street.id,\n        name: street.name,\n        barangay_code: street.barangay_code,\n        subdivision_id: street.subdivision_id,\n        subdivision_name: (street.geo_subdivisions as any)?.name || null,\n        description: street.description,\n      }));\n\n      logger.debug('Loaded streets', { count: formattedStreets.length });\n      setStreets(formattedStreets);\n    } catch (error) {\n      logError(error as Error, 'STREET_LOAD_ERROR');\n    } finally {\n      setLoading(false);\n    }\n  }, [userProfile?.barangay_code, subdivisionId]);\n\n  // Load streets when barangay or subdivision changes\n  useEffect(() => {\n    loadStreets();\n  }, [loadStreets]);\n\n  // Create new street\n  const createStreet = async () => {\n    if (!newStreetName.trim() || !userProfile?.barangay_code) return;\n\n    setIsCreating(true);\n    try {\n      logger.info('Creating new street', { name: newStreetName.trim() });\n\n      // Derive geographic codes from barangay code\n      const barangayCode = userProfile.barangay_code;\n      const regionCode = barangayCode.substring(0, 2);\n      const provinceCode = barangayCode.substring(0, 4);\n      const cityMunicipalityCode = barangayCode.substring(0, 6);\n\n      const { data: newStreet, error } = await supabase\n        .from('geo_streets')\n        .insert([{\n          name: newStreetName.trim(),\n          subdivision_id: subdivisionId,\n          barangay_code: barangayCode,\n          city_municipality_code: cityMunicipalityCode,\n          province_code: provinceCode,\n          region_code: regionCode,\n          created_by: userProfile.id,\n        }])\n        .select('id, name')\n        .single();\n\n      if (error) {\n        logger.error('Error creating street', { error });\n        alert(`Failed to create street: ${error.message}`);\n        return;\n      }\n\n      logger.info('Created new street', { streetId: newStreet.id, name: newStreet.name });\n      \n      // Select the newly created street\n      onSelect(newStreet.id);\n      setNewStreetName('');\n      setShowCreateForm(false);\n      setIsOpen(false);\n      \n      // Refresh streets list\n      setTimeout(() => {\n        loadStreets();\n      }, 500);\n\n    } catch (error) {\n      logError(error as Error, 'STREET_CREATION_ERROR');\n      alert('An unexpected error occurred while creating the street.');\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  // Filter streets based on search term\n  const filteredStreets = streets.filter(street => {\n    const searchLower = searchTerm.toLowerCase();\n    return (\n      street.name.toLowerCase().includes(searchLower) ||\n      street.subdivision_name?.toLowerCase().includes(searchLower)\n    );\n  });\n\n  const selectedStreet = streets.find(s => s.id === value);\n\n  // Helper function to format display name\n  const formatDisplayName = (street: Street) => {\n    if (street.subdivision_name) {\n      return `${street.name} (${street.subdivision_name})`;\n    }\n    return street.name;\n  };\n\n  return (\n    <div className=\"relative\">\n      <div\n        className={`font-montserrat relative rounded border text-base focus-within:border-transparent focus-within:ring-2 ${\n          error\n            ? 'border-red-500 focus-within:ring-red-500'\n            : 'border-neutral-300 focus-within:ring-blue-500'\n        }`}\n      >\n        <input\n          type=\"text\"\n          value={\n            selectedStreet\n              ? formatDisplayName(selectedStreet)\n              : searchTerm\n          }\n          onChange={e => {\n            setSearchTerm(e.target.value);\n            setIsOpen(true);\n            if (!e.target.value) {\n              onSelect(null);\n            }\n          }}\n          onFocus={() => setIsOpen(true)}\n          className=\"w-full bg-transparent px-3 py-2 outline-none\"\n          placeholder={placeholder}\n        />\n\n        <button\n          type=\"button\"\n          onClick={() => setIsOpen(!isOpen)}\n          className=\"absolute right-2 top-1/2 -translate-y-1/2 text-neutral-500 hover:text-neutral-700\"\n        >\n          <svg className=\"size-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d={isOpen ? 'M5 15l7-7 7 7' : 'M19 9l-7 7-7-7'}\n            />\n          </svg>\n        </button>\n      </div>\n\n      {/* Dropdown */}\n      {isOpen && (\n        <div className=\"absolute z-10 mt-1 max-h-60 w-full overflow-y-auto rounded-lg border border-neutral-300 bg-white shadow-lg\">\n          {loading ? (\n            <div className=\"p-3 text-center text-neutral-500\">\n              <div className=\"animate-pulse\">Loading streets...</div>\n            </div>\n          ) : (\n            <div>\n              {/* Create new street option */}\n              {!showCreateForm ? (\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    setShowCreateForm(true);\n                    setNewStreetName(searchTerm);\n                  }}\n                  className=\"w-full border-b border-neutral-100 p-3 text-left hover:bg-blue-50\"\n                >\n                  <div className=\"font-medium text-blue-600\">+ Create New Street</div>\n                  <div className=\"text-xs text-blue-500\">\n                    {searchTerm ? `Create \"${searchTerm}\"` : 'Add a new street to this area'}\n                  </div>\n                </button>\n              ) : (\n                <div className=\"border-b border-neutral-100 p-3\">\n                  <div className=\"font-medium text-blue-600 mb-2\">Create New Street</div>\n                  <div className=\"flex gap-2\">\n                    <input\n                      type=\"text\"\n                      value={newStreetName}\n                      onChange={e => setNewStreetName(e.target.value)}\n                      placeholder=\"Enter street name\"\n                      className=\"flex-1 rounded border border-neutral-300 px-2 py-1 text-sm focus:border-blue-500 focus:outline-none\"\n                      onKeyDown={e => {\n                        if (e.key === 'Enter') {\n                          e.preventDefault();\n                          createStreet();\n                        } else if (e.key === 'Escape') {\n                          setShowCreateForm(false);\n                          setNewStreetName('');\n                        }\n                      }}\n                      autoFocus\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={createStreet}\n                      disabled={!newStreetName.trim() || isCreating}\n                      className=\"rounded bg-blue-600 px-3 py-1 text-xs text-white hover:bg-blue-700 disabled:bg-neutral-400\"\n                    >\n                      {isCreating ? '...' : 'Add'}\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => {\n                        setShowCreateForm(false);\n                        setNewStreetName('');\n                      }}\n                      className=\"rounded bg-neutral-400 px-2 py-1 text-xs text-white hover:bg-neutral-500\"\n                    >\n                      ✕\n                    </button>\n                  </div>\n                </div>\n              )}\n\n              {/* Show message when no existing streets */}\n              {filteredStreets.length === 0 && !searchTerm && (\n                <div className=\"p-3 text-center text-neutral-500\">\n                  <div className=\"text-sm\">No streets found in this area</div>\n                  <div className=\"mt-1 text-xs text-green-600\">\n                    ✓ Create the first street above\n                  </div>\n                </div>\n              )}\n\n              {/* Show \"no search results\" when searching */}\n              {filteredStreets.length === 0 && searchTerm && !showCreateForm && (\n                <div className=\"p-3 text-center text-neutral-500\">\n                  <div className=\"text-sm\">No streets match your search</div>\n                </div>\n              )}\n\n              {/* Existing streets */}\n              {filteredStreets.map(street => (\n                <button\n                  key={street.id}\n                  type=\"button\"\n                  onClick={() => {\n                    onSelect(street.id);\n                    setSearchTerm('');\n                    setIsOpen(false);\n                    setShowCreateForm(false);\n                  }}\n                  className=\"w-full border-b border-neutral-100 p-3 text-left last:border-b-0 hover:bg-neutral-50\"\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-neutral-900\">{street.name}</div>\n                      {street.subdivision_name && (\n                        <div className=\"text-sm text-neutral-600\">\n                          in {street.subdivision_name}\n                        </div>\n                      )}\n                      {street.description && (\n                        <div className=\"text-xs text-neutral-500\">{street.description}</div>\n                      )}\n                    </div>\n                  </div>\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Click outside to close */}\n      {isOpen && <div className=\"fixed inset-0 z-0\" onClick={() => {\n        setIsOpen(false);\n        setShowCreateForm(false);\n      }} />}\n\n      {/* Error message */}\n      {error && (\n        <p className=\"mt-2 text-sm text-red-600\" role=\"alert\">\n          {error}\n        </p>\n      )}\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/StreetSelector/StreetSelector.tsx",
          "lineCount": 334,
          "cyclomaticComplexity": 35,
          "cognitiveComplexity": 37
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 357 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "StreetSelector",
          "line": 24,
          "message": "Function 'StreetSelector' has 334 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "StreetSelector",
          "line": 24,
          "complexity": 35,
          "message": "Function 'StreetSelector' has cyclomatic complexity of 35 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "StreetSelector",
          "line": 24,
          "complexity": 37,
          "message": "Function 'StreetSelector' has cognitive complexity of 37 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/SubdivisionSelector/SubdivisionSelector.tsx",
      "lineCount": 341,
      "functions": [
        {
          "name": "onSelect",
          "startLine": 17,
          "endLine": 18,
          "code": "  onSelect: (subdivisionId: string | null) => void;\n  error?: string;\n",
          "filePath": "src/components/organisms/SubdivisionSelector/SubdivisionSelector.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "SubdivisionSelector",
          "startLine": 22,
          "endLine": 341,
          "code": "export default function SubdivisionSelector({\n  value,\n  onSelect,\n  error,\n  placeholder = '🏘️ Search subdivisions or create new',\n}: SubdivisionSelectorProps) {\n  const { userProfile } = useAuth();\n  const [subdivisions, setSubdivisions] = useState<Subdivision[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isOpen, setIsOpen] = useState(false);\n  const [newSubdivisionData, setNewSubdivisionData] = useState({\n    name: '',\n    type: 'Subdivision' as 'Subdivision' | 'Zone' | 'Sitio' | 'Purok'\n  });\n  const [isCreating, setIsCreating] = useState(false);\n\n  // Load subdivisions for the user's barangay\n  const loadSubdivisions = useCallback(async () => {\n    if (!userProfile?.barangay_code) {\n      logger.debug('No barangay_code available, cannot load subdivisions');\n      return;\n    }\n\n    logger.debug('Loading subdivisions for barangay', { barangayCode: userProfile.barangay_code });\n    setLoading(true);\n    try {\n      const { data: subdivisionsData, error } = await supabase\n        .from('geo_subdivisions')\n        .select('id, name, type, barangay_code, description')\n        .eq('barangay_code', userProfile.barangay_code)\n        .eq('is_active', true)\n        .order('name', { ascending: true });\n\n      if (error) {\n        logger.error('Error loading subdivisions', { error });\n        return;\n      }\n\n      logger.debug('Loaded subdivisions', { count: subdivisionsData?.length || 0 });\n      setSubdivisions(subdivisionsData || []);\n    } catch (error) {\n      logError(error as Error, 'SUBDIVISION_LOAD_ERROR');\n    } finally {\n      setLoading(false);\n    }\n  }, [userProfile?.barangay_code]);\n\n  // Load subdivisions when barangay changes\n  useEffect(() => {\n    loadSubdivisions();\n  }, [loadSubdivisions]);\n\n  // Create new subdivision\n  const createSubdivision = async () => {\n    if (!newSubdivisionData.name.trim() || !userProfile?.barangay_code) return;\n\n    setIsCreating(true);\n    try {\n      logger.info('Creating new subdivision', { \n        name: newSubdivisionData.name.trim(),\n        type: newSubdivisionData.type \n      });\n\n      // Derive geographic codes from barangay code\n      const barangayCode = userProfile.barangay_code;\n      const regionCode = barangayCode.substring(0, 2);\n      const provinceCode = barangayCode.substring(0, 4);\n      const cityMunicipalityCode = barangayCode.substring(0, 6);\n\n      const { data: newSubdivision, error } = await supabase\n        .from('geo_subdivisions')\n        .insert([{\n          name: newSubdivisionData.name.trim(),\n          type: newSubdivisionData.type,\n          barangay_code: barangayCode,\n          city_municipality_code: cityMunicipalityCode,\n          province_code: provinceCode,\n          region_code: regionCode,\n          created_by: userProfile.id,\n        }])\n        .select('id, name, type')\n        .single();\n\n      if (error) {\n        logger.error('Error creating subdivision', { error });\n        alert(`Failed to create subdivision: ${error.message}`);\n        return;\n      }\n\n      logger.info('Created new subdivision', { \n        subdivisionId: newSubdivision.id, \n        name: newSubdivision.name,\n        type: newSubdivision.type \n      });\n      \n      // Select the newly created subdivision\n      onSelect(newSubdivision.id);\n      setNewSubdivisionData({ name: '', type: 'Subdivision' });\n      setShowCreateForm(false);\n      setIsOpen(false);\n      \n      // Refresh subdivisions list\n      setTimeout(() => {\n        loadSubdivisions();\n      }, 500);\n\n    } catch (error) {\n      logError(error as Error, 'SUBDIVISION_CREATION_ERROR');\n      alert('An unexpected error occurred while creating the subdivision.');\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  // Filter subdivisions based on search term\n  const filteredSubdivisions = subdivisions.filter(subdivision => {\n    const searchLower = searchTerm.toLowerCase();\n    return (\n      subdivision.name.toLowerCase().includes(searchLower) ||\n      subdivision.type.toLowerCase().includes(searchLower)\n    );\n  });\n\n  const selectedSubdivision = subdivisions.find(s => s.id === value);\n\n  // Helper function to format display name\n  const formatDisplayName = (subdivision: Subdivision) => {\n    return `${subdivision.name} (${subdivision.type})`;\n  };\n\n  const subdivisionTypes = ['Subdivision', 'Zone', 'Sitio', 'Purok'] as const;\n\n  return (\n    <div className=\"relative\">\n      <div\n        className={`font-montserrat relative rounded border text-base focus-within:border-transparent focus-within:ring-2 ${\n          error\n            ? 'border-red-500 focus-within:ring-red-500'\n            : 'border-neutral-300 focus-within:ring-blue-500'\n        }`}\n      >\n        <input\n          type=\"text\"\n          value={\n            selectedSubdivision\n              ? formatDisplayName(selectedSubdivision)\n              : searchTerm\n          }\n          onChange={e => {\n            setSearchTerm(e.target.value);\n            setIsOpen(true);\n            if (!e.target.value) {\n              onSelect(null);\n            }\n          }}\n          onFocus={() => setIsOpen(true)}\n          className=\"w-full bg-transparent px-3 py-2 outline-none\"\n          placeholder={placeholder}\n        />\n\n        <button\n          type=\"button\"\n          onClick={() => setIsOpen(!isOpen)}\n          className=\"absolute right-2 top-1/2 -translate-y-1/2 text-neutral-500 hover:text-neutral-700\"\n        >\n          <svg className=\"size-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d={isOpen ? 'M5 15l7-7 7 7' : 'M19 9l-7 7-7-7'}\n            />\n          </svg>\n        </button>\n      </div>\n\n      {/* Dropdown */}\n      {isOpen && (\n        <div className=\"absolute z-10 mt-1 max-h-60 w-full overflow-y-auto rounded-lg border border-neutral-300 bg-white shadow-lg\">\n          {loading ? (\n            <div className=\"p-3 text-center text-neutral-500\">\n              <div className=\"animate-pulse\">Loading subdivisions...</div>\n            </div>\n          ) : (\n            <div>\n              {/* Create new subdivision option */}\n              {!showCreateForm ? (\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    setShowCreateForm(true);\n                    setNewSubdivisionData(prev => ({ ...prev, name: searchTerm }));\n                  }}\n                  className=\"w-full border-b border-neutral-100 p-3 text-left hover:bg-blue-50\"\n                >\n                  <div className=\"font-medium text-blue-600\">+ Create New Subdivision</div>\n                  <div className=\"text-xs text-blue-500\">\n                    {searchTerm ? `Create \"${searchTerm}\"` : 'Add a new subdivision/zone/sitio/purok'}\n                  </div>\n                </button>\n              ) : (\n                <div className=\"border-b border-neutral-100 p-3\">\n                  <div className=\"font-medium text-blue-600 mb-2\">Create New Subdivision</div>\n                  <div className=\"space-y-2\">\n                    <input\n                      type=\"text\"\n                      value={newSubdivisionData.name}\n                      onChange={e => setNewSubdivisionData(prev => ({ ...prev, name: e.target.value }))}\n                      placeholder=\"Enter subdivision name\"\n                      className=\"w-full rounded border border-neutral-300 px-2 py-1 text-sm focus:border-blue-500 focus:outline-none\"\n                      onKeyDown={e => {\n                        if (e.key === 'Enter') {\n                          e.preventDefault();\n                          createSubdivision();\n                        } else if (e.key === 'Escape') {\n                          setShowCreateForm(false);\n                          setNewSubdivisionData({ name: '', type: 'Subdivision' });\n                        }\n                      }}\n                      autoFocus\n                    />\n                    <div className=\"flex gap-2 items-center\">\n                      <select\n                        value={newSubdivisionData.type}\n                        onChange={e => setNewSubdivisionData(prev => ({ \n                          ...prev, \n                          type: e.target.value as typeof prev.type \n                        }))}\n                        className=\"flex-1 rounded border border-neutral-300 px-2 py-1 text-sm focus:border-blue-500 focus:outline-none\"\n                      >\n                        {subdivisionTypes.map(type => (\n                          <option key={type} value={type}>{type}</option>\n                        ))}\n                      </select>\n                      <button\n                        type=\"button\"\n                        onClick={createSubdivision}\n                        disabled={!newSubdivisionData.name.trim() || isCreating}\n                        className=\"rounded bg-blue-600 px-3 py-1 text-xs text-white hover:bg-blue-700 disabled:bg-neutral-400\"\n                      >\n                        {isCreating ? '...' : 'Add'}\n                      </button>\n                      <button\n                        type=\"button\"\n                        onClick={() => {\n                          setShowCreateForm(false);\n                          setNewSubdivisionData({ name: '', type: 'Subdivision' });\n                        }}\n                        className=\"rounded bg-neutral-400 px-2 py-1 text-xs text-white hover:bg-neutral-500\"\n                      >\n                        ✕\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Show message when no existing subdivisions */}\n              {filteredSubdivisions.length === 0 && !searchTerm && (\n                <div className=\"p-3 text-center text-neutral-500\">\n                  <div className=\"text-sm\">No subdivisions found in this barangay</div>\n                  <div className=\"mt-1 text-xs text-green-600\">\n                    ✓ Create the first subdivision above\n                  </div>\n                </div>\n              )}\n\n              {/* Show \"no search results\" when searching */}\n              {filteredSubdivisions.length === 0 && searchTerm && !showCreateForm && (\n                <div className=\"p-3 text-center text-neutral-500\">\n                  <div className=\"text-sm\">No subdivisions match your search</div>\n                </div>\n              )}\n\n              {/* Existing subdivisions */}\n              {filteredSubdivisions.map(subdivision => (\n                <button\n                  key={subdivision.id}\n                  type=\"button\"\n                  onClick={() => {\n                    onSelect(subdivision.id);\n                    setSearchTerm('');\n                    setIsOpen(false);\n                    setShowCreateForm(false);\n                  }}\n                  className=\"w-full border-b border-neutral-100 p-3 text-left last:border-b-0 hover:bg-neutral-50\"\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-neutral-900\">{subdivision.name}</div>\n                      <div className=\"text-sm text-neutral-600\">Type: {subdivision.type}</div>\n                      {subdivision.description && (\n                        <div className=\"text-xs text-neutral-500\">{subdivision.description}</div>\n                      )}\n                    </div>\n                  </div>\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Click outside to close */}\n      {isOpen && <div className=\"fixed inset-0 z-0\" onClick={() => {\n        setIsOpen(false);\n        setShowCreateForm(false);\n      }} />}\n\n      {/* Error message */}\n      {error && (\n        <p className=\"mt-2 text-sm text-red-600\" role=\"alert\">\n          {error}\n        </p>\n      )}\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/SubdivisionSelector/SubdivisionSelector.tsx",
          "lineCount": 320,
          "cyclomaticComplexity": 31,
          "cognitiveComplexity": 32
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 341 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "SubdivisionSelector",
          "line": 22,
          "message": "Function 'SubdivisionSelector' has 320 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "SubdivisionSelector",
          "line": 22,
          "complexity": 31,
          "message": "Function 'SubdivisionSelector' has cyclomatic complexity of 31 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "SubdivisionSelector",
          "line": 22,
          "complexity": 32,
          "message": "Function 'SubdivisionSelector' has cognitive complexity of 32 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/Table/Table.stories.tsx",
      "lineCount": 599,
      "functions": [
        {
          "name": "render",
          "startLine": 80,
          "endLine": 81,
          "code": "  render: () => (\n    <Table>\n",
          "filePath": "src/components/organisms/Table/Table.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 114,
          "endLine": 190,
          "code": "  render: () => {\n    const [selectedItems, setSelectedItems] = React.useState<number[]>([]);\n\n    const handleSelectAll = (checked: boolean) => {\n      if (checked) {\n        setSelectedItems(mockContacts.map(contact => contact.id));\n      } else {\n        setSelectedItems([]);\n      }\n    };\n\n    const handleSelectItem = (id: number, checked: boolean) => {\n      if (checked) {\n        setSelectedItems([...selectedItems, id]);\n      } else {\n        setSelectedItems(selectedItems.filter(itemId => itemId !== id));\n      }\n    };\n\n    return (\n      <Table>\n        <TableBody>\n          {/* Header Row */}\n          <TableRow className=\"border-b bg-gray-50\">\n            <TableCell\n              type=\"checkbox\"\n              checkbox={{\n                checked: selectedItems.length === mockContacts.length,\n                onChange: handleSelectAll,\n              }}\n            />\n            <TableCell>\n              <strong>Name</strong>\n            </TableCell>\n            <TableCell>\n              <strong>Email</strong>\n            </TableCell>\n            <TableCell>\n              <strong>Status</strong>\n            </TableCell>\n          </TableRow>\n\n          {/* Data Rows */}\n          {mockContacts.map(contact => (\n            <TableRow key={contact.id} className=\"border-b\">\n              <TableCell\n                type=\"checkbox\"\n                checkbox={{\n                  checked: selectedItems.includes(contact.id),\n                  onChange: checked => handleSelectItem(contact.id, checked),\n                }}\n              />\n              <TableCell>{contact.name}</TableCell>\n              <TableCell>{contact.email}</TableCell>\n              <TableCell>\n                <span\n                  className={`rounded-full px-2 py-1 text-xs ${\n                    contact.status === 'active'\n                      ? 'bg-green-100 text-green-800'\n                      : 'bg-gray-100 text-gray-800'\n                  }`}\n                >\n                  {contact.status}\n                </span>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n\n        {selectedItems.length > 0 && (\n          <div className=\"border-t border-blue-200 bg-blue-50 p-3\">\n            <p className=\"text-sm text-blue-800\">{selectedItems.length} item(s) selected</p>\n          </div>\n        )}\n      </Table>\n    );\n  },\n",
          "filePath": "src/components/organisms/Table/Table.stories.tsx",
          "lineCount": 77,
          "cyclomaticComplexity": 7,
          "cognitiveComplexity": 5
        },
        {
          "name": "render",
          "startLine": 201,
          "endLine": 202,
          "code": "  render: () => (\n    <Table>\n",
          "filePath": "src/components/organisms/Table/Table.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 242,
          "endLine": 367,
          "code": "  render: () => {\n    const [searchTerm, setSearchTerm] = React.useState('');\n    const [selectedItems, setSelectedItems] = React.useState<number[]>([]);\n\n    const filteredContacts = mockContacts.filter(\n      contact =>\n        contact.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        contact.email.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    const handleSelectAll = (checked: boolean) => {\n      if (checked) {\n        setSelectedItems(filteredContacts.map(contact => contact.id));\n      } else {\n        setSelectedItems([]);\n      }\n    };\n\n    const handleSelectItem = (id: number, checked: boolean) => {\n      if (checked) {\n        setSelectedItems([...selectedItems, id]);\n      } else {\n        setSelectedItems(selectedItems.filter(itemId => itemId !== id));\n      }\n    };\n\n    return (\n      <div className=\"space-y-4\">\n        <TableControls\n          selectAll={{\n            checked:\n              selectedItems.length === filteredContacts.length && filteredContacts.length > 0,\n            onChange: handleSelectAll,\n            label: 'Select all contacts',\n          }}\n          search={{\n            value: searchTerm,\n            onChange: setSearchTerm,\n            placeholder: 'Search contacts...',\n          }}\n          actions={\n            selectedItems.length > 0 && (\n              <div className=\"flex gap-2\">\n                <button\n                  onClick={() => action('bulk-delete')(selectedItems)}\n                  className=\"rounded bg-red-600 px-3 py-2 text-sm text-white hover:bg-red-700\"\n                >\n                  Delete Selected\n                </button>\n                <button\n                  onClick={() => action('bulk-export')(selectedItems)}\n                  className=\"rounded bg-blue-600 px-3 py-2 text-sm text-white hover:bg-blue-700\"\n                >\n                  Export Selected\n                </button>\n              </div>\n            )\n          }\n        />\n\n        <Table>\n          <TableBody>\n            {/* Header Row */}\n            <TableRow className=\"border-b bg-gray-50\">\n              <TableCell\n                type=\"checkbox\"\n                checkbox={{\n                  checked:\n                    selectedItems.length === filteredContacts.length && filteredContacts.length > 0,\n                  onChange: handleSelectAll,\n                }}\n              />\n              <TableCell>\n                <strong>Name</strong>\n              </TableCell>\n              <TableCell>\n                <strong>Email</strong>\n              </TableCell>\n              <TableCell>\n                <strong>Role</strong>\n              </TableCell>\n              <TableCell>\n                <strong>Actions</strong>\n              </TableCell>\n            </TableRow>\n\n            {/* Data Rows */}\n            {filteredContacts.length > 0 ? (\n              filteredContacts.map(contact => (\n                <TableRow key={contact.id} className=\"border-b hover:bg-gray-50\">\n                  <TableCell\n                    type=\"checkbox\"\n                    checkbox={{\n                      checked: selectedItems.includes(contact.id),\n                      onChange: checked => handleSelectItem(contact.id, checked),\n                    }}\n                  />\n                  <TableCell>{contact.name}</TableCell>\n                  <TableCell>{contact.email}</TableCell>\n                  <TableCell>{contact.role}</TableCell>\n                  <TableCell type=\"action\" />\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  className=\"py-8 text-center text-gray-500\"\n                  style={{ gridColumn: '1 / -1' }}\n                >\n                  No contacts found matching \"{searchTerm}\"\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n\n        {selectedItems.length > 0 && (\n          <div className=\"rounded border border-blue-200 bg-blue-50 p-3\">\n            <p className=\"text-sm text-blue-800\">\n              {selectedItems.length} of {filteredContacts.length} contacts selected\n            </p>\n          </div>\n        )}\n      </div>\n    );\n  },\n",
          "filePath": "src/components/organisms/Table/Table.stories.tsx",
          "lineCount": 126,
          "cyclomaticComplexity": 10,
          "cognitiveComplexity": 9
        },
        {
          "name": "render",
          "startLine": 378,
          "endLine": 490,
          "code": "  render: () => {\n    const residents = [\n      {\n        id: 1,\n        name: 'Juan Carlos de la Cruz',\n        age: 34,\n        address: 'Block 5 Lot 12, San Lorenzo Street',\n        occupation: 'Tricycle Driver',\n        household: 'HH-001',\n      },\n      {\n        id: 2,\n        name: 'Maria Esperanza Santos',\n        age: 29,\n        address: 'Unit 3B, Greenview Subdivision',\n        occupation: 'Elementary Teacher',\n        household: 'HH-002',\n      },\n      {\n        id: 3,\n        name: 'Pedro Antonio Rodriguez',\n        age: 45,\n        address: '123 Rizal Avenue, Zone 1',\n        occupation: 'Barangay Tanod',\n        household: 'HH-003',\n      },\n    ];\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-xl font-semibold text-gray-900\">Barangay San Lorenzo - Residents</h2>\n          <button\n            onClick={() => action('add-resident')()}\n            className=\"rounded bg-blue-600 px-4 py-2 text-white hover:bg-blue-700\"\n          >\n            + Add Resident\n          </button>\n        </div>\n\n        <TableControls\n          search={{\n            value: '',\n            onChange: action('search-residents'),\n            placeholder: 'Search residents by name or address...',\n          }}\n        />\n\n        <Table className=\"overflow-hidden rounded-lg border border-gray-200\">\n          <TableBody>\n            {/* Header Row */}\n            <TableRow className=\"border-b bg-gray-100\">\n              <TableCell>\n                <strong>Full Name</strong>\n              </TableCell>\n              <TableCell>\n                <strong>Age</strong>\n              </TableCell>\n              <TableCell>\n                <strong>Address</strong>\n              </TableCell>\n              <TableCell>\n                <strong>Occupation</strong>\n              </TableCell>\n              <TableCell>\n                <strong>Household</strong>\n              </TableCell>\n              <TableCell>\n                <strong>Actions</strong>\n              </TableCell>\n            </TableRow>\n\n            {/* Data Rows */}\n            {residents.map(resident => (\n              <TableRow key={resident.id} className=\"border-b last:border-b-0 hover:bg-gray-50\">\n                <TableCell>\n                  <div className=\"font-medium text-gray-900\">{resident.name}</div>\n                </TableCell>\n                <TableCell>{resident.age} years old</TableCell>\n                <TableCell className=\"text-sm text-gray-600\">{resident.address}</TableCell>\n                <TableCell>{resident.occupation}</TableCell>\n                <TableCell>\n                  <span className=\"rounded bg-blue-100 px-2 py-1 font-mono text-sm text-blue-800\">\n                    {resident.household}\n                  </span>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex gap-1\">\n                    <button\n                      onClick={() => action('view-resident')(resident)}\n                      className=\"rounded bg-gray-100 px-2 py-1 text-xs text-gray-700 hover:bg-gray-200\"\n                    >\n                      View\n                    </button>\n                    <button\n                      onClick={() => action('edit-resident')(resident)}\n                      className=\"rounded bg-blue-100 px-2 py-1 text-xs text-blue-700 hover:bg-blue-200\"\n                    >\n                      Edit\n                    </button>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n\n        <div className=\"text-sm text-gray-500\">\n          Showing {residents.length} residents • Last updated: {new Date().toLocaleDateString()}\n        </div>\n      </div>\n    );\n  },\n",
          "filePath": "src/components/organisms/Table/Table.stories.tsx",
          "lineCount": 113,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 501,
          "endLine": 502,
          "code": "  render: () => (\n    <Table>\n",
          "filePath": "src/components/organisms/Table/Table.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 537,
          "endLine": 538,
          "code": "  render: () => (\n    <div className=\"space-y-6\">\n",
          "filePath": "src/components/organisms/Table/Table.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 599 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 114,
          "message": "Function 'render' has 77 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 242,
          "message": "Function 'render' has 126 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "render",
          "line": 378,
          "message": "Function 'render' has 113 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/Table/Table.tsx",
      "lineCount": 235,
      "functions": [
        {
          "name": "Table",
          "startLine": 17,
          "endLine": 19,
          "code": "export function Table({ children, className = '' }: TableProps) {\n  return <div className={`flex flex-col ${className}`}>{children}</div>;\n}\n",
          "filePath": "src/components/organisms/Table/Table.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "TableBody",
          "startLine": 25,
          "endLine": 27,
          "code": "export function TableBody({ children }: TableBodyProps) {\n  return <div className=\"flex flex-col\">{children}</div>;\n}\n",
          "filePath": "src/components/organisms/Table/Table.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "TableRow",
          "startLine": 34,
          "endLine": 42,
          "code": "export function TableRow({ children, className = '' }: TableRowProps) {\n  return (\n    <div\n      className={`flex items-center transition-colors bg-surface hover:bg-surface-hover ${className}`}\n    >\n      {children}\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/Table/Table.tsx",
          "lineCount": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "TableCell",
          "startLine": 54,
          "endLine": 102,
          "code": "export function TableCell({\n  children,\n  className = '',\n  type = 'content',\n  checkbox,\n}: TableCellProps) {\n  if (type === 'checkbox') {\n    return (\n      <div className={`p-2 ${className}`}>\n        <button\n          onClick={() => checkbox?.onChange?.(!checkbox.checked)}\n          className=\"flex items-center justify-center rounded border p-0 border-default\"\n        >\n          <div className=\"flex size-4 items-center justify-center\">\n            {checkbox?.checked && (\n              <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"none\">\n                <path\n                  d=\"M10 3L4.5 8.5L2 6\"\n                  stroke=\"#1d4ed8\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                />\n              </svg>\n            )}\n          </div>\n        </button>\n      </div>\n    );\n  }\n\n  if (type === 'action') {\n    return (\n      <div className={`p-1 ${className}`}>\n        <button className=\"rounded border p-2 transition-colors bg-surface border-default hover:bg-surface-hover\">\n          <div className=\"size-5\">\n            <Image alt=\"actions\" className=\"block size-full\" src={imgDots} width={20} height={20} />\n          </div>\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`flex-1 p-2 ${className}`}>\n      <div className=\"text-base font-normal leading-5 font-body text-primary\">{children}</div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/Table/Table.tsx",
          "lineCount": 49,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 6
        },
        {
          "name": "onChange",
          "startLine": 107,
          "endLine": 108,
          "code": "    onChange: (checked: boolean) => void;\n    label?: string;\n",
          "filePath": "src/components/organisms/Table/Table.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "onChange",
          "startLine": 113,
          "endLine": 114,
          "code": "    onChange: (value: string) => void;\n    placeholder?: string;\n",
          "filePath": "src/components/organisms/Table/Table.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "TableControls",
          "startLine": 118,
          "endLine": 234,
          "code": "export function TableControls({ selectAll, actions, search }: TableControlsProps) {\n  return (\n    <div className=\"flex items-center justify-between p-0 bg-surface\">\n      <div className=\"flex items-center\">\n        {selectAll && (\n          <div className=\"flex items-center gap-2 p-2\">\n            <button\n              onClick={() => selectAll.onChange(!selectAll.checked)}\n              className=\"flex items-center gap-2\"\n            >\n              <div className=\"flex items-center justify-center rounded border p-0 border-default\">\n                <div className=\"flex size-4 items-center justify-center\">\n                  {selectAll.checked && (\n                    <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"none\">\n                      <path\n                        d=\"M10 3L4.5 8.5L2 6\"\n                        stroke=\"#1d4ed8\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                      />\n                    </svg>\n                  )}\n                </div>\n              </div>\n              <span className=\"text-base font-normal font-body text-primary\">\n                {selectAll.label || 'Select all'}\n              </span>\n            </button>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex items-center gap-0 p-1\">\n          <button className=\"flex items-center gap-1 rounded border p-2 transition-colors bg-surface border-default hover:bg-surface-hover\">\n            <div className=\"size-5\">\n              <Image alt=\"list\" className=\"block size-full\" src={imgList} width={20} height={20} />\n            </div>\n            <span className=\"px-1 text-base font-medium font-body text-secondary\">Properties</span>\n          </button>\n\n          <button className=\"ml-1 flex items-center gap-1 rounded border p-2 transition-colors bg-surface border-default hover:bg-surface-hover\">\n            <div className=\"size-5\">\n              <Image alt=\"sort\" className=\"block size-full\" src={imgSort} width={20} height={20} />\n            </div>\n            <span className=\"px-1 text-base font-medium font-body text-secondary\">Sort</span>\n          </button>\n\n          <button className=\"ml-1 flex items-center gap-1 rounded border p-2 transition-colors bg-surface border-default hover:bg-surface-hover\">\n            <div className=\"size-5\">\n              <Image\n                alt=\"filter\"\n                className=\"block size-full\"\n                src={imgFilter}\n                width={20}\n                height={20}\n              />\n            </div>\n            <span className=\"px-1 text-base font-medium font-body text-secondary\">Filter</span>\n          </button>\n\n          <button className=\"ml-1 rounded border p-1 transition-colors bg-surface border-default hover:bg-surface-hover\">\n            <div className=\"size-5\">\n              <Image alt=\"more\" className=\"block size-full\" src={imgMore} width={20} height={20} />\n            </div>\n          </button>\n        </div>\n\n        {actions}\n      </div>\n\n      {search && (\n        <div className=\"p-1\">\n          <div className=\"w-60\">\n            <div className=\"relative rounded bg-surface\">\n              <div className=\"flex items-center gap-1 p-2\">\n                <div className=\"shrink-0\">\n                  <div className=\"flex size-5 items-center justify-center\">\n                    <svg className=\"size-3\" viewBox=\"0 0 12 12\" fill=\"none\">\n                      <path\n                        d=\"M5.5 10C7.98528 10 10 7.98528 10 5.5C10 3.01472 7.98528 1 5.5 1C3.01472 1 1 3.01472 1 5.5C1 7.98528 3.01472 10 5.5 10Z\"\n                        stroke=\"rgba(0, 0, 0, 0.32)\"\n                        strokeWidth=\"1.5\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                      />\n                      <path\n                        d=\"M10.7498 10.75L8.7998 8.8\"\n                        stroke=\"rgba(0, 0, 0, 0.32)\"\n                        strokeWidth=\"1.5\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                      />\n                    </svg>\n                  </div>\n                </div>\n\n                <div className=\"flex-1 px-1\">\n                  <input\n                    className=\"w-full border-none bg-transparent text-base font-normal leading-5 outline-none font-body text-primary placeholder:text-muted\"\n                    placeholder={search.placeholder || 'Search contact'}\n                    value={search.value}\n                    onChange={e => search.onChange(e.target.value)}\n                  />\n                </div>\n              </div>\n              <div\n                aria-hidden=\"true\"\n                className=\"pointer-events-none absolute inset-0 rounded border border-solid border-default\"\n              />\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/Table/Table.tsx",
          "lineCount": 117,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 5
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "TableCell",
          "line": 54,
          "message": "Function 'TableCell' has 49 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "TableControls",
          "line": 118,
          "message": "Function 'TableControls' has 117 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/UserProfile/UserProfile.stories.tsx",
      "lineCount": 624,
      "functions": [
        {
          "name": "createMockAuthContext",
          "startLine": 6,
          "endLine": 14,
          "code": "const createMockAuthContext = (overrides = {}) => ({\n  user: null,\n  userProfile: null,\n  role: null,\n  loading: false,\n  profileLoading: false,\n  signOut: jest.fn(),\n  ...overrides,\n});\n",
          "filePath": "src/components/organisms/UserProfile/UserProfile.stories.tsx",
          "lineCount": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "useAuth",
          "startLine": 24,
          "endLine": 25,
          "code": "    useAuth: () => authValue,\n  }));\n",
          "filePath": "src/components/organisms/UserProfile/UserProfile.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "cycleRole",
          "startLine": 413,
          "endLine": 416,
          "code": "      const cycleRole = () => {\n        currentRoleIndex = (currentRoleIndex + 1) % roles.length;\n        // In a real implementation, this would trigger a re-render with new role\n      };\n",
          "filePath": "src/components/organisms/UserProfile/UserProfile.stories.tsx",
          "lineCount": 4,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 624 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/UserProfile/UserProfile.tsx",
      "lineCount": 185,
      "functions": [
        {
          "name": "UserProfile",
          "startLine": 11,
          "endLine": 184,
          "code": "export default function UserProfile({\n  compact = false,\n  showBarangay = true,\n  className = '',\n}: UserProfileProps) {\n  const { user, userProfile, role, signOut, loading, profileLoading } = useAuth();\n  const [showDropdown, setShowDropdown] = useState(false);\n\n  // For now, mock barangay accounts until the full implementation is available\n  const barangayAccounts: {\n    id: string;\n    barangay_code: string;\n    role: string;\n    status: string;\n    is_primary: boolean;\n  }[] = [];\n  const address = null;\n\n  if (loading || profileLoading) {\n    return (\n      <div className={`flex items-center gap-2 ${className}`}>\n        <div className=\"size-8 animate-pulse rounded-full bg-background-muted\"></div>\n        {!compact && <div className=\"h-4 w-20 animate-pulse rounded bg-background-muted\"></div>}\n      </div>\n    );\n  }\n\n  if (!user || !userProfile) {\n    return null;\n  }\n\n  const displayName = `${userProfile.first_name} ${userProfile.last_name}`;\n  const initials = `${userProfile.first_name[0]}${userProfile.last_name[0]}`.toUpperCase();\n\n  const handleSignOut = async () => {\n    try {\n      await signOut();\n      window.location.href = '/login';\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  if (compact) {\n    return (\n      <div className={`relative ${className}`}>\n        <button\n          onClick={() => setShowDropdown(!showDropdown)}\n          className=\"flex items-center gap-2 rounded-md p-2 transition-colors hover:bg-surface-hover focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <div className=\"flex size-8 items-center justify-center rounded-full bg-blue-600 text-sm font-medium text-white\">\n            {initials}\n          </div>\n          <div className=\"text-left\">\n            <div className=\"text-sm font-medium text-primary\">{displayName}</div>\n            <div className=\"text-xs text-secondary\">{role?.name}</div>\n          </div>\n          {/* Dropdown chevron icon */}\n          <svg\n            className=\"ml-1 size-4 text-secondary\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n          </svg>\n        </button>\n\n        {showDropdown && (\n          <>\n            <div className=\"fixed inset-0 z-10\" onClick={() => setShowDropdown(false)}></div>\n            <div className=\"absolute right-0 z-50 mt-2 w-64 rounded-md border shadow-xl bg-surface border-default\">\n              <div className=\"border-b p-4 border-default\">\n                <div className=\"font-medium text-primary\">{displayName}</div>\n                <div className=\"text-sm text-secondary\">{userProfile.email}</div>\n                <div className=\"mt-1 text-xs text-blue-600\">{role?.name}</div>\n              </div>\n\n              {showBarangay && address && (\n                <div className=\"border-b p-4 border-default\">\n                  <div className=\"mb-1 text-xs font-medium text-secondary\">Assigned Barangay</div>\n                  <div className=\"text-sm text-primary\">{userProfile?.barangay_code}</div>\n                  <div className=\"text-xs text-muted\">Barangay Assignment</div>\n                </div>\n              )}\n\n              <div className=\"p-2\">\n                <button\n                  onClick={handleSignOut}\n                  className=\"w-full rounded-md p-2 text-left text-sm text-secondary hover:bg-surface-hover\"\n                >\n                  Sign Out\n                </button>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={`rounded-lg border p-6 shadow-sm bg-surface border-default ${className}`}>\n      <div className=\"flex items-start gap-4\">\n        <div className=\"flex size-16 items-center justify-center rounded-full bg-blue-600 text-xl font-medium text-white\">\n          {initials}\n        </div>\n\n        <div className=\"flex-1\">\n          <h3 className=\"text-lg font-semibold text-primary\">{displayName}</h3>\n          <p className=\"text-secondary\">{userProfile.email}</p>\n\n          <div className=\"mt-3 space-y-2\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm font-medium text-secondary\">Role:</span>\n              <span className=\"inline-flex items-center rounded-full bg-blue-100 px-2.5 py-0.5 text-xs font-medium text-blue-800 dark:bg-blue-900/30 dark:text-blue-400\">\n                {role?.name}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {showBarangay && (\n        <div className=\"mt-6 border-t pt-6 border-default\">\n          <h4 className=\"mb-3 text-sm font-medium text-secondary\">Barangay Assignment</h4>\n\n          {barangayAccounts.length > 0 ? (\n            <div className=\"space-y-2\">\n              {barangayAccounts.map(account => (\n                <div\n                  key={account.id}\n                  className=\"flex items-center justify-between rounded-md border border-green-200 bg-green-50 p-3 dark:border-green-800 dark:bg-green-900/20\"\n                >\n                  <div>\n                    <div className=\"text-sm font-medium text-green-800 dark:text-green-400\">\n                      {account.barangay_code}\n                    </div>\n                    <div className=\"text-xs text-green-600 dark:text-green-500\">\n                      Barangay Assignment\n                    </div>\n                  </div>\n                  {account.is_primary && (\n                    <span className=\"inline-flex items-center rounded-full bg-green-200 px-2 py-1 text-xs font-medium text-green-800 dark:bg-green-800/30 dark:text-green-400\">\n                      Primary\n                    </span>\n                  )}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"rounded-md border border-red-200 bg-red-50 p-3 dark:border-red-800 dark:bg-red-900/20\">\n              <div className=\"text-sm font-medium text-red-800 dark:text-red-400\">\n                No Barangay Assignment\n              </div>\n              <div className=\"text-xs text-red-600 dark:text-red-500\">\n                Contact your administrator to assign you to a barangay.\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      <div className=\"mt-6 border-t pt-6 border-default\">\n        <button\n          onClick={handleSignOut}\n          className=\"flex w-full items-center justify-center rounded-md border px-4 py-2 text-sm font-medium text-secondary bg-surface border-default hover:bg-surface-hover focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n        >\n          Sign Out\n        </button>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/UserProfile/UserProfile.tsx",
          "lineCount": 174,
          "cyclomaticComplexity": 13,
          "cognitiveComplexity": 16
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "UserProfile",
          "line": 11,
          "message": "Function 'UserProfile' has 174 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "UserProfile",
          "line": 11,
          "complexity": 13,
          "message": "Function 'UserProfile' has cyclomatic complexity of 13 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "UserProfile",
          "line": 11,
          "complexity": 16,
          "message": "Function 'UserProfile' has cognitive complexity of 16 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/rbi-specific/FamilyRelationshipSelector/FamilyRelationshipSelector.stories.tsx",
      "lineCount": 260,
      "functions": [
        {
          "name": "FamilyRelationshipSelectorTemplate",
          "startLine": 54,
          "endLine": 67,
          "code": "const FamilyRelationshipSelectorTemplate = (args: { value: string; [key: string]: unknown }) => {\n  const [value, setValue] = useState<string>(args.value);\n\n  return (\n    <FamilyRelationshipSelector\n      {...args}\n      value={value}\n      onChange={newValue => {\n        setValue(newValue);\n        args.onChange?.(newValue);\n      }}\n    />\n  );\n};\n",
          "filePath": "src/components/organisms/rbi-specific/FamilyRelationshipSelector/FamilyRelationshipSelector.stories.tsx",
          "lineCount": 14,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/organisms/rbi-specific/FamilyRelationshipSelector/FamilyRelationshipSelector.tsx",
      "lineCount": 379,
      "functions": [
        {
          "name": "onChange",
          "startLine": 150,
          "endLine": 151,
          "code": "  onChange: (position: FamilyPosition) => void;\n  personContext?: PersonContext;\n",
          "filePath": "src/components/organisms/rbi-specific/FamilyRelationshipSelector/FamilyRelationshipSelector.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "FamilyRelationshipSelector",
          "startLine": 159,
          "endLine": 378,
          "code": "export default function FamilyRelationshipSelector({\n  value,\n  onChange,\n  personContext = {},\n  householdContext = { existingPositions: [] },\n  disabled = false,\n  required = false,\n  error,\n  className = '',\n}: FamilyRelationshipSelectorProps) {\n  const [validationWarnings, setValidationWarnings] = useState<string[]>([]);\n  const [availableOptions, setAvailableOptions] = useState<FamilyPositionOption[]>([]);\n\n  // Filter and validate available options\n  useEffect(() => {\n    let filtered = [...FAMILY_POSITION_OPTIONS];\n    const warnings: string[] = [];\n\n    // Filter by age constraints\n    if (personContext.age !== undefined) {\n      filtered = filtered.filter(option => {\n        if (option.minAge && personContext.age! < option.minAge) {\n          return false;\n        }\n        if (option.maxAge && personContext.age! > option.maxAge) {\n          return false;\n        }\n        return true;\n      });\n    }\n\n    // Filter by gender constraints\n    if (personContext.gender) {\n      filtered = filtered.filter(option => {\n        return !option.gender || option.gender === personContext.gender;\n      });\n    }\n\n    // Filter out positions that already exist (except for some that can have multiple)\n    const uniquePositions = ['head', 'spouse'];\n    filtered = filtered.filter(option => {\n      if (\n        uniquePositions.includes(option.value) &&\n        householdContext.existingPositions.includes(option.value) &&\n        value !== option.value\n      ) {\n        return false;\n      }\n      return true;\n    });\n\n    // Add warnings for potentially problematic selections\n    if (value) {\n      const selectedOption = FAMILY_POSITION_OPTIONS.find(opt => opt.value === value);\n      if (selectedOption) {\n        // Age warnings\n        if (\n          selectedOption.minAge &&\n          personContext.age &&\n          personContext.age < selectedOption.minAge\n        ) {\n          warnings.push(\n            `Age ${personContext.age} is younger than typical for ${selectedOption.label} (min ${selectedOption.minAge})`\n          );\n        }\n        if (\n          selectedOption.maxAge &&\n          personContext.age &&\n          personContext.age > selectedOption.maxAge\n        ) {\n          warnings.push(\n            `Age ${personContext.age} is older than typical for ${selectedOption.label} (max ${selectedOption.maxAge})`\n          );\n        }\n\n        // Gender warnings\n        if (\n          selectedOption.gender &&\n          personContext.gender &&\n          selectedOption.gender !== personContext.gender\n        ) {\n          warnings.push(\n            `Gender mismatch: ${selectedOption.label} typically refers to ${selectedOption.gender}`\n          );\n        }\n\n        // Logical warnings\n        if (\n          value === 'spouse' &&\n          householdContext.existingPositions.includes('head') &&\n          personContext.age &&\n          householdContext.householdHeadAge\n        ) {\n          const ageDiff = Math.abs(personContext.age - householdContext.householdHeadAge);\n          if (ageDiff > 20) {\n            warnings.push(\n              `Large age difference (${ageDiff} years) between spouse and household head`\n            );\n          }\n        }\n      }\n    }\n\n    setAvailableOptions(filtered);\n    setValidationWarnings(warnings);\n  }, [personContext, householdContext, value]);\n\n  // Group options by category\n  const groupedOptions = availableOptions.reduce(\n    (groups, option) => {\n      const category = option.category;\n      if (!groups[category]) {\n        groups[category] = [];\n      }\n      groups[category].push(option);\n      return groups;\n    },\n    {} as Record<string, FamilyPositionOption[]>\n  );\n\n  const categoryLabels = {\n    immediate: 'Immediate Family',\n    extended: 'Extended Family',\n    in_law: 'In-laws',\n    other: 'Other',\n  };\n\n  // Create select options with categories\n  const selectOptions = Object.entries(groupedOptions).flatMap(([category, options]) => [\n    // Category header (disabled option)\n    {\n      value: `header_${category}`,\n      label: `— ${categoryLabels[category as keyof typeof categoryLabels]} —`,\n      disabled: true,\n    },\n    // Category options\n    ...options.map(option => ({\n      value: option.value,\n      label: option.label + (option.description ? ` - ${option.description}` : ''),\n    })),\n  ]);\n\n  const handlePositionChange = (position: string) => {\n    if (!position.startsWith('header_')) {\n      onChange(position as FamilyPosition);\n    }\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <div className=\"border-b border-gray-200 pb-3\">\n        <h3 className=\"mb-1 text-lg font-medium text-primary\">\n          <span className=\"text-base\">👨‍👩‍👧‍👦</span> Family Position\n          {required && <span className=\"ml-1 text-red-500\">*</span>}\n        </h3>\n        <p className=\"text-sm text-secondary\">\n          Select this person&apos;s relationship to the household head and position in the family.\n        </p>\n      </div>\n\n      <FormGroup>\n        <DropdownSelect\n          options={selectOptions}\n          value={value || ''}\n          onChange={val => handlePositionChange(val)}\n          placeholder=\"Select family position...\"\n          disabled={disabled}\n          errorMessage={error}\n        />\n      </FormGroup>\n\n      {/* Validation Warnings */}\n      {validationWarnings.length > 0 && (\n        <div className=\"rounded-lg border border-yellow-200 bg-yellow-50 p-3\">\n          <div className=\"flex items-start space-x-2\">\n            <span className=\"mt-0.5 text-yellow-600\">⚠️</span>\n            <div className=\"flex-1\">\n              <h4 className=\"mb-1 text-sm font-medium text-yellow-800\">Validation Warnings</h4>\n              <ul className=\"space-y-1 text-xs text-yellow-700\">\n                {validationWarnings.map((warning, index) => (\n                  <li key={index}>• {warning}</li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Selection Summary */}\n      {value && (\n        <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-3\">\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-blue-600\">✓</span>\n            <div className=\"flex-1\">\n              <span className=\"text-sm font-medium text-blue-800\">\n                Position: {FAMILY_POSITION_OPTIONS.find(opt => opt.value === value)?.label}\n              </span>\n              {FAMILY_POSITION_OPTIONS.find(opt => opt.value === value)?.description && (\n                <p className=\"mt-1 text-xs text-blue-600\">\n                  {FAMILY_POSITION_OPTIONS.find(opt => opt.value === value)?.description}\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Context Information */}\n      {(personContext.age || personContext.gender) && (\n        <div className=\"rounded-lg p-3 text-xs text-muted bg-background-muted\">\n          <span className=\"font-medium\">📋 Person Context:</span>\n          {personContext.age && ` Age: ${personContext.age}`}\n          {personContext.gender && ` • Gender: ${personContext.gender}`}\n          {householdContext.existingPositions.length > 0 &&\n            ` • Existing positions: ${householdContext.existingPositions.join(', ')}`}\n        </div>\n      )}\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/rbi-specific/FamilyRelationshipSelector/FamilyRelationshipSelector.tsx",
          "lineCount": 220,
          "cyclomaticComplexity": 40,
          "cognitiveComplexity": 56
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 379 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "FamilyRelationshipSelector",
          "line": 159,
          "message": "Function 'FamilyRelationshipSelector' has 220 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "FamilyRelationshipSelector",
          "line": 159,
          "complexity": 40,
          "message": "Function 'FamilyRelationshipSelector' has cyclomatic complexity of 40 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "FamilyRelationshipSelector",
          "line": 159,
          "complexity": 56,
          "message": "Function 'FamilyRelationshipSelector' has cognitive complexity of 56 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/rbi-specific/HouseholdTypeSelector/HouseholdTypeSelector.stories.tsx",
      "lineCount": 174,
      "functions": [
        {
          "name": "HouseholdTypeSelectorTemplate",
          "startLine": 43,
          "endLine": 56,
          "code": "const HouseholdTypeSelectorTemplate = (args: { value: string; [key: string]: unknown }) => {\n  const [value, setValue] = useState<string>(args.value);\n\n  return (\n    <HouseholdTypeSelector\n      {...args}\n      value={value}\n      onChange={newValue => {\n        setValue(newValue);\n        args.onChange?.(newValue);\n      }}\n    />\n  );\n};\n",
          "filePath": "src/components/organisms/rbi-specific/HouseholdTypeSelector/HouseholdTypeSelector.stories.tsx",
          "lineCount": 14,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/organisms/rbi-specific/HouseholdTypeSelector/HouseholdTypeSelector.tsx",
      "lineCount": 169,
      "functions": [
        {
          "name": "onChange",
          "startLine": 69,
          "endLine": 70,
          "code": "  onChange: (type: HouseholdType) => void;\n  disabled?: boolean;\n",
          "filePath": "src/components/organisms/rbi-specific/HouseholdTypeSelector/HouseholdTypeSelector.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "HouseholdTypeSelector",
          "startLine": 77,
          "endLine": 168,
          "code": "export default function HouseholdTypeSelector({\n  value,\n  onChange,\n  disabled = false,\n  required = false,\n  error,\n  className = '',\n  orientation = 'vertical',\n}: HouseholdTypeSelectorProps) {\n  const handleTypeChange = (selectedValue: string) => {\n    onChange(selectedValue as HouseholdType);\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <div className=\"border-b border-gray-200 pb-3\">\n        <h3 className=\"mb-1 text-lg font-medium text-primary\">\n          <span className=\"text-base\">🏠</span> Household Type\n          {required && <span className=\"ml-1 text-red-500\">*</span>}\n        </h3>\n        <p className=\"text-sm text-secondary\">\n          Select the household composition that best describes this family structure.\n        </p>\n      </div>\n\n      <RadioGroup\n        name=\"household_type\"\n        value={value || ''}\n        onChange={handleTypeChange}\n        orientation={orientation}\n        errorMessage={error}\n        className=\"space-y-3\"\n      >\n        {HOUSEHOLD_TYPE_OPTIONS.map(option => (\n          <div\n            key={option.value}\n            className={`relative rounded-lg border p-4 transition-all duration-200 ${\n              value === option.value\n                ? 'border-blue-500 bg-blue-50 ring-1 ring-blue-500'\n                : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'\n            } ${disabled ? 'cursor-not-allowed opacity-50' : 'cursor-pointer'} `}\n          >\n            <Radio\n              value={option.value}\n              disabled={disabled}\n              variant={value === option.value ? 'primary' : 'default'}\n              className=\"absolute right-4 top-4\"\n            />\n\n            <div className=\"pr-8\">\n              <div className=\"mb-2 flex items-center space-x-3\">\n                <span className=\"text-xl\" role=\"img\" aria-label={option.label}>\n                  {option.icon}\n                </span>\n                <h4\n                  className={`text-base font-medium ${value === option.value ? 'text-blue-900' : 'text-primary'} `}\n                >\n                  {option.label}\n                </h4>\n              </div>\n\n              <p\n                className={`text-sm leading-relaxed ${value === option.value ? 'text-blue-700' : 'text-secondary'} `}\n              >\n                {option.description}\n              </p>\n            </div>\n          </div>\n        ))}\n      </RadioGroup>\n\n      {/* Validation Summary */}\n      {value && (\n        <div className=\"rounded-lg border border-green-200 bg-green-50 p-3\">\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-green-600\">✓</span>\n            <span className=\"text-sm font-medium text-green-800\">\n              Selected: {HOUSEHOLD_TYPE_OPTIONS.find(opt => opt.value === value)?.label}\n            </span>\n          </div>\n        </div>\n      )}\n\n      {/* Additional Information */}\n      <div className=\"rounded-lg p-3 text-xs text-muted bg-background-muted\">\n        <span className=\"font-medium\">📋 Note:</span> This classification helps determine household\n        demographics and social services eligibility. You can change this selection later if the\n        family composition changes.\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/rbi-specific/HouseholdTypeSelector/HouseholdTypeSelector.tsx",
          "lineCount": 92,
          "cyclomaticComplexity": 9,
          "cognitiveComplexity": 8
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "HouseholdTypeSelector",
          "line": 77,
          "message": "Function 'HouseholdTypeSelector' has 92 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/rbi-specific/MigrantInformation/MigrantInformation.tsx",
      "lineCount": 337,
      "functions": [
        {
          "name": "onChange",
          "startLine": 36,
          "endLine": 37,
          "code": "  onChange: (migration: MigrationInformation) => void;\n  disabled?: boolean;\n",
          "filePath": "src/components/organisms/rbi-specific/MigrantInformation/MigrantInformation.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "MigrantInformation",
          "startLine": 74,
          "endLine": 336,
          "code": "export default function MigrantInformation({\n  value,\n  onChange,\n  disabled = false,\n  className = '',\n}: MigrantInformationProps) {\n  const [showDetails, setShowDetails] = useState(value.migration_reason === 'other');\n\n  const handleChange = (\n    field: keyof MigrationInformation,\n    newValue: MigrationInformation[keyof MigrationInformation]\n  ) => {\n    const updated = { ...value, [field]: newValue };\n\n    // Auto-reset dependent fields when migration type changes\n    if (field === 'migration_type') {\n      if (newValue === 'domestic') {\n        updated.previous_country = undefined;\n        updated.registration_status = 'not_applicable';\n      } else if (newValue === 'international') {\n        updated.origin_region_code = undefined;\n        updated.origin_province_code = undefined;\n        updated.origin_city_code = undefined;\n      }\n    }\n\n    // Show/hide details field based on reason\n    if (field === 'migration_reason') {\n      setShowDetails(newValue === 'other');\n      if (newValue !== 'other') {\n        updated.migration_reason_details = undefined;\n      }\n    }\n\n    // Reset all fields when is_migrant becomes false\n    if (field === 'is_migrant' && !newValue) {\n      Object.keys(updated).forEach(key => {\n        if (key !== 'is_migrant') {\n          (updated as Record<string, unknown>)[key] = key.includes('registration_status')\n            ? 'not_applicable'\n            : key.includes('type')\n              ? null\n              : undefined;\n        }\n      });\n    }\n\n    onChange(updated);\n  };\n\n  if (!value.is_migrant) {\n    return (\n      <div className={`space-y-6 ${className}`}>\n        <div className=\"border-b pb-4 border-default\">\n          <h3 className=\"mb-2 text-lg font-medium text-primary\">\n            <span className=\"text-base\">🧳</span> Migration Information\n          </h3>\n          <p className=\"text-sm text-secondary\">\n            This resident is not classified as a migrant. Enable migration status to collect\n            details.\n          </p>\n        </div>\n\n        <div className=\"rounded-lg p-4 bg-background-muted\">\n          <p className=\"text-sm italic text-secondary\">\n            Migration information is automatically collected when a resident is marked as a migrant\n            in sectoral classifications.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"border-b pb-4 border-default\">\n        <h3 className=\"mb-2 text-lg font-medium text-primary\">\n          <span className=\"text-base\">🧳</span> Migration Information\n        </h3>\n        <p className=\"text-sm text-secondary\">\n          Details about migration history and current status for this resident.\n        </p>\n      </div>\n\n      {/* Migration Type */}\n      <FormGroup title=\"Migration Type\">\n        <RadioGroup\n          name=\"migration_type\"\n          value={value.migration_type || ''}\n          onChange={newValue => handleChange('migration_type', newValue || null)}\n        >\n          <Radio\n            value=\"domestic\"\n            label=\"Domestic Migration\"\n            description=\"Moved from another location within the Philippines\"\n          />\n          <Radio\n            value=\"international\"\n            label=\"International Migration\"\n            description=\"Moved from another country\"\n          />\n        </RadioGroup>\n      </FormGroup>\n\n      {/* Previous Address */}\n      <FormGroup title=\"Previous Address\">\n        <Textarea\n          value={value.previous_address || ''}\n          onChange={e => handleChange('previous_address', e.target.value)}\n          placeholder={\n            value.migration_type === 'international'\n              ? 'Enter complete address including city and country'\n              : 'Enter complete address including barangay, city/municipality, and province'\n          }\n          disabled={disabled}\n          rows={3}\n        />\n      </FormGroup>\n\n      {/* Previous Country (International only) */}\n      {value.migration_type === 'international' && (\n        <FormGroup title=\"Previous Country\">\n          <InputField\n            type=\"text\"\n            value={value.previous_country || ''}\n            onChange={e => handleChange('previous_country', e.target.value)}\n            placeholder=\"Enter country name\"\n            disabled={disabled}\n          />\n        </FormGroup>\n      )}\n\n      {/* Migration Details */}\n      <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n        {/* Year of Migration */}\n        <FormGroup title=\"Year of Migration\">\n          <InputField\n            type=\"number\"\n            value={value.year_of_migration || ''}\n            onChange={e =>\n              handleChange(\n                'year_of_migration',\n                e.target.value ? parseInt(e.target.value) : undefined\n              )\n            }\n            placeholder=\"YYYY\"\n            min={1900}\n            max={new Date().getFullYear()}\n            disabled={disabled}\n          />\n        </FormGroup>\n\n        {/* Length of Stay */}\n        <FormGroup title=\"Length of Stay (Months)\">\n          <InputField\n            type=\"number\"\n            value={value.length_of_stay_months || ''}\n            onChange={e =>\n              handleChange(\n                'length_of_stay_months',\n                e.target.value ? parseInt(e.target.value) : undefined\n              )\n            }\n            placeholder=\"Number of months\"\n            min={0}\n            disabled={disabled}\n          />\n        </FormGroup>\n      </div>\n\n      {/* Migration Reason */}\n      <FormGroup title=\"Reason for Migration\">\n        <RadioGroup\n          name=\"migration_reason\"\n          value={value.migration_reason || ''}\n          onChange={newValue => handleChange('migration_reason', newValue || null)}\n        >\n          {MIGRATION_REASONS.map(reason => (\n            <Radio\n              key={reason.value}\n              value={reason.value}\n              label={reason.label}\n              description={reason.description}\n            />\n          ))}\n        </RadioGroup>\n      </FormGroup>\n\n      {/* Migration Reason Details (if Other selected) */}\n      {showDetails && (\n        <FormGroup title=\"Migration Reason Details\">\n          <Textarea\n            value={value.migration_reason_details || ''}\n            onChange={e => handleChange('migration_reason_details', e.target.value)}\n            placeholder=\"Please provide specific details about the reason for migration\"\n            disabled={disabled}\n            rows={3}\n          />\n        </FormGroup>\n      )}\n\n      {/* Registration Status (International only) */}\n      {value.migration_type === 'international' && (\n        <FormGroup title=\"Registration/Documentation Status\">\n          <RadioGroup\n            name=\"registration_status\"\n            value={value.registration_status}\n            onChange={newValue => handleChange('registration_status', newValue)}\n          >\n            {REGISTRATION_STATUS_OPTIONS.map(status => (\n              <Radio\n                key={status.value}\n                value={status.value}\n                label={status.label}\n                description={status.description}\n              />\n            ))}\n          </RadioGroup>\n        </FormGroup>\n      )}\n\n      {/* Summary Card */}\n      <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4\">\n        <h4 className=\"mb-2 font-medium text-blue-900\">Migration Summary</h4>\n        <div className=\"space-y-1 text-sm text-blue-800\">\n          <p>\n            <strong>Type:</strong>{' '}\n            {value.migration_type\n              ? value.migration_type.replace('_', ' ').toUpperCase()\n              : 'Not specified'}\n          </p>\n          {value.year_of_migration && (\n            <p>\n              <strong>Migrated:</strong> {value.year_of_migration} (\n              {value.length_of_stay_months\n                ? `${value.length_of_stay_months} months ago`\n                : 'duration not specified'}\n              )\n            </p>\n          )}\n          {value.migration_reason && (\n            <p>\n              <strong>Reason:</strong>{' '}\n              {MIGRATION_REASONS.find(r => r.value === value.migration_reason)?.label}\n            </p>\n          )}\n          {value.previous_country && (\n            <p>\n              <strong>From:</strong> {value.previous_country}\n            </p>\n          )}\n          {value.migration_type === 'international' && (\n            <p>\n              <strong>Status:</strong>{' '}\n              {REGISTRATION_STATUS_OPTIONS.find(s => s.value === value.registration_status)?.label}\n            </p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/rbi-specific/MigrantInformation/MigrantInformation.tsx",
          "lineCount": 263,
          "cyclomaticComplexity": 35,
          "cognitiveComplexity": 42
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 337 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "MigrantInformation",
          "line": 74,
          "message": "Function 'MigrantInformation' has 263 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "MigrantInformation",
          "line": 74,
          "complexity": 35,
          "message": "Function 'MigrantInformation' has cyclomatic complexity of 35 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "MigrantInformation",
          "line": 74,
          "complexity": 42,
          "message": "Function 'MigrantInformation' has cognitive complexity of 42 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/rbi-specific/MotherMaidenName/MotherMaidenName.stories.tsx",
      "lineCount": 342,
      "functions": [
        {
          "name": "MotherMaidenNameTemplate",
          "startLine": 48,
          "endLine": 61,
          "code": "const MotherMaidenNameTemplate = (args: { value: MotherInformation; [key: string]: unknown }) => {\n  const [value, setValue] = useState<MotherInformation>(args.value);\n\n  return (\n    <MotherMaidenName\n      {...args}\n      value={value}\n      onChange={newValue => {\n        setValue(newValue);\n        args.onChange?.(newValue);\n      }}\n    />\n  );\n};\n",
          "filePath": "src/components/organisms/rbi-specific/MotherMaidenName/MotherMaidenName.stories.tsx",
          "lineCount": 14,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 342 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/rbi-specific/MotherMaidenName/MotherMaidenName.tsx",
      "lineCount": 324,
      "functions": [
        {
          "name": "onChange",
          "startLine": 28,
          "endLine": 29,
          "code": "  onChange: (motherInfo: MotherInformation) => void;\n  disabled?: boolean;\n",
          "filePath": "src/components/organisms/rbi-specific/MotherMaidenName/MotherMaidenName.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "MotherMaidenName",
          "startLine": 43,
          "endLine": 323,
          "code": "export default function MotherMaidenName({\n  value,\n  onChange,\n  disabled = false,\n  className = '',\n}: MotherMaidenNameProps) {\n  const [showAdvanced, setShowAdvanced] = useState(false);\n\n  const handleChange = (field: keyof MotherInformation, newValue: unknown) => {\n    const updated = { ...value, [field]: newValue };\n\n    // Clear all fields when marking as unknown mother\n    if (field === 'is_unknown_mother' && newValue) {\n      Object.keys(updated).forEach(key => {\n        if (key !== 'is_unknown_mother' && key !== 'is_confidential' && key !== 'notes') {\n          (updated as Record<string, unknown>)[key] = undefined;\n        }\n      });\n    }\n\n    // Clear confidential flag when marking as unknown\n    if (field === 'is_unknown_mother' && newValue) {\n      updated.is_confidential = false;\n    }\n\n    onChange(updated);\n  };\n\n  // Check if essential information is provided\n  const hasEssentialInfo = value.mother_first_name && value.mother_maiden_last_name;\n\n  // Format full name for display\n  const getFullMotherName = () => {\n    if (value.is_unknown_mother) return 'Unknown';\n\n    const parts = [];\n    if (value.mother_first_name) parts.push(value.mother_first_name);\n    if (value.mother_middle_name) parts.push(value.mother_middle_name);\n    if (value.mother_maiden_last_name) parts.push(value.mother_maiden_last_name);\n    if (value.mother_suffix) parts.push(value.mother_suffix);\n\n    return parts.length > 0 ? parts.join(' ') : 'Not specified';\n  };\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"border-b border-gray-200 pb-4\">\n        <h3 className=\"mb-2 text-lg font-medium text-gray-900\">\n          <span className=\"text-base\">👩‍👧‍👦</span> Mother&apos;s Information\n        </h3>\n        <p className=\"text-sm text-gray-600\">\n          Mother&apos;s maiden name and related information for genealogical records and identity\n          verification.\n        </p>\n      </div>\n\n      {/* Special Status Checkboxes */}\n      <div className=\"space-y-3\">\n        <Checkbox\n          checked={value.is_unknown_mother}\n          onChange={e => handleChange('is_unknown_mother', e.target.checked)}\n          label=\"Unknown Mother\"\n          description=\"Check if mother's information is unknown or unavailable\"\n          disabled={disabled}\n        />\n\n        {!value.is_unknown_mother && (\n          <Checkbox\n            checked={value.is_confidential}\n            onChange={e => handleChange('is_confidential', e.target.checked)}\n            label=\"Confidential Information\"\n            description=\"Mark as confidential for privacy or security reasons\"\n            disabled={disabled}\n          />\n        )}\n      </div>\n\n      {/* Mother's Name Information */}\n      {!value.is_unknown_mother && (\n        <>\n          <FormGroup title=\"Mother's Full Name\">\n            <div className=\"grid grid-cols-1 gap-4 md:grid-cols-4\">\n              <div className=\"md:col-span-2\">\n                <InputField\n                  label=\"First Name *\"\n                  type=\"text\"\n                  value={value.mother_first_name || ''}\n                  onChange={e => handleChange('mother_first_name', e.target.value)}\n                  placeholder=\"Enter first name\"\n                  disabled={disabled}\n                  required\n                />\n              </div>\n\n              <div>\n                <InputField\n                  label=\"Middle Name\"\n                  type=\"text\"\n                  value={value.mother_middle_name || ''}\n                  onChange={e => handleChange('mother_middle_name', e.target.value)}\n                  placeholder=\"Enter middle name\"\n                  disabled={disabled}\n                />\n              </div>\n\n              <DropdownSelect\n                label=\"Suffix\"\n                options={SUFFIX_OPTIONS}\n                value={value.mother_suffix || ''}\n                onChange={newValue => handleChange('mother_suffix', newValue || undefined)}\n                disabled={disabled}\n              />\n            </div>\n          </FormGroup>\n\n          <FormGroup title=\"Mother's Maiden Last Name\">\n            <InputField\n              type=\"text\"\n              value={value.mother_maiden_last_name || ''}\n              onChange={e => handleChange('mother_maiden_last_name', e.target.value)}\n              placeholder=\"Enter maiden last name (family name before marriage)\"\n              disabled={disabled}\n              required\n              helperText=\"This should be the family name your mother had before marriage\"\n            />\n          </FormGroup>\n\n          {/* Advanced Information Toggle */}\n          <div className=\"border-t pt-4\">\n            <Button\n              type=\"button\"\n              onClick={() => setShowAdvanced(!showAdvanced)}\n              disabled={disabled}\n              variant=\"ghost\"\n              size=\"sm\"\n              leftIcon={\n                <span className={`transition-transform ${showAdvanced ? 'rotate-90' : ''}`}>\n                  ▶\n                </span>\n              }\n            >\n              {showAdvanced ? 'Hide' : 'Show'} Additional Information\n            </Button>\n          </div>\n\n          {/* Advanced Information */}\n          {showAdvanced && (\n            <div className=\"space-y-6 rounded-lg bg-gray-50 p-4\">\n              <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n                <FormGroup title=\"Mother's Status\">\n                  <Checkbox\n                    checked={value.mother_is_deceased || false}\n                    onChange={e => handleChange('mother_is_deceased', e.target.checked)}\n                    label=\"Mother is deceased\"\n                    description=\"Check if mother has passed away\"\n                    disabled={disabled}\n                  />\n                </FormGroup>\n\n                <FormGroup title=\"Birth Year\">\n                  <InputField\n                    type=\"number\"\n                    value={value.mother_birth_year || ''}\n                    onChange={e =>\n                      handleChange(\n                        'mother_birth_year',\n                        e.target.value ? parseInt(e.target.value) : undefined\n                      )\n                    }\n                    placeholder=\"YYYY\"\n                    min={1900}\n                    max={new Date().getFullYear()}\n                    disabled={disabled}\n                  />\n                </FormGroup>\n              </div>\n\n              <FormGroup title=\"Mother's Birthplace\">\n                <InputField\n                  type=\"text\"\n                  value={value.mother_birthplace || ''}\n                  onChange={e => handleChange('mother_birthplace', e.target.value)}\n                  placeholder=\"Enter city/municipality and province where mother was born\"\n                  disabled={disabled}\n                />\n              </FormGroup>\n            </div>\n          )}\n        </>\n      )}\n\n      {/* Notes Section */}\n      <FormGroup title=\"Additional Notes\">\n        <textarea\n          value={value.notes || ''}\n          onChange={e => handleChange('notes', e.target.value)}\n          placeholder=\"Any additional information or special circumstances regarding mother's information\"\n          disabled={disabled}\n          rows={3}\n          className=\"w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 disabled:bg-gray-50 disabled:text-gray-500\"\n        />\n      </FormGroup>\n\n      {/* Information Summary */}\n      <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4\">\n        <h4 className=\"mb-2 font-medium text-blue-900\">Mother&apos;s Information Summary</h4>\n        <div className=\"space-y-1 text-sm text-blue-800\">\n          {value.is_confidential && (\n            <p className=\"rounded bg-yellow-100 px-2 py-1 text-yellow-800\">\n              🔒 This information is marked as confidential\n            </p>\n          )}\n          <p>\n            <strong>Mother&apos;s Name:</strong> {getFullMotherName()}\n          </p>\n          {!value.is_unknown_mother && (\n            <>\n              {value.mother_maiden_last_name && (\n                <p>\n                  <strong>Maiden Name:</strong> {value.mother_maiden_last_name}\n                </p>\n              )}\n              {value.mother_birth_year && (\n                <p>\n                  <strong>Birth Year:</strong> {value.mother_birth_year}\n                </p>\n              )}\n              {value.mother_birthplace && (\n                <p>\n                  <strong>Birthplace:</strong> {value.mother_birthplace}\n                </p>\n              )}\n              {value.mother_is_deceased && <p className=\"text-gray-600\">📿 Mother is deceased</p>}\n            </>\n          )}\n          {!hasEssentialInfo && !value.is_unknown_mother && (\n            <p className=\"text-orange-600\">\n              ⚠️ Essential information (first name and maiden name) is required\n            </p>\n          )}\n        </div>\n      </div>\n\n      {/* Privacy Notice */}\n      <div className=\"rounded-lg border border-yellow-200 bg-yellow-50 p-4\">\n        <div className=\"flex items-start\">\n          <div className=\"shrink-0\">\n            <span className=\"text-yellow-400\">🛡️</span>\n          </div>\n          <div className=\"ml-3\">\n            <h4 className=\"text-sm font-medium text-yellow-800\">Privacy Protection</h4>\n            <p className=\"mt-1 text-sm text-yellow-700\">\n              Mother&apos;s maiden name is sensitive information used for identity verification.\n              This data is protected under the Data Privacy Act of 2012 and will only be used for\n              official government purposes and genealogical records.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Cultural Note */}\n      <div className=\"rounded-lg border border-green-200 bg-green-50 p-4\">\n        <div className=\"flex items-start\">\n          <div className=\"shrink-0\">\n            <span className=\"text-green-400\">ℹ️</span>\n          </div>\n          <div className=\"ml-3\">\n            <h4 className=\"text-sm font-medium text-green-800\">Filipino Naming Convention</h4>\n            <p className=\"mt-1 text-sm text-green-700\">\n              In Filipino culture, a woman&apos;s maiden name is the family name she had before\n              marriage. This information helps establish family lineage and is important for various\n              legal and genealogical purposes. If adoption or other special circumstances apply,\n              please note them in the additional notes section.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/rbi-specific/MotherMaidenName/MotherMaidenName.tsx",
          "lineCount": 281,
          "cyclomaticComplexity": 38,
          "cognitiveComplexity": 41
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 324 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "MotherMaidenName",
          "line": 43,
          "message": "Function 'MotherMaidenName' has 281 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "MotherMaidenName",
          "line": 43,
          "complexity": 38,
          "message": "Function 'MotherMaidenName' has cyclomatic complexity of 38 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "MotherMaidenName",
          "line": 43,
          "complexity": 41,
          "message": "Function 'MotherMaidenName' has cognitive complexity of 41 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/rbi-specific/PhysicalCharacteristics/PhysicalCharacteristics.tsx",
      "lineCount": 340,
      "functions": [
        {
          "name": "onChange",
          "startLine": 54,
          "endLine": 55,
          "code": "  onChange: (characteristics: PhysicalCharacteristics) => void;\n  disabled?: boolean;\n",
          "filePath": "src/components/organisms/rbi-specific/PhysicalCharacteristics/PhysicalCharacteristics.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "PhysicalCharacteristics",
          "startLine": 110,
          "endLine": 339,
          "code": "export default function PhysicalCharacteristics({\n  value,\n  onChange,\n  disabled = false,\n  className = '',\n}: PhysicalCharacteristicsProps) {\n  const handleChange = (field: keyof PhysicalCharacteristics, newValue: unknown) => {\n    onChange({ ...value, [field]: newValue || undefined });\n  };\n\n  // Calculate BMI if both height and weight are available\n  const calculateBMI = () => {\n    if (value.height_cm && value.weight_kg) {\n      const heightInMeters = value.height_cm / 100;\n      const bmi = value.weight_kg / (heightInMeters * heightInMeters);\n      return bmi.toFixed(1);\n    }\n    return null;\n  };\n\n  const getBMICategory = (bmi: number) => {\n    if (bmi < 18.5) return { category: 'Underweight', color: 'text-yellow-600' };\n    if (bmi < 25) return { category: 'Normal weight', color: 'text-green-600' };\n    if (bmi < 30) return { category: 'Overweight', color: 'text-orange-600' };\n    return { category: 'Obese', color: 'text-red-600' };\n  };\n\n  const bmiValue = calculateBMI();\n  const bmiCategory = bmiValue ? getBMICategory(parseFloat(bmiValue)) : null;\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"border-b pb-4 border-default\">\n        <h3 className=\"mb-2 text-lg font-medium text-primary\">\n          <span className=\"text-base\">👤</span> Physical Characteristics\n        </h3>\n        <p className=\"text-sm text-secondary\">\n          Physical description for identification and health tracking purposes. All fields are\n          optional.\n        </p>\n      </div>\n\n      {/* Body Measurements */}\n      <FormGroup title=\"Body Measurements\">\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n          <InputField\n            label=\"Height (cm)\"\n            type=\"number\"\n            value={value.height_cm || ''}\n            onChange={e =>\n              handleChange('height_cm', e.target.value ? parseInt(e.target.value) : undefined)\n            }\n            placeholder=\"e.g., 165\"\n            min={50}\n            max={250}\n            disabled={disabled}\n          />\n\n          <InputField\n            label=\"Weight (kg)\"\n            type=\"number\"\n            value={value.weight_kg || ''}\n            onChange={e =>\n              handleChange('weight_kg', e.target.value ? parseFloat(e.target.value) : undefined)\n            }\n            placeholder=\"e.g., 65.5\"\n            min={1}\n            max={300}\n            step={0.1}\n            disabled={disabled}\n          />\n        </div>\n\n        {/* BMI Display */}\n        {bmiValue && bmiCategory && (\n          <div className=\"mt-3 rounded-lg p-3 bg-background-muted\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-secondary\">Body Mass Index (BMI):</span>\n              <span className=\"font-medium\">\n                {bmiValue} kg/m²\n                <span className={`ml-2 ${bmiCategory.color}`}>({bmiCategory.category})</span>\n              </span>\n            </div>\n          </div>\n        )}\n      </FormGroup>\n\n      {/* Blood Type */}\n      <FormGroup title=\"Blood Type\">\n        <DropdownSelect\n          options={BLOOD_TYPE_OPTIONS}\n          value={value.blood_type || ''}\n          onChange={newValue => handleChange('blood_type', newValue || null)}\n          disabled={disabled}\n        />\n      </FormGroup>\n\n      {/* Physical Features */}\n      <FormGroup title=\"Physical Features\">\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n          <DropdownSelect\n            label=\"Eye Color\"\n            options={EYE_COLOR_OPTIONS}\n            value={value.eye_color || ''}\n            onChange={newValue => handleChange('eye_color', newValue || null)}\n            disabled={disabled}\n          />\n\n          <DropdownSelect\n            label=\"Hair Color\"\n            options={HAIR_COLOR_OPTIONS}\n            value={value.hair_color || ''}\n            onChange={newValue => handleChange('hair_color', newValue || null)}\n            disabled={disabled}\n          />\n\n          <DropdownSelect\n            label=\"Complexion\"\n            options={COMPLEXION_OPTIONS}\n            value={value.complexion || ''}\n            onChange={newValue => handleChange('complexion', newValue || null)}\n            disabled={disabled}\n          />\n        </div>\n      </FormGroup>\n\n      {/* Distinguishing Marks */}\n      <FormGroup title=\"Distinguishing Marks\">\n        <Textarea\n          value={value.distinguishing_marks || ''}\n          onChange={e => handleChange('distinguishing_marks', e.target.value)}\n          placeholder=\"e.g., Scar on left arm, birthmark on face, tattoo on shoulder\"\n          disabled={disabled}\n          rows={3}\n        />\n        <p className=\"mt-1 text-xs text-muted\">\n          Include scars, birthmarks, tattoos, or other identifying features\n        </p>\n      </FormGroup>\n\n      {/* Medical Information */}\n      <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n        <FormGroup title=\"Medical Conditions\">\n          <Textarea\n            value={value.medical_conditions || ''}\n            onChange={e => handleChange('medical_conditions', e.target.value)}\n            placeholder=\"e.g., Diabetes, Hypertension, Asthma\"\n            disabled={disabled}\n            rows={3}\n          />\n          <p className=\"mt-1 text-xs text-muted\">\n            List any chronic conditions or ongoing medical issues\n          </p>\n        </FormGroup>\n\n        <FormGroup title=\"Known Allergies\">\n          <Textarea\n            value={value.allergies || ''}\n            onChange={e => handleChange('allergies', e.target.value)}\n            placeholder=\"e.g., Peanuts, Shellfish, Penicillin\"\n            disabled={disabled}\n            rows={3}\n          />\n          <p className=\"mt-1 text-xs text-muted\">\n            List any known allergies to food, medicine, or other substances\n          </p>\n        </FormGroup>\n      </div>\n\n      {/* Privacy Notice */}\n      <div className=\"rounded-lg border border-yellow-200 bg-yellow-50 p-4\">\n        <div className=\"flex items-start\">\n          <div className=\"shrink-0\">\n            <span className=\"text-yellow-400\">⚠️</span>\n          </div>\n          <div className=\"ml-3\">\n            <h4 className=\"text-sm font-medium text-yellow-800\">Privacy Notice</h4>\n            <p className=\"mt-1 text-sm text-yellow-700\">\n              Physical characteristics and medical information are collected for identification and\n              emergency purposes only. This information is protected under the Data Privacy Act of\n              2012 and will not be shared without proper consent.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Summary Card */}\n      {(value.height_cm ||\n        value.weight_kg ||\n        value.blood_type ||\n        value.eye_color ||\n        value.hair_color ||\n        value.complexion) && (\n        <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4\">\n          <h4 className=\"mb-2 font-medium text-blue-900\">Physical Profile Summary</h4>\n          <div className=\"space-y-1 text-sm text-blue-800\">\n            {value.height_cm && value.weight_kg && (\n              <p>\n                <strong>Physical:</strong> {value.height_cm}cm, {value.weight_kg}kg{' '}\n                {bmiValue && `(BMI: ${bmiValue})`}\n              </p>\n            )}\n            {value.blood_type && (\n              <p>\n                <strong>Blood Type:</strong> {value.blood_type}\n              </p>\n            )}\n            {(value.eye_color || value.hair_color) && (\n              <p>\n                <strong>Features:</strong>\n                {value.eye_color &&\n                  ` ${EYE_COLOR_OPTIONS.find(o => o.value === value.eye_color)?.label} eyes`}\n                {value.eye_color && value.hair_color && ','}\n                {value.hair_color &&\n                  ` ${HAIR_COLOR_OPTIONS.find(o => o.value === value.hair_color)?.label} hair`}\n              </p>\n            )}\n            {value.complexion && (\n              <p>\n                <strong>Complexion:</strong>{' '}\n                {COMPLEXION_OPTIONS.find(o => o.value === value.complexion)?.label}\n              </p>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/rbi-specific/PhysicalCharacteristics/PhysicalCharacteristics.tsx",
          "lineCount": 230,
          "cyclomaticComplexity": 42,
          "cognitiveComplexity": 39
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 340 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "PhysicalCharacteristics",
          "line": 110,
          "message": "Function 'PhysicalCharacteristics' has 230 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "PhysicalCharacteristics",
          "line": 110,
          "complexity": 42,
          "message": "Function 'PhysicalCharacteristics' has cyclomatic complexity of 42 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "PhysicalCharacteristics",
          "line": 110,
          "complexity": 39,
          "message": "Function 'PhysicalCharacteristics' has cognitive complexity of 39 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/rbi-specific/ResidentStatusSelector/ResidentStatusSelector.stories.tsx",
      "lineCount": 359,
      "functions": [
        {
          "name": "ResidentStatusTemplate",
          "startLine": 55,
          "endLine": 70,
          "code": "const ResidentStatusTemplate = (args: { value: ResidentStatus; onChange?: (value: ResidentStatus) => void; [key: string]: unknown }) => {\n  const [value, setValue] = useState<ResidentStatus>(args.value);\n\n  return (\n    <ResidentStatusSelector\n      {...args}\n      value={value}\n      onChange={newValue => {\n        setValue(newValue);\n        if (typeof args.onChange === 'function') {\n          args.onChange(newValue);\n        }\n      }}\n    />\n  );\n};\n",
          "filePath": "src/components/organisms/rbi-specific/ResidentStatusSelector/ResidentStatusSelector.stories.tsx",
          "lineCount": 16,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 359 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/organisms/rbi-specific/ResidentStatusSelector/ResidentStatusSelector.tsx",
      "lineCount": 470,
      "functions": [
        {
          "name": "onChange",
          "startLine": 36,
          "endLine": 37,
          "code": "  onChange: (status: ResidentStatus) => void;\n  disabled?: boolean;\n",
          "filePath": "src/components/organisms/rbi-specific/ResidentStatusSelector/ResidentStatusSelector.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "ResidentStatusSelector",
          "startLine": 119,
          "endLine": 469,
          "code": "export default function ResidentStatusSelector({\n  value,\n  onChange,\n  disabled = false,\n  className = '',\n  residentAge,\n}: ResidentStatusSelectorProps) {\n  const handleChange = (\n    field: keyof ResidentStatus,\n    newValue: ResidentStatus[keyof ResidentStatus]\n  ) => {\n    const updated = { ...value, [field]: newValue };\n\n    // Auto-reset dependent fields based on status changes\n    if (field === 'status_type') {\n      // Visitors typically can't be registered voters\n      if (newValue === 'visitor') {\n        updated.is_registered_voter = false;\n        updated.voter_id_number = undefined;\n        updated.precinct_number = undefined;\n      }\n\n      // Reset documentation status based on new status type\n      if (newValue === 'permanent' || newValue === 'temporary') {\n        if (!updated.documentation_status) {\n          updated.documentation_status = 'complete';\n        }\n      }\n    }\n\n    // Clear voter details when not a registered voter\n    if (field === 'is_registered_voter' && !newValue) {\n      updated.voter_id_number = undefined;\n      updated.precinct_number = undefined;\n    }\n\n    // Clear indigenous details when not indigenous\n    if (field === 'is_indigenous_member' && !newValue) {\n      updated.tribal_affiliation = undefined;\n      updated.indigenous_community = undefined;\n    }\n\n    // Auto-set documentation status based on legal status\n    if (field === 'legal_status') {\n      if (newValue === 'citizen' || newValue === 'dual_citizen') {\n        updated.documentation_status = 'not_required';\n      } else if (newValue === 'visitor') {\n        updated.documentation_status = 'complete'; // Tourists need complete docs\n      }\n    }\n\n    onChange(updated);\n  };\n\n  // Calculate total residency in readable format\n  const getResidencyDisplay = () => {\n    const years = value.length_of_residency_years || 0;\n    const months = value.length_of_residency_months || 0;\n\n    if (years === 0 && months === 0) return 'Not specified';\n\n    const parts = [];\n    if (years > 0) parts.push(`${years} year${years !== 1 ? 's' : ''}`);\n    if (months > 0) parts.push(`${months} month${months !== 1 ? 's' : ''}`);\n\n    return parts.join(' and ');\n  };\n\n  // Check voting eligibility\n  const isVotingEligible = () => {\n    if (!residentAge) return null;\n    if (residentAge < 18) return false;\n    if (!value.legal_status) return null;\n    return ['citizen', 'dual_citizen'].includes(value.legal_status);\n  };\n\n  const votingEligibility = isVotingEligible();\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"border-b border-gray-200 pb-4\">\n        <h3 className=\"mb-2 text-lg font-medium text-primary\">\n          <span className=\"text-base\">🏠</span> Resident Status Classification\n        </h3>\n        <p className=\"text-sm text-secondary\">\n          Legal and administrative classification of the resident&apos;s status in the barangay.\n        </p>\n      </div>\n\n      {/* Resident Status Type */}\n      <FormGroup title=\"Resident Status Type\">\n        <RadioGroup\n          name=\"status_type\"\n          value={value.status_type || ''}\n          onChange={newValue => handleChange('status_type', newValue || null)}\n        >\n          {STATUS_TYPE_OPTIONS.map(option => (\n            <Radio\n              key={option.value}\n              value={option.value}\n              label={option.label}\n              description={option.description}\n            />\n          ))}\n        </RadioGroup>\n      </FormGroup>\n\n      {/* Length of Residency */}\n      {(value.status_type === 'permanent' || value.status_type === 'temporary') && (\n        <FormGroup title=\"Length of Residency in this Barangay\">\n          <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n            <InputField\n              label=\"Years\"\n              type=\"number\"\n              value={value.length_of_residency_years || ''}\n              onChange={e =>\n                handleChange(\n                  'length_of_residency_years',\n                  e.target.value ? parseInt(e.target.value) : undefined\n                )\n              }\n              placeholder=\"0\"\n              min={0}\n              max={100}\n              disabled={disabled}\n            />\n\n            <InputField\n              label=\"Additional Months\"\n              type=\"number\"\n              value={value.length_of_residency_months || ''}\n              onChange={e =>\n                handleChange(\n                  'length_of_residency_months',\n                  e.target.value ? parseInt(e.target.value) : undefined\n                )\n              }\n              placeholder=\"0\"\n              min={0}\n              max={11}\n              disabled={disabled}\n            />\n          </div>\n\n          <div className=\"mt-2 text-sm text-secondary\">\n            <strong>Total residency:</strong> {getResidencyDisplay()}\n          </div>\n        </FormGroup>\n      )}\n\n      {/* Legal Status */}\n      <FormGroup title=\"Legal Status\">\n        <RadioGroup\n          name=\"legal_status\"\n          value={value.legal_status || ''}\n          onChange={newValue => handleChange('legal_status', newValue || null)}\n        >\n          {LEGAL_STATUS_OPTIONS.map(option => (\n            <Radio\n              key={option.value}\n              value={option.value}\n              label={option.label}\n              description={option.description}\n            />\n          ))}\n        </RadioGroup>\n      </FormGroup>\n\n      {/* Voting Registration */}\n      <FormGroup title=\"Voter Registration\">\n        <div className=\"space-y-4\">\n          {/* Voting eligibility notice */}\n          {votingEligibility !== null && (\n            <div\n              className={`rounded-lg p-3 ${votingEligibility ? 'border border-green-200 bg-green-50' : 'border border-yellow-200 bg-yellow-50'}`}\n            >\n              <p className={`text-sm ${votingEligibility ? 'text-green-800' : 'text-yellow-800'}`}>\n                {votingEligibility\n                  ? '✅ Eligible to register as voter (18+ years old, Filipino citizen)'\n                  : '⚠️ Not eligible to register as voter (must be 18+ years old Filipino citizen)'}\n              </p>\n            </div>\n          )}\n\n          <div className=\"flex items-start space-x-3\">\n            <input\n              type=\"checkbox\"\n              id=\"is_registered_voter\"\n              checked={value.is_registered_voter}\n              onChange={e => handleChange('is_registered_voter', e.target.checked)}\n              disabled={disabled || votingEligibility === false}\n              className=\"mt-1 size-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n            />\n            <div className=\"flex-1\">\n              <label htmlFor=\"is_registered_voter\" className=\"text-sm font-medium text-primary\">\n                Registered Voter\n              </label>\n              <p className=\"text-xs text-muted\">\n                Check if resident is registered to vote in this barangay\n              </p>\n            </div>\n          </div>\n\n          {/* Voter Details */}\n          {value.is_registered_voter && (\n            <div className=\"ml-7 grid grid-cols-1 gap-4 md:grid-cols-2\">\n              <InputField\n                label=\"Voter ID Number\"\n                type=\"text\"\n                value={value.voter_id_number || ''}\n                onChange={e => handleChange('voter_id_number', e.target.value)}\n                placeholder=\"Enter voter ID number\"\n                disabled={disabled}\n              />\n\n              <InputField\n                label=\"Precinct Number\"\n                type=\"text\"\n                value={value.precinct_number || ''}\n                onChange={e => handleChange('precinct_number', e.target.value)}\n                placeholder=\"Enter precinct number\"\n                disabled={disabled}\n              />\n            </div>\n          )}\n        </div>\n      </FormGroup>\n\n      {/* Indigenous Peoples Identification */}\n      <FormGroup title=\"Indigenous Peoples Identification\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-start space-x-3\">\n            <input\n              type=\"checkbox\"\n              id=\"is_indigenous_member\"\n              checked={value.is_indigenous_member}\n              onChange={e => handleChange('is_indigenous_member', e.target.checked)}\n              disabled={disabled}\n              className=\"mt-1 size-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n            />\n            <div className=\"flex-1\">\n              <label htmlFor=\"is_indigenous_member\" className=\"text-sm font-medium text-primary\">\n                Member of Indigenous Cultural Community\n              </label>\n              <p className=\"text-xs text-muted\">\n                Check if resident belongs to an Indigenous Cultural Community (ICC) or Indigenous\n                Peoples (IP) group\n              </p>\n            </div>\n          </div>\n\n          {/* Indigenous Details */}\n          {value.is_indigenous_member && (\n            <div className=\"ml-7 grid grid-cols-1 gap-4 md:grid-cols-2\">\n              <InputField\n                label=\"Tribal Affiliation\"\n                type=\"text\"\n                value={value.tribal_affiliation || ''}\n                onChange={e => handleChange('tribal_affiliation', e.target.value)}\n                placeholder=\"e.g., Igorot, Lumad, Mangyan\"\n                disabled={disabled}\n              />\n\n              <InputField\n                label=\"Indigenous Community\"\n                type=\"text\"\n                value={value.indigenous_community || ''}\n                onChange={e => handleChange('indigenous_community', e.target.value)}\n                placeholder=\"e.g., Bontoc, T'boli, Hanunuo\"\n                disabled={disabled}\n              />\n            </div>\n          )}\n        </div>\n      </FormGroup>\n\n      {/* Documentation Status */}\n      <FormGroup title=\"Documentation Status\">\n        <RadioGroup\n          name=\"documentation_status\"\n          value={value.documentation_status || ''}\n          onChange={newValue => handleChange('documentation_status', newValue || null)}\n        >\n          {DOCUMENTATION_STATUS_OPTIONS.map(option => (\n            <Radio\n              key={option.value}\n              value={option.value}\n              label={option.label}\n              description={option.description}\n            />\n          ))}\n        </RadioGroup>\n      </FormGroup>\n\n      {/* Special Circumstances */}\n      <FormGroup title=\"Special Circumstances\">\n        <Textarea\n          value={value.special_circumstances || ''}\n          onChange={e => handleChange('special_circumstances', e.target.value)}\n          placeholder=\"Any special circumstances affecting resident status (e.g., refugee status, asylum seeker, etc.)\"\n          disabled={disabled}\n          rows={3}\n        />\n      </FormGroup>\n\n      {/* Status Summary */}\n      <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4\">\n        <h4 className=\"mb-2 font-medium text-blue-900\">Resident Status Summary</h4>\n        <div className=\"space-y-1 text-sm text-blue-800\">\n          <p>\n            <strong>Status:</strong>{' '}\n            {value.status_type\n              ? STATUS_TYPE_OPTIONS.find(s => s.value === value.status_type)?.label\n              : 'Not specified'}\n          </p>\n          <p>\n            <strong>Legal Status:</strong>{' '}\n            {value.legal_status\n              ? LEGAL_STATUS_OPTIONS.find(s => s.value === value.legal_status)?.label\n              : 'Not specified'}\n          </p>\n          {(value.length_of_residency_years || value.length_of_residency_months) && (\n            <p>\n              <strong>Residency:</strong> {getResidencyDisplay()}\n            </p>\n          )}\n          <p>\n            <strong>Voter Status:</strong>{' '}\n            {value.is_registered_voter\n              ? `Registered${value.precinct_number ? ` (Precinct ${value.precinct_number})` : ''}`\n              : 'Not registered'}\n          </p>\n          {value.is_indigenous_member && (\n            <p>\n              <strong>Indigenous:</strong>{' '}\n              {value.tribal_affiliation || 'Indigenous community member'}\n            </p>\n          )}\n          <p>\n            <strong>Documentation:</strong>{' '}\n            {value.documentation_status\n              ? DOCUMENTATION_STATUS_OPTIONS.find(d => d.value === value.documentation_status)\n                  ?.label\n              : 'Not specified'}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/organisms/rbi-specific/ResidentStatusSelector/ResidentStatusSelector.tsx",
          "lineCount": 351,
          "cyclomaticComplexity": 59,
          "cognitiveComplexity": 67
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 470 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "ResidentStatusSelector",
          "line": 119,
          "message": "Function 'ResidentStatusSelector' has 351 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "ResidentStatusSelector",
          "line": 119,
          "complexity": 59,
          "message": "Function 'ResidentStatusSelector' has cyclomatic complexity of 59 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "ResidentStatusSelector",
          "line": 119,
          "complexity": 67,
          "message": "Function 'ResidentStatusSelector' has cognitive complexity of 67 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/providers/ClientProviders/ClientProviders.tsx",
      "lineCount": 8,
      "functions": [
        {
          "name": "ClientProviders",
          "startLine": 5,
          "endLine": 7,
          "code": "export default function ClientProviders({ children }: { children: React.ReactNode }) {\n  return <AuthProvider>{children}</AuthProvider>;\n}\n",
          "filePath": "src/components/providers/ClientProviders/ClientProviders.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/providers/ErrorBoundary/ErrorBoundary.tsx",
      "lineCount": 81,
      "functions": [
        {
          "name": "resetError",
          "startLine": 12,
          "endLine": 13,
          "code": "  fallback?: React.ComponentType<{ error: Error; resetError: () => void }>;\n}\n",
          "filePath": "src/components/providers/ErrorBoundary/ErrorBoundary.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "DefaultErrorFallback",
          "startLine": 43,
          "endLine": 78,
          "code": "function DefaultErrorFallback({ error, resetError }: { error: Error; resetError: () => void }) {\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-background\">\n      <div className=\"space-y-4 p-8 text-center\">\n        <div className=\"space-y-2\">\n          <h1 className=\"text-foreground text-2xl font-bold\">Something went wrong</h1>\n          <p className=\"text-muted-foreground\">An unexpected error occurred in the application.</p>\n        </div>\n\n        <div className=\"space-y-2\">\n          <details className=\"bg-muted rounded-lg p-4 text-left\">\n            <summary className=\"cursor-pointer font-medium\">Error Details</summary>\n            <pre className=\"text-muted-foreground mt-2 whitespace-pre-wrap text-sm\">\n              {error.message}\n            </pre>\n          </details>\n        </div>\n\n        <div className=\"flex justify-center gap-2\">\n          <button\n            onClick={resetError}\n            className=\"bg-primary text-primary-foreground hover:bg-primary/90 rounded-md px-4 py-2 transition-colors\"\n          >\n            Try Again\n          </button>\n          <button\n            onClick={() => (window.location.href = '/')}\n            className=\"bg-secondary text-secondary-foreground hover:bg-secondary/90 rounded-md px-4 py-2 transition-colors\"\n          >\n            Go to Homepage\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/providers/ErrorBoundary/ErrorBoundary.tsx",
          "lineCount": 36,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "DefaultErrorFallback",
          "line": 43,
          "message": "Function 'DefaultErrorFallback' has 36 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/providers/Providers/Providers.tsx",
      "lineCount": 16,
      "functions": [
        {
          "name": "Providers",
          "startLine": 7,
          "endLine": 15,
          "code": "export default function Providers({ children }: { children: React.ReactNode }) {\n  return (\n    <ErrorBoundary>\n      <ThemeProvider>\n        <AuthProvider>{children}</AuthProvider>\n      </ThemeProvider>\n    </ErrorBoundary>\n  );\n}\n",
          "filePath": "src/components/providers/Providers/Providers.tsx",
          "lineCount": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/templates/AppShell/AppShell.stories.tsx",
      "lineCount": 413,
      "functions": [
        {
          "name": "MockDashboardContent",
          "startLine": 22,
          "endLine": 23,
          "code": "const MockDashboardContent = () => (\n  <div className=\"space-y-8\">\n",
          "filePath": "src/components/templates/AppShell/AppShell.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "MockResidentsContent",
          "startLine": 90,
          "endLine": 91,
          "code": "const MockResidentsContent = () => (\n  <div className=\"space-y-6\">\n",
          "filePath": "src/components/templates/AppShell/AppShell.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "MockReportsContent",
          "startLine": 165,
          "endLine": 166,
          "code": "const MockReportsContent = () => (\n  <div className=\"space-y-6\">\n",
          "filePath": "src/components/templates/AppShell/AppShell.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 297,
          "endLine": 298,
          "code": "  render: () => (\n    <AppShell>\n",
          "filePath": "src/components/templates/AppShell/AppShell.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 413 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/templates/AppShell/AppShell.tsx",
      "lineCount": 189,
      "functions": [
        {
          "name": "AppShell",
          "startLine": 16,
          "endLine": 188,
          "code": "export default function AppShell({ children }: AppShellProps) {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Mobile sidebar overlay */}\n      {sidebarOpen && (\n        <div className=\"relative z-50 lg:hidden\" role=\"dialog\" aria-modal=\"true\">\n          <div\n            className=\"fixed inset-0 bg-slate-900/80 backdrop-blur-sm\"\n            onClick={() => setSidebarOpen(false)}\n          />\n\n          <div className=\"fixed inset-0 flex\">\n            <div className=\"relative mr-16 flex w-full max-w-xs flex-1\">\n              <div className=\"absolute left-full top-0 flex w-16 justify-center pt-5\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  iconOnly\n                  onClick={() => setSidebarOpen(false)}\n                  className=\"-m-2.5 p-2.5 text-white hover:text-gray-200\"\n                >\n                  <span className=\"sr-only\">Close sidebar</span>\n                  <svg\n                    className=\"size-6\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    strokeWidth=\"1.5\"\n                    stroke=\"currentColor\"\n                  >\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\" />\n                  </svg>\n                </Button>\n              </div>\n\n              <div className=\"bg-surface/95 border-default/60 flex grow flex-col overflow-y-auto border-r backdrop-blur-xl\">\n                <div className=\"px-6 py-8\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"flex size-10 items-center justify-center rounded-2xl bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500 shadow-xl\">\n                      <span className=\"text-lg font-bold text-white\">R</span>\n                    </div>\n                    <div>\n                      <h1 className=\"text-xl font-bold tracking-tight text-primary\">RBI System</h1>\n                      <p className=\"text-xs font-medium text-muted\">Records Management</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex-1 px-6 pb-6\">\n                  <Navigation />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Static sidebar for desktop */}\n      <div className=\"hidden lg:fixed lg:inset-y-0 lg:z-50 lg:flex lg:w-64 lg:flex-col\">\n        <div className=\"bg-surface/95 border-default/60 flex grow flex-col overflow-y-auto border-r backdrop-blur-xl\">\n          <div className=\"px-6 py-8\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"flex size-10 items-center justify-center rounded-2xl bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500 shadow-xl\">\n                <span className=\"text-lg font-bold text-white\">R</span>\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold tracking-tight text-primary\">RBI System</h1>\n                <p className=\"text-xs font-medium text-muted\">Records Management</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex-1 px-6 pb-6\">\n            <Navigation />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"lg:pl-64\">\n        {/* Top navigation bar */}\n        <div className=\"border-default/40 bg-surface/90 sticky top-0 z-40 flex h-16 shrink-0 items-center gap-x-6 border-b px-4 shadow-xl shadow-black/5 backdrop-blur-2xl sm:px-6 lg:px-8\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            iconOnly\n            onClick={() => setSidebarOpen(true)}\n            className=\"-m-2.5 rounded-lg p-2.5 transition-all duration-200 text-secondary hover:text-primary hover:bg-surface-hover lg:hidden\"\n          >\n            <span className=\"sr-only\">Open sidebar</span>\n            <div className=\"flex size-5 flex-col justify-center space-y-1\">\n              <div className=\"h-0.5 w-5 rounded-full bg-current\"></div>\n              <div className=\"h-0.5 w-5 rounded-full bg-current\"></div>\n              <div className=\"h-0.5 w-5 rounded-full bg-current\"></div>\n            </div>\n          </Button>\n\n          <div className=\"h-6 w-px bg-slate-200 lg:hidden\" />\n\n          <div className=\"flex flex-1 gap-x-6 self-stretch\">\n            {/* Search */}\n            <div className=\"relative flex max-w-lg flex-1\">\n              <div className=\"pointer-events-none absolute inset-y-0 left-0 flex items-center pl-4\">\n                <div className=\"size-4 text-muted\">\n                  <div className=\"size-4 rounded-full border border-current\"></div>\n                  <div className=\"absolute left-3 top-3 h-2 w-0.5 rotate-45 bg-current\"></div>\n                </div>\n              </div>\n              <input\n                className=\"bg-surface/80 hover:bg-surface-hover/80 block size-full rounded-2xl border-0 py-0 pl-11 pr-4 shadow-inner transition-all duration-200 text-primary placeholder:text-muted focus:ring-2 focus:ring-inset focus:ring-indigo-500 focus:bg-surface sm:text-sm\"\n                placeholder=\"Search residents, addresses...\"\n                type=\"search\"\n              />\n            </div>\n\n            <div className=\"flex items-center gap-x-4 lg:gap-x-6\">\n              {/* Notifications */}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                iconOnly\n                className=\"relative -m-2.5 rounded-xl p-2.5 transition-all duration-200 text-muted hover:text-secondary hover:bg-surface-hover\"\n              >\n                <span className=\"sr-only\">View notifications</span>\n                <div className=\"relative size-5\">\n                  <div className=\"absolute inset-0 rounded-lg border border-current\"></div>\n                  <div className=\"absolute inset-x-1 top-1 h-0.5 rounded-full bg-current\"></div>\n                  <div className=\"absolute inset-x-1 bottom-1 h-1 rounded-full bg-current\"></div>\n                </div>\n                <span className=\"absolute -right-1 -top-1 flex size-5 items-center justify-center rounded-full bg-gradient-to-br from-red-500 to-pink-600 shadow-lg\">\n                  <span className=\"text-xs font-bold text-white\">3</span>\n                </span>\n              </Button>\n\n              <div className=\"hidden lg:block lg:h-6 lg:w-px lg:bg-slate-200\" />\n\n              {/* Profile */}\n              <div className=\"relative\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"group -m-1.5 flex h-auto items-center rounded-2xl p-2 transition-all duration-200 hover:bg-surface-hover\"\n                >\n                  <span className=\"sr-only\">Open user menu</span>\n                  <div className=\"flex size-8 items-center justify-center rounded-2xl bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500 shadow-xl ring-2 ring-white transition-transform duration-200 group-hover:scale-105\">\n                    <span className=\"text-sm font-bold text-white\">BO</span>\n                  </div>\n                  <span className=\"hidden lg:ml-3 lg:flex lg:items-center\">\n                    <span className=\"text-sm font-semibold transition-colors duration-200 text-primary group-hover:text-indigo-600\">\n                      Barangay Official\n                    </span>\n                    <div className=\"ml-2 size-4 transition-colors duration-200 text-muted group-hover:text-secondary\">\n                      <div className=\"size-1 rounded-full bg-current\"></div>\n                      <div className=\"-mt-0.5 ml-1 size-1 rounded-full bg-current\"></div>\n                      <div className=\"-mt-0.5 ml-2 size-1 rounded-full bg-current\"></div>\n                    </div>\n                  </span>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Main content */}\n        <main className=\"min-h-screen py-8 lg:py-12\">\n          <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n            <div className=\"space-y-8\">{children}</div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/templates/AppShell/AppShell.tsx",
          "lineCount": 173,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "AppShell",
          "line": 16,
          "message": "Function 'AppShell' has 173 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/templates/DashboardLayout/DashboardLayout.stories.tsx",
      "lineCount": 646,
      "functions": [
        {
          "name": "MockAuthProvider",
          "startLine": 6,
          "endLine": 48,
          "code": "const MockAuthProvider = ({ children }: { children: React.ReactNode }) => {\n  // Create a mock auth context value\n  const mockAuthValue = {\n    user: {\n      id: 'mock-user-id',\n      email: 'barangay.admin@example.com',\n      user_metadata: {\n        first_name: 'John',\n        last_name: 'Doe',\n      },\n    },\n    userProfile: {\n      id: 'profile-id',\n      first_name: 'John',\n      last_name: 'Doe',\n      email: 'barangay.admin@example.com',\n      barangay_code: '137404001',\n      role_id: 'admin-role',\n    },\n    role: {\n      id: 'admin-role',\n      name: 'Barangay Administrator',\n      permissions: [],\n    },\n    signOut: async () => {\n      console.log('Mock sign out');\n    },\n    loading: false,\n    initialized: true,\n  };\n\n  // Mock the useAuth hook\n  React.useEffect(() => {\n    const originalUseAuth = (window as any).useAuth;\n    (window as any).useAuth = () => mockAuthValue;\n    \n    return () => {\n      (window as any).useAuth = originalUseAuth;\n    };\n  }, []);\n\n  return <>{children}</>;\n};\n",
          "filePath": "src/components/templates/DashboardLayout/DashboardLayout.stories.tsx",
          "lineCount": 43,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "MockDashboardContent",
          "startLine": 99,
          "endLine": 100,
          "code": "const MockDashboardContent = () => (\n  <div className=\"p-6 space-y-8\">\n",
          "filePath": "src/components/templates/DashboardLayout/DashboardLayout.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "MockResidentsContent",
          "startLine": 195,
          "endLine": 196,
          "code": "const MockResidentsContent = () => (\n  <div className=\"p-6 space-y-6\">\n",
          "filePath": "src/components/templates/DashboardLayout/DashboardLayout.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 289,
          "endLine": 290,
          "code": "  render: () => (\n    <DashboardLayoutWrapper>\n",
          "filePath": "src/components/templates/DashboardLayout/DashboardLayout.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 298,
          "endLine": 299,
          "code": "  render: () => (\n    <DashboardLayoutWrapper showSearch={true} initialSearchTerm=\"\">\n",
          "filePath": "src/components/templates/DashboardLayout/DashboardLayout.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 353,
          "endLine": 354,
          "code": "  render: () => (\n    <DashboardLayoutWrapper>\n",
          "filePath": "src/components/templates/DashboardLayout/DashboardLayout.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 369,
          "endLine": 370,
          "code": "  render: () => (\n    <DashboardLayoutWrapper>\n",
          "filePath": "src/components/templates/DashboardLayout/DashboardLayout.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 388,
          "endLine": 389,
          "code": "  render: () => (\n    <DashboardLayoutWrapper>\n",
          "filePath": "src/components/templates/DashboardLayout/DashboardLayout.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 407,
          "endLine": 408,
          "code": "  render: () => (\n    <DashboardLayoutWrapper>\n",
          "filePath": "src/components/templates/DashboardLayout/DashboardLayout.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 464,
          "endLine": 465,
          "code": "  render: () => (\n    <DashboardLayoutWrapper>\n",
          "filePath": "src/components/templates/DashboardLayout/DashboardLayout.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 532,
          "endLine": 533,
          "code": "  render: () => (\n    <DashboardLayoutWrapper>\n",
          "filePath": "src/components/templates/DashboardLayout/DashboardLayout.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 631,
          "endLine": 632,
          "code": "  render: () => (\n    <DashboardLayoutWrapper>\n",
          "filePath": "src/components/templates/DashboardLayout/DashboardLayout.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 646 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "MockAuthProvider",
          "line": 6,
          "message": "Function 'MockAuthProvider' has 43 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/templates/DashboardLayout/DashboardLayout.tsx",
      "lineCount": 354,
      "functions": [
        {
          "name": "UserDropdown",
          "startLine": 13,
          "endLine": 246,
          "code": "function UserDropdown() {\n  const { userProfile, role, signOut } = useAuth();\n  const [isOpen, setIsOpen] = useState(false);\n  const [barangayInfo, setBarangayInfo] = useState<string>('Loading...');\n  const dropdownRef = React.useRef<HTMLDivElement>(null);\n  const buttonRef = React.useRef<HTMLButtonElement>(null);\n\n  // Load barangay information from database\n  const loadBarangayInfo = async (barangayCode: string) => {\n    try {\n      // Check if user is authenticated first\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) {\n        logger.debug('Cannot load barangay info - user not authenticated', { barangayCode });\n        setBarangayInfo(`Barangay ${barangayCode}`);\n        return;\n      }\n\n      logger.debug('Loading barangay info', { barangayCode });\n\n      // Query the PSGC tables to get full address hierarchy\n      const { data: barangayData, error } = await supabase\n        .from('psgc_barangays')\n        .select(\n          `\n          name,\n          psgc_cities_municipalities!inner(\n            name,\n            type,\n            psgc_provinces!inner(\n              name,\n              psgc_regions!inner(\n                name\n              )\n            )\n          )\n        `\n        )\n        .eq('code', barangayCode)\n        .single();\n\n      if (error) {\n        // Don't log error if it's just an authentication issue\n        if (\n          error.code === 'PGRST001' || \n          error.message?.includes('permission') ||\n          error.message?.includes('JWT') ||\n          error.message?.includes('unauthorized') ||\n          error.code === '401'\n        ) {\n          logger.debug('Cannot load barangay info - user not authenticated', { barangayCode });\n        } else {\n          // Only log non-authentication related errors, and use debug level for less critical errors\n          logger.debug('Error loading barangay info', { error: error.message, code: error.code, barangayCode });\n        }\n        setBarangayInfo(`Barangay ${barangayCode}`);\n        return;\n      }\n\n      if (barangayData) {\n        const cityMun = (barangayData as any).psgc_cities_municipalities;\n        const province = cityMun.psgc_provinces;\n\n        const fullAddress = `${barangayData.name}, ${cityMun.name} (${cityMun.type}), ${province.name}`;\n        logger.debug('Loaded barangay info from database', { address: fullAddress });\n        setBarangayInfo(fullAddress);\n      } else {\n        setBarangayInfo(`Barangay ${barangayCode}`);\n      }\n    } catch (error) {\n      // Don't log critical errors for authentication-related issues in dashboard\n      logger.debug('Error loading barangay info (caught in catch)', { \n        error: error instanceof Error ? error.message : String(error), \n        barangayCode \n      });\n      setBarangayInfo(`Barangay ${barangayCode}`);\n    }\n  };\n\n  // Load barangay info when userProfile changes\n  useEffect(() => {\n    if (userProfile?.barangay_code) {\n      loadBarangayInfo(userProfile.barangay_code);\n    }\n  }, [userProfile?.barangay_code]);\n\n  // Handle click outside and Escape key\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && isOpen) {\n        setIsOpen(false);\n        buttonRef.current?.focus();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n      document.addEventListener('keydown', handleEscape);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [isOpen]);\n\n  const handleLogout = async () => {\n    try {\n      await signOut();\n      window.location.href = '/login';\n    } catch (error) {\n      logError(error as Error, 'SIGN_OUT_ERROR');\n    }\n  };\n\n  if (!userProfile) return null;\n\n  return (\n    <div className=\"relative\" ref={dropdownRef}>\n      {/* Dropdown trigger */}\n      <button\n        ref={buttonRef}\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"flex items-center gap-2 rounded px-2 py-1 transition-colors hover:bg-neutral-100\"\n        aria-expanded={isOpen}\n        aria-haspopup=\"true\"\n        aria-label=\"User menu\"\n      >\n        <div\n          className=\"size-8 rounded-full bg-cover bg-center bg-no-repeat\"\n          style={{\n            backgroundImage:\n              'url(\\'data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"%3E%3Ccircle cx=\"16\" cy=\"16\" r=\"16\" fill=\"%23e5e7eb\"%2F%3E%3Ctext x=\"16\" y=\"20\" text-anchor=\"middle\" fill=\"%236b7280\" font-size=\"14\"%3EU%3C%2Ftext%3E%3C%2Fsvg%3E\\')',\n          }}\n        ></div>\n        <div className=\"font-montserrat text-sm font-medium text-neutral-800\">\n          {`${userProfile.first_name} ${userProfile.last_name}`}\n        </div>\n        <div className=\"size-4 text-neutral-600\">\n          <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d={isOpen ? 'M5 15l7-7 7 7' : 'M19 9l-7 7-7-7'}\n            />\n          </svg>\n        </div>\n      </button>\n\n      {/* Dropdown menu */}\n      {isOpen && (\n        <>\n          {/* Dropdown content - no backdrop needed with proper event handling */}\n          <div\n            className=\"absolute right-0 z-20 mt-2 w-72 rounded-lg border border-neutral-200 bg-white shadow-xl\"\n            role=\"menu\"\n            aria-orientation=\"vertical\"\n            aria-labelledby=\"user-menu-button\"\n          >\n            {/* User info header */}\n            <div className=\"border-b border-neutral-100 p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div\n                  className=\"size-12 rounded-full bg-cover bg-center bg-no-repeat\"\n                  style={{\n                    backgroundImage:\n                      'url(\\'data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\"%3E%3Ccircle cx=\"24\" cy=\"24\" r=\"24\" fill=\"%23e5e7eb\"%2F%3E%3Ctext x=\"24\" y=\"30\" text-anchor=\"middle\" fill=\"%236b7280\" font-size=\"20\"%3EU%3C%2Ftext%3E%3C%2Fsvg%3E\\')',\n                  }}\n                ></div>\n                <div>\n                  <div className=\"font-montserrat font-semibold text-neutral-900\">\n                    {`${userProfile.first_name} ${userProfile.last_name}`}\n                  </div>\n                  <div className=\"font-montserrat text-sm text-neutral-600\">\n                    {userProfile.email}\n                  </div>\n                  <div className=\"font-montserrat mt-1 text-xs text-blue-600\">\n                    {role?.name || 'User'}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Barangay info */}\n            <div className=\"border-b border-neutral-100 p-4\">\n              <div className=\"font-montserrat mb-2 text-xs font-medium text-neutral-500\">\n                BARANGAY ASSIGNMENT\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"size-2 rounded-full bg-green-500\"></div>\n                <div className=\"font-montserrat text-sm text-neutral-800\">{barangayInfo}</div>\n              </div>\n              <div className=\"font-montserrat mt-1 text-xs text-neutral-500\">\n                Code: {userProfile.barangay_code}\n              </div>\n            </div>\n\n            {/* Actions */}\n            <div className=\"p-2\">\n              <button\n                onClick={() => {\n                  // Add profile editing functionality later\n                  alert('Profile editing coming soon!');\n                }}\n                className=\"font-montserrat w-full rounded px-3 py-2 text-left text-sm text-neutral-700 transition-colors hover:bg-neutral-100\"\n              >\n                Edit Profile\n              </button>\n              <Link href=\"/settings\">\n                <button className=\"font-montserrat w-full rounded px-3 py-2 text-left text-sm text-neutral-700 transition-colors hover:bg-neutral-100\">\n                  Settings\n                </button>\n              </Link>\n              <hr className=\"my-2 border-neutral-200\" />\n              <button\n                onClick={handleLogout}\n                className=\"font-montserrat w-full rounded px-3 py-2 text-left text-sm text-red-600 transition-colors hover:bg-red-50\"\n              >\n                Sign Out\n              </button>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n",
          "filePath": "src/components/templates/DashboardLayout/DashboardLayout.tsx",
          "lineCount": 234,
          "cyclomaticComplexity": 24,
          "cognitiveComplexity": 32
        },
        {
          "name": "DashboardLayout",
          "startLine": 254,
          "endLine": 353,
          "code": "export default function DashboardLayout({\n  children,\n  searchTerm = '',\n  onSearchChange,\n}: DashboardLayoutProps) {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Skip Navigation */}\n      <SkipNavigation skipTo=\"#main-content\" />\n\n      {/* Sidebar */}\n      <aside\n        id=\"navigation\"\n        className=\"bg-background-secondary fixed left-0 top-0 h-full w-56 border-r border-default\"\n        aria-label=\"Main navigation\"\n      >\n        <div className=\"flex h-full flex-col\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between border-b px-4 py-3 border-default\">\n            <h1 className=\"font-montserrat text-xl font-semibold text-primary\">Citizenly</h1>\n            <div className=\"flex gap-1\">\n              <div className=\"rounded bg-neutral-200 p-0.5\">\n                <div className=\"size-5 rounded bg-neutral-400\"></div>\n              </div>\n              <div className=\"rounded bg-neutral-200 p-0.5\">\n                <div className=\"size-5 rounded bg-neutral-400\"></div>\n              </div>\n            </div>\n          </div>\n\n          {/* Navigation */}\n          <div className=\"flex-1 px-2 py-4\">\n            <Navigation />\n          </div>\n        </div>\n      </aside>\n\n      {/* Main Content */}\n      <main className=\"ml-56\">\n        {/* Top Header */}\n        <header className=\"border-b px-6 py-2 bg-background border-default\">\n          <div className=\"flex items-center justify-between\">\n            {/* Search */}\n            <div className=\"w-[497px]\">\n              <SearchBar\n                placeholder=\"Search Citizenly\"\n                value={searchTerm}\n                onChange={e => onSearchChange?.(e.target.value)}\n                onClear={() => onSearchChange?.('')}\n                onSearch={value => {\n                  // Handle search action (Enter key pressed)\n                  logger.debug('Search initiated', { searchValue: value });\n                  // Add your search logic here\n                }}\n                variant=\"default\"\n                size=\"md\"\n                showClearButton={true}\n              />\n            </div>\n\n            {/* User Section */}\n            <div className=\"flex items-center gap-2\">\n              <div className=\"rounded-full bg-neutral-200 p-2\">\n                <div className=\"size-5 text-neutral-600\">\n                  <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\n                    />\n                  </svg>\n                </div>\n              </div>\n              <div className=\"rounded-full bg-neutral-200 p-2\">\n                <div className=\"size-5 text-neutral-600\">\n                  <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\n                    />\n                  </svg>\n                </div>\n              </div>\n              <div className=\"h-0 w-6 border-l border-neutral-300\"></div>\n              <UserDropdown />\n            </div>\n          </div>\n        </header>\n\n        {/* Page Content */}\n        <div id=\"main-content\" role=\"main\" tabIndex={-1}>\n          {children}\n        </div>\n      </main>\n    </div>\n  );\n}\n",
          "filePath": "src/components/templates/DashboardLayout/DashboardLayout.tsx",
          "lineCount": 100,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 354 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "UserDropdown",
          "line": 13,
          "message": "Function 'UserDropdown' has 234 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "UserDropdown",
          "line": 13,
          "complexity": 24,
          "message": "Function 'UserDropdown' has cyclomatic complexity of 24 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "UserDropdown",
          "line": 13,
          "complexity": 32,
          "message": "Function 'UserDropdown' has cognitive complexity of 32 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "DashboardLayout",
          "line": 254,
          "message": "Function 'DashboardLayout' has 100 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/templates/Header/Header.stories.tsx",
      "lineCount": 569,
      "functions": [
        {
          "name": "signOut",
          "startLine": 30,
          "endLine": 32,
          "code": "    signOut: async () => {\n      console.log('Mock sign out');\n    },\n",
          "filePath": "src/components/templates/Header/Header.stories.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 88,
          "endLine": 89,
          "code": "  render: () => (\n    <MockAuthProvider user={mockUser}>\n",
          "filePath": "src/components/templates/Header/Header.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 118,
          "endLine": 119,
          "code": "  render: () => (\n    <MockAuthProvider user={null}>\n",
          "filePath": "src/components/templates/Header/Header.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 150,
          "endLine": 151,
          "code": "  render: () => (\n    <MockAuthProvider user={null} loading={true}>\n",
          "filePath": "src/components/templates/Header/Header.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 182,
          "endLine": 183,
          "code": "  render: () => (\n    <MockAuthProvider user={mockAdminUser}>\n",
          "filePath": "src/components/templates/Header/Header.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 228,
          "endLine": 229,
          "code": "  render: () => (\n    <MockAuthProvider user={mockUser}>\n",
          "filePath": "src/components/templates/Header/Header.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 278,
          "endLine": 279,
          "code": "  render: () => (\n    <MockAuthProvider user={mockUser}>\n",
          "filePath": "src/components/templates/Header/Header.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 334,
          "endLine": 335,
          "code": "  render: () => (\n    <MockAuthProvider user={mockUser}>\n",
          "filePath": "src/components/templates/Header/Header.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 427,
          "endLine": 428,
          "code": "  render: () => (\n    <MockAuthProvider user={mockUser}>\n",
          "filePath": "src/components/templates/Header/Header.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 518,
          "endLine": 519,
          "code": "  render: () => (\n    <MockAuthProvider user={mockUser}>\n",
          "filePath": "src/components/templates/Header/Header.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 535,
          "endLine": 536,
          "code": "  render: () => (\n    <MockAuthProvider user={mockUser}>\n",
          "filePath": "src/components/templates/Header/Header.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 569 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/templates/Header/Header.tsx",
      "lineCount": 199,
      "functions": [
        {
          "name": "LogoutButton",
          "startLine": 15,
          "endLine": 32,
          "code": "function LogoutButton() {\n  const { signOut } = useAuth();\n\n  const handleLogout = async () => {\n    try {\n      await signOut();\n      window.location.href = '/login';\n    } catch (error) {\n      logError(error as Error, 'SIGN_OUT_ERROR');\n    }\n  };\n\n  return (\n    <Button onClick={handleLogout} variant=\"neutral-subtle\" size=\"sm\">\n      Logout\n    </Button>\n  );\n}\n",
          "filePath": "src/components/templates/Header/Header.tsx",
          "lineCount": 18,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 3
        },
        {
          "name": "Header",
          "startLine": 34,
          "endLine": 198,
          "code": "export default function Header() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { user } = useAuth();\n\n  return (\n    <header className=\"border-b shadow-sm bg-surface border-default\">\n      <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex h-16 items-center justify-between\">\n          {/* Logo */}\n          <div className=\"flex items-center\">\n            <Link href=\"/\" className=\"flex items-center space-x-2\">\n              <div className=\"flex size-8 items-center justify-center rounded-lg bg-primary-600\">\n                <span className=\"font-display text-sm font-bold text-white\">RBI</span>\n              </div>\n              <span className=\"font-display text-xl font-semibold text-primary\">RBI System</span>\n            </Link>\n          </div>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden space-x-1 md:flex\">\n            <Link\n              href=\"/dashboard\"\n              className=\"rounded-md px-3 py-2 text-sm font-medium transition-colors font-body text-secondary hover:text-primary hover:bg-surface-hover\"\n            >\n              Dashboard\n            </Link>\n            <Link\n              href=\"/residents\"\n              className=\"rounded-md px-3 py-2 text-sm font-medium transition-colors font-body text-secondary hover:text-primary hover:bg-surface-hover\"\n            >\n              Residents\n            </Link>\n            <Link\n              href=\"/households\"\n              className=\"rounded-md px-3 py-2 text-sm font-medium transition-colors font-body text-secondary hover:text-primary hover:bg-surface-hover\"\n            >\n              Households\n            </Link>\n            <Link\n              href=\"/addresses\"\n              className=\"rounded-md px-3 py-2 text-sm font-medium transition-colors font-body text-secondary hover:text-primary hover:bg-surface-hover\"\n            >\n              Addresses\n            </Link>\n            <Link\n              href=\"/reports\"\n              className=\"rounded-md px-3 py-2 text-sm font-medium transition-colors font-body text-secondary hover:text-primary hover:bg-surface-hover\"\n            >\n              Reports\n            </Link>\n          </nav>\n\n          {/* User Menu */}\n          <div className=\"hidden items-center space-x-4 md:flex\">\n            {user ? (\n              <div className=\"flex items-center space-x-3\">\n                <UserProfile compact={true} showBarangay={false} />\n                <LogoutButton />\n              </div>\n            ) : (\n              <Link\n                href=\"/login\"\n                className=\"rounded-md px-3 py-2 text-sm font-medium font-body text-secondary hover:text-primary\"\n              >\n                Sign In\n              </Link>\n            )}\n          </div>\n\n          {/* Mobile menu button */}\n          <div className=\"md:hidden\">\n            <button\n              onClick={() => setIsMenuOpen(!isMenuOpen)}\n              className=\"inline-flex items-center justify-center rounded-md p-2 transition-colors text-secondary hover:text-primary hover:bg-surface-hover focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary-500\"\n            >\n              <svg className=\"size-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d={isMenuOpen ? 'M6 18L18 6M6 6l12 12' : 'M4 6h16M4 12h16M4 18h16'}\n                />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Navigation */}\n      {isMenuOpen && (\n        <div className=\"border-t border-default md:hidden\">\n          <div className=\"space-y-1 px-2 pb-3 pt-2 bg-surface sm:px-3\">\n            <Link\n              href=\"/dashboard\"\n              className=\"block rounded-md px-3 py-2 text-base font-medium transition-colors font-body text-secondary hover:text-primary hover:bg-surface-hover\"\n              onClick={() => setIsMenuOpen(false)}\n            >\n              Dashboard\n            </Link>\n            <Link\n              href=\"/residents\"\n              className=\"block rounded-md px-3 py-2 text-base font-medium transition-colors font-body text-secondary hover:text-primary hover:bg-surface-hover\"\n              onClick={() => setIsMenuOpen(false)}\n            >\n              Residents\n            </Link>\n            <Link\n              href=\"/households\"\n              className=\"block rounded-md px-3 py-2 text-base font-medium transition-colors font-body text-secondary hover:text-primary hover:bg-surface-hover\"\n              onClick={() => setIsMenuOpen(false)}\n            >\n              Households\n            </Link>\n            <Link\n              href=\"/addresses\"\n              className=\"block rounded-md px-3 py-2 text-base font-medium transition-colors font-body text-secondary hover:text-primary hover:bg-surface-hover\"\n              onClick={() => setIsMenuOpen(false)}\n            >\n              Addresses\n            </Link>\n            <Link\n              href=\"/reports\"\n              className=\"block rounded-md px-3 py-2 text-base font-medium transition-colors font-body text-secondary hover:text-primary hover:bg-surface-hover\"\n              onClick={() => setIsMenuOpen(false)}\n            >\n              Reports\n            </Link>\n\n            {/* Mobile User Menu */}\n            {user ? (\n              <div className=\"mt-2 border-t pt-2 border-default\">\n                <div className=\"px-3 py-2\">\n                  <div className=\"flex items-center gap-3 p-2\">\n                    <div className=\"flex size-8 items-center justify-center rounded-full bg-primary-600 text-sm font-medium text-white\">\n                      {`${user.user_metadata?.first_name?.[0] || ''}${user.user_metadata?.last_name?.[0] || ''}`.toUpperCase()}\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"text-sm font-medium font-body text-primary\">\n                        {user.user_metadata?.first_name} {user.user_metadata?.last_name}\n                      </div>\n                      <div className=\"text-xs font-body text-secondary\">{user.email}</div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"px-3 py-2\">\n                  <LogoutButton />\n                </div>\n              </div>\n            ) : (\n              <div className=\"mt-2 border-t pt-2 border-default\">\n                <Link\n                  href=\"/login\"\n                  className=\"block rounded-md px-3 py-2 text-base font-medium transition-colors font-body text-secondary hover:text-primary hover:bg-surface-hover\"\n                  onClick={() => setIsMenuOpen(false)}\n                >\n                  Sign In\n                </Link>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </header>\n  );\n}\n",
          "filePath": "src/components/templates/Header/Header.tsx",
          "lineCount": 165,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 4
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "Header",
          "line": 34,
          "message": "Function 'Header' has 165 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/templates/HouseholdFormWizard/HouseholdFormWizard.stories.tsx",
      "lineCount": 714,
      "functions": [
        {
          "name": "MockProviders",
          "startLine": 6,
          "endLine": 49,
          "code": "const MockProviders = ({ children }: { children: React.ReactNode }) => {\n  // Mock useUserBarangay hook\n  React.useEffect(() => {\n    const mockUserBarangay = {\n      barangayCode: '137404001',\n      address: {\n        region_code: '13',\n        region_name: 'National Capital Region (NCR)',\n        province_code: '1374',\n        province_name: 'Metro Manila',\n        city_municipality_code: '137404',\n        city_municipality_name: 'Quezon City',\n        city_municipality_type: 'City',\n        barangay_code: '137404001',\n        barangay_name: 'Bagong Pag-asa',\n      },\n      loading: false,\n      error: null,\n    };\n    \n    (window as any).useUserBarangay = () => mockUserBarangay;\n    (window as any).useCSRFToken = () => ({ getToken: () => 'mock-csrf-token' });\n    \n    // Mock Next.js router\n    (window as any).useRouter = () => ({\n      push: (path: string) => console.log('Navigate to:', path),\n      pathname: '/households/create',\n    });\n    \n    // Mock Supabase\n    (window as any).supabase = {\n      from: () => ({\n        insert: () => ({\n          select: () => Promise.resolve({ \n            data: [{ id: 'mock-household-id' }], \n            error: null \n          }),\n        }),\n      }),\n    };\n  }, []);\n\n  return <>{children}</>;\n};\n",
          "filePath": "src/components/templates/HouseholdFormWizard/HouseholdFormWizard.stories.tsx",
          "lineCount": 44,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "handleSubmit",
          "startLine": 64,
          "endLine": 72,
          "code": "  const handleSubmit = async (data: HouseholdFormData) => {\n    if (onSubmit) {\n      await onSubmit(data);\n    } else if (showSubmissionResult) {\n      setSubmittedData(data);\n      setSubmissionResult('Household created successfully!');\n      console.log('Household Form Data:', data);\n    }\n  };\n",
          "filePath": "src/components/templates/HouseholdFormWizard/HouseholdFormWizard.stories.tsx",
          "lineCount": 9,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 5
        },
        {
          "name": "handleCancel",
          "startLine": 74,
          "endLine": 76,
          "code": "  const handleCancel = () => {\n    console.log('Form cancelled');\n  };\n",
          "filePath": "src/components/templates/HouseholdFormWizard/HouseholdFormWizard.stories.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 169,
          "endLine": 170,
          "code": "  render: () => <WizardWrapper />,\n};\n",
          "filePath": "src/components/templates/HouseholdFormWizard/HouseholdFormWizard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 174,
          "endLine": 181,
          "code": "  render: () => <WizardWrapper showSubmissionResult={true} />,\n  parameters: {\n    docs: {\n      description: {\n        story: 'Complete household form wizard with submission handling. Fill out the form and submit to see the success state and data summary.',\n      },\n    },\n  },\n",
          "filePath": "src/components/templates/HouseholdFormWizard/HouseholdFormWizard.stories.tsx",
          "lineCount": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 186,
          "endLine": 187,
          "code": "  render: () => (\n    <div className=\"max-w-4xl mx-auto p-8\">\n",
          "filePath": "src/components/templates/HouseholdFormWizard/HouseholdFormWizard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 279,
          "endLine": 280,
          "code": "  render: () => (\n    <div className=\"max-w-4xl mx-auto p-8\">\n",
          "filePath": "src/components/templates/HouseholdFormWizard/HouseholdFormWizard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 370,
          "endLine": 371,
          "code": "  render: () => (\n    <div className=\"max-w-4xl mx-auto p-8\">\n",
          "filePath": "src/components/templates/HouseholdFormWizard/HouseholdFormWizard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 478,
          "endLine": 479,
          "code": "  render: () => (\n    <div className=\"max-w-4xl mx-auto p-8\">\n",
          "filePath": "src/components/templates/HouseholdFormWizard/HouseholdFormWizard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 589,
          "endLine": 599,
          "code": "  render: () => <WizardWrapper />,\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile',\n    },\n    docs: {\n      description: {\n        story: 'Household Form Wizard optimized for mobile devices with touch-friendly inputs and responsive layout.',\n      },\n    },\n  },\n",
          "filePath": "src/components/templates/HouseholdFormWizard/HouseholdFormWizard.stories.tsx",
          "lineCount": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 604,
          "endLine": 614,
          "code": "  render: () => <WizardWrapper />,\n  parameters: {\n    viewport: {\n      defaultViewport: 'tablet',\n    },\n    docs: {\n      description: {\n        story: 'Household Form Wizard on tablet-sized screens showing optimal layout for medium screen sizes.',\n      },\n    },\n  },\n",
          "filePath": "src/components/templates/HouseholdFormWizard/HouseholdFormWizard.stories.tsx",
          "lineCount": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 619,
          "endLine": 620,
          "code": "  render: () => (\n    <div className=\"max-w-4xl mx-auto p-8\">\n",
          "filePath": "src/components/templates/HouseholdFormWizard/HouseholdFormWizard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 714 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "MockProviders",
          "line": 6,
          "message": "Function 'MockProviders' has 44 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/templates/HouseholdFormWizard/HouseholdFormWizard.tsx",
      "lineCount": 991,
      "functions": [
        {
          "name": "HouseholdFormWizard",
          "startLine": 70,
          "endLine": 481,
          "code": "export default function HouseholdFormWizard({\n  onSubmit,\n  onCancel: _onCancel,\n}: HouseholdFormWizardProps) {\n  const router = useRouter();\n  const { getToken: getCSRFToken } = useCSRFToken();\n\n  const [currentStep, setCurrentStep] = useState(1);\n  const [errors, setErrors] = useState<Partial<Record<keyof HouseholdFormData, string>>>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const [formData, setFormData] = useState<HouseholdFormData>({\n    // Step 1: Basic Information\n    householdCode: '',\n    householdType: '',\n    headFirstName: '',\n    headMiddleName: '',\n    headLastName: '',\n    headExtensionName: '',\n\n    // Step 2: Location Details\n    streetName: '',\n    houseNumber: '',\n    subdivision: '',\n    landmark: '',\n    coordinates: {\n      latitude: '',\n      longitude: '',\n    },\n\n    // Step 3: Household Composition\n    totalMembers: 1,\n    totalMales: 0,\n    totalFemales: 0,\n    children: 0,\n    adults: 1,\n    seniors: 0,\n\n    // Step 4: Economic Information\n    monthlyIncome: '',\n    incomeSource: '',\n    hasElectricity: false,\n    hasWater: false,\n    hasInternet: false,\n    dwellingType: '',\n    dwellingOwnership: '',\n\n    // Address Information (PSGC Codes)\n    regionCode: '',\n    provinceCode: '',\n    cityMunicipalityCode: '',\n    barangayCode: '',\n  });\n\n  // User's assigned barangay address (auto-populated)\n  const {\n    barangayCode,\n    address: userAddress,\n    loading: loadingAddress,\n    error: addressError,\n  } = useUserBarangay();\n\n  // Auto-populate form data when user address is loaded\n  useEffect(() => {\n    if (userAddress && barangayCode) {\n      setFormData(prev => ({\n        ...prev,\n        regionCode: userAddress.region_code,\n        provinceCode: userAddress.province_code || '',\n        cityMunicipalityCode: userAddress.city_municipality_code,\n        barangayCode: userAddress.barangay_code,\n      }));\n    }\n  }, [userAddress, barangayCode]);\n\n  // Generate household code when component mounts\n  useEffect(() => {\n    const generateHouseholdCode = () => {\n      const timestamp = Date.now().toString(36);\n      const randomStr = Math.random().toString(36).substring(2, 8);\n      return `HH-${timestamp}-${randomStr}`.toUpperCase();\n    };\n\n    if (!formData.householdCode) {\n      setFormData(prev => ({\n        ...prev,\n        householdCode: generateHouseholdCode(),\n      }));\n    }\n  }, [formData.householdCode]);\n\n  const steps: FormStep[] = [\n    {\n      id: 1,\n      title: 'Basic Information',\n      description: 'Household details and head of household',\n    },\n    {\n      id: 2,\n      title: 'Location Details',\n      description: 'Address and geographic information',\n    },\n    {\n      id: 3,\n      title: 'Household Composition',\n      description: 'Family members and demographics',\n    },\n    {\n      id: 4,\n      title: 'Economic & Utilities',\n      description: 'Income, utilities, and dwelling information',\n    },\n  ];\n\n  const handleInputChange = (field: keyof HouseholdFormData, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({\n        ...prev,\n        [field]: undefined,\n      }));\n    }\n  };\n\n  const validateStep = (step: number): boolean => {\n    const newErrors: Partial<Record<keyof HouseholdFormData, string>> = {};\n\n    try {\n      if (step === 1) {\n        // Step 1: Basic Information\n        if (!formData.householdType) newErrors.householdType = 'Household type is required';\n        if (!formData.headFirstName?.trim())\n          newErrors.headFirstName = 'Head first name is required';\n        if (!formData.headLastName?.trim()) newErrors.headLastName = 'Head last name is required';\n      }\n\n      if (step === 2) {\n        // Step 2: Location Details\n        if (!formData.streetName?.trim()) newErrors.streetName = 'Street name is required';\n      }\n\n      if (step === 3) {\n        // Step 3: Household Composition\n        if (formData.totalMembers < 1) newErrors.totalMembers = 'Total members must be at least 1';\n        if (formData.totalMales + formData.totalFemales !== formData.totalMembers) {\n          newErrors.totalMales = 'Total male and female members must equal total members';\n        }\n      }\n\n      if (step === 4) {\n        // Step 4: Economic Information\n        if (!formData.dwellingType) newErrors.dwellingType = 'Dwelling type is required';\n        if (!formData.dwellingOwnership)\n          newErrors.dwellingOwnership = 'Dwelling ownership is required';\n      }\n\n      setErrors(newErrors);\n      return Object.keys(newErrors).length === 0;\n    } catch (error) {\n      logError(error as Error, 'VALIDATION_ERROR');\n      return false;\n    }\n  };\n\n  const handleNextStep = () => {\n    if (validateStep(currentStep) && currentStep < 4) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePrevStep = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (onSubmit) {\n      await onSubmit(formData);\n      return;\n    }\n\n    // Validate all steps before submitting\n    const allStepsValid = [1, 2, 3, 4].every(step => validateStep(step));\n\n    if (!allStepsValid) {\n      alert('Please fill in all required fields correctly');\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      // Get CSRF token for secure form submission\n      getCSRFToken();\n\n      // Convert form data to match database schema\n      logger.info('Creating household', { householdCode: formData.householdCode });\n\n      const householdData = {\n        code: formData.householdCode,\n        household_type: formData.householdType as any,\n        head_first_name: formData.headFirstName,\n        head_middle_name: formData.headMiddleName || null,\n        head_last_name: formData.headLastName,\n        head_extension_name: formData.headExtensionName || null,\n        street_name: formData.streetName,\n        house_number: formData.houseNumber || null,\n        subdivision: formData.subdivision || null,\n        landmark: formData.landmark || null,\n        coordinates:\n          formData.coordinates.latitude && formData.coordinates.longitude\n            ? `POINT(${formData.coordinates.longitude} ${formData.coordinates.latitude})`\n            : null,\n        total_members: formData.totalMembers,\n        total_males: formData.totalMales,\n        total_females: formData.totalFemales,\n        children_count: formData.children,\n        adults_count: formData.adults,\n        seniors_count: formData.seniors,\n        monthly_income_range: formData.monthlyIncome || null,\n        primary_income_source: formData.incomeSource || null,\n        has_electricity: formData.hasElectricity,\n        has_water_supply: formData.hasWater,\n        has_internet: formData.hasInternet,\n        dwelling_type: formData.dwellingType as any,\n        dwelling_ownership: formData.dwellingOwnership as any,\n        // Geographic hierarchy - auto-populated from user's assigned barangay\n        region_code: userAddress?.region_code || null,\n        province_code: userAddress?.province_code || null,\n        city_municipality_code: userAddress?.city_municipality_code || null,\n        barangay_code: barangayCode || null,\n        // No household head initially - will be set when first resident is added\n        household_head_id: null,\n      };\n\n      // Use API endpoint instead of direct insert\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n\n      if (!session?.access_token) {\n        alert('Authentication required. Please log in again.');\n        return;\n      }\n\n      const response = await fetch('/api/households', {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${session.access_token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(householdData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        const errorMessage = errorData.error || `HTTP ${response.status}: ${response.statusText}`;\n\n        dbLogger.error('Failed to create household via API', {\n          error: errorMessage,\n          status: response.status,\n        });\n        alert(`Failed to create household: ${errorMessage}`);\n        return;\n      }\n\n      const { household: data } = await response.json();\n\n      dbLogger.info('Household created successfully via API', {\n        recordId: data?.id,\n        householdCode: formData.householdCode,\n      });\n\n      alert('Household created successfully!');\n\n      // Navigate to households list using Next.js router\n      router.push('/households');\n    } catch (error) {\n      logger.error('Unexpected error during household creation', error);\n      alert('An unexpected error occurred. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <BasicInformationStep formData={formData} onChange={handleInputChange} errors={errors} />\n        );\n      case 2:\n        return (\n          <LocationDetailsStep\n            formData={formData}\n            onChange={handleInputChange}\n            errors={errors}\n            userAddress={userAddress}\n            loadingAddress={loadingAddress}\n            addressError={addressError}\n          />\n        );\n      case 3:\n        return (\n          <HouseholdCompositionStep\n            formData={formData}\n            onChange={handleInputChange}\n            errors={errors}\n          />\n        );\n      case 4:\n        return (\n          <EconomicInformationStep\n            formData={formData}\n            onChange={handleInputChange}\n            errors={errors}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"mx-auto max-w-4xl\">\n      {/* Progress Steps */}\n      <div className=\"mb-8\">\n        <nav aria-label=\"Progress\">\n          <ol role=\"list\" className=\"flex items-center\">\n            {steps.map((step, stepIdx) => (\n              <li\n                key={step.id}\n                className={stepIdx !== steps.length - 1 ? 'relative pr-8 sm:pr-20' : 'relative'}\n              >\n                {currentStep > step.id ? (\n                  <>\n                    <div className=\"absolute inset-0 flex items-center\" aria-hidden=\"true\">\n                      <div className=\"h-0.5 w-full bg-zinc-600\" />\n                    </div>\n                    <div className=\"relative flex size-8 items-center justify-center rounded-full bg-zinc-600\">\n                      <svg className=\"size-5 text-white\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                        <path\n                          fillRule=\"evenodd\"\n                          d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                          clipRule=\"evenodd\"\n                        />\n                      </svg>\n                    </div>\n                  </>\n                ) : currentStep === step.id ? (\n                  <>\n                    <div className=\"absolute inset-0 flex items-center\" aria-hidden=\"true\">\n                      <div className=\"h-0.5 w-full bg-zinc-200\" />\n                    </div>\n                    <div className=\"relative flex size-8 items-center justify-center rounded-full border-2 border-zinc-600 bg-white\">\n                      <span className=\"text-sm font-medium text-zinc-600\">{step.id}</span>\n                    </div>\n                  </>\n                ) : (\n                  <>\n                    <div className=\"absolute inset-0 flex items-center\" aria-hidden=\"true\">\n                      <div className=\"h-0.5 w-full bg-zinc-200\" />\n                    </div>\n                    <div className=\"group relative flex size-8 items-center justify-center rounded-full border-2 border-zinc-300 bg-white\">\n                      <span className=\"text-sm font-medium text-zinc-500\">{step.id}</span>\n                    </div>\n                  </>\n                )}\n              </li>\n            ))}\n          </ol>\n        </nav>\n        <div className=\"mt-6\">\n          <h2 className=\"text-lg/8 font-semibold text-zinc-950 dark:text-white\">\n            {steps[currentStep - 1].title}\n          </h2>\n          <p className=\"mt-1 text-sm/6 text-zinc-500 dark:text-zinc-400\">\n            {steps[currentStep - 1].description}\n          </p>\n        </div>\n      </div>\n\n      {/* Form Content */}\n      <div className=\"rounded-lg bg-white shadow-sm ring-1 ring-zinc-950/5 dark:bg-zinc-900 dark:ring-white/10\">\n        <div className=\"px-6 py-8\">{renderStepContent()}</div>\n      </div>\n\n      {/* Navigation Buttons */}\n      <div className=\"mt-8 flex justify-between\">\n        <Button variant=\"secondary-outline\" onClick={handlePrevStep} disabled={currentStep === 1}>\n          Previous\n        </Button>\n\n        {currentStep < 4 ? (\n          <Button variant=\"primary\" onClick={handleNextStep}>\n            Continue\n          </Button>\n        ) : (\n          <Button variant=\"primary\" onClick={handleSubmit} disabled={isSubmitting}>\n            {isSubmitting ? 'Creating Household...' : 'Create Household'}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/templates/HouseholdFormWizard/HouseholdFormWizard.tsx",
          "lineCount": 412,
          "cyclomaticComplexity": 49,
          "cognitiveComplexity": 85
        },
        {
          "name": "BasicInformationStep",
          "startLine": 484,
          "endLine": 567,
          "code": "function BasicInformationStep({ formData, onChange, errors }: any) {\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"text-base/7 font-semibold text-zinc-950 dark:text-white\">\n          Basic Information\n        </h3>\n        <p className=\"mt-1 text-sm/6 text-zinc-500 dark:text-zinc-400\">\n          Household details and head of household information.\n        </p>\n      </div>\n\n      {/* Household Code */}\n      <div className=\"rounded-lg bg-blue-50 p-4 ring-1 ring-blue-900/10 dark:bg-blue-400/10 dark:ring-blue-400/20\">\n        <div className=\"flex\">\n          <div className=\"shrink-0\">\n            <svg className=\"size-5 text-blue-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path\n                fillRule=\"evenodd\"\n                d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z\"\n                clipRule=\"evenodd\"\n              />\n            </svg>\n          </div>\n          <div className=\"ml-3\">\n            <h4 className=\"text-sm/6 font-medium text-blue-800 dark:text-blue-200\">\n              Household Code (Auto-generated)\n            </h4>\n            <div className=\"mt-2 text-sm/6 text-blue-700 dark:text-blue-300\">\n              <p className=\"font-mono text-lg font-semibold\">{formData.householdCode}</p>\n              <p className=\"mt-1\">This unique code will identify this household in the system.</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Household Type */}\n      <HouseholdTypeSelector\n        value={formData.householdType}\n        onChange={value => onChange('householdType', value)}\n        error={errors.householdType}\n      />\n\n      {/* Head of Household */}\n      <div className=\"space-y-6\">\n        <h4 className=\"text-sm/6 font-medium text-zinc-950 dark:text-white\">Head of Household</h4>\n\n        <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n          <InputField\n            label=\"First Name\"\n            value={formData.headFirstName}\n            onChange={e => onChange('headFirstName', e.target.value)}\n            placeholder=\"Enter first name\"\n            required\n            errorMessage={errors.headFirstName}\n          />\n\n          <InputField\n            label=\"Middle Name\"\n            value={formData.headMiddleName}\n            onChange={e => onChange('headMiddleName', e.target.value)}\n            placeholder=\"Enter middle name\"\n          />\n\n          <InputField\n            label=\"Last Name\"\n            value={formData.headLastName}\n            onChange={e => onChange('headLastName', e.target.value)}\n            placeholder=\"Enter last name\"\n            required\n            errorMessage={errors.headLastName}\n          />\n\n          <InputField\n            label=\"Extension Name\"\n            value={formData.headExtensionName}\n            onChange={e => onChange('headExtensionName', e.target.value)}\n            placeholder=\"Jr., Sr., III, etc.\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/templates/HouseholdFormWizard/HouseholdFormWizard.tsx",
          "lineCount": 84,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "LocationDetailsStep",
          "startLine": 570,
          "endLine": 731,
          "code": "function LocationDetailsStep({\n  formData,\n  onChange,\n  errors,\n  userAddress,\n  loadingAddress,\n  addressError,\n}: any) {\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"text-base/7 font-semibold text-zinc-950 dark:text-white\">\n          Location Details\n        </h3>\n        <p className=\"mt-1 text-sm/6 text-zinc-500 dark:text-zinc-400\">\n          Address and geographic information.\n        </p>\n      </div>\n\n      {/* Geographic Information */}\n      <div className=\"space-y-4\">\n        <h4 className=\"text-sm/6 font-medium text-zinc-950 dark:text-white\">\n          Geographic Information\n        </h4>\n\n        {loadingAddress ? (\n          <div className=\"flex items-center gap-2 rounded-lg border border-blue-200 bg-blue-50 p-4\">\n            <svg className=\"size-5 animate-spin text-blue-600\" fill=\"none\" viewBox=\"0 0 24 24\">\n              <circle\n                className=\"opacity-25\"\n                cx=\"12\"\n                cy=\"12\"\n                r=\"10\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"\n              ></circle>\n              <path\n                className=\"opacity-75\"\n                fill=\"currentColor\"\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n              ></path>\n            </svg>\n            <span className=\"text-sm font-medium text-blue-700\">\n              Loading your assigned barangay...\n            </span>\n          </div>\n        ) : userAddress ? (\n          <div className=\"rounded-lg border border-green-200 bg-green-50 p-4\">\n            <div className=\"flex items-start gap-3\">\n              <span className=\"mt-0.5 text-green-600\">📍</span>\n              <div>\n                <h5 className=\"mb-2 font-medium text-green-800\">\n                  Auto-populated from your assigned barangay\n                </h5>\n                <div className=\"space-y-1 text-sm text-green-700\">\n                  <div>\n                    <strong>Region:</strong> {userAddress.region_name}\n                  </div>\n                  {userAddress.province_name && (\n                    <div>\n                      <strong>Province:</strong> {userAddress.province_name}\n                    </div>\n                  )}\n                  <div>\n                    <strong>City/Municipality:</strong> {userAddress.city_municipality_name} (\n                    {userAddress.city_municipality_type})\n                  </div>\n                  <div>\n                    <strong>Barangay:</strong> {userAddress.barangay_name}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"rounded-lg border border-red-200 bg-red-50 p-4\">\n            <div className=\"flex items-start gap-3\">\n              <span className=\"mt-0.5 text-red-600\">⚠️</span>\n              <div>\n                <h5 className=\"mb-1 font-medium text-red-800\">\n                  {addressError || 'No barangay assignment found'}\n                </h5>\n                <p className=\"text-sm text-red-700\">\n                  {addressError\n                    ? 'There was an error loading your barangay information. Please try refreshing the page.'\n                    : 'Please contact your system administrator to assign you to a barangay.'}\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Address Details */}\n      <div className=\"space-y-6\">\n        <h4 className=\"text-sm/6 font-medium text-zinc-950 dark:text-white\">Address Details</h4>\n\n        <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n          <InputField\n            label=\"Street Name\"\n            value={formData.streetName}\n            onChange={e => onChange('streetName', e.target.value)}\n            placeholder=\"Enter street name\"\n            required\n            errorMessage={errors.streetName}\n          />\n\n          <InputField\n            label=\"House Number\"\n            value={formData.houseNumber}\n            onChange={e => onChange('houseNumber', e.target.value)}\n            placeholder=\"e.g., 123, Blk 4 Lot 5\"\n          />\n\n          <InputField\n            label=\"Subdivision\"\n            value={formData.subdivision}\n            onChange={e => onChange('subdivision', e.target.value)}\n            placeholder=\"Subdivision/Village name\"\n          />\n\n          <InputField\n            label=\"Landmark\"\n            value={formData.landmark}\n            onChange={e => onChange('landmark', e.target.value)}\n            placeholder=\"Nearby landmark\"\n          />\n        </div>\n\n        {/* GPS Coordinates */}\n        <div className=\"space-y-4\">\n          <h5 className=\"text-sm/6 font-medium text-zinc-950 dark:text-white\">\n            GPS Coordinates (Optional)\n          </h5>\n          <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n            <InputField\n              label=\"Latitude\"\n              type=\"number\"\n              step=\"any\"\n              value={formData.coordinates.latitude}\n              onChange={e =>\n                onChange('coordinates', { ...formData.coordinates, latitude: e.target.value })\n              }\n              placeholder=\"e.g., 14.5995\"\n            />\n\n            <InputField\n              label=\"Longitude\"\n              type=\"number\"\n              step=\"any\"\n              value={formData.coordinates.longitude}\n              onChange={e =>\n                onChange('coordinates', { ...formData.coordinates, longitude: e.target.value })\n              }\n              placeholder=\"e.g., 120.9842\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/templates/HouseholdFormWizard/HouseholdFormWizard.tsx",
          "lineCount": 162,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 3
        },
        {
          "name": "HouseholdCompositionStep",
          "startLine": 734,
          "endLine": 840,
          "code": "function HouseholdCompositionStep({ formData, onChange, errors }: any) {\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"text-base/7 font-semibold text-zinc-950 dark:text-white\">\n          Household Composition\n        </h3>\n        <p className=\"mt-1 text-sm/6 text-zinc-500 dark:text-zinc-400\">\n          Family members and demographic information.\n        </p>\n      </div>\n\n      {/* Total Members */}\n      <div className=\"space-y-6\">\n        <h4 className=\"text-sm/6 font-medium text-zinc-950 dark:text-white\">Total Members</h4>\n\n        <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-3\">\n          <InputField\n            label=\"Total Members\"\n            type=\"number\"\n            min=\"1\"\n            value={formData.totalMembers.toString()}\n            onChange={e => onChange('totalMembers', parseInt(e.target.value) || 1)}\n            required\n            errorMessage={errors.totalMembers}\n          />\n\n          <InputField\n            label=\"Male Members\"\n            type=\"number\"\n            min=\"0\"\n            value={formData.totalMales.toString()}\n            onChange={e => onChange('totalMales', parseInt(e.target.value) || 0)}\n            errorMessage={errors.totalMales}\n          />\n\n          <InputField\n            label=\"Female Members\"\n            type=\"number\"\n            min=\"0\"\n            value={formData.totalFemales.toString()}\n            onChange={e => onChange('totalFemales', parseInt(e.target.value) || 0)}\n          />\n        </div>\n      </div>\n\n      {/* Age Groups */}\n      <div className=\"space-y-6\">\n        <h4 className=\"text-sm/6 font-medium text-zinc-950 dark:text-white\">Age Groups</h4>\n\n        <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-3\">\n          <InputField\n            label=\"Children (0-17)\"\n            type=\"number\"\n            min=\"0\"\n            value={formData.children.toString()}\n            onChange={e => onChange('children', parseInt(e.target.value) || 0)}\n          />\n\n          <InputField\n            label=\"Adults (18-59)\"\n            type=\"number\"\n            min=\"0\"\n            value={formData.adults.toString()}\n            onChange={e => onChange('adults', parseInt(e.target.value) || 0)}\n          />\n\n          <InputField\n            label=\"Seniors (60+)\"\n            type=\"number\"\n            min=\"0\"\n            value={formData.seniors.toString()}\n            onChange={e => onChange('seniors', parseInt(e.target.value) || 0)}\n          />\n        </div>\n      </div>\n\n      {/* Validation Summary */}\n      {formData.totalMales + formData.totalFemales !== formData.totalMembers && (\n        <div className=\"rounded-lg bg-amber-50 p-4 ring-1 ring-amber-900/10 dark:bg-amber-400/10 dark:ring-amber-400/20\">\n          <div className=\"flex\">\n            <div className=\"shrink-0\">\n              <svg className=\"size-5 text-amber-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M8.485 2.495c.673-1.167 2.357-1.167 3.03 0l6.28 10.875c.673 1.167-.17 2.625-1.516 2.625H3.72c-1.347 0-2.189-1.458-1.515-2.625L8.485 2.495zM10 5a.75.75 0 01.75.75v3.5a.75.75 0 01-1.5 0v-3.5A.75.75 0 0110 5zm0 9a1 1 0 100-2 1 1 0 000 2z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n            </div>\n            <div className=\"ml-3\">\n              <h3 className=\"text-sm/6 font-medium text-amber-800 dark:text-amber-200\">\n                Please check your numbers\n              </h3>\n              <div className=\"mt-2 text-sm/6 text-amber-700 dark:text-amber-300\">\n                <p>\n                  Total members ({formData.totalMembers}) should equal the sum of male (\n                  {formData.totalMales}) and female ({formData.totalFemales}) members.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n",
          "filePath": "src/components/templates/HouseholdFormWizard/HouseholdFormWizard.tsx",
          "lineCount": 107,
          "cyclomaticComplexity": 8,
          "cognitiveComplexity": 7
        },
        {
          "name": "EconomicInformationStep",
          "startLine": 843,
          "endLine": 990,
          "code": "function EconomicInformationStep({ formData, onChange, errors }: any) {\n  const INCOME_RANGES = [\n    { value: 'below_10k', label: 'Below ₱10,000' },\n    { value: '10k_25k', label: '₱10,000 - ₱25,000' },\n    { value: '25k_50k', label: '₱25,000 - ₱50,000' },\n    { value: '50k_100k', label: '₱50,000 - ₱100,000' },\n    { value: 'above_100k', label: 'Above ₱100,000' },\n  ];\n\n  const INCOME_SOURCES = [\n    { value: 'employment', label: 'Employment/Salary' },\n    { value: 'business', label: 'Business/Self-employed' },\n    { value: 'agriculture', label: 'Agriculture/Farming' },\n    { value: 'remittances', label: 'Remittances (OFW)' },\n    { value: 'pension', label: 'Pension/Retirement' },\n    { value: 'government_aid', label: 'Government Aid' },\n    { value: 'other', label: 'Other' },\n  ];\n\n  const DWELLING_TYPES = [\n    { value: 'single_detached', label: 'Single Detached House' },\n    { value: 'duplex', label: 'Duplex' },\n    { value: 'apartment', label: 'Apartment' },\n    { value: 'condominium', label: 'Condominium' },\n    { value: 'townhouse', label: 'Townhouse' },\n    { value: 'informal_dwelling', label: 'Informal Dwelling' },\n    { value: 'other', label: 'Other' },\n  ];\n\n  const OWNERSHIP_TYPES = [\n    { value: 'owned', label: 'Owned' },\n    { value: 'rented', label: 'Rented' },\n    { value: 'shared', label: 'Shared with others' },\n    { value: 'caretaker', label: 'Caretaker' },\n    { value: 'other', label: 'Other' },\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"text-base/7 font-semibold text-zinc-950 dark:text-white\">\n          Economic & Utilities Information\n        </h3>\n        <p className=\"mt-1 text-sm/6 text-zinc-500 dark:text-zinc-400\">\n          Income, utilities access, and dwelling information.\n        </p>\n      </div>\n\n      {/* Economic Information */}\n      <div className=\"space-y-6\">\n        <h4 className=\"text-sm/6 font-medium text-zinc-950 dark:text-white\">\n          Economic Information\n        </h4>\n\n        <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n          <DropdownSelect\n            label=\"Monthly Household Income\"\n            value={formData.monthlyIncome}\n            onChange={val => onChange('monthlyIncome', val)}\n            options={INCOME_RANGES}\n            placeholder=\"Select income range\"\n          />\n\n          <DropdownSelect\n            label=\"Primary Income Source\"\n            value={formData.incomeSource}\n            onChange={val => onChange('incomeSource', val)}\n            options={INCOME_SOURCES}\n            placeholder=\"Select income source\"\n          />\n        </div>\n      </div>\n\n      {/* Utilities */}\n      <div className=\"space-y-6\">\n        <h4 className=\"text-sm/6 font-medium text-zinc-950 dark:text-white\">Utilities Access</h4>\n\n        <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-3\">\n          <div className=\"flex items-center gap-3\">\n            <input\n              type=\"checkbox\"\n              id=\"hasElectricity\"\n              checked={formData.hasElectricity}\n              onChange={e => onChange('hasElectricity', e.target.checked)}\n              className=\"size-4 rounded border-neutral-300 bg-white text-blue-600 focus:ring-blue-500\"\n            />\n            <label htmlFor=\"hasElectricity\" className=\"text-sm text-zinc-950 dark:text-white\">\n              Has Electricity\n            </label>\n          </div>\n\n          <div className=\"flex items-center gap-3\">\n            <input\n              type=\"checkbox\"\n              id=\"hasWater\"\n              checked={formData.hasWater}\n              onChange={e => onChange('hasWater', e.target.checked)}\n              className=\"size-4 rounded border-neutral-300 bg-white text-blue-600 focus:ring-blue-500\"\n            />\n            <label htmlFor=\"hasWater\" className=\"text-sm text-zinc-950 dark:text-white\">\n              Has Water Supply\n            </label>\n          </div>\n\n          <div className=\"flex items-center gap-3\">\n            <input\n              type=\"checkbox\"\n              id=\"hasInternet\"\n              checked={formData.hasInternet}\n              onChange={e => onChange('hasInternet', e.target.checked)}\n              className=\"size-4 rounded border-neutral-300 bg-white text-blue-600 focus:ring-blue-500\"\n            />\n            <label htmlFor=\"hasInternet\" className=\"text-sm text-zinc-950 dark:text-white\">\n              Has Internet Access\n            </label>\n          </div>\n        </div>\n      </div>\n\n      {/* Dwelling Information */}\n      <div className=\"space-y-6\">\n        <h4 className=\"text-sm/6 font-medium text-zinc-950 dark:text-white\">\n          Dwelling Information\n        </h4>\n\n        <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n          <DropdownSelect\n            label=\"Dwelling Type\"\n            value={formData.dwellingType}\n            onChange={val => onChange('dwellingType', val)}\n            options={DWELLING_TYPES}\n            placeholder=\"Select dwelling type\"\n            errorMessage={errors.dwellingType}\n          />\n\n          <DropdownSelect\n            label=\"Dwelling Ownership\"\n            value={formData.dwellingOwnership}\n            onChange={val => onChange('dwellingOwnership', val)}\n            options={OWNERSHIP_TYPES}\n            placeholder=\"Select ownership type\"\n            errorMessage={errors.dwellingOwnership}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/templates/HouseholdFormWizard/HouseholdFormWizard.tsx",
          "lineCount": 148,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 991 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "HouseholdFormWizard",
          "line": 70,
          "message": "Function 'HouseholdFormWizard' has 412 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "HouseholdFormWizard",
          "line": 70,
          "complexity": 49,
          "message": "Function 'HouseholdFormWizard' has cyclomatic complexity of 49 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "HouseholdFormWizard",
          "line": 70,
          "complexity": 85,
          "message": "Function 'HouseholdFormWizard' has cognitive complexity of 85 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "BasicInformationStep",
          "line": 484,
          "message": "Function 'BasicInformationStep' has 84 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "LocationDetailsStep",
          "line": 570,
          "message": "Function 'LocationDetailsStep' has 162 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "HouseholdCompositionStep",
          "line": 734,
          "message": "Function 'HouseholdCompositionStep' has 107 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "EconomicInformationStep",
          "line": 843,
          "message": "Function 'EconomicInformationStep' has 148 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/templates/HouseholdRegistrationForm/HouseholdRegistrationForm.tsx",
      "lineCount": 476,
      "functions": [
        {
          "name": "HouseholdRegistrationForm",
          "startLine": 77,
          "endLine": 475,
          "code": "export default function HouseholdRegistrationForm({\n  onSuccess,\n  onCancel,\n}: HouseholdRegistrationFormProps) {\n  const {\n    register,\n    control,\n    handleSubmit,\n    watch,\n    setValue,\n    formState: { errors, isSubmitting },\n  } = useForm<HouseholdFormData>({\n    resolver: zodResolver(householdSchema),\n    defaultValues: {\n      residents: [\n        {\n          first_name: '',\n          middle_name: '',\n          last_name: '',\n          relationship_to_head: 'head',\n          birth_date: '',\n          sex: 'male',\n          civil_status: 'single',\n          is_pwd: false,\n          is_registered_voter: false,\n          is_indigenous: false,\n        },\n      ],\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'residents',\n  });\n\n  const [isPending, setIsPending] = useState(false);\n  const [householdNumber, setHouseholdNumber] = useState<string | null>(null);\n\n  const registerHousehold = async (\n    data: any,\n    options: { onSuccess?: (household: any) => void } = {}\n  ) => {\n    try {\n      setIsPending(true);\n\n      // Get the current session\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n\n      if (!session?.access_token) {\n        throw new Error('No valid session found');\n      }\n\n      const response = await fetch('/api/households', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${session.access_token}`,\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `HTTP ${response.status}`);\n      }\n\n      const result = await response.json();\n      setHouseholdNumber(result.household.household_number);\n      options.onSuccess?.(result);\n    } catch (error) {\n      console.error('Household registration error:', error);\n      throw error;\n    } finally {\n      setIsPending(false);\n    }\n  };\n\n  const onSubmit = (data: HouseholdFormData) => {\n    registerHousehold(\n      {\n        household: {\n          household_number: householdNumber || `TEMP-${Date.now()}`,\n          household_type: data.household_type,\n          monthly_income: data.monthly_income,\n          address: data.address,\n          barangay_code: data.barangay_code,\n          contact_number: data.contact_number,\n          email: data.email || undefined,\n        },\n        residents: data.residents,\n      },\n      {\n        onSuccess: household => {\n          onSuccess?.(household?.id || '');\n        },\n      }\n    );\n  };\n\n  const addResident = () => {\n    append({\n      first_name: '',\n      middle_name: '',\n      last_name: '',\n      relationship_to_head: 'child',\n      birth_date: '',\n      sex: 'male',\n      civil_status: 'single',\n      is_pwd: false,\n      is_registered_voter: false,\n      is_indigenous: false,\n    });\n  };\n\n  return (\n    <ErrorBoundary level=\"section\">\n      <div className=\"mx-auto max-w-4xl rounded-lg bg-white p-6 shadow-lg\">\n        <div className=\"mb-6\">\n          <h2 className=\"mb-2 text-2xl font-bold text-gray-900\">Household Registration</h2>\n          <p className=\"text-gray-600\">Register a new household and its members in the system</p>\n          {householdNumber && (\n            <div className=\"mt-3 rounded border border-blue-200 bg-blue-50 p-3\">\n              <p className=\"text-sm text-blue-700\">\n                <strong>Household Number:</strong> {householdNumber}\n              </p>\n            </div>\n          )}\n        </div>\n\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-8\">\n          {/* Household Information */}\n          <section>\n            <h3 className=\"mb-4 text-lg font-semibold text-gray-900\">Household Information</h3>\n\n            <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n              <div>\n                <label className=\"mb-1 block text-sm font-medium text-gray-700\">\n                  Household Type *\n                </label>\n                <select\n                  {...register('household_type')}\n                  className=\"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                >\n                  <option value=\"\">Select household type</option>\n                  {HOUSEHOLD_TYPES.map(type => (\n                    <option key={type.value} value={type.value}>\n                      {type.label}\n                    </option>\n                  ))}\n                </select>\n                {errors.household_type && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.household_type.message}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"mb-1 block text-sm font-medium text-gray-700\">\n                  Monthly Income (PHP)\n                </label>\n                <input\n                  type=\"number\"\n                  {...register('monthly_income', { valueAsNumber: true })}\n                  className=\"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"0\"\n                />\n              </div>\n\n              <div className=\"md:col-span-2\">\n                <label className=\"mb-1 block text-sm font-medium text-gray-700\">Address *</label>\n                <textarea\n                  {...register('address')}\n                  rows={3}\n                  className=\"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"House number, street, subdivision, landmark\"\n                />\n                {errors.address && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.address.message}</p>\n                )}\n              </div>\n\n              <div className=\"md:col-span-2\">\n                <label className=\"mb-1 block text-sm font-medium text-gray-700\">Barangay *</label>\n                <BarangaySelector\n                  value={watch('barangay_code') || ''}\n                  onChange={code => setValue('barangay_code', code)}\n                  error={errors.barangay_code?.message}\n                />\n              </div>\n\n              <div>\n                <label className=\"mb-1 block text-sm font-medium text-gray-700\">\n                  Contact Number\n                </label>\n                <input\n                  type=\"tel\"\n                  {...register('contact_number')}\n                  className=\"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"+63 9XX XXX XXXX\"\n                />\n              </div>\n\n              <div>\n                <label className=\"mb-1 block text-sm font-medium text-gray-700\">Email</label>\n                <input\n                  type=\"email\"\n                  {...register('email')}\n                  className=\"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"email@example.com\"\n                />\n              </div>\n            </div>\n          </section>\n\n          {/* Household Members */}\n          <section>\n            <div className=\"mb-4 flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">Household Members</h3>\n              <Button type=\"button\" onClick={addResident} variant=\"secondary\" size=\"sm\">\n                Add Member\n              </Button>\n            </div>\n\n            <div className=\"space-y-6\">\n              {fields.map((field, index) => (\n                <div key={field.id} className=\"rounded-lg border border-gray-200 p-4\">\n                  <div className=\"mb-3 flex items-center justify-between\">\n                    <h4 className=\"font-medium text-gray-900\">\n                      Member {index + 1}\n                      {index === 0 && (\n                        <span className=\"ml-2 text-sm text-blue-600\">(Head of Household)</span>\n                      )}\n                    </h4>\n                    {index > 0 && (\n                      <Button\n                        type=\"button\"\n                        onClick={() => remove(index)}\n                        variant=\"danger\"\n                        size=\"sm\"\n                      >\n                        Remove\n                      </Button>\n                    )}\n                  </div>\n\n                  <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n                    <div>\n                      <label className=\"mb-1 block text-sm font-medium text-gray-700\">\n                        First Name *\n                      </label>\n                      <input\n                        {...register(`residents.${index}.first_name`)}\n                        className=\"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      />\n                      {errors.residents?.[index]?.first_name && (\n                        <p className=\"mt-1 text-sm text-red-600\">\n                          {errors.residents[index]?.first_name?.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div>\n                      <label className=\"mb-1 block text-sm font-medium text-gray-700\">\n                        Middle Name\n                      </label>\n                      <input\n                        {...register(`residents.${index}.middle_name`)}\n                        className=\"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"mb-1 block text-sm font-medium text-gray-700\">\n                        Last Name *\n                      </label>\n                      <input\n                        {...register(`residents.${index}.last_name`)}\n                        className=\"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      />\n                      {errors.residents?.[index]?.last_name && (\n                        <p className=\"mt-1 text-sm text-red-600\">\n                          {errors.residents[index]?.last_name?.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div>\n                      <label className=\"mb-1 block text-sm font-medium text-gray-700\">\n                        Relationship *\n                      </label>\n                      <select\n                        {...register(`residents.${index}.relationship_to_head`)}\n                        className=\"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      >\n                        {RELATIONSHIPS.map(rel => (\n                          <option key={rel.value} value={rel.value}>\n                            {rel.label}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n\n                    <div>\n                      <label className=\"mb-1 block text-sm font-medium text-gray-700\">\n                        Birth Date *\n                      </label>\n                      <input\n                        type=\"date\"\n                        {...register(`residents.${index}.birth_date`)}\n                        className=\"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"mb-1 block text-sm font-medium text-gray-700\">Sex *</label>\n                      <select\n                        {...register(`residents.${index}.sex`)}\n                        className=\"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      >\n                        <option value=\"male\">Male</option>\n                        <option value=\"female\">Female</option>\n                      </select>\n                    </div>\n\n                    <div>\n                      <label className=\"mb-1 block text-sm font-medium text-gray-700\">\n                        Civil Status *\n                      </label>\n                      <select\n                        {...register(`residents.${index}.civil_status`)}\n                        className=\"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      >\n                        {CIVIL_STATUS.map(status => (\n                          <option key={status.value} value={status.value}>\n                            {status.label}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n\n                    <div className=\"flex items-center space-x-4\">\n                      <label className=\"flex items-center\">\n                        <input\n                          type=\"checkbox\"\n                          {...register(`residents.${index}.is_pwd`)}\n                          className=\"mr-2\"\n                        />\n                        PWD\n                      </label>\n                      <label className=\"flex items-center\">\n                        <input\n                          type=\"checkbox\"\n                          {...register(`residents.${index}.is_registered_voter`)}\n                          className=\"mr-2\"\n                        />\n                        Voter\n                      </label>\n                      <label className=\"flex items-center\">\n                        <input\n                          type=\"checkbox\"\n                          {...register(`residents.${index}.is_indigenous`)}\n                          className=\"mr-2\"\n                        />\n                        Indigenous\n                      </label>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </section>\n\n          {/* Form Actions */}\n          <div className=\"flex justify-end space-x-3 border-t pt-6\">\n            {onCancel && (\n              <Button\n                type=\"button\"\n                onClick={onCancel}\n                variant=\"secondary\"\n                disabled={isSubmitting || isPending}\n              >\n                Cancel\n              </Button>\n            )}\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting || isPending}\n              loading={isSubmitting || isPending}\n            >\n              Register Household\n            </Button>\n          </div>\n        </form>\n      </div>\n    </ErrorBoundary>\n  );\n}\n",
          "filePath": "src/components/templates/HouseholdRegistrationForm/HouseholdRegistrationForm.tsx",
          "lineCount": 399,
          "cyclomaticComplexity": 22,
          "cognitiveComplexity": 26
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 476 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "HouseholdRegistrationForm",
          "line": 77,
          "message": "Function 'HouseholdRegistrationForm' has 399 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "HouseholdRegistrationForm",
          "line": 77,
          "complexity": 22,
          "message": "Function 'HouseholdRegistrationForm' has cyclomatic complexity of 22 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "HouseholdRegistrationForm",
          "line": 77,
          "complexity": 26,
          "message": "Function 'HouseholdRegistrationForm' has cognitive complexity of 26 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/templates/MainLayout/MainLayout.stories.tsx",
      "lineCount": 533,
      "functions": [
        {
          "name": "MockHeader",
          "startLine": 5,
          "endLine": 6,
          "code": "const MockHeader = () => (\n  <header className=\"border-b shadow-sm bg-white\">\n",
          "filePath": "src/components/templates/MainLayout/MainLayout.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "BasicContent",
          "startLine": 59,
          "endLine": 60,
          "code": "const BasicContent = () => (\n  <div className=\"space-y-6\">\n",
          "filePath": "src/components/templates/MainLayout/MainLayout.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "RichContent",
          "startLine": 97,
          "endLine": 98,
          "code": "const RichContent = () => (\n  <div className=\"space-y-8\">\n",
          "filePath": "src/components/templates/MainLayout/MainLayout.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "FormContent",
          "startLine": 175,
          "endLine": 176,
          "code": "const FormContent = () => (\n  <div className=\"space-y-8\">\n",
          "filePath": "src/components/templates/MainLayout/MainLayout.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 533 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/templates/MainLayout/MainLayout.tsx",
      "lineCount": 30,
      "functions": [
        {
          "name": "MainLayout",
          "startLine": 14,
          "endLine": 29,
          "code": "export default function MainLayout({ children, title }: MainLayoutProps) {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n\n      <main className=\"mx-auto max-w-7xl px-4 py-6 sm:px-6 lg:px-8\">\n        {title && (\n          <div className=\"mb-8\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">{title}</h1>\n          </div>\n        )}\n        {children}\n      </main>\n    </div>\n  );\n}\n",
          "filePath": "src/components/templates/MainLayout/MainLayout.tsx",
          "lineCount": 16,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/templates/ResidentFormWizard/ResidentFormWizard.stories.tsx",
      "lineCount": 780,
      "functions": [
        {
          "name": "MockProviders",
          "startLine": 6,
          "endLine": 59,
          "code": "const MockProviders = ({ children }: { children: React.ReactNode }) => {\n  React.useEffect(() => {\n    // Mock useUserBarangay hook\n    const mockUserBarangay = {\n      barangayCode: '137404001',\n      address: {\n        region_code: '13',\n        region_name: 'National Capital Region (NCR)',\n        province_code: '1374',\n        province_name: 'Metro Manila',\n        city_municipality_code: '137404',\n        city_municipality_name: 'Quezon City',\n        city_municipality_type: 'City',\n        barangay_code: '137404001',\n        barangay_name: 'Bagong Pag-asa',\n      },\n      loading: false,\n      error: null,\n    };\n    \n    (window as any).useUserBarangay = () => mockUserBarangay;\n    (window as any).useCSRFToken = () => ({ getToken: () => 'mock-csrf-token' });\n    \n    // Mock Next.js router\n    (window as any).useRouter = () => ({\n      push: (path: string) => console.log('Navigate to:', path),\n      pathname: '/residents/create',\n    });\n    \n    // Mock Supabase\n    (window as any).supabase = {\n      from: () => ({\n        insert: () => ({\n          select: () => Promise.resolve({ \n            data: [{ id: 'mock-resident-id' }], \n            error: null \n          }),\n        }),\n        update: () => ({\n          eq: () => Promise.resolve({ error: null }),\n        }),\n      }),\n    };\n\n    // Mock validation functions\n    (window as any).validateResidentData = async () => ({ success: true });\n    (window as any).validatePhilSysFormat = () => true;\n    (window as any).hashPhilSysNumber = async (num: string) => `hash_${num}`;\n    (window as any).extractPhilSysLast4 = (num: string) => num.slice(-4);\n    (window as any).logSecurityOperation = () => {};\n  }, []);\n\n  return <>{children}</>;\n};\n",
          "filePath": "src/components/templates/ResidentFormWizard/ResidentFormWizard.stories.tsx",
          "lineCount": 54,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "handleSubmit",
          "startLine": 72,
          "endLine": 80,
          "code": "  const handleSubmit = async (data: ResidentFormData) => {\n    if (onSubmit) {\n      await onSubmit(data);\n    } else if (showSubmissionResult) {\n      setSubmittedData(data);\n      setSubmissionResult('Resident registered successfully!');\n      console.log('Resident Form Data:', data);\n    }\n  };\n",
          "filePath": "src/components/templates/ResidentFormWizard/ResidentFormWizard.stories.tsx",
          "lineCount": 9,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 5
        },
        {
          "name": "handleCancel",
          "startLine": 82,
          "endLine": 84,
          "code": "  const handleCancel = () => {\n    console.log('Form cancelled');\n  };\n",
          "filePath": "src/components/templates/ResidentFormWizard/ResidentFormWizard.stories.tsx",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 188,
          "endLine": 189,
          "code": "  render: () => <WizardWrapper />,\n};\n",
          "filePath": "src/components/templates/ResidentFormWizard/ResidentFormWizard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 193,
          "endLine": 200,
          "code": "  render: () => <WizardWrapper showSubmissionResult={true} />,\n  parameters: {\n    docs: {\n      description: {\n        story: 'Complete resident form wizard with submission handling. Fill out the form and submit to see the success state and data summary.',\n      },\n    },\n  },\n",
          "filePath": "src/components/templates/ResidentFormWizard/ResidentFormWizard.stories.tsx",
          "lineCount": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 205,
          "endLine": 206,
          "code": "  render: () => (\n    <div className=\"max-w-4xl mx-auto p-8\">\n",
          "filePath": "src/components/templates/ResidentFormWizard/ResidentFormWizard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 294,
          "endLine": 295,
          "code": "  render: () => (\n    <div className=\"max-w-4xl mx-auto p-8\">\n",
          "filePath": "src/components/templates/ResidentFormWizard/ResidentFormWizard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 383,
          "endLine": 384,
          "code": "  render: () => (\n    <div className=\"max-w-4xl mx-auto p-8\">\n",
          "filePath": "src/components/templates/ResidentFormWizard/ResidentFormWizard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 485,
          "endLine": 486,
          "code": "  render: () => (\n    <div className=\"max-w-4xl mx-auto p-8\">\n",
          "filePath": "src/components/templates/ResidentFormWizard/ResidentFormWizard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 577,
          "endLine": 578,
          "code": "  render: () => (\n    <div className=\"max-w-4xl mx-auto p-8\">\n",
          "filePath": "src/components/templates/ResidentFormWizard/ResidentFormWizard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 667,
          "endLine": 677,
          "code": "  render: () => <WizardWrapper />,\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile',\n    },\n    docs: {\n      description: {\n        story: 'Resident Form Wizard optimized for mobile devices with touch-friendly inputs and responsive layout.',\n      },\n    },\n  },\n",
          "filePath": "src/components/templates/ResidentFormWizard/ResidentFormWizard.stories.tsx",
          "lineCount": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 682,
          "endLine": 683,
          "code": "  render: () => (\n    <div className=\"max-w-4xl mx-auto p-8\">\n",
          "filePath": "src/components/templates/ResidentFormWizard/ResidentFormWizard.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 780 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "MockProviders",
          "line": 6,
          "message": "Function 'MockProviders' has 54 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/templates/ResidentFormWizard/ResidentFormWizard.tsx",
      "lineCount": 55,
      "functions": [
        {
          "name": "ResidentFormWizard",
          "startLine": 7,
          "endLine": 55,
          "code": "export function ResidentFormWizard({ onSubmit, onCancel, initialData }: ResidentFormWizardProps = {}) {\n  const {\n    formData,\n    errors,\n    currentStep,\n    steps,\n    isSubmitting,\n    handleInputChange,\n    handleNextStep,\n    handlePrevStep,\n    handleSubmit,\n    canProceedToNext,\n    canGoBack,\n  } = useResidentForm({ onSubmit, onCancel, initialData });\n\n  const CurrentStepComponent = steps[currentStep - 1].component;\n\n  return (\n    <div className=\"mx-auto max-w-4xl\">\n      <StepIndicator \n        steps={steps}\n        currentStep={currentStep}\n      />\n      \n      <div className=\"bg-surface rounded-lg border border-default shadow-sm\">\n        <div className=\"px-6 py-8\">\n          <CurrentStepComponent \n            formData={formData}\n            onChange={handleInputChange}\n            errors={errors}\n            onNext={handleNextStep}\n            onPrevious={handlePrevStep}\n          />\n        </div>\n      </div>\n      \n      <NavigationButtons \n        currentStep={currentStep}\n        totalSteps={steps.length}\n        canGoBack={canGoBack}\n        canProceed={canProceedToNext}\n        isSubmitting={isSubmitting}\n        onPrevious={handlePrevStep}\n        onNext={handleNextStep}\n        onSubmit={handleSubmit}\n      />\n    </div>\n  );\n}\n",
          "filePath": "src/components/templates/ResidentFormWizard/ResidentFormWizard.tsx",
          "lineCount": 49,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "ResidentFormWizard",
          "line": 7,
          "message": "Function 'ResidentFormWizard' has 49 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/templates/ResidentFormWizard/components/NavigationButtons.tsx",
      "lineCount": 116,
      "functions": [
        {
          "name": "onPrevious",
          "startLine": 9,
          "endLine": 10,
          "code": "  onPrevious: () => void;\n  onNext: () => void;\n",
          "filePath": "src/components/templates/ResidentFormWizard/components/NavigationButtons.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onSubmit",
          "startLine": 11,
          "endLine": 12,
          "code": "  onSubmit: () => void;\n}\n",
          "filePath": "src/components/templates/ResidentFormWizard/components/NavigationButtons.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "NavigationButtons",
          "startLine": 14,
          "endLine": 116,
          "code": "export function NavigationButtons({\n  currentStep,\n  totalSteps,\n  canGoBack,\n  canProceed,\n  isSubmitting,\n  onPrevious,\n  onNext,\n  onSubmit,\n}: NavigationButtonsProps) {\n  const isLastStep = currentStep === totalSteps;\n\n  return (\n    <div className=\"mt-8 flex justify-between\">\n      {/* Previous Button */}\n      <div>\n        {canGoBack && (\n          <Button\n            variant=\"outline\"\n            onClick={onPrevious}\n            disabled={isSubmitting}\n            className=\"inline-flex items-center gap-2\"\n          >\n            <svg\n              className=\"h-4 w-4\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              strokeWidth=\"1.5\"\n              stroke=\"currentColor\"\n            >\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15.75 19.5L8.25 12l7.5-7.5\" />\n            </svg>\n            Previous\n          </Button>\n        )}\n      </div>\n\n      {/* Next/Submit Button */}\n      <div>\n        {isLastStep ? (\n          <Button\n            variant=\"primary\"\n            onClick={onSubmit}\n            disabled={isSubmitting}\n            className=\"inline-flex items-center gap-2\"\n          >\n            {isSubmitting ? (\n              <>\n                <svg className=\"animate-spin h-4 w-4\" viewBox=\"0 0 24 24\">\n                  <circle\n                    className=\"opacity-25\"\n                    cx=\"12\"\n                    cy=\"12\"\n                    r=\"10\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"4\"\n                  />\n                  <path\n                    className=\"opacity-75\"\n                    fill=\"currentColor\"\n                    d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                  />\n                </svg>\n                Submitting...\n              </>\n            ) : (\n              <>\n                Submit Registration\n                <svg\n                  className=\"h-4 w-4\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  strokeWidth=\"1.5\"\n                  stroke=\"currentColor\"\n                >\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M4.5 12.75l6 6 9-13.5\" />\n                </svg>\n              </>\n            )}\n          </Button>\n        ) : (\n          <Button\n            variant=\"primary\"\n            onClick={onNext}\n            disabled={!canProceed || isSubmitting}\n            className=\"inline-flex items-center gap-2\"\n          >\n            Next\n            <svg\n              className=\"h-4 w-4\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              strokeWidth=\"1.5\"\n              stroke=\"currentColor\"\n            >\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M8.25 4.5l7.5 7.5-7.5 7.5\" />\n            </svg>\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/templates/ResidentFormWizard/components/NavigationButtons.tsx",
          "lineCount": 103,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "NavigationButtons",
          "line": 14,
          "message": "Function 'NavigationButtons' has 103 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/templates/ResidentFormWizard/components/StepIndicator.tsx",
      "lineCount": 86,
      "functions": [
        {
          "name": "StepIndicator",
          "startLine": 9,
          "endLine": 86,
          "code": "export function StepIndicator({ steps, currentStep }: StepIndicatorProps) {\n  return (\n    <div className=\"mb-8\">\n      <div className=\"flex items-center justify-between\">\n        {steps.map((step, index) => {\n          const stepNumber = index + 1;\n          const isActive = stepNumber === currentStep;\n          const isCompleted = stepNumber < currentStep;\n          const isLast = index === steps.length - 1;\n\n          return (\n            <React.Fragment key={step.id}>\n              <div className=\"flex flex-col items-center\">\n                {/* Step Circle */}\n                <div\n                  className={`\n                    flex h-10 w-10 items-center justify-center rounded-full border-2 text-sm font-medium\n                    ${\n                      isActive\n                        ? 'border-blue-600 bg-blue-600 text-white'\n                        : isCompleted\n                        ? 'border-green-600 bg-green-600 text-white'\n                        : 'border-gray-300 bg-white text-gray-500'\n                    }\n                  `}\n                >\n                  {isCompleted ? (\n                    <svg className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                      <path\n                        fillRule=\"evenodd\"\n                        d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                        clipRule=\"evenodd\"\n                      />\n                    </svg>\n                  ) : (\n                    stepNumber\n                  )}\n                </div>\n                \n                {/* Step Label */}\n                <div className=\"mt-2 text-center max-w-24\">\n                  <p\n                    className={`\n                      text-xs font-medium\n                      ${\n                        isActive\n                          ? 'text-blue-600'\n                          : isCompleted\n                          ? 'text-green-600'\n                          : 'text-gray-500'\n                      }\n                    `}\n                  >\n                    {step.title}\n                  </p>\n                </div>\n              </div>\n              \n              {/* Connector Line */}\n              {!isLast && (\n                <div\n                  className={`\n                    flex-1 h-0.5 mx-4 mt-[-20px]\n                    ${\n                      isCompleted || (isActive && stepNumber > 1)\n                        ? 'bg-green-600'\n                        : 'bg-gray-300'\n                    }\n                  `}\n                />\n              )}\n            </React.Fragment>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/templates/ResidentFormWizard/components/StepIndicator.tsx",
          "lineCount": 78,
          "cyclomaticComplexity": 9,
          "cognitiveComplexity": 2
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "StepIndicator",
          "line": 9,
          "message": "Function 'StepIndicator' has 78 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/templates/ResidentFormWizard/hooks/useResidentForm.ts",
      "lineCount": 369,
      "functions": [
        {
          "name": "useResidentForm",
          "startLine": 88,
          "endLine": 369,
          "code": "export function useResidentForm({ \n  onSubmit, \n  onCancel, \n  initialData \n}: ResidentFormWizardProps = {}): UseResidentFormReturn {\n  const router = useRouter();\n  const { userBarangayCode, loading: barangayLoading } = useUserBarangay();\n  \n  // Form state\n  const [formData, setFormData] = useState<ResidentFormData>(() => \n    getInitialFormData(initialData)\n  );\n  const [errors, setErrors] = useState<ValidationErrors>({});\n  const [currentStep, setCurrentStep] = useState(1);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Auto-populate barangay code from user profile\n  useEffect(() => {\n    if (userBarangayCode && !formData.barangayCode) {\n      setFormData(prev => ({ ...prev, barangayCode: userBarangayCode }));\n    }\n  }, [userBarangayCode, formData.barangayCode]);\n\n  // Auto-populate complete geographic hierarchy from user profile\n  useEffect(() => {\n    const autoPopulateGeographicData = async () => {\n      // Skip if already populated or no auth session\n      if (formData.regionCode || formData.provinceCode || formData.cityMunicipalityCode) return;\n      \n      try {\n        const { data: { session } } = await supabase.auth.getSession();\n        if (!session?.user) return;\n\n        console.log('🚀 Pre-loading geographic data for faster form experience...');\n\n        // Use dedicated API endpoint for secure auto-populate\n        const response = await fetch('/api/user/geographic-location', {\n          headers: {\n            'Authorization': `Bearer ${session.access_token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n\n        if (!response.ok) {\n          console.log('⚠️ Could not pre-load geographic data, user will select manually');\n          return;\n        }\n\n        const hierarchy = await response.json();\n        console.log('✅ Geographic data pre-loaded:', hierarchy);\n\n        // Update form data with complete hierarchy\n        setFormData(prev => ({\n          ...prev,\n          regionCode: hierarchy.region?.code || '',\n          provinceCode: hierarchy.province?.code || '',\n          cityMunicipalityCode: hierarchy.city?.code || '',\n          barangayCode: hierarchy.barangay?.code || prev.barangayCode // Don't override if already set\n        }));\n\n        console.log('🎉 Form pre-populated with user geographic location');\n      } catch (error) {\n        console.error('❌ Error pre-loading geographic data:', error);\n        // Silently fail - user can still select manually\n      }\n    };\n\n    // Only run once when component mounts\n    autoPopulateGeographicData();\n  }, []); // Empty dependency array - only run once\n\n  // Step configuration\n  const steps: FormStep[] = useMemo(() => [\n    {\n      id: 1,\n      title: \"Personal Information\",\n      description: \"Basic personal details and family information\",\n      component: BasicInfoStep,\n      validation: validateStep1,\n    },\n    {\n      id: 2,\n      title: \"Contact & Address\",\n      description: \"Contact information and geographic location\",\n      component: ContactAddressStep,\n      validation: validateStep2,\n    },\n    {\n      id: 3,\n      title: \"Education & Employment\",\n      description: \"Educational background and occupation details\",\n      component: EducationEmploymentStep,\n      validation: validateStep3,\n    },\n    {\n      id: 4,\n      title: \"Additional Details\",\n      description: \"Physical characteristics, voting info, and documentation\",\n      component: AdditionalDetailsStep,\n      validation: validateStep4,\n    },\n    {\n      id: 5,\n      title: \"Review & Submit\",\n      description: \"Review all information and submit registration\",\n      component: ReviewStep,\n      validation: validateStep5,\n    },\n  ], []);\n\n  // Handle input changes\n  const handleInputChange = useCallback((field: keyof ResidentFormData, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    \n    // Clear error for this field when user starts typing\n    if (errors[field]) {\n      setErrors(prev => {\n        const newErrors = { ...prev };\n        delete newErrors[field];\n        return newErrors;\n      });\n    }\n  }, [errors]);\n\n  // Validate current step\n  const validateStep = useCallback((step: number): boolean => {\n    const currentStepConfig = steps[step - 1];\n    if (!currentStepConfig) return true;\n\n    const stepErrors = currentStepConfig.validation(formData);\n    setErrors(stepErrors);\n    \n    return Object.keys(stepErrors).length === 0;\n  }, [steps, formData]);\n\n  // Validate entire form\n  const validateForm = useCallback((): boolean => {\n    let allErrors: ValidationErrors = {};\n    \n    steps.forEach(step => {\n      const stepErrors = step.validation(formData);\n      allErrors = { ...allErrors, ...stepErrors };\n    });\n    \n    setErrors(allErrors);\n    return Object.keys(allErrors).length === 0;\n  }, [steps, formData]);\n\n  // Navigation handlers\n  const handleNextStep = useCallback(() => {\n    if (validateStep(currentStep)) {\n      setCurrentStep(prev => Math.min(prev + 1, steps.length));\n    }\n  }, [currentStep, validateStep, steps.length]);\n\n  const handlePrevStep = useCallback(() => {\n    setCurrentStep(prev => Math.max(prev - 1, 1));\n    setErrors({}); // Clear errors when going back\n  }, []);\n\n  // Form submission\n  const handleSubmit = useCallback(async () => {\n    if (!validateForm()) {\n      // If validation fails, go to first step with errors\n      const firstStepWithError = steps.findIndex(step => {\n        const stepErrors = step.validation(formData);\n        return Object.keys(stepErrors).length > 0;\n      });\n      if (firstStepWithError !== -1) {\n        setCurrentStep(firstStepWithError + 1);\n      }\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      if (onSubmit) {\n        await onSubmit(formData);\n      } else {\n        // Default submission logic\n        await submitToAPI(formData);\n        router.push('/residents?success=created');\n      }\n    } catch (error) {\n      console.error('Form submission error:', error);\n      // Handle error (could set a global error state)\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [formData, validateForm, steps, onSubmit, router]);\n\n  // Default API submission\n  const submitToAPI = async (data: ResidentFormData) => {\n    const token = await supabase.auth.getSession().then(({ data: { session } }) => \n      session?.access_token\n    );\n\n    if (!token) throw new Error('No authentication token');\n\n    const response = await fetch('/api/residents', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify({\n        resident_data: {\n          firstName: data.firstName,\n          middleName: data.middleName,\n          lastName: data.lastName,\n          extensionName: data.extensionName,\n          birthdate: data.birthdate,\n          sex: data.sex,\n          civilStatus: data.civilStatus,\n          citizenship: data.citizenship,\n          email: data.email,\n          mobileNumber: data.mobileNumber,\n          telephoneNumber: data.telephoneNumber,\n          motherMaidenFirstName: data.motherMaidenFirstName,\n          motherMaidenMiddleName: data.motherMaidenMiddleName,\n          motherMaidenLastName: data.motherMaidenLastName,\n          educationAttainment: data.educationAttainment,\n          isGraduate: data.isGraduate,\n          employmentStatus: data.employmentStatus,\n          psocCode: data.psocCode,\n          psocLevel: data.psocLevel,\n          occupationTitle: data.occupationTitle,\n          workplace: data.workplace,\n          bloodType: data.bloodType,\n          height: data.height,\n          weight: data.weight,\n          ethnicity: data.ethnicity,\n          religion: data.religion,\n          religionOthersSpecify: data.religionOthersSpecify,\n          isVoter: data.isVoter,\n          isResidentVoter: data.isResidentVoter,\n          lastVotedDate: data.lastVotedDate,\n          philsysCardNumber: data.philsysCardNumber,\n          barangayCode: data.barangayCode,\n          cityMunicipalityCode: data.cityMunicipalityCode,\n          provinceCode: data.provinceCode,\n          regionCode: data.regionCode,\n          householdCode: data.householdCode,\n        },\n      }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to create resident');\n    }\n\n    return response.json();\n  };\n\n  // Computed properties\n  const canProceedToNext = currentStep < steps.length;\n  const canGoBack = currentStep > 1;\n\n  return {\n    // State\n    formData,\n    errors,\n    currentStep,\n    isSubmitting,\n    \n    // Actions\n    handleInputChange,\n    handleNextStep,\n    handlePrevStep,\n    handleSubmit,\n    \n    // Validation\n    validateStep,\n    validateForm,\n    \n    // Utilities\n    steps,\n    canProceedToNext,\n    canGoBack,\n  };\n}\n",
          "filePath": "src/components/templates/ResidentFormWizard/hooks/useResidentForm.ts",
          "lineCount": 282,
          "cyclomaticComplexity": 24,
          "cognitiveComplexity": 33
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 369 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "useResidentForm",
          "line": 88,
          "message": "Function 'useResidentForm' has 282 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "useResidentForm",
          "line": 88,
          "complexity": 24,
          "message": "Function 'useResidentForm' has cyclomatic complexity of 24 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "useResidentForm",
          "line": 88,
          "complexity": 33,
          "message": "Function 'useResidentForm' has cognitive complexity of 33 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/components/templates/ResidentFormWizard/steps/AdditionalDetailsStep.tsx",
      "lineCount": 170,
      "functions": [
        {
          "name": "AdditionalDetailsStep",
          "startLine": 5,
          "endLine": 170,
          "code": "export function AdditionalDetailsStep({ formData, onChange, errors }: StepComponentProps) {\n  // Add empty option for dropdowns\n  const bloodTypeOptionsWithEmpty = [\n    { value: '', label: 'Select blood type' },\n    ...BLOOD_TYPE_OPTIONS\n  ];\n\n  const ethnicityOptionsWithEmpty = [\n    { value: '', label: 'Select ethnicity' },\n    ...ETHNICITY_OPTIONS\n  ];\n\n  const religionOptionsWithEmpty = [\n    { value: '', label: 'Select religion' },\n    ...RELIGION_OPTIONS\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"text-base/7 font-semibold text-primary\">Additional Details</h3>\n        <p className=\"mt-1 text-sm/6 text-secondary\">\n          Provide additional identification and personal information.\n        </p>\n      </div>\n      \n      {/* Physical Characteristics */}\n      <div className=\"space-y-4\">\n        <h4 className=\"text-sm font-medium text-primary\">Physical Characteristics</h4>\n        <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-3\">\n          <SelectField \n            label=\"Blood Type\"\n            value={formData.bloodType}\n            onChange={(value) => onChange('bloodType', value)}\n            options={bloodTypeOptionsWithEmpty}\n            error={errors.bloodType}\n          />\n          <InputField \n            label=\"Height (cm)\"\n            type=\"number\"\n            value={formData.height}\n            onChange={(e) => onChange('height', e.target.value)}\n            error={errors.height}\n            placeholder=\"170\"\n          />\n          <InputField \n            label=\"Weight (kg)\"\n            type=\"number\"\n            value={formData.weight}\n            onChange={(e) => onChange('weight', e.target.value)}\n            error={errors.weight}\n            placeholder=\"65\"\n          />\n        </div>\n        <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n          <SelectField \n            label=\"Ethnicity\"\n            value={formData.ethnicity}\n            onChange={(value) => onChange('ethnicity', value)}\n            options={ethnicityOptionsWithEmpty}\n            error={errors.ethnicity}\n          />\n          <SelectField \n            label=\"Religion\"\n            value={formData.religion}\n            onChange={(value) => onChange('religion', value)}\n            options={religionOptionsWithEmpty}\n            error={errors.religion}\n          />\n        </div>\n        {formData.religion === 'others' && (\n          <InputField \n            label=\"Please specify religion\"\n            value={formData.religionOthersSpecify}\n            onChange={(e) => onChange('religionOthersSpecify', e.target.value)}\n            error={errors.religionOthersSpecify}\n            placeholder=\"Specify other religion\"\n          />\n        )}\n      </div>\n\n      {/* Voting Information */}\n      <div className=\"space-y-4\">\n        <h4 className=\"text-sm font-medium text-primary\">Voting Information</h4>\n        <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n          <SelectField \n            label=\"Registered Voter?\"\n            value={formData.isVoter === true ? 'yes' : formData.isVoter === false ? 'no' : ''}\n            onChange={(value) => \n              onChange('isVoter', value === 'yes' ? true : value === 'no' ? false : null)\n            }\n            options={[\n              { value: '', label: 'Not specified' },\n              { value: 'yes', label: 'Yes' },\n              { value: 'no', label: 'No' }\n            ]}\n            error={errors.isVoter}\n          />\n          <SelectField \n            label=\"Resident Voter?\"\n            value={formData.isResidentVoter === true ? 'yes' : formData.isResidentVoter === false ? 'no' : ''}\n            onChange={(value) => \n              onChange('isResidentVoter', value === 'yes' ? true : value === 'no' ? false : null)\n            }\n            options={[\n              { value: '', label: 'Not specified' },\n              { value: 'yes', label: 'Yes' },\n              { value: 'no', label: 'No' }\n            ]}\n            error={errors.isResidentVoter}\n          />\n        </div>\n        {(formData.isVoter === true || formData.isResidentVoter === true) && (\n          <InputField \n            label=\"Last Voted Date\"\n            type=\"date\"\n            value={formData.lastVotedDate}\n            onChange={(e) => onChange('lastVotedDate', e.target.value)}\n            error={errors.lastVotedDate}\n          />\n        )}\n      </div>\n\n      {/* Documentation */}\n      <div className=\"space-y-4\">\n        <h4 className=\"text-sm font-medium text-primary\">Documentation</h4>\n        <InputField \n          label=\"PhilSys Card Number\"\n          value={formData.philsysCardNumber}\n          onChange={(e) => onChange('philsysCardNumber', e.target.value)}\n          error={errors.philsysCardNumber}\n          placeholder=\"XXXX-XXXX-XXXX\"\n          help=\"Enter PhilSys (National ID) card number if available\"\n        />\n      </div>\n\n      {/* Family Information */}\n      <div className=\"space-y-4\">\n        <h4 className=\"text-sm font-medium text-primary\">Mother's Maiden Name</h4>\n        <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-3\">\n          <InputField \n            label=\"First Name\"\n            value={formData.motherMaidenFirstName}\n            onChange={(e) => onChange('motherMaidenFirstName', e.target.value)}\n            error={errors.motherMaidenFirstName}\n            placeholder=\"Mother's maiden first name\"\n          />\n          <InputField \n            label=\"Middle Name\"\n            value={formData.motherMaidenMiddleName}\n            onChange={(e) => onChange('motherMaidenMiddleName', e.target.value)}\n            error={errors.motherMaidenMiddleName}\n            placeholder=\"Mother's maiden middle name\"\n          />\n          <InputField \n            label=\"Last Name\"\n            value={formData.motherMaidenLastName}\n            onChange={(e) => onChange('motherMaidenLastName', e.target.value)}\n            error={errors.motherMaidenLastName}\n            placeholder=\"Mother's maiden last name\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/templates/ResidentFormWizard/steps/AdditionalDetailsStep.tsx",
          "lineCount": 166,
          "cyclomaticComplexity": 8,
          "cognitiveComplexity": 6
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "AdditionalDetailsStep",
          "line": 5,
          "message": "Function 'AdditionalDetailsStep' has 166 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/templates/ResidentFormWizard/steps/BasicInfoStep.tsx",
      "lineCount": 41,
      "functions": [
        {
          "name": "BasicInfoStep",
          "startLine": 5,
          "endLine": 41,
          "code": "export function BasicInfoStep({ formData, onChange, errors }: StepComponentProps) {\n  // Map form data to PersonalInformation component props\n  const personalInfoValue: PersonalInformationData = {\n    firstName: formData.firstName,\n    middleName: formData.middleName,\n    lastName: formData.lastName,\n    extensionName: formData.extensionName,\n    birthdate: formData.birthdate,\n    sex: formData.sex,\n    civilStatus: formData.civilStatus,\n    citizenship: formData.citizenship,\n  };\n\n  // Handle changes from PersonalInformation component\n  const handlePersonalInfoChange = (value: PersonalInformationData) => {\n    Object.entries(value).forEach(([field, fieldValue]) => {\n      onChange(field as keyof typeof value, fieldValue);\n    });\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"text-base/7 font-semibold text-primary\">Personal Information</h3>\n        <p className=\"mt-1 text-sm/6 text-secondary\">\n          Enter the resident's basic personal details and identification information.\n        </p>\n      </div>\n      \n      <PersonalInformation \n        value={personalInfoValue}\n        onChange={handlePersonalInfoChange}\n        errors={errors}\n      />\n    </div>\n  );\n}\n",
          "filePath": "src/components/templates/ResidentFormWizard/steps/BasicInfoStep.tsx",
          "lineCount": 37,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "BasicInfoStep",
          "line": 5,
          "message": "Function 'BasicInfoStep' has 37 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/templates/ResidentFormWizard/steps/ContactAddressStep.tsx",
      "lineCount": 124,
      "functions": [
        {
          "name": "ContactAddressStep",
          "startLine": 8,
          "endLine": 124,
          "code": "export function ContactAddressStep({ formData, onChange, errors }: StepComponentProps) {\n  // Map form data to GeographicLocationStep component props\n  const geographicData = {\n    regionCode: formData.regionCode,\n    provinceCode: formData.provinceCode,\n    cityMunicipalityCode: formData.cityMunicipalityCode,\n    barangayCode: formData.barangayCode,\n  };\n\n  // Handle geographic selection changes\n  const handleGeographicChange = (data: any) => {\n    if (data.regionCode !== undefined) onChange('regionCode', data.regionCode);\n    if (data.provinceCode !== undefined) onChange('provinceCode', data.provinceCode);\n    if (data.cityMunicipalityCode !== undefined) onChange('cityMunicipalityCode', data.cityMunicipalityCode);\n    if (data.barangayCode !== undefined) onChange('barangayCode', data.barangayCode);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"text-base/7 font-semibold text-primary\">Contact & Address Information</h3>\n        <p className=\"mt-1 text-sm/6 text-secondary\">\n          Provide contact details and geographic location information.\n        </p>\n      </div>\n      \n      {/* Contact Information */}\n      <div className=\"space-y-4\">\n        <h4 className=\"text-sm font-medium text-primary\">Contact Information</h4>\n        <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n          <InputField \n            label=\"Mobile Number\"\n            value={formData.mobileNumber}\n            onChange={(e) => onChange('mobileNumber', e.target.value)}\n            error={errors.mobileNumber}\n            placeholder=\"+639XXXXXXXXX\"\n          />\n          <InputField \n            label=\"Telephone Number\"\n            value={formData.telephoneNumber}\n            onChange={(e) => onChange('telephoneNumber', e.target.value)}\n            error={errors.telephoneNumber}\n            placeholder=\"(02) XXXX-XXXX\"\n          />\n          <div className=\"sm:col-span-2\">\n            <InputField \n              label=\"Email Address\"\n              type=\"email\"\n              value={formData.email}\n              onChange={(e) => onChange('email', e.target.value)}\n              error={errors.email}\n              placeholder=\"example@domain.com\"\n            />\n          </div>\n        </div>\n      </div>\n      \n      {/* Geographic Selection */}\n      <div className=\"space-y-4\">\n        <h4 className=\"text-sm font-medium text-primary\">Geographic Location</h4>\n        <GeographicLocationStep \n          formData={geographicData}\n          updateFormData={handleGeographicChange}\n          errors={errors}\n          required={true}\n        />\n      </div>\n\n      {/* Address Details */}\n      <div className=\"space-y-4\">\n        <h4 className=\"text-sm font-medium text-primary\">Address Details</h4>\n        <p className=\"text-sm text-gray-600\">\n          Select or create the street and subdivision for detailed address information.\n        </p>\n        \n        <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n          <SubdivisionSelector\n            value={formData.subdivisionId}\n            onSelect={(subdivisionId) => onChange('subdivisionId', subdivisionId || '')}\n            error={errors.subdivisionId}\n            placeholder=\"Select subdivision or create new\"\n          />\n          \n          <StreetSelector\n            value={formData.streetId}\n            onSelect={(streetId) => onChange('streetId', streetId || '')}\n            error={errors.streetId}\n            subdivisionId={formData.subdivisionId}\n            placeholder=\"Select street or create new\"\n          />\n          \n          <InputField \n            label=\"ZIP Code\"\n            value={formData.zipCode}\n            onChange={(e) => onChange('zipCode', e.target.value)}\n            error={errors.zipCode}\n            placeholder=\"XXXX\"\n          />\n        </div>\n      </div>\n\n      {/* Household Assignment */}\n      <div className=\"space-y-4\">\n        <h4 className=\"text-sm font-medium text-primary\">Household Assignment</h4>\n        <p className=\"text-sm text-gray-600\">\n          Select an existing household or create a new one for this resident.\n        </p>\n        <HouseholdSelector\n          value={formData.householdCode || ''}\n          onSelect={(householdCode) => onChange('householdCode', householdCode || '')}\n          error={errors.householdCode}\n          placeholder=\"Search households by head of family or address\"\n        />\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/templates/ResidentFormWizard/steps/ContactAddressStep.tsx",
          "lineCount": 117,
          "cyclomaticComplexity": 9,
          "cognitiveComplexity": 8
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "ContactAddressStep",
          "line": 8,
          "message": "Function 'ContactAddressStep' has 117 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/templates/ResidentFormWizard/steps/EducationEmploymentStep.tsx",
      "lineCount": 79,
      "functions": [
        {
          "name": "EducationEmploymentStep",
          "startLine": 6,
          "endLine": 79,
          "code": "export function EducationEmploymentStep({ formData, onChange, errors }: StepComponentProps) {\n  // Map form data to EducationEmployment component props\n  const educationEmploymentValue: EducationEmploymentData = {\n    educationAttainment: formData.educationAttainment,\n    isGraduate: formData.isGraduate,\n    psocCode: formData.psocCode,\n    psocLevel: String(formData.psocLevel || ''),\n    positionTitleId: '', // Not used in current form\n    occupationDescription: '', // Not used in current form\n    employmentStatus: formData.employmentStatus,\n    workplace: formData.workplace,\n  };\n\n  // Handle changes from EducationEmployment component\n  const handleEducationEmploymentChange = (value: EducationEmploymentData) => {\n    onChange('educationAttainment', value.educationAttainment);\n    onChange('isGraduate', value.isGraduate);\n    onChange('employmentStatus', value.employmentStatus);\n    onChange('workplace', value.workplace);\n  };\n\n  // Handle PSOC selection\n  const handlePSOCSelect = (option: any) => {\n    if (option) {\n      onChange('psocCode', option.occupation_code);\n      onChange('occupationTitle', option.occupation_title);\n      onChange('psocLevel', option.hierarchy_level);\n    } else {\n      onChange('psocCode', '');\n      onChange('occupationTitle', '');\n      onChange('psocLevel', null);\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"text-base/7 font-semibold text-primary\">Education & Employment</h3>\n        <p className=\"mt-1 text-sm/6 text-secondary\">\n          Provide education background and employment information.\n        </p>\n      </div>\n      \n      <EducationEmployment \n        value={educationEmploymentValue}\n        onChange={handleEducationEmploymentChange}\n        errors={errors}\n      />\n      \n      <div className=\"space-y-4\">\n        <h4 className=\"text-sm font-medium text-primary\">Occupation Details</h4>\n        <PSOCSelector \n          value={formData.psocCode}\n          onSelect={handlePSOCSelect}\n          placeholder=\"Search for occupation...\"\n          error={errors.psocCode}\n        />\n        \n        {formData.occupationTitle && (\n          <div className=\"mt-2 p-3 bg-gray-50 rounded-md border\">\n            <p className=\"text-sm text-gray-700\">\n              <span className=\"font-medium\">Selected Occupation:</span> {formData.occupationTitle}\n            </p>\n            {formData.psocCode && (\n              <p className=\"text-xs text-gray-500 mt-1\">\n                Code: {formData.psocCode} | Level: {formData.psocLevel}\n              </p>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/templates/ResidentFormWizard/steps/EducationEmploymentStep.tsx",
          "lineCount": 74,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 5
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "EducationEmploymentStep",
          "line": 6,
          "message": "Function 'EducationEmploymentStep' has 74 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/templates/ResidentFormWizard/steps/ReviewStep.tsx",
      "lineCount": 180,
      "functions": [
        {
          "name": "ReviewSection",
          "startLine": 8,
          "endLine": 30,
          "code": "function ReviewSection({ title, data }: ReviewSectionProps) {\n  const validData = Object.entries(data).filter(([_, value]) => value && value.trim() !== '');\n  \n  if (validData.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"space-y-3\">\n      <h5 className=\"text-sm font-medium text-primary border-b border-gray-200 pb-1\">\n        {title}\n      </h5>\n      <div className=\"grid grid-cols-1 gap-2 sm:grid-cols-2\">\n        {validData.map(([label, value]) => (\n          <div key={label} className=\"flex justify-between py-1\">\n            <span className=\"text-sm text-secondary font-medium\">{label}:</span>\n            <span className=\"text-sm text-primary\">{value}</span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/templates/ResidentFormWizard/steps/ReviewStep.tsx",
          "lineCount": 23,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3
        },
        {
          "name": "ReviewStep",
          "startLine": 32,
          "endLine": 180,
          "code": "export function ReviewStep({ formData }: StepComponentProps) {\n  const formatDate = (dateString: string) => {\n    if (!dateString) return '';\n    try {\n      return new Date(dateString).toLocaleDateString();\n    } catch {\n      return dateString;\n    }\n  };\n\n  const formatBoolean = (value: boolean | null) => {\n    if (value === null || value === undefined) return 'Not specified';\n    return value ? 'Yes' : 'No';\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"text-base/7 font-semibold text-primary\">Review & Submit</h3>\n        <p className=\"mt-1 text-sm/6 text-secondary\">\n          Please review all information carefully before submitting the resident registration.\n        </p>\n      </div>\n      \n      <div className=\"bg-background-muted rounded-lg border border-default p-6\">\n        <div className=\"space-y-6\">\n          {/* Personal Information Summary */}\n          <ReviewSection \n            title=\"Personal Information\"\n            data={{\n              'Full Name': [formData.firstName, formData.middleName, formData.lastName, formData.extensionName]\n                .filter(Boolean).join(' '),\n              'Birth Date': formatDate(formData.birthdate),\n              'Sex': formData.sex ? formData.sex.charAt(0).toUpperCase() + formData.sex.slice(1) : '',\n              'Civil Status': formData.civilStatus,\n              'Citizenship': formData.citizenship,\n            }}\n          />\n          \n          {/* Contact Information Summary */}\n          <ReviewSection \n            title=\"Contact Information\"\n            data={{\n              'Mobile Number': formData.mobileNumber,\n              'Telephone Number': formData.telephoneNumber,\n              'Email': formData.email,\n            }}\n          />\n\n          {/* Education & Employment Summary */}\n          <ReviewSection \n            title=\"Education & Employment\"\n            data={{\n              'Education Level': formData.educationAttainment,\n              'Graduate Status': formatBoolean(formData.isGraduate),\n              'Employment Status': formData.employmentStatus,\n              'Occupation': formData.occupationTitle,\n              'Workplace': formData.workplace,\n            }}\n          />\n\n          {/* Physical Characteristics Summary */}\n          <ReviewSection \n            title=\"Physical Characteristics\"\n            data={{\n              'Blood Type': formData.bloodType,\n              'Height': formData.height ? `${formData.height} cm` : '',\n              'Weight': formData.weight ? `${formData.weight} kg` : '',\n              'Ethnicity': formData.ethnicity,\n              'Religion': formData.religion === 'other' && formData.religionOthersSpecify \n                ? formData.religionOthersSpecify \n                : formData.religion,\n            }}\n          />\n\n          {/* Family Information Summary */}\n          <ReviewSection \n            title=\"Family Information\"\n            data={{\n              'Mother\\'s Maiden Name': [\n                formData.motherMaidenFirstName,\n                formData.motherMaidenMiddleName, \n                formData.motherMaidenLastName\n              ].filter(Boolean).join(' '),\n            }}\n          />\n\n          {/* Voting Information Summary */}\n          <ReviewSection \n            title=\"Voting Information\"\n            data={{\n              'Registered Voter': formatBoolean(formData.isVoter),\n              'Resident Voter': formatBoolean(formData.isResidentVoter),\n              'Last Voted': formatDate(formData.lastVotedDate),\n            }}\n          />\n\n          {/* Documentation Summary */}\n          <ReviewSection \n            title=\"Documentation\"\n            data={{\n              'PhilSys Card Number': formData.philsysCardNumber,\n            }}\n          />\n\n          {/* Address Summary */}\n          <ReviewSection \n            title=\"Address Information\"\n            data={{\n              'Street/Building': formData.streetId,\n              'Subdivision': formData.subdivisionId,\n              'ZIP Code': formData.zipCode,\n              'Barangay Code': formData.barangayCode,\n            }}\n          />\n\n          {/* Household Information */}\n          <ReviewSection \n            title=\"Household Assignment\"\n            data={{\n              'Household Code': formData.householdCode || 'Will be assigned automatically',\n            }}\n          />\n        </div>\n      </div>\n\n      <div className=\"rounded-md bg-blue-50 border border-blue-200 p-4\">\n        <div className=\"flex\">\n          <div className=\"flex-shrink-0\">\n            <svg className=\"h-5 w-5 text-blue-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n          <div className=\"ml-3\">\n            <h3 className=\"text-sm font-medium text-blue-800\">\n              Ready to Submit\n            </h3>\n            <div className=\"mt-2 text-sm text-blue-700\">\n              <p>\n                Once submitted, this resident will be registered in the system. \n                Make sure all information is correct as some fields cannot be easily modified later.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
          "filePath": "src/components/templates/ResidentFormWizard/steps/ReviewStep.tsx",
          "lineCount": 149,
          "cyclomaticComplexity": 11,
          "cognitiveComplexity": 9
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "ReviewStep",
          "line": 32,
          "message": "Function 'ReviewStep' has 149 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "ReviewStep",
          "line": 32,
          "complexity": 11,
          "message": "Function 'ReviewStep' has cyclomatic complexity of 11 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        }
      ]
    },
    {
      "filePath": "src/components/templates/ResidentFormWizard/types/index.ts",
      "lineCount": 129,
      "functions": [
        {
          "name": "onChange",
          "startLine": 88,
          "endLine": 89,
          "code": "  onChange: (field: keyof ResidentFormData, value: any) => void;\n  errors: ValidationErrors;\n",
          "filePath": "src/components/templates/ResidentFormWizard/types/index.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "onNext",
          "startLine": 90,
          "endLine": 91,
          "code": "  onNext: () => void;\n  onPrevious: () => void;\n",
          "filePath": "src/components/templates/ResidentFormWizard/types/index.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "validation",
          "startLine": 99,
          "endLine": 100,
          "code": "  validation: (data: ResidentFormData) => ValidationErrors;\n}\n",
          "filePath": "src/components/templates/ResidentFormWizard/types/index.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "handleInputChange",
          "startLine": 116,
          "endLine": 117,
          "code": "  handleInputChange: (field: keyof ResidentFormData, value: any) => void;\n  handleNextStep: () => void;\n",
          "filePath": "src/components/templates/ResidentFormWizard/types/index.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "handlePrevStep",
          "startLine": 118,
          "endLine": 119,
          "code": "  handlePrevStep: () => void;\n  handleSubmit: () => Promise<void>;\n",
          "filePath": "src/components/templates/ResidentFormWizard/types/index.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "validateStep",
          "startLine": 122,
          "endLine": 123,
          "code": "  validateStep: (step: number) => boolean;\n  validateForm: () => boolean;\n",
          "filePath": "src/components/templates/ResidentFormWizard/types/index.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/components/tokens/Colors/Colors.stories.tsx",
      "lineCount": 965,
      "functions": [
        {
          "name": "handleCopy",
          "startLine": 17,
          "endLine": 23,
          "code": "  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(value);\n    } catch (err) {\n      console.error('Failed to copy color:', err);\n    }\n  };\n",
          "filePath": "src/components/tokens/Colors/Colors.stories.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2
        },
        {
          "name": "render",
          "startLine": 158,
          "endLine": 159,
          "code": "  render: () => (\n    <div className=\"mx-auto max-w-6xl p-8\">\n",
          "filePath": "src/components/tokens/Colors/Colors.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 221,
          "endLine": 222,
          "code": "  render: () => (\n    <div className=\"mx-auto max-w-6xl p-8\">\n",
          "filePath": "src/components/tokens/Colors/Colors.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 584,
          "endLine": 585,
          "code": "  render: () => (\n    <div className=\"mx-auto max-w-6xl p-8\">\n",
          "filePath": "src/components/tokens/Colors/Colors.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 729,
          "endLine": 730,
          "code": "  render: () => (\n    <div className=\"mx-auto max-w-6xl p-8\">\n",
          "filePath": "src/components/tokens/Colors/Colors.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 853,
          "endLine": 854,
          "code": "  render: () => (\n    <div className=\"mx-auto max-w-6xl p-8\">\n",
          "filePath": "src/components/tokens/Colors/Colors.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 965 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/tokens/Layout/Layout.stories.tsx",
      "lineCount": 740,
      "functions": [
        {
          "name": "render",
          "startLine": 116,
          "endLine": 117,
          "code": "  render: () => <Layout />,\n};\n",
          "filePath": "src/components/tokens/Layout/Layout.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 121,
          "endLine": 122,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Layout/Layout.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 186,
          "endLine": 187,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Layout/Layout.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 250,
          "endLine": 251,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Layout/Layout.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 367,
          "endLine": 368,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Layout/Layout.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 472,
          "endLine": 473,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Layout/Layout.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 659,
          "endLine": 660,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Layout/Layout.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 740 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/tokens/Layout/Layout.tsx",
      "lineCount": 575,
      "functions": [
        {
          "name": "getVisualization",
          "startLine": 154,
          "endLine": 200,
          "code": "  const getVisualization = () => {\n    switch (type) {\n      case 'width':\n        return (\n          <div className=\"w-full rounded bg-blue-100\">\n            <div\n              className=\"h-4 rounded bg-blue-500 transition-all\"\n              style={{ width: value.includes('%') ? value : '100px', maxWidth: '200px' }}\n            />\n          </div>\n        );\n      case 'height':\n        return (\n          <div className=\"flex h-16 items-end\">\n            <div\n              className=\"w-16 rounded bg-green-500 transition-all\"\n              style={{\n                height: value.includes('px') ? Math.min(parseInt(value), 64) + 'px' : '32px',\n              }}\n            />\n          </div>\n        );\n      case 'percentage':\n        const percentage = parseFloat(value);\n        return (\n          <div className=\"w-full rounded bg-purple-100\">\n            <div\n              className=\"h-4 rounded bg-purple-500 transition-all\"\n              style={{ width: `${percentage}%` }}\n            />\n          </div>\n        );\n      case 'index':\n        return (\n          <div className=\"relative h-16 w-16 rounded bg-gray-100\">\n            <div\n              className=\"absolute inset-2 flex items-center justify-center rounded bg-red-500 font-mono text-xs text-white\"\n              style={{ zIndex: parseInt(value) || 0 }}\n            >\n              {value}\n            </div>\n          </div>\n        );\n      default:\n        return <div className=\"h-4 w-16 rounded bg-neutral-300\" />;\n    }\n  };\n",
          "filePath": "src/components/tokens/Layout/Layout.tsx",
          "lineCount": 47,
          "cyclomaticComplexity": 9,
          "cognitiveComplexity": 5
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 575 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "getVisualization",
          "line": 154,
          "message": "Function 'getVisualization' has 47 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/components/tokens/Shadows/Shadows.stories.tsx",
      "lineCount": 851,
      "functions": [
        {
          "name": "render",
          "startLine": 149,
          "endLine": 150,
          "code": "  render: () => <Shadows />,\n};\n",
          "filePath": "src/components/tokens/Shadows/Shadows.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 154,
          "endLine": 155,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Shadows/Shadows.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 224,
          "endLine": 225,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Shadows/Shadows.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 346,
          "endLine": 347,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Shadows/Shadows.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 581,
          "endLine": 582,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Shadows/Shadows.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 851 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/tokens/Shadows/Shadows.tsx",
      "lineCount": 685,
      "functions": [
        {
          "name": "getVisualization",
          "startLine": 172,
          "endLine": 219,
          "code": "  const getVisualization = () => {\n    switch (type) {\n      case 'boxShadow':\n        return (\n          <div\n            className=\"h-16 w-16 rounded-lg bg-white transition-all\"\n            style={{ boxShadow: value === 'none' ? 'none' : value }}\n          />\n        );\n      case 'dropShadow':\n        return (\n          <div\n            className=\"flex h-16 w-16 items-center justify-center rounded-lg bg-blue-500 text-xl font-bold text-white transition-all\"\n            style={{ filter: value === 'none' ? 'none' : `drop-shadow(${value})` }}\n          >\n            A\n          </div>\n        );\n      case 'radius':\n        return (\n          <div className=\"h-16 w-16 bg-green-500 transition-all\" style={{ borderRadius: value }} />\n        );\n      case 'opacity':\n        return (\n          <div className=\"relative h-16 w-16\">\n            <div className=\"absolute inset-0 rounded bg-gradient-to-r from-blue-500 to-purple-500\" />\n            <div\n              className=\"absolute inset-0 rounded bg-red-500 transition-all\"\n              style={{ opacity: value }}\n            />\n          </div>\n        );\n      case 'blur':\n        return (\n          <div className=\"relative h-16 w-16 overflow-hidden rounded\">\n            <div\n              className=\"absolute inset-0 bg-gradient-to-br from-blue-400 to-purple-500 transition-all\"\n              style={{ filter: value === '0' ? 'none' : `blur(${value})` }}\n            />\n            <div className=\"absolute inset-0 flex items-center justify-center font-bold text-white\">\n              {value === '0' ? 'SHARP' : 'BLUR'}\n            </div>\n          </div>\n        );\n      default:\n        return <div className=\"h-16 w-16 rounded bg-neutral-300\" />;\n    }\n  };\n",
          "filePath": "src/components/tokens/Shadows/Shadows.tsx",
          "lineCount": 48,
          "cyclomaticComplexity": 11,
          "cognitiveComplexity": 6
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 685 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "getVisualization",
          "line": 172,
          "message": "Function 'getVisualization' has 48 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "getVisualization",
          "line": 172,
          "complexity": 11,
          "message": "Function 'getVisualization' has cyclomatic complexity of 11 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        }
      ]
    },
    {
      "filePath": "src/components/tokens/Spacing/Spacing.stories.tsx",
      "lineCount": 524,
      "functions": [
        {
          "name": "render",
          "startLine": 89,
          "endLine": 90,
          "code": "  render: () => <Spacing />,\n};\n",
          "filePath": "src/components/tokens/Spacing/Spacing.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 94,
          "endLine": 95,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Spacing/Spacing.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 158,
          "endLine": 159,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Spacing/Spacing.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 214,
          "endLine": 215,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Spacing/Spacing.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 287,
          "endLine": 288,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Spacing/Spacing.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 345,
          "endLine": 346,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Spacing/Spacing.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 450,
          "endLine": 451,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Spacing/Spacing.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 524 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/tokens/Spacing/Spacing.tsx",
      "lineCount": 408,
      "functions": [],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 408 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/tokens/Typography/Typography.stories.tsx",
      "lineCount": 433,
      "functions": [
        {
          "name": "render",
          "startLine": 72,
          "endLine": 73,
          "code": "  render: () => <Typography />,\n};\n",
          "filePath": "src/components/tokens/Typography/Typography.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 77,
          "endLine": 78,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Typography/Typography.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 118,
          "endLine": 119,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Typography/Typography.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 142,
          "endLine": 143,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Typography/Typography.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 187,
          "endLine": 188,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Typography/Typography.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 234,
          "endLine": 235,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Typography/Typography.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 293,
          "endLine": 294,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Typography/Typography.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "with",
          "startLine": 328,
          "endLine": 329,
          "code": "            function with the resident's{' '}\n            <code style={typographyScale.code.sm} className=\"rounded bg-neutral-200 px-1\">\n",
          "filePath": "src/components/tokens/Typography/Typography.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "render",
          "startLine": 346,
          "endLine": 347,
          "code": "  render: () => (\n    <div className=\"p-6\">\n",
          "filePath": "src/components/tokens/Typography/Typography.stories.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 433 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/components/tokens/Typography/Typography.tsx",
      "lineCount": 398,
      "functions": [],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 398 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/contexts/AuthContext.tsx",
      "lineCount": 556,
      "functions": [
        {
          "name": "signIn",
          "startLine": 41,
          "endLine": 42,
          "code": "  signIn: (email: string, password: string) => Promise<{ error: Error | null }>;\n  signOut: () => Promise<void>;\n",
          "filePath": "src/contexts/AuthContext.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "loadProfile",
          "startLine": 43,
          "endLine": 44,
          "code": "  loadProfile: () => Promise<void>;\n  refreshProfile: () => Promise<void>;\n",
          "filePath": "src/contexts/AuthContext.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "hasPermission",
          "startLine": 47,
          "endLine": 48,
          "code": "  hasPermission: (permission: string) => boolean;\n  isInRole: (roleName: string) => boolean;\n",
          "filePath": "src/contexts/AuthContext.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "canAccessBarangay",
          "startLine": 49,
          "endLine": 50,
          "code": "  canAccessBarangay: (barangayCode: string) => boolean;\n  isBarangayAdmin: () => boolean;\n",
          "filePath": "src/contexts/AuthContext.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "AuthProvider",
          "startLine": 55,
          "endLine": 483,
          "code": "export function AuthProvider({ children }: { readonly children: React.ReactNode }) {\n  // Core auth state\n  const [session, setSession] = useState<Session | null>(null);\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  // Profile state\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n  const [role, setRole] = useState<Role | null>(null);\n  const [profileLoading, setProfileLoading] = useState(false);\n  const [profileError, setProfileError] = useState<string | null>(null);\n  const [profileCache, setProfileCache] = useState<\n    Map<string, { profile: UserProfile; role: Role; timestamp: number }>\n  >(new Map());\n  const [lastProfileLoad, setLastProfileLoad] = useState<number>(0);\n\n  // Retry helper with exponential backoff\n  const retryWithBackoff = async <T,>(\n    operation: () => Promise<T>,\n    maxRetries = 3,\n    baseDelay = 1000\n  ): Promise<T> => {\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error) {\n        if (attempt === maxRetries) throw error;\n\n        const delay = baseDelay * Math.pow(2, attempt);\n        console.log(`Retry attempt ${attempt + 1}/${maxRetries + 1} in ${delay}ms`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    throw new Error('Max retries exceeded');\n  };\n\n  // Load user profile and related data (simplified for original schema)\n  const loadUserProfile = useCallback(async (userId: string, force = false) => {\n    try {\n      // Check cache first (cache for 5 minutes)\n      const cacheKey = userId;\n      const cached = profileCache.get(cacheKey);\n      const now = Date.now();\n      const cacheTimeout = 5 * 60 * 1000; // 5 minutes\n\n      if (!force && cached && now - cached.timestamp < cacheTimeout) {\n        console.log('Using cached profile data');\n        setUserProfile(cached.profile);\n        setRole(cached.role);\n        return;\n      }\n\n      // Prevent multiple simultaneous requests for the same user\n      if (profileLoading && now - lastProfileLoad < 1000) {\n        console.log('Profile already loading, skipping duplicate request');\n        return;\n      }\n\n      setProfileLoading(true);\n      setProfileError(null);\n      setLastProfileLoad(now);\n      console.log('Loading user profile for:', userId);\n\n      // Try real database query first\n      console.log('Attempting real database query...');\n      const startTime = Date.now();\n\n      // Set a shorter timeout for this specific query\n      const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error('Profile query timeout')), 15000); // 15 second timeout\n      });\n\n      try {\n        // Get the current session to pass the auth token\n        const {\n          data: { session },\n        } = await supabase.auth.getSession();\n\n        if (!session?.access_token) {\n          throw new Error('No valid session found');\n        }\n\n        // Use server-side API to fetch profile data (bypasses RLS issues)\n        const response = (await retryWithBackoff(async () => {\n          const result = await Promise.race([\n            fetch('/api/auth/profile', {\n              method: 'GET',\n              headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${session.access_token}`,\n              },\n            }),\n            timeoutPromise,\n          ]);\n          return result;\n        })) as Response;\n\n        const queryTime = Date.now() - startTime;\n        console.log(`Profile query completed successfully in ${queryTime}ms`);\n\n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({}));\n          console.error('Profile API error:', {\n            status: response.status,\n            statusText: response.statusText,\n            error: errorData.error || 'Unknown error',\n            fullError: JSON.stringify(errorData, null, 2),\n          });\n          throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        const { profile: profileData, role } = data;\n\n        if (!profileData) {\n          console.error('No profile found for user:', userId);\n          throw new Error('Profile not found');\n        }\n\n        // Log the actual data structure to understand what fields exist\n        console.log('Raw profile data from API:', profileData);\n        console.log('Profile barangay_code:', profileData?.barangay_code);\n        console.log('Profile role_id:', profileData?.role_id);\n\n        // Map the database fields to our interface, using defaults for missing fields\n        const profile: UserProfile = {\n          id: profileData.id || userId,\n          email: profileData.email || '',\n          first_name: profileData.first_name || '',\n          last_name: profileData.last_name || '',\n          barangay_code: profileData.barangay_code || '',\n          role_id: profileData.role_id || '',\n          is_active: profileData.is_active !== undefined ? profileData.is_active : true,\n          created_at: profileData.created_at || new Date().toISOString(),\n          updated_at: profileData.updated_at || new Date().toISOString(),\n        };\n\n        console.log('Profile loaded successfully:', profile);\n        console.log('Role loaded:', role);\n\n        const finalRole = role || {\n          id: 'default-role',\n          name: 'User',\n          permissions: { residents_view: true },\n        };\n\n        // Cache the results\n        const newCache = new Map(profileCache);\n        newCache.set(cacheKey, {\n          profile,\n          role: finalRole,\n          timestamp: Date.now(),\n        });\n        setProfileCache(newCache);\n\n        setUserProfile(profile);\n        setRole(finalRole);\n      } catch (dbError) {\n        console.error('Database query failed and no fallback available:', {\n          message: (dbError as any)?.message || 'Unknown error',\n          code: (dbError as any)?.code,\n          details: (dbError as any)?.details,\n          hint: (dbError as any)?.hint,\n          fullError: JSON.stringify(dbError, null, 2),\n        });\n        console.error('User must have a valid profile in the database to use the system');\n\n        // Don't use mock data - require real database profile\n        setUserProfile(null);\n        setRole(null);\n        throw new Error('Failed to load user profile from database');\n      }\n    } catch (error) {\n      console.error('Error in loadUserProfile:', error);\n      setProfileError(error instanceof Error ? error.message : 'Failed to load profile');\n      setUserProfile(null);\n      setRole(null);\n    } finally {\n      setProfileLoading(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Initialize auth state\n  useEffect(() => {\n    // Get initial session with timeout\n    const initAuth = async () => {\n      try {\n        console.log('Starting auth initialization...');\n        const {\n          data: { session },\n          error,\n        } = await supabase.auth.getSession();\n\n        if (error) {\n          console.error('Session error:', {\n            message: error.message || 'Unknown error',\n            code: error.code,\n            details: (error as any).details,\n            hint: (error as any).hint,\n            fullError: JSON.stringify(error, null, 2),\n          });\n          setLoading(false);\n          return;\n        }\n\n        console.log('Session retrieved:', session?.user?.id ? 'User found' : 'No user');\n        setSession(session);\n        setUser(session?.user ?? null);\n\n        console.log('Auth initialization complete');\n        setLoading(false);\n      } catch (error) {\n        console.error('Auth initialization error:', {\n          message: (error as any)?.message || 'Unknown error',\n          code: (error as any)?.code,\n          details: (error as any)?.details,\n          hint: (error as any)?.hint,\n          fullError: JSON.stringify(error, null, 2),\n        });\n        setLoading(false);\n      }\n    };\n\n    // Add timeout to prevent infinite loading - only if page is visible\n    let timeoutId: NodeJS.Timeout | null = null;\n\n    if (!document.hidden) {\n      timeoutId = setTimeout(() => {\n        console.warn('Auth initialization timeout - forcing completion');\n        setLoading(false);\n        // Don't clear the session if user was found\n        if (user) {\n          console.log('User was authenticated but initialization timed out - continuing');\n        }\n      }, 10000); // 10 seconds timeout - shorter for incognito mode\n    }\n\n    initAuth().then(() => {\n      if (timeoutId) clearTimeout(timeoutId);\n    });\n\n    // Listen for auth changes\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      console.log('Auth state change:', event, session?.user?.id);\n      setSession(session);\n      setUser(session?.user ?? null);\n\n      if (event === 'SIGNED_OUT') {\n        setUserProfile(null);\n        setRole(null);\n        setProfileError(null);\n      }\n\n      // Always ensure loading is false after auth state change\n      setLoading(false);\n    });\n\n    return () => {\n      if (timeoutId) clearTimeout(timeoutId);\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  // Sign in method\n  const signIn = useCallback(\n    async (email: string, password: string) => {\n      const { error, data } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      // Preload profile data immediately after successful sign-in (but skip on public routes)\n      if (!error && data.user) {\n        const publicRoutes = ['/signup', '/login', '/'];\n        const currentPath = typeof window !== 'undefined' ? window.location.pathname : '';\n        const isPublicRoute = publicRoutes.includes(currentPath);\n        \n        if (!isPublicRoute) {\n          loadUserProfile(data.user.id).catch(err => {\n            console.error('Profile preloading failed:', err);\n          });\n        }\n      }\n\n      return { error };\n    },\n    [loadUserProfile]\n  );\n\n  // Sign out method\n  const signOut = useCallback(async () => {\n    const { error } = await supabase.auth.signOut();\n    if (error) {\n      console.error('Error signing out:', error);\n    }\n  }, []);\n\n  // Load profile method (separate from auth)\n  const loadProfile = useCallback(async () => {\n    if (user?.id) {\n      await loadUserProfile(user.id);\n    }\n  }, [user?.id, loadUserProfile]);\n\n  // Refresh profile method\n  const refreshProfile = useCallback(async () => {\n    if (user) {\n      await loadUserProfile(user.id);\n    }\n  }, [user, loadUserProfile]);\n\n  // Auto-load profile when user is authenticated (but skip on public routes)\n  useEffect(() => {\n    // Skip profile loading on public routes\n    const publicRoutes = ['/signup', '/login', '/'];\n    const currentPath = typeof window !== 'undefined' ? window.location.pathname : '';\n    const isPublicRoute = publicRoutes.includes(currentPath);\n    \n    if (user?.id && !userProfile && !profileLoading && !isPublicRoute) {\n      loadProfile();\n    }\n  }, [user?.id, userProfile, profileLoading, loadProfile]);\n\n  // Permission helpers\n  const checkCrudPermission = useCallback((action: string, permissionValue: string): boolean => {\n    if (permissionValue === 'crud' || permissionValue === 'manage') return true;\n    if (action === 'view' && (permissionValue === 'read' || permissionValue === 'crud'))\n      return true;\n    if (action === 'create' && (permissionValue === 'write' || permissionValue === 'crud'))\n      return true;\n    if (action === 'update' && (permissionValue === 'write' || permissionValue === 'crud'))\n      return true;\n    if (action === 'delete' && (permissionValue === 'write' || permissionValue === 'crud'))\n      return true;\n    return false;\n  }, []);\n\n  const hasPermission = useCallback(\n    (permission: string): boolean => {\n      if (!role?.permissions) return false;\n\n      // Super admin has all permissions\n      if (role.permissions.all === true) return true;\n\n      // Check specific permission (boolean style)\n      if (role.permissions[permission] === true) return true;\n\n      // Check CRUD-style permissions (e.g., \"residents_view\")\n      const [resource, action] = permission.split('_');\n      if (resource && action && role.permissions[resource]) {\n        const resourcePermission = role.permissions[resource];\n        // If permission is boolean true, user has full access\n        if (resourcePermission === true) return true;\n        // If permission is a string, check CRUD permissions\n        if (typeof resourcePermission === 'string') {\n          return checkCrudPermission(action, resourcePermission);\n        }\n      }\n\n      return false;\n    },\n    [role, checkCrudPermission]\n  );\n\n  const isInRole = useCallback(\n    (roleName: string): boolean => {\n      return role?.name === roleName;\n    },\n    [role]\n  );\n\n  const canAccessBarangay = useCallback(\n    (barangayCode: string): boolean => {\n      return userProfile?.barangay_code === barangayCode;\n    },\n    [userProfile]\n  );\n\n  const isBarangayAdmin = useCallback((): boolean => {\n    return role?.name === 'barangay_admin';\n  }, [role]);\n\n  const value: AuthContextType = useMemo(\n    () => ({\n      // State\n      session,\n      user,\n      userProfile,\n      role,\n      loading,\n      profileLoading,\n      profileError,\n\n      // Methods\n      signIn,\n      signOut,\n      loadProfile,\n      refreshProfile,\n\n      // Helpers\n      hasPermission,\n      isInRole,\n      canAccessBarangay,\n      isBarangayAdmin,\n    }),\n    [\n      session,\n      user,\n      userProfile,\n      role,\n      loading,\n      profileLoading,\n      profileError,\n      signIn,\n      signOut,\n      loadProfile,\n      refreshProfile,\n      hasPermission,\n      isInRole,\n      canAccessBarangay,\n      isBarangayAdmin,\n    ]\n  );\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n",
          "filePath": "src/contexts/AuthContext.tsx",
          "lineCount": 429,
          "cyclomaticComplexity": 74,
          "cognitiveComplexity": 104
        },
        {
          "name": "useAuth",
          "startLine": 486,
          "endLine": 509,
          "code": "export function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    // Provide a fallback during SSR or if used outside provider\n    return {\n      user: null,\n      session: null,\n      userProfile: null,\n      role: null,\n      loading: true,\n      profileLoading: true,\n      profileError: null,\n      signIn: async () => ({ error: new Error('AuthProvider not available') }),\n      signOut: async () => {},\n      loadProfile: async () => {},\n      refreshProfile: async () => {},\n      hasPermission: () => false,\n      isInRole: () => false,\n      canAccessBarangay: () => false,\n      isBarangayAdmin: () => false,\n    };\n  }\n  return context;\n}\n",
          "filePath": "src/contexts/AuthContext.tsx",
          "lineCount": 24,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 5
        },
        {
          "name": "useRequireAuth",
          "startLine": 512,
          "endLine": 527,
          "code": "export function useRequireAuth() {\n  const auth = useAuth();\n\n  useEffect(() => {\n    if (!auth.loading && !auth.user) {\n      // Redirect to login - but give more time for auth to settle during navigation\n      const timer = setTimeout(() => {\n        window.location.href = '/login';\n      }, 500); // Small delay to prevent race conditions during navigation\n\n      return () => clearTimeout(timer);\n    }\n  }, [auth.loading, auth.user]);\n\n  return auth;\n}\n",
          "filePath": "src/contexts/AuthContext.tsx",
          "lineCount": 16,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 8
        },
        {
          "name": "useRequireRole",
          "startLine": 530,
          "endLine": 541,
          "code": "export function useRequireRole(requiredRole: string) {\n  const auth = useRequireAuth();\n\n  useEffect(() => {\n    if (!auth.loading && !auth.profileLoading && auth.user && !auth.isInRole(requiredRole)) {\n      // Redirect to unauthorized page\n      window.location.href = '/unauthorized';\n    }\n  }, [auth, requiredRole]);\n\n  return auth;\n}\n",
          "filePath": "src/contexts/AuthContext.tsx",
          "lineCount": 12,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 6
        },
        {
          "name": "useRequirePermission",
          "startLine": 544,
          "endLine": 555,
          "code": "export function useRequirePermission(permission: string) {\n  const auth = useRequireAuth();\n\n  useEffect(() => {\n    if (!auth.loading && !auth.profileLoading && auth.user && !auth.hasPermission(permission)) {\n      // Redirect to unauthorized page\n      window.location.href = '/unauthorized';\n    }\n  }, [auth, permission]);\n\n  return auth;\n}\n",
          "filePath": "src/contexts/AuthContext.tsx",
          "lineCount": 12,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 6
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 556 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "AuthProvider",
          "line": 55,
          "message": "Function 'AuthProvider' has 429 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "AuthProvider",
          "line": 55,
          "complexity": 74,
          "message": "Function 'AuthProvider' has cyclomatic complexity of 74 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "AuthProvider",
          "line": 55,
          "complexity": 104,
          "message": "Function 'AuthProvider' has cognitive complexity of 104 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/contexts/DarkModeContext.tsx",
      "lineCount": 56,
      "functions": [
        {
          "name": "toggleDarkMode",
          "startLine": 7,
          "endLine": 8,
          "code": "  toggleDarkMode: () => void;\n}\n",
          "filePath": "src/contexts/DarkModeContext.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "DarkModeProvider",
          "startLine": 12,
          "endLine": 47,
          "code": "export function DarkModeProvider({ children }: { children: React.ReactNode }) {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  useEffect(() => {\n    // Check local storage for saved preference\n    const savedMode = localStorage.getItem('darkMode');\n    if (savedMode !== null) {\n      setIsDarkMode(savedMode === 'true');\n    } else {\n      // Check system preference\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      setIsDarkMode(prefersDark);\n    }\n  }, []);\n\n  useEffect(() => {\n    // Update document class and local storage when dark mode changes\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n      localStorage.setItem('darkMode', 'true');\n    } else {\n      document.documentElement.classList.remove('dark');\n      localStorage.setItem('darkMode', 'false');\n    }\n  }, [isDarkMode]);\n\n  const toggleDarkMode = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n\n  return (\n    <DarkModeContext.Provider value={{ isDarkMode, toggleDarkMode }}>\n      {children}\n    </DarkModeContext.Provider>\n  );\n}\n",
          "filePath": "src/contexts/DarkModeContext.tsx",
          "lineCount": 36,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 4
        },
        {
          "name": "useDarkMode",
          "startLine": 49,
          "endLine": 55,
          "code": "export function useDarkMode() {\n  const context = useContext(DarkModeContext);\n  if (context === undefined) {\n    throw new Error('useDarkMode must be used within a DarkModeProvider');\n  }\n  return context;\n}\n",
          "filePath": "src/contexts/DarkModeContext.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 4
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "DarkModeProvider",
          "line": 12,
          "message": "Function 'DarkModeProvider' has 36 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/contexts/ThemeContext.tsx",
      "lineCount": 128,
      "functions": [
        {
          "name": "setTheme",
          "startLine": 10,
          "endLine": 11,
          "code": "  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n",
          "filePath": "src/contexts/ThemeContext.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "useTheme",
          "startLine": 16,
          "endLine": 28,
          "code": "export function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    // Provide a fallback during SSR or if used outside provider\n    return {\n      theme: 'system' as Theme,\n      actualTheme: 'light' as 'light' | 'dark',\n      setTheme: () => {},\n      toggleTheme: () => {},\n    };\n  }\n  return context;\n}\n",
          "filePath": "src/contexts/ThemeContext.tsx",
          "lineCount": 13,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 5
        },
        {
          "name": "ThemeProvider",
          "startLine": 36,
          "endLine": 127,
          "code": "export function ThemeProvider({\n  children,\n  defaultTheme = 'system',\n  storageKey = 'rbi-theme',\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(defaultTheme);\n  const [actualTheme, setActualTheme] = useState<'light' | 'dark'>('light');\n  const [mounted, setMounted] = useState(false);\n\n  // Set mounted flag after hydration\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  // Initialize theme from localStorage or system preference\n  useEffect(() => {\n    if (!mounted) return;\n\n    const storedTheme = localStorage.getItem(storageKey) as Theme;\n    if (storedTheme && ['light', 'dark', 'system'].includes(storedTheme)) {\n      setTheme(storedTheme);\n    } else {\n      // Default to system preference if no stored preference\n      setTheme('system');\n    }\n  }, [storageKey, mounted]);\n\n  // Update actual theme when theme changes\n  useEffect(() => {\n    if (!mounted) return;\n\n    let newActualTheme: 'light' | 'dark';\n\n    if (theme === 'system') {\n      newActualTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n    } else {\n      newActualTheme = theme;\n    }\n\n    setActualTheme(newActualTheme);\n\n    // Apply theme to document\n    const root = document.documentElement;\n    root.classList.remove('light', 'dark');\n    root.classList.add(newActualTheme);\n\n    // Update data attribute for CSS selectors\n    root.setAttribute('data-theme', newActualTheme);\n\n    // Store theme preference\n    localStorage.setItem(storageKey, theme);\n  }, [theme, storageKey, mounted]);\n\n  // Listen to system theme changes\n  useEffect(() => {\n    if (!mounted || theme !== 'system') return;\n\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e: MediaQueryListEvent) => {\n      const newTheme = e.matches ? 'dark' : 'light';\n      setActualTheme(newTheme);\n\n      // Apply theme change to document immediately\n      const root = document.documentElement;\n      root.classList.remove('light', 'dark');\n      root.classList.add(newTheme);\n      root.setAttribute('data-theme', newTheme);\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, [theme, mounted]);\n\n  const toggleTheme = () => {\n    if (theme === 'light') {\n      setTheme('dark');\n    } else if (theme === 'dark') {\n      setTheme('system');\n    } else {\n      setTheme('light');\n    }\n  };\n\n  const value: ThemeContextType = {\n    theme,\n    actualTheme,\n    setTheme,\n    toggleTheme,\n  };\n\n  return <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>;\n}\n",
          "filePath": "src/contexts/ThemeContext.tsx",
          "lineCount": 92,
          "cyclomaticComplexity": 17,
          "cognitiveComplexity": 18
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "ThemeProvider",
          "line": 36,
          "message": "Function 'ThemeProvider' has 92 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "ThemeProvider",
          "line": 36,
          "complexity": 17,
          "message": "Function 'ThemeProvider' has cyclomatic complexity of 17 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "ThemeProvider",
          "line": 36,
          "complexity": 18,
          "message": "Function 'ThemeProvider' has cognitive complexity of 18 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/design-system/tokens.ts",
      "lineCount": 562,
      "functions": [],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 562 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/design-system/utils.ts",
      "lineCount": 444,
      "functions": [
        {
          "name": "getColor",
          "startLine": 17,
          "endLine": 30,
          "code": "export function getColor(colorPath: string): string {\n  const keys = colorPath.split('.');\n  let current: unknown = designTokens.colors;\n\n  for (const key of keys) {\n    if (!current || typeof current !== 'object' || !(key in current)) {\n      console.warn(`Color token '${colorPath}' not found. Using fallback.`);\n      return designTokens.colors.neutral[500];\n    }\n    current = (current as Record<string, unknown>)[key];\n  }\n\n  return current as string;\n}\n",
          "filePath": "src/design-system/utils.ts",
          "lineCount": 14,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 9
        },
        {
          "name": "getRBIColor",
          "startLine": 37,
          "endLine": 38,
          "code": "export function getRBIColor(\n  classification:\n",
          "filePath": "src/design-system/utils.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "getColorVariant",
          "startLine": 68,
          "endLine": 69,
          "code": "export function getColorVariant(\n  baseColor: string,\n",
          "filePath": "src/design-system/utils.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "getSpacing",
          "startLine": 100,
          "endLine": 102,
          "code": "export function getSpacing(size: keyof typeof designTokens.spacing): string {\n  return designTokens.spacing[size];\n}\n",
          "filePath": "src/design-system/utils.ts",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "getResponsiveSpacing",
          "startLine": 109,
          "endLine": 122,
          "code": "export function getResponsiveSpacing(baseSize: keyof typeof designTokens.spacing) {\n  return {\n    base: designTokens.spacing[baseSize],\n    sm: designTokens.spacing[baseSize],\n    md:\n      designTokens.spacing[\n        Math.min(Number(baseSize) + 1, 96) as keyof typeof designTokens.spacing\n      ] || designTokens.spacing[baseSize],\n    lg:\n      designTokens.spacing[\n        Math.min(Number(baseSize) + 2, 96) as keyof typeof designTokens.spacing\n      ] || designTokens.spacing[baseSize],\n  };\n}\n",
          "filePath": "src/design-system/utils.ts",
          "lineCount": 14,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3
        },
        {
          "name": "getFontSize",
          "startLine": 133,
          "endLine": 135,
          "code": "export function getFontSize(size: keyof typeof designTokens.typography.fontSize) {\n  return designTokens.typography.fontSize[size];\n}\n",
          "filePath": "src/design-system/utils.ts",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "getHeadingStyle",
          "startLine": 142,
          "endLine": 166,
          "code": "export function getHeadingStyle(level: 1 | 2 | 3 | 4 | 5 | 6) {\n  const sizeMap = {\n    1: '4xl',\n    2: '3xl',\n    3: '2xl',\n    4: 'xl',\n    5: 'lg',\n    6: 'base',\n  } as const;\n\n  const weightMap = {\n    1: designTokens.typography.fontWeight.bold,\n    2: designTokens.typography.fontWeight.bold,\n    3: designTokens.typography.fontWeight.semibold,\n    4: designTokens.typography.fontWeight.semibold,\n    5: designTokens.typography.fontWeight.medium,\n    6: designTokens.typography.fontWeight.medium,\n  };\n\n  return {\n    fontSize: designTokens.typography.fontSize[sizeMap[level]],\n    fontWeight: weightMap[level],\n    fontFamily: designTokens.typography.fontFamily.display,\n  };\n}\n",
          "filePath": "src/design-system/utils.ts",
          "lineCount": 25,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "getButtonStyles",
          "startLine": 178,
          "endLine": 179,
          "code": "export function getButtonStyles(\n  variant: 'primary' | 'secondary' | 'success' | 'warning' | 'danger' | 'neutral' | 'ghost',\n",
          "filePath": "src/design-system/utils.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "getInputStyles",
          "startLine": 239,
          "endLine": 240,
          "code": "export function getInputStyles(\n  state: 'default' | 'focus' | 'error' | 'success' | 'disabled' = 'default'\n",
          "filePath": "src/design-system/utils.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "checkContrast",
          "startLine": 292,
          "endLine": 293,
          "code": "export function checkContrast(\n  foreground: string,\n",
          "filePath": "src/design-system/utils.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "getFocusRing",
          "startLine": 320,
          "endLine": 321,
          "code": "export function getFocusRing(\n  variant: 'primary' | 'secondary' | 'success' | 'warning' | 'danger' = 'primary'\n",
          "filePath": "src/design-system/utils.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "validateDesignTokenUsage",
          "startLine": 338,
          "endLine": 368,
          "code": "export function validateDesignTokenUsage(styles: Record<string, unknown>) {\n  const warnings: string[] = [];\n  const suggestions: string[] = [];\n\n  // Check for hardcoded colors\n  for (const [property, value] of Object.entries(styles)) {\n    if (typeof value === 'string' && value.match(/#[0-9a-fA-F]{6}/)) {\n      warnings.push(`Hardcoded color '${value}' in property '${property}'`);\n      suggestions.push(`Consider using a design token instead of '${value}'`);\n    }\n\n    // Check for non-standard spacing values\n    if (property.includes('padding') || property.includes('margin')) {\n      if (\n        typeof value === 'string' &&\n        !(Object.values(designTokens.spacing) as string[]).includes(value)\n      ) {\n        warnings.push(`Non-standard spacing '${value}' in property '${property}'`);\n        suggestions.push(\n          `Consider using spacing tokens: ${Object.keys(designTokens.spacing).slice(0, 5).join(', ')}...`\n        );\n      }\n    }\n  }\n\n  return {\n    isValid: warnings.length === 0,\n    warnings,\n    suggestions,\n  };\n}\n",
          "filePath": "src/design-system/utils.ts",
          "lineCount": 31,
          "cyclomaticComplexity": 8,
          "cognitiveComplexity": 14
        },
        {
          "name": "getSectoralBadgeColor",
          "startLine": 380,
          "endLine": 381,
          "code": "export function getSectoralBadgeColor(\n  classification: string,\n",
          "filePath": "src/design-system/utils.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "getHouseholdTypeStyle",
          "startLine": 413,
          "endLine": 424,
          "code": "export function getHouseholdTypeStyle(householdType: string) {\n  const styles = {\n    nuclear: { icon: '👪', color: designTokens.colors.primary[500] },\n    single_parent: { icon: '👩‍👧‍👦', color: designTokens.colors.secondary[500] },\n    extended: { icon: '🏠', color: designTokens.colors.success[500] },\n    childless: { icon: '👫', color: designTokens.colors.neutral[500] },\n    grandparents: { icon: '👴👵', color: designTokens.colors.secondary[600] },\n    stepfamily: { icon: '👨‍👩‍👧‍👧', color: designTokens.colors.primary[600] },\n  };\n\n  return styles[householdType as keyof typeof styles] || styles.nuclear;\n}\n",
          "filePath": "src/design-system/utils.ts",
          "lineCount": 12,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 444 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "validateDesignTokenUsage",
          "line": 338,
          "message": "Function 'validateDesignTokenUsage' has 31 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/hooks/useSelector.ts",
      "lineCount": 103,
      "functions": [
        {
          "name": "onChange",
          "startLine": 6,
          "endLine": 7,
          "code": "  onChange: (value: string) => void;\n  searchFn: (term: string) => Promise<T[]>;\n",
          "filePath": "src/hooks/useSelector.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "useSelector",
          "startLine": 14,
          "endLine": 103,
          "code": "export function useSelector<T extends { value: string; label: string }>({\n  value,\n  onChange,\n  searchFn,\n  loadSelectedFn,\n  debounceMs = 300,\n  minSearchLength = 2,\n  formatDisplayValue,\n}: UseSelectorOptions<T>) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [options, setOptions] = useState<T[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedOption, setSelectedOption] = useState<T | null>(null);\n  const debounceRef = useRef<NodeJS.Timeout | null>(null);\n\n  const loadOptions = useCallback(\n    async (search: string) => {\n      if (search.length < minSearchLength) {\n        setOptions([]);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        const results = await searchFn(search);\n        setOptions(results);\n      } catch (error) {\n        logger.error('Selector search error', { error });\n        setOptions([]);\n      } finally {\n        setLoading(false);\n      }\n    },\n    [searchFn, minSearchLength]\n  );\n\n  useEffect(() => {\n    if (debounceRef.current) {\n      clearTimeout(debounceRef.current);\n    }\n\n    debounceRef.current = setTimeout(() => {\n      loadOptions(searchTerm);\n    }, debounceMs);\n\n    return () => {\n      if (debounceRef.current) {\n        clearTimeout(debounceRef.current);\n      }\n    };\n  }, [searchTerm, loadOptions, debounceMs]);\n\n  useEffect(() => {\n    if (value && !selectedOption && loadSelectedFn) {\n      loadSelectedFn(value).then(option => {\n        if (option) {\n          setSelectedOption(option);\n          setSearchTerm(formatDisplayValue ? formatDisplayValue(option) : option.label);\n        }\n      });\n    }\n  }, [value, selectedOption, loadSelectedFn, formatDisplayValue]);\n\n  const handleSearchChange = useCallback((term: string) => {\n    setSearchTerm(term);\n    \n    if (selectedOption && term !== (formatDisplayValue ? formatDisplayValue(selectedOption) : selectedOption.label)) {\n      setSelectedOption(null);\n      onChange('');\n    }\n  }, [selectedOption, onChange, formatDisplayValue]);\n\n  const handleOpenChange = useCallback((open: boolean) => {\n    setIsOpen(open);\n  }, []);\n\n  return {\n    searchTerm,\n    options,\n    loading,\n    isOpen,\n    selectedOption,\n    onSearchChange: handleSearchChange,\n    onOpenChange: handleOpenChange,\n    setSearchTerm,\n    setOptions,\n    setSelectedOption,\n  };\n}\n",
          "filePath": "src/hooks/useSelector.ts",
          "lineCount": 90,
          "cyclomaticComplexity": 13,
          "cognitiveComplexity": 23
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "useSelector",
          "line": 14,
          "message": "Function 'useSelector' has 90 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "useSelector",
          "line": 14,
          "complexity": 13,
          "message": "Function 'useSelector' has cyclomatic complexity of 13 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "useSelector",
          "line": 14,
          "complexity": 23,
          "message": "Function 'useSelector' has cognitive complexity of 23 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/hooks/useUserBarangay.ts",
      "lineCount": 124,
      "functions": [
        {
          "name": "useUserBarangay",
          "startLine": 19,
          "endLine": 91,
          "code": "export function useUserBarangay(): UserBarangayInfo {\n  const { userProfile, loading: authLoading, user } = useAuth();\n  const [address, setAddress] = useState<AddressHierarchy | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadBarangayAddress = async () => {\n      // Wait for auth to load\n      if (authLoading) {\n        logDebug('waiting for auth to load', { component: 'useUserBarangay' });\n        return;\n      }\n\n      // User must be authenticated\n      if (!user) {\n        logDebug('user not authenticated, skipping barangay load', { component: 'useUserBarangay' });\n        setError(null); // Don't show error for unauthenticated users - let ProtectedRoute handle it\n        setLoading(false);\n        return;\n      }\n\n      // User must have a barangay assignment\n      if (!userProfile?.barangay_code) {\n        logDebug('no barangay assignment found', { component: 'useUserBarangay' });\n        setError('No barangay assignment found. Please contact your administrator.');\n        setLoading(false);\n        setAddress(null);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Get complete address hierarchy for the user's barangay\n        logDebug('Loading address for barangay code', { \n          component: 'useUserBarangay', \n          data: { barangayCode: userProfile.barangay_code } \n        });\n        const addressData = await getCompleteAddress(userProfile.barangay_code);\n\n        if (addressData) {\n          logDataLoad('barangay address', 1);\n          setAddress(addressData);\n        } else {\n          logError('No address data returned', { \n            component: 'useUserBarangay', \n            data: { barangayCode: userProfile.barangay_code } \n          });\n          setError('Unable to load barangay address information');\n        }\n      } catch (err) {\n        logError('Error loading barangay address', { \n          component: 'useUserBarangay', \n          error: err as Error \n        });\n        setError('Failed to load barangay information');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadBarangayAddress();\n  }, [authLoading, user, userProfile]);\n\n  return {\n    barangayCode: userProfile?.barangay_code || null,\n    address,\n    loading: authLoading || loading,\n    error,\n  };\n}\n",
          "filePath": "src/hooks/useUserBarangay.ts",
          "lineCount": 73,
          "cyclomaticComplexity": 9,
          "cognitiveComplexity": 12
        },
        {
          "name": "useBarangayAccess",
          "startLine": 96,
          "endLine": 99,
          "code": "export function useBarangayAccess(barangayCode: string): boolean {\n  const { canAccessBarangay } = useAuth();\n  return canAccessBarangay(barangayCode);\n}\n",
          "filePath": "src/hooks/useUserBarangay.ts",
          "lineCount": 4,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "useUserBarangays",
          "startLine": 104,
          "endLine": 123,
          "code": "export function useUserBarangays() {\n  const { userProfile, loading } = useAuth();\n\n  // For now, return the user's single barangay assignment\n  // In the future, this could support multiple barangay access\n  const barangayAccounts = userProfile?.barangay_code\n    ? [\n        {\n          barangay_code: userProfile.barangay_code,\n          is_primary: true,\n        },\n      ]\n    : [];\n\n  return {\n    barangayAccounts,\n    barangayCodes: barangayAccounts.map(account => account.barangay_code),\n    loading,\n  };\n}\n",
          "filePath": "src/hooks/useUserBarangay.ts",
          "lineCount": 20,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "useUserBarangay",
          "line": 19,
          "message": "Function 'useUserBarangay' has 73 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/lib/accessibility.ts",
      "lineCount": 320,
      "functions": [
        {
          "name": "useFocusTrap",
          "startLine": 12,
          "endLine": 81,
          "code": "export function useFocusTrap(isActive: boolean = false) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const previouslyFocusedElement = useRef<HTMLElement | null>(null);\n\n  useEffect(() => {\n    if (!isActive || !containerRef.current) return;\n\n    // Store the currently focused element\n    previouslyFocusedElement.current = document.activeElement as HTMLElement;\n\n    // Get all focusable elements within the container\n    const getFocusableElements = () => {\n      if (!containerRef.current) return [];\n\n      const focusableSelectors = [\n        'a[href]',\n        'button:not([disabled])',\n        'textarea:not([disabled])',\n        'input:not([disabled])',\n        'select:not([disabled])',\n        '[tabindex]:not([tabindex=\"-1\"])',\n      ].join(',');\n\n      return Array.from(\n        containerRef.current.querySelectorAll<HTMLElement>(focusableSelectors)\n      ).filter(el => el.offsetParent !== null); // Filter out hidden elements\n    };\n\n    // Focus the first focusable element\n    const focusableElements = getFocusableElements();\n    if (focusableElements.length > 0) {\n      focusableElements[0].focus();\n    }\n\n    // Handle Tab key navigation\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key !== 'Tab') return;\n\n      const focusableElements = getFocusableElements();\n      if (focusableElements.length === 0) return;\n\n      const firstElement = focusableElements[0];\n      const lastElement = focusableElements[focusableElements.length - 1];\n\n      // Shift+Tab on first element -> focus last element\n      if (event.shiftKey && document.activeElement === firstElement) {\n        event.preventDefault();\n        lastElement.focus();\n      }\n      // Tab on last element -> focus first element\n      else if (!event.shiftKey && document.activeElement === lastElement) {\n        event.preventDefault();\n        firstElement.focus();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n\n      // Restore focus to the previously focused element\n      if (previouslyFocusedElement.current) {\n        previouslyFocusedElement.current.focus();\n      }\n    };\n  }, [isActive]);\n\n  return containerRef;\n}\n",
          "filePath": "src/lib/accessibility.ts",
          "lineCount": 70,
          "cyclomaticComplexity": 14,
          "cognitiveComplexity": 21
        },
        {
          "name": "useArrowKeyNavigation",
          "startLine": 87,
          "endLine": 148,
          "code": "export function useArrowKeyNavigation(itemsCount: number, onSelect?: (index: number) => void) {\n  const currentIndex = useRef(0);\n  const containerRef = useRef<HTMLElement>(null);\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (!containerRef.current) return;\n\n      const items = Array.from(\n        containerRef.current.querySelectorAll('[role=\"option\"], [role=\"menuitem\"], [role=\"tab\"]')\n      ) as HTMLElement[];\n\n      if (items.length === 0) return;\n\n      let nextIndex = currentIndex.current;\n\n      switch (event.key) {\n        case 'ArrowDown':\n          event.preventDefault();\n          nextIndex = Math.min(currentIndex.current + 1, items.length - 1);\n          break;\n        case 'ArrowUp':\n          event.preventDefault();\n          nextIndex = Math.max(currentIndex.current - 1, 0);\n          break;\n        case 'Home':\n          event.preventDefault();\n          nextIndex = 0;\n          break;\n        case 'End':\n          event.preventDefault();\n          nextIndex = items.length - 1;\n          break;\n        case 'Enter':\n        case ' ':\n          event.preventDefault();\n          if (onSelect) {\n            onSelect(currentIndex.current);\n          }\n          break;\n        default:\n          return;\n      }\n\n      if (nextIndex !== currentIndex.current) {\n        currentIndex.current = nextIndex;\n        items[nextIndex]?.focus();\n      }\n    },\n    [onSelect]\n  );\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    container.addEventListener('keydown', handleKeyDown);\n    return () => container.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n\n  return containerRef;\n}\n",
          "filePath": "src/lib/accessibility.ts",
          "lineCount": 62,
          "cyclomaticComplexity": 14,
          "cognitiveComplexity": 19
        },
        {
          "name": "announceToScreenReader",
          "startLine": 153,
          "endLine": 154,
          "code": "export function announceToScreenReader(\n  message: string,\n",
          "filePath": "src/lib/accessibility.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "useUniqueId",
          "startLine": 175,
          "endLine": 183,
          "code": "export function useUniqueId(prefix: string = 'id'): string {\n  const idRef = useRef<string | undefined>(undefined);\n\n  if (!idRef.current) {\n    idRef.current = `${prefix}-${Math.random().toString(36).substring(2, 11)}`;\n  }\n\n  return idRef.current;\n}\n",
          "filePath": "src/lib/accessibility.ts",
          "lineCount": 9,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 4
        },
        {
          "name": "prefersReducedMotion",
          "startLine": 188,
          "endLine": 193,
          "code": "export function prefersReducedMotion(): boolean {\n  if (typeof window === 'undefined') return false;\n\n  const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n  return mediaQuery.matches;\n}\n",
          "filePath": "src/lib/accessibility.ts",
          "lineCount": 6,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 3
        },
        {
          "name": "getTransitionDuration",
          "startLine": 198,
          "endLine": 199,
          "code": "export function getTransitionDuration(\n  defaultDuration: number = 300,\n",
          "filePath": "src/lib/accessibility.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "expanded",
          "startLine": 210,
          "endLine": 212,
          "code": "  expanded: (isExpanded: boolean) => ({\n    'aria-expanded': isExpanded,\n  }),\n",
          "filePath": "src/lib/accessibility.ts",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "selected",
          "startLine": 215,
          "endLine": 217,
          "code": "  selected: (isSelected: boolean) => ({\n    'aria-selected': isSelected,\n  }),\n",
          "filePath": "src/lib/accessibility.ts",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "checked",
          "startLine": 220,
          "endLine": 222,
          "code": "  checked: (isChecked: boolean | 'mixed') => ({\n    'aria-checked': isChecked,\n  }),\n",
          "filePath": "src/lib/accessibility.ts",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "current",
          "startLine": 225,
          "endLine": 227,
          "code": "  current: (isCurrent: boolean | 'page' | 'step' | 'location' | 'date' | 'time') => ({\n    'aria-current': isCurrent || undefined,\n  }),\n",
          "filePath": "src/lib/accessibility.ts",
          "lineCount": 3,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "disabled",
          "startLine": 230,
          "endLine": 232,
          "code": "  disabled: (isDisabled: boolean) => ({\n    'aria-disabled': isDisabled,\n  }),\n",
          "filePath": "src/lib/accessibility.ts",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "invalid",
          "startLine": 235,
          "endLine": 237,
          "code": "  invalid: (isInvalid: boolean) => ({\n    'aria-invalid': isInvalid || undefined,\n  }),\n",
          "filePath": "src/lib/accessibility.ts",
          "lineCount": 3,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "buttonOrLink",
          "startLine": 257,
          "endLine": 262,
          "code": "  buttonOrLink: (href?: string) => {\n    if (href) {\n      return { as: 'a', href } as const;\n    }\n    return { as: 'button', type: 'button' } as const;\n  },\n",
          "filePath": "src/lib/accessibility.ts",
          "lineCount": 6,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3
        },
        {
          "name": "heading",
          "startLine": 265,
          "endLine": 267,
          "code": "  heading: (level: 1 | 2 | 3 | 4 | 5 | 6) => {\n    return `h${level}` as 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n  },\n",
          "filePath": "src/lib/accessibility.ts",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "preventDefaultForKeys",
          "startLine": 295,
          "endLine": 301,
          "code": "  preventDefaultForKeys: (keys: string[]) => {\n    return (event: React.KeyboardEvent) => {\n      if (keys.includes(event.key)) {\n        event.preventDefault();\n      }\n    };\n  },\n",
          "filePath": "src/lib/accessibility.ts",
          "lineCount": 7,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2
        },
        {
          "name": "visuallyHidden",
          "startLine": 307,
          "endLine": 319,
          "code": "export function visuallyHidden(): React.CSSProperties {\n  return {\n    position: 'absolute',\n    width: '1px',\n    height: '1px',\n    padding: 0,\n    margin: '-1px',\n    overflow: 'hidden',\n    clip: 'rect(0, 0, 0, 0)',\n    whiteSpace: 'nowrap',\n    borderWidth: 0,\n  };\n}\n",
          "filePath": "src/lib/accessibility.ts",
          "lineCount": 13,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 320 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "useFocusTrap",
          "line": 12,
          "message": "Function 'useFocusTrap' has 70 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "useFocusTrap",
          "line": 12,
          "complexity": 14,
          "message": "Function 'useFocusTrap' has cyclomatic complexity of 14 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "useFocusTrap",
          "line": 12,
          "complexity": 21,
          "message": "Function 'useFocusTrap' has cognitive complexity of 21 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "useArrowKeyNavigation",
          "line": 87,
          "message": "Function 'useArrowKeyNavigation' has 62 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "useArrowKeyNavigation",
          "line": 87,
          "complexity": 14,
          "message": "Function 'useArrowKeyNavigation' has cyclomatic complexity of 14 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "useArrowKeyNavigation",
          "line": 87,
          "complexity": 19,
          "message": "Function 'useArrowKeyNavigation' has cognitive complexity of 19 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/lib/api-audit.ts",
      "lineCount": 445,
      "functions": [
        {
          "name": "maskSensitiveData",
          "startLine": 107,
          "endLine": 130,
          "code": "function maskSensitiveData(data: any): any {\n  if (!data || typeof data !== 'object') {\n    return data;\n  }\n\n  const sensitiveFields = [\n    'password', 'token', 'ssn', 'social_security',\n    'credit_card', 'bank_account', 'api_key',\n    'secret', 'private_key', 'access_token'\n  ];\n\n  const masked = { ...data };\n  \n  Object.keys(masked).forEach(key => {\n    const lowerKey = key.toLowerCase();\n    if (sensitiveFields.some(field => lowerKey.includes(field))) {\n      masked[key] = '***REDACTED***';\n    } else if (typeof masked[key] === 'object') {\n      masked[key] = maskSensitiveData(masked[key]);\n    }\n  });\n\n  return masked;\n}\n",
          "filePath": "src/lib/api-audit.ts",
          "lineCount": 24,
          "cyclomaticComplexity": 7,
          "cognitiveComplexity": 10
        },
        {
          "name": "getEventSeverity",
          "startLine": 135,
          "endLine": 179,
          "code": "function getEventSeverity(eventType: AuditEventType): AuditSeverity {\n  const severityMap: Record<AuditEventType, AuditSeverity> = {\n    // Critical security events\n    [AuditEventType.SQL_INJECTION_ATTEMPT]: AuditSeverity.CRITICAL,\n    [AuditEventType.PERMISSION_ESCALATION]: AuditSeverity.CRITICAL,\n    [AuditEventType.SUSPICIOUS_ACTIVITY]: AuditSeverity.CRITICAL,\n    \n    // High severity events\n    [AuditEventType.LOGIN_FAILED]: AuditSeverity.HIGH,\n    [AuditEventType.ACCESS_DENIED]: AuditSeverity.HIGH,\n    [AuditEventType.RATE_LIMIT_EXCEEDED]: AuditSeverity.HIGH,\n    [AuditEventType.USER_DELETE]: AuditSeverity.HIGH,\n    [AuditEventType.ROLE_CHANGE]: AuditSeverity.HIGH,\n    [AuditEventType.DATA_EXPORT]: AuditSeverity.HIGH,\n    \n    // Medium severity events\n    [AuditEventType.LOGIN_SUCCESS]: AuditSeverity.MEDIUM,\n    [AuditEventType.USER_CREATE]: AuditSeverity.MEDIUM,\n    [AuditEventType.USER_UPDATE]: AuditSeverity.MEDIUM,\n    [AuditEventType.RESIDENT_DELETE]: AuditSeverity.MEDIUM,\n    [AuditEventType.HOUSEHOLD_DELETE]: AuditSeverity.MEDIUM,\n    [AuditEventType.DATA_IMPORT]: AuditSeverity.MEDIUM,\n    \n    // Low severity events\n    [AuditEventType.LOGOUT]: AuditSeverity.LOW,\n    [AuditEventType.RESIDENT_VIEW]: AuditSeverity.LOW,\n    [AuditEventType.RESIDENT_CREATE]: AuditSeverity.LOW,\n    [AuditEventType.RESIDENT_UPDATE]: AuditSeverity.LOW,\n    [AuditEventType.HOUSEHOLD_CREATE]: AuditSeverity.LOW,\n    [AuditEventType.HOUSEHOLD_UPDATE]: AuditSeverity.LOW,\n    [AuditEventType.TOKEN_REFRESH]: AuditSeverity.LOW,\n    [AuditEventType.ACCESS_GRANTED]: AuditSeverity.LOW,\n    [AuditEventType.PASSWORD_CHANGE]: AuditSeverity.LOW,\n    [AuditEventType.USER_ACTIVATE]: AuditSeverity.LOW,\n    [AuditEventType.USER_DEACTIVATE]: AuditSeverity.LOW,\n    [AuditEventType.API_ERROR]: AuditSeverity.LOW,\n    [AuditEventType.DATABASE_ERROR]: AuditSeverity.LOW,\n    [AuditEventType.EXTERNAL_SERVICE_ERROR]: AuditSeverity.LOW,\n    [AuditEventType.INVALID_TOKEN]: AuditSeverity.LOW,\n    [AuditEventType.CSRF_VIOLATION]: AuditSeverity.LOW,\n    [AuditEventType.BULK_OPERATION]: AuditSeverity.LOW\n  };\n\n  return severityMap[eventType] || AuditSeverity.LOW;\n}\n",
          "filePath": "src/lib/api-audit.ts",
          "lineCount": 45,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2
        },
        {
          "name": "createAuditQuery",
          "startLine": 392,
          "endLine": 445,
          "code": "export function createAuditQuery(filters: {\n  userId?: string;\n  eventType?: AuditEventType;\n  severity?: AuditSeverity;\n  startDate?: string;\n  endDate?: string;\n  ipAddress?: string;\n  resourceType?: string;\n  outcome?: 'success' | 'failure';\n}) {\n  const supabaseAdmin = createClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.SUPABASE_SERVICE_ROLE_KEY!\n  );\n\n  let query = supabaseAdmin\n    .from('audit_logs')\n    .select('*')\n    .order('timestamp', { ascending: false });\n\n  if (filters.userId) {\n    query = query.eq('user_id', filters.userId);\n  }\n  \n  if (filters.eventType) {\n    query = query.eq('event_type', filters.eventType);\n  }\n  \n  if (filters.severity) {\n    query = query.eq('severity', filters.severity);\n  }\n  \n  if (filters.startDate) {\n    query = query.gte('timestamp', filters.startDate);\n  }\n  \n  if (filters.endDate) {\n    query = query.lte('timestamp', filters.endDate);\n  }\n  \n  if (filters.ipAddress) {\n    query = query.eq('ip_address', filters.ipAddress);\n  }\n  \n  if (filters.resourceType) {\n    query = query.eq('resource_type', filters.resourceType);\n  }\n  \n  if (filters.outcome) {\n    query = query.eq('outcome', filters.outcome);\n  }\n\n  return query;\n}\n",
          "filePath": "src/lib/api-audit.ts",
          "lineCount": 54,
          "cyclomaticComplexity": 17,
          "cognitiveComplexity": 33
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 445 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "getEventSeverity",
          "line": 135,
          "message": "Function 'getEventSeverity' has 45 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "createAuditQuery",
          "line": 392,
          "message": "Function 'createAuditQuery' has 54 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "createAuditQuery",
          "line": 392,
          "complexity": 17,
          "message": "Function 'createAuditQuery' has cyclomatic complexity of 17 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "createAuditQuery",
          "line": 392,
          "complexity": 33,
          "message": "Function 'createAuditQuery' has cognitive complexity of 33 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/lib/api-auth.ts",
      "lineCount": 369,
      "functions": [
        {
          "name": "extractBearerToken",
          "startLine": 39,
          "endLine": 47,
          "code": "function extractBearerToken(request: NextRequest): string | null {\n  const authHeader = request.headers.get('Authorization') || request.headers.get('authorization');\n  \n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return null;\n  }\n  \n  return authHeader.split(' ')[1];\n}\n",
          "filePath": "src/lib/api-auth.ts",
          "lineCount": 9,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 6
        },
        {
          "name": "getClientIP",
          "startLine": 52,
          "endLine": 57,
          "code": "function getClientIP(request: NextRequest): string {\n  const forwarded = request.headers.get('x-forwarded-for');\n  const realIp = request.headers.get('x-real-ip');\n  const ip = forwarded?.split(',')[0] || realIp || 'unknown';\n  return ip;\n}\n",
          "filePath": "src/lib/api-auth.ts",
          "lineCount": 6,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 2
        },
        {
          "name": "hasPermission",
          "startLine": 62,
          "endLine": 65,
          "code": "export function hasPermission(userRole: Role, requiredPermission: string): boolean {\n  const rolePermissions = ROLE_PERMISSIONS[userRole] || [];\n  return rolePermissions.includes(requiredPermission);\n}\n",
          "filePath": "src/lib/api-auth.ts",
          "lineCount": 4,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2
        },
        {
          "name": "hasAnyPermission",
          "startLine": 70,
          "endLine": 72,
          "code": "export function hasAnyPermission(userRole: Role, requiredPermissions: string[]): boolean {\n  return requiredPermissions.some(permission => hasPermission(userRole, permission));\n}\n",
          "filePath": "src/lib/api-auth.ts",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "getAccessLevel",
          "startLine": 77,
          "endLine": 89,
          "code": "export function getAccessLevel(userRole: Role): 'national' | 'region' | 'province' | 'city' | 'barangay' {\n  const accessLevels: Record<Role, 'national' | 'region' | 'province' | 'city' | 'barangay'> = {\n    [Role.SUPER_ADMIN]: 'national',\n    [Role.REGION_ADMIN]: 'region',\n    [Role.PROVINCE_ADMIN]: 'province',\n    [Role.CITY_ADMIN]: 'city',\n    [Role.BARANGAY_ADMIN]: 'barangay',\n    [Role.BARANGAY_STAFF]: 'barangay',\n    [Role.RESIDENT]: 'barangay'\n  };\n  \n  return accessLevels[userRole] || 'barangay';\n}\n",
          "filePath": "src/lib/api-auth.ts",
          "lineCount": 13,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2
        },
        {
          "name": "withAuth",
          "startLine": 278,
          "endLine": 279,
          "code": "export function withAuth(\n  config: AuthConfig,\n",
          "filePath": "src/lib/api-auth.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "handler",
          "startLine": 280,
          "endLine": 304,
          "code": "  handler: (request: NextRequest, context: RequestContext, user: NonNullable<AuthResult['user']>) => Promise<Response>\n) {\n  return async (request: Request): Promise<Response> => {\n    const nextRequest = request as NextRequest;\n    const authResult = await authenticate(nextRequest, config);\n    \n    if (!authResult.success) {\n      return new Response(\n        JSON.stringify({\n          error: authResult.error,\n          timestamp: new Date().toISOString(),\n          path: nextRequest.nextUrl?.pathname || new URL(request.url).pathname\n        }),\n        {\n          status: authResult.error!.status,\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n    }\n    \n    return handler(nextRequest, authResult.context!, authResult.user!);\n  };\n}\n",
          "filePath": "src/lib/api-auth.ts",
          "lineCount": 25,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3
        },
        {
          "name": "createAuthorizedSupabaseClient",
          "startLine": 309,
          "endLine": 321,
          "code": "export function createAuthorizedSupabaseClient(token: string) {\n  return createClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      global: {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }\n    }\n  );\n}\n",
          "filePath": "src/lib/api-auth.ts",
          "lineCount": 13,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "createAdminSupabaseClient",
          "startLine": 326,
          "endLine": 331,
          "code": "export function createAdminSupabaseClient() {\n  return createClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.SUPABASE_SERVICE_ROLE_KEY!\n  );\n}\n",
          "filePath": "src/lib/api-auth.ts",
          "lineCount": 6,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "applyGeographicFilter",
          "startLine": 336,
          "endLine": 337,
          "code": "export function applyGeographicFilter(\n  query: any,\n",
          "filePath": "src/lib/api-auth.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 369 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/lib/api-responses.ts",
      "lineCount": 456,
      "functions": [
        {
          "name": "createSuccessResponse",
          "startLine": 20,
          "endLine": 21,
          "code": "export function createSuccessResponse<T>(\n  data: T,\n",
          "filePath": "src/lib/api-responses.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "createPaginatedResponse",
          "startLine": 41,
          "endLine": 42,
          "code": "export function createPaginatedResponse<T>(\n  data: T[],\n",
          "filePath": "src/lib/api-responses.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "createErrorResponse",
          "startLine": 77,
          "endLine": 78,
          "code": "export function createErrorResponse(\n  code: ErrorCode,\n",
          "filePath": "src/lib/api-responses.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "createValidationErrorResponse",
          "startLine": 103,
          "endLine": 104,
          "code": "export function createValidationErrorResponse(\n  details: Array<{ field: string; message: string }>,\n",
          "filePath": "src/lib/api-responses.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "createUnauthorizedResponse",
          "startLine": 120,
          "endLine": 121,
          "code": "export function createUnauthorizedResponse(\n  message: string = 'Authentication required',\n",
          "filePath": "src/lib/api-responses.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "createForbiddenResponse",
          "startLine": 137,
          "endLine": 138,
          "code": "export function createForbiddenResponse(\n  message: string = 'Insufficient permissions',\n",
          "filePath": "src/lib/api-responses.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "createNotFoundResponse",
          "startLine": 154,
          "endLine": 155,
          "code": "export function createNotFoundResponse(\n  resource: string = 'Resource',\n",
          "filePath": "src/lib/api-responses.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "createConflictResponse",
          "startLine": 171,
          "endLine": 172,
          "code": "export function createConflictResponse(\n  message: string,\n",
          "filePath": "src/lib/api-responses.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "createRateLimitResponse",
          "startLine": 188,
          "endLine": 189,
          "code": "export function createRateLimitResponse(\n  retryAfter: number,\n",
          "filePath": "src/lib/api-responses.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "applySearchFilter",
          "startLine": 354,
          "endLine": 355,
          "code": "export function applySearchFilter(\n  query: any,\n",
          "filePath": "src/lib/api-responses.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "withErrorHandling",
          "startLine": 374,
          "endLine": 375,
          "code": "export function withErrorHandling<T extends any[]>(\n  handler: (request: Request, ...args: T) => Promise<Response>\n",
          "filePath": "src/lib/api-responses.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "createCreatedResponse",
          "startLine": 408,
          "endLine": 409,
          "code": "export function createCreatedResponse<T>(\n  data: T,\n",
          "filePath": "src/lib/api-responses.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "createNoContentResponse",
          "startLine": 429,
          "endLine": 431,
          "code": "export function createNoContentResponse(): Response {\n  return new Response(null, { status: 204 });\n}\n",
          "filePath": "src/lib/api-responses.ts",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "addSecurityHeaders",
          "startLine": 436,
          "endLine": 444,
          "code": "export function addSecurityHeaders(response: Response): Response {\n  response.headers.set('X-Content-Type-Options', 'nosniff');\n  response.headers.set('X-Frame-Options', 'DENY');\n  response.headers.set('X-XSS-Protection', '1; mode=block');\n  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n  response.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');\n  \n  return response;\n}\n",
          "filePath": "src/lib/api-responses.ts",
          "lineCount": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "withSecurityHeaders",
          "startLine": 449,
          "endLine": 450,
          "code": "export function withSecurityHeaders(\n  handler: (request: Request) => Promise<Response>\n",
          "filePath": "src/lib/api-responses.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 456 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/lib/api-validation.ts",
      "lineCount": 314,
      "functions": [
        {
          "name": "handleValidationError",
          "startLine": 204,
          "endLine": 219,
          "code": "export function handleValidationError(error: z.ZodError): {\n  code: ErrorCode;\n  message: string;\n  details: Array<{ field: string; message: string }>;\n} {\n  const details = error.errors.map(err => ({\n    field: err.path.join('.'),\n    message: err.message\n  }));\n\n  return {\n    code: ErrorCode.VALIDATION_ERROR,\n    message: 'Invalid input data',\n    details\n  };\n}\n",
          "filePath": "src/lib/api-validation.ts",
          "lineCount": 16,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "sanitizeSearchInput",
          "startLine": 224,
          "endLine": 231,
          "code": "export function sanitizeSearchInput(input: string): string {\n  return input\n    .replace(/[%_]/g, '\\\\$&') // Escape SQL wildcards\n    .replace(/['\"]/g, '') // Remove quotes\n    .replace(/[;\\\\]/g, '') // Remove dangerous characters\n    .trim()\n    .slice(0, 100); // Limit length\n}\n",
          "filePath": "src/lib/api-validation.ts",
          "lineCount": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "validatePagination",
          "startLine": 236,
          "endLine": 251,
          "code": "export function validatePagination(params: URLSearchParams): {\n  page: number;\n  limit: number;\n  offset: number;\n} {\n  const result = paginationSchema.parse({\n    page: params.get('page'),\n    limit: params.get('limit')\n  });\n\n  return {\n    page: result.page,\n    limit: result.limit,\n    offset: (result.page - 1) * result.limit\n  };\n}\n",
          "filePath": "src/lib/api-validation.ts",
          "lineCount": 16,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "validateSort",
          "startLine": 256,
          "endLine": 268,
          "code": "export function validateSort(params: URLSearchParams, allowedFields: string[]): {\n  field: string;\n  order: 'asc' | 'desc';\n} | null {\n  const sort = params.get('sort');\n  const order = params.get('order') as 'asc' | 'desc' || 'desc';\n\n  if (!sort || !allowedFields.includes(sort)) {\n    return null;\n  }\n\n  return { field: sort, order };\n}\n",
          "filePath": "src/lib/api-validation.ts",
          "lineCount": 13,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 5
        },
        {
          "name": "withValidation",
          "startLine": 273,
          "endLine": 274,
          "code": "export function withValidation<T>(\n  schema: z.ZodSchema<T>,\n",
          "filePath": "src/lib/api-validation.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "handler",
          "startLine": 275,
          "endLine": 302,
          "code": "  handler: (request: Request, validatedData: T) => Promise<Response>\n) {\n  return async (request: Request): Promise<Response> => {\n    try {\n      const body = await request.json();\n      const validatedData = schema.parse(body);\n      return handler(request, validatedData);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        const validationError = handleValidationError(error);\n        return new Response(\n          JSON.stringify({\n            error: validationError,\n            timestamp: new Date().toISOString(),\n            path: new URL(request.url).pathname\n          }),\n          {\n            status: 422,\n            headers: { 'Content-Type': 'application/json' }\n          }\n        );\n      }\n      \n      // Re-throw non-validation errors\n      throw error;\n    }\n  };\n}\n",
          "filePath": "src/lib/api-validation.ts",
          "lineCount": 28,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 5
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 314 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/lib/auth-errors.ts",
      "lineCount": 81,
      "functions": [
        {
          "name": "getErrorMessage",
          "startLine": 29,
          "endLine": 51,
          "code": "export function getErrorMessage(error: string): string {\n  // First try exact match\n  const exactMatch = AUTH_ERROR_MESSAGES[error as keyof typeof AUTH_ERROR_MESSAGES];\n  if (exactMatch) {\n    return exactMatch;\n  }\n  \n  // Try pattern matching for dynamic error messages\n  if (error.startsWith('User not found in authentication system with ID:')) {\n    return 'Account setup is taking longer than expected. Please try again in a few moments.';\n  }\n  \n  if (error.includes('Role \"') && error.includes('\" not found in system')) {\n    return 'System configuration error. Please contact technical support.';\n  }\n  \n  if (error.startsWith('Invalid or inactive barangay code:')) {\n    return 'The selected barangay is not valid or is currently inactive. Please choose a different barangay.';\n  }\n  \n  // Default fallback\n  return error;\n}\n",
          "filePath": "src/lib/auth-errors.ts",
          "lineCount": 23,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 14
        },
        {
          "name": "getStatusCodeForError",
          "startLine": 60,
          "endLine": 68,
          "code": "export function getStatusCodeForError(errorCode?: string): number {\n  const errorMap: Record<string, number> = {\n    'DUPLICATE_PROFILE': 409, // Conflict\n    'INVALID_REFERENCE': 400, // Bad Request\n    'USER_NOT_FOUND': 404,    // Not Found\n  };\n  \n  return errorMap[errorCode || ''] || 500; // Default to 500\n}\n",
          "filePath": "src/lib/auth-errors.ts",
          "lineCount": 9,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/lib/auth.ts",
      "lineCount": 458,
      "functions": [
        {
          "name": "registerUser",
          "startLine": 57,
          "endLine": 97,
          "code": "export const registerUser = async (data: RegistrationData) => {\n  try {\n    logger.debug('Starting user registration for:', data.email);\n\n    // 1. Create auth user\n    const { data: authData, error: authError } = await supabase.auth.signUp({\n      email: data.email,\n      password: data.password,\n      options: {\n        data: {\n          first_name: data.first_name,\n          last_name: data.last_name,\n          mobile_number: data.mobile_number,\n          barangay_code: data.barangay_code,\n        },\n      },\n    });\n\n    if (authError) {\n      logger.error('Auth registration failed:', authError.message);\n      throw authError;\n    }\n\n    if (!authData.user) {\n      throw new Error('User creation failed - no user returned');\n    }\n\n    // 2. The user profile will be automatically created by the database trigger\n    logger.info('User registered successfully:', data.email);\n    \n    return {\n      user: authData.user,\n      session: authData.session,\n      needsEmailConfirmation: !authData.session,\n    };\n\n  } catch (error) {\n    logger.error('Registration error:', error);\n    throw error;\n  }\n};\n",
          "filePath": "src/lib/auth.ts",
          "lineCount": 41,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 5
        },
        {
          "name": "signInUser",
          "startLine": 102,
          "endLine": 130,
          "code": "export const signInUser = async (email: string, password: string) => {\n  try {\n    logger.debug('Attempting sign in for:', email);\n\n    const { data, error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n\n    if (error) {\n      logger.error('Sign in failed:', error.message);\n      throw error;\n    }\n\n    // Get user profile\n    const profile = await getUserProfile(data.user.id);\n    \n    if (!profile?.is_active) {\n      throw new Error('Account is deactivated. Please contact your administrator.');\n    }\n\n    logger.info('User signed in successfully:', email);\n    return { user: data.user, session: data.session, profile };\n\n  } catch (error) {\n    logger.error('Sign in error:', error);\n    throw error;\n  }\n};\n",
          "filePath": "src/lib/auth.ts",
          "lineCount": 29,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 5
        },
        {
          "name": "signOutUser",
          "startLine": 135,
          "endLine": 144,
          "code": "export const signOutUser = async () => {\n  try {\n    const { error } = await supabase.auth.signOut();\n    if (error) throw error;\n    logger.info('User signed out successfully');\n  } catch (error) {\n    logger.error('Sign out error:', error);\n    throw error;\n  }\n};\n",
          "filePath": "src/lib/auth.ts",
          "lineCount": 10,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 2
        },
        {
          "name": "updateUserProfile",
          "startLine": 177,
          "endLine": 205,
          "code": "export const updateUserProfile = async (updates: Partial<UserProfile>) => {\n  try {\n    const { data: user } = await supabase.auth.getUser();\n    if (!user.user) throw new Error('Not authenticated');\n\n    // Only allow updating specific fields\n    const allowedUpdates = {\n      first_name: updates.first_name,\n      last_name: updates.last_name,\n      mobile_number: updates.mobile_number,\n      updated_at: new Date().toISOString(),\n    };\n\n    const { data, error } = await supabase\n      .from('auth_user_profiles')\n      .update(allowedUpdates)\n      .eq('id', user.user.id)\n      .select()\n      .single();\n\n    if (error) throw error;\n\n    logger.info('User profile updated successfully');\n    return data;\n  } catch (error) {\n    logger.error('Update profile error:', error);\n    throw error;\n  }\n};\n",
          "filePath": "src/lib/auth.ts",
          "lineCount": 29,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 3
        },
        {
          "name": "requestPasswordReset",
          "startLine": 210,
          "endLine": 220,
          "code": "export const requestPasswordReset = async (email: string) => {\n  try {\n    const { error } = await supabase.auth.resetPasswordForEmail(email);\n    if (error) throw error;\n    \n    logger.info('Password reset requested for:', email);\n  } catch (error) {\n    logger.error('Password reset error:', error);\n    throw error;\n  }\n};\n",
          "filePath": "src/lib/auth.ts",
          "lineCount": 11,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 2
        },
        {
          "name": "updatePassword",
          "startLine": 225,
          "endLine": 238,
          "code": "export const updatePassword = async (newPassword: string) => {\n  try {\n    const { error } = await supabase.auth.updateUser({\n      password: newPassword,\n    });\n    \n    if (error) throw error;\n    \n    logger.info('Password updated successfully');\n  } catch (error) {\n    logger.error('Password update error:', error);\n    throw error;\n  }\n};\n",
          "filePath": "src/lib/auth.ts",
          "lineCount": 14,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 2
        },
        {
          "name": "getUserAccessibleBarangays",
          "startLine": 279,
          "endLine": 290,
          "code": "export const getUserAccessibleBarangays = async () => {\n  try {\n    const { data, error } = await supabase.rpc('get_user_accessible_barangays');\n    \n    if (error) throw error;\n    \n    return data || [];\n  } catch (error) {\n    logger.error('Error getting accessible barangays:', error);\n    return [];\n  }\n};\n",
          "filePath": "src/lib/auth.ts",
          "lineCount": 12,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 3
        },
        {
          "name": "callback",
          "startLine": 327,
          "endLine": 329,
          "code": "export const onAuthStateChange = (callback: (event: string, session: Session | null) => void) => {\n  return supabase.auth.onAuthStateChange(callback);\n};\n",
          "filePath": "src/lib/auth.ts",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "getRegions",
          "startLine": 338,
          "endLine": 346,
          "code": "export const getRegions = async () => {\n  const { data, error } = await supabase\n    .from('psgc_regions')\n    .select('code, name')\n    .order('name');\n    \n  if (error) throw error;\n  return data;\n};\n",
          "filePath": "src/lib/auth.ts",
          "lineCount": 9,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "getProvincesByRegion",
          "startLine": 351,
          "endLine": 360,
          "code": "export const getProvincesByRegion = async (regionCode: string) => {\n  const { data, error } = await supabase\n    .from('psgc_provinces')\n    .select('code, name')\n    .eq('region_code', regionCode)\n    .order('name');\n    \n  if (error) throw error;\n  return data;\n};\n",
          "filePath": "src/lib/auth.ts",
          "lineCount": 10,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "getCitiesByProvince",
          "startLine": 365,
          "endLine": 374,
          "code": "export const getCitiesByProvince = async (provinceCode: string) => {\n  const { data, error } = await supabase\n    .from('psgc_cities_municipalities')\n    .select('code, name, type')\n    .eq('province_code', provinceCode)\n    .order('name');\n    \n  if (error) throw error;\n  return data;\n};\n",
          "filePath": "src/lib/auth.ts",
          "lineCount": 10,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "getBarangaysByCity",
          "startLine": 379,
          "endLine": 388,
          "code": "export const getBarangaysByCity = async (cityCode: string) => {\n  const { data, error } = await supabase\n    .from('psgc_barangays')\n    .select('code, name')\n    .eq('city_municipality_code', cityCode)\n    .order('name');\n    \n  if (error) throw error;\n  return data;\n};\n",
          "filePath": "src/lib/auth.ts",
          "lineCount": 10,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "searchBarangays",
          "startLine": 393,
          "endLine": 409,
          "code": "export const searchBarangays = async (searchTerm: string, limit = 10) => {\n  const { data, error } = await supabase\n    .from('psgc_barangays')\n    .select(`\n      code, \n      name,\n      city_municipality_code,\n      psgc_cities_municipalities(name, type),\n      psgc_cities_municipalities.psgc_provinces(name),\n      psgc_cities_municipalities.psgc_provinces.psgc_regions(name)\n    `)\n    .ilike('name', `%${searchTerm}%`)\n    .limit(limit);\n    \n  if (error) throw error;\n  return data;\n};\n",
          "filePath": "src/lib/auth.ts",
          "lineCount": 17,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "searchOccupations",
          "startLine": 414,
          "endLine": 423,
          "code": "export const searchOccupations = async (searchTerm: string, limit = 10) => {\n  const { data, error } = await supabase\n    .from('psoc_unified_search')\n    .select('psoc_code, occupation_title, psoc_level, parent_title')\n    .ilike('search_text', `%${searchTerm}%`)\n    .limit(limit);\n    \n  if (error) throw error;\n  return data;\n};\n",
          "filePath": "src/lib/auth.ts",
          "lineCount": 10,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 458 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "registerUser",
          "line": 57,
          "message": "Function 'registerUser' has 41 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/lib/client-logger.ts",
      "lineCount": 236,
      "functions": [
        {
          "name": "logDebug",
          "startLine": 177,
          "endLine": 178,
          "code": "export const logDebug = (message: string, context?: LogContext) => clientLogger.debug(message, context);\n/**\n",
          "filePath": "src/lib/client-logger.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "logInfo",
          "startLine": 184,
          "endLine": 185,
          "code": "export const logInfo = (message: string, context?: LogContext) => clientLogger.info(message, context);\n/**\n",
          "filePath": "src/lib/client-logger.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "logWarn",
          "startLine": 191,
          "endLine": 192,
          "code": "export const logWarn = (message: string, context?: LogContext) => clientLogger.warn(message, context);\n/**\n",
          "filePath": "src/lib/client-logger.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "logError",
          "startLine": 198,
          "endLine": 199,
          "code": "export const logError = (message: string, context?: LogContext) => clientLogger.error(message, context);\n/**\n",
          "filePath": "src/lib/client-logger.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "logComponent",
          "startLine": 205,
          "endLine": 206,
          "code": "export const logComponent = (component: string, action: string, data?: any) => clientLogger.component(component, action, data);\n/**\n",
          "filePath": "src/lib/client-logger.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "logApi",
          "startLine": 212,
          "endLine": 213,
          "code": "export const logApi = (method: string, url: string, status?: number, duration?: number) => clientLogger.api(method, url, status, duration);\n/**\n",
          "filePath": "src/lib/client-logger.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "logUserAction",
          "startLine": 219,
          "endLine": 220,
          "code": "export const logUserAction = (action: string, component?: string, data?: any) => clientLogger.userAction(action, component, data);\n/**\n",
          "filePath": "src/lib/client-logger.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "logSearch",
          "startLine": 226,
          "endLine": 227,
          "code": "export const logSearch = (searchTerm: string, component: string, resultsCount?: number) => clientLogger.search(searchTerm, component, resultsCount);\n/**\n",
          "filePath": "src/lib/client-logger.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "logDataLoad",
          "startLine": 233,
          "endLine": 234,
          "code": "export const logDataLoad = (resource: string, count?: number, duration?: number) => clientLogger.dataLoad(resource, count, duration);\n\n",
          "filePath": "src/lib/client-logger.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/lib/constants/resident-enums.ts",
      "lineCount": 132,
      "functions": [
        {
          "name": "extractValues",
          "startLine": 121,
          "endLine": 122,
          "code": "export const extractValues = (options: { value: string; label: string }[]) => \n  options.map(option => option.value).filter(value => value !== '');\n",
          "filePath": "src/lib/constants/resident-enums.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "getLabelByValue",
          "startLine": 131,
          "endLine": 132,
          "code": "export const getLabelByValue = (options: { value: string; label: string }[], value: string) =>\n  options.find(option => option.value === value)?.label || value;\n",
          "filePath": "src/lib/constants/resident-enums.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/lib/crypto.ts",
      "lineCount": 107,
      "functions": [
        {
          "name": "extractPhilSysLast4",
          "startLine": 29,
          "endLine": 42,
          "code": "export function extractPhilSysLast4(philsysNumber: string): string {\n  if (!philsysNumber) {\n    throw new Error('PhilSys card number is required');\n  }\n\n  // Remove all non-digit characters and get last 4 digits\n  const digitsOnly = philsysNumber.replace(/\\D/g, '');\n\n  if (digitsOnly.length < 4) {\n    throw new Error('PhilSys card number must contain at least 4 digits');\n  }\n\n  return digitsOnly.slice(-4);\n}\n",
          "filePath": "src/lib/crypto.ts",
          "lineCount": 14,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 7
        },
        {
          "name": "maskPhilSysNumber",
          "startLine": 49,
          "endLine": 56,
          "code": "export function maskPhilSysNumber(philsysNumber: string): string {\n  if (!philsysNumber) {\n    return '';\n  }\n\n  const last4 = extractPhilSysLast4(philsysNumber);\n  return `****-****-****-${last4}`;\n}\n",
          "filePath": "src/lib/crypto.ts",
          "lineCount": 8,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 4
        },
        {
          "name": "validatePhilSysFormat",
          "startLine": 63,
          "endLine": 71,
          "code": "export function validatePhilSysFormat(philsysNumber: string): boolean {\n  if (!philsysNumber) {\n    return false;\n  }\n\n  // PhilSys format: 1234-5678-9012-3456 (16 digits with dashes)\n  const philsysPattern = /^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/;\n  return philsysPattern.test(philsysNumber);\n}\n",
          "filePath": "src/lib/crypto.ts",
          "lineCount": 9,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 4
        },
        {
          "name": "logSecurityOperation",
          "startLine": 85,
          "endLine": 86,
          "code": "export function logSecurityOperation(\n  operation: string,\n",
          "filePath": "src/lib/crypto.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/lib/csrf.ts",
      "lineCount": 216,
      "functions": [
        {
          "name": "validateCSRFSecret",
          "startLine": 11,
          "endLine": 17,
          "code": "function validateCSRFSecret() {\n  if (!CSRF_SECRET && process.env.NODE_ENV === 'production') {\n    throw new Error(\n      'CSRF_SECRET environment variable must be set in production. Generate a secure random string of at least 32 characters.'\n    );\n  }\n}\n",
          "filePath": "src/lib/csrf.ts",
          "lineCount": 7,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 5
        },
        {
          "name": "toBase64Url",
          "startLine": 27,
          "endLine": 29,
          "code": "function toBase64Url(str: string): string {\n  return str.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n",
          "filePath": "src/lib/csrf.ts",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "generateCSRFToken",
          "startLine": 41,
          "endLine": 59,
          "code": "export function generateCSRFToken(): CSRFToken {\n  validateCSRFSecret();\n  const timestamp = Date.now();\n  const randomToken = toBase64Url(randomBytes(32).toString('base64'));\n\n  // Create signature using HMAC\n  const data = `${randomToken}:${timestamp}`;\n  const signature = toBase64Url(\n    createHash('sha256')\n      .update(data + SECRET)\n      .digest('base64')\n  );\n\n  return {\n    token: randomToken,\n    timestamp,\n    signature,\n  };\n}\n",
          "filePath": "src/lib/csrf.ts",
          "lineCount": 19,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "verifyCSRFToken",
          "startLine": 74,
          "endLine": 104,
          "code": "export function verifyCSRFToken(token: string, timestamp: number, signature: string): boolean {\n  try {\n    validateCSRFSecret();\n    // Check if token has expired\n    if (Date.now() - timestamp > TOKEN_EXPIRY) {\n      console.warn('[CSRF] Token expired');\n      return false;\n    }\n\n    // Recreate the signature\n    const data = `${token}:${timestamp}`;\n    const expectedSignature = toBase64Url(\n      createHash('sha256')\n        .update(data + SECRET)\n        .digest('base64')\n    );\n\n    // Use timing-safe comparison to prevent timing attacks\n    const expectedBuffer = Buffer.from(expectedSignature, 'base64');\n    const actualBuffer = Buffer.from(signature, 'base64');\n\n    if (expectedBuffer.length !== actualBuffer.length) {\n      return false;\n    }\n\n    return timingSafeEqual(expectedBuffer, actualBuffer);\n  } catch (error) {\n    console.error('[CSRF] Token verification error:', error);\n    return false;\n  }\n}\n",
          "filePath": "src/lib/csrf.ts",
          "lineCount": 31,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 10
        },
        {
          "name": "createCSRFTokenString",
          "startLine": 110,
          "endLine": 113,
          "code": "export function createCSRFTokenString(): string {\n  const csrfData = generateCSRFToken();\n  return `${csrfData.token}:${csrfData.timestamp}:${csrfData.signature}`;\n}\n",
          "filePath": "src/lib/csrf.ts",
          "lineCount": 4,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "verifyCSRFTokenString",
          "startLine": 120,
          "endLine": 139,
          "code": "export function verifyCSRFTokenString(tokenString: string): boolean {\n  try {\n    const parts = tokenString.split(':');\n    if (parts.length !== 3) {\n      return false;\n    }\n\n    const [token, timestampStr, signature] = parts;\n    const timestamp = parseInt(timestampStr, 10);\n\n    if (isNaN(timestamp)) {\n      return false;\n    }\n\n    return verifyCSRFToken(token, timestamp, signature);\n  } catch (error) {\n    console.error('[CSRF] Token parsing error:', error);\n    return false;\n  }\n}\n",
          "filePath": "src/lib/csrf.ts",
          "lineCount": 20,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 12
        },
        {
          "name": "useCSRFToken",
          "startLine": 144,
          "endLine": 175,
          "code": "export function useCSRFToken() {\n  // In a real implementation, this would be stored in session or secure cookie\n  const getToken = (): string => {\n    if (typeof window !== 'undefined') {\n      let token = sessionStorage.getItem('csrf_token');\n      if (!token) {\n        token = createCSRFTokenString();\n        sessionStorage.setItem('csrf_token', token);\n      }\n      return token;\n    }\n    return createCSRFTokenString();\n  };\n\n  const validateToken = (token: string): boolean => {\n    return verifyCSRFTokenString(token);\n  };\n\n  const refreshToken = (): string => {\n    const newToken = createCSRFTokenString();\n    if (typeof window !== 'undefined') {\n      sessionStorage.setItem('csrf_token', newToken);\n    }\n    return newToken;\n  };\n\n  return {\n    getToken,\n    validateToken,\n    refreshToken,\n  };\n}\n",
          "filePath": "src/lib/csrf.ts",
          "lineCount": 32,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 11
        },
        {
          "name": "validateCSRFMiddleware",
          "startLine": 189,
          "endLine": 203,
          "code": "export function validateCSRFMiddleware(token: string | undefined, method: string): boolean {\n  // Only validate POST, PUT, DELETE, PATCH requests\n  const protectedMethods = ['POST', 'PUT', 'DELETE', 'PATCH'];\n\n  if (!protectedMethods.includes(method.toUpperCase())) {\n    return true; // GET requests don't need CSRF protection\n  }\n\n  if (!token) {\n    console.warn('[CSRF] Missing CSRF token for protected request');\n    return false;\n  }\n\n  return verifyCSRFTokenString(token);\n}\n",
          "filePath": "src/lib/csrf.ts",
          "lineCount": 15,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 7
        },
        {
          "name": "getCSRFMetaTags",
          "startLine": 209,
          "endLine": 215,
          "code": "export function getCSRFMetaTags() {\n  const csrfData = generateCSRFToken();\n  return {\n    'csrf-token': `${csrfData.token}:${csrfData.timestamp}:${csrfData.signature}`,\n    'csrf-param': '_csrf',\n  };\n}\n",
          "filePath": "src/lib/csrf.ts",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "verifyCSRFToken",
          "line": 74,
          "message": "Function 'verifyCSRFToken' has 31 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "useCSRFToken",
          "line": 144,
          "message": "Function 'useCSRFToken' has 32 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/lib/database-fields.ts",
      "lineCount": 194,
      "functions": [
        {
          "name": "buildSelectQuery",
          "startLine": 154,
          "endLine": 155,
          "code": "export function buildSelectQuery<T extends Record<string, string>>(\n  fields: T,\n",
          "filePath": "src/lib/database-fields.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "mapToDbFields",
          "startLine": 171,
          "endLine": 172,
          "code": "export function mapToDbFields<T extends Record<string, any>>(\n  data: Record<string, any>,\n",
          "filePath": "src/lib/database-fields.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/lib/database-utils.ts",
      "lineCount": 213,
      "functions": [
        {
          "name": "getDatabasePerformanceStats",
          "startLine": 166,
          "endLine": 182,
          "code": "export const getDatabasePerformanceStats = async () => {\n  try {\n    const { data, error } = await supabase.from('performance_overview').select('*');\n\n    if (error) {\n      throw error;\n    }\n\n    return data;\n  } catch (error) {\n    logError(\n      error instanceof Error ? error : new Error('Failed to get performance stats'),\n      'GET_PERFORMANCE_STATS'\n    );\n    return null;\n  }\n};\n",
          "filePath": "src/lib/database-utils.ts",
          "lineCount": 17,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4
        },
        {
          "name": "operation",
          "startLine": 190,
          "endLine": 201,
          "code": "  operation: (batch: T[]) => Promise<void>\n): Promise<void> => {\n  for (let i = 0; i < items.length; i += batchSize) {\n    const batch = items.slice(i, i + batchSize);\n    await operation(batch);\n\n    // Small delay to prevent overwhelming the database\n    if (i + batchSize < items.length) {\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n  }\n};\n",
          "filePath": "src/lib/database-utils.ts",
          "lineCount": 12,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 5
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/lib/database.ts",
      "lineCount": 315,
      "functions": [],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 315 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/lib/dev-config.ts",
      "lineCount": 95,
      "functions": [
        {
          "name": "isDevFeatureEnabled",
          "startLine": 14,
          "endLine": 16,
          "code": "export function isDevFeatureEnabled(): boolean {\n  return isDevelopment && isDevModeEnabled;\n}\n",
          "filePath": "src/lib/dev-config.ts",
          "lineCount": 3,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2
        },
        {
          "name": "getDevCredentials",
          "startLine": 22,
          "endLine": 45,
          "code": "export function getDevCredentials() {\n  if (!isDevFeatureEnabled()) {\n    throw new Error('Development features are not enabled');\n  }\n\n  const devEmail = process.env.DEV_ADMIN_EMAIL;\n  const devPassword = process.env.DEV_ADMIN_PASSWORD;\n\n  if (!devEmail || !devPassword) {\n    throw new Error(\n      'Development credentials not configured. Please set DEV_ADMIN_EMAIL and DEV_ADMIN_PASSWORD in your .env file'\n    );\n  }\n\n  // Validate minimum password requirements even for dev\n  if (devPassword.length < 12) {\n    throw new Error('Development password must be at least 12 characters long');\n  }\n\n  return {\n    email: devEmail,\n    password: devPassword,\n  };\n}\n",
          "filePath": "src/lib/dev-config.ts",
          "lineCount": 24,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 11
        },
        {
          "name": "getDemoUserConfig",
          "startLine": 50,
          "endLine": 60,
          "code": "export function getDemoUserConfig() {\n  if (!isDevFeatureEnabled()) {\n    throw new Error('Development features are not enabled');\n  }\n\n  return {\n    first_name: process.env.DEV_ADMIN_FIRST_NAME || 'Demo',\n    last_name: process.env.DEV_ADMIN_LAST_NAME || 'Administrator',\n    mobile_number: process.env.DEV_ADMIN_MOBILE || '09000000000',\n  };\n}\n",
          "filePath": "src/lib/dev-config.ts",
          "lineCount": 11,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 7
        },
        {
          "name": "logDevModeWarning",
          "startLine": 65,
          "endLine": 70,
          "code": "export function logDevModeWarning(): void {\n  if (isDevFeatureEnabled()) {\n    console.warn('🚨 DEVELOPMENT MODE ENABLED - This should NOT be enabled in production!');\n    console.warn('🔒 Make sure NEXT_PUBLIC_DEV_MODE is set to \"false\" in production');\n  }\n}\n",
          "filePath": "src/lib/dev-config.ts",
          "lineCount": 6,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 4
        },
        {
          "name": "validateDevEnvironment",
          "startLine": 75,
          "endLine": 94,
          "code": "export function validateDevEnvironment(): { isValid: boolean; errors: string[] } {\n  const errors: string[] = [];\n\n  if (!isDevelopment && isDevModeEnabled) {\n    errors.push('DEV_MODE should not be enabled in production');\n  }\n\n  if (isDevFeatureEnabled()) {\n    try {\n      getDevCredentials();\n    } catch (error) {\n      errors.push(`Dev credentials error: ${error}`);\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n}\n",
          "filePath": "src/lib/dev-config.ts",
          "lineCount": 20,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 8
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/lib/env-config.ts",
      "lineCount": 187,
      "functions": [
        {
          "name": "detectEnvironment",
          "startLine": 20,
          "endLine": 38,
          "code": "export function detectEnvironment(): Environment {\n  // CI/CD Environment\n  if (process.env.CI === 'true' || process.env.GITHUB_ACTIONS === 'true') {\n    return 'ci';\n  }\n\n  // Vercel Production\n  if (process.env.VERCEL_ENV === 'production') {\n    return 'production';\n  }\n\n  // Vercel Preview/Staging\n  if (process.env.VERCEL_ENV === 'preview') {\n    return 'staging';\n  }\n\n  // Local Development (default)\n  return 'development';\n}\n",
          "filePath": "src/lib/env-config.ts",
          "lineCount": 19,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 11
        },
        {
          "name": "getEnvironmentConfig",
          "startLine": 43,
          "endLine": 56,
          "code": "export function getEnvironmentConfig(): EnvironmentConfig {\n  const environment = detectEnvironment();\n\n  const config: EnvironmentConfig = {\n    environment,\n    isCI: environment === 'ci',\n    isProduction: environment === 'production',\n    isStaging: environment === 'staging',\n    isDevelopment: environment === 'development',\n    qualityTier: getQualityTier(environment),\n  };\n\n  return config;\n}\n",
          "filePath": "src/lib/env-config.ts",
          "lineCount": 14,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "getQualityTier",
          "startLine": 61,
          "endLine": 72,
          "code": "function getQualityTier(env: Environment): 1 | 2 | 3 | 4 {\n  switch (env) {\n    case 'development':\n      return 1; // Fast & Essential\n    case 'ci':\n      return 2; // Comprehensive\n    case 'staging':\n      return 3; // Integration\n    case 'production':\n      return 4; // Critical\n  }\n}\n",
          "filePath": "src/lib/env-config.ts",
          "lineCount": 12,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 4
        },
        {
          "name": "getQualityChecks",
          "startLine": 119,
          "endLine": 122,
          "code": "export function getQualityChecks(): string[] {\n  const { qualityTier } = getEnvironmentConfig();\n  return [...QUALITY_TIERS[qualityTier].checks];\n}\n",
          "filePath": "src/lib/env-config.ts",
          "lineCount": 4,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "shouldEnableFeature",
          "startLine": 127,
          "endLine": 142,
          "code": "export function shouldEnableFeature(feature: string): boolean {\n  const { environment } = getEnvironmentConfig();\n\n  const featureMap: Record<string, Environment[]> = {\n    'strict-linting': ['ci', 'staging', 'production'],\n    'visual-testing': ['ci', 'staging'],\n    'performance-monitoring': ['staging', 'production'],\n    'security-scanning': ['ci', 'staging', 'production'],\n    'coverage-enforcement': ['ci'],\n    'bundle-analysis': ['ci', 'staging', 'production'],\n    'accessibility-testing': ['ci', 'staging', 'production'],\n    'e2e-testing': ['staging', 'production'],\n  };\n\n  return featureMap[feature]?.includes(environment) ?? false;\n}\n",
          "filePath": "src/lib/env-config.ts",
          "lineCount": 16,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "getToolConfig",
          "startLine": 147,
          "endLine": 172,
          "code": "export function getToolConfig(tool: string): Record<string, any> {\n  const { environment } = getEnvironmentConfig();\n\n  const toolConfigs: Record<string, Record<Environment, any>> = {\n    eslint: {\n      development: { maxWarnings: -1, cache: true, format: 'compact' },\n      ci: { maxWarnings: 0, cache: false, format: 'json' },\n      staging: { maxWarnings: 0, cache: false, format: 'compact' },\n      production: { maxWarnings: 0, cache: false, format: 'compact' },\n    },\n    jest: {\n      development: { coverage: false, maxWorkers: '50%', silent: true },\n      ci: { coverage: true, maxWorkers: 2, ci: true },\n      staging: { coverage: true, maxWorkers: 1, verbose: true },\n      production: { coverage: false, maxWorkers: 1, testTimeout: 30000 },\n    },\n    typescript: {\n      development: { skipLibCheck: true, incremental: true },\n      ci: { skipLibCheck: false, incremental: false },\n      staging: { skipLibCheck: false, incremental: false },\n      production: { skipLibCheck: false, incremental: false },\n    },\n  };\n\n  return toolConfigs[tool]?.[environment] ?? {};\n}\n",
          "filePath": "src/lib/env-config.ts",
          "lineCount": 26,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "logEnvironmentInfo",
          "startLine": 177,
          "endLine": 186,
          "code": "export function logEnvironmentInfo(): void {\n  const config = getEnvironmentConfig();\n  const tier = QUALITY_TIERS[config.qualityTier];\n\n  console.log(`🔧 Environment: ${config.environment.toUpperCase()}`);\n  console.log(`📊 Quality Tier: ${config.qualityTier} (${tier.name})`);\n  console.log(`✅ Checks: ${tier.checks.join(', ')}`);\n  console.log(`⏱️  Timeout: ${tier.timeout}s`);\n  console.log(`⚡ Parallel: ${tier.parallel ? 'Yes' : 'No'}`);\n}\n",
          "filePath": "src/lib/env-config.ts",
          "lineCount": 10,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/lib/environment.ts",
      "lineCount": 189,
      "functions": [
        {
          "name": "isDevelopment",
          "startLine": 27,
          "endLine": 28,
          "code": "export const isDevelopment = () => getEnvironment() === 'development';\nexport const isStaging = () => getEnvironment() === 'staging';\n",
          "filePath": "src/lib/environment.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "isProduction",
          "startLine": 29,
          "endLine": 30,
          "code": "export const isProduction = () => getEnvironment() === 'production';\n/**\n",
          "filePath": "src/lib/environment.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "isTest",
          "startLine": 36,
          "endLine": 37,
          "code": "export const isTest = () => getEnvironment() === 'test';\n\n",
          "filePath": "src/lib/environment.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "isProductionLike",
          "startLine": 41,
          "endLine": 42,
          "code": "export const isProductionLike = () => isProduction() || isStaging();\n\n",
          "filePath": "src/lib/environment.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "isDebugEnabled",
          "startLine": 46,
          "endLine": 48,
          "code": "export const isDebugEnabled = () => {\n  return process.env.NEXT_PUBLIC_ENABLE_DEBUG === 'true' || isDevelopment();\n};\n",
          "filePath": "src/lib/environment.ts",
          "lineCount": 3,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "getEnvironmentConfig",
          "startLine": 53,
          "endLine": 80,
          "code": "export const getEnvironmentConfig = () => {\n  const env = getEnvironment();\n\n  return {\n    environment: env,\n    appName: process.env.NEXT_PUBLIC_APP_NAME || 'RBI System',\n    appVersion: process.env.NEXT_PUBLIC_APP_VERSION || '1.0.0',\n\n    // Feature flags\n    features: {\n      debug: isDebugEnabled(),\n      storybook: process.env.NEXT_PUBLIC_ENABLE_STORYBOOK === 'true',\n      mockData: process.env.NEXT_PUBLIC_ENABLE_MOCK_DATA === 'true',\n    },\n\n    // API settings\n    api: {\n      timeout: parseInt(process.env.NEXT_PUBLIC_API_TIMEOUT || '10000'),\n      rateLimitEnabled: process.env.NEXT_PUBLIC_RATE_LIMIT_ENABLED === 'true',\n    },\n\n    // Database settings\n    database: {\n      enableRealtime: isProductionLike(),\n      enableSchemaValidation: !isProduction(),\n    },\n  };\n};\n",
          "filePath": "src/lib/environment.ts",
          "lineCount": 28,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 3
        },
        {
          "name": "getSupabaseConfig",
          "startLine": 85,
          "endLine": 126,
          "code": "export const getSupabaseConfig = () => {\n  const config = getEnvironmentConfig();\n\n  return {\n    url: process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co',\n    anonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key',\n\n    // Environment-specific Supabase options\n    options: {\n      auth: {\n        autoRefreshToken: true,\n        persistSession: !isTest(),\n        detectSessionInUrl: !isTest(),\n        // Production-ready auth settings\n        storageKey: 'rbi-auth-token',\n        storage: typeof window !== 'undefined' ? window.localStorage : undefined,\n        flowType: 'pkce' as const,\n        debug: isDebugEnabled(),\n      },\n\n      db: {\n        schema: 'public',\n      },\n\n      // Realtime settings for production\n      realtime: config.database.enableRealtime ? {\n        params: {\n          eventsPerSecond: 10,\n        },\n      } : undefined,\n\n      global: {\n        headers: {\n          'Cache-Control': isProduction() ? 'public, max-age=3600' : 'no-cache',\n          Pragma: isProduction() ? 'cache' : 'no-cache',\n          'X-Environment': config.environment,\n          'X-Client-Info': 'rbi-system-client',\n        },\n      },\n    },\n  };\n};\n",
          "filePath": "src/lib/environment.ts",
          "lineCount": 42,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 5
        },
        {
          "name": "createLogger",
          "startLine": 131,
          "endLine": 153,
          "code": "export const createLogger = (module: string) => {\n  const config = getEnvironmentConfig();\n\n  return {\n    debug: (...args: unknown[]) => {\n      if (config.features.debug) {\n        console.log(`[${config.environment.toUpperCase()}][${module}]`, ...args);\n      }\n    },\n\n    info: (...args: unknown[]) => {\n      console.info(`[${config.environment.toUpperCase()}][${module}]`, ...args);\n    },\n\n    warn: (...args: unknown[]) => {\n      console.warn(`[${config.environment.toUpperCase()}][${module}]`, ...args);\n    },\n\n    error: (...args: unknown[]) => {\n      console.error(`[${config.environment.toUpperCase()}][${module}]`, ...args);\n    },\n  };\n};\n",
          "filePath": "src/lib/environment.ts",
          "lineCount": 23,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2
        },
        {
          "name": "validateEnvironment",
          "startLine": 158,
          "endLine": 188,
          "code": "export const validateEnvironment = () => {\n  const errors: string[] = [];\n  const config = getEnvironmentConfig();\n\n  // Check required environment variables for production\n  if (isProductionLike()) {\n    if (\n      !process.env.NEXT_PUBLIC_SUPABASE_URL ||\n      process.env.NEXT_PUBLIC_SUPABASE_URL.includes('placeholder')\n    ) {\n      errors.push('NEXT_PUBLIC_SUPABASE_URL must be set for production environments');\n    }\n\n    if (\n      !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ||\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY.includes('placeholder')\n    ) {\n      errors.push('NEXT_PUBLIC_SUPABASE_ANON_KEY must be set for production environments');\n    }\n\n    if (!process.env.CSRF_SECRET) {\n      errors.push('CSRF_SECRET must be set for production environments');\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    config,\n  };\n};\n",
          "filePath": "src/lib/environment.ts",
          "lineCount": 31,
          "cyclomaticComplexity": 7,
          "cognitiveComplexity": 9
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "getSupabaseConfig",
          "line": 85,
          "message": "Function 'getSupabaseConfig' has 42 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "validateEnvironment",
          "line": 158,
          "message": "Function 'validateEnvironment' has 31 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/lib/file-security.ts",
      "lineCount": 315,
      "functions": [
        {
          "name": "validateFileSize",
          "startLine": 48,
          "endLine": 62,
          "code": "function validateFileSize(file: File): string[] {\n  const errors: string[] = [];\n\n  if (file.size > MAX_FILE_SIZE) {\n    errors.push(\n      `File size (${(file.size / 1024 / 1024).toFixed(2)}MB) exceeds maximum allowed size (${MAX_FILE_SIZE / 1024 / 1024}MB)`\n    );\n  }\n\n  if (file.size === 0) {\n    errors.push('File is empty');\n  }\n\n  return errors;\n}\n",
          "filePath": "src/lib/file-security.ts",
          "lineCount": 15,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 6
        },
        {
          "name": "validateFileType",
          "startLine": 67,
          "endLine": 86,
          "code": "function validateFileType(file: File): string[] {\n  const errors: string[] = [];\n\n  // Check MIME type\n  if (!ALLOWED_MIME_TYPES.includes(file.type)) {\n    errors.push(\n      `File type \"${file.type}\" is not allowed. Allowed types: ${ALLOWED_MIME_TYPES.join(', ')}`\n    );\n  }\n\n  // Check file extension\n  const extension = '.' + file.name.split('.').pop()?.toLowerCase();\n  if (!ALLOWED_EXTENSIONS.includes(extension)) {\n    errors.push(\n      `File extension \"${extension}\" is not allowed. Allowed extensions: ${ALLOWED_EXTENSIONS.join(', ')}`\n    );\n  }\n\n  return errors;\n}\n",
          "filePath": "src/lib/file-security.ts",
          "lineCount": 20,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 6
        },
        {
          "name": "validateFileName",
          "startLine": 91,
          "endLine": 140,
          "code": "function validateFileName(fileName: string): string[] {\n  const errors: string[] = [];\n\n  // Check for directory traversal\n  if (fileName.includes('..') || fileName.includes('/') || fileName.includes('\\\\')) {\n    errors.push('File name contains invalid characters (directory traversal)');\n  }\n\n  // Check for null bytes\n  if (fileName.includes('\\0')) {\n    errors.push('File name contains null bytes');\n  }\n\n  // Check for excessively long names\n  if (fileName.length > 255) {\n    errors.push('File name is too long (max 255 characters)');\n  }\n\n  // Check for reserved names (Windows)\n  const reservedNames = [\n    'CON',\n    'PRN',\n    'AUX',\n    'NUL',\n    'COM1',\n    'COM2',\n    'COM3',\n    'COM4',\n    'COM5',\n    'COM6',\n    'COM7',\n    'COM8',\n    'COM9',\n    'LPT1',\n    'LPT2',\n    'LPT3',\n    'LPT4',\n    'LPT5',\n    'LPT6',\n    'LPT7',\n    'LPT8',\n    'LPT9',\n  ];\n  const baseName = fileName.split('.')[0].toUpperCase();\n  if (reservedNames.includes(baseName)) {\n    errors.push(`File name \"${baseName}\" is reserved and not allowed`);\n  }\n\n  return errors;\n}\n",
          "filePath": "src/lib/file-security.ts",
          "lineCount": 50,
          "cyclomaticComplexity": 7,
          "cognitiveComplexity": 14
        },
        {
          "name": "sanitizeFileName",
          "startLine": 204,
          "endLine": 210,
          "code": "export function sanitizeFileName(fileName: string): string {\n  return fileName\n    .replace(/[^a-zA-Z0-9._-]/g, '_') // Replace unsafe characters\n    .replace(/_{2,}/g, '_') // Replace multiple underscores\n    .substring(0, 100) // Limit length\n    .toLowerCase();\n}\n",
          "filePath": "src/lib/file-security.ts",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "generateUniqueFileName",
          "startLine": 215,
          "endLine": 222,
          "code": "export function generateUniqueFileName(originalName: string): string {\n  const timestamp = Date.now();\n  const random = Math.random().toString(36).substring(2, 8);\n  const extension = '.' + originalName.split('.').pop()?.toLowerCase();\n  const baseName = sanitizeFileName(originalName.replace(/\\.[^/.]+$/, ''));\n\n  return `${baseName}_${timestamp}_${random}${extension}`;\n}\n",
          "filePath": "src/lib/file-security.ts",
          "lineCount": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "logFileOperation",
          "startLine": 293,
          "endLine": 294,
          "code": "export function logFileOperation(\n  operation: 'upload' | 'download' | 'delete',\n",
          "filePath": "src/lib/file-security.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 315 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "validateFileName",
          "line": 91,
          "message": "Function 'validateFileName' has 50 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/lib/performance-optimizations.ts",
      "lineCount": 297,
      "functions": [
        {
          "name": "useDebounce",
          "startLine": 12,
          "endLine": 13,
          "code": "export function useDebounce<T extends (...args: unknown[]) => unknown>(\n  callback: T,\n",
          "filePath": "src/lib/performance-optimizations.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "useSearchFilter",
          "startLine": 38,
          "endLine": 39,
          "code": "export function useSearchFilter<T extends Record<string, unknown>>(\n  data: T[],\n",
          "filePath": "src/lib/performance-optimizations.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "usePagination",
          "startLine": 61,
          "endLine": 62,
          "code": "export function usePagination<T>(\n  data: T[],\n",
          "filePath": "src/lib/performance-optimizations.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "useVirtualScroll",
          "startLine": 110,
          "endLine": 145,
          "code": "export function useVirtualScroll({\n  itemCount,\n  itemHeight,\n  containerHeight,\n  overscan = 5\n}: {\n  itemCount: number;\n  itemHeight: number;\n  containerHeight: number;\n  overscan?: number;\n}) {\n  const [scrollTop, setScrollTop] = useState(0);\n\n  const visibleRange = useMemo(() => {\n    const startIndex = Math.floor(scrollTop / itemHeight);\n    const endIndex = Math.min(\n      itemCount - 1,\n      Math.floor((scrollTop + containerHeight) / itemHeight)\n    );\n\n    return {\n      start: Math.max(0, startIndex - overscan),\n      end: Math.min(itemCount - 1, endIndex + overscan)\n    };\n  }, [scrollTop, itemHeight, containerHeight, itemCount, overscan]);\n\n  const totalHeight = itemCount * itemHeight;\n  const offsetY = visibleRange.start * itemHeight;\n\n  return {\n    visibleRange,\n    totalHeight,\n    offsetY,\n    setScrollTop\n  };\n}\n",
          "filePath": "src/lib/performance-optimizations.ts",
          "lineCount": 36,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2
        },
        {
          "name": "usePerformanceMonitor",
          "startLine": 150,
          "endLine": 175,
          "code": "export function usePerformanceMonitor(componentName: string) {\n  const renderStartTime = useRef<number>();\n  const renderCount = useRef(0);\n\n  useEffect(() => {\n    renderStartTime.current = performance.now();\n    renderCount.current += 1;\n  });\n\n  useEffect(() => {\n    const endTime = performance.now();\n    const renderTime = endTime - (renderStartTime.current || endTime);\n    \n    if (renderTime > 16) { // > 16ms is concerning for 60fps\n      logInfo(`Performance warning: ${componentName} render took ${renderTime.toFixed(2)}ms`, {\n        component: componentName,\n        action: 'performance_warning',\n        data: { renderTime, renderCount: renderCount.current }\n      });\n    }\n  });\n\n  return {\n    renderCount: renderCount.current\n  };\n}\n",
          "filePath": "src/lib/performance-optimizations.ts",
          "lineCount": 26,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 5
        },
        {
          "name": "useSortedData",
          "startLine": 180,
          "endLine": 181,
          "code": "export function useSortedData<T extends Record<string, unknown>>(\n  data: T[],\n",
          "filePath": "src/lib/performance-optimizations.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "useOptimizedFetch",
          "startLine": 223,
          "endLine": 224,
          "code": "export function useOptimizedFetch<T>(\n  fetchFn: () => Promise<T>,\n",
          "filePath": "src/lib/performance-optimizations.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "useIntersectionObserver",
          "startLine": 271,
          "endLine": 272,
          "code": "export function useIntersectionObserver(\n  options: IntersectionObserverInit = {}\n",
          "filePath": "src/lib/performance-optimizations.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "useVirtualScroll",
          "line": 110,
          "message": "Function 'useVirtualScroll' has 36 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/lib/performance.ts",
      "lineCount": 384,
      "functions": [
        {
          "name": "operation",
          "startLine": 154,
          "endLine": 166,
          "code": "  async timeAsync<T>(name: string, operation: () => Promise<T>): Promise<T> {\n    if (!this.isEnabled) return operation();\n\n    const endTiming = this.startTiming(name);\n    try {\n      const result = await operation();\n      endTiming();\n      return result;\n    } catch (error) {\n      endTiming();\n      throw error;\n    }\n  }\n",
          "filePath": "src/lib/performance.ts",
          "lineCount": 13,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3
        },
        {
          "name": "timed",
          "startLine": 307,
          "endLine": 332,
          "code": "export function timed(name?: string) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    const timerName = name || `${target.constructor.name}.${propertyKey}`;\n\n    descriptor.value = function (...args: any[]) {\n      const endTiming = performanceMonitor.startTiming(timerName);\n      try {\n        const result = originalMethod.apply(this, args);\n        \n        // Handle async methods\n        if (result instanceof Promise) {\n          return result.finally(() => endTiming());\n        }\n        \n        endTiming();\n        return result;\n      } catch (error) {\n        endTiming();\n        throw error;\n      }\n    };\n\n    return descriptor;\n  };\n}\n",
          "filePath": "src/lib/performance.ts",
          "lineCount": 26,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 13
        },
        {
          "name": "usePerformanceTracking",
          "startLine": 341,
          "endLine": 350,
          "code": "export function usePerformanceTracking(componentName: string) {\n  const renderStart = performance.now();\n  \n  return {\n    onRenderComplete: (propsSize?: number, isRerender = false) => {\n      const renderTime = performance.now() - renderStart;\n      performanceMonitor.recordComponentRender(componentName, renderTime, propsSize, isRerender);\n    },\n  };\n}\n",
          "filePath": "src/lib/performance.ts",
          "lineCount": 10,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 4
        },
        {
          "name": "measurePropsSize",
          "startLine": 359,
          "endLine": 365,
          "code": "export function measurePropsSize(props: any): number {\n  try {\n    return JSON.stringify(props).length;\n  } catch {\n    return 0;\n  }\n}\n",
          "filePath": "src/lib/performance.ts",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 384 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/lib/public-search.ts",
      "lineCount": 170,
      "functions": [
        {
          "name": "searchBarangaysPublic",
          "startLine": 15,
          "endLine": 71,
          "code": "export const searchBarangaysPublic = async (searchTerm: string, limit = 20) => {\n  try {\n    if (!searchTerm || searchTerm.length < 2) {\n      return [];\n    }\n\n    logger.debug('Searching barangays publicly:', searchTerm);\n\n    const { data, error } = await supabase\n      .from('psgc_barangays')\n      .select(`\n        code, \n        name,\n        city_municipality_code,\n        psgc_cities_municipalities!inner(\n          code,\n          name,\n          type,\n          province_code,\n          psgc_provinces!inner(\n            code,\n            name,\n            region_code,\n            psgc_regions!inner(\n              code,\n              name\n            )\n          )\n        )\n      `)\n      .ilike('name', `%${searchTerm}%`)\n      .limit(limit)\n      .order('name');\n      \n    if (error) {\n      logger.error('Error searching barangays:', error.message);\n      throw error;\n    }\n\n    // Transform data to match expected format\n    const transformedData = data?.map(item => ({\n      code: item.code,\n      name: item.name,\n      city_name: `${item.psgc_cities_municipalities.name} (${item.psgc_cities_municipalities.type})`,\n      province_name: item.psgc_cities_municipalities.psgc_provinces.name,\n      region_name: item.psgc_cities_municipalities.psgc_provinces.psgc_regions.name,\n      full_address: `${item.name}, ${item.psgc_cities_municipalities.name}, ${item.psgc_cities_municipalities.psgc_provinces.name}, ${item.psgc_cities_municipalities.psgc_provinces.psgc_regions.name}`,\n    })) || [];\n\n    logger.debug(`Found ${transformedData.length} barangays`);\n    return transformedData;\n\n  } catch (error) {\n    logger.error('Public barangay search failed:', error);\n    throw error;\n  }\n};\n",
          "filePath": "src/lib/public-search.ts",
          "lineCount": 57,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 8
        },
        {
          "name": "getRegionsPublic",
          "startLine": 76,
          "endLine": 89,
          "code": "export const getRegionsPublic = async () => {\n  try {\n    const { data, error } = await supabase\n      .from('psgc_regions')\n      .select('code, name')\n      .order('name');\n      \n    if (error) throw error;\n    return data;\n  } catch (error) {\n    logger.error('Error fetching regions:', error);\n    throw error;\n  }\n};\n",
          "filePath": "src/lib/public-search.ts",
          "lineCount": 14,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 2
        },
        {
          "name": "getProvincesByRegionPublic",
          "startLine": 94,
          "endLine": 108,
          "code": "export const getProvincesByRegionPublic = async (regionCode: string) => {\n  try {\n    const { data, error } = await supabase\n      .from('psgc_provinces')\n      .select('code, name')\n      .eq('region_code', regionCode)\n      .order('name');\n      \n    if (error) throw error;\n    return data;\n  } catch (error) {\n    logger.error('Error fetching provinces:', error);\n    throw error;\n  }\n};\n",
          "filePath": "src/lib/public-search.ts",
          "lineCount": 15,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 2
        },
        {
          "name": "getCitiesByProvincePublic",
          "startLine": 113,
          "endLine": 127,
          "code": "export const getCitiesByProvincePublic = async (provinceCode: string) => {\n  try {\n    const { data, error } = await supabase\n      .from('psgc_cities_municipalities')\n      .select('code, name, type')\n      .eq('province_code', provinceCode)\n      .order('name');\n      \n    if (error) throw error;\n    return data;\n  } catch (error) {\n    logger.error('Error fetching cities:', error);\n    throw error;\n  }\n};\n",
          "filePath": "src/lib/public-search.ts",
          "lineCount": 15,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 2
        },
        {
          "name": "getBarangaysByCityPublic",
          "startLine": 132,
          "endLine": 146,
          "code": "export const getBarangaysByCityPublic = async (cityCode: string) => {\n  try {\n    const { data, error } = await supabase\n      .from('psgc_barangays')\n      .select('code, name')\n      .eq('city_municipality_code', cityCode)\n      .order('name');\n      \n    if (error) throw error;\n    return data;\n  } catch (error) {\n    logger.error('Error fetching barangays:', error);\n    throw error;\n  }\n};\n",
          "filePath": "src/lib/public-search.ts",
          "lineCount": 15,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 2
        },
        {
          "name": "searchOccupationsPublic",
          "startLine": 151,
          "endLine": 170,
          "code": "export const searchOccupationsPublic = async (searchTerm: string, limit = 20) => {\n  try {\n    if (!searchTerm || searchTerm.length < 2) {\n      return [];\n    }\n\n    const { data, error } = await supabase\n      .from('psoc_unified_search')\n      .select('psoc_code, occupation_title, psoc_level, parent_title')\n      .ilike('search_text', `%${searchTerm}%`)\n      .limit(limit)\n      .order('occupation_title');\n      \n    if (error) throw error;\n    return data || [];\n  } catch (error) {\n    logger.error('Error searching occupations:', error);\n    throw error;\n  }\n};\n",
          "filePath": "src/lib/public-search.ts",
          "lineCount": 20,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 7
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "searchBarangaysPublic",
          "line": 15,
          "message": "Function 'searchBarangaysPublic' has 57 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/lib/rate-limit.ts",
      "lineCount": 211,
      "functions": [
        {
          "name": "checkRateLimit",
          "startLine": 4,
          "endLine": 5,
          "code": "export function checkRateLimit(\n  identifier: string,\n",
          "filePath": "src/lib/rate-limit.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "recordSuccessfulRequest",
          "startLine": 56,
          "endLine": 57,
          "code": "export function recordSuccessfulRequest(\n  identifier: string,\n",
          "filePath": "src/lib/rate-limit.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "recordFailedRequest",
          "startLine": 75,
          "endLine": 76,
          "code": "export function recordFailedRequest(\n  identifier: string,\n",
          "filePath": "src/lib/rate-limit.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "getClientIdentifier",
          "startLine": 94,
          "endLine": 107,
          "code": "export function getClientIdentifier(request: Request, userId?: string): string {\n  // Prefer user ID for authenticated requests\n  if (userId) {\n    return `user:${userId}`;\n  }\n\n  // Get IP address from various headers (handle proxies)\n  const forwarded = request.headers.get('x-forwarded-for');\n  const realIp = request.headers.get('x-real-ip');\n  const remoteAddr = request.headers.get('remote-addr');\n\n  const ip = forwarded?.split(',')[0] || realIp || remoteAddr || 'unknown';\n  return `ip:${ip}`;\n}\n",
          "filePath": "src/lib/rate-limit.ts",
          "lineCount": 14,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 7
        },
        {
          "name": "rateLimitMiddleware",
          "startLine": 112,
          "endLine": 152,
          "code": "export function rateLimitMiddleware(ruleKey: keyof typeof RATE_LIMIT_RULES) {\n  return (identifier: string, onSuccess?: () => void, onFailure?: () => void) => {\n    const rule = RATE_LIMIT_RULES[ruleKey];\n    const result = checkRateLimit(identifier, rule, ruleKey);\n\n    if (!result.allowed) {\n      // Log rate limit violation\n      console.warn(`[RATE_LIMIT] ${ruleKey} - ${identifier} exceeded limit`, {\n        remainingRequests: result.remainingRequests,\n        retryAfter: result.retryAfter,\n        resetTime: new Date(result.resetTime).toISOString(),\n      });\n\n      return {\n        success: false,\n        error: 'Too many requests',\n        retryAfter: result.retryAfter,\n        remainingRequests: result.remainingRequests,\n      };\n    }\n\n    // Set up success/failure callbacks\n    const wrappedCallbacks = {\n      recordSuccess: () => {\n        recordSuccessfulRequest(identifier, rule, ruleKey);\n        onSuccess?.();\n      },\n      recordFailure: () => {\n        recordFailedRequest(identifier, rule, ruleKey);\n        onFailure?.();\n      },\n    };\n\n    return {\n      success: true,\n      remainingRequests: result.remainingRequests,\n      resetTime: result.resetTime,\n      callbacks: wrappedCallbacks,\n    };\n  };\n}\n",
          "filePath": "src/lib/rate-limit.ts",
          "lineCount": 41,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 7
        },
        {
          "name": "createRateLimitHandler",
          "startLine": 158,
          "endLine": 194,
          "code": "export function createRateLimitHandler(ruleKey: keyof typeof RATE_LIMIT_RULES) {\n  return async (request: Request, userId?: string) => {\n    const identifier = getClientIdentifier(request, userId);\n    const rule = RATE_LIMIT_RULES[ruleKey];\n    const result = checkRateLimit(identifier, rule, ruleKey);\n\n    if (!result.allowed) {\n      return new Response(\n        JSON.stringify({\n          error: {\n            code: ErrorCode.RATE_LIMIT_EXCEEDED,\n            message: `Rate limit exceeded. Try again in ${result.retryAfter} seconds.`,\n            details: {\n              retryAfter: result.retryAfter,\n              limit: rule.maxRequests,\n              window: rule.windowMs / 1000 // seconds\n            }\n          },\n          timestamp: new Date().toISOString(),\n          path: new URL(request.url).pathname\n        }),\n        {\n          status: 429,\n          headers: {\n            'Content-Type': 'application/json',\n            'Retry-After': result.retryAfter?.toString() || '60',\n            'X-RateLimit-Limit': rule.maxRequests.toString(),\n            'X-RateLimit-Remaining': result.remainingRequests.toString(),\n            'X-RateLimit-Reset': result.resetTime.toString(),\n          },\n        }\n      );\n    }\n\n    return null; // Allow request to proceed\n  };\n}\n",
          "filePath": "src/lib/rate-limit.ts",
          "lineCount": 37,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 8
        },
        {
          "name": "resetRateLimit",
          "startLine": 199,
          "endLine": 202,
          "code": "export function resetRateLimit(identifier: string, ruleKey: string): boolean {\n  const key = generateRateLimitKey(identifier, ruleKey);\n  return rateLimitStore.delete(key);\n}\n",
          "filePath": "src/lib/rate-limit.ts",
          "lineCount": 4,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "getRateLimitStatus",
          "startLine": 207,
          "endLine": 210,
          "code": "export function getRateLimitStatus(identifier: string, ruleKey: string): RateLimitEntry | null {\n  const key = generateRateLimitKey(identifier, ruleKey);\n  return rateLimitStore.get(key) || null;\n}\n",
          "filePath": "src/lib/rate-limit.ts",
          "lineCount": 4,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "rateLimitMiddleware",
          "line": 112,
          "message": "Function 'rateLimitMiddleware' has 41 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "createRateLimitHandler",
          "line": 158,
          "message": "Function 'createRateLimitHandler' has 37 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/lib/secure-logger.ts",
      "lineCount": 293,
      "functions": [
        {
          "name": "sanitizeForLogging",
          "startLine": 46,
          "endLine": 88,
          "code": "function sanitizeForLogging(data: unknown): unknown {\n  if (data === null || data === undefined) {\n    return data;\n  }\n\n  if (typeof data === 'string') {\n    // Check if the string contains sensitive patterns\n    const isSensitive = SENSITIVE_PATTERNS.some(pattern => pattern.test(data));\n    return isSensitive ? '[REDACTED]' : data;\n  }\n\n  if (typeof data === 'number' || typeof data === 'boolean') {\n    return data;\n  }\n\n  if (Array.isArray(data)) {\n    return data.map(item => sanitizeForLogging(item));\n  }\n\n  if (typeof data === 'object') {\n    const sanitized: Record<string, unknown> = {};\n\n    for (const [key, value] of Object.entries(data)) {\n      // Remove completely restricted fields\n      if (RESTRICTED_FIELDS.some(field => key.toLowerCase().includes(field.toLowerCase()))) {\n        continue;\n      }\n\n      // Mask sensitive fields\n      const isSensitiveKey = SENSITIVE_PATTERNS.some(pattern => pattern.test(key));\n\n      if (isSensitiveKey) {\n        sanitized[key] = '[REDACTED]';\n      } else {\n        sanitized[key] = sanitizeForLogging(value);\n      }\n    }\n\n    return sanitized;\n  }\n\n  return data;\n}\n",
          "filePath": "src/lib/secure-logger.ts",
          "lineCount": 43,
          "cyclomaticComplexity": 13,
          "cognitiveComplexity": 32
        },
        {
          "name": "createLogEntry",
          "startLine": 93,
          "endLine": 94,
          "code": "function createLogEntry(\n  level: LogLevel,\n",
          "filePath": "src/lib/secure-logger.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "shouldLog",
          "startLine": 111,
          "endLine": 120,
          "code": "function shouldLog(level: LogLevel): boolean {\n  const isDev = process.env.NODE_ENV === 'development';\n  const logLevel = process.env.LOG_LEVEL || (isDev ? 'debug' : 'warn');\n\n  const levels = ['debug', 'info', 'warn', 'error'];\n  const currentLevelIndex = levels.indexOf(logLevel);\n  const messageLevelIndex = levels.indexOf(level);\n\n  return messageLevelIndex >= currentLevelIndex;\n}\n",
          "filePath": "src/lib/secure-logger.ts",
          "lineCount": 10,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 4
        },
        {
          "name": "createLogger",
          "startLine": 215,
          "endLine": 217,
          "code": "export function createLogger(context: string): SecureLogger {\n  return new SecureLogger(context);\n}\n",
          "filePath": "src/lib/secure-logger.ts",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "logError",
          "startLine": 226,
          "endLine": 233,
          "code": "export function logError(error: Error, context?: string): void {\n  const contextLogger = context ? createLogger(context) : logger;\n  contextLogger.error(error.message, {\n    name: error.name,\n    stack: error.stack,\n    context,\n  });\n}\n",
          "filePath": "src/lib/secure-logger.ts",
          "lineCount": 8,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 5
        },
        {
          "name": "logApiRequest",
          "startLine": 241,
          "endLine": 248,
          "code": "export function logApiRequest(method: string, path: string, userId?: string): void {\n  apiLogger.info(`${method} ${path}`, {\n    method,\n    path,\n    userId: userId || 'anonymous',\n    timestamp: new Date().toISOString(),\n  });\n}\n",
          "filePath": "src/lib/secure-logger.ts",
          "lineCount": 8,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 4
        },
        {
          "name": "logSecurityEvent",
          "startLine": 256,
          "endLine": 257,
          "code": "export function logSecurityEvent(\n  event: string,\n",
          "filePath": "src/lib/secure-logger.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "debugLog",
          "startLine": 277,
          "endLine": 281,
          "code": "export function debugLog(message: string, data?: unknown): void {\n  if (process.env.NODE_ENV === 'development') {\n    logger.debug(message, data);\n  }\n}\n",
          "filePath": "src/lib/secure-logger.ts",
          "lineCount": 5,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 6
        },
        {
          "name": "safeLog",
          "startLine": 290,
          "endLine": 292,
          "code": "export function safeLog(message: string, data?: unknown): void {\n  logger.info(message, data);\n}\n",
          "filePath": "src/lib/secure-logger.ts",
          "lineCount": 3,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 3
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "sanitizeForLogging",
          "line": 46,
          "message": "Function 'sanitizeForLogging' has 43 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "sanitizeForLogging",
          "line": 46,
          "complexity": 13,
          "message": "Function 'sanitizeForLogging' has cyclomatic complexity of 13 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "sanitizeForLogging",
          "line": 46,
          "complexity": 32,
          "message": "Function 'sanitizeForLogging' has cognitive complexity of 32 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/lib/supabase.ts",
      "lineCount": 578,
      "functions": [
        {
          "name": "isSupabaseAvailable",
          "startLine": 26,
          "endLine": 32,
          "code": "export const isSupabaseAvailable = () => {\n  return (\n    process.env.NEXT_PUBLIC_SUPABASE_URL &&\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY &&\n    !process.env.NEXT_PUBLIC_SUPABASE_URL.includes('placeholder')\n  );\n};\n",
          "filePath": "src/lib/supabase.ts",
          "lineCount": 7,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 2
        },
        {
          "name": "refreshSchema",
          "startLine": 53,
          "endLine": 70,
          "code": "export const refreshSchema = async () => {\n  if (!isSupabaseAvailable()) {\n    logger.debug('Supabase not available, skipping schema refresh');\n    return;\n  }\n\n  try {\n    // Force a schema refresh by making a simple query\n    const { error } = await supabase.rpc('version');\n    if (error) {\n      logger.debug('Schema refresh attempt:', error.message);\n    } else {\n      logger.debug('Schema refresh completed successfully');\n    }\n  } catch (e) {\n    logger.debug('Schema refresh completed with exception:', e);\n  }\n};\n",
          "filePath": "src/lib/supabase.ts",
          "lineCount": 18,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 5
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 578 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/lib/utils.ts",
      "lineCount": 313,
      "functions": [
        {
          "name": "cn",
          "startLine": 9,
          "endLine": 11,
          "code": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
          "filePath": "src/lib/utils.ts",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "formatCurrency",
          "startLine": 24,
          "endLine": 31,
          "code": "export function formatCurrency(amount: number): string {\n  return new Intl.NumberFormat('en-PH', {\n    style: 'currency',\n    currency: 'PHP',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2,\n  }).format(amount);\n}\n",
          "filePath": "src/lib/utils.ts",
          "lineCount": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "formatDate",
          "startLine": 45,
          "endLine": 46,
          "code": "export function formatDate(\n  date: Date | string,\n",
          "filePath": "src/lib/utils.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "debounce",
          "startLine": 63,
          "endLine": 64,
          "code": "export function debounce<T extends (...args: unknown[]) => unknown>(\n  func: T,\n",
          "filePath": "src/lib/utils.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "throttle",
          "startLine": 81,
          "endLine": 82,
          "code": "export function throttle<T extends (...args: unknown[]) => unknown>(\n  func: T,\n",
          "filePath": "src/lib/utils.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "generateId",
          "startLine": 101,
          "endLine": 103,
          "code": "export function generateId(prefix = 'id'): string {\n  return `${prefix}-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n}\n",
          "filePath": "src/lib/utils.ts",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "isEmpty",
          "startLine": 110,
          "endLine": 116,
          "code": "export function isEmpty(value: unknown): boolean {\n  if (value == null) return true;\n  if (typeof value === 'string') return value.trim().length === 0;\n  if (Array.isArray(value)) return value.length === 0;\n  if (typeof value === 'object') return Object.keys(value).length === 0;\n  return false;\n}\n",
          "filePath": "src/lib/utils.ts",
          "lineCount": 7,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 9
        },
        {
          "name": "deepClone",
          "startLine": 123,
          "endLine": 135,
          "code": "export function deepClone<T>(obj: T): T {\n  if (obj === null || typeof obj !== 'object') return obj;\n  if (obj instanceof Date) return new Date(obj.getTime()) as T;\n  if (obj instanceof Array) return obj.map(item => deepClone(item)) as T;\n  \n  const cloned = {} as T;\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      cloned[key] = deepClone(obj[key]);\n    }\n  }\n  return cloned;\n}\n",
          "filePath": "src/lib/utils.ts",
          "lineCount": 13,
          "cyclomaticComplexity": 7,
          "cognitiveComplexity": 13
        },
        {
          "name": "truncateText",
          "startLine": 150,
          "endLine": 153,
          "code": "export function truncateText(text: string, length: number, suffix = '...'): string {\n  if (text.length <= length) return text;\n  return text.substring(0, length - suffix.length) + suffix;\n}\n",
          "filePath": "src/lib/utils.ts",
          "lineCount": 4,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 3
        },
        {
          "name": "capitalize",
          "startLine": 160,
          "endLine": 163,
          "code": "export function capitalize(str: string): string {\n  if (!str) return '';\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n}\n",
          "filePath": "src/lib/utils.ts",
          "lineCount": 4,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 3
        },
        {
          "name": "toTitleCase",
          "startLine": 170,
          "endLine": 176,
          "code": "export function toTitleCase(str: string): string {\n  return str\n    .toLowerCase()\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n}\n",
          "filePath": "src/lib/utils.ts",
          "lineCount": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "parseQueryString",
          "startLine": 183,
          "endLine": 192,
          "code": "export function parseQueryString(queryString: string): Record<string, string> {\n  const params = new URLSearchParams(queryString);\n  const result: Record<string, string> = {};\n  \n  params.forEach((value, key) => {\n    result[key] = value;\n  });\n  \n  return result;\n}\n",
          "filePath": "src/lib/utils.ts",
          "lineCount": 10,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "buildQueryString",
          "startLine": 199,
          "endLine": 209,
          "code": "export function buildQueryString(params: Record<string, string | number | boolean | null | undefined>): string {\n  const searchParams = new URLSearchParams();\n  \n  Object.entries(params).forEach(([key, value]) => {\n    if (value !== null && value !== undefined && value !== '') {\n      searchParams.append(key, String(value));\n    }\n  });\n  \n  return searchParams.toString();\n}\n",
          "filePath": "src/lib/utils.ts",
          "lineCount": 11,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 6
        },
        {
          "name": "sleep",
          "startLine": 216,
          "endLine": 218,
          "code": "export function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n",
          "filePath": "src/lib/utils.ts",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "fn",
          "startLine": 234,
          "endLine": 235,
          "code": "  fn: () => Promise<T>,\n  maxAttempts = 3,\n",
          "filePath": "src/lib/utils.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "groupBy",
          "startLine": 261,
          "endLine": 270,
          "code": "export function groupBy<T>(array: T[], key: keyof T): Record<string, T[]> {\n  return array.reduce((groups, item) => {\n    const groupKey = String(item[key]);\n    if (!groups[groupKey]) {\n      groups[groupKey] = [];\n    }\n    groups[groupKey].push(item);\n    return groups;\n  }, {} as Record<string, T[]>);\n}\n",
          "filePath": "src/lib/utils.ts",
          "lineCount": 10,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 5
        },
        {
          "name": "removeDuplicates",
          "startLine": 278,
          "endLine": 292,
          "code": "export function removeDuplicates<T>(array: T[], key?: keyof T): T[] {\n  if (!key) {\n    return Array.from(new Set(array));\n  }\n  \n  const seen = new Set();\n  return array.filter(item => {\n    const value = item[key];\n    if (seen.has(value)) {\n      return false;\n    }\n    seen.add(value);\n    return true;\n  });\n}\n",
          "filePath": "src/lib/utils.ts",
          "lineCount": 15,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 10
        },
        {
          "name": "sortBy",
          "startLine": 300,
          "endLine": 301,
          "code": "export function sortBy<T>(\n  array: T[],\n",
          "filePath": "src/lib/utils.ts",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 313 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/lib/validation.ts",
      "lineCount": 348,
      "functions": [
        {
          "name": "sanitizeString",
          "startLine": 16,
          "endLine": 21,
          "code": "function sanitizeString(str: string): string {\n  return str\n    .trim()\n    .replace(/[<>\\\"'&]/g, '') // Remove potential XSS characters\n    .substring(0, 255); // Limit length to prevent DoS\n}\n",
          "filePath": "src/lib/validation.ts",
          "lineCount": 6,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "validateRateLimit",
          "startLine": 309,
          "endLine": 314,
          "code": "export function validateRateLimit(identifier: string, maxRequests: number = 100): boolean {\n  // This would connect to a rate limiting service in production\n  // For now, return true but log the attempt\n  console.log(`[RATE_LIMIT] Request from ${identifier} - Limit: ${maxRequests}/hour`);\n  return true;\n}\n",
          "filePath": "src/lib/validation.ts",
          "lineCount": 6,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "sanitizeSearchQuery",
          "startLine": 323,
          "endLine": 328,
          "code": "export function sanitizeSearchQuery(query: string): string {\n  return query\n    .trim()\n    .replace(/[<>\\\"'&%]/g, '') // Remove XSS and SQL injection characters\n    .substring(0, 100); // Limit length\n}\n",
          "filePath": "src/lib/validation.ts",
          "lineCount": 6,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "validateUserPermission",
          "startLine": 337,
          "endLine": 347,
          "code": "export function validateUserPermission(userRole: string, requiredPermission: string): boolean {\n  const rolePermissions: Record<string, string[]> = {\n    super_admin: ['all'],\n    barangay_admin: ['residents:crud', 'households:crud', 'settings:manage'],\n    clerk: ['residents:crud', 'households:crud'],\n    resident: ['residents:read_own'],\n  };\n\n  const permissions = rolePermissions[userRole] || [];\n  return permissions.includes('all') || permissions.includes(requiredPermission);\n}\n",
          "filePath": "src/lib/validation.ts",
          "lineCount": 11,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 348 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        }
      ]
    },
    {
      "filePath": "src/middleware.ts",
      "lineCount": 58,
      "functions": [
        {
          "name": "middleware",
          "startLine": 4,
          "endLine": 44,
          "code": "export function middleware(_request: NextRequest) {\n  const response = NextResponse.next();\n\n  // Content Security Policy\n  const cspHeader = `\n    default-src 'self';\n    script-src 'self' 'unsafe-eval' 'unsafe-inline' https://*.supabase.co https://vercel.live https://va.vercel-scripts.com;\n    style-src 'self' 'unsafe-inline';\n    img-src 'self' blob: data: https://*.supabase.co;\n    font-src 'self';\n    object-src 'none';\n    base-uri 'self';\n    form-action 'self';\n    frame-ancestors 'none';\n    block-all-mixed-content;\n    upgrade-insecure-requests;\n    connect-src 'self' https://*.supabase.co wss://*.supabase.co https://vercel.live;\n  `\n    .replace(/\\s{2,}/g, ' ')\n    .trim();\n\n  // Security headers\n  response.headers.set('Content-Security-Policy', cspHeader);\n  response.headers.set('X-Frame-Options', 'DENY');\n  response.headers.set('X-Content-Type-Options', 'nosniff');\n  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n  response.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');\n\n  // Remove X-Powered-By header\n  response.headers.delete('X-Powered-By');\n\n  // Strict Transport Security (only for production)\n  if (process.env.NODE_ENV === 'production') {\n    response.headers.set(\n      'Strict-Transport-Security',\n      'max-age=63072000; includeSubDomains; preload'\n    );\n  }\n\n  return response;\n}\n",
          "filePath": "src/middleware.ts",
          "lineCount": 41,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 3
        }
      ],
      "issues": [
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "middleware",
          "line": 4,
          "message": "Function 'middleware' has 41 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        }
      ]
    },
    {
      "filePath": "src/providers/AppProvider.tsx",
      "lineCount": 340,
      "functions": [
        {
          "name": "appReducer",
          "startLine": 71,
          "endLine": 147,
          "code": "function appReducer(state: AppState, action: AppAction): AppState {\n  switch (action.type) {\n    case 'SET_USER':\n      return {\n        ...state,\n        user: action.payload,\n        isAuthenticated: !!action.payload,\n      };\n    \n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n    \n    case 'SET_THEME':\n      return {\n        ...state,\n        theme: action.payload,\n      };\n    \n    case 'SET_PRIMARY_COLOR':\n      return {\n        ...state,\n        primaryColor: action.payload,\n      };\n    \n    case 'TOGGLE_SIDEBAR':\n      return {\n        ...state,\n        sidebarOpen: !state.sidebarOpen,\n      };\n    \n    case 'TOGGLE_MOBILE_MENU':\n      return {\n        ...state,\n        mobileMenuOpen: !state.mobileMenuOpen,\n      };\n    \n    case 'ADD_NOTIFICATION':\n      return {\n        ...state,\n        notifications: [\n          ...state.notifications,\n          {\n            ...action.payload,\n            id: `notif-${Date.now()}-${Math.random()}`,\n            timestamp: Date.now(),\n          },\n        ].slice(-10), // Keep only last 10 notifications\n      };\n    \n    case 'REMOVE_NOTIFICATION':\n      return {\n        ...state,\n        notifications: state.notifications.filter(n => n.id !== action.payload),\n      };\n    \n    case 'SET_LOCALE':\n      return {\n        ...state,\n        locale: action.payload,\n      };\n    \n    case 'SET_TIMEZONE':\n      return {\n        ...state,\n        timezone: action.payload,\n      };\n    \n    case 'RESET_STATE':\n      return initialState;\n    \n    default:\n      return state;\n  }\n}\n",
          "filePath": "src/providers/AppProvider.tsx",
          "lineCount": 77,
          "cyclomaticComplexity": 13,
          "cognitiveComplexity": 4
        },
        {
          "name": "login",
          "startLine": 152,
          "endLine": 153,
          "code": "  login: (user: User) => void;\n  logout: () => void;\n",
          "filePath": "src/providers/AppProvider.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "setTheme",
          "startLine": 156,
          "endLine": 157,
          "code": "  setTheme: (theme: 'light' | 'dark' | 'system') => void;\n  setPrimaryColor: (color: string) => void;\n",
          "filePath": "src/providers/AppProvider.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "toggleSidebar",
          "startLine": 160,
          "endLine": 161,
          "code": "  toggleSidebar: () => void;\n  toggleMobileMenu: () => void;\n",
          "filePath": "src/providers/AppProvider.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "notify",
          "startLine": 164,
          "endLine": 165,
          "code": "  notify: (type: Notification['type'], message: string) => void;\n  dismissNotification: (id: string) => void;\n",
          "filePath": "src/providers/AppProvider.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "setLocale",
          "startLine": 168,
          "endLine": 169,
          "code": "  setLocale: (locale: string) => void;\n  setTimezone: (timezone: string) => void;\n",
          "filePath": "src/providers/AppProvider.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "AppProvider",
          "startLine": 195,
          "endLine": 310,
          "code": "export function AppProvider({ children, initialUser = null }: AppProviderProps) {\n  const [state, dispatch] = useReducer(appReducer, {\n    ...initialState,\n    user: initialUser,\n    isAuthenticated: !!initialUser,\n    isLoading: false,\n  });\n\n  // Apply theme\n  useEffect(() => {\n    const root = document.documentElement;\n    \n    if (state.theme === 'system') {\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      root.classList.toggle('dark', prefersDark);\n    } else {\n      root.classList.toggle('dark', state.theme === 'dark');\n    }\n    \n    // Set primary color CSS variable\n    root.style.setProperty('--color-primary', state.primaryColor);\n  }, [state.theme, state.primaryColor]);\n\n  // Persist settings to localStorage\n  useEffect(() => {\n    try {\n      const settings = {\n        theme: state.theme,\n        primaryColor: state.primaryColor,\n        locale: state.locale,\n        timezone: state.timezone,\n      };\n      localStorage.setItem('app-settings', JSON.stringify(settings));\n    } catch (error) {\n      logger.error('Failed to save settings', { error });\n    }\n  }, [state.theme, state.primaryColor, state.locale, state.timezone]);\n\n  // Load settings from localStorage on mount\n  useEffect(() => {\n    try {\n      const savedSettings = localStorage.getItem('app-settings');\n      if (savedSettings) {\n        const settings = JSON.parse(savedSettings);\n        if (settings.theme) dispatch({ type: 'SET_THEME', payload: settings.theme });\n        if (settings.primaryColor) dispatch({ type: 'SET_PRIMARY_COLOR', payload: settings.primaryColor });\n        if (settings.locale) dispatch({ type: 'SET_LOCALE', payload: settings.locale });\n        if (settings.timezone) dispatch({ type: 'SET_TIMEZONE', payload: settings.timezone });\n      }\n    } catch (error) {\n      logger.error('Failed to load settings', { error });\n    }\n  }, []);\n\n  // Auto-dismiss old notifications\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = Date.now();\n      const oldNotifications = state.notifications.filter(\n        n => now - n.timestamp > 10000 // 10 seconds\n      );\n      oldNotifications.forEach(n => {\n        dispatch({ type: 'REMOVE_NOTIFICATION', payload: n.id });\n      });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [state.notifications]);\n\n  // Context value\n  const contextValue: AppContextValue = {\n    ...state,\n    \n    // Auth actions\n    login: (user: User) => {\n      dispatch({ type: 'SET_USER', payload: user });\n      logger.info('User logged in', { userId: user.id });\n    },\n    \n    logout: () => {\n      dispatch({ type: 'SET_USER', payload: null });\n      dispatch({ type: 'RESET_STATE' });\n      logger.info('User logged out');\n    },\n    \n    // Theme actions\n    setTheme: (theme) => dispatch({ type: 'SET_THEME', payload: theme }),\n    setPrimaryColor: (color) => dispatch({ type: 'SET_PRIMARY_COLOR', payload: color }),\n    \n    // UI actions\n    toggleSidebar: () => dispatch({ type: 'TOGGLE_SIDEBAR' }),\n    toggleMobileMenu: () => dispatch({ type: 'TOGGLE_MOBILE_MENU' }),\n    \n    // Notification actions\n    notify: (type, message) => {\n      dispatch({ type: 'ADD_NOTIFICATION', payload: { type, message } });\n    },\n    \n    dismissNotification: (id) => {\n      dispatch({ type: 'REMOVE_NOTIFICATION', payload: id });\n    },\n    \n    // Settings actions\n    setLocale: (locale) => dispatch({ type: 'SET_LOCALE', payload: locale }),\n    setTimezone: (timezone) => dispatch({ type: 'SET_TIMEZONE', payload: timezone }),\n  };\n\n  return (\n    <AppContext.Provider value={contextValue}>\n      <QueryClientProvider client={queryClient}>\n        {children}\n        {process.env.NODE_ENV === 'development' && <ReactQueryDevtools />}\n      </QueryClientProvider>\n    </AppContext.Provider>\n  );\n}\n",
          "filePath": "src/providers/AppProvider.tsx",
          "lineCount": 116,
          "cyclomaticComplexity": 11,
          "cognitiveComplexity": 21
        },
        {
          "name": "useApp",
          "startLine": 313,
          "endLine": 319,
          "code": "export function useApp() {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useApp must be used within AppProvider');\n  }\n  return context;\n}\n",
          "filePath": "src/providers/AppProvider.tsx",
          "lineCount": 7,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 4
        },
        {
          "name": "useAuth",
          "startLine": 322,
          "endLine": 325,
          "code": "export function useAuth() {\n  const { user, isAuthenticated, isLoading, login, logout } = useApp();\n  return { user, isAuthenticated, isLoading, login, logout };\n}\n",
          "filePath": "src/providers/AppProvider.tsx",
          "lineCount": 4,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "useTheme",
          "startLine": 327,
          "endLine": 330,
          "code": "export function useTheme() {\n  const { theme, primaryColor, setTheme, setPrimaryColor } = useApp();\n  return { theme, primaryColor, setTheme, setPrimaryColor };\n}\n",
          "filePath": "src/providers/AppProvider.tsx",
          "lineCount": 4,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "useNotifications",
          "startLine": 332,
          "endLine": 335,
          "code": "export function useNotifications() {\n  const { notifications, notify, dismissNotification } = useApp();\n  return { notifications, notify, dismissNotification };\n}\n",
          "filePath": "src/providers/AppProvider.tsx",
          "lineCount": 4,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        },
        {
          "name": "useUI",
          "startLine": 337,
          "endLine": 340,
          "code": "export function useUI() {\n  const { sidebarOpen, mobileMenuOpen, toggleSidebar, toggleMobileMenu } = useApp();\n  return { sidebarOpen, mobileMenuOpen, toggleSidebar, toggleMobileMenu };\n}\n",
          "filePath": "src/providers/AppProvider.tsx",
          "lineCount": 4,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1
        }
      ],
      "issues": [
        {
          "type": "file_too_large",
          "severity": "medium",
          "message": "File has 340 lines (max recommended: 300)",
          "suggestion": "Consider breaking this file into smaller, focused modules"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "appReducer",
          "line": 71,
          "message": "Function 'appReducer' has 77 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "appReducer",
          "line": 71,
          "complexity": 13,
          "message": "Function 'appReducer' has cyclomatic complexity of 13 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "function_too_large",
          "severity": "medium",
          "function": "AppProvider",
          "line": 195,
          "message": "Function 'AppProvider' has 116 lines (max recommended: 30)",
          "suggestion": "Break this function into smaller, single-purpose functions"
        },
        {
          "type": "high_cyclomatic_complexity",
          "severity": "high",
          "function": "AppProvider",
          "line": 195,
          "complexity": 11,
          "message": "Function 'AppProvider' has cyclomatic complexity of 11 (max recommended: 10)",
          "suggestion": "Reduce decision points by extracting conditional logic into separate functions"
        },
        {
          "type": "high_cognitive_complexity",
          "severity": "high",
          "function": "AppProvider",
          "line": 195,
          "complexity": 21,
          "message": "Function 'AppProvider' has cognitive complexity of 21 (max recommended: 15)",
          "suggestion": "Reduce nesting and simplify logic flow for better readability"
        }
      ]
    },
    {
      "filePath": "src/providers/ErrorBoundary.tsx",
      "lineCount": 262,
      "functions": [
        {
          "name": "withErrorBoundary",
          "startLine": 249,
          "endLine": 250,
          "code": "export function withErrorBoundary<P extends object>(\n  Component: React.ComponentType<P>,\n",
          "filePath": "src/providers/ErrorBoundary.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "WrappedComponent",
          "startLine": 253,
          "endLine": 254,
          "code": "  const WrappedComponent = (props: P) => (\n    <ErrorBoundary {...errorBoundaryProps}>\n",
          "filePath": "src/providers/ErrorBoundary.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/providers/index.tsx",
      "lineCount": 46,
      "functions": [
        {
          "name": "RootProvider",
          "startLine": 17,
          "endLine": 27,
          "code": "export function RootProvider({ children, initialUser }: RootProviderProps) {\n  return (\n    <ErrorBoundary level=\"page\" resetOnPropsChange>\n      <AppProvider initialUser={initialUser}>\n        <ErrorBoundary level=\"section\">\n          {children}\n        </ErrorBoundary>\n      </AppProvider>\n    </ErrorBoundary>\n  );\n}\n",
          "filePath": "src/providers/index.tsx",
          "lineCount": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/tests/accessibility.test.ts",
      "lineCount": 169,
      "functions": [
        {
          "name": "axe",
          "startLine": 10,
          "endLine": 15,
          "code": "const axe = async (container: any, config?: any) => {\n  // Mock implementation that simulates axe-core behavior\n  return {\n    violations: [] as any[],\n  };\n};\n",
          "filePath": "src/tests/accessibility.test.ts",
          "lineCount": 6,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 1
        },
        {
          "name": "expectNoViolations",
          "startLine": 18,
          "endLine": 20,
          "code": "const expectNoViolations = (results: any) => {\n  expect(results.violations).toHaveLength(0);\n};\n",
          "filePath": "src/tests/accessibility.test.ts",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "MockButton",
          "startLine": 23,
          "endLine": 25,
          "code": "const MockButton = ({ children, ...props }: any) => {\n  return React.createElement('button', props, children);\n};\n",
          "filePath": "src/tests/accessibility.test.ts",
          "lineCount": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "MockPage",
          "startLine": 27,
          "endLine": 50,
          "code": "const MockPage = () => {\n  return React.createElement(\n    'main',\n    null,\n    React.createElement('h1', null, 'Test Page'),\n    React.createElement(\n      'nav',\n      { 'aria-label': 'Main navigation' },\n      React.createElement(\n        'ul',\n        null,\n        React.createElement('li', null, React.createElement('a', { href: '/' }, 'Home')),\n        React.createElement('li', null, React.createElement('a', { href: '/about' }, 'About'))\n      )\n    ),\n    React.createElement(\n      'section',\n      null,\n      React.createElement('h2', null, 'Content Section'),\n      React.createElement('p', null, 'This is test content for accessibility validation.'),\n      React.createElement(MockButton, null, 'Accessible Button')\n    )\n  );\n};\n",
          "filePath": "src/tests/accessibility.test.ts",
          "lineCount": 24,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "testAccessibility",
          "startLine": 161,
          "endLine": 165,
          "code": "export const testAccessibility = async (component: React.ReactElement) => {\n  const { container } = render(component);\n  const results = await axe(container);\n  return results;\n};\n",
          "filePath": "src/tests/accessibility.test.ts",
          "lineCount": 5,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    },
    {
      "filePath": "src/tests/setup.tsx",
      "lineCount": 70,
      "functions": [
        {
          "name": "useRouter",
          "startLine": 7,
          "endLine": 14,
          "code": "  useRouter: () => ({\n    push: vi.fn(),\n    replace: vi.fn(),\n    back: vi.fn(),\n    forward: vi.fn(),\n    refresh: vi.fn(),\n    prefetch: vi.fn(),\n  }),\n",
          "filePath": "src/tests/setup.tsx",
          "lineCount": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "useSearchParams",
          "startLine": 15,
          "endLine": 16,
          "code": "  useSearchParams: () => new URLSearchParams(),\n  usePathname: () => '/',\n",
          "filePath": "src/tests/setup.tsx",
          "lineCount": 2,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        },
        {
          "name": "default",
          "startLine": 21,
          "endLine": 24,
          "code": "  default: ({ src, alt, ...props }: any) => {\n    // eslint-disable-next-line @next/next/no-img-element\n    return <img src={src} alt={alt} {...props} />;\n  },\n",
          "filePath": "src/tests/setup.tsx",
          "lineCount": 4,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 0
        }
      ],
      "issues": []
    }
  ]
}